Leveraging Shape Completion for 3D Siamese Tracking

Silvio Giancola*, Jesus Zarzar*, and Bernard Ghanem

King Abdullah University of Science and Technology (KAUST), Saudi Arabia

{silvio.giancola,jesusalejandro.zarzartorano,bernard.ghanem}@kaust.edu.sa

Abstract

Point clouds are challenging to process due to their spar-
sity, therefore autonomous vehicles rely more on appear-
ance attributes than pure geometric features. However, 3D
LIDAR perception can provide crucial information for ur-
ban navigation in challenging light or weather conditions.
In this paper, we investigate the versatility of Shape Com-
pletion for 3D Object Tracking in LIDAR point clouds. We
design a Siamese tracker that encodes model and candi-
date shapes into a compact latent representation. We regu-
larize the encoding by enforcing the latent representation
to decode into an object model shape. We observe that
3D object tracking and 3D shape completion complement
each other. Learning a more meaningful latent represen-
tation shows better discriminatory capabilities, leading to
improved tracking performance. We test our method on
the KITTI Tracking set using car 3D bounding boxes. Our
model reaches a 76.94% Success rate and 81.38% Precision
for 3D Object Tracking, with the shape completion regular-
ization leading to an improvement of 3% in both metrics.

1. Introduction

Autonomous driving is changing the way we envision
human transportation. Introducing fully autonomous vehi-
cles into our cities implies sharing the roads with existing
vehicles. Thus, it is imperative for autonomous vehicles
to outperform humans in the task of driving. Understand-
ing the urban environment and the human driving process
is crucial for an agent to become capable of achieving and
exceeding human driving performance. Accordingly, au-
tonomous vehicles need to outperform human perception so
to cope with an unbounded set of unpredictable situations.
An autonomous vehicle adapts its driving policy by un-
derstanding its environment. Modules for Road Detec-
tion [11, 6] and Road-sign Recognition [19, 54] indicate to
the car where and how to drive. Object Detection meth-
ods [8, 42] constrain the vehicle‚Äôs path in order to avoid
collisions while Object Tracking algorithms [59, 47] pre-

* Both authors contributed equally to this work.

Figure 1. Our tracking model combines a Siamese network with an
Auto-Encoder. The Siamese network encodes sparse 3D shapes
into a latent representation z, in which shapes belonging to the
same object have a high cosine similarity. By regularizing our
tracker to auto-encode model shapes, we enforce that the encoder
maps point clouds into meaningful representations. The effect of
regularization is visualized by decoding a candidate shape.

dict their motion to anticipate danger. Autonomous vehicles
need to sense both appearance and geometric components
of the environment to extrapolate the semantic information
required for driving. RGB cameras provide both appear-
ance and geometric information by either inferring depth
from single RGB cameras [55, 64] or by stereoscopy [61, 9].
Depth and shape completion [36, 23] are commonly used to
improve the limited sensing capability of RGB sensors.

Alternatively, LIDAR systems directly sense geometry
in a more accurate manner. LIDAR sensors are less sensi-
tive to light and weather conditions, so they provide more
reliable information in a much larger range of driving con-
ditions. However, LIDARs generate sparse point clouds,
not readily suitable for conventional CNN processing. Most
current works pre-process 3D point clouds for use in CNNs
by either voxelizing the 3D space [29, 21] or by project-
ing point clouds into a planar space [53, 27, 10, 51]. How-
ever, these methods lose Ô¨Åne-grained geometric details. It
is worthwhile to note that only a few works deal directly
with point clouds [43, 1]. We believe appearance informa-
tion is insufÔ¨Åcient to reach better-than-human driving per-
formance, especially in challenging driving environments.

11359

ùëßÃÇùëßŒ®Œ¶Cos. Sim.Model Shape Decoded ModelCandidate ShapesŒ¶Œ®Visualization OnlyDecoded Best CandidateIn this work, we propose an online 3D Object Tracking
method based purely on LIDAR. First, we leverage geo-
metric features computed from sparse point clouds using
the shape-completion network proposed by Achlioptas et
al. [1]. These features are used in a Siamese network to
create a latent representation in which a cosine similarity
matches partial object point clouds to a model shape. Then,
we regularize the encoding via an auto-encoder network to
generate geometrically meaningful latent representations.
We expect improved tracking performance by enriching the
latent representation with semantic geometric information
from the given object.

Currently, the main challenges faced in tracking relate to
(a) similarity metrics, (b) model updates, and (c) occlusion
handling. Our 3D tracker tackles these three aspects by (a)
using Siamese networks, which have been shown to achieve
state-of-the-art performance on 2D visual object tracking,
adapted for processing 3D LIDAR point clouds, (b) lever-
aging the shape invariance in rigid bodies to generate a more
complete model by aggregating its shape in time, and (c)
enforcing our model to understand shape regardless of oc-
clusions through shape completion.

Contributions: Our contributions are three-fold. (i) To the
best of our knowledge, we propose the Ô¨Årst 3D Siamese
tracker applied to point clouds rather than images. (ii) We
propose to regularize the Siamese network‚Äôs latent space
such that it resembles the latent space of a shape comple-
tion network. (iii) We show that regularizing our network
with semantic information results in better discrimination
and tracking. To ensure reproducibility and to promote fu-
ture research, all source code, trained model weights, and
dataset results are publicly available1.

2. Related Work

Our work takes insights from Object Tracking based on
Siamese networks, Shape Representation and Completion
based on Auto-encoders, and Search Strategy.

Visual Object Tracking. Tracking is the task of identify-
ing the trajectory of an object through time, either in im-
ages [28, 37] or in 3D space [34, 48]. Visual tracking fo-
cuses on image patches across consecutive frames, that rep-
resent visual attributes [28], objects [39], people [34] or ve-
hicles [17]. The problem is commonly tackled by tracking-
by-detection, where a model representation is built after the
Ô¨Årst frame and a search space is constructed to trade off
computational costs and dense space sampling. Early works
on tracking were based on Correlation Filtering [2], but cur-
rent better performing methods rely on deep CNNs [24]
and Siamese networks [5]. Bertinetto et al. [3] introduced
Siamese networks for visual object tracking. They proposed
a fully-convolutional Siamese network and achieved state-

1https://github.com/SilvioGiancola/ShapeCompletion3DTracking

of-the-art performance on the VOT benchmark [28]. Recent
Siamese trackers estimate boundary Ô¨Çows [31], use contex-
tual structure [20], attention [57], distraction [65], seman-
tic information [63], triplet losses [14] and region proposal
networks [32] to improve tracking performance. To the best
of our knowledge, our work is the Ô¨Årst 3D adaptation of
Siamese networks for 3D point cloud tracking.

3D Object Tracking. 3D Object Tracking tackles track-
ing from a geometric perspective.
Instead of following
appearance attributes using 2D bounding boxes (BBs), it
computes the position of targets in the 3D world using ge-
ometry contained in 3D BBs. 3D object tracking either
focuses on RGB-D information [48], by mimicking the
2D object tracking methods but with an additional depth
channel [4, 33], or it focuses on purely geometric fea-
tures [49, 34]. Recent work tackles 3D tracking using Bird
Eye Views (BEV) of LIDAR point clouds [35, 60]. Luo et
al. [35] input multiple BEV frames to a deep CNN to per-
form detection, tracking, and motion forecasting. Yang et
al. [60] used up to 35-channel BEV frames. However, these
methods lose Ô¨Åne-grained shape information by projecting
the point cloud in the BEV. LIDARs sense the environment
from a single point of view inducing self-occlusion, i.e. in-
complete observations [13]. Note that on images, occlusion
leads to noisy observations. Moreover, tracking assumes a
BB prior for the Ô¨Årst frame and, since the object is rigid, its
extent in 3D space in successive frames remains constant.

Shape Representation. 3D shapes are complex entities to
manage as they are usually sparse and lying in a continu-
ous space, unlike images that are stored in dense and dis-
crete matrices. Several works focus on Ô¨Ånding efÔ¨Åcient ge-
ometric representations [52] such as occupancy grids and
TSDF cubes. They are commonly used for 3D recon-
struction [41, 18] but suffer from large-scale memory in-
efÔ¨Åciency and require a space discretization which loses
Ô¨Åne-grained details. Recent works compress 3D shapes
using auto-encoders to efÔ¨Åciently handle geometric infor-
mation [58, 56, 12]. They typically encode-decode shapes
into different representations. Those auto-encoders provide
a compact latent shape representation of down to 10 dimen-
sions. Alternatively, Kundu et al. [30] used RGB infor-
mation to decode dense 3D meshes of vehicles using Fast
RCNN [44] and a differentiable Render-and-Compare loss.
Achlioptas et al. [1] proposed to solve shape completion
using an efÔ¨Åcient auto-encoder based on PointNet [43] for
point cloud to point cloud auto-encoding. They regress par-
tial point clouds into full shapes. Alternatively, Stutz et
al. [50] proposed an occupancy grid shape completion net-
work based on a two-stage training process. Also, Engel-
mann et al. [15] proposed an energy minimization method
that aligns shape and pose concurrently in stereo images.

Search Strategy. Search spaces used in visual object track-
ing are generally dense (exhaustive). Bertinetto et al. [3]

21360

used correlation Ô¨Åltering methods to obtain a similarity
score for the whole search space. However, exhaustive
search space strategies are not realistically transferable to
the continuous and denser 3D space. This is commonly
solved by relying on Kalman Ô¨Ålters, Particle Ô¨Ålters, or Gaus-
sian mixture models to reduce the search space by providing
candidate object proposals [45, 62]. At each frame, par-
ticles are sampled according to a probability distribution.
Only the selected particles are observed and the probability
distribution is updated according to the observation. Re-
cently, Karkus et al. [25] proposed a learnable particle Ô¨Ålter
network. In our experiments, we choose to disentangle the
search space and the similarity function, a common prac-
tice done in 2D tracking, by using an approximation of the
exhaustive search detailed in the experiments.

3. Methodology

Herein, we propose a 3D Siamese tracker with a regular-
ization on its latent space. The tracker is regularized to learn
an encoding containing semantically meaningful informa-
tion. An overview of our network is shown in Figure 1.

3.1. Siamese Tracker

c} are encoded into latent vectors {zt

Our 3D Siamese tracker takes as input a sequence of
point clouds (tracklet), in which a given object exists, along
with an initial 3D BB corresponding to the position of the
object in the Ô¨Årst frame. For a frame at time t, a set of can-
didate shapes {xt
c} and
compared with the latent vector ÀÜzt from a model shape ÀÜxt.
The best candidate is selected to be the object in the current
frame, and the model shape ÀÜx is updated accordingly.
Encoding. Our encoder Œ¶(¬∑) is inspired from previous work
on shape completion by Achlioptas et al. [1]. This encoder
consists of 3 layers of 1D-convolutions followed by ReLU
layers [40] and BN layers [22] with Ô¨Ålter size [64, 128, K],
as shown in Figure 2. The output of the last BN layer is
followed by a max pooling across the points to obtain a K-
dimensional latent vector. We found K = 128 to be a suit-
able size for the latent vector, as it provides the best trade-
off between computational efÔ¨Åciency, latent space compact-
ness, and tracking performance. The input to our network
is pre-processed to have N = 2048 points by randomly
discarding or duplicating points, so to use mini-batches in
training. Note that more than 96% of the vehicles in the
KITTI dataset have less than 2048 points. As compared to
the network of [1], we leverage a more compact yet efÔ¨Åcient
latent space and a shallower network to reduce the size of
the overall model from ‚àº 140K to ‚àº 25K parameters.
Similarity Metric. The encoder Œ¶(x) extract a latent rep-
resentation z from a point cloud x. To compare a pair of
shapes x and ÀÜx, we measure the cosine similarity between
their respective latent vectors z and ÀÜz as per Equation (1).

Figure 2. Our encoder takes as input a point cloud with N = 2048
points. Point clouds are encoded into a K-dimensional (K = 128)
latent vector z using 3 layers of 1D CNN with ReLU and BN.

CosSim(z, ÀÜz) =

z‚ä§ÀÜz

kzk2kÀÜzk2

(1)

Tracking Loss. For any given frame being used in training,
we designate x to be the tracked object‚Äôs point cloud and ÀÜx
to be the ground truth model obtained by concatenating the
object‚Äôs point clouds across all frames in the tracklet. We
train our Siamese network to regress a function of the dis-
tance between a candidate shape x and the model shape ÀÜx,
according to Equation (2). The poses of x and ÀÜx are param-
eterized by the 3 degrees of freedom of an object on a plane
(tx,ty,Œ±). The distance d(¬∑, ¬∑) is taken to be the L2-norm
k ¬∑ k2 of the difference between the parameterized poses.
The angle Œ±, given in degrees, is weighted with a factor of
1
5 to have the same scale as tx and ty which are given in me-
ters. We chose the differentiable function œÅ(¬∑) to be a Gaus-
sian with ¬µ = 0, œÉ = 1. The purpose of œÅ(¬∑) is to soften the
distance between positive and negative samples. œÅ(¬∑) takes
a value of one when the distance is zero and decays as the
distance increases. We then regress our similarity metric
CosSim(¬∑, ¬∑) using an MSE loss as shown in Equation (2).
Minimizing this loss encourages our encoder to increase the
similarity between partial and complete shape to the same.

Ltr =

1
n X

x

(cid:16)CosSim(cid:0)œÜ(x), œÜ(ÀÜx)(cid:1)‚àíœÅ(cid:0)d (x, ÀÜx)(cid:1)(cid:17)2

(2)

3.2. Shape Completion Regularization

It is important to regularize the Siamese network in order
to embed into the latent representation generative proper-
ties of shape that are useful in discrimination. Such an em-
bedding helps in generalizing to cases which aren‚Äôt seen in
training. Our regularization enforces the Siamese network‚Äôs
latent space to lie within a shape representation space. Such
representation space embeds valuable semantic character-
istics deÔ¨Åning the object to track in a compact, meaning-
ful, and efÔ¨Åcient representation. We provide qualitative ev-
idence that the representation space learned by our model
holds the required semantic characteristics by decoding la-
tent representations as shown in Figure 4 Quantitative evi-
dence is given through the improved tracking performances
obtained in Table 1.
Decoding. Our decoder Œ®(z) is inspired by the shape com-
pletion network employed by Achlioptas et al. [1]. Our de-
coder is composed of two fully connected layers that decode

31361

1D conv+ ReLU+ BNNx3Nx64Nx128NxKmaxpoolùëß1D conv+ ReLU+ BN1D conv+ ReLU+ BNa K = 128-dimensional latent vector z = Œ¶(x) into M x3
values representing M 3D points for a reconstructed shape
Àúx = Œ®(Œ¶(x)). We use M = 2048 and a hidden layer of
size 1024 for a total of ‚àº 6.4M parameters. Alternatively,
Achlioptas et al. [1] decoded into a denser shape of 4096
points, which requires more than twice the number of pa-
rameters in our decoder network.

Completion Loss. Adding a completion loss as a regu-
larizer for our Siamese network boosts the network‚Äôs per-
formance by enforcing the latent representation to hold se-
mantic information of the tracked class. While other works
use the Earth Mover‚Äôs Distance [46] to compare the model
shape ÀÜx and the decoded model shape Àúx = Œ®(Œ¶(ÀÜx)), we
use the Chamfer distance [16] (according to Equation (3)),
since it is simpler to compute [1]. The tracking loss enforces
encoded partial shapes to be similar to their respective en-
coded model, and the completion loss enforces the encoded
model to hold semantic information to enable its decoding.
Thus, this regularization is used to enforce the latent space
learned by the Siamese network to hold meaningful shape
semantic information.

Lcomp = X

ÀÜxi‚ààÀÜx

min
Àúxj ‚ààÀúx

3.3. Training

kÀÜxi ‚àí Àúxjk2

2 + X

Àúxj ‚ààÀúx

min
ÀÜxi‚ààÀÜx

kÀÜxi ‚àí Àúxjk2

2 (3)

We pre-train our encoder-decoder network Œ®(Œ¶(¬∑)) us-
ing ShapeNet [7] by taking 5997 samples from the ‚Äúcar‚Äù
class. Our model is Ô¨Åne-tuned by minimizing both track-
ing and completion losses. First, we crop and center points
lying inside the object‚Äôs ground truth BB {bt}t‚àà[1,..,T ] for
all frames in a given tracklet. Then, we concatenate the
cropped and centered object point clouds to generate an
aligned model shape ÀÜx. Around the ground truth object
point cloud at time t, we crop a set of C candidate BBs
in order to create the candidate shapes {xt
c}c‚àà[1,..,C]. The
candidate BBs are sampled from a multivariate Gaussian
distribution for the three planar degrees of freedom (tX , tY ,
Œ±) centered around the current object‚Äôs ground truth BB.

Both the model shape ÀÜx and the set of candidate shapes
{xt
c}c‚àà[1,..,C] are encoded into their respective latent rep-
resentations ÀÜz and {zt
c}c‚àà[1,..,C]. The cosine similarity be-
tween the candidates‚Äô latent representations {zt
c}c‚àà[1,..,C]
and the model latent representation ÀÜz is computed accord-
ing to Equation (1). The similarity scores are regressed to
their relative Gaussian distance according to Equation (2).

Simultaneously, the model shape ÀÜx is auto-encoded into
Àúx and the Chamfer loss between ÀÜx and Àúx is minimized as
in Equation (3). Note that we auto-encode the model shape
ÀÜx into itself, instead of encoding the candidate shapes, as is
done for shape completion. This enforces the latent vector
to decode into the most complete car shape we have avail-
able, i.e. the model shape ÀÜx.

The two losses are minimized jointly as in Equation (4),
with the completion loss being weighted by Œªcomp. We use
the Adam optimizer [26] to train our model with an initial
learning rate of 1e‚àí4, Œ≤1 of 0.9, and a batch size of 64. We
reduce the learning rate at each plateau for the validation
loss using a patience of 3 and a ratio of 0.1.

L = Ltr + ŒªcompLcomp

(4)

3.4. Testing

Since we are interested in online tracking, 3D track-
lets are inferred frame-by-frame. The shape contained in
the tracklet‚Äôs Ô¨Årst BB is used to initialize the model shape
ÀÜx. We track the object by looking over a set of candidate
shapes in the frame at time t and comparing them to ÀÜx us-
ing our Siamese network. The candidate with maximum
cosine similarity score is chosen to be the target object for
the frame. The model shape ÀÜx is then updated by appending
to it the chosen candidate shape. This update step makes the
model sensitive to drift, as poorly selected candidates lead
to a worse model which subsequently selects worse can-
didates. The same problem is encountered in 2D Siamese
tracking, commonly solved by not updating the model at all.
However, we show that our model performs better when the
model is updated at each frame.

Exhaustively searching for candidates in the three de-
grees of freedom would incur very high computational cost.
Thus, an approximation of an exhaustive search is lever-
aged to generate the candidate shapes. Approximating the
exhaustive search allows us to assess the discriminative per-
formance of our Siamese network by assuming the ground
truth box will be included as one of the candidates as would
be the case with an exhaustive search. This is a common
practice in 2D trackers. Our exhaustive search is performed
by generating candidates using a grid for the three degrees
of freedom (tX , tY , Œ±) centered around the current ground
truth. In our experiments, we compare different sampling
methods such as Kalman Filters, Particle Filters, and Gaus-
sian Mixture Models, which would be used to provide can-
didates for our tracker in a more realistic setting.

4. Experiments

We use the training set of the KITTI tracking dataset [17]
for our experiments. It was split as follows: scenes 0-16
were used for training, scenes 17-18 for validation, and
scenes 19-20 for testing. We adapt KITTI for 3D single
object tracking by generating a tracklet for each instance of
a car appearing in each of the scenes. Tracklets are created
by concatenating the set of frames in a scene in which a
given car instance appears. For each tracklet, only the Ô¨Årst
frame includes the ground truth BB. For our task, we eval-
uate for Single Object Tracking using the One Pass Evalua-
tion (OPE) [28]. It deÔ¨Ånes the overlap as the IOU of a BB

41362

with its ground truth, and the error as the distance between
both centers. The Success and the Precision metrics are de-
Ô¨Åned using the overlap and error AUC. For our 3D object
tracking purposes, we predict 3D BBs and so we estimate
the precision as the AUC for 3D errors from 0 to 2m. We
exhaustively generate candidates in a current frame by sam-
pling over a grid of [‚àí3, 3]m for tx and ty, and [‚àí10, 10]o
for Œ± with a resolution of 1m and 10o, respectively. The
grid is centered around the current ground truth BB to ap-
proximate an exhaustive search. Experiments are run using
PyTorch 0.4.1 on a 11GB NVidia GTX1080Ti GPU.

4.1. Ablation Studies

We present an ablation study of our methodology in Ta-
ble 1, highlighting the importance of the shape completion
regularization for the 3D Siamese Tracker. Results are pro-
vided for Ô¨Åve different cases: (i) an initialization of our net-
work with random weights, (ii) our network pre-trained on
ShapeNet, (iii) our network trained to minimize the comple-
tion loss only, (iv) our network trained as a regular Siamese
tracker by using only our tracking loss, and (v) our network
trained with both the tracking and completion losses. We
observe that training to minimize alone the completion loss
or the tracking loss provides better results than pre-training
on ShapeNet and a random initialization. Also, combining
both losses enhances the tracker‚Äôs performance beyond ei-
ther method isolated.

Table 1. Ablation study for different losses we are training with.
We report the OPE Success/Precision metrics for different losses
averaged over 5 runs. Best results shown in bold.
Success

Precision

Ablation

(i) Before Training (Random)
(ii) Pre-trained on ShapeNet
(iii) Ours ‚Äì Completion only
(iv) Ours ‚Äì Tracking only
(v) Ours ‚Äì Œªcomp@1e‚àí6

39.06
44.54
65.36
73.96
76.94

41.79
49.38
70.62
78.68
81.38

Completion Loss. Figure 3 (top) shows detailed results ob-
tained as the regularization parameter Œªcomp is varied. As
less weight is given to the completion loss, the performance
moves from the results obtained with only the completion
loss to those obtained with only the tracking loss. The best
trade-off is obtained at a point where both losses are in the
same order of magnitude. This occurs with Œªcomp between
1e‚àí5 and 1e‚àí6, where we obtain peak performance.
Latent representation dimension.
Figure 3 (bottom)
shows how varying the size of our latent representation z
affects the performances. It can be observed that a larger
latent representation generally performs better. This is due
to the fact that larger latent representations encode more ex-
pressive capabilities. However, this reaches a maximum at
a size of around K = 128 dimensions. Larger latent rep-

Ablation study for different regularization Œª

Figure 3.
of the shape completion (top) and for the latent representation
size K (bottom). We report the OPE Success/Precision metrics
for different values of Œª

comp and K averaged over 5 runs.

comp

resentations require more expensive computations, but the
difference is not signiÔ¨Åcant when comparing a latent repre-
sentation of 32 dimensions against a 128-dimensional rep-
resentation. Thus, it is best to use the representation which
provides the best tracking performance, i.e. K = 128.

Reconstruction Performances. Table 2 shows shape com-
pletion results on the KITTI dataset, using the metrics de-
Ô¨Åned in [50]. Our method (v) outperforms the pure comple-
tion one (iii) showing that completion also beneÔ¨Åts from the
different point of view provided during tracking. However,
our decoder is not yet on par with current state-of-the-art.

Table 2. Completion performances on KITTI Tracking.

Method

(iii)

(iv)

(v)

[15]

[50]

Comp. [m]

0.188

0.690

0.179

0.130

0.078

Qualitative results. Figure 4 shows qualitative results re-
garding decoded shapes Œ¶(x). We can observe that training
for tracking only results in a decoded point cloud contain-
ing a large amount of noise. Already, the model pre-trained
on ShapeNet provides a reconstruction which resembles a
general car but not the speciÔ¨Åc candidate car. Training
for shape completion only provides a shape reconstruction
which is a more complete version of the original candidate
shape. Regularizing tracking with shape completion by us-

51363

Figure 4. Example of model completion (from left to right): (i) Candidate point cloud, (ii) Decoded candidate point cloud when it is
= ‚àû), (iv) De-
pre-trained with ShapeNet, (iii) Decoded candidate point cloud when it is trained with completion loss only (Œª
coded candidate point cloud when it is trained with tracking loss only (Œª
= 0) (the decoder trained for completion is used for fair
comparison), (v) Decoded candidate point cloud when it is trained with both tracking and completion losses (Œª

= 1e‚àí6).

comp

comp

comp

ing Œªcomp = 1e‚àí6 provides a reconstruction similar to that
using shape completion only. However, the model trained
for shape completion only follows the candidate shape more
closely. A regularized loss is able to improve tracking re-
sults while conserving enough class information as to re-
construct the encoded shape from its latent vector.

Figure 5 illustrates the activations obtained from the co-
sine similarity for a set of samples obtained around an ex-
haustive search. We observe that a randomly initialized
model generates high scores everywhere, hence providing
a bad discrimination. A model pre-trained on ShapeNet
is able to better discriminate the shape to track than ran-
dom initialization, but is still distracted by the environment,
confusing other shapes for the car. Our model is able to
discriminate fairly well between the ground truth car and
the surrounding areas; there are high activations only in the
vicinity of the ground truth box. Note that the ideal shape
we expect to obtain for the activations is a Gaussian cen-
tered at the ground truth BB, as regressing to in training.

4.2. Model Fusion and Shape Aggregation

We construct and update a model ÀÜx for the target object‚Äôs
shape as we track it. By default, the model is maintained as
a point cloud. Our update step for the model after iteration
t consists of concatenating the points of the tracked shape
in frame xt with the current model. An alternative is to
maintain a model by averaging the latent representations.
We investigate the effects of fusing either point clouds or
latent representations as well as the effects of different types
of aggregation in time for both representations. We test the
different shape fusions and aggregations in our method. We
report the main results in Table 3.

Early/Late Fusion. We update the model by either con-
catenating the shape point clouds xt (Early Fusion) or ag-
gregating the latent shape representations zt (Late Fusion).
Early Fusion requires a larger amount of memory to store
the model shape. Late Fusion allows for a more memory-
efÔ¨Åcient representation for point clouds, since we only need
to keep a latent vector to represent a whole shape. It is also
more computationally efÔ¨Åcient since the model is not en-
coded several times during testing.

Figure 5. Heatmap of model cosine similarity scores on an ex-
haustive search space grid: From bottom to top: (i) activation us-
ing random weights model, (ii) activation on pre-trained model
(ShapeNet), (iii) our model.

Table 3. OPE Success/Precision for different Data Fusion and
Model Aggregation. All results are averaged over 5 runs. Best
representation aggregation shown in bold.

Fusion
Data Representation

Early Fusion

Late Fusion

PC

Latent

First shape only
Previous shape only
First and prev. shapes
All previous shapes
Median Pooling
Max Pooling

54.6 / 64.2
64.5 / 69.7
75.4 / 82.7
76.9 / 81.4

‚Äì / ‚Äì
‚Äì / ‚Äì

54.6 / 64.1
64.4 / 69.6
69.1 / 78.1
63.9 / 73.2
59.7 / 67.6
71.5 / 75.6

61364

Shape Aggregation. We investigate different types of
shape aggregations.
In particular, we try using the shape
in the Ô¨Årst frame only, the previous shape only, an aggrega-
tion of the the Ô¨Årst and previous shapes, and an aggregation
of all the previous shapes. We also investigate aggregating
the latent representations by either computing the average,
the median, or the max of the vectors across time.

Analysis. As shown in Table 3, concatenating point clouds
(Early Fusion) performs generally better than fusing the la-
tent vectors (Late Fusion). This is mainly due to our com-
pletion loss designed to handle arbitrary shapes sampled at
2048 points. We do not include any loss that would train our
network to aggregate latent vectors. As a result, late fusion
does not perform as well as concatenating point clouds.

Using an aggregation of only the Ô¨Årst or the previous
frame does not perform well. In particular, the number of
points belonging to the object in question in a single frame
can be signiÔ¨Åcantly small, which impedes a proper shape
representation. Should this happen in the Ô¨Årst frame, it will
imply a bad initial representation. A low point count when
tracking using the previous frame will induce drifting.

Fusing the Ô¨Årst and previous frames performs surpris-
ingly well and provides the best precision. We believe that
the two distant representations complement each other, par-
ticularly by limiting the amount of translational drift in the
Ô¨Årst frames given an initial bad representation. The shapes
in the Ô¨Årst frames typically contain a limited number of
points, since they are sensed from a large distance. They
provide a very incomplete shape information, but are still
helpful to localize roughly its position although not its ori-
entation. The full model will inevitably drift while the fu-
sion of Ô¨Årst and previous frame avoids initial drifts to a cer-
tain extent, thus having an improved precision.

For the latent representation, median pooling is less ef-
fective than average pooling, but max pooling provides the
best performance. We argue that it interacts well with the
max pooling layer at the end of our encoder network. By
consecutively max pooling over the shape‚Äôs point features
(last layer of our encoder) and over all the previous latent
vectors, we actually pool over all the shape‚Äôs point feature
in a tracklet, which provide a more global model latent rep-
resentation. Still, this is not as effective as Early Fusion.

4.3. Search Space

DeÔ¨Åning an efÔ¨Åcient search space is extremely difÔ¨Åcult
in 3D due to the continuity and cubic nature of 3D space.
Thus, an exhaustive search becomes infeasible when a very
Ô¨Åne search space is required. To overcome this limitation,
we use a Kalman Filter, Particle Filter, and Gaussian Mix-
ture Model to generate candidates. We apply our network
using more realistic search spaces, which do not use the
ground truth BB, as opposed to the exhaustive search ap-
proximation. We argue that our model has good discrimi-

nating capabilities, but is limited by the quality of proposed
candidates. To support our claim, we report the results ob-
tained by scoring the candidates using their distance to the
ground truth object BB ‚Äì the best possible similarity met-
ric ‚Äì along with the results obtained using our best model
with both early fusion and late fusion. Results are shown in
Table 4. It can be observed that our model reaches perfor-
mances similar to those obtained by selecting the candidate
closest to the ground truth, which emphasize the effective-
ness of our similarity metric for discrimination.

Table 4. OPE Success and Precision for different Search Space.
All results are averaged over 5 runs.

Fusion
Data Repres.

Early

PC

Late
Latent

Closest
Space

Kalman Filter
Particle Filter
GMM(k= 25)

41.3 / 57.9
34.2 / 46.4
35.6 / 49.1

37.4 / 52.1
33.3 / 44.9
34.0 / 46.1

43.7 / 58.3
38.4 / 49.5
37.9 / 49.3

4.4. Comparison with Baselines

To compare our method for 3D tracking, we create two
baselines due to the absence of 3D tracking methods for
this speciÔ¨Åc task. We take as baselines a state-of-the-art 3D
detection method as well as a 2D tracker. The results from
these baselines are reported along with our best model using
exhaustive search and our best model using a Kalman Ô¨Ålter
in Table 5. Evaluation metrics are reported using both the
3D IOU on 3D BBs and the 2D BEV IOU on BEV BBs.

Table 5. Baseline comparison using the 3D OPE (3D BB) and the
2D OPE on BEV frames.

Test

STAPLECA
AVOD Tracking
Ours - Kalman Filter
Ours - Exhaustive

OPE3D

‚Äì / ‚Äì

63.16 / 69.74
40.09 / 56.17
76.94 / 81.38

OPE2D

31.60 / 29.30
67.46 / 69.74
48.89 / 60.13
76.86 / 81.37

3D Detection. For the 3D detection baseline, we pair the
AVOD-FPN [29] detector with an online matching algo-
rithm. AVOD-FPN utilizes both LIDAR point clouds and
RGB images to obtain 3D detections. We use the detection
for every frame in our tracklets and preform tracking-by-
detection by matching objects frame-by-frame. The object
in frame t is selected as the BB with the highest overlap
with the BB tracked in frame t ‚àí 1.
2D Tracker. We compare against the popularized 2D
STAPLECA tracker [2, 38], when applied to BEV data.
BEV images are extracted from point clouds in our track-
lets by projecting points into the ground plane. The result-
ing 2D tracklets are then fed to the STAPLECA tracker. This
method provides a LIDAR-only tracker as a fair baseline for
our method, which also only relies on LIDAR input.

71365

Analysis. Table 5 shows the comparative results with track-
ing baselines. Our exhaustive model performs better than
both baselines, while the model using a Kalman Ô¨Ålter is able
to outperform the 2D Tracker.

5. Discussions

Training on complete models.
In our experiments, we
auto-encode a complete model shape obtained by concate-
nating all the point clouds in a tracklet. We then enforce
candidate shapes belonging to the same object as our model
to encode into a vector with a high cosine similarity be-
tween itself and the latent representation of our model. An
alternative would be to enforce partial shapes belonging to
an object at different times to be similar to each other and
partial shapes not belonging to the object to be dissimilar
from those belonging to the object.
In particular, we at-
tempted to provide the object at time t as a target for our
Siamese network in place of the full model. However, bet-
ter results were obtained by using a full model as the target.
A natural extension to training using objects from the
same time t is to concatenate different combinations of
shapes from the same tracklet at different times. This aug-
mentation is possible since we train our network to com-
plete shape i.e. to be invariant to occlusions from different
views. This is an intermediate step between training using a
single frame as a model and using the whole tracklet to cre-
ate a model shape for the Siamese network. However, this
augmentation increased training time exponentially and did
not provide further improvements to our tracking results.
There are not enough points in every frame to learn the
proper shape of the car without auto-encoding a full model.

Ground included in the car model. The model is pre-
trained on Shape net, which has complete shapes without
noisy points such as a road.
In our test, we scaled the
BBs by a factor of 1.25 since the original BBs are too tight
around the cars and part of the border of cars lie outside
their BBs. Such consideration account for 10% of the per-
formances. For this reason, it is possible to see the road in
Figure 4, but we believe that including the road does not
negatively affect the shape representation. We also consid-
ered a Ô¨Åxed offset of 0.5m which proved to be less effective.

Robustness on Occlusion. With the tracking loss only, our
method (iv) performs a Success/Precision of 76.9/80.1 and
72.8/77.4 for fully visible and occluded samples in KITTI,
respectively. Adding shape completion, our method (v)
reaches 79.9/83.2 and 74.6/80.5, showing improvement in
both cases.

Robustness on Dynamic Scenes. We computed the dy-
namics of each vehicle to track in KITTI, and report an av-
erage distance d = 0.742m between consecutive frames, in
agreement with Figures 10&11 of [17]. We split our sam-
ples into a static (d < 0.7m) and a dynamic (d > 0.7m)

set from which we report fairly similar Success/Precision
metrics of 76.4/80.5 and 76.7/83.2 respectively.

Symmetry. Most cars are visible only from one side. We
attempted leveraging a prior knowledge of car symmetry in
order to complete furthermore the shape of the cars. How-
ever, this method did not prove to be effective, in particular
because the BBs are not well centered and introduce more
noise into our model.

Gaussian Sampling. We generate candidate offsets during
training by sampling from a multivariate Gaussian distribu-
tion, in contrast with sampling offsets using a Ô¨Åxed grid.
Sampling offsets randomly improves performances, since
the network is able to learn from a variety of target scores.
Fixing an offset grid provides only a discrete number of tar-
get scores used for the tracking loss. Lacking variety in
training induces worse performances during testing.

Timing. Our model takes on average 1.8ms to evaluate 147
candidates. We do not account for the time spent generat-
ing and preparing the candidates and model point clouds for
evaluation. This allows us during deployment to increase
the number of candidates as much as allowed by the GPU,
while still being able to process point clouds in real-time.

6. Conclusion

In this paper, we propose, to the best of our knowledge,
the Ô¨Årst 3D Siamese tracker applied to point clouds rather
than images. We leverage an efÔ¨Åcient encoding able to em-
bed meaningful semantic priors thanks to a shape comple-
tion regularization. We show that regularizing our network
with semantic information results in better discrimination
and tracking performances. Also, we provide insights on
model building such as early/late fusion and shape aggre-
gation in frames. We compare against baselines in 3D and
2D BEV, showing that our discriminator is able to outper-
form baselines by using exhaustive search settings. As a
result, we propose a purely 3D alternative for tracking cars
in urban environments, and show that geometric-oriented
approaches are capable of attaining good performances.

Future works will also include improving both the simi-
larity metric and the model update, by including a proposal
loss similar to that used in region proposal networks and
a smarter model point cloud selection based on the qual-
ity of point clouds. Further works will include an exten-
sion to Multiple Object Tracking and 3D Object Detec-
tion, by leveraging the similarity metric based on our 3D
Siamese network. Alternatively, 3D Siamese tracking could
be adapted to different classes of objects, articulated shape
representation and 2D object tracking.

Acknowledgments: This publication is based upon work
supported by the King Abdullah University of Science and
Technology (KAUST) OfÔ¨Åce of Sponsored Research (OSR)
under Award No. RGC/3/3570-01-01.

81366

References

[1] P. Achlioptas, O. Diamanti, I. Mitliagkas, and L. Guibas.
Learning representations and generative models for 3d point
clouds. 2018. 1, 2, 3, 4

[2] L. Bertinetto, J. Valmadre, S. Golodetz, O. Miksik, and P. H.
Torr. Staple: Complementary learners for real-time tracking.
In Proceedings of the IEEE Conference on Computer Vision
and Pattern Recognition, pages 1401‚Äì1409, 2016. 2, 7

[3] L. Bertinetto, J. Valmadre, J. F. Henriques, A. Vedaldi, and
P. H. Torr. Fully-convolutional siamese networks for object
tracking. In ECCV, pages 850‚Äì865. Springer, 2016. 2

[4] A. Bibi, T. Zhang, and B. Ghanem. 3d part-based sparse
tracker with automatic synchronization and registration. In
The IEEE Conference on Computer Vision and Pattern
Recognition (CVPR), June 2016. 2

[5] J. Bromley, I. Guyon, Y. LeCun, E. S¬®ackinger, and R. Shah.
Signature veriÔ¨Åcation using a‚Äù siamese‚Äù time delay neural
network. In Advances in neural information processing sys-
tems, pages 737‚Äì744, 1994. 2

[6] L. Caltagirone, M. Bellone, L. Svensson, and M. Wahde.
Lidar-camera fusion for road detection using fully convolu-
tional neural networks. arXiv preprint arXiv:1809.07941,
2018. 1

[7] A. X. Chang, T. A. Funkhouser, L. J. Guibas, P. Hanrahan,
Q. Huang, Z. Li, S. Savarese, M. Savva, S. Song, H. Su,
J. Xiao, L. Yi, and F. Yu. Shapenet: An information-rich 3d
model repository. CoRR, abs/1512.03012, 2015. 4

[8] X. Chen, H. Ma, J. Wan, B. Li, and T. Xia. Multi-view 3d
object detection network for autonomous driving. In IEEE
CVPR, volume 1, page 3, 2017. 1

[9] X. Cheng, P. Wang, and R. Yang. Learning depth with
convolutional spatial propagation network. arXiv preprint
arXiv:1810.02695, 2018. 1

[10] H. Chu, W.-C. M. K. Kundu, R. Urtasun, and S. Fidler. Sur-
fconv: Bridging 3d and 2d convolution for rgbd images. In
Proceedings of the IEEE Conference on Computer Vision
and Pattern Recognition, pages 3002‚Äì3011, 2018. 1

[11] H. Dahlkamp, A. Kaehler, D. Stavens, S. Thrun, and G. R.
Bradski. Self-supervised monocular road detection in desert
terrain.
science and systems, volume 38.
Philadelphia, 2006. 1

In Robotics:

[12] A. Dai, C. R. Qi, and M. Nie√üner. Shape completion us-
ing 3d-encoder-predictor cnns and shape synthesis. In Proc.
IEEE Conf. on Computer Vision and Pattern Recognition
(CVPR), volume 3, 2017. 2

[13] Z. Deng and L. Jan Latecki. Amodal detection of 3d objects:
Inferring 3d bounding boxes from 2d ones in RGB-Depth
images. In CVPR, 2017. 2

[14] X. Dong and J. Shen. Triplet loss in siamese network for

object tracking. In ECCV, September 2018. 2

[15] F. Engelmann, J. St¬®uckler, and B. Leibe. Joint object pose
estimation and shape reconstruction in urban street scenes
using 3d shape priors.
In German Conference on Pattern
Recognition, pages 219‚Äì230. Springer, 2016. 2, 5

[16] H. Fan, H. Su, and L. J. Guibas. A point set generation net-
In

work for 3d object reconstruction from a single image.
CVPR, volume 2, page 6, 2017. 4

[17] A. Geiger, P. Lenz, C. Stiller, and R. Urtasun. Vision meets

robotics: The kitti dataset. IJRR, 32(11), 2013. 2, 4, 8

[18] S. Giancola, J. Schneider, P. Wonka, and B. S. Ghanem. In-
tegration of absolute orientation measurements in the kinect-
fusion reconstruction pipeline.
In The IEEE Conference
on Computer Vision and Pattern Recognition (CVPR) Work-
shops, June 2018. 2

[19] J. Greenhalgh and M. Mirmehdi. Real-time detection and
recognition of road trafÔ¨Åc signs. IEEE Transactions on In-
telligent Transportation Systems, 13(4):1498‚Äì1506, 2012. 1
[20] A. He, C. Luo, X. Tian, and W. Zeng. A twofold siamese
network for real-time object tracking. In The IEEE Confer-
ence on Computer Vision and Pattern Recognition (CVPR),
June 2018. 2

[21] B.-S. Hua, M.-K. Tran, and S.-K. Yeung. Pointwise convo-
lutional neural networks. In IEEE Conference on Computer
Vision and Pattern Recognition, pages 984‚Äì993, 2018. 1

[22] S. Ioffe and C. Szegedy. Batch normalization: Accelerating
deep network training by reducing internal covariate shift.
arXiv preprint arXiv:1502.03167, 2015. 3

[23] M. Jaritz, R. De Charette, E. Wirbel, X. Perrotton, and
F. Nashashibi. Sparse and dense data with cnns: Depth com-
pletion and semantic segmentation.
In 2018 International
Conference on 3D Vision (3DV). IEEE, 2018. 1

[24] I. Jung, J. Son, M. Baek, and B. Han. Real-time mdnet. In

ECCV, September 2018. 2

[25] P. Karkus, D. Hsu, and W. S. Lee.

Particle Ô¨Ålter net-
works with application to visual localization. arXiv preprint
arXiv:1805.08975, 2018. 3

[26] D. P. Kingma and J. Ba. Adam: A method for stochastic

optimization. arXiv preprint arXiv:1412.6980, 2014. 4

[27] I. Kostrikov, Z. Jiang, D. Panozzo, D. Zorin, and J. Bruna.
In The IEEE Conference on Computer

Surface networks.
Vision and Pattern Recognition (CVPR), June 2018. 1

[28] M. Kristan, J. Matas, A. Leonardis, T. Vojir, R. PÔ¨Çugfelder,
G. Fernandez, G. Nebehay, F. Porikli, and L. ÀáCehovin. A
novel performance evaluation methodology for single-target
trackers.
IEEE Transactions on Pattern Analysis and Ma-
chine Intelligence, 38(11):2137‚Äì2155, Nov 2016. 2, 4

[29] J. Ku, M. MoziÔ¨Åan, J. Lee, A. Harakeh, and S. Waslander.
Joint 3d proposal generation and object detection from view
aggregation. arXiv preprint arXiv:1712.02294, 2017. 1, 7

[30] A. Kundu, Y. Li, and J. M. Rehg. 3d-rcnn: Instance-level
3d object reconstruction via render-and-compare.
In Pro-
ceedings of the IEEE Conference on Computer Vision and
Pattern Recognition, pages 3559‚Äì3568, 2018. 2

[31] P. Lei, F. Li, and S. Todorovic. Boundary Ô¨Çow: A siamese
network that predicts boundary motion without training on
motion. In The IEEE Conference on Computer Vision and
Pattern Recognition (CVPR), June 2018. 2

[32] B. Li, J. Yan, W. Wu, Z. Zhu, and X. Hu. High performance
visual tracking with siamese region proposal network. In The
IEEE Conference on Computer Vision and Pattern Recogni-
tion (CVPR), June 2018. 2

[33] Y. Liu, X.-Y. Jing, J. Nie, H. Gao, J. Liu, and G.-P. Jiang.
Context-aware 3d mean-shift with occlusion handling for ro-
bust object tracking in rgb-d videos. IEEE Transactions on
Multimedia, 2018. 2

91367

[34] M. Luber, L. Spinello, and K. O. Arras. People tracking in
rgb-d data with on-line boosted target models. In Intelligent
Robots and Systems (IROS), 2011 IEEE/RSJ International
Conference on, pages 3844‚Äì3849. IEEE, 2011. 2

[35] W. Luo, B. Yang, and R. Urtasun. Fast and furious: Real
time end-to-end 3d detection, tracking and motion forecast-
ing with a single convolutional net.
In Proceedings of the
IEEE Conference on Computer Vision and Pattern Recogni-
tion, pages 3569‚Äì3577, 2018. 2

[36] F. Ma, G. V. Cavalheiro, and S. Karaman.

Self-
supervised sparse-to-dense: Self-supervised depth comple-
tion from lidar and monocular camera.
arXiv preprint
arXiv:1807.00275, 2018. 1

[37] A. Milan, L. Leal-Taix¬¥e, I. Reid, S. Roth, and K. Schindler.
tracking.

MOT16:
arXiv:1603.00831 [cs], Mar. 2016. arXiv: 1603.00831. 2

for multi-object

A benchmark

[38] M. Mueller, N. Smith, and B. Ghanem. Context-aware cor-
relation Ô¨Ålter tracking.
In Proc. of the IEEE Conference
on Computer Vision and Pattern Recognition (CVPR), vol-
ume 2, page 6, 2017. 7

[39] M. Muller, A. Bibi, S. Giancola, S. Alsubaihi, and
B. Ghanem. Trackingnet: A large-scale dataset and bench-
mark for object tracking in the wild. In ECCV, September
2018. 2

[40] V. Nair and G. E. Hinton. RectiÔ¨Åed linear units improve
restricted boltzmann machines. In Proceedings of the 27th
international conference on machine learning (ICML-10),
pages 807‚Äì814, 2010. 3

[41] R. A. Newcombe, S. Izadi, O. Hilliges, D. Molyneaux,
D. Kim, A. J. Davison, P. Kohi, J. Shotton, S. Hodges, and
A. Fitzgibbon. Kinectfusion: Real-time dense surface map-
ping and tracking. In Mixed and augmented reality (ISMAR),
2011 10th IEEE international symposium on, pages 127‚Äì
136. IEEE, 2011. 2

[42] C. R. Qi, W. Liu, C. Wu, H. Su, and L. J. Guibas. Frus-
tum pointnets for 3d object detection from rgb-d data. arXiv
preprint arXiv:1711.08488, 2017. 1

[43] C. R. Qi, H. Su, K. Mo, and L. J. Guibas. Pointnet: Deep
learning on point sets for 3d classiÔ¨Åcation and segmentation.
Proc. Computer Vision and Pattern Recognition (CVPR),
IEEE, 1(2):4, 2017. 1, 2

[44] S. Ren, K. He, R. Girshick, and J. Sun. Faster r-cnn: Towards
real-time object detection with region proposal networks. In
NIPS, pages 91‚Äì99, 2015. 2

[45] B. Ristic, S. Arulampalam, and N. Gordon. Beyond the
Kalman Ô¨Ålter: Particle Ô¨Ålters for tracking applications.
Artech house, 2003. 3

[46] Y. Rubner, C. Tomasi, and L. J. Guibas. The earth mover‚Äôs
distance as a metric for image retrieval. International journal
of computer vision, 40(2):99‚Äì121, 2000. 4

[47] S. Sharma, J. A. Ansari, J. K. Murthy, and K. M. Krishna.
Beyond pixels: Leveraging geometry and shape cues for on-
line multi-object tracking. arXiv preprint arXiv:1802.09298,
2018. 1

[48] S. Song and J. Xiao. Tracking revisited using rgbd cam-
era: UniÔ¨Åed benchmark and baselines.
In Proceedings of
the IEEE international conference on computer vision, pages
233‚Äì240, 2013. 2

[49] L. Spinello, K. O. Arras, R. Triebel, and R. Siegwart. A
In

layered approach to people detection in 3d range data.
AAAI, volume 10, pages 1‚Äì1, 2010. 2

[50] D. Stutz and A. Geiger. Learning 3d shape completion under

weak supervision. CoRR, abs/1805.07290, 2018. 2, 5

[51] H. Su, V. Jampani, D. Sun, S. Maji, E. Kalogerakis, M.-H.
Yang, and J. Kautz. Splatnet: Sparse lattice networks for
point cloud processing.
In Proceedings of the IEEE Con-
ference on Computer Vision and Pattern Recognition, pages
2530‚Äì2539, 2018. 1

[52] J. W. Tangelder and R. C. Veltkamp. A survey of content
based 3d shape retrieval methods. In Shape Modeling Appli-
cations, 2004. Proceedings, pages 145‚Äì156, 2004. 2

[53] M. Tatarchenko, J. Park, V. Koltun, and Q.-Y. Zhou. Tan-
In Proceed-
gent convolutions for dense prediction in 3d.
ings of the IEEE Conference on Computer Vision and Pattern
Recognition, pages 3887‚Äì3896, 2018. 1

[54] R. Timofte, K. Zimmermann, and L. Van Gool. Multi-view
trafÔ¨Åc sign detection, recognition, and 3d localisation. Ma-
chine vision and applications, 25(3):633‚Äì647, 2014. 1

[55] J. Uhrig, N. Schneider, L. Schneider, U. Franke, T. Brox, and
A. Geiger. Sparsity invariant cnns. In International Confer-
ence on 3D Vision (3DV), 2017. 1

[56] N. Umetani. Exploring generative 3d shapes using autoen-
coder networks. In SIGGRAPH Asia 2017 Technical Briefs
on - SA 17, 2017. 2

[57] Q. Wang, Z. Teng, J. Xing, J. Gao, W. Hu, and S. May-
bank. Learning attentions: Residual attentional siamese net-
work for high performance online visual tracking.
In The
IEEE Conference on Computer Vision and Pattern Recogni-
tion (CVPR), June 2018. 2

[58] Z. Wu, S. Song, A. Khosla, F. Yu, L. Zhang, X. Tang, and
J. Xiao. 3d shapenets: A deep representation for volumetric
shapes. In CVPR, 2015. 2

[59] Y. Xiang, A. Alahi, and S. Savarese. Learning to track: On-
line multi-object tracking by decision making. In 2015 IEEE
international conference on computer vision (ICCV), num-
ber EPFL-CONF-230283, pages 4705‚Äì4713. IEEE, 2015. 1
[60] B. Yang, W. Luo, and R. Urtasun. Pixor: Real-time 3d ob-
ject detection from point clouds. In Proceedings of the IEEE
Conference on Computer Vision and Pattern Recognition,
pages 7652‚Äì7660, 2018. 2

[61] G. Yang, H. Zhao, J. Shi, Z. Deng, and J. Jia. Segstereo: Ex-
ploiting semantic information for disparity estimation. arXiv
preprint arXiv:1807.11699, 2018. 1

[62] T. Zhang, S. Liu, C. Xu, S. Yan, B. Ghanem, N. Ahuja, and
M.-H. Yang. Structural sparse tracking. In Proceedings of
the IEEE conference on computer vision and pattern recog-
nition, pages 150‚Äì158, 2015. 3

[63] Y. Zhang, L. Wang, J. Qi, D. Wang, M. Feng, and H. Lu.
Structured siamese network for real-time visual tracking. In
ECCV, September 2018. 2

[64] Z. Zhang, C. Xu, J. Yang, Y. Tai, and L. Chen. Deep hier-
archical guidance and regularization learning for end-to-end
depth estimation. Pattern Recognition, 83:430‚Äì442, 2018. 1
[65] Z. Zhu, Q. Wang, B. Li, W. Wu, J. Yan, and W. Hu.
Distractor-aware siamese networks for visual object track-
ing. In ECCV, September 2018. 2

101368

