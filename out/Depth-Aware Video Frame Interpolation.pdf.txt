Depth-Aware Video Frame Interpolation

Wenbo Bao1 Wei-Sheng Lai3 Chao Ma2 Xiaoyun Zhang1∗ Zhiyong Gao1 Ming-Hsuan Yang3,4

1 Institute of Image Communication and Network Engineering, Shanghai Jiao Tong University

2 MoE Key Lab of Artiﬁcial Intelligence, AI Institute, Shanghai Jiao Tong University

3 University of California, Merced

4 Google

Overlayed inputs

Estimated optical ﬂow

Estimated depth map

Interpolated frame

Ground-truth frame

Figure 1. Example of video frame interpolation. We propose a depth-aware video frame interpolation approach to exploit the depth cue
for detecting occlusion. Our method estimates optical ﬂow with clear motion boundaries and thus generates high-quality frames.

Abstract

Video frame interpolation aims to synthesize non-
existent frames in-between the original frames. While sig-
niﬁcant advances have been made from the recent deep
convolutional neural networks, the quality of interpola-
tion is often reduced due to large object motion or occlu-
sion.
In this work, we propose a video frame interpola-
tion method which explicitly detects the occlusion by ex-
ploring the depth information. Speciﬁcally, we develop a
depth-aware ﬂow projection layer to synthesize intermedi-
ate ﬂows that preferably sample closer objects than far-
ther ones.
In addition, we learn hierarchical features to
gather contextual information from neighboring pixels. The
proposed model then warps the input frames, depth maps,
and contextual features based on the optical ﬂow and lo-
cal interpolation kernels for synthesizing the output frame.
Our model is compact, efﬁcient, and fully differentiable.
Quantitative and qualitative results demonstrate that the
proposed model performs favorably against state-of-the-art
frame interpolation methods on a wide variety of datasets.
The source code and pre-trained model are available at
https://github.com/baowenbo/DAIN .

1. Introduction

Video frame interpolation has attracted considerable at-
tention in the computer vision community as it can be ap-
plied to numerous applications such as slow motion gen-

∗Corresponding author

eration [14], novel view synthesis [10], frame rate up-
conversion [3, 4], and frame recovery in video stream-
ing [38]. The videos with a high frame rate can avoid com-
mon artifacts, such as temporal jittering and motion blurri-
ness, and therefore are visually more appealing to the view-
ers. However, with the advances of recent deep convolu-
tional neural networks (CNNs) on video frame interpola-
tion [14, 21, 23, 25, 39], it is still challenging to generate
high-quality frames due to large motion and occlusions.

To handle large motion, several approaches use a coarse-
to-ﬁne strategy [21] or adopt advanced ﬂow estimation ar-
chitecture [23], e.g., PWC-Net [34], to estimate more accu-
rate optical ﬂow. On the other hand, a straightforward ap-
proach to handle occlusion is to estimate an occlusion mask
for adaptively blending the pixels [2, 14, 39]. Some recent
methods [24, 25] learn spatially-varying interpolation ker-
nels to adaptively synthesize pixels from a large neighbor-
hood. Recently, the contextual features from a pre-trained
classiﬁcation network have been shown effective for frame
synthesis [23] as the contextual features are extracted from
a large receptive ﬁeld. However, all the existing methods
rely on a large amount of training data and the model ca-
pacity to implicitly infer the occlusion, which may not be
effective to handle a wide variety of scenes in the wild.

In this work, we propose to explicitly detect the occlu-
sion by exploiting the depth information for video frame
interpolation. The proposed algorithm is based on a simple
observation that closer objects should be preferably synthe-
sized in the intermediate frame. Speciﬁcally, we ﬁrst es-
timate the bi-directional optical ﬂow and depth maps from
the two input frames. To warp the input frames, we adopt a

3703

ﬂow projection layer [2] to generate intermediate ﬂows. As
multiple ﬂow vectors may encounter at the same position,
we calculate the contribution of each ﬂow vector based on
the depth value for aggregation. In contrast to a simple av-
erage of ﬂows, the proposed depth-aware ﬂow projection
layer generates ﬂows with clearer motion boundaries due to
the effect of depth.

Based on our depth-aware ﬂow projection layer, we pro-
pose a Depth-Aware video frame INterpolation (DAIN)
model that effectively exploits the optical ﬂow, local in-
terpolation kernels, depth maps, and contextual features to
synthesize high-quality video frames. Instead of relying on
a pre-trained recognition network, e.g., ResNet [13], we
learn hierarchical features to extract effective context in-
formation from a large neighborhood. We use the adap-
tive warping layer [2] to warp the input frames, contex-
tual features, and depth maps based on the estimated ﬂows
and local interpolation kernels. Finally, we generate the
output frame with residual learning. As shown in Fig-
ure 1, our model is able to generate frames with clear ob-
ject shapes and sharp edges. Furthermore, the proposed
method can generate arbitrary in-between frames for creat-
ing slow-motion videos. Extensive experiments on multiple
benchmarks, including the Middlebury [1], UCF101 [33],
Vimeo90K [39], and HD [2] datasets, demonstrate that the
proposed DAIN performs favorably against existing video
frame interpolation methods.

We make the following contributions in this work:
• We explicitly detect the occlusion within a depth-
aware ﬂow projection layer to preferably synthesize
closer objects than farther ones.

• We propose a depth-aware video frame interpolation
method that tightly integrates optical ﬂow, local inter-
polation kernels, depth maps, and learnable hierarchi-
cal features for high-quality frame synthesis.

• We demonstrate that the proposed model is more ef-
fective, efﬁcient, and compact than the state-of-the-art
approaches.

2. Related Work

Video frame interpolation is a long-standing topic and
has been extensively studied in the literature [3, 7, 16, 26,
36].
In this section, we focus our discussions on recent
learning-based algorithms. In addition, we discuss the re-
lated topic on depth estimation.
Video frame interpolation. As a pioneer of CNN-based
methods, Long et al. [22] train a generic CNN to directly
synthesize the in-between frame. Their results, however,
suffer from severe blurriness as a generic CNN is not able to
capture the multi-modal distribution of natural images and
videos. Then, Liu et al. [21] propose the deep voxel ﬂow, a
3D optical ﬂow across space and time, to warp input frames
based on a trilinear sampling. While the frames synthesized

from ﬂow suffer less blurriness, the ﬂow estimation is still
challenging for scenes with large motion. Inaccurate ﬂow
may result in severe distortion and visual artifacts.

Instead of relying on optical ﬂow, the AdaConv [24] and
SepConv [25] methods estimate spatially-adaptive interpo-
lation kernels to synthesize pixels from a large neighbor-
hood. However, these kernel-based approaches typically
require high memory footprint and entail heavy computa-
tional load. Recently, Bao et al. [2] integrate the ﬂow-based
and kernel-based approaches into an end-to-end network to
inherit the beneﬁt from both sides. The input frames are ﬁrst
warped by the optical ﬂow and then sampled via the learned
interpolation kernels within an adaptive warping layer.

Existing methods implicitly handle the occlusion by es-
timating occlusion masks [2, 14, 39], extracting contextual
features [2, 23], or learning large local interpolation ker-
nels [24, 25].
In contrast, we explicitly detect the occlu-
sion by utilizing the depth information in the ﬂow projec-
tion layer. Moreover, we incorporate the depth map with
the learned hierarchical features as the contextual informa-
tion to synthesize the output frame.

Depth estimation. Depth is one of the key visual infor-
mation to understand the 3D geometry of a scene and has
been exploited in several recognition tasks, e.g., image seg-
mentation [41] and object detection [35]. Conventional
methods [12, 15, 27] require stereo images as input to es-
timate the disparity. Recently, several learning-based ap-
proaches [8, 9, 11, 18, 20, 31, 32, 37] aim to estimate the
depth from a single image. In this work, we use the model
of Chen et al. [6], which is an hourglass network trained on
the MegaDepth dataset [19], for predicting the depth maps
from the input frames. We show that the initialization of
depth network is crucial to infer the occlusion. We then
jointly ﬁne-tune the depth network with other sub-modules
for frame interpolation. Therefore, our model learns a rela-
tive depth for warping and interpolation.

We note that several approaches jointly estimate optical
ﬂow and depth by exploiting the cross-task constraints and
consistency [40, 42, 43]. While the proposed model also
jointly estimates optical ﬂow and depth, our ﬂow and depth
are optimized for frame interpolation, which may not re-
semble the real values of the pixel motion and scene depth.

3. Depth-Aware Video Frame Interpolation

In this section, we ﬁrst provide an overview of our frame
interpolation algorithm. We then introduce the proposed
depth-aware ﬂow projection layer, which is the key com-
ponent to handle occlusion for ﬂow aggregation. Finally,
we describe the design of all the sub-modules and provide
the implementation details of the proposed model.

3704

3.1. Algorithm Overview

Given two input frames I0(x) and I1(x), where x ∈
[1, H] × [1, W ] indicates the 2D spatial coordinate of the
image plane, and H and W are the height and width of the
image, our goal is to synthesize an intermediate frame ˆIt
at time t ∈ [0, 1]. The proposed method requires optical
ﬂows to warp the input frames for synthesizing the inter-
mediate frame. We ﬁrst estimate the bi-directional optical
ﬂows, denoted by F0→1 and F1→0, respectively. To syn-
thesize the intermediate frame ˆIt, there are two common
strategies. First, one could apply the forward warping [23]
to warp I0 based on F0→1 and warp I1 based on F1→0.
However, the forward warping may lead to holes on the
warped image. The second strategy is to approximate the
intermediate ﬂows, i.e., Ft→0 and Ft→1, and then apply the
backward warping to sample the input frames. To approx-
imate the intermediate ﬂows, one can borrow the ﬂow vec-
tors from the same grid coordinate in F0→1 and F1→0 [14],
or aggregate the ﬂow vectors that pass through the same po-
sition [2]. In this work, we adopt the ﬂow projection layer
in Bao et al. [2] to aggregate the ﬂow vectors while consid-
ering the depth order to detect the occlusion.

After obtaining the intermediate ﬂows, we warp the in-
put frames, contextual features, and depth maps within an
adaptive warping layer [2] based on the optical ﬂows and
interpolation kernels. Finally, we adopt a frame synthesis
network to generate the interpolated frame.

3.2. Depth Aware Flow Projection

The ﬂow projection layer approximates the intermedi-
ate ﬂow at a given position x by “reversing” the ﬂow vec-
If the ﬂow F0→1(y)
tors passing through x at time t.
passes through x at time t, one can approximate Ft→0(x)
by −t F0→1(y). Similarly, we approximate Ft→1(x) by
−(1− t) F1→0(y). However, as illustrated in the 1D space-
time example of Figure 2, multiple ﬂow vectors could be
projected to the same position at time t. Instead of aggre-
gating the ﬂows by a simple average [2], we propose to con-
sider the depth ordering for aggregation. Speciﬁcally, we
assume that D0 is the depth map of I0 and S(x) = (cid:8)y :
round(y + t F0→1(y)) = x,∀ y ∈ [1, H] × [1, W ](cid:9) in-
dicates the set of pixels that pass through the position x at
time t. The projected ﬂow Ft→0 is deﬁned by:

Ft→0(x) = −t ·

Py∈S(x)

w0(y) · F0→1(y)
Py∈S(x)

w0(y)

,

(1)

where the weight w0 is the reciprocal of depth:

w0(y) =

1

D0(y)

.

(2)

𝑇 = 0

𝑇 = 𝑡

𝑇 = 1

𝐲6

+,-./

𝐅(→*

(x)

𝐱
345
𝐅(→*

(x)

𝐲8

Space

Time

𝐅*→6(𝐲8)

𝐅*→6(𝐲6)

Figure 2. Proposed depth-aware ﬂow projection. The existing
ﬂow projection method [2] obtains an average ﬂow vector which
may not point to the correct object or pixel. In contrast, we re-
write the ﬂows according to the depth values and generate the ﬂow
vector pointing to the closer pixel.

Similarly, the projected ﬂow Ft→1 can be obtained from
the ﬂow F1→0 and depth map D1. By this way, the pro-
jected ﬂows tend to sample the closer objects and reduce
the contribution of occluded pixels which have larger depth
values. As shown in Figure 2, the ﬂow projection used in [2]
generates an average ﬂow vector (the green arrow), which
may not point to the correct pixel for sampling.
In con-
trast, the projected ﬂow from our depth-aware ﬂow projec-
tion layer (the red arrow) points to the pixel with a smaller
depth value.

On the other hand, there might exist positions where
none of the ﬂow vectors pass through, leading to holes in the
intermediate ﬂow. To ﬁll in the holes, we use the outside-in
strategy [1]: the ﬂow in the hole position is computed by
averaging the available ﬂows from its neighbors:

Ft→0(x) =

1

|N (x)| X

x

′∈N (x)

Ft→0(x′),

(3)

where N (x) = {x′ : |S(x′)| > 0} is the 4-neighbors of x.
From (1) and (3), we obtain dense intermediate ﬂow ﬁelds
Ft→0 and Ft→1 for warping the input frames.

The proposed depth-aware ﬂow projection layer is fully
differentiable so that both the ﬂow and depth estimation
networks can be jointly optimized during the training. We
provide the details of back-propagation in depth-aware ﬂow
projection in the supplementary materials.

3.3. Video Frame Interpolation

The proposed model consists of the following sub-
modules: the ﬂow estimation, depth estimation, context ex-
traction, kernel estimation, and frame synthesis networks.
We use the proposed depth-aware ﬂow projection layer to
obtain intermediate ﬂows and then warp the input frames,
depth maps, and contextual features within the adaptive
warping layer. Finally, the frame synthesis network gen-
erates the output frame with residual learning. We show the

3705

Depth-Aware

Flow 

Projection

Flow Estimation

Optical Flows

Projected Flows

Frame  −1

Frame  +1

Depth Estimation

Depth Maps

Context Extraction

Contextual Features

Kernel Estimation

Interpolation Kernels

Adaptive 

Warping Layer

Warped Depth Maps

e
t
a
n
e
t
a
c
n
o
c

Warped Frames

Frame Synthesis

Warped Contexture Features

Average of warped frame 

 −1 and frame  +1

+

Frame  

Figure 3. Architecture of the proposed depth-aware video frame interpolation model. Given two input frames, we ﬁrst estimate the
optical ﬂows and depth maps and use the proposed depth-aware ﬂow projection layer to generate intermediate ﬂows. We then adopt the
adaptive warping layer to warp the input frames, depth maps, and contextual features based on the ﬂows and spatially varying interpolation
kernels. Finally, we apply a frame synthesis network to generate the output frame.

Input Image

Input Feature

Conv1, 7×7, 64

ReLU

Residual Block

Residual Block

Concatenate

Conv1, 7×7, 64

ReLU

Conv1, 7×7, 64

+

ReLU

Contextual Feature

Output Feature

(a) Context extraction network

(b) Residual block

Figure 4. Structure of the context extraction network. Instead
of using the weights of a pre-trained classiﬁcation network [23],
we train our context extraction network from scratch and learn hi-
erarchical features for video frame interpolation.

overall network architecture in Figure 3. Below we describe
the details of each sub-network.

Flow estimation. We adopt the state-of-the-art ﬂow model,
PWC-Net [34], as our ﬂow estimation network. As learning
optical ﬂow without ground-truth supervision is extremely
difﬁcult, we initialize our ﬂow estimation network from the
pre-trained PWC-Net.

Depth estimation. We use the hourglass architecture [6]
as our depth estimation network. To obtain meaningful
depth information for the ﬂow projection, we initialize the
depth estimation network from the pre-trained model of
Li et al. [19].

Context extraction. In [2] and [23], the contextual infor-
mation is extracted by a pre-trained ResNet [13], i.e., the
feature maps of the ﬁrst convolutional layer. However, the
features from the ResNet are for the image classiﬁcation

task, which may not be effective for video frame interpo-
lation. Therefore, we propose to learn the contextual fea-
tures. Speciﬁcally, we construct a context extraction net-
work with one 7 × 7 convolutional layer and two residual
blocks, as shown in Figure 4(a). The residual block consists
of two 3 × 3 convolutional and two ReLU activation layers
(Figure 4(b)). We do not use any normalization layer, e.g.,
batch normalization. We then concatenate the features from
the ﬁrst convolutional layer and the two residual blocks, re-
sulting in a hierarchical feature. Our context extraction net-
work is trained from scratch and, therefore, learns effective
contextual features for video frame interpolation.

Kernel estimation and adaptive warping layer. The
local interpolation kernels have been shown to be effec-
tive for synthesizing a pixel from a large local neighbor-
hood [24, 25]. Bao et al. [2] further integrate the interpo-
lation kernels and optical ﬂow within an adaptive warping
layer. The adaptive warping layer synthesizes a new pixel
by sampling the input image within a local window, where
the center of the window is speciﬁed by optical ﬂow. Here
we use a U-Net architecture [30] to estimate 4× 4 local ker-
nels for each pixel. With the interpolation kernels and inter-
mediate ﬂows generated from the depth-aware ﬂow projec-
tion layer, we adopt the adaptive warping layer [2] to warp
the input frames, depth maps, and contextual features. More
details of the adaptive warping layer and the conﬁguration
of the kernel estimation network are provided in the supple-
mentary materials.

Frame synthesis. To generate the ﬁnal output frame, we
construct a frame synthesis network, which consists of 3
residual blocks. We concatenate the warped input frames,
warped depth maps, warped contextual features, projected
ﬂows, and interpolation kernels as the input to the frame
synthesis network. In addition, we linearly blend the two

3706

warped frames and enforce the network to predict the resid-
uals between the ground-truth frame and the blended frame.
We note that the warped frames are already aligned by the
optical ﬂow. Therefore, the frame synthesis network fo-
cuses on enhancing the details to make the output frame
look sharper. We provide the detailed conﬁgurations of the
frame synthesis network in the supplementary material.

3.4. Implementation Details
Loss Function. We denote the synthesized frame by ˆIt
and the ground-truth frame by IGT
. We train the proposed
model by optimizing the following loss function:

t

L = X

x

ρ(cid:16)ˆIt(x) − IGT

t

(x)(cid:17) ,

(4)

where ρ(x) = √x2 + ǫ2 is the Charbonnier penalty func-
tion [5]. We set the constant ǫ to 1e − 6.
Training Dataset. We use the Vimeo90K dataset [39] to
train our model. The Vimeo90K dataset has 51,312 triplets
for training, where each triplet contains 3 consecutive video
frames with a resolution of 256 × 448 pixels. We train our
network to predict the middle frame (i.e., t = 0.5) of each
triplet. At the test time, our model is able to generate arbi-
trary intermediate frames for any t ∈ [0, 1]. We augment
the training data by horizontal and vertical ﬂipping as well
as reversing the temporal order of the triplet.

Training Strategy. We use the AdaMax [17] to optimize
the proposed network. We set the β1 and β2 to 0.9 and 0.999
and use a batch size of 2. The initial learning rates of the
kernel estimation, context extraction, and frame synthesis
networks are set to 1e − 4. As both the ﬂow estimation and
depth estimation networks are initialized from pre-trained
models, we use smaller learning rates of 1e − 6 and 1e − 7,
respectively. We jointly train the entire model for 30 epochs
and then reduce the learning rate of each network by a factor
of 0.2 and ﬁne-tune the entire model for another 10 epochs.
We train our model on an NVIDIA Titan X (Pascal) GPU
card, which takes about 5 days to converge.

4. Experimental Results

In this section, we ﬁrst introduce the datasets for evalu-
ation. We then conduct ablation study to analyze the con-
tribution of the proposed depth-aware ﬂow projection and
hierarchical contextual features. Then, we compare the pro-
posed model with state-of-the-art frame interpolation algo-
rithms. Finally, we discuss the limitation and future work
of our method.

4.1. Evaluation Datasets and Metrics

We evaluate the proposed algorithm on multiple video

datasets with different image resolutions.

Table 1. Analysis on Depth-Aware (DA) ﬂow projection. M.B.
is short for the OTHER set of the Middlebury dataset. The pro-
posed model (DA-Opti) shows a substantial improvement against
the other variations.

Method

UCF101 [33] Vimeo90K [39] M.B. [1]

HD [2]

PSNR SSIM PSNR SSIM

IE

PSNR SSIM

DA-None 34.91 0.9679 34.47
34.85 0.9677 34.30
DA-Scra
34.91 0.9680 34.52
DA-Pret
34.99 0.9683 34.71
DA-Opti

0.9746
0.9735
0.9747
0.9756

2.10
2.13
2.07
2.04

31.46 0.9174
31.42 0.9164
31.52 0.9178
31.70 0.9193

Middlebury. The Middlebury benchmark [1] is widely
used to evaluate video frame interpolation methods. There
are two subsets. The OTHER set provides the ground-
truth middle frames, while the EVALUATION set hides the
ground-truth and can be evaluated by uploading the results
to the benchmark website. The image resolution in this
dataset is around 640 × 480 pixels.
Vimeo90K. There are 3,782 triplets in the test set of the
Vimeo90K dataset [39]. The image resolution in this dataset
is 448 × 256 pixels.
UCF101. The UCF101 dataset [33] contains videos with a
large variety of human actions. There are 379 triplets with
a resolution of 256 × 256 pixels.
HD. Bao et al. [2] collect 11 high-resolution videos for eval-
uation. The HD dataset consists of four 1920×1080p, three
1280 × 720p and four 1280 × 544p videos. The motion in
this dataset is typically larger than other datasets.

Metrics. We compute the average Interpolation Error (IE)
and Normalized Interpolation Error (NIE) on the Middle-
bury dataset. Lower IEs or NIEs indicate better perfor-
mance. We evaluate the PSNR and SSIM on the UCF101,
Vimeo90K, and the HD datasets for comparisons.

4.2. Model Analysis

We analyze the contribution of the two key components
the depth-aware ﬂow projection

in the proposed model:
layer and learned hierarchical contextual features.

Depth-aware ﬂow projection. To analyze the effective-
ness of our depth-aware ﬂow projection layer, we train the
following variations (DA is short for Depth-Aware):

• DA-None: We remove the depth estimation network
and use a simple average [2] to aggregate the ﬂows in
the ﬂow projection layer.

from scratch and optimize it with the whole model.

• DA-Scra: We initialize the depth estimation network
• DA-Pret: We initialize the depth estimation network
from the pre-trained model of [19] but freeze the pa-
rameters.

• DA-Opti: We initialize the depth estimation network
from the pre-trained model of [19] and jointly optimize
it with the entire model.

3707

e
n
o
N
A
D

-

a
r
c
S
-
A
D

t
e
r
P
-
A
D

i
t
p
O
A
D

-

Depth map

Optical ﬂow

Interpolated frame

Figure 5. Effect of the depth-aware ﬂow projection. The DA-
Scra model cannot learn any meaningful depth information. The
DA-Pret model initializes the depth estimation network from a
pre-trained model and generates clear motion boundaries for frame
interpolation. The DA-Opti model further optimizes the depth
maps and generates sharper edges and shapes.

We show the quantitative results of the above models
in Table 1 and provide a visualization of the depth, ﬂow,
and interpolated frames in Figure 5. First, the DA-Scra
model performs worse than the DA-None model. As shown
in the second row of Figure 5, the DA-Scra model cannot
learn any meaningful depth information from the random
initialization. When initializing from the pre-trained depth
model, the DA-Pret model shows a substantial performance
improvement and generates ﬂow with clear motion bound-
aries. After jointly optimizing the whole network, the DA-
Opti model further improves the depth maps, e.g., the man’s
legs, and generates sharper edges for the shoes and skate-
board in the interpolated frame. The analysis demonstrates
that the proposed model effectively utilizes the depth infor-
mation to generate high-quality results.

Learned hierarchical context. In the proposed model, we
use contextual features as one of the inputs to the frame syn-
thesis network. We analyze the contribution of the different
contextual features, including the pre-trained conv1 features
(PCF), the learned conv1 features (LCF), and the learned hi-
erarchical features (LHF). In addition, we also consider the
depth maps (D) as the additional contextual features.

We show the quantitative results in Table 2 and compare
the interpolated images in Figure 6. Without using any con-
textual information, the model does not perform well and
generates blurred results. By introducing the contextual fea-
tures, e.g., the pre-trained conv1 features or depth maps, the
performance is greatly improved. We further demonstrate
that the learned contextual features, especially the learned
hierarchical features, lead to a substantial improvement on

Table 2. Analysis on contextual features. We compare the con-
textual features from different sources: the pre-trained conv1 fea-
tures (PCF), learned conv1 features (LCF), learned hierarchical
features (LHF), and the depth maps (D).

Context

UCF101 [33]

Vimeo [39] M.B. [1]

HD [2]

PSNR SSIM PSNR SSIM

IE

PSNR SSIM

D

None
PCF

34.84 0.9679 34.38 0.9738
34.90 0.9681 34.41 0.9740
34.90 0.9682 34.44 0.9740
PCF + D 34.97 0.9682 34.49 0.9746
LCF + D 34.87 0.9680 34.54 0.9749
LHF + D 34.99 0.9683 34.71 0.9756

2.21
2.16
2.14
2.13
2.08
2.04

31.35 0.9178
31.43 0.9160
31.62 0.9183
31.73 0.9194
31.56 0.9185
31.70 0.9193

GT

None

PCF

D

PCF + D LCF + D LHF + D

PSNR

29.28

30.70

30.67

31.22

31.49

31.55

PSNR

30.86

31.01

31.11

31.28

31.31

31.66

Figure 6. Effect of contextual features. The proposed model
uses the learned hierarchical features (LHF) and depth maps (D)
for frame synthesis, which generates clearer and sharper content.

the Vimeo90K and the Middlebury datasets. The model us-
ing both the depth maps and learned hierarchical features
also generates sharper and clearer content.

4.3. Comparisons with State of the arts

We evaluate the proposed DAIN against the following
CNN-based frame interpolation algorithms: MIND [22],
DVF [21], SepConv [25], CtxSyn [23], ToFlow [39], Super
SloMo [14] and MEMC-Net [2]. In addition, we use the al-
gorithm of Baker et al. [1] to generate interpolation results
for two optical ﬂow estimation algorithms, EpicFlow [29]
and SPyNet [28], for comparisons.

In Table 3, we show the comparisons on the EVALUA-
TION set of the Middlebury benchmark [1], which are also
available on the Middlebury website. The proposed model
performs favorably against all the compared methods. At
the time of submission, our method ranks 1st in terms of
NIE and 3rd in terms of IE among all published algorithms
on the Middlebury website. We show a visual compari-
son in Figure 7, where the EpicFlow [29], ToFlow [39],
SepConv [25] and MEMC-Net [2] methods produce ghost-
ing artifacts on the balls or foot. In contrast, the proposed
method reconstructs a clear shape of the ball. Compared
to the CtxSyn [23] and Super SloMo [14] methods, our ap-
proach generates more details on the slippers and foot.

In Table 4, we provide quantitative performances on
the UCF101 [33], Vimeo90K [39], HD [2], and Middle-

3708

Table 3. Quantitative comparisons on the Middlebury EVALUATION set. The numbers in red and blue represent the best and second
best performance. The proposed DAIN method performs favorably against other approaches in terms of IE and NIE.

Method

EpicFlow [29]
SepConv-L1 [25]
ToFlow [39]
Super SloMo [14]
CtxSyn [23]
MEMC-Net [2]
DAIN (Ours)

Mequon

Schefﬂera

Urban

Teddy

Backyard

Basketball

Dumptruck

Evergreen

Average

IE

3.17
2.52
2.54
2.51
2.24
2.47
2.38

NIE

0.62
0.54
0.55
0.59
0.50
0.60
0.58

IE

3.79
3.56
3.70
3.66
2.96
3.49
3.28

NIE

0.70
0.67
0.72
0.72
0.55
0.65
0.60

IE

4.28
4.17
3.43
2.91
4.32
4.63
3.32

NIE

1.06
1.07
0.92
0.74
1.42
1.42
0.69

IE

6.37
5.41
5.05
5.05
4.21
4.94
4.65

NIE

1.09
1.03
0.96
0.98
0.87
0.88
0.86

IE

11.2
10.2
9.84
9.56
9.59
8.91
7.88

NIE

1.18
0.99
0.97
0.94
0.95
0.93
0.87

IE

6.23
5.47
5.34
5.37
5.22
4.70
4.73

NIE

1.10
0.96
0.98
0.96
0.94
0.86
0.85

IE

8.11
6.88
6.88
6.69
7.02
6.46
6.36

NIE

1.00
0.68
0.72
0.60
0.68
0.66
0.59

IE

8.76
6.63
7.14
6.73
6.66
6.35
6.25

NIE

1.04
0.70
0.90
0.69
0.67
0.64
0.66

IE

6.49
5.61
5.49
5.31
5.28
5.24
4.86

NIE

0.97
0.83
0.84
0.78
0.82
0.83
0.71

Inputs

ToFlow

EpicFlow

SepConv-L1

Super SloMo

CtxSyn

MEMC-Net DAIN (Ours)

Figure 7. Visual comparisons on the Middlebury EVALUATION set. The proposed method reconstructs a clear shape of the ball and
restores more details on the slippers and foot.

Table 4. Quantitative comparisons on the UCF101, Vimeo90K, HD, and Middlebury OTHER datasets. The numbers in red and blue
indicate the best and second best performance. We also compare the model parameters and runtime of each method.

Method

#Parameters

(million)

Runtime
(seconds)

SPyNet [28]
EpicFlow [29]
MIND [22]
DVF [21]
ToFlow [39]
SepConv-Lf [25]
SepConv-L1 [25]
MEMC-Net [2]
DAIN (Ours)

1.20
—
7.60
1.60
1.07
21.6
21.6
70.3
24.0

0.11
8.80
0.01
0.47
0.43
0.20
0.20
0.12
0.13

UCF101 [33]

Vimeo90K [39] Middlebury [1]

HD [2]

PSNR

SSIM PSNR

SSIM

33.67
33.71
33.93
34.12
34.58
34.69
34.78
34.96
34.99

0.9633
0.9635
0.9661
0.9631
0.9667
0.9655
0.9669
0.9682
0.9683

31.95
32.02
33.50
31.54
33.73
33.45
33.79
34.29
34.71

0.9601
0.9622
0.9429
0.9462
0.9682
0.9674
0.9702
0.9739
0.9756

IE

2.49
2.47
3.35
7.75
2.51
2.44
2.27
2.12
2.04

PSNR

SSIM

—
—
—
—

29.37
30.61
30.87
31.39
31.64

—
—
—
—

0.8772
0.8978
0.9077
0.9163
0.9205

Inputs

SPyNet

EpicFlow

MIND

DVF

ToFlow

SepConv-L1 MEMC-Net DAIN (Ours) Ground-truth

Figure 8. Visual comparisons on the UCF101 dataset [33]. The proposed method aligns the content (e.g., the pole) well and restores
more details on the man’s leg.

bury [1] OTHER set. Our approach performs favorably
against existing methods for all the datasets, especially

on the Vimeo90K [39] dataset with a 0.42dB gain over
MEMC-Net [2] in terms of PSNR.

3709

MEMC-Net [2]

DAIN (Ours)

Depth map

ToFlow

Table 5. Comparisons with MEMC-Net [2] on parameter and
runtime. We list the parameters (million) and runtime (seconds)
of each sub-module in the MEMC-Net and the proposed model.

Sub-module

Depth
Flow

Context
Kernel
Mask

Synthesis

Total

#Parameters

Runtime

#Parameters

Runtime

—
38.6
0.01
14.2
14.2
3.30

70.3

—

0.024
0.002
0.008
0.008
0.080

0.122

5.35
9.37
0.16
5.51
—
3.63

24.0

0.043
0.074
0.002
0.004

—

0.002

0.125

Overlayed inputs

SepConv-Lf

SepConv-L1

MEMC-Net

DAIN (Ours)

Ground-truth

Figure 9. Visual comparisons on the HD dataset [2]. The Sep-
Conv [25] method cannot align the content as the motion is larger
than the size of interpolation kernels, e.g., 51 × 51. The proposed
DAIN reveals more details on the hair and eyes than the state-of-
the-art MEMC-Net [2].

In Figure 8, the SPyNet [28], EpicFlow [29] and Sep-
Conv [25] methods cannot align the pole well and thus pro-
duce ghosting or broken results. The MIND [22], DVF [21],
ToFlow [39] and MEMC-Net [2] methods generate blurred
results on the man’s leg. In contrast, the proposed method
aligns the pole well and generates clearer results. In Fig-
ure 9, we show an example from the HD dataset. The Sep-
Conv [25] method cannot align the content at all as the mo-
tion is larger than the size of the interpolation kernels (e.g.,
51 × 51). Compared to the MEMC-Net [2], our method
restores clearer details on the hair and face (e.g., eyes and
mouth). Overall, the proposed DAIN generates more visu-
ally pleasing results with fewer artifacts than existing frame
interpolation methods. In our supplementary materials, we
demonstrate that our method can generate arbitrary inter-
mediate frames to create 10× slow-motion videos. More
image and video results are available in our project website.
We also list the number of model parameters and exe-
cution time (test on a 640 × 480 image) of each method
in Table 4. The proposed model uses a similar amount of
parameters as the SepConv [25] but runs faster. Compared
to the MEMC-Net [2], we use 69% fewer parameters (see

DAIN (Ours)

Ground-truth

Figure 10. Limitations of the proposed method. When the depth
maps are not estimated well, our method tends to generate blurred
results and less clear boundaries.

the detailed comparison of the sub-modules in Table 5) and
achieve better performance.

4.4. Discussions and limitations

The proposed method relies on the depth maps to detect
the occlusion for ﬂow aggregation. However, in some chal-
lenging cases, the depth maps are not estimated well and
lead to ambiguous object boundaries, as shown in the high-
light region of Figure 10. Our method generates blurred
results with unclear boundaries (e.g., between the shoe and
skateboard). However, compared to the ToFlow [39], our
method still reconstructs the skateboard well. While our
current model estimates depth from a single image, it would
be beneﬁcial to obtain more accurate depth maps by jointly
estimating the depth from the two input frames or modeling
the consistency between optical ﬂow and depth [43].

5. Conclusion

In this work, we propose a novel depth-aware video
frame interpolation algorithm, which explicitly detects the
occlusion using the depth information. We propose a depth-
aware ﬂow projection layer that encourages sampling of
closer objects than farther ones. Furthermore, we exploit the
learned hierarchical features and depth maps as the contex-
tual information to synthesize the intermediate frame. The
proposed model is compact and efﬁcient. Extensive quanti-
tative and qualitative evaluations demonstrate that the pro-
posed method performs favorably against existing frame in-
terpolation algorithms on diverse datasets. The state-of-the-
art achievement from the proposed method sheds light for
future research on exploiting the depth cue for video frame
interpolation.
Acknowledgment.
This work was supported in part by
National Key Research and Development Program of China
(2016YFB1001003), NSFC (61771306), Natural Science Foun-
dation of Shanghai
(18ZR1418100), Chinese National Key
S&T Special Program (2013ZX01033001-002-002), Shanghai
Key Laboratory of Digital Media Processing and Transmissions
(STCSM 18DZ2270700 and 18DZ1112300).
It was also sup-
ported in part by NSF Career Grant (1149783) and gifts from
Adobe, Verisk, and NEC.

3710

References

[1] S. Baker, D. Scharstein, J. Lewis, S. Roth, M. J. Black, and
R. Szeliski. A database and evaluation methodology for op-
tical ﬂow. IJCV, 2011. 2, 3, 5, 6, 7

[2] W. Bao, W.-S. Lai, X. Zhang, Z. Gao, and M.-H. Yang.
MEMC-Net: Motion Estimation and Motion Compensa-
tion Driven Neural Network for Video Interpolation and En-
hancement. arXiv, 2018. 1, 2, 3, 4, 5, 6, 7, 8

[3] W. Bao, X. Zhang, L. Chen, L. Ding, and Z. Gao. High-
Order Model and Dynamic Filtering for Frame Rate Up-
Conversion. TIP, 2018. 1, 2

[4] R. Castagno, P. Haavisto, and G. Ramponi. A method for
motion adaptive frame rate up-conversion. TCSVT, 1996. 1
[5] P. Charbonnier, L. Blanc-F´eraud, G. Aubert, and M. Bar-
laud. Two deterministic half-quadratic regularization algo-
rithms for computed imaging. In ICIP, 1994. 5

[6] W. Chen, Z. Fu, D. Yang, and J. Deng. Single-image depth

perception in the wild. In NIPS, 2016. 2, 4

[7] D. Choi, W. Song, H. Choi, and T. Kim. Map-based motion
reﬁnement algorithm for block-based motion-compensated
frame interpolation. TCSVT, 2016. 2

[8] D. Eigen and R. Fergus. Predicting depth, surface normals
and semantic labels with a common multi-scale convolu-
tional architecture. In CVPR, 2015. 2

[9] D. Eigen, C. Puhrsch, and R. Fergus. Depth map prediction
In

from a single image using a multi-scale deep network.
NIPS, 2014. 2

[10] J. Flynn, I. Neulander, J. Philbin, and N. Snavely. Deep-
stereo: Learning to predict new views from the world’s im-
agery. In CVPR, 2016. 1

[11] H. Fu, M. Gong, C. Wang, K. Batmanghelich, and D. Tao.
Deep ordinal regression network for monocular depth esti-
mation. In CVPR, 2018. 2

[12] H. Ha, S. Im, J. Park, H.-G. Jeon, and I. So Kweon. High-
quality depth from uncalibrated small motion clip. In CVPR,
2016. 2

[13] K. He, X. Zhang, S. Ren, and J. Sun. Deep residual learning

for image recognition. In CVPR, 2016. 2, 4

[14] H. Jiang, D. Sun, V. Jampani, M.-H. Yang, E. Learned-
Miller, and J. Kautz. Super SloMo: High Quality Estimation
of Multiple Intermediate Frames for Video Interpolation. In
CVPR, 2018. 1, 2, 3, 6, 7

[15] K. Karsch, C. Liu, and S. B. Kang. Depth transfer: Depth ex-
traction from video using non-parametric sampling. TPAMI,
2014. 2

[16] U. S. Kim and M. H. Sunwoo. New frame rate up-conversion
TCSVT,

algorithms with low computational complexity.
2014. 2

[17] D. P. Kingma and J. Ba. ADAM: A method for stochastic

optimization. In ICLR, 2015. 5

[18] Y. Kuznietsov, J. St¨uckler, and B. Leibe. Semi-supervised
deep learning for monocular depth map prediction. In CVPR,
2017. 2

[19] Z. Li and N. Snavely. Megadepth: Learning single-view
depth prediction from internet photos. In CVPR, 2018. 2,
4, 5

[20] F. Liu, C. Shen, G. Lin, and I. D. Reid. Learning depth
from single monocular images using deep convolutional neu-
ral ﬁelds. TPAMI, 2016. 2

[21] Z. Liu, R. Yeh, X. Tang, Y. Liu, and A. Agarwala. Video
frame synthesis using deep voxel ﬂow. In ICCV, 2017. 1, 2,
6, 7, 8

[22] G. Long, L. Kneip, J. M. Alvarez, H. Li, X. Zhang, and
Q. Yu. Learning image matching by simply watching video.
In ECCV, 2016. 2, 6, 7, 8

[23] S. Niklaus and F. Liu. Context-aware synthesis for video

frame interpolation. In CVPR, 2018. 1, 2, 3, 4, 6, 7

[24] S. Niklaus, L. Mai, and F. Liu. Video frame interpolation via

adaptive convolution. In CVPR, 2017. 1, 2, 4

[25] S. Niklaus, L. Mai, and F. Liu. Video frame interpolation via
adaptive separable convolution. In ICCV, 2017. 1, 2, 4, 6, 7,
8

[26] M. T. Orchard and G. J. Sullivan. Overlapped block motion
compensation: An estimation-theoretic approach. TIP, 1994.
2

[27] A. Rajagopalan, S. Chaudhuri, and U. Mudenagudi. Depth
estimation and image restoration using defocused stereo
pairs. TPAMI, 2004. 2

[28] A. Ranjan and M. J. Black. Optical ﬂow estimation using a

spatial pyramid network. In CVPR, 2017. 6, 7, 8

[29] J. Revaud, P. Weinzaepfel, Z. Harchaoui, and C. Schmid.
Epicﬂow: Edge-preserving interpolation of correspondences
for optical ﬂow. In CVPR, 2015. 6, 7, 8

[30] O. Ronneberger, P. Fischer, and T. Brox. U-Net: Convolu-
tional networks for biomedical image segmentation. In MIC-
CAI, 2015. 4

[31] A. Roy and S. Todorovic. Monocular depth estimation using

neural regression forest. In CVPR, 2016. 2

[32] A. Saxena, S. H. Chung, and A. Y. Ng. Learning depth from

single monocular images. In NIPS, 2006. 2

[33] K. Soomro, A. R. Zamir, and M. Shah. UCF101: A dataset
In

of 101 human actions classes from videos in the wild.
CRCV-TR-12-01, 2012. 2, 5, 6, 7

[34] D. Sun, X. Yang, M.-Y. Liu, and J. Kautz. Pwc-net: Cnns
for optical ﬂow using pyramid, warping, and cost volume. In
CVPR, 2018. 1, 4

[35] M. Sun, G. Bradski, B.-X. Xu, and S. Savarese. Depth-
encoded hough voting for joint object detection and shape
recovery. In ECCV, 2010. 2

[36] C. Wang, L. Zhang, Y. He, and Y.-P. Tan. Frame rate up-

conversion using trilateral ﬁltering. TCSVT, 2010. 2

[37] P. Wang, X. Shen, Z. Lin, S. Cohen, B. Price, and A. L.
Yuille. Towards uniﬁed depth and semantic prediction from
a single image. In CVPR, 2015. 2

[38] J. Wu, C. Yuen, N.-M. Cheung, J. Chen, and C. W. Chen.
Modeling and optimization of high frame rate video trans-
mission over wireless networks. TWC, 2016. 1

[39] T. Xue, B. Chen, J. Wu, D. Wei, and W. T. Freeman. Video
enhancement with task-oriented ﬂow. arXiv, 2017. 1, 2, 5,
6, 7, 8

[40] Z. Yin and J. Shi. Geonet: Unsupervised learning of dense

depth, optical ﬂow and camera pose. In CVPR, 2018. 2

3711

[41] C. Zhang, L. Wang, and R. Yang. Semantic segmentation of

urban scenes using dense depth maps. In ECCV, 2010. 2

[42] T. Zhou, M. Brown, N. Snavely, and D. G. Lowe. Unsu-
In

pervised learning of depth and ego-motion from video.
CVPR, 2017. 2

[43] Y. Zou, Z. Luo, and J.-B. Huang. DF-Net: Unsupervised
Joint Learning of Depth and Flow using Cross-Task Consis-
tency. In ECCV, 2018. 2, 8

3712

