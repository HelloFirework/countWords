Object Tracking by Reconstruction with View-Speciﬁc Discriminative

Correlation Filters

U˘gur Kart⋆, Alan Lukeˇziˇc†, Matej Kristan†, Joni-Kristian K¨am¨ar¨ainen⋆,Jiˇr´ı Matas‡

⋆Laboratory of Signal Processing, Tampere University, Finland

† Faculty of Computer and Information Science, University of Ljubljana, Slovenia

‡ Faculty of Electrical Engineering, Czech Technical University in Prague, Czech Republic

{ugur.kart,joni.kamarainen}@tuni.fi

{alan.lukezic,matej.kristan}@fri.uni-lj.si

matas@cmp.felk.cvut.cz

Abstract

Standard RGB-D trackers treat the target as a 2D struc-
ture, which makes modelling appearance changes related
even to out-of-plane rotation challenging. This limitation is
addressed by the proposed long-term RGB-D tracker called
OTR – Object Tracking by Reconstruction. OTR performs
online 3D target reconstruction to facilitate robust learn-
ing of a set of view-speciﬁc discriminative correlation ﬁlters
(DCFs). The 3D reconstruction supports two performance-
enhancing features: (i) generation of an accurate spatial
support for constrained DCF learning from its 2D pro-
jection and (ii) point-cloud based estimation of 3D pose
change for selection and storage of view-speciﬁc DCFs
which robustly localize the target after out-of-view rotation
or heavy occlusion. Extensive evaluation on the Princeton
RGB-D tracking and STC Benchmarks shows OTR outper-
forms the state-of-the-art by a large margin.

1. Introduction

Visual object tracking (VOT) is one of the core prob-
lems in computer vision; it has many applications [18, 8].
The ﬁeld has progressed rapidly, fueled by the availabil-
ity of large and diverse datasets [39, 34] and the annual
VOT challenge [22, 23]. Until recently, tracking research
has focused on RGB videos, largely neglecting RGB-D
(rgb+depth) tracking as obtaining a reliable depth map at
video frame rates has not been possible without expensive
hardware. In the last few years, depth sensors have become
widely accessible, which has lead to a signiﬁcant increase of
RGB-D tracking related work [6, 1, 26]. Depth provides im-
portant cues for tracking since it simpliﬁes reasoning about
occlusions and facilitates depth-based object segmentation.
Progress in RGB-D tracking has been further boosted by

Figure 1. The OTR – Object Tracking by Reconstruction – ob-
ject model consists of a set of 2D view-speciﬁc DCFs and of an
approximate 3D object reconstruction. The OTR thus copes well
with out-of-view rotation with a signiﬁcant aspect change, while a
state-of-the-art tracker CSR-rgbd++ [19] drifts and fails.

the emergence of standard datasets and evaluation proto-
cols [35, 40].

In RGB-D tracking, direct extensions of RGB methods
by adding the D-channel as an additional input dimension
have achieved considerable success. In particular, discrimi-
native correlation ﬁlter (DCF) based methods have shown
excellent performance on the Princeton RGB-D tracking
benchmark [35], conﬁrming the reputation gained on RGB
benchmarks [22, 23, 19, 20, 6, 1]. Furthermore, DCFs
are efﬁcient in both learning of the visual target appear-
ance model and in target localization, which are both im-
plemented by FFT, running in near real time on a standard
CPU.

A major limitation of the standard RGB and RGB-D
trackers, regardless of the actual method (e.g. DCF [4],
Siamese deep nets [2], Mean shift [9], Lucas Kanade [27]),

1339

Localization& re-detectionUpdateOTRCSR-rgbd++ 15  81  191 2D object modelView1Correlation ﬁlterColorDepthView2View33D object pre-imagePosition initialization& region selectionDCF constraintgenerationis that they treat the tracked 3D object as a 2D structure.
Thus even a simple rotation of a rigid 3D object is inter-
preted as potentially signiﬁcant appearance change in 2D
that is conceptually indistinguishable from partial occlu-
sion, tracker drift, blurring and ambient light changes.

Consider a narrow object, e.g., a book, with its front
cover facing the camera, that rotates sideways and ends with
its back side facing the camera (Figure 1). From the per-
spective of a standard RGB tracker, the object has deformed
and the appearance has completely changed. Since most of
the standard trackers cannot detect (do not model) aspect
changes, the target bounding box and the appearance model
contain mostly pixels belonging to the background when
the narrow side of the book is facing the camera. Further-
more, the model update is carried out by implicit or explicit
temporal averaging of the tracked views. Consequently, the
appearance observed in the earlier frames is lost after a cer-
tain time period, limiting re-detection capability in situation
when the target is completely occluded, but later re-appears,
since its appearance no longer matches the last observed
view. The above-mentioned problems are almost trivial to
solve if a 3D model with attached photometric information
is available for the tracked object.

We exploit the opportunity of using the depth component
in RGB-D signal to build a simple, yet powerful 3D object
representation based on the surface splat model, i.e., the ob-
ject surface is approximated by a collection of 3D points
with color, radius and the normal – surfels. This model has
been proven very powerful in the context of SLAM [33].
The 3D model is aligned and updated to the current 2D
target appearance during tracking by an ICP-based match-
ing mechanism [33] – thus a pre-image of the 2D target
projection is maintained during tracking. The 3D object
pre-image signiﬁcantly simpliﬁes detection and handling of
(self-)occlusion, out-of-plane rotation (view changes) and
aspect changes.

The ICP-based 3D pre-image construction [33] requires
accurate identiﬁcation of the object pixels in the current
frame prior to matching, and it copes with only small mo-
tions due to a limited convergence range. A method from
a high-performance RGB-D DCF tracker [19] is thus used
to robustly estimate potentially large motions and to iden-
tify object pixels for the pre-image construction. The DCF
learning is improved by generating appearance constraints
from the pre-image. Object appearance changes result-
ing from out-of-view rotation are detected by observing
the pre-image 3D motion and a set of view-speciﬁc DCFs
is generated. These 2D models are used during tracking
for improved localization accuracy as well as for target re-
detection using the recent efﬁcient formulation of the DCF-
based detectors [30]. The resulting tracker thus exhibits a
long-term capability, even if the target re-appears in a pose
different from the one observed before the occlusion.

Contributions The main contribution of the paper is a
new long-term RGB-D tracker, called OTR – Object Track-
ing by Reconstruction that constructs a 3D model with
view-speciﬁc DCFs attached. The DCF-coupled estima-
tion of the object pre-image and its use in DCF model
learning for robust localization has not been proposed be-
fore. The OTR tracker achieves the state-of-the-art, outper-
forming prior trackers by a large margin on two standard
RGB-D tracking benchmarks. An ablation study conﬁrms
the importance of view-speciﬁc DCF appearance learning
that is tightly connected to the 3D reconstruction. We will
make the reference implementation of OTR available at
https://github.com/ugurkart.

2. Related Work

RGB Tracking Of the many approaches proposed in the
literature, DCF-based methods have demonstrated excel-
lent performance – efﬁciency trade-off in recent tracking
challenges [24, 22, 23].
Initially proposed by Bolme et
al. [4], DCF-based tracking captured the attention of the
vision community due to its simplicity and mathemati-
cal elegance. Improvements of the original method include
multi-channel formulation of correlation ﬁlters [12, 15], ﬁl-
ter learning using kernels exploiting properties of circular
correlation [17] and scale estimation with multiple one-
dimensional ﬁlters [11]. Following these developments,
Galoogahi et al. [14] tackled the boundary problems that
stem from the nature of circular correlation by proposing a
ﬁlter learning method where a ﬁlter with size smaller than
the training example is adopted. Lukezic et al. [28] further
improved this idea by formulating the ﬁlter learning process
using a graph cut based segmentation mask as a constraint.

RGB-D Tracking The most extensive RGB-D object
tracking benchmark has been proposed by Song et al. [35]
(Princeton Tracking Benchmark). The benchmark includes
a dataset, evaluation protocol and a set of baseline RGB-
D trackers. Several RGB-D trackers have been proposed
since. Meshgi et al. [31] used an occlusion-aware parti-
cle ﬁlter framework. A similar approach was proposed by
Bibi et al. [3] but using optical ﬂow to improve localiza-
tion accuracy. As an early adopter of DCF based RGB-D
trackers, Hannuna et al. [16] used depth as a clue to detect
occlusions while tracking is achieved by KCF [17]. An et
al. [1] performed a depth based segmentation along with a
KCF tracker. Kart et al. [20] proposed a purely depth based
segmentation to train a constrained DCF similarly to CSR-
DCF [28] and later extended their work to include color in
segmentation [19]. Liu et al. [26] proposed a context-aware
3-D mean-shift tracker with occlusion handling. At the time
of writing this paper [26] is ranked ﬁrst at Princeton Track-
ing Benchmark. Xiao et al. [40] recently proposed a new
RGB-D tracking dataset (STC) and an RGB-D tracker by

1340

adopting an adaptive range-invariant target model.

3.1. Constrained DCF

3D Tracking Klein et al. [21] proposed a camera pose
tracking algorithm for small workspaces which works on
low-power devices. The approach is based on tracking key-
points across the RGB frames and bundle adjustment for
joint estimation of the 3D map and camera pose. New-
combe et al. [32] proposed an iterative closest point (ICP)
based algorithm for depth sequences for dense mapping of
indoor scenes. In a similar fashion, Wheelan et al. [38] used
surfel-based maps and jointly optimized color and geomet-
ric costs in a dense simultaneous localization and mapping
(SLAM) framework. All three methods are limited to static
scenes and are inappropriate for object tracking. This limi-
tation was addressed by R¨unz et al. [33], who extended [38]
by adding the capability of segmenting the scene into multi-
ple objects. They use a motion consistency and semantic in-
formation to separate the object from the background. This
limits the method to large, slow moving objects.

Lebeda et al. [25] combined structure from motion,
SLAM and 2D tracking to cope with 3D object rotation.
Their approach reconstructs the target by tracking keypoints
and line features, however, it cannot cope with poorly-
textured targets and low-resolution images.

3. Object tracking by 3D reconstruction

In OTR, object appearance is modeled at two levels of
abstraction which enables per-frame target localization and
re-detection in the case of tracking failure. The appearance
level used for localizing the target in the image is modelled
by a a set of view-speciﬁc discriminative correlation ﬁlters,
i.e., a DCF ht that models the current object appearance,
and a set of snapshots {h(s)}S
s=1 modelling the object from
previously observed views.
In addition to the ﬁlters, the
object color and depth statistics are modelled by separate
color and depth histograms for the foreground and the back-
ground.

The second level of object abstraction is a model of
the object pre-image Θt = {Pt, Rt, Tt}, where Pt is
the surfel-based object 3D model speciﬁed in the object-
centered coordinate system and {Rt, Tt} are the rotation
and the translation of the 3D model into the current object
position.

The two models interact during tracking for improved
DCF training and 3D pose change detection (e.g., rotations).
We describe the DCF framework used by the OTR tracker in
Section 3.1, the multi-view DCFs with the pre-image model
is detailed in Section 3.2, Section 3.3 details target loss re-
covery and Section 3.4 summarizes the full per-frame track-
ing iteration.

The core DCF tracker in the OTR framework is the re-
cently proposed constrained discriminative correlation ﬁl-
ter CSR-DCF [29], which is brieﬂy outlined here. Given a
search region of size W × H a set of Nd feature channels
f = {fd}Nd
d=1, where fd ∈ RW ×H , are extracted. A set of
Nd correlation ﬁlters h = {hd}Nd
d=1, where hd ∈ RW ×H ,
are correlated with the extracted features and the object po-
sition is estimated as the location of the maximum of the
weighted correlation responses

r = X

Nd

d=1

wd(fd ⋆ hd),

(1)

where ⋆ represents circular correlation, which is efﬁciently
implemented by a Fast Fourier Transform with {wd}Nd
d=1 be-
ing the channel weights. The target scale can be efﬁciently
estimated by another correlation ﬁlter trained over the scale-
space [11].

Filter learning is formulated in CSR-DCF as a con-

strained optimization that minimizes a regression loss

ε(h) =

Nc

X

d=1

kfd ⋆ hd − gk2 + λkhdk2 ; hd ≡ m ⊙ hd, (2)

where g is a desired output and m is a binary mask m ∈
{0, 1}W ×H that approximately separates the target from the
background. The mask thus acts as a constraint on the ﬁlter
support, which allows learning a ﬁlter from a larger training
region as well as coping with targets that are poorly approx-
imated by an axis-aligned bounding box. CSR-DCF applies
a color histogram-based segmentation for mask generation,
which is not robust to visually similar backgrounds and illu-
mination change. We propose generating the mask from the
RGB-D input and the estimated pre-image in Section 3.2.1.
Minimization of (2) is achieved by an efﬁcient ADMM
scheme [5]. Since the support of the learned ﬁlter is con-
strained to be smaller than the learning region, the maxi-
mum response on the training region reﬂects the reliabil-
ity of the learned ﬁlter [28]. These values are used as per-
channel weights wd in (1) for improved target localization
(we refer the reader to [29] for more details).

3.2. A multi view object model

At each frame, the current ﬁlter ht is correlated within a
search region centered on the target position predicted from
the previous frame following (1). To improve localization
during target 3D motion, we introduce a ”memory” which is
implemented by storing captured snapshots {h(s)}S
s=1 from
different 3D view-points (i.e., a set of view-speciﬁc DCFs).
At every NR-th frame, all view-speciﬁc DCFs are evalu-
ated, and the location of the maximum of the correlation
response is used as the new target hypothesis xt. If the max-
imum correlation occurs in the set of snapshots, the current

1341

ﬁlter is replaced by the corresponding snapshot ﬁlter. Target
presence is determined at this location by the test described
in Section 3.3.1.
In the case the test determines target is
lost, the tracker enters a re-detection stage described in Sec-
tion 3.3.

If the target is determined to be present, the current ﬁlter

ht is updated by a weighted running average

ht+1 = (1 − η)ht + η ˜ht,

(3)
where ˜ht is a new ﬁlter estimated by the constrained ﬁlter
learning in Section 3.1 at the estimated position xt and η is
the update factor.

In addition to updating the current ﬁlter, the object color
and depth histograms are updated as in [19], the object pre-
image is updated as described in Section 3.2.2 and the set
of view-speciﬁc DCFs {h(s)}S
s=1 is updated following Sec-
tion 3.2.3.

3.2.1 Object pre-image-based ﬁlter constraint

The binary mask m used in the constrained learning in (2)
is computed at the current target position at ﬁlter learn-
ing stage.
In the absence of other inputs, the mask is
estimated by a recent segmentation approach from [19].
This approach uses an MRF segmentation model from
CSR-DCF [29] within the ﬁlter learning region and es-
timates per-pixel unary potentials by color and depth
(foreground/background) histograms backprojection in the
RGB-D image.

However, the pre-image Θt can be used to better out-
line the object in the ﬁlter training region, leading to a more
accurately learned ﬁlter. Thus, at DCF training stage, the
pre-image is generated by ﬁtting the object 3D model Pt
onto the current object appearance (Section 3.2.2). If the ﬁt
is successful, the segmentation mask used in ﬁlter learning
(2) is replaced by a new mask generated as follows. The 3D
model Pt is projected into the 2D ﬁlter training region. Pix-
els in the region corresponding to the visible 3D points are
set to one, while others to zero, thus forming a binary ob-
ject occupancy map. The map is dilated to remove holes in
the object mask and only the largest connected component
is retained, while others are set to zero to reduce the ef-
fect of potential reconstruction errors in the 3D model. An
example of the 2D mask construction from the 3D object
pre-image is demonstrated in Figure 2.

3.2.2 Object pre-image update

The object pre-image Θt is updated from the object position
estimated by the multi-view DCF (Section 3.2). Pixels cor-
responding to the target are identiﬁed by the color+depth
segmentation mask from Section 3.2.1. The patch is ex-
tracted from the RGB-D image and used to update the ob-
ject 3D model Pt. The 3D model Pt is ﬁrst translated to

Figure 2. A 2D DCF localizes the target (top-left), the target
color+depth pixels are approximately segmented (top-right) and
used to update the 3D pre-image (bottom-left). The pre-image is
projected to 2D generating an occupancy map (bottom-right). The
resulting mask better delineates the object, which improves the
constrained DCF learning.

the 3D position determined by the target location from the
multi-view DCF. The ICP-based fusion from [33], that uses
color and depth, is then applied to ﬁne align the 3D model
with the patch and update it by adding and merging the cor-
responding surfels (for details we refer to [33]). The up-
dated model is only retained if the ICP alignment error is
reasonably low (i.e., below a threshold τICP), otherwise the
update is discarded.

3.2.3 A multi-view DCF update

Continuous updates may lead to gradual drift and fail-
ure whenever the target object undergoes a signiﬁcant ap-
pearance change. Recovery from such situations essen-
tially depends on the diversity of the target views captured
by the snapshots {h(s)}S
s=1 and their quality (e.g., snap-
shots should not be contaminated by the background). The
following conservative update mechanism that maximizes
snapshot diversity and minimizes contamination is applied.
The current ﬁlter is considered for addition to the snap-
shots only if the target passed the presence test (Sec-
tion 3.3.1) and the object pre-image Θt is successfully up-
dated (Section 3.2.2). Passing these two tests, the target is
considered visible with the pre-image accurately ﬁtted. A
ﬁlter is added if the object view has changed substantially
and results in a new appearance (viewpoint). The change
is measured by a difference between the reference aspect ρ0
(i.e., a bounding box width-to-height ratio) and the aspect ρt
obtained from the current 2D projection of the object pre-
image. Whenever this difference exceeds a threshold, i.e.,
kρ0 − ρtk > τρ, a new snapshot is created and the current
ratio becomes a new reference, i.e., ρ0 ← ρt. In our pre-
liminary experiments, we tested using Euler angles of the
estimated rotation matrix R, but this was found sensitive to

1342

 3D pre-image updateColor-based segmentation  RGB-D input image Occupancy map from3D-to-2D projection  Overlayed mask  Overlayed mask Object region identiﬁcation+between the maximum correlation response in the current
frame (Rt) and a moving average of these values in the re-
cent Nq frames when the target was visible. The test con-
siders target lost whenever the ratio exceeds a pre-deﬁned
threshold qt > τq. It was showed in [30] that the test is
robust to a range of thresholds.

To allow early occlusion detection, however, [19] intro-
duce a test that compares the area of the segmentation mask
with the area of the axis-aligned bounding box of the DCF.
This test improves performance during occlusion, but grad-
ual errors in scale estimation result in disagreement between
the bounding box and the actual object and might lead to a
reduced accuracy of the test.

The two tests are complementary and computationally
very efﬁcient, and the target presence is reported only if the
considered target position passes the both tests.

3.4. Object tracking by reconstruction

Our object tracking by reconstruction approach (OTR) is

summarized as follows.

Initialization. The tracker is initialized from a bounding
box in the ﬁrst frame. Color and depth histograms are sam-
pled as in [19] and a segmentation mask m is generated.
The segmentation mask m is used to learn the initial ﬁlter
h0 according to (2), as well as to identify target pixels in the
RGB-D model to initialize the pre-image Θ0 by [33]. The
set of snapshots is set to an empty set.

Localization. A tracking iteration at frame t starts with
the target position xt−1 from the previous frame. A region
is extracted around xt−1 in the current image and the po-
sition xt with maximum correlation response is computed
using the current ﬁlter ht−1 (along with all snapshots every
NR frames) as described in Section 3.2. The position xt
is tested using the target presence test from Section 3.3.1.
If the test is passed, the target is considered as well local-
ized, and the visual models (i.e., ﬁlters and pre-image) are
updated. Otherwise, target re-detection (Section 3.3) is ac-
tivated in the next frame.

Update. A color+depth segmentation mask m is com-
puted within a region centered at xt according to [19] to
identify target pixels. The corresponding RGB-D pixels are
used to update the pre-image Θt, i.e., the 3D surfel repre-
sentation along with its 3D pose (Section 3.2.2).

The ﬁlter ht−1 is updated (3) by the ﬁlter learned at
the current position (2) with support constraint computed
from the pre-image (Section 3.2.1). Finally, the target as-
pect change is computed using the updated pre-image and
the set of snapshots are updated if signiﬁcant appearance
change is detected (Section 3.2.3)

4. Experimental analysis

In this section, we validate OTR by a comprehensive ex-
perimental evaluation. The implementation details are pro-

1343

Figure 3. Examples of view-speciﬁc DCFs creation. The tracker
was initialized on the images in the left-most column, while the
remaining images represent frames in which a new view was de-
tected and stored in the set of view-speciﬁc DCFs.

ICP estimation errors and therefore aspect ratio test proved
to be more robust. Examples of images used to create sepa-
rate DCF views are shown in Figure 3.

3.3. A multi view DCF target detection

Target presence is determined at each frame using the
test described in Section 3.3.1. Whenever the target is lost,
the following re-detection mechanism is activated. At each
frame all ﬁlters in the snapshot set {h(s)}S
s=1 are corre-
lated with features extracted from a region centered at the
last conﬁdent target position. To encode a motion model,
the search region size is gradually increased in subsequent
frames by a factor α∆t
s , where αs > 1 is a ﬁxed scale fac-
tor and ∆t is the number of frames since the last conﬁdent
target position estimation. The correlation is efﬁciently cal-
culated by padding the snapshots with zeros to the current
search region size and applying FFT [30].

Since the target may change the size, a two-stage ap-
proach for re-detection is applied. First, the hypothesized
target position is estimated as the location of the maximum
correlation response and the ﬁlter h(m) that yielded this re-
sponse is identiﬁed. The current object scale is then com-
puted as the ratio sf = D0
between the depth of the target
Dt
in the ﬁrst frame (D0), and the depth Dt at the current posi-
tion. The depth is calculated by the median of the D channel
within the target bounding box. The ﬁlter that yielded the
best correlation response (h(m)) is correlated again on the
search region scaled by sf and target presence test is carried
out (Section 3.3.1). In case the test determines the target is
present, the current ﬁlter is replaced, i.e., ht ← h(m), and
the re-detection process is deactivated.

3.3.1 Target presence test

Recently, a target presence test has been proposed for long-
term discriminative correlation ﬁlters [30]. The test is based
on computing tracking uncertainty value as a ratio qt = Rt
R

InitializationSnapshot creation framesTable 1. Experiments on the Princeton Tracking Benchmark using the PTB protocol. Numbers in the parenthesis are the ranks.

Method

OTR
ca3dms+toh [26]
CSR-rgbd++ [19]
3D-T [3]
PT [35]
OAPF [31]
DLST [1]
DM-DCF [20]
DS-KCF-Shape [16]
DS-KCF [6]
DS-KCF-CPP [16]
hiob-lc2 [36]
STC [40]

Avg.
Rank

2.36
4.55
5.00
5.64
6.09
6.09
6.45
6.91
7.27
9.91
10.09
10.18
10.45

Avg.

Success

Human

Animal

Rigid

Large

Small

Slow

Fast

Occ.

No-Occ.

Passive

Active

0.769(1)
0.737(5)
0.740(3)
0.750(2)
0.733(6)
0.731(7)
0.740(4)
0.726(8)
0.719(9)
0.693(11)
0.681(12)
0.662(13)
0.698(10)

0.77(2)
0.66(9)
0.77(3)
0.81(1)
0.74(6)
0.64(12)
0.77(4)
0.76(5)
0.71(7)
0.67(8)
0.65(10)
0.53(13)
0.65(11)

0.68(6)
0.74(2)
0.65(8)
0.64(9)
0.63(11)
0.85(1)
0.69(5)
0.58(13)
0.71(4)
0.61(12)
0.64(10)
0.72(3)
0.67(7)

0.81(2)
0.82(1)
0.76(7)
0.73(12)
0.78(3)
0.77(6)
0.73(13)
0.77(5)
0.74(9)
0.76(8)
0.74(10)
0.78(4)
0.74(11)

0.76(4)
0.73(7)
0.75(5)
0.80(1)
0.78(3)
0.73(8)
0.80(2)
0.72(9)
0.74(6)
0.69(10)
0.66(12)
0.61(13)
0.68(11)

0.77(1)
0.74(2)
0.73(3)
0.71(6)
0.70(7)
0.73(5)
0.70(9)
0.73(4)
0.70(8)
0.70(10)
0.69(12)
0.70(11)
0.69(13)

0.81(2)
0.80(4)
0.80(3)
0.75(9)
0.76(5)
0.85(1)
0.73(11)
0.75(8)
0.76(6)
0.75(10)
0.76(7)
0.72(12)
0.72(13)

0.75(1)
0.71(7)
0.72(4)
0.75(2)
0.72(6)
0.68(9)
0.74(3)
0.72(5)
0.70(8)
0.67(11)
0.65(12)
0.64(13)
0.68(10)

0.71(3)
0.63(9)
0.70(4)
0.73(1)
0.72(2)
0.64(8)
0.66(6)
0.69(5)
0.65(7)
0.63(10)
0.60(12)
0.53(13)
0.61(11)

0.85(2)
0.88(1)
0.79(8)
0.78(11)
0.75(13)
0.85(3)
0.85(4)
0.78(10)
0.81(6)
0.78(12)
0.79(9)
0.85(5)
0.80(7)

0.85(1)
0.83(2)
0.79(6)
0.79(7)
0.82(4)
0.78(9)
0.72(13)
0.82(3)
0.77(11)
0.79(8)
0.80(5)
0.77(12)
0.78(10)

0.74(2)
0.70(6)
0.72(4)
0.73(3)
0.70(7)
0.71(5)
0.75(1)
0.69(9)
0.70(8)
0.66(10)
0.64(12)
0.62(13)
0.66(11)

vided in Section 4.1. Performance analysis on two challeng-
ing RGB-D datasets, Princeton Tracking Benchmark (PTB)
and STC, is reported in Section 4.2 and Section 4.3, respec-
tively. Ablation studies are presented in Section 4.4 to ver-
ify our design choices.

4.1. Implementation details

We use HOG features [10] and colornames [37] in our
tracker. The parameters related to the tracker are taken
from [19]. The ICP error threshold is empirically set to
τICP = 5 · 10−4 and the aspect ratio change threshold is
set to τρ = 0.20. Maximum ﬁlter evaluation period is equal
to NR = 5 frames and αs = 1.07. All experiments are
run on a single laptop with Intel Core i7 3.6GHz and the
parameters for both tracking and 3D reconstruction are kept
constant throughout the experiments. Our non-optimized
implementation runs at 2 fps.

4.2. Performance on PTB benchmark [35]

The Princeton Tracking Benchmark [35] is the most
comprehensive and challenging RGB-D tracking bench-
mark to date. The authors have recorded and manually an-
notated 100 RGB-D videos in real-life conditions using a
Kinect v1.0. Ground truth bounding boxes of ﬁve sequences
are publicly available whereas the ground truth for the re-
maining 95 sequences are kept hidden to prevent overﬁtting.
Tracking performance is evaluated on the 95 sequences with
the hidden ground-truth. The sequences are grouped into
11 categories: Human, Animal, Rigid, Large, Small, Slow,
Fast, Occlusion, No Occlusion, Passive and Active. We use
Bibi et al. [3] protocol with improved depth registration in
the experiments.

The performance is measured by employing a PASCAL
VOC [13] type of evaluation. Per-frame overlap ot is de-
ﬁned as

ot =

if neither BT R and BGT exists

(4)

,

if both BT R and BGT exist

area(BT R ∩BGT )
area(BT R∪BGT )
1,

0, otherwise




where BT R is the output bounding box of the tracker and

BGT is the ground truth bounding box. Tracking perfor-
mance is given as success rate which represents average
overlap [7]. The PTB evaluation protocol sorts the track-
ers according to the primary performance measures with re-
spect to each object category and computes the ﬁnal ranking
as the average over these ranks. In addition, the overall suc-
cess rate is reported for detailed analysis.

The OTR tracker is compared to all trackers available on
the PTB leaderboard: ca3dms+toh [26], CSR-rgbd++ [19],
3D-T [3], PT [35], OAPF [31], DM-DCF [20], DS-KCF-
Shape [16], DS-KCF [6], DS-KCF-CPP [16], hiob lc2 [36]
and we added two recent trackers STC [40] and DLST [1].
Results are reported in Table 1.

OTR convincingly sets the new state-of-the-art in terms
of both overall ranking and the average success by a large
margin compared to the next-best trackers (Table 1).
In
terms of average success, OTR obtains a 4.3% gain com-
pared to the second ranking tracker ca3dms+toh [26], which
tracks the target in 3D as well, but without reconstruction.
This result speaks in favour of our 3D-based pre-image con-
struction and its superiority for RGB-D tracking.

In addition to being the top overall tracker, the perfor-
mance of OTR is consistent across all categories. OTR is
consistently among the top trackers in each category and
achieves the top rank in three categories and the second best
in ﬁve categories. This suggests that our tracker does not
overﬁt to a certain type of scenario and it generalizes very
well unlike some other methods in the benchmark.

A closely related work to our own is recent CSR-rgbd++,
which combines a single CSR-DCF with color and depth
segmentation and implements a target re-detection. OTR
obtains a signiﬁcant 6.6% increase over CSR-rgbd++ in
Rigid category, which speaks in favor of our DCFs ap-
proach with several views connected to a 3D pre-image that
localizes the target more precisely. On the No-Occ. cat-
egory, OTR outperforms CSR-rgbd++ by a 7.6% success
rate. This can be attributed to the advantage of using a pre-
image Θ for DCF training described in Section 3.2.1.

1344

Table 2. The normalized area under the curve (AUC) scores computed from one-pass evaluation on the STC Benchmark [40].

Method

AUC IV

DV

Attributes
SV

CDV DDV SDC SCC BCC BSC PO

OTR
CSR-rgbd++ [19]
ca3dms+toh [26]
STC [40]
DS-KCF-Shape [16]
PT [35]
DS-KCF [6]
OAPF [31]

0.49
0.45
0.43
0.40
0.39
0.35
0.34
0.26

0.39
0.35
0.25
0.28
0.29
0.20
0.26
0.15

0.48
0.43
0.39
0.36
0.38
0.32
0.34
0.21

0.31
0.30
0.29
0.24
0.21
0.13
0.16
0.15

0.19
0.14
0.17
0.24
0.04
0.02
0.07
0.15

0.45
0.39
0.33
0.36
0.25
0.17
0.20
0.18

0.44
0.40
0.41
0.38
0.38
0.32
0.38
0.24

0.46
0.43
0.48
0.45
0.47
0.39
0.39
0.29

0.42
0.38
0.35
0.32
0.27
0.27
0.23
0.18

0.42
0.40
0.39
0.34
0.31
0.27
0.25
0.23

0.50
0.46
0.44
0.37
0.37
0.30
0.29
0.28

4.3. Performance on STC benchmark [40]

The STC benchmark [40] has been recently published
to complement
the PTB benchmark in the number of
categories and diversity of sequences. 36 sequences are
recorded indoors and outdoors using Asus Xtion sensors
and the authors annotated every frame of every video with
10 attributes;
Illumination variation (IV), Depth varia-
tion (DV), Scale variation (SV), Color distribution vari-
ation (CDV), Depth distribution variation (DDV), Sur-
rounding depth clutter (SDC), Surrounding color clutter
(SCC), Background color camouﬂages (BCC), Background
shape camouﬂages (BSC), Partial occlusion (PO). These
attributes were either automatically computed or manually
annotated.

The tracking performance is measured by precision and
success plots computed from a one-pass evaluation akin
to [39]. Success plot shows the portion of correctly tracked
frames with respect to the different values of the overlap
thresholds. Tracking performance is measured by a non-
normalized area under the curve on this graph, i.e., the sum
of values on the plot. The standard AUC measure [39] is
obtained by dividing the non-normalized AUC by the num-
ber of overlap thresholds. The number of thresholds is the
same for all evaluated trackers and only scales the non-
normalized AUC to interval [0, 1]. We therefore report the
standard AUC values, which is the more familiar measure in
the tracking community. Precision plot is constructed sim-
ilarly to success plot, by measuring the portion of frames
with center-error smaller than a threshold. The overall mea-
sure on precision plot is computed as the value at 20 pixels
error threshold.

The OTR tracker is compared to the following trackers:
CSR-rgbd++ [19], ca3dms+toh [26], STC [40], DS-KCF-
Shape [16], PT [35], DS-KCF [6] and OAPF [31]. The
results are presented in Table 2 and Figure 4. As on PTB
benchmark (Section 4.2), OTR outperforms the state-of-
the-art by a large margin not only in the overall score but
in most of the categories except CDV (Color Distribution
Variation) and SCC (Surrounding Color Clutter), where it
is ranked among top three trackers. The overall top per-
formance and excellent per-attribute performance support

our observations on PTB benchmark that OTR is capable
of handling various tracking scenarios and generalizes well
over the different datasets. Qualitative tracking results on
the four sequences from STC dataset are shown in Fig-
ure 5. The computing times for the three best performing
trackers are 2 fps (OTR), 6 fps (CSR-rgbd++) and 34 fps
(ca3dms+toh).

Success plots

OTR [0.49]
CSR-rgbd++ [0.45]
ca3dms+toh [0.43]
STC [0.4]
DS-KCF-Shape [0.39]
PT [0.35]
DS-KCF [0.34]
OAPF [0.26]

0.4

0.5

0.6

Overlap Threshold
Precision plots

0.7

0.8

0.9

1  

1

0.9

0.8

0.7

t

e
a
r
 
s
s
e
c
c
u
S

0.6

0.5

0.4

0.1

0.2

0.3

0.3

0.2

0.1

0
0  

1

0.9

0.8

0.7

0.6

0.5

i

i

n
o
s
c
e
r
P

0.4

0.3

0.2

0.1

0

0

5

10

OTR [0.59]
CSR-rgbd++ [0.55]
ca3dms+toh [0.53]
STC [0.46]
DS-KCF-Shape [0.47]
PT [0.45]
DS-KCF [0.44]
OAPF [0.2]

20

15
35
Location error threshold

25

30

40

45

50

Figure 4. Success and precision plots on STC benchmark [40].

4.4. Ablation studies

The main components of our tracker are (i) the 3D-based
pre-image, which provides an improved target segmenta-
tion, (ii) the set of multiple view-speciﬁc target DCFs and
(iii) the interaction between the former two components. An
ablation study is conducted on the PTB [35] dataset to eval-
uate the extent of contribution of each component. We im-
plemented three variants of the proposed tracker with the

1345

Table 3. Ablation studies on the PTB benchmark [35].

Avg.

Method

Success Human Animal Rigid

Large

Small

Slow Fast Occ. No-Occ. Passive Active

OTR
OTR−3D
OTR−VS
OTR−3D−VS

0.769
0.747
0.743
0.740

0.77
0.76
0.75
0.78

0.68
0.62
0.66
0.61

0.81
0.80
0.77
0.76

0.76
0.75
0.74
0.75

0.77
0.75
0.74
0.73

0.81
0.80
0.79
0.79

0.75
0.72
0.72
0.72

0.71
0.69
0.67
0.71

0.85
0.82
0.84
0.78

0.85
0.84
0.81
0.79

0.74
0.71
0.72
0.72

a more important role than the view-speciﬁc DCF formula-
tion. Removing the 3D pre-image creation from the tracker
results in 7% success rate reduction, which indicates the sig-
niﬁcant importance of using the 3D pre-image for robust
DCF learning.

Overall, the addition of 3D pre-image and view-speciﬁc
target representation improves performance of the baseline
version OTR−3D−VS by approximately 4% in tracking suc-
cess rate. The ablation study results conclusively show that
every component importantly contributes to the tracking
performance boost.

5. Conclusions

A new long-term RGB-D tracker, called OTR – Object
Tracking by Reconstruction is presented. The target 3D
model, a pre-image, is constructed by a surfel-based ICP.
The limited convergence range of the ICP and the require-
ment to automatically identify object pixels used for recon-
struction is addressed by utilizing a DCF for displacement
estimation and for approximate target segmentation. The
3D pre-image in turn constrains the DCF learning, and is
used for generating view-speciﬁc DCFs. These are used
for localization as well as for target re-detection, giving the
tracker a long-term tracking quality.

The OTR tracker is extensively evaluated on two chal-
lenging RGB-D tracking benchmarks and compared to
12 state-of-the-art RGB-D trackers. OTR outperforms all
trackers by a large margin, setting a new state-of-the-art
on these benchmarks. An ablation study veriﬁes that the
performance improvements come from the 3D pre-image
construction, the view-speciﬁc DCF set and the interaction
between the two.

The view-speciﬁc DCF formulation allows long-term
tracking of poorly textured and small objects over large dis-
placements. Our future work will focus on extension to
model-based tracking with pre-learned models on realistic,
open-world scenarios. In addition, we plan to consider im-
provements by ICP robustiﬁcation and deep features.

Acknowledgments
This work is supported by Business Finland under Grant
1848/31/2015 and Slovenian research agency program P2-
0214 and project J2-8175.
J. Matas is supported by
the Technology Agency of the Czech Republic project
TE01020415 – V3C Visual Computing Competence Cen-
ter.

1346

OTR

CSR-rgbd++

ca3dms+toh

sequences

Figure 5. Tracking results on four
from STC
dataset [40]. The proposed OTR tracker conﬁdently tracks the
target undergoing a substantial pose change. Two state-of-the-art
RGB-D trackers (CSR-rgbd++ [19] and cs3dms+toh [26]), that do
not apply the multi-view DCFs nor target 3D pre-image, result in
less accurate localization or failure.

3D pre-image and view-speciﬁc DCFs. The ﬁrst variant is
the tracker without the 3D pre-image, denoted as OTR−3D.
The second variant is the tracker without the view-speciﬁc
DCFs (OTR−VS) and the third variant is the tracker with-
out the view-speciﬁc DCFs and without the 3D pre-image
(OTR−3D−VS).

The results of the ablation study are reported in Table 3.
The proposed OTR with all components achieves a 0.769
success rate. Removing the view-speciﬁc target represen-
tation (OTR−VS) or 3D pre-image (OTR−3D) result to ap-
prox. 3% success rate drop in tracking performance (0.747
and 0.743). Removing both view-speciﬁc and 3D pre-image
representation (OTR−3D−VS) further reduces the tracking
performance to 0.740 success rate.

On the Occlusion category the OTR tracker outperforms
the version without a view-speciﬁc formulation (OTR−VS)
by 6% increase in the success rate. The view-speciﬁc set
of DCFs remembers the target appearance from different
views, which helps in reducing drifting and improves re-
detection accuracy after occlusion. On average, 4 views
were automatically generated by the view-speciﬁc DCF in
OTR per tracking sequence. The tracker version without
the view-speciﬁc formulation forgets the past appearance,
which reduces the re-detection capability.

In situations without occlusion, the 3D pre-image plays

References

[1] N. An, X.-G. Zhao, and .-G. Hou. Online RGB-D Tracking

via Detection-Learning-Segmentation. In ICPR, 2016.

[2] L. Bertinetto, J. Valmadre, J. F. Henriques, A. Vedaldi, and
P. H. S. Torr. Fully-Convolutional Siamese Networks for Ob-
ject Tracking. In ECCV Workshops, 2016.

[3] A. Bibi, T. Zhang, and B. Ghanem. 3D Part-Based Sparse
Tracker with Automatic Synchronization and Registration.
In CVPR, 2016.

[4] D. S. Bolme, J.R. Beveridge, B. A. Draper, and Y.-M. Lui.
Visual Object Tracking using Adaptive Correlation Filters.
In CVPR, 2010.

[5] S. Boyd, N. Parikh, E. Chu, B. Peleato, and J. Eckstein.
Distributed Optimization and Statistical Learning via the Al-
ternating Direction Method of Multipliers. Found. Trends
Mach. Learn., 3(1):1–122, 2011.

[6] M. Camplani, S. Hannuna, M. Mirmehdi, D. Damen, A.
Paiement, L. Tao, and T. Burghardt. Real-time RGB-D
Tracking with Depth Scaling Kernelised Correlation Filters
and Occlusion Handling. In BMVC, 2015.

[7] L. ˇCehovin, A. Leonardis, and M. Kristan. Visual Ob-
ject Tracking Performance Measures Revisited. IEEE TIP,
25(3):1261–1274, 2016.

[8] F. Chaumette, P. Rives, and B. Espiau. Positioning of a Robot
with Respect to an Object, Tracking it and Estimating its Ve-
locity by Visual Servoing. In ICRA, 1991.

[9] D. Comaniciu, V. Ramesh, and P. Meer. Kernel-Based Object

Tracking. IEEE PAMI, 25:564–567, 2003.

[10] N. Dalal and B. Triggs. Histograms of Oriented Gradients

for Human Detection. In CVPR, 2005.

[11] M. Danelljan, G. Hager, F. S. Khan, and M. Felsberg. Dis-
criminative Scale Space Tracking. IEEE PAMI, 39(8):1561–
1575, 2017.

[12] M. Danelljan, F. S. Khan, M. Felsberg, and J. van de Weijer.
Adaptive Color Attributes for Real-Time Visual Tracking. In
CVPR, 2014.

[13] M. Everingham, L. van Gool, C. K. Williams, J. Winn, and
A. Zisserman. The Pascal Visual Object Classes (VOC)
Challenge. IJCV, 88(2):303–338, 2010.

[14] H.K. Galoogahi, T. Sim, and S. Lucey. Correlation Filters

with Limited Boundaries. In CVPR, 2015.

[15] H. K. Galoogahi, T. Sim, and S. Lucey. Multi-channel Cor-

relation Filters. In ICCV, 2013.

[16] S. Hannuna, M. Camplani, J. Hall, M. Mirmehdi, D. Damen,
T. Burghardt, A. Paiement, and L. Tao. DS-KCF: A Real-
time Tracker for RGB-D Data. Journal of Real-Time Image
Processing, 2016.

[17] J. F. Henriques, R. Caseiro, P. Martins, and J. Batista. High-
IEEE

Speed Tracking with Kernelized Correlation Filters.
PAMI, 37(3):583–596, 2015.

[18] W. Hu, T. Tan, L. Wang, and S. Maybank. A Survey on
Visual Surveillance of Object Motion and Behaviors. IEEE
Transactions on Systems, Man, and Cybernetics, 34(3):334–
352, 2004.

[19] U. Kart, J.-K. K¨am¨ar¨ainen, and J. Matas. How to Make an

RGBD Tracker ? In ECCV Workshops, 2018.

[20] U. Kart, J.-K. K¨am¨ar¨ainen, J. Matas, L. Fan, and F. Cricri.
Depth Masked Discriminative Correlation Filter. In ICPR,
2018.

[21] G. Klein and D. Murray. Parallel Tracking and Mapping for

Small AR Workspaces. In ISMAR, 2007.

[22] M. Kristan, A. Leonardis, J. Matas, M. Felsberg, R.
Pﬂugfelder, L. ˇCehovin, T. Voj´ır, and et al. The Visual Object
Tracking VOT2016 Challenge Results. In ECCV Workshops,
2016.

[23] M. Kristan, A. Leonardis, J. Matas, M. Felsberg, R.
Pﬂugfelder, and et al. The Visual Object Tracking VOT2017
Challenge Results. In ICCV Workshops 2017.

[24] M. Kristan, R. Pﬂugfelder, A. Leonardis, J. Matas, L.
ˇCehovin, G. Nebehay, T. Voj´ır, and et al. The Visual Object
Tracking VOT2014 Challenge Results. In ECCV Workshops,
2014.

[25] K. Lebeda, S. Hadﬁeld, and R. Bowden. 2D Or Not 2D:
Bridging the Gap Between Tracking and Structure from Mo-
tion. In ACCV, 2014.

[26] Y. Liu, X.-Y. Jing, J. Nie, H. Gao, J. Liu, and G.-P. Jiang.
Context-aware 3-D Mean-shift with Occlusion Handling for
Robust Object Tracking in RGB-D Videos.
IEEE TMM,
2018.

[27] B. D. Lucas and T. Kanade. An Iterative Image Registration
Technique with an Application to Stereo Vision. In IJCAI,
1981.

[28] A. Lukeˇziˇc, T. Voj´ır, L. ˇCehovin, J. Matas, and M. Kristan.
Discriminative Correlation Filter with Channel and Spatial
Reliability. In CVPR, 2017.

[29] A. Lukeˇziˇc, T. Voj´ır, L. ˇCehovin Zajc, J. Matas, and M. Kris-
tan. Discriminative Correlation Filter Tracker with Channel
and Spatial Reliability. IJCV, 2018.

[30] A. Lukeˇziˇc, L. ˇCehovin Zajc, T. Voj´ır, J. Matas, and M. Kris-
tan. FCLT - A Fully-Correlational Long-Term Tracker. In
ACCV, 2018.

[31] K. Meshgi, S. Maeda, S. Oba, H. Skibbe, Y. Li, and S. Ishii.
An Occlusion-aware Particle Filter Tracker to Handle Com-
plex and Persistent Occlusions. CVIU, 150:81 – 94, 2016.

[32] R. A. Newcombe, S. Izadi, O. Hilliges, D. Molyneaux, D.
Kim, A. J. Davison, P. Kohli, J. Shotton, S. Hodges, and A.
Fitzgibbon. Kinectfusion: Real-time dense surface mapping
and tracking. In ISMAR, 2011.

[33] M. R¨unz and L. Agapito. Co-Fusion: Real-time Segmen-
tation, Tracking and Fusion of Multiple Objects. In ICRA,
2017.

[34] A. W. M. Smeulders, D. M. Chu, R. Cucchiara, S. Calderara,
A. Dehghan, and M. Shah. Visual Tracking: An Experimen-
tal Survey. IEEE PAMI, 36(7):1442–1468, 2014.

[35] S. Song and J. Xiao. Tracking Revisited Using RGBD Cam-

era: Uniﬁed Benchmark and Baselines. In ICCV, 2013.

[36] P. Springst¨ube, S. Heinrich, and S. Wermter. Continuous

Convolutional Object Tracking. In ESANN, 2018.

[37] J. van de Weijer, C. Schmid, J. Verbeek, and D. Larlus.
Learning Color Names for Real-world Applications. IEEE
TIP, 18(7):1512–1523, 2009.

[38] T. Whelan, R. F. Salas-Moreno, B. Glocker, A. J. Davi-
Int. J. Rob. Res.,

son, and S. Leutenegger. Elasticfusion.
35(14):1697–1716, 2016.

1347

[39] Y. Wu, J. Lim, and Y. Ming-Hsuan. Object Tracking Bench-

mark. IEEE PAMI, 37:1834 – 1848, 2015.

[40] J. Xiao, R. Stolkin, Y. Gao, and A. Leonardis. Robust Fu-
sion of Color and Depth Data for RGB-D Target Tracking
Using Adaptive Range-Invariant Depth Models and Spatio-
Temporal Consistency Constraints.
IEEE Transactions on
Cybernetics, 48:2485 – 2499, 2018.

1348

