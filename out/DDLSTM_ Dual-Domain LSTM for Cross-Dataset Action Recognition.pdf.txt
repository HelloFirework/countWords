DDLSTM: Dual-Domain LSTM for Cross-Dataset Action Recognition

Toby Perrett and Dima Damen

Department of Computer Science, University of Bristol, Bristol, UK

<firstname>.<lastname>@bristol.ac.uk

Abstract

Domain alignment in convolutional networks aims to
learn the degree of layer-speciﬁc feature alignment bene-
ﬁcial to the joint learning of source and target datasets.
While increasingly popular in convolutional networks, there
have been no previous attempts to achieve domain align-
ment in recurrent networks. Similar to spatial features, both
source and target domains are likely to exhibit temporal de-
pendencies that can be jointly learnt and aligned.

In this paper we introduce Dual-Domain LSTM (DDL-
STM), an architecture that is able to learn temporal de-
pendencies from two domains concurrently.
It performs
cross-contaminated batch normalisation on both input-to-
hidden and hidden-to-hidden weights, and learns the pa-
rameters for cross-contamination, for both single-layer and
multi-layer LSTM architectures. We evaluate DDLSTM on
frame-level action recognition using three datasets, taking
a pair at a time, and report an average increase in accuracy
of 3.5%. The proposed DDLSTM architecture outperforms
standard, ﬁne-tuned, and batch-normalised LSTMs.

1. Introduction

Online action recognition has direct implications on as-
sistive and surveillance applications, enabling action classi-
ﬁcation as soon as a new frame is observed. It only depends
on previously observed frames, with no knowledge from fu-
ture observations. This contrasts ofﬂine action recognition
where the whole action is observed before being classiﬁed.
One obstacle to deploying online action-recognition sys-
tems in the wild is that they require a large amount of train-
ing data to achieve high performance, so an open question is
how to make best-use of multiple datasets to achieve higher
recognition accuracy. Such cross-dataset temporal depen-
dencies can be present even when datasets use different
class labels.
In this paper, we focus on the related tasks
of kitchen activities. In one dataset, a sequence of actions
could be labeled as:

‘pick-up knife’ → ‘cut onion’ → ‘put onion in pan’
whereas a second dataset would have labels such as:

‘take knife’ → ‘chop potato’ → ‘place on a baking tray’

While the two sets of labels differ, we investigate how
a joint recurrent model can be learnt for both datasets
and we demonstrate that this joint training outperforms
independently-learnt models.

In online recognition, recurrent models are typically
used, particularly Long Short-Term Memory recurrent net-
works (LSTM) [9, 8, 27]. It has recently been shown that
LSTMs can beneﬁt from multiple data sources when us-
ing CNN features for frame-based action classiﬁcation [32].
However, LSTMs are not explicitly designed to handle in-
formation from multiple domains. We aim to address this
limitation by combining recent advances in CNN domain
adaptation [2] with batch-normalised LSTM training [4],
and introduce the Dual-Domain LSTM (DDLSTM). We
show that it is indeed possible for the DDLSTM to learn
jointly from two related datasets, and in a way which out-
performs the standard LSTM for frame-based online action
recognition (whether jointly trained, or pre-trained and ﬁne-
tuned). Importantly, our formalism allows learning cross-
contamination parameters in a differentiable manner within
the backpropation-through-time of the LSTM. In each ex-
periment, we evaluate DDLSTM on pairs of datasets, out of
three datasets frequently used for kitchen-based activities:
50 Salads [40], Breakfast [21] and MPII Cooking 2 [36].
We also demonstrate the beneﬁt of joint training with larger
datasets of related domains (e.g. EPIC [6]) to leverage miss-
ing temporal knowledge.

The rest of this paper is organised as follows. Section 2
gives a summary of related domain adaptation and LSTM
literature. Section 3 introduces the proposed DDLSTM.
Section 4 gives an overview of the datasets we use for eval-
uation. Section 5 includes the comparative analysis, where
we show an average increase in frame-level recognition ac-
curacy of 3.5%. Finally, the conclusion is in Section 6.

2. Background

Works which learn from multiple domains have tradi-
tionally used measures, such as the Maximum Mean Dis-
crepancy (MMD) [13, 28], to determine differences in fea-
ture space between the domains, and apply transformations
to bring them closer together [1, 33]. More recently, loss

17852

functions which take these differences into account have
been used, in conjunction with classiﬁcation loss, in CNNs
to merge domains in an end to end fashion [14, 5, 42], en-
abling predictions to be made on unsupervised domains.
Recent advances have taken the approach of introducing
additional layers into a network in order to align deep and
shallow feature spaces. Of particular interest to us is the
[2]. Their Automatic Domain
work of Carlucci et al.
Alignment Layers are based around expanding batch nor-
malisation (introduced by Ioffe and Szegedy [18] to im-
prove model accuracy and reduce the number of training
iterations) to handle inputs from source and target domains.
This is achieved by calculating separate batch statistics from
source and target samples within a batch, but allowing for
some cross-contamination between domains. These layers
are inserted into classiﬁcation networks (after the fully con-
nected layers in AlexNet [20] and replacing standard batch
normalisation layers in InceptionBN), equipped with a soft-
max classiﬁcation loss for source samples and an entropy
loss for unlabelled target samples. This approach is related
to, but fundamentally different from cross-network stitching
for multi-tasks [29]. In [29], two networks which perform
different tasks (e.g. detection vs captioning) on the same
input are trained. However in [2], one task (e.g. classiﬁca-
tion) is performed on two sets input features which are not
necessarily related.

The works covered so far are all designed for classiﬁ-
cation using convolutional networks trained on single im-
ages. For example, a commonly used benchmark is the Of-
ﬁce+Caltech dataset [11] where adaptation between images
taken with a DSLR in an ofﬁce and product images taken
from Amazon is attempted. The most common technique
to utilise multiple datasets in video-level classiﬁcation is
to train on one and ﬁne tune on another
[3]. Attempts
have also been made to use semantic similarity between la-
bels [44], and to treat different camera angles of the same
content as different domains [31].

We are speciﬁcally interested in online action recogni-
tion, where single-dataset methods tend to use CNN fea-
tures with LSTMs to make frame-level predictions [30,
43].Incorporating a domain adaptation component into re-
current neural networks (RNNs) has the potential to provide
a number of beneﬁts. Applying domain adaptation within
an RNN will allow the direct use of different features which
are well suited to their respective domains, whilst also en-
abling the learning of related temporal information from
multiple domains at the same time. Additionally, when
RNNs are used with raw sensor output, the only place where
domain adaptation can occur is within the RNN.

LSTMs are an obvious candidate for modiﬁcation to be-
come multi-domain aware, as their ability to remember in-
formation for a long period of time makes them particu-
larly well suited to applications such as frame-based ac-

tion recognition (which we focus on here), and language
modelling, amongst others. Greff et al. [12] evaluated 8
different LSTM cell types, and found there was very lit-
tle difference between them. A number of works have at-
tempted to incorporate batch normalisation into an LSTM
framework [24, 4]. In [4], Recurrent Batch Normalisation
consists of normalisation of two sets of weights; Input-to-
hidden weight normalisation can be thought of as standard
batch normalisation, and this is used in conjunction with
hidden-to-hidden normalisation. They found that perform-
ing a separate normalisation for each timestep achieved bet-
ter performance due to initial activations being dissimilar
to values which are converged to after multiple timesteps.
We revisit the batch-normalised LSTM (BNLSTM) in Sec-
tion 3.

3. Dual-Domain LSTM

In this section, we propose the DDLSTM, capable of op-
erating on arbitrary sequential data, which we evaluate in
the context of online action recognition. It is able to jointly
learn temporal dependencies from two domains: both in-
dependent temporal dependencies per domain, as well as
common cross-domain temporal dependencies.

Fig. 1a shows a standard LSTM trained on one dataset.
Fig. 1b shows a standard LSTM trained jointly on two
datasets (i.e. each batch contains examples from both). This
generalises to cases where the labels in the two datasets do
not necessarily match. Should the labels match, a single
shared output vector can be used. However, when each do-
main has its own set of labels, predictions can be deﬁned as
concatenated label vectors, with the ﬁrst part of the output
vector corresponding to predictions for the ﬁrst dataset’s la-
bels, and the second part corresponding to predictions for
the second dataset’s labels. While this architecture learns
the mapping from both input domains to shared or distinct
output labels, the model is likely to learn each domain inde-
pendently, as no effort to align the input from both domains
is incorporated in the architecture.

Before introducing the DDLSTM for aligning and jointly
learning from two domains, we revisit the BNLSTM for sin-
gle domain batch normalisation from [4]. Fig. 1c shows the
BNLSTM trained on a single dataset. We choose to base
the DDLSTM on the BNLSTM architecture for two main
reasons. First, the BNLSTM demonstrated superior results
over the standard LSTM in applications such as language
modelling and simple sequential MNIST [4]. Second, and
perhaps more importantly, it incorporates batch normalisa-
tion, which makes it suitable for adaptation to work with
the domain-mixing aspect (via batch normalisation) of au-
tomatic domain alignment layers. Its formulation in [4] is

7853

batch predictions

D1

0 1 0
0 1 0
0 1 0
0 1 0

ht

LSTM

xt

ct

ht

ct−1

ht−1

D1

batch predictions

(concatenated)

D1

D2

0 1 0
0 1 0
0 0 0
0 0 0

0 0 0
0 0 0
0 1 0
0 1 0

ht

LSTM

xt

ct

ht

ct−1

ht−1

D1

D2

batch predictions

D1

0 1 0
0 1 0
0 1 0
0 1 0

ht

batch predictions

D1

D2

(concatenated)
0 1 0
0 1 0
0 0 0
0 0 0

0 0 0
0 0 0
0 1 0
0 1 0
ht

ct−1

ht−1

BNLSTM

ct

ht

ct−1

ht−1

DDLSTM

ct

ht

xt

xt

D1

D1

D2

batch features

batch features

batch features

batch features

(a) Standard LSTM trained
on one dataset.

(b) LSTM trained jointly
on two datasets, with con-
catenated labels.

(c) BNLSTM trained on
one dataset. BN on feature
input and hidden-to-hidden
input and output.

(d) DDLSTM with concate-
nated labels. Dual-domain
BN on feature and hidden-
to-hidden inputs.

Figure 1: Proposed DDLSTM (d) in comparison to other LSTM architectures and training procedures: (a) single domain
LSTM, (b) jointly trained LSTM, (c) single domain batch-normalised LSTM.

given as:

˜ft
˜it
˜ot
˜gt




= BN (Whht−1; γh, βh)



ct = σ(cid:16)˜ft(cid:17) ⊙ ct−1 + σ(cid:16)˜it(cid:17) ⊙ tanh (˜gt)

+BN (Wxxt; γx, βx) + b

(1)

(2)

ht = σ (˜ot) ⊙ tanh (BN (ct; γc, βc))

(3)
Equation 1 contains the forget gate layer (˜f ), input gate
layer (˜i), output gate layer (˜o) and layer used to gener-
ate candidates to change the cell state later on (˜g). Here,
the normalisation of the Wxxt term can be thought of
as input-to-hidden normalisation (as it operates on the in-
put at the current timestep, xt). The normalisation of the
Whht−1 term can be thought of as hidden-to-hidden nor-
malisation, as it operates on the output of the cell at the pre-
vious timestep (ht−1). Equation 2 gives the new cell state
ct. Note how it is not normalised, which allows the gra-
dient to ﬂow through timesteps. Equation 3 gives the cell
output, where ct is normalised to match the ˜o term. The
batch normalisation function [4] is:

BN (h; γ, β) = β + γ ⊙

(4)

h − bE[h]
qcVar[h] + ǫ

where β and γ are the offset and scale, ﬁxed at 0 and 0.1
in practice. The BNLSTM above assumes the observations
come from a single domain (Fig. 1c). We next propose to
expand this to work on samples from two domains, D1, D2.
Fig. 1d introduces DDLSTM, proposed in this paper,
which is designed to jointly learn temporal dependencies in

two datasets, utilising the power of LSTMs in learning both
short- and long-term dependencies. We do this by ﬁrst us-
ing concatenated label vectors. If D1 has L1 labels and D2
has L2 labels, then the one-hot label vector provided to the
LSTM will be L1 + L2 dimensional. Labels corresponding
to D1 occupy entries 0 to L1 − 1, and labels corresponding
to D2 occupy entries L1 to L1 + L2 − 1. Another, more cru-
cial, modiﬁcation is to construct each batch with samples
from D1 and D2, so the BNLSTM can be jointly trained on
both. The ﬁrst n1 samples in the batch are from D1, while
the rest (n2 = N − n1) are from D2.

The standard BNLSTM is not suitable for dual domains,
as the two domains are likely to have different means and
variances. In order to address this issue, a separate batch
normalisation can be performed for samples from each do-
main. This would be sufﬁcient but would, yet again, ignore
any shared (cross-domain) temporal dependencies. We aim
to learn cross-contamination between domains, when calcu-
lating batch statistics, as follows.

For each domain Di, we aim to learn a corresponding
cross-contamination factor αi which is used to determine
the contributions of samples from the other domain to be
included in the mean and variance calculations. Each αi is
constrained such that ni ≤ αiN ≤ N . A higher αi indi-
cates that more cross-contamination occurs and vice versa.
Note that this cross contamination is required for accurate
variance calculation – if only means were required, then a
weighted average of means for D1 and D2 could be used.
The contribution function, τi, then determines the contribu-
tion of the j’th sample in the batch for each domain, for
a given parameter αi. Each domain has its own contribu-
tion function (remember that samples from D1 appear ﬁrst
in each batch), deﬁned as:

7854

0

D1

D2

N − 1

Batch index

Batch features

τ2

τ1

1 − α2N

α1N

0.0

0.5

1.0
Contribution

Figure 2: Illustration of the contribution functions given in
Equations 5 (red) and 6 (yellow). The contribution of sam-
ples from both D1 and D2 to D1’s batch statistics is given
by τ1, which is governed by the variable α1. Similarly, α2
governs τ2, which gives the contribution of samples from
both datasets to the batch statics of D2.

τ1(α1, j) =

τ2(α2, j) =

1 − tanh(j − α1N )

2

1 + tanh(j − α2N )

2

(5)

(6)

An illustration of this process is given in Fig 2.

This can be used to redeﬁne the batch normalisation
function which learns from one domain (Equation 4) with
a dual-domain batch normalisation function, DDBN:

DDBN (h; γ, β, α1, α2) = β+γ ⊙

h − [DDE[h, α1, α2]
q \DDVar[h, α1, α2] + ǫ

(7)
Instead of using standard expectation and variance calcula-
tions, DDBN relies on the contribution functions given in
Equations 5 and 6 to give the expectation and variance for a
weight w at a speciﬁc timestep from each Di as:

DDEi(w) = PN
j=1 wjτi(αi, j)
PN
j=1 τi(αi, j)

DDVari(w) = PN

j=1(cid:0)wj − Ei(w)(cid:1)2

τi(αi, j)

PN

j=1 τi(αi, j)

(8)

(9)

where wj denotes the value of w corresponding to the j’th
sample in the batch.

The main advantage of operating on the α values with
tanh, rather than just selecting samples as in [2], is that it
allows the whole process to be differentiable, and α val-
ues can be learned as part of the LSTM backpropogation-
through-time process. During training, DDEi and DDVari
are estimated from the batch, and population wide esti-
mates are updated for both domains as more batches are
processed. When testing an unseen sample, a ﬂag is passed
indicating which dataset the sample belongs to, and the
dataset’s population estimates are used for normalisation.
Fig. 3 shows this training and testing process.

Note in Fig. 1d, two DDBN functions are applied: input-
to-hidden, and hidden-to-hidden. While a different set of

batch predictions

D1

D2

(concatenated)
0 1 0
0 1 0
0 0 0
0 0 0

0 0 0
0 0 0
0 1 0
0 1 0
ht

ct−1

ht−1

DDLSTM

xt

D1

D2

test sample prediction

test sample prediction

ct

ht

ct−1

ht−1

0 1 0 0 0 0

ht

DDLSTM

0 0 0

0 1 0
ht

DDLSTM

ct

ht

ct

ht

ct−1

ht−1

xt

D1

xt

D2

batch features

test sample features

test sample features

(a) Joint training

(b) Test on D1

(c) Test on D2

Figure 3: DDLSTM joint training and testing on each
dataset in turn. During testing, a ﬂag specifying which
dataset the sample comes from is passed to the DDBN lay-
ers in order to use the correct batch statistics.

α parameters could be used for each, we found that a sin-
gle set of parameters gives better performance, presumably
because there is similar dataset crossover at the hidden-to-
hidden and input-to-hidden stages, and fewer parameters
need to be learned. Given these ﬁndings, we can deﬁne the
DDLSTM, highlighting proposed differences in blue, as:




˜ft
˜it
˜ot
˜gt




= DDBN (Whht−1; γh, βh, α1, α2)

+DDBN (Wxxt; γx, βx, α1, α2) + b

(10)
with ct and ht deﬁned as previously in Equations 2 and 3.
DDBN was also trialled instead of the BN function in Equa-
tion 3, and found to be be less effective (with regard to both
the results and stability during training). We hypothesise
that this is because there is little point in effectively per-
forming DDBN on the same data twice, and it would con-
fuse the calculation of the ﬁnal class probabilities.

Fig. 4 extends the proposed DDLSTM to two layers, and
highlights where in the cell different forms of batch nor-
malisation occur. Note that the parameters α are shared
between timesteps, along with the rest of the LSTM cell,
but the dual-domain batch normalisations are run individu-
ally for each timestep. Whilst the number of samples from
D1 (n1) and D2 (n2) in each batch can vary, in our experi-
ments we set n1 = n2 = N/2. If either n1 or n2 are zero
(i.e. training data is only drawn from one domain), then the
DDLSTM reduces to the BNLSTM [4].

The Multi-layer DDLSTM can beneﬁt from a gradual
increase in cross-contamination, from lower to higher lay-
ers. This is based on the assumption that more shared infor-
mation will be present in higher-layer representations than
domain-speciﬁc lower-layers. This was shown to be the
case in CNNs [2] where cross-contamination increases as
the network goes from deep to shallow. In Section 5, we
test DDLSTM architectures with up to 10 layers, and show
3 layers give the best performance.

7855

h1

t−2

c1
t−2

h1

t−1

α1

1, α1

2

α1

1, α1

2

h0

t−2

α0

1, α0

2

h1

t−2

c0
t−2

h0

t−2

h0

t−1

α0

1, α0

2

h1
t

α1

1, α1

2

h0
t

α0

1, α0

2

c1
t−1

h1

t−1

c0
t−1

h0

t−1

xt−2

xt−1

xt

h0
t

c0
t

h0
t

x

+

x

tanh

x

σ

σ

tanh

σ

DDBN

BN

α0

1, α0

2

DDBN

xt

c1
t

h1
t

c0
t

h0
t

c0
t−1

h0

t−1

D1

D2

Figure 4: Multi-layer DDLSTM architecture (left), and a DDLSTM cell (right). Note that αs are shared, along with other
LSTM parameters, between timesteps of the same level. However, the dual-domain batch normalisation (which uses α values
to determine the amount of cross-contamination) is calculated separately for each timestep.

(a) Breakfast

(b) 50 Salads

(c) MPII Cooking 2

Figure 5: Visualised comparative results for each dataset. Colours indicate the second dataset used in DDLSTM in each case.
For example, (a) shows the results for Breakfast trained with 50 Salads (blue) or trained with MPII Cooking (red).

4. Datasets

For this work, we use the three largest datasets of
cooking-related activities with framewise action labels,
which are all based around activities in the kitchen. These
are the Breakfast [21], 50 Salads [40] and MPII Cook-
ing 2 [36] datasets. There is very little label crossover as
they are captured in different environments, with different
viewpoints, participants and recipes. However, we assume
temporal dependences in the common tasks can be lever-
aged during a shared training process. Some visual exam-
ples are given, along with qualitative results of some exper-
iments, in Figure 6. For all datasets in this paper, 4 train/test
splits are used, with 75% training and 25% testing. All
splits use leave-person-out, i.e. no participant appears in
both training and testing sets from the same split.

Note that datasets such as UCF [39], HMDB [23] and
Kinetics [3] are not suitable here because they only contain
a single action class per video sequence. For online action
classiﬁcation, where each frame is classiﬁed as soon as it
is seen, multiple actions are required for each video to en-
sure a robust evaluation. Datasets which would ﬁt this cri-

teria include THUMOS [17] and ActivityNet [15], but they
lack the task related-ness of Breakfast, 50 Salads and MPII
Cooking, as we show in Section 5.4.

Breakfast [21]:
The Breakfast dataset contains 433 se-
quences performed by 52 participants, containing 3078 ac-
tions across 50 classes (including a background class) in 18
different kitchens. All the sequences are one of 10 break-
fast routines such as “cooking scrambled eggs” and “mak-
ing tea”, and no speciﬁc recipes are followed. For the exper-
iments in this paper, the lowest level action labels are used.
Examples include “pour cereal” and “smear butter”.

50 Salads [40]: The 50 Salads dataset contains 50 videos,
by 25 participants. There are 52 of the lowest level ac-
tion classes (including the background class which we have
added), which gives a total of 2967 labelled actions. Exam-
ple actions include “cut tomato prep”, “cut tomato core”,
and “cut tomato post”. These prep- and post- labels are not
found in the other two datasets.

MPII Cooking 2 Salads [36]:
The MPII Cooking 2
dataset contains 275 sequences from 30 participants in one
kitchen. It consists of 14105 actions across 88 classes (in-

7856

Figure 6: A 1000 frame section from 50 Salads (left) and MPII cooking 2 (right). GT shows the ground truth, LSTM indicates
a standard LSTM ﬁne-tuned, and DDLST is jointly trained on (Breakast and 50 Salads left; MPII and 50 Salads right).

Training LSTM Type D1 Avg D2 Avg
Single
Joint
Joint

D2

D1
50 Salads MPII Cooking 2
50 Salads MPII Cooking 2
50 Salads MPII Cooking 2
50 Salads MPII Cooking 2 D1,D2
50 Salads MPII Cooking 2 D2,D1
50 Salads MPII Cooking 2
Breakfast
Breakfast
Breakfast
Breakfast
Breakfast
Breakfast
Breakfast MPII Cooking 2
Breakfast MPII Cooking 2
Breakfast MPII Cooking 2
Breakfast MPII Cooking 2 D1,D2
Breakfast MPII Cooking 2 D2,D1
Breakfast MPII Cooking 2

Joint
Single
Joint
Joint
D1,D2
D2,D1
Joint
Single
Joint
Joint

50 Salads
50 Salads
50 Salads
50 Salads
50 Salads
50 Salads

Joint

None
LSTM
BNLSTM
LSTM
LSTM
DDLSTM
None
LSTM
BNLSTM
LSTM
LSTM
DDLSTM
None
LSTM
BNLSTM
LSTM
LSTM
DDLSTM

41.1
41.6
32.4
04.4
43.0
47.1
24.5
24.7
18.4
00.0
25.4
29.1
24.5
26.3
22.5
00.0
25.3
30.5

38.3
39.0
22.6
38.7
00.0
41.5
41.1
40.5
37.0
42.5
08.5
46.3
38.3
38.8
30.9
39.1
01.0
40.1

Table 1: Average results, over splits, on pairs of the three
datasets. A comparison of the Dual-Domain LSTM is
compared to BNLSTM and standard LSTM using differ-
ent training approaches (joint training, pre-training on D1
and ﬁne-tuning on D2 and vice versa). None: frame-level
classiﬁcation without any temporal modelling.

are frame-level features extracted from a CNN. For each
split (from each dataset), Inception V2 [41] (initialised with
HMDB51 weights [23]) is trained using the training split to
classify frames individually. This model is then used to ex-
tract features for test images. The activations from the last
layer of the network (i.e. the logits) are extracted to use as
features. Baselines for single datasets are given in Table 1.
It has been shown that directly predicting the next ac-
tion boundary provides better performance on frame-based
classiﬁcation problems [26]. Following the method for pre-
diction in this work, we ﬁrst train an LSTM architecture (1
layer deep, history size 200 frames), where the loss for a se-
quence is the KL divergence between Gaussians at the next
action boundary and the current boundary prediction for ev-
ery frame. This boundary prediction and the original fea-
tures are then fed as input to the various LSTM architectures
(3 layers deep with a history of 200 frames), trained using
a softmax loss. Concatenated label vectors, as illustrated
earlier in Fig. 1, are used for all experiments. We evaluate
frame-based action recognition on the three datasets intro-
duced in Section 4.

The following LSTM architectures and training proto-

cluding the background class which we have added). Exam-
ple actions include “shake”, “spread”, and “apply plaster”.

cols are compared:

• LSTM jointly trained on two datasets.

5. Experiments

In this section we detail frame-based feature extraction,
and provide comparative analysis against other LSTM ar-
chitectures. In all experiments, frame-based classiﬁcation
accuracy is reported. Implementation Details: For each
LSTM type, 128 hidden units are used per cell. We use
a batch size of 128 with a 50/50 split between datasets,
so each batch contains 64 sequences from each of the two
datasets being evaluated. A learning rate of 0.01 is used
for 50,000 iterations, and all α values are initialised to 0.75.
Other values between 0.5 and 1 were trialled, but made little
difference.

5.1. Online frame based Results

We are particularly interested in online action recog-
nition, that is the ability to recognise actions given cur-
rent and past observations, without an insight into future
frames. The input to each of the tested LSTM architectures

• LSTM pre-trained on one and ﬁne-tuned on the other.

• BNLSTM [4] jointly trained on two datasets.

• DDLSTM jointly trained on two datasets.

Table 1 gives the results for these experiments, averaged
over all four splits. A corresponding visualisation for these
averages can be seen in Fig. 5.
It shows that the DDL-
STM outperforms the jointly trained and ﬁne-tuned LSTMs
as well as the jointly trained BNLSTM across all pairs of
datasets. Compared to the next best performing method
for each dataset pair, where the second best is a differ-
ent method for each case, there are increases of 5.1% and
2.5% for 50 Salads and MPII Cooking 2, 3.7% and 3.8%
for Breakfast and 50 Salads and 4.2% and 1.0% for Break-
fast and MPII Cooking 2. It is expected that MPII Cook-
ing 2, being the largest dataset, would beneﬁt less from
cross-dataset training than the two smaller datasets. Quali-
tative results are shown in Fig. 6, comparing DDLSTM to
the second best performing LSTM architecture in each case.

7857

α2

1, α2

2

α2

1, α2

2

α2

1, α2

2

α1

1, α1

2

α1

1, α1

2

α1

1, α1

2

α0

1, α0

2

α0

1, α0

2

α0

1, α0

2

α2

1

α1

1

α0

1

α2

2

α1

2

α0

2

α2

1

α2

2

Figure 7: Examples of α progress during training. The graphs on the right show how α’s perform with different initialisations.

D2

D1
50 Salads MPII Cooking 2
50 Salads MPII Cooking 2
50 Salads MPII Cooking 2
50 Salads MPII Cooking 2
50 Salads MPII Cooking 2
50 Salads MPII Cooking 2
Breakfast
Breakfast
Breakfast
Breakfast
Breakfast
Breakfast
Breakfast MPII Cooking 2
Breakfast MPII Cooking 2
Breakfast MPII Cooking 2
Breakfast MPII Cooking 2
Breakfast MPII Cooking 2
Breakfast MPII Cooking 2

50 Salads
50 Salads
50 Salads
50 Salads
50 Salads
50 Salads

LSTM Layers D1 Avg D2 Avg
1
2
3
4
5
10*
1
2
3
4
5
10*
1
2
3
4
5
10*

41.3
41.0
41.5
40.6
40.3
38.0
45.0
45.2
46.3
44.3
46.0
40.7
40.8
40.1
40.1
38.8
38.4
35.6

45.7
46.6
47.1
46.1
41.0
39.7
28.4
29.0
29.1
28.6
29.0
25.5
29.2
29.9
30.5
30.5
30.3
28.1

Table 2: Average accuracies over all dataset splits, com-
paring DDLSTM architecture with different depths 1-10.
*Depth 10 used a history of 100 due to memory constraints.

5.2. Discussion

Table 2 gives an evaluation of how the number of lev-
els (or depth) of the DDLSTM architecture affects perfor-
mance. In general, there is a marginal improvement as the
number of levels increases up to 3 with a drop off after-
wards, although we observed one case where there was a
slight drop (MPII Cooking 2 when trained with Breakfast).
Fig. 7 shows an example of how the α values, which
control the dual-domain cross-contamination, change dur-
ing training.
In [2], automatic domain alignment layers
were shown to use more cross-contamination for high-level
layers than low-level layers. We sometimes observed anal-
ogous behaviour, such as α0
1 ≈ 0.5
indicates no cross-contamination, while α2
1 ≈ 1 indicates

1. Here, α0

1 and α2

1, α1

2, α1

2 and α2

total cross-contamination. However, other behaviours were
also seen, such as α0
2. One possible explanation
is that the DDLSTMs are already being fed high-level fea-
tures, so there is a less drastic deep-to-shallow progression
in terms of what these features represent. This could also be
a reason for there being a small, rather than large, improve-
ment when increasing the depth of the DDLSTM network
(Table 2).

We noted earlier that the method is robust to initialisa-
tions of α values. Fig. 7 also shows how different initiali-
sations converge to similar α values after training. We note
that α values from multiple runs are unlikely to be identical,
given that batches contain random sample orderings.

5.3. Comparison to Published Results

Very few works have attempted online frame-level accu-
racy on these datasets, with most works focusing on ofﬂine
classiﬁcation [16, 37, 25, 19, 38]. To compare to these, we
also evaluate DDLSTM with look-ahead, i.e. allowing it to
see half the training history size into the future when classi-
fying the current frame.

In Table 3, we report results on Breakfast, showing our
method outperforms published results operating online -
note that [7] only provides results on a single split in the
dataset. We use “ofﬂine multi-pass” to refer to methods that
iteratively optimise the classiﬁcation of frames, by multi-
pass segmentation of the whole video. “Ofﬂine single pass”
methods have access to future frames, but only as a single
pass, e.g. bi-directional LSTM. “Online” methods classify
each frame as soon as it is seen, with no access to future
frames, e.g. uni-directional LSTM. We do not expect our
single-pass results to outperform multi-pass ofﬂine evalua-
tions, but provide these results for completion.

In Table 4, we compare to published ofﬂine results
on 50 Salads, using publicly available features from [25].
These use mid-level classes (17 classes plus a background

7858

010000200003000040000500000.50.60.70.80.91.0010000200003000040000500000.50.60.70.80.91.0Method
[22]
[35]
DDLSTM (look-ahead) w/f [22]
DDLSTM (look ahead)
[35]
[7] (only evaluated on 1/4 splits)
[32]
DDLSTM w/f [22]
DDLSTM

Mode
ofﬂine multi-pass
ofﬂine multi-pass
ofﬂine single-pass
ofﬂine single-pass
online
online
online
online
online

Accuracy
56.3
43.0
26.4
32.6
27.2
32.6
28.5
23.8
29.1

Table 3: Comparative analysis on the Breakfast dataset, us-
ing our features as well as with features (w/f) from [22].
The DDLSTM uses the public features from 50 salads [25]
(used in Table 4) as its second domain.

Method
Bi-LSTM (1 layer) [25]
ED-TCN [25]
DDLSTM (look-ahead) w/f [25]
LSTM w/f [25]
DDLSTM w/f [25]

Mode
ofﬂine single-pass
ofﬂine single-pass
ofﬂine single-pass
online
online

Accuracy
55.7
64.7
60.9
57.6
59.1

Table 4: Comparative analysis on the 50 salads dataset, us-
ing mid-level classes with features (w/f) from [25]. The
DDLSTM uses the public features from Breakfast [22] as
its second domain (used in Table 3).

class), which is signiﬁcantly easier than what we report in
Table 1 where we use all 52 lowest-level classes. Our on-
line results and results with look ahead are only slightly
worse than others evaluated ofﬂine. We have not found any
published results for online performance on 50 salads mid-
level, or any other results using publicly available features.

5.4. Effect of Related Domain Adaptation

To investigate how much of the DDLSTM’s improve-
ment comes from exploiting related temporal information,
we evaluated whether 50 Salads (split 0) beneﬁts equally
from three large-scale datasets with various levels of do-
main relatedness. We test on THUMOS [17] (features
from [10]), ActivityNet [15] (features from [15]) and EPIC
Kitchens [6] (ImageNet ResNet 50 features). Of these, only
EPIC presents a related ‘kitchen’ domain. THUMOS and
ActivityNet capture actions unrelated to the kitchen domain
and contain very few actions per sequence.

We report results in Table 5. Only by ﬁne-tuning, re-
sults show that the related dataset EPIC provides best per-
formance. We observe no beneﬁt to in jointly training using
DDLSTM with THUMOS or ActivityNet. We however ob-
serve clear improvements when jointly training with EPIC
Kitchens, for both EPIC (by 1.6%) and 50 Salads (by 4%).
We conclude that 1) DDLSTM is particularly suited for re-
lated domains, and that 2) a higher increase in accuracy is
expected for smaller datasets as these leverage missing tem-

D1
ActivityNet
ActivityNet
Thumos
Thumos
EPIC
EPIC

D2
50 Salads
50 Salads
50 Salads
50 Salads
50 Salads
50 Salads

Training LSTM Type D1 Acc D2 Acc
Pt/ft
Joint
Pt/ft
Joint
Pt/ft
Joint

LSTM
DDLSTM
LSTM
DDLSTM
LSTM
DDLSTM

44.4
44.3
65.9
66.1
31.5
33.1

42.1
42.2
42.0
42.3
44.9
48.9

Table 5: Classiﬁcation accuracy when learning 50 salads
(split 0) from larger datasets. Pt/ft refers to results on D1
when pre-training on D2 and ﬁne tuning on D1 and vice
versa. Figure shows that the large dataset with related do-
main (EPIC) performs better for pre-training, and shows
larger improvement using DDLSTM.

poral knowledge from the larger dataset.

6. Conclusion and Future Work

In this paper, the Dual-Domain LSTM (DDLSTM) was
introduced, which is capable of learning temporal informa-
tion from two domains at the same time. Given batches con-
sisting of samples from both domains, DDLSTM applies a
dual-domain batch normalisation on both input-to-hidden
and hidden-to-hidden LSTM weights. This calculates sep-
arate batch statistics for each domain, but learns a pa-
rameter which determines how much cross-contamination
between domains should be included in a fully differen-
tiable manner. The learnt parameters are shared across
timesteps, but the batch normalisation calculation is per-
formed on data at each timestep separately. We evaluated
the DDLSTM architecture on online action recognition, us-
ing three cooking datasets with multiple actions per video
and framewise labels. DDLSTM was found to outperform
(by a 3.5% average across all datasets) the standard LSTM
(both jointly trained, and pre-trained and ﬁne-tuned) and the
batch-normalised LSTM upon which it builds.

This paper presents a number of opportunities (A-D) for
future investigation. A) Learning from more than two re-
lated datasets/domains at the same time. This would re-
quire modiﬁcations to the contribution functions (Equa-
tions 5 and 6) and an increase in the number of αs to
d(d − 1)l, where d and l are the number of datasets and
LSTM layers. B) Automatically adjusting the makeup of
each batch could provide performance improvements, in a
similar fashion to the way α values are leaned for cross-
contamination. C) Using an attention mechanism [34] to
determine which items within a batch are most useful for
cross-contamination. D) Incorporating frame-based domain
adaptation methods into the feature extractor as well as the
LSTM.

Acknowledgement: Research supported by EPSRC LO-
CATE (EP/N033779/1) and uses publicly available data.

7859

References

[1] P. P. Busto and J. Gall. Open Set Domain Adapta-
tion. In International Conference on Computer Vision,
2017. 1

[2] F. M. Carlucci, L. Porzi, B. Caputo, E. Ricci, and S. R.
Bul`o. AutoDIAL: Automatic DomaIn Alignment Lay-
ers. In International Conference on Computer Vision,
2017. 1, 2, 4, 7

[3] J. Carreira and A. Zisserman. Quo Vadis, Action
Recognition? A New Model and the Kinetics Dataset.
In Computer Vision and Pattern Recognition, 2017. 2,
5

[4] T. Cooijmans, N. Ballas, C. Laurent, C¸ . G¨ulc¸ehre,
and A. Courville. Recurrent Batch Normalization. In
arXiv, 1603.09025, 2016. 1, 2, 3, 4, 6

[5] G. Csurka,

F. Baradel,

and B. Chidlovskii.
for Unsupervised
Discrepancy-Based Networks
Domain Adaptation : A Comparative Study.
In
International Conference on Computer Vision, 2017.
2

[6] D. Damen, H. Doughty, G. M. Farinella, S. Fidler,
A. Furnari, E. Kazakos, D. Moltisanti, J. Munro,
T. Perrett, W. Price, and M. Wray. Scaling egocen-
tric vision: The epic-kitchens dataset.
In European
Conference on Computer Vision, 2018. 1, 8

[7] R. De Geest and T. Tuytelaars. Modeling temporal
structure with LSTM for online action detection.
In
Winter Conference on Applications of Computer Vi-
sion, 2018. 7, 8

[8] J. Donahue, L. A. Hendricks, M. Rohrbach, S. Venu-
gopalan, S. Guadarrama, K. Saenko, and T. Dar-
rell. Long-Term Recurrent Convolutional Networks
for Visual Recognition and Description. Transac-
tions on Pattern Analysis and Machine Intelligence,
39(4):677–691, 2017. 1

[9] Y. Du, W. Wang, and L. Wang. Hierarchical Recurrent
Neural Network for Skeleton Based Action Recogni-
tion.
In Computer Vision and Pattern Recognition,
2015. 1

[10] J. Gao, Z. Yang, and R. Nevatia. Cascaded boundary
In British

regression for temporal action detection.
Machine Vision Conference, 2017. 8

[11] B. Gong, Y. Shi, F. Sha, and K. Grauman. Geodesic
Flow Kernel for Unsupervised Domain Adaptation. In
Computer Vision and Pattern Recognition, 2012. 2

[12] K. Greff, R. K. Srivastava, J. Koutnik, B. R. Ste-
unebrink, and J. Schmidhuber. LSTM: A Search
Space Odyssey. Transactions on Neural Networks and
Learning Systems, 28(10):2222–2232, 2017. 2

[13] A. Gretton, K. M. Borgwardt, M.

J. Rasch,
B. Sch¨olkopf, and A. J. Smola. A Kernel Method for
the Two-Sample-Problem. In Advances in Neural In-
formation Processing Systems, 2006. 1

[14] P. Haeusser, T. Frerix, A. Mordvintsev, and D. Cre-
In Interna-

mers. Associative Domain Adaptation.
tional Conference on Computer Vision, 2017. 2

[15] F. C. Heilbron, V. Escorcia, B. Ghanem, and J. C.
Niebles. ActivityNet: A Large-Scale Video Bench-
mark for Human Activity Understanding.
In Com-
puter Vision and Pattern Recognition, 2015. 5, 8

[16] D. A. Huang, L. Fei-Fei, and J. C. Niebles. Connec-
tionist temporal modeling for weakly supervised ac-
tion labeling. In European Conference on Computer
Vision, 2016. 7

[17] H. Idrees, A. R. Zamir, Y. G. Jiang, A. Gorban,
I. Laptev, R. Sukthankar, and M. Shah. The THU-
MOS challenge on action recognition for videos in
the wild. Computer Vision and Image Understanding,
155:1–23, 2017. 5, 8

[18] S. Ioffe and C. Szegedy. Batch Normalization: Accel-
erating Deep Network Training by Reducing Internal
Covariate Shift. In International Conference on Ma-
chine Learning, 2015. 2

[19] S. Jiao. Global for Coarse and Part for Fine: A Hierar-
chical Action Recognition Framework. International
Conference on Image Processing, pages 2630–2634,
2018. 7

[20] A. Krizhevsky, I. Sutskever, and G. E. Hinton. Ima-
geNet Classiﬁcation with Deep Convolutional Neural
Networks.
In Advances In Neural Information Pro-
cessing Systems, 2012. 2

[21] H. Kuehne, A. Arslan, and T. Serre. The Language
of Actions: Recovering the Syntax and Semantics of
Goal-Directed Human Activities. In Computer Vision
and Pattern Recognition, 2014. 1, 5

[22] H. Kuehne, J. Gall, and T. Serre. An end-to-end gen-
erative framework for video segmentation and recog-
nition. In Winter Conference on Applications of Com-
puter Vision, 2016. 8

[23] H. Kuehne, T. Serre, H. Jhuang, E. Garrote, T. Poggio,
and T. Serre. HMDB: A Large Video Database for Hu-
man Motion Recognition. In International Conference
on Computer Vision, 2011. 5, 6

[24] C. Laurent, G. Pereyra, P. Brakel, Y. Zhang, and
Y. Bengio. Batch Normalized Recurrent Neural Net-
works.
In International Conference on Acoustics,
Speech and Signal Processing, 2016. 2

[25] C. Lea, M. D. F. Ren, A. Reiter, and G. D. Hager. Tem-
poral Convolutional Networks for Action Segmenta-

7860

tion and Detection. In Computer Vision and Pattern
Recognition, 2017. 7, 8

Neural Network for Fine-Grained Action Detection.
In Computer Vision and Pattern Recognition, 2016. 7

[38] H. Song, X. Wu, B. Zhu, Y. Wu, M. Chen, and Y. Jia.
Temporal Action Localization in Untrimmed Videos
using Action Pattern Trees. In Computer Vision and
Pattern Recognition, 2018. 7

[39] K. Soomro, A. R. Zamir, and M. Shah. UCF101: A
Dataset of 101 Human Actions Classes From Videos
in The Wild. arXiv 1212.0402, 2012. 5

[40] S. Stein and S. J. McKenna. Combining Embedded
Accelerometers with Computer Vision for Recogniz-
ing Food Preparation Activities. In International Joint
Conference on Pervasive and Ubiquitous Computing,
2013. 1, 5

[41] C. Szegedy, V. Vanhoucke, S. Ioffe, J. Shlens, and
Z. Wojna. Rethinking the Inception Architecture for
Computer Vision.
In Computer Vision and Pattern
Recognition, 2016. 6

[42] H. Venkateswara, J. Eusebio, S. Chakraborty, and
S. Panchanathan. Deep Hashing Network for Unsu-
pervised Domain Adaptation. In Computer Vision and
Pattern Recognition, 2017. 2

[43] Z. Wu, Y.-G. Jiang, J. Wang, J. Pu, and X. Xue.
Exploring Inter-feature and Inter-class Relationships
with Deep Neural Networks for Video Classiﬁca-
tion. In ACM International Conference on Multime-
dia, 2014. 2

[44] V. W. Zheng, D. H. Hu, and Q. Yang. Cross-Domain
Activity Recognition. In International Conference on
Ubiquitous Computing, 2009. 2

[26] Y. Li, C. Lan, J. Xing, W. Zeng, C. Yuan, and
J. Liu.
Online Human Action Detection using
Joint Classiﬁcation-Regression Recurrent Neural Net-
works. In European Conference on Computer Vision,
2016. 6

[27] J. Liu, G. Wang, L. Y. Duan, K. Abdiyeva, and A. C.
Kot. Skeleton-Based Human Action Recognition with
Global Context-Aware Attention LSTM Networks.
Transactions on Image Processing, 27(4):1586–1599,
2018. 1

[28] M. Long, J. Wang, G. Ding, J. Sun, and P. S.
Yu. Transfer Feature Learning with Joint Distribution
Adaptation. In Computer Vision and Pattern Recogni-
tion, 2013. 1

[29] I. Misra, A. Shrivastava, A. Gupta, and M. Hebert.
In

Cross-stitch Networks for Multi-task Learning.
Computer Vision and Pattern Recognition, 2016. 2

[30] J. Y.-H. Ng, M. Hausknecht, S. Vijayanarasimhan,
O. Vinyals, R. Monga, and G. Toderici. Beyond Short
Snippets: Deep Networks for Video Classiﬁcation. In
Computer Vision and Pattern Recognition, 2015. 2

[31] W. Nie, A. Liu, J. Yu, Y. Su, L. Chaisorn, Y. Wang, and
M. S. Kankanhalli. Multi-View Action Recognition by
Cross-Domain Learning.
In International Workshop
on Multimedia Signal Processing, 2014. 2

[32] T. Perrett and D. Damen. Recurrent Assistance :
Cross-Dataset Training of LSTMs on Kitchen Tasks.
In International Conference on Computer Vision:
Workshop on Assistive Computer Vision and Robotics,
2017. 1, 8

[33] T. Perrett and M. Mirmehdi. Cost-Based Feature
Transfer for Vehicle Occupant Classiﬁcation. In Asian
Conference on Computer Vision Workshop on Tech-
nology for Smart Vehicles, 2013. 1

[34] Y. Qin, D. Song, H. Cheng, W. Cheng, G. Jiang, and
G. W. Cottrell. A dual-stage attention-based recur-
rent neural network for time series prediction. In In-
ternational Joint Conference on Artiﬁcial Intelligence,
2017. 8

[35] A. Richard, H. Kuehne, A. Iqbal, and J. Gall.
NeuralNetwork-Viterbi: A framework for weakly su-
pervised video learning. In Computer Vision and Pat-
tern Recognition, 2018. 8

[36] M. Rohrbach, S. Amin, M. Andriluka, and B. Schiele.
A Database for Fine Grained Activity Detection of
Cooking Activities. In Computer Vision and Pattern
Recognition, 2012. 1, 5

[37] B. Singh, T. K. Marks, M. Jones, O. Tuzel, and
M. Shao. A Multi-stream Bi-directional Recurrent

7861

