Inverse Cooking: Recipe Generation from Food Images

Amaia Salvador1 ∗ Michal Drozdzal2 Xavier Giro-i-Nieto1 Adriana Romero2

1Universitat Politecnica de Catalunya

2Facebook AI Research

{amaia.salvador, xavier.giro}@upc.edu, {adrianars, mdrozdzal}@fb.com

Abstract

People enjoy food photography because they appreciate
food. Behind each meal there is a story described in a com-
plex recipe and, unfortunately, by simply looking at a food
image we do not have access to its preparation process.
Therefore, in this paper we introduce an inverse cooking
system that recreates cooking recipes given food images.
Our system predicts ingredients as sets by means of a novel
architecture, modeling their dependencies without impos-
ing any order, and then generates cooking instructions by
attending to both image and its inferred ingredients simul-
taneously. We extensively evaluate the whole system on the
large-scale Recipe1M dataset and show that (1) we improve
performance w.r.t. previous baselines for ingredient predic-
tion; (2) we are able to obtain high quality recipes by lever-
aging both image and ingredients; (3) our system is able to
produce more compelling recipes than retrieval-based ap-
proaches according to human judgment. We make code and
models publicly available1.

1. Introduction

Food is fundamental to human existence. Not only does
it provide us with energy—it also deﬁnes our identity and
culture [10, 34]. As the old saying goes, we are what we eat,
and food related activities such as cooking, eating and talk-
ing about it take a signiﬁcant portion of our daily life. Food
culture has been spreading more than ever in the current
digital era, with many people sharing pictures of food they
are eating across social media [31]. Querying Instagram for
#food leads to at least 300M posts; similarly, searching for
#foodie results in at least 100M posts, highlighting the un-
questionable value that food has in our society. Moreover,
eating patterns and cooking culture have been evolving over
time. In the past, food was mostly prepared at home, but
nowadays we frequently consume food prepared by third-
parties (e.g.
takeaways, catering and restaurants). Thus,
the access to detailed information about prepared food is

∗Work done during internship at Facebook AI Research
1https://github.com/facebookresearch/inversecooking

Figure 1: Example of a generated recipe, composed of a
title, ingredients and cooking instructions.

limited and, as a consequence, it is hard to know precisely
what we eat. Therefore, we argue that there is a need for
inverse cooking systems, which are able to infer ingredients
and cooking instructions from a prepared meal.

The last few years have witnessed outstanding improve-
ments in visual recognition tasks such as natural image clas-
siﬁcation [47, 14], object detection [42, 41] and semantic
segmentation [27, 19]. However, when comparing to natu-
ral image understanding, food recognition poses additional
challenges, since food and its components have high intra-
class variability and present heavy deformations that occur
during the cooking process. Ingredients are frequently oc-
cluded in a cooked dish and come in a variety of colors,
forms and textures. Further, visual ingredient detection re-
quires high level reasoning and prior knowledge (e.g. cake
will likely contain sugar and not salt, while croissant will
presumably include butter). Hence, food recognition chal-
lenges current computer vision systems to go beyond the
merely visible, and to incorporate prior knowledge to en-
able high-quality structured food preparation descriptions.

Previous efforts on food understanding have mainly fo-
cused on food and ingredient categorization [1, 39, 24].
However, a system for comprehensive visual food recog-
nition should not only be able to recognize the type of meal
or its ingredients, but also understand its preparation pro-

110453

Ingredients:Flour, butter, sugar, egg, milk, salt.Instructions:-Preheat oven to 450 degrees.-Cream butter and sugar.-Add egg and milk.-Sift flour and salt together.-Add to creamed mixture.-Roll out on floured board to 1/4 inch thickness.-Cut with biscuit cutter.-Place on ungreased cookie sheet.-Bake for 10 minutes.Title: Biscuitscess. Traditionally, the image-to-recipe problem has been
formulated as a retrieval task [54, 3, 4, 45], where a recipe
is retrieved from a ﬁxed dataset based on the image similar-
ity score in an embedding space. The performance of such
systems highly depends on the dataset size and diversity, as
well as on the quality of the learned embedding. Not sur-
prisingly, these systems fail when a matching recipe for the
image query does not exist in the static dataset.

An alternative to overcome the dataset constraints of re-
trieval systems is to formulate the image-to-recipe problem
as a conditional generation one. Therefore, in this paper, we
present a system that generates a cooking recipe containing
a title, ingredients and cooking instructions directly from
an image. Figure 1 shows an example of a generated recipe
obtained with our method, which ﬁrst predicts ingredients
from an image and then conditions on both the image and
the ingredients to generate the cooking instructions. To the
best of our knowledge, our system is the ﬁrst to generate
cooking recipes directly from food images. We pose the in-
struction generation problem as a sequence generation one
conditioned on two modalities simultaneously, namely an
image and its predicted ingredients. We formulate the in-
gredient prediction problem as a set prediction, exploiting
their underlying structure. We model ingredient dependen-
cies while not penalizing for prediction order, thus revising
the question of whether order matters [51]. We extensively
evaluate our system on the large-scale Recipe1M dataset
[45] that contains images, ingredients and cooking instruc-
tions, showing satisfactory results. More precisely, in a hu-
man evaluation study, we show that our inverse cooking sys-
tem outperforms previously introduced image-to-recipe re-
trieval approaches by a large margin. Moreover, using a
small set of images, we show that food image-to-ingredient
prediction is a hard task for humans and that our approach
is able to surpass them.

The contributions of this paper can be summarized as:

– We present an inverse cooking system, which gener-
ates cooking instructions conditioned on an image and
its ingredients, exploring different attention strategies
to reason about both modalities simultaneously.

– We exhaustively study ingredients as both a list and a
set, and propose a new architecture for ingredient pre-
diction that exploits co-dependencies among ingredi-
ents without imposing order.

– By means of a user study we show that ingredient pre-
diction is indeed a difﬁcult task and demonstrate the
superiority of our proposed system against image-to-
recipe retrieval approaches.

2. Related Work

Food Understanding. The introduction of large scale
food datasets, such as Food-101 [1] and Recipe1M [45], to-

gether with a recently held iFood challenge2 has enabled
signiﬁcant advancements in visual food recognition, by
providing reference benchmarks to train and compare ma-
chine learning approaches. As a result, there is currently
a vast literature in computer vision dealing with a variety
of food related tasks, with special focus in image classiﬁ-
cation [26, 39, 38, 33, 6, 24, 30, 60, 16, 17]. Subsequent
works tackle more challenging tasks such as estimating the
number of calories given a food image [32], estimating food
quantities [5], predicting the list of present ingredients [3, 4]
and ﬁnding the recipe for a given image [54, 3, 4, 45, 2].
Additionally, [34] provides a detailed cross-region anal-
ysis of food recipes, considering images, attributes (e.g.
style and course) and recipe ingredients. Food related tasks
have also been considered in the natural language process-
ing literature, where recipe generation has been studied in
the context of generating procedural text from either ﬂow
graphs [13, 36, 35] or ingredients’ checklists [21].

Multi-label classiﬁcation. Signiﬁcant effort has been
devoted in the literature to leverage deep neural networks
for multi-label classiﬁcation, by designing models [49, 8,
56, 37, 53] and studying loss functions [12] well suited for
this task. Early attempts exploit single-label classiﬁcation
models coupled with binary logistic loss [3], assuming the
independence among labels and dropping potentially rele-
vant information. One way of capturing label dependen-
cies is by relying on label powersets [49]. Powersets con-
sider all possible label combinations, which makes them in-
tractable for large scale problems. Another expensive alter-
native consists in learning the joint probability of the labels.
To overcome this issue, probabilistic classiﬁer chains [8]
and their recurrent neural network-based [53, 37] counter-
parts propose to decompose the joint distribution into con-
ditionals, at the expense of introducing intrinsic ordering.
Note that most of these models require to make a predic-
tion for each of the potential labels. Moreover, joint input
and label embeddings [57, 25, 61] have been introduced to
preserve correlations and predict label sets. As an alterna-
tive, researchers have attempted to predict the cardinality of
the set of labels [43, 44]; however, assuming the indepen-
dence of labels. When it comes to multi-label classiﬁcation
objectives, binary logistic loss [3], target distribution cross-
entropy [12, 29], target distribution mean squared error [56]
and ranking-based losses [12] have been investigated and
compared. Recent results on large scale datasets outline the
potential of the target distribution loss [29].

Conditional text generation. Conditional text genera-
tion with auto-regressive models has been widely studied in
the literature using both text-based [48, 11, 50, 9] as well
as image-based conditionings [52, 59, 28, 20, 23, 7, 46]. In
neural machine translation, where the goal is to predict the
translation for a given source text into another language, dif-

2https://www.kaggle.com/c/ifood2018

10454

Figure 2: Recipe generation model. We extract image features eI with the image encoder, parametrized by θI . Ingredients
are predicted by θL, and encoded into ingredient embeddings eL with θe. The cooking instruction decoder, parametrized by
θR generates a recipe title and a sequence of cooking steps by attending to image embeddings eI , ingredient embeddings eL,
and previously predicted words (r0, ..., rt−1).

ferent architecture designs have been studied, including re-
current neural networks [48], convolutional models [11] and
attention based approaches [50]. More recently, sequence-
to-sequence models have been applied to more open-ended
generation tasks, such as poetry [55] and story generation
[23, 9]. Following neural machine translation trends, auto-
regressive models have exhibited promising performance in
image captioning [52, 59, 28, 20, 7, 46], where the goal is to
provide a short description of the image contents, opening
the doors to less constrained problems such as generating
descriptive paragraphs [23] or visual storytelling [18].

3. Generating recipes from images

Generating a recipe (title, ingredients and instructions)
from an image is a challenging task, which requires a si-
multaneous understanding of the ingredients composing the
dish as well as the transformations they went through, e.g.
slicing, blending or mixing with other ingredients. Instead
of obtaining the recipe from an image directly, we argue that
a recipe generation pipeline would beneﬁt from an interme-
diate step predicting the ingredients list. The sequence of
instructions would then be generated conditioned on both
the image and its corresponding list of ingredients, where
the interplay between image and ingredients could provide
additional insights on how the latter were processed to pro-
duce the resulting dish.

Figure 2 illustrates our approach. Our recipe genera-
tion system takes a food image as an input and outputs a
sequence of cooking instructions, which are generated by
means of an instruction decoder that takes as input two em-
beddings. The ﬁrst one represents visual features extracted
from an image, while the second one encodes the ingre-
dients extracted from the image. We start by introducing
our transfomer-based instruction decoder in Subsection 3.1.
This allows us to formally review the transformer, which we
then study and modify to predict ingredients in an orderless
manner in Subsection 3.2. Finally, we review the optimiza-
tion details in Subsection 3.3.

3.1. Cooking Instruction Transformer

Given an input image with associated ingredients, we
aim to produce a sequence of instructions R = (r1, ..., rT )
(where rt denotes a word in the sequence) by means of
an instruction transformer [50]. Note that the title is pre-
dicted as the ﬁrst instruction. This transformer is condi-
tioned jointly on two inputs: the image representation eI
and the ingredient embedding eL. We extract the image
representation with a ResNet-50 [15] encoder and obtain the
ingredient embedding eL by means of a decoder architec-
ture to predict ingredients, followed by a single embedding
layer mapping each ingredient into a ﬁxed-size vector.

The instruction decoder is composed of transformer
blocks, each of them containing two attention layers fol-
lowed by a linear layer [50]. The ﬁrst attention layer applies
self-attention over previously generated outputs, whereas
the second one attends to the model conditioning in order
to reﬁne the self-attention output. The transformer model
is composed of multiple transformer blocks followed by a
linear layer and a softmax nonlinearity that provides a dis-
tribution over recipe words for each time step t. Figure 3a
illustrates the transformer model, which traditionally is con-
ditioned on a single modality. However, our recipe gen-
erator is conditioned on two sources:
the image features
eI ∈ RP ×de and ingredients embeddings eL ∈ RK×de
(P and K denote the number of image and ingredient fea-
tures, respectively, and de is the embedding dimensional-
ity). Thus, we want our attention to reason about both
modalities simultaneously, guiding the instruction genera-
tion process. To that end, we explore three different fusion
strategies (depicted in Figure 3):

– Concatenated attention. This strategy ﬁrst concate-
nates both image eI and ingredients eL embeddings
over the ﬁrst dimension econcat ∈ R(K+P )×de . Then,
attention is applied over the combined embeddings.

– Independent attention. This strategy incorporates
two attention layers to deal with the bi-modal condi-
tioning. In this case, one layer attends over the image
embedding eI , whereas the other attends over the in-

10455

Addbeef onion tomato beans𝜃Ronionandcookuntiltender𝜃R𝜃R𝜃R𝜃R𝜃R𝜃LeIeLr0r1r2r3r4r5Ingredient Decoder𝜃I𝜃EImageEncoderIngredient EncoderInstruction Decoder(a) Transformer model [50]

(b) Concatenated

(c) Independent

(d) Sequential

Figure 3: Attention strategies for the instruction decoder. In our experiments, we replace the attention module in the
transformer (a), with three different attention modules (b-d) for cooking instruction generation using multiple conditions.

gredient embeddings eL. The output of both attention
layers is combined via summation operation.

– Sequential attention. This strategy sequentially at-
tends over the two conditioning modalities. In our de-
sign, we consider two orderings: (1) image ﬁrst where
the attention is ﬁrst computed over image embeddings
eI and then over ingredient embeddings eL; and (2)
ingredients ﬁrst where the order is ﬂipped and we ﬁrst
attend over ingredient embeddings eL followed by im-
age embeddings eI .

3.2. Ingredient Decoder

Which is the best structure to represent ingredients? On
the one hand, it seems clear that ingredients are a set, since
permuting them does not alter the outcome of the cooking
recipe. On the other hand, we colloquially refer to ingredi-
ents as a list (e.g. list of ingredients), implying some order.
Moreover, it would be reasonable to think that there is some
information in the order in which humans write down the
ingredients in a recipe. Therefore, in this subsection we
consider both scenarios and introduce models that work ei-
ther with a list of ingredients or with a set of ingredients.

A list of ingredients is a variable sized, ordered collec-
tion of unique meal constituents. More precisely, let us de-
ﬁne a dictionary of ingredients of size N as D = {di}N
i=0,
from which we can obtain a list of ingredients L by select-
ing K elements from D: L = [li]K
i=0. We encode L as a
binary matrix L of dimensions K × N , with Li,j = 1 if
dj ∈ D is selected and 0 otherwise (one-hot-code represen-
tation). Thus, our training data consists of M image and
ingredient list pairs {(x(i), L(i))}M
i=0. In this scenario, the
goal is to predict ˆL from an image x by maximizing the
following objective:

arg max

θI ,θL

M

X

i=0

log p(ˆL(i) = L(i)|x(i); θI , θL),

(1)

(i)
k = L

k=0 log p(ˆL

where θI and θL represent the learnable parameters of the
image encoder and ingredient decoder, respectively. Since
L denotes a list, we can factorize p(ˆL(i) = L(i)|x(i))
(i)
into K conditionals: PK
<k) 3
(i)
and parametrize p(ˆL
<k) as a categorical distribu-
tion. In the literature, these conditionals are usually mod-
eled with auto-regressive (recurrent) models. In our experi-
ments, we choose the transformer model as well. It is worth
mentioning that a potential drawback of this formulation is
that it inherently penalizes for order, which might not nec-
essarily be relevant for ingredients.

(i)
k |x(i), L

(i)
k |x(i), L

A set of ingredients is a variable sized, unordered col-
lection of unique meal constituents. We can obtain a set of
ingredients S by selecting K ingredients from the dictio-
nary D: S = {si}K
i=0. We represent S as a binary vector s
of dimension N , where si = 1 if si ∈ S and 0 otherwise.
Thus, our training data consists of M image and ingredient
set pairs: {(x(i), s(i))}M
i=0. In this case, the goal is to predict
ˆs from an image x by maximizing the following objective:

arg max

θI ,θL

M

X

i=0

log p(ˆs(i) = s(i)|x(i); θI , θL).

(2)

Assuming independence among elements, we can fac-
(i)
torize p(ˆs(i) = s(i)|x(i)) as PN
j |x(i)).
However, the ingredients in the set are not necessarily inde-
pendent, e.g. salt and pepper frequently appear together.

j=0 log p(ˆs

(i)
j = s

To account for element dependencies in the set, we
model the set as a list, i.e. as a product of conditional prob-
abilities, by means of an auto-regressive model such as the
transformer. The transformer predicts ingredients in a list-
(i)
like fashion p(ˆL
<k), until the end of sequence eos
token is encountered. As mentioned previously, the draw-
back of this approach is that such model design penalizes

(i)
k |x(i), L

3 L

(i)
k denotes the k-th row of L(i) and L

(i)
<k represents all rows of

L(i) up to, but not including, the k-th one.

10456

AttentionOutputs (shifted right)Positional encodingLinearSoftmaxxNOutput probabilitiesAdd & NormFeed-forwardSelf-AttentioneAdd & NormAddEmbeddingAdd & Norm[eL eI]AttentionAdd & NormeIAdd & NormAttentioneLAttentioneL/eIAttentionAdd & NormAttentioneI/eLAdd & Norm3.3. Optimization

We train our recipe transfomer in two stages. In the ﬁrst
stage, we pre-train the image encoder and ingredients de-
coder as presented in Subsection 3.2. Then, in the second
stage, we train the ingredient encoder and instruction de-
coder (following Subsection 3.1) by minimizing the neg-
ative log-likelihood and adjusting θR and θE. Note that,
while training, the instruction decoder takes as input the
ground truth ingredients. All transformer models are trained
with teacher forcing [58] except for the set transformer.

4. Experiments

This section is devoted to the dataset and the descrip-
tion of implementation details, followed by an exhaustive
analysis of the proposed attention strategies for the cooking
instruction transformer. Further, we quantitatively compare
the proposed ingredient prediction models to previously in-
troduced baselines. Finally, a comparison of our inverse
cooking system with retrieval-based models as well as a
comprehensive user study is provided.

4.1. Dataset

We train and evaluate our models on the Recipe1M
dataset [45], composed of 1 029 720 recipes scraped from
cooking websites. The dataset contains 720 639 training,
155 036 validation and 154 045 test recipes, containing a ti-
tle, a list of ingredients, a list of cooking instructions and
(optionally) an image.
In our experiments, we use only
the recipes containing images, and remove recipes with less
than 2 ingredients or 2 instructions, resulting in 252 547
training, 54 255 validation and 54 506 test samples.

Since the dataset was obtained by scraping cooking web-
sites, the resulting recipes are highly unstructured and con-
tain frequently redundant or very narrowly deﬁned cooking
ingredients (e.g. olive oil, virgin olive oil and spanish olive
oil are separate ingredients). Moreover, the ingredient vo-
cabulary contains more than 400 different types of cheese,
and more than 300 types of pepper. As a result, the original
dataset contains 16 823 unique ingredients, which we pre-
process to reduce its size and complexity. First, we merge
ingredients if they share the ﬁrst or last two words (e.g. ba-
con cheddar cheese is merged into cheddar cheese); then,
we cluster the ingredients that have same word in the ﬁrst or
in the last position (e.g. gorgonzola cheese or cheese blend
are clustered together into the cheese category); ﬁnally we
remove plurals and discard ingredients that appear less than
10 times in the dataset. Altogether, we reduce the ingredi-
ent vocabulary from over 16k to 1 488 unique ingredients.
For the cooking instructions, we tokenize the raw text and
remove words that appear less than 10 times in the dataset,
and replace them with unknown word token. Moreover, we
add special tokens for the start and the end of recipe as well

10457

Figure 4: Set transformer (TFset). Softmax probabilities
are pooled across time to avoid penalizing for order.

(i)
k |x(i), L

for order.
In order to remove the order in which ingre-
dients are predicted, we propose to aggregate the outputs
across different time-steps by means of a max pooling op-
eration (see Figure 4). Moreover, to ensure that the ingre-
dients in ˆL(i) are selected without repetition, we force the
(i)
pre-activation of p(ˆL
<k) to be −∞ for all previ-
ously selected ingredients at time-steps < k. We train this
model by minimizing the binary cross-entropy between the
predicted ingredients (after pooling) and the ground truth.
Including the eos in the pooling operation would result in
loosing the information of where the token appears. There-
fore, in order to learn the stopping criteria of the ingredient
prediction, we introduce an additional loss accounting for
it. The eos loss is deﬁned as the binary cross-entropy loss
between the predicted eos probability at all time-steps and
the ground truth (represented as a unit step function, whose
value is 0 for the time-steps corresponding to ingredients
and 1 otherwise). In addition to that, we incorporate a car-
dinality ℓ1 penalty, which we found empirically useful. At
inference time, we directly sample from the transformer’s
output. We refer to this model as set transformer.

could
(i)
j

s

Alternatively, we

use

target

distribution

[12, 29]

to model

p(s(i)|x(i)) = s(i)/Pj
the
joint distribution of set elements and train a model by
minimizing the cross-entropy loss between p(s(i)|x(i)) and
the model’s output distribution p(ˆs(i)|x(i)). Nonetheless,
it is not clear how to convert the target distribution back to
the corresponding set of elements with variable cardinality.
In this case, we build a feed forward network and train it
with the target distribution cross-entropy loss. To recover
the ingredient set, we propose to greedily sample elements
from a cumulative distribution of sorted output probabil-
ities p(ˆs(i)|x(i)) and stop the sampling once the sum of
probabilities of selected elements is above a threshold. We
refer to this model as feed forward (target distribution).

salt𝜃Lonionbeansriceeos𝜃L𝜃L𝜃L𝜃Ll0l1l2l3l4poolModel

FFBCE
FFIOU
FFDC
FFT D

TFlist
TFlist + shuf.
TFset

IoU

F1

17.85
26.25
27.22
28.84

29.48
27.86
31.80

30.30
41.58
42.80
44.11

45.55
43.58
48.26

Model

Independent
Seq. img. ﬁrst
Seq. ing. ﬁrst
Concatenated

ppl

8.59

8.53

8.61

8.50

Table 1: Model selection (val). Left: Recipe perplexity
(ppl). Right: Global ingredient IoU & F1.

as the end of instruction. This process results in a recipe
vocabulary of 23 231 unique words.

4.2. Implementation Details

We resize images to 256 pixels in their shortest side and
take random crops of 224 × 224 for training and we select
central 224 × 224 pixels for evaluation. For the instruc-
tion decoder, we use a transformer with 16 blocks and 8
multi-head attentions, each one with dimensionality 64. For
the ingredient decoder, we use a transformer with 4 blocks
and 2 multi-head attentions, each one with dimensionality
of 256. To obtain image embeddings we use the last convo-
lutional layer of ResNet-50 model. Both image and ingredi-
ents embedings are of dimension 512. We keep a maximum
of 20 ingredients per recipe and truncate instructions to a
maximum of 150 words. The models are trained with Adam
optimizer [22] until early-stopping criteria is met (using pa-
tience of 50 and monitoring validation loss). All models are
implemented with PyTorch4 [40]. Additional implementa-
tion details are provided in the supplementary material.

4.3. Recipe Generation

In this section, we compare the proposed multi-modal
attention architectures described in Section 3.1. Table 1
(left) reports the results in terms of perplexity on the val-
idation set. We observe that independent attention exhibits
the lowest results, followed by both sequential attentions.
While the latter have the capability to reﬁne the output with
either ingredient or image information consecutively, inde-
pendent attention can only do it in one step. This is also
the case of concatenated attention, which achieves the best
performance. However, concatenated attention is ﬂexible
enough to decide whether to give more focus to one modal-
ity, at the expense of the other, whereas independent atten-
tion is forced to include information from both modalities.
Therefore, we use the concatenated attention model to re-
port results on the test set. We compare it to a system go-
ing directly from image-to-sequence of instructions with-
out predicting ingredients (I2R). Moreover, to assess the in-

4https://pytorch.org/

ﬂuence of visual features on recipe quality, we adapt our
model by removing visual features and predicting instruc-
tions directly from ingredients (L2R). Our system achieves
a test set perplexity of 8.51, improving both I2R and L2R
baselines, and highlighting the beneﬁts of using both image
and ingredients when generating recipes. L2R surpasses
I2R with a perplexity of 8.67 vs. 9.66, demonstrating the
usefulness of having access to concepts (ingredients) that
are essential to the cooking instructions. Finally, we greed-
ily sample instructions from our model and analyze the re-
sults. We notice that generated instructions have an average
of 9.21 sentences containing 9 words each, whereas real,
ground truth instructions have an average of 9.08 sentences
of length 12.79. See supplementary material for qualitative
examples of generated recipes.

4.4. Ingredient Prediction

In this section, we compare the proposed ingredient pre-
diction approaches to previously introduced models, with
the goal of assessing whether ingredients should be treated
as lists or sets. We consider models from the multilabel
classiﬁcation literature as baselines, and tune them for our
purposes. On the one hand, we have models based on feed
forward convolutional networks, which are trained to pre-
dict sets of ingredients. We experiment with several losses
to train these models, namely binary cross-entropy, soft in-
tersection over union as well as target distribution cross-
entropy. Note that binary cross-entropy is the only one not
taking into account dependencies among elements in the set.
On the other hand, we have sequential models that predict
lists, imposing order and exploiting dependencies among
elements. Finally, we consider recently proposed models
which couple set prediction with cardinality prediction to
determine which elements to include in the set [44].

Table 1 (right) reports the results on the validation set
for the state-of-the-art baselines as well as the proposed
approaches. We evaluate the models in terms of Intersec-
tion over Union (IoU) and F1 score, computed for accumu-
lated counts of T P , F N and F P over the entire dataset
split (following Pascal VOC convention). As shown in the
table, the feed forward model trained with binary cross-
entropy [3] (FFBCE) exhibits the lowest performance on
both metrics, which could be explained by the assumed in-
dependence among ingredients. These results are already
notably improved by the method that learns to predict the set
cardinality (FFDC ). Similarly, the performance increases
when training the model with structured losses such as soft
IoU (FFIOU ). Our feed forward model trained with tar-
get distribution (FFT D) and sampled by thresholding (th
= 0.5) the sum of probabilities of selected ingredients out-
performs all feed forward baselines, including recently pro-
posed alternatives for set prediction such as [44] (FFDC ).
Note that target distribution models dependencies among

10458

FFBCE
FFDC
FFIOU
FFT D

TFlist
TFlist + shufﬂe
TFset

Card. error

# pred. ingrs

5.67 ± 3.10
2.68 ± 2.07
2.46 ± 1.95
3.02 ± 2.50

2.49 ± 2.11
3.24 ± 2.50
2.56 ± 1.93

2.37 ± 1.58
9.18 ± 2.06
7.86 ± 1.72
8.02 ± 3.24

7.05 ± 2.77
5.06 ± 1.85
9.43 ± 2.35

Table 2: Ingredient Cardinality.

Figure 5: Ingredient prediction results: P@K and F1 per ingredient.

elements in a set and implicitly captures cardinality infor-
mation. Following recent literature modeling sets as lists
[37], we train a transformer network to predict ingredients
given an image by minimizing the negative log-likelihood
loss (TFlist). Moreover, we train the same transformer
by randomly shufﬂing the ingredients (thus, removing or-
der from the data). Both models exhibit competitive results
when compared to feed forward models, highlighting the
importance of modeling dependencies among ingredients.
Finally, our proposed set transformer TFset, which models
ingredient co-occurrences exploiting the auto-regressive na-
ture of the model yet satisfying order invariance, achieves
the best results, emphasizing the importance of modeling
dependencies, while not penalizing for any given order.

The average number of

ingredients per sample in
Recipe1M is 7.99 ± 3.21 after pre-processing. We report
the cardinality prediction errors as well as the average num-
ber of predicted ingredients for each of the tested models in
Table 2. TFset is the third best method in terms of cardi-
nality error (after FFIOU and TFlist), while being superior
to all methods in terms of F1 and IoU. Further, Figure 5
(left) shows the precision score at different values of K. As
observed, the plot follows similar trends as Table 1 (right),
with FFT D being among the most competitive models and
TFset outperforming all previous baselines for most values
of K. Figure 5 (right) shows the F1 per ingredient, where
the ingredients in the horizontal axes are sorted by score.
Again, we see that models that exploit dependencies con-
sistently improve ingredient’s F1 scores, strengthening the
importance of modeling ingredient co-occurrences.

4.5. Generation vs Retrieval

In this section, we compare our proposed recipe genera-
tion system with retrieval baselines, which we use to search
recipes in the entire test set for fair comparison.

Ingredient prediction evaluation. We use the retrieval
model in [45] as a baseline and compare it with our best
ingredient predictions models, namely FFT D and FFset.
The retrieval model, which we refer to as RI2LR, learns
joint embeddings of images and recipes (title, ingredients
and instructions). Therefore, for the ingredient prediction

RI2L [45]
RI2LR [45]

FFT D (ours)
TFset (ours)

IoU

F1

18.92
19.85

29.82
32.11

31.83
33.13

45.94
48.61

Rec.

Prec.

RIL2R
Ours

31.92

28.94

75.47

77.13

Table 3: Test performance against retrieval. Left: Global
ingredient IoU and F1 scores. Right: Precision and Recall
of ingredients in cooking instructions.

IoU

F1

Success %

Human
Retrieved

Ours

21.36
18.03
32.52

35.20
30.55
49.08

Real
Retrieved [45]
Ours

80.33
48.81
55.47

Table 4: User studies. Left: IoU & F1 scores for ingredi-
ents obtained by retrieval system, our approach and humans.
Right: Recipe success rate according to human judgment.

task, we use the image embeddings to retrieve the closest
recipe and report metrics for the ingredients of the retrieved
recipe. We further consider an alternative retrieval archi-
tecture, which learns joint embeddings between images and
ingredients list (ignoring title and instructions). We refer
to this model as RI2L. Table 3 (left) reports the obtained
results on the Recipe1M test set. The RI2LR model outper-
forms the RI2L one, which indicates that instructions con-
tain complementary information that is useful when learn-
ing effective embeddings. Furthermore, both of our pro-
posed methods outperform the retrieval-baselines by a large
margin (e.g. TFset outperforms the RI2LR retrieval base-
line by 12.26 IoU points and 15.48 F1 score points), which
demonstrates the superiority of our models. Finally, Figure
6 presents some qualitative results for image-to-ingredient
prediction for our model as well as for the retrieval based
system. We use blue to highlight the ingredients that are
present in the ground truth annotation and red otherwise.

Recipe generation evaluation. We compare our pro-
posed instruction decoder (which generates instructions
given an image and ingredients) with a retrieval variant. For

10459

and F1 ingredient scores obtained by humans, the retrieval
baseline and our method. Results are included in Table 4
(left), underlining the complexity of the task. As shown in
the table, humans outperform the retrieval baseline (F1 of
35.20% vs 30.55%, respectively). Furthermore, our method
outperforms both human baseline and retrieval based sys-
tems obtaining F1 of 49.08%. Qualitative comparisons
between generated and human-written recipes (including
recipes from average and expert users) are provided in the
supplementary material.

The second study aims at quantifying the quality of the
generated recipes (ingredients and instructions) with respect
to (1) the real recipes in the dataset, and (2) the ones ob-
tained with the retrieval baseline [45]. With this purpose,
we randomly select 150 recipes with their associated im-
ages from the test set and, for each image, we collect the
corresponding real recipe, the top-1 retrieved recipe and
our generated recipe. We present the users with 15 image-
recipe pairs (randomly chosen among the real, retrieved and
generated ones) asking them to indicate whether the recipe
matches the image. In the study, we collected answers from
105 different users, resulting in an average of 10 responses
for each image. Table 4 (right) presents the results of this
study, reporting the success rate of each recipe type. As
it can be observed, the success rate of generated recipes is
higher than the success rate of retrieved recipes, stressing
the beneﬁts of our approach w.r.t. retrieval.

5. Conclusion

In this paper, we introduced an image-to-recipe genera-
tion system, which takes a food image and produces a recipe
consisting of a title, ingredients and sequence of cooking
instructions. We ﬁrst predicted sets of ingredients from
food images, showing that modeling dependencies matters.
Then, we explored instruction generation conditioned on
images and inferred ingredients, highlighting the impor-
tance of reasoning about both modalities at the same time.
Finally, user study results conﬁrm the difﬁculty of the task,
and demonstrate the superiority of our system against state-
of-the-art image-to-recipe retrieval approaches.

6. Acknowledgements

We are grateful

to Nicolas Ballas, Lluis Castrejon,
Zizhao Zhang and Pascal Vincent for their fruitful com-
ments and suggestions. We also want to express our grat-
itude to Joelle Pineau for her unwavering support to this
project. Finally, we wish to thank everyone who anony-
mously participated in the user studies.

This work has been partially developed in the framework
of projects TEC2013-43935-R and TEC2016-75976-R, ﬁ-
nanced by the Spanish Ministerio de Economa y Competi-
tividad and the European Regional Development Fund.

10460

Figure 6: Ingredient prediction examples. We compare
obtained ingredients with our method and the retrieval base-
line. Ingredients are displayed in blue if they are present in
the real sample and red otherwise. Best viewed in color.

a fair comparison, we retrain the retrieval system to ﬁnd the
cooking instructions given both image and ingredients. In
our evaluation, we consider the ground truth ingredients as
reference and compute recall and precision w.r.t. the ingre-
dients that appear in the obtained instructions. Thus, recall
computes the percentage of ingredients in the reference that
appear in the output instructions, whereas precision mea-
sures the percentage of ingredients appearing in the instruc-
tions that also appear in the reference. Table 3 (right) dis-
plays comparison between our model and the retrieval sys-
tem. Results show that ingredients appearing in generated
instructions have better recall and precision scores than the
ingredients in retrieved instructions.

4.6. User Studies

In this section, we quantify the quality of predicted in-
gredients and generated instructions with user studies. In
the ﬁrst study, we compare the performance of our model
against human performance in the task of recipe genera-
tion (including ingredients and recipe instructions). We ran-
domly select 15 images from the test set, and ask users to
select up to 20 distinct ingredients as well as write a recipe
that would correspond with the provided image. To re-
duce the complexity of the task for humans, we reduced
the ingredient vocabulary from 1 488 to 323, by increas-
ing the frequency threshold from 10 to 1k. We collected
answers from 31 different users, altogether collecting an
average of 5.5 answers for each image. For fair compar-
ison, we re-train our best ingredient prediction model on
the reduced vocabulary of ingredients. We compute IoU

cheese onion pepper soup cream salt milk butterpotato butter soup cheese onion cream cornmilk water butter potato corn cheese onionshrimp butter garlic zucchini pepper soy_sauce juicelemon salt clove catfish seasoning carrot parsleylemon zucchini oil pepper shrimp juice salt garlic parsley onionsugar strawberries juice water raspberries creamtart_shell sugar cornstarch juice strawberriesbutter vanilla strawberries sugar wine vinegar creamcheese tomato cracker broccoli muffin cheese cracker miracle_whip lettuce tomato muffin cheese broccoli tomatoOursRetrievedRealReferences

[1] Lukas Bossard, Matthieu Guillaumin, and Luc Van Gool.
Food-101–mining discriminative components with random
forests. In ECCV, 2014.

[2] Micael Carvalho, R´emi Cad`ene, David Picard, Laure Soulier,
Nicolas Thome, and Matthieu Cord. Cross-modal retrieval in
the cooking context: Learning semantic text-image embed-
dings. In SIGIR, 2018.

[3] Jing-Jing Chen and Chong-Wah Ngo. Deep-based ingredient
recognition for cooking recipe retrieval. In ACM Multimedia.
ACM, 2016.

[4] Jing-Jing Chen, Chong-Wah Ngo, and Tat-Seng Chua.
In

Cross-modal recipe retrieval with rich food attributes.
ACM Multimedia. ACM, 2017.

[5] Mei-Yun Chen, Yung-Hsiang Yang, Chia-Ju Ho, Shih-Han
Wang, Shane-Ming Liu, Eugene Chang, Che-Hua Yeh, and
Ming Ouhyoung. Automatic chinese food identiﬁcation and
quantity estimation.
In SIGGRAPH Asia 2012 Technical
Briefs, 2012.

[6] Xin Chen, Hua Zhou, and Liang Diao. Chinesefoodnet:
A large-scale image dataset for chinese food recognition.
CoRR, abs/1705.02743, 2017.

[7] Bo Dai, Dahua Lin, Raquel Urtasun, and Sanja Fidler. To-
wards diverse and natural image descriptions via a condi-
tional gan. ICCV, 2017.

[8] Krzysztof Dembczy´nski, Weiwei Cheng,

and Eyke
H¨ullermeier. Bayes optimal multilabel classiﬁcation via
probabilistic classiﬁer chains. In ICML, 2010.

[9] Angela Fan, Mike Lewis, and Yann Dauphin. Hierarchical

neural story generation. In ACL, 2018.

[10] Claude Fischler. Food, self and identity. Information (Inter-

national Social Science Council), 1988.

[11] Jonas Gehring, Michael Auli, David Grangier, Denis Yarats,
and Yann N. Dauphin. Convolutional sequence to sequence
learning. CoRR, abs/1705.03122, 2017.

[12] Yunchao Gong, Yangqing Jia, Thomas Leung, Alexander To-
shev, and Sergey Ioffe. Deep convolutional ranking for mul-
tilabel image annotation. CoRR, abs/1312.4894, 2013.

[13] Kristian J. Hammond. CHEF: A model of case-based plan-

ning. In AAAI, 1986.

[14] Kaiming He, Xiangyu Zhang, Shaoqing Ren, and Jian Sun.
Delving deep into rectiﬁers: Surpassing human-level perfor-
mance on imagenet classiﬁcation. In CVPR, 2015.

[15] Kaiming He, Xiangyu Zhang, Shaoqing Ren, and Jian Sun.
In CVPR,

Deep residual learning for image recognition.
2016.

[19] Simon J´egou, Michal Drozdzal, David Vazquez, Adriana
Romero, and Yoshua Bengio.
The one hundred layers
tiramisu: Fully convolutional densenets for semantic seg-
mentation. In CVPR-W, 2017.

[20] Andrej Karpathy and Li Fei-Fei. Deep visual-semantic align-

ments for generating image descriptions. In CVPR, 2015.

[21] Chlo´e Kiddon, Luke Zettlemoyer, and Yejin Choi. Globally
In

coherent text generation with neural checklist models.
EMNLP, 2016.

[22] Diederik P. Kingma and Jimmy Ba. Adam: A method for

stochastic optimization. CoRR, abs/1412.6980, 2014.

[23] Jonathan Krause, Justin Johnson, Ranjay Krishna, and Li
Fei-Fei. A hierarchical approach for generating descriptive
image paragraphs. In CVPR, 2017.

[24] Kuang-Huei Lee, Xiaodong He, Lei Zhang, and Linjun
Yang. Cleannet: Transfer learning for scalable image classi-
ﬁer training with label noise. In CVPR, 2018.

[25] Zijia Lin, Guiguang Ding, Mingqing Hu, and Jianmin Wang.
Multi-label classiﬁcation via feature-aware implicit label
space encoding. In ICML, 2014.

[26] Chang Liu, Yu Cao, Yan Luo, Guanling Chen, Vinod
Vokkarane, and Yunsheng Ma. Deepfood: Deep learning-
based food image recognition for computer-aided dietary as-
sessment. In ICOST, 2016.

[27] Jonathan Long, Evan Shelhamer, and Trevor Darrell. Fully
In

convolutional networks for semantic segmentation.
CVPR, 2015.

[28] Jiasen Lu, Caiming Xiong, Devi Parikh, and Richard Socher.
Knowing when to look: Adaptive attention via a visual sen-
tinel for image captioning. In CVPR, 2017.

[29] Dhruv Mahajan, Ross B. Girshick, Vignesh Ramanathan,
Kaiming He, Manohar Paluri, Yixuan Li, Ashwin Bharambe,
and Laurens van der Maaten. Exploring the limits of weakly
supervised pretraining. CoRR, abs/1805.00932, 2018.

[30] Niki Martinel, Gian Luca Foresti, and Christian Micheloni.
Wide-slice residual networks for food recognition. In WACV,
2018.

[31] Sara McGuire. Food Photo Frenzy: Inside the Instagram
Craze and Travel Trend. https://www.business.
com/articles/food-photo-frenzy-inside-
the-instagram-craze-and-travel-trend/,
2017. [Online; accessed Nov-2018].

[32] Austin Meyers, Nick Johnston, Vivek Rathod, Anoop Korat-
tikara, Alex Gorban, Nathan Silberman, Sergio Guadarrama,
George Papandreou, Jonathan Huang, and Kevin P Murphy.
Im2calories: towards an automated mobile vision food diary.
In ICCV, 2015.

[16] Luis Herranz, Shuqiang Jiang, and Ruihan Xu. Modeling
restaurant context for food recognition. IEEE Transactions
on Multimedia, 2017.

[33] Simon Mezgec and Barbara Koroui Seljak. Nutrinet: A deep
learning food and drink image recognition system for dietary
assessment. Nutrients, 9(7), 2017.

[17] Shota Horiguchi, Sosuke Amano, Makoto Ogawa, and Kiy-
oharu Aizawa. Personalized classiﬁer for food image recog-
nition. IEEE Transactions on Multimedia, 2018.

[18] Qiuyuan Huang, Zhe Gan, Asli C¸ elikyilmaz, Dapeng Oliver
Wu, Jianfeng Wang, and Xiaodong He. Hierarchically struc-
tured reinforcement learning for topically coherent visual
story generation. CoRR, abs/1805.08191, 2018.

[34] Weiqing Min, Bing-Kun Bao, Shuhuan Mei, Yaohui Zhu,
Yong Rui, and Shuqiang Jiang. You are what you eat: Ex-
ploring rich recipe information for cross-region food analy-
sis. IEEE Transactions on Multimedia, 2018.

[35] Shinsuke Mori, Hirokuni Maeta, Tetsuro Sasada, Koichiro
Yoshino, Atsushi Hashimoto, Takuya Funatomi, and Yoko
Yamakata. Flowgraph2text: Automatic sentence skeleton

10461

[53] Jiang Wang, Yi Yang, Junhua Mao, Zhiheng Huang, Chang
Huang, and Wei Xu. CNN-RNN: A uniﬁed framework for
multi-label image classiﬁcation. In CVPR, 2016.

[54] Xin Wang, Devinder Kumar, Nicolas Thome, Matthieu Cord,
and Frederic Precioso. Recipe recognition with large multi-
modal food dataset. In ICMEW, 2015.

[55] Zhe Wang, Wei He, Hua Wu, Haiyang Wu, Wei Li, Haifeng
Wang, and Enhong Chen. Chinese poetry generation with
planning based neural network. CoRR, abs/1610.09889,
2016.

[56] Yunchao Wei, Wei Xia, Junshi Huang, Bingbing Ni, Jian
Dong, Yao Zhao, and Shuicheng Yan. CNN: single-label
to multi-label. CoRR, abs/1406.5726, 2014.

[57] Jason Weston, Samy Bengio, and Nicolas Usunier. Wsabie:
Scaling up to large vocabulary image annotation. In IJCAI,
2011.

[58] Ronald J. Williams and David Zipser. A learning algorithm
for continually running fully recurrent neural networks. Neu-
ral Comput., 1(2), June 1989.

[59] Kelvin Xu, Jimmy Ba, Ryan Kiros, Kyunghyun Cho, Aaron
Courville, Ruslan Salakhudinov, Rich Zemel, and Yoshua
Bengio. Show, attend and tell: Neural image caption gen-
eration with visual attention. In ICML, 2015.

[60] Ruihan Xu, Luis Herranz, Shuqiang Jiang, Shuang Wang,
Xinhang Song, and Ramesh Jain. Geolocalized modeling for
dish recognition. IEEE Transactions on Multimedia, 2015.

[61] Chih-Kuan Yeh, Wei-Chieh Wu, Wei-Jen Ko, and Yu-
Chiang Frank Wang. Learning deep latent spaces for multi-
label classiﬁcation. CoRR, abs/1707.00418, 2017.

compilation for procedural text generation.
Association for Computer Linguistics, 2014.

In INLG. The

[36] Shinsuke Mori, Hirokuni Maeta, Yoko Yamakata, and Tet-
suro Sasada. Flow graph corpus from recipe texts. In LREC.
European Language Resources Association (ELRA), 2014.

[37] Jinseok Nam, Eneldo Loza Menc´ıa, Hyunwoo J Kim, and
Johannes F¨urnkranz. Maximizing subset accuracy with re-
current neural networks in multi-label classiﬁcation.
In
NeurIPS. 2017.

[38] Chong-Wah Ngo. Deep learning for food recognition.

In

SoICT, 2017.

[39] Ferda Oﬂi, Yusuf Aytar, Ingmar Weber, Raggi al Hammouri,
and Antonio Torralba. Is saki# delicious?: The food percep-
tion gap on instagram and its relation to health. In ICWWW,
2017.

[40] Adam Paszke, Sam Gross, Soumith Chintala, Gregory
Chanan, Edward Yang, Zachary DeVito, Zeming Lin, Al-
ban Desmaison, Luca Antiga, and Adam Lerer. Automatic
differentiation in pytorch. In NeurIPS-W, 2017.

[41] Joseph Redmon, Santosh Divvala, Ross Girshick, and Ali
Farhadi. You only look once: Uniﬁed, real-time object de-
tection. In CVPR, 2016.

[42] Shaoqing Ren, Kaiming He, Ross Girshick, and Jian Sun.
Faster R-CNN: towards real-time object detection with re-
gion proposal networks. In NeurIPS, 2015.

[43] S Hamid Rezatoﬁghi, Anton Milan, Ehsan Abbasnejad, An-
thony Dick, Ian Reid, et al. Deepsetnet: Predicting sets with
deep neural networks. In ICCV, 2017.

[44] S Hamid Rezatoﬁghi, Anton Milan, Qinfeng Shi, Anthony
Dick, and Ian Reid. Joint learning of set cardinality and state
distribution. AAAI, 2018.

[45] Amaia Salvador, Nicholas Hynes, Yusuf Aytar, Javier Marin,
Ferda Oﬂi, Ingmar Weber, and Antonio Torralba. Learning
cross-modal embeddings for cooking recipes and food im-
ages. CVPR, 2017.

[46] Piyush Sharma, Nan Ding, Sebastian Goodman, and Radu
Soricut. Conceptual captions: A cleaned, hypernymed, im-
age alt-text dataset for automatic image captioning. In ACL,
2018.

[47] Karen Simonyan and Andrew Zisserman. Very deep convo-
lutional networks for large-scale image recognition. CoRR,
abs/1409.1556, 2014.

[48] Ilya Sutskever, Oriol Vinyals, and Quoc V Le. Sequence to
sequence learning with neural networks. In NeurIPS, 2014.
[49] Grigorios Tsoumakas and Ioannis Vlahavas. Random k-
labelsets: An ensemble method for multilabel classiﬁcation.
In Joost N. Kok, Jacek Koronacki, Raomon Lopez de Man-
taras, Stan Matwin, Dunja Mladeniˇc, and Andrzej Skowron,
editors, ECML, 2007.

[50] Ashish Vaswani, Noam Shazeer, Niki Parmar, Jakob Uszko-
reit, Llion Jones, Aidan N Gomez, Łukasz Kaiser, and Illia
Polosukhin. Attention is all you need. In NeurIPS, 2017.

[51] Oriol Vinyals, Samy Bengio, and Manjunath Kudlur. Order

matters: Sequence to sequence for sets. In ICLR, 2016.

[52] Oriol Vinyals, Alexander Toshev, Samy Bengio, and Du-
mitru Erhan. Show and tell: A neural image caption gen-
erator. In CVPR, 2015.

10462

