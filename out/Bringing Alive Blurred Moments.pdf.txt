Bringing Alive Blurred Moments

Kuldeep Purohit1

Anshul Shah2 ∗

A. N. Rajagopalan1

1 Indian Institute of Technology Madras, India

2 University of Maryland, College Park

kuldeeppurohit3@gmail.com, anshulb@cs.umd.edu, raju@ee.iitm.ac.in

Abstract

We present a solution for the goal of extracting a video
from a single motion blurred image to sequentially recon-
struct the clear views of a scene as beheld by the cam-
era during the time of exposure. We ﬁrst learn motion
representation from sharp videos in an unsupervised man-
ner through training of a convolutional recurrent video au-
toencoder network that performs a surrogate task of video
reconstruction. Once trained, it is employed for guided
training of a motion encoder for blurred images. This
network extracts embedded motion information from the
blurred image to generate a sharp video in conjunction with
the trained recurrent video decoder. As an intermediate
step, we also design an efﬁcient architecture that enables
real-time single image deblurring and outperforms com-
peting methods across all factors: accuracy, speed, and
compactness. Experiments on real scenes and standard
datasets demonstrate the superiority of our framework over
the state-of-the-art and its ability to generate a plausible
sequence of temporally consistent sharp frames.

1. Introduction

When shown a motion blurred image, humans can men-
tally reconstruct (sometimes ambiguously perhaps) a tem-
porally coherent account of the scene that represents what
transpired during exposure time. However, in computer vi-
sion, natural video modeling and extraction has remained
a challenging problem due to the complexity and ambigu-
ity inherent in video data. With the success of deep neural
networks in solving complex vision tasks, end-to-end deep
networks have emerged as incredibly powerful tools.

Recent works on future frame prediction reveal that di-
rect intensity estimation leads to blurred predictions.
In-
stead, if a frame is reconstructed based on the original im-
age and corresponding transformations, both scene dynam-
ics and invariant appearance can be preserved well. Based
on this premise, [6, 45] and [21] model the task as a ﬂow

∗Work done while at Indian Institute of Technology Madras, India.

of image pixels. The methods [38, 43] generate a video
from a single sharp image, but have a severe limitation in
that they work only on the speciﬁc scene for which they are
trained. All of these approaches work only on sharp images
and videos. However, motion during exposure is known
to cause severe degradation in the captured image quality
due to the blur it induces. This is usually the case in low-
light situations where the exposure time of each frame is
high and in scenes where signiﬁcant motion happens within
the exposure time. In [35], it has been shown that standard
network models used for vision tasks and trained only on
high-quality images suffer a signiﬁcant degradation in per-
formance when applied to images degraded by blur.

Motion deblurring is a challenging problem in computer
vision due to its ill-posed nature. Recent years have wit-
nessed signiﬁcant advances in deblurring [36, 27, 25]. Sev-
eral methods [41, 26, 5, 31, 3, 14, 16, 17, 41] have been pro-
posed to address this problem using hand-designed priors as
well as Convolutional Neural Networks (CNN) [2, 29, 30]
for recovering the latent image. A few methods [33, 7] have
been proposed to remove heterogeneous blur but they are
limited in their capability to handle general dynamic scenes.
Most of these methods strongly rely on the accuracy of the
assumed image degradation model and include intensive,
sometimes heuristic, parameter-tuning and expensive com-
putations, factors which severely restrict their accuracy and
applicability in real-world scenarios. The recent works of
[23, 24, 18, 34] overcome these limitations to some extent
by learning to directly generate the latent sharp image, with-
out the need for blur kernel estimation.

We wish to highlight here that until recently, all existing
methods were limited to the task of generating only ‘a’ de-
blurred image. In this paper, we address the task of reviving
and reliving all the sharp views of a scene as seen by the
camera during its ﬂight within the exposure time. Recover-
ing sharp content and motion from motion blurred images
can be valuable for uncovering the underlying dynamics of
a scene (e.g., in sports, trafﬁc surveillance monitoring, en-
tertainment etc.). The problem of extracting a video from
a single blurred observation is challenging due to the fact
that a blurred image can only reveal aggregate information

6830

about the scene during exposure. The task requires recovery
of sharp frames which are temporally and scene-wise con-
sistent in the sense that they emulate recording coming from
a high frame-rate camera. State-of-the-art deblurring meth-
ods such as [36] [27] estimate at best a group of poses which
constitute the camera motion, but with total disregard to
their ordering. For example, one would get the same blurred
image even if the temporal order is reversed (temporal am-
biguity). As a post-processing step, synthesizing a sequence
from this group of poses is a non-trivial task. Although the
camera motion can be partially detected through gyroscope
sensors attached to modern cameras, the obtained data is too
sparse to completely describe trajectories within the time in-
terval of a single lens exposure. More importantly, sensor
information is seldom available for most internet images.
Further, these methods can only handle blur induced by a
camera imaging a static planar scene which is not represen-
tative of a typical real-world scenario and hence not very
interesting.

We present a two-stage deep convolutional architecture
to carve out a video from a motion blurred image that is
applicable to non-uniform motion caused by individual or
combined effects of camera motion, object motion and ar-
bitrary depth variations in the scene. We avoid overly sim-
pliﬁed models to represent motion and hence refrain from
creating synthetic datasets for supervised training. The ﬁrst
stage consists of training a video auto-encoder wherein the
encoder accepts a sequence of video frames to extract a la-
tent motion representation while the decoder estimates the
same video by applying estimated motion trajectories to
a single sharp frame in a recurrent fashion. We use this
trained video decoder to guide the training of a CNN (which
we refer to as Blurred Image Encoder (BIE)) to extract the
same motion information from a blurred image as the video
encoder would from the image sequence corresponding to
that blurred image. For testing, we propose an efﬁcient de-
blurring network to ﬁrst estimate a sharp frame from the
given blurred image. The BIE is responsible for extracting
motion features from the blurred image. The video decoder
uses the outputs of the BIE and the deblurred sharp frame
to generate the video underlying the motion blurred image.

As the only other work of this kind, [13] very recently
proposed a method to estimate a video from a single blurred
image by training multiple neural networks to estimate the
underlying frames. In contrast, our architecture utilizes a
single recurrent neural network to generate the entire se-
quence. Our recurrent design implicitly addresses temporal
ambiguity to a large extent, since generation of any frame
in the sequence is naturally preconditioned on all the pre-
vious frames. The approach of [13] is limited to small
motion, owing to its architecture and training procedure.
We estimate pixel level motion instead of intensities which
proves to be an advantage for the task at hand, especially

in cases with large blur (which is an issue with [13]). Our
deblurirng architecture not only outperforms all existing de-
blurring methods but is also smaller and signiﬁcantly faster.
In fact, separating the processes of content and motion esti-
mation allows our architecture to be used with any off-the-
shelf deblurring approach.

Our work advances the state-of-the-art in many ways.

The main contributions are:

• A novel solution for extracting a sharp video from a
single motion blurred image.
In comparison to the
state-of-the-art [13], our network is faster, more accu-
rate (especially for large blur) and contains fewer pa-
rameters.

• A two-stage training strategy with a recurrent architec-
ture for learning to extract an ordered spatio-temporal
motion representation from a blurred image in an un-
supervised manner. Unlike [13], our network is inde-
pendent of the number of frames in the sequence.

• An efﬁcient architecture to perform real-time single
image deblurring that also delivers superior perfor-
mance over the state-of-the-art in deburring [34] across
all factors: accuracy, speed (20 times faster) and com-
pactness.

• Qualitative and quantitative analysis using benchmark
datasets to demonstrate the superiority of our frame-
work over competing methods in deblurring as well as
video generation from a single blurred image.

2. The Proposed Architecture

Convolutional neural networks (CNNs) have been suc-
cessfully applied for various vision tasks on images but
translating these capabilities to video is non-trivial due
to their inefﬁciency in exploiting temporal redundancies
present in videos. Recent developments in recurrent neu-
ral networks provide powerful tools for sequence model-
ing as demonstrated in speech recognition [8] and caption
generation for images [37]. Long short term memory net-
works (LSTMs) can be used to generate outputs that are
highly correlated along the temporal dimension and hence
form an integral part of our video generation framework.
Though Conv3Ds have been used for video classiﬁcation
approaches, we found that for our application, recurrent net-
works were more efﬁcient. Considering that we are work-
ing with images, the spatial information across the image
is equally important. Hence we use Convolutional LSTM
units [40] as our building blocks, which are capable of cap-
turing both spatial and temporal dependencies.

The task of generating an image sequence requires the
network to understand and efﬁciently encode static as well
as dynamic information for a certain period of time. Al-
though such an encoding is not clearly deﬁned and hence

6831

RVE : Recurrent Video Encoder

BIE:

Blurred 
Image 
Encoder

RVD : Recurrent Video Decoder

Transformation 
Layer

Recurrent Video 

Decoder Cell

Recurrent Video 

Encoder Cell

Motion Embedding

Figure 1. An overview of our video generation architecture during training. The ﬁrst step involves training the RVE-RVD for the task of
video reconstruction. This is followed by guided training of BIE through the trained RVD.

unavailable in labeled datasets, we overcome this challenge
by unsupervised learning of motion representation. We pro-
pose to use video reconstruction as a surrogate task for
training our BIE. Our hypothesis is that a successful so-
lution to the video reconstruction task will allow a video
autoencoder to learn a strong and meaningful motion rep-
resentation which will enable it to impart spatio-temporal
coherence to the generated moving scene content.

In our proposed video autoencoder,

the encoder uti-
lizes all the video frames to extract a latent representation,
which is then fed to decoder which estimates the frame se-
quence in a recurrent fashion. The Recurrent Video En-
coder (RVE) reads N sharp frames x1..N , one at each time-
step. It returns a tensor at the last time-step, which is uti-
lized as the motion representation of the image sequence.
This tensor is used to initialize the ﬁrst hidden state of an-
other ConvLSTM based network called Recurrent Video
Decoder (RVD) whose task is to recurrently estimate N op-
tical ﬂows. Since the RVE-RVD pair is trained using re-
construction loss between the estimated frames ˆx1..N and
ground-truth frames x1..N , the RVD must return the pre-
dicted video. To enable this, the (known) central frame of
the video is acted upon by the ﬂows predicted by the RVD.
Speciﬁcally, the estimated ﬂows are individually fed to a
differentiable transformation layer to transform the central
2 � to obtain the frames ˆx1..N . Once trained, we
frame x� N
have an RVD which can estimate sequential motion ﬂows,
given a particular motion representation.

In addition, we introduce another network called Blurred
Image Encoder (BIE) whose task is to accept blurred image
xB corresponding to the spatio-temporal average of the in-
put frames x1..N and return a motion encoding, which too
can be used to generate a sharp video. To achieve this task,
we employ the already trained RVD to guide the training

of BIE so as to extract the same motion information from
the blurred image as the RVE would from that image se-
quence. In other words, the weights are to be learnt such
that BIE(xB) ≈ RV E(x1..N ). We refrain from using
the encoding returned by RVE for training due to lack of
ground truth for the encoded representation.
Instead, the
BIE is trained such that the predicted video at the output of
RVD for the given xB matches as closely as possible to the
ground truth frames x1..N . This ensures that the BIE learns
to capture ordered motion information for the RVD to return
a realistic video. Directly training the BIE-RVD pair poses
a challenge since it requires learning to perform two tasks
jointly: “video generation from motion representation” and
“ambiguity-invariant motion extraction from a blurred im-
age”. Such training delivers below-par performance (see
supplementary material).

The overall architecture of the proposed methodology is
given in Fig. 1. It is fully convolutional, end-to-end differ-
entiable and can be trained using unlabeled high frame-rate
videos, without the need for optical ﬂow supervision, which
is challenging to produce at large scale. During testing, the
central sharp frame is not available and is estimated using
an independently trained deblurring module (DM). We now
describe the design aspects of the different modules.

2.1. Recurrent Video Encoder (RVE)

At each time-step, a frame is fed to a convolutional en-
coder, which generates a feature-map to be fed as input
to the ConvLSTM cell. Interpreting ConvLSTM’s hidden-
states as a representation of motion, the kernel-size of a
ConvLSTM is correlated with the speed of the motion
which it can capture. Since we need to extract motion taking
place within a single exposure at ﬁne resolution, we choose
a kernel-size of 3 × 3. As can be seen in Fig. 2(a), the en-

6832

1
A

 
2
A

 
3
A

 
4
A

Conv 

LSTM 

A1

3x3x16

stride 1

A2

3x3x32

stride 2

A3

3x3x64

stride 2

 A4 3x3x128 stride 2

(a) RVE architecture.

(b) BIE architecture.

Figure 2. Architectures of BIE and RVE. The RVE is trained to
extract a motion representation from a sequence of frames while
the BIE is trained to extract a motion representation from a blurred
image and a sharp image.

coder block is made of 4 convolutional blocks with 3 × 3
ﬁlters. The ﬁrst block is a conv layer with stride of 1 and
the rest contain a conv layer with stride of 2, followed by
a Resblock. The number of feature maps in the outputs of
these blocks are 16, 32, 64 and 128, respectively. A ConvL-
STM cell operates on the features returned by the last block
and augments it with memory from previous time-steps.
Overall, each module can be represented as henc

n =
is encoder ConvLSTM state at

n−1, xn), where henc

enc(henc
time step n and xn is the nth sharp frame of the video.

n

2.2. Recurrent Video Decoder (RVD)

The task of RVD is to construct a sequence of frames
using the motion representation provided by RVE and the
(known) central frame (x� N
2 �) of the sequence. The RVD
contains a ﬂow encoder which utilizes a structure similar
to the RVE. Instead of accepting images, it accepts opti-
cal ﬂows. The ﬂow encoding is fed to a ConvLSTM cell
whose ﬁrst hidden state is initialized with the last hidden
state he,N of the RVE. To estimate optical ﬂows for a time-
step, the output of the ConvLSTM cell is passed to a Flow
decoder network (FD). The ﬂow estimated by FD at each
time-step is fed to a transformer module (T ) which returns
the estimated frame ˆxn. The descriptions of FD and T are
provided below.
Flow Decoder (FD): Realizing that the ﬂow at current step
is related to the previous one, we perform recurrence on
optical ﬂows for consecutive frames. The design of FD
is illustrated in Fig. 3. FD accepts the output of ConvL-
STM unit at any time-step and generates a ﬂow-map. For
robust estimation, we further perform estimation of ﬂow at
multiple scales using deconvolution (deconv) layers which
“unpool” the feature maps and increase the spatial dimen-
sions by a factor of 2. Inspired by [28], we make use of skip
connections between the layers of ﬂow encoder and FD. All
deconv operations use 4×4 ﬁlters and the convolutional op-
erations use 3 × 3 ﬁlters. The output of the ConvLSTM cell
is passed through a convolutional layer to estimate the ﬂow
fn,1. The cell output is also passed through a deconv layer
before being concatenated with the upsampled fn,1 and the
corresponding feature-map coming from the encoder, to ob-

Figure 3. Our Recurrent Video Decoder (RVD). This module re-
currently generates optical ﬂows which are warped to transform
the sharp frame. Flows are estimated at 4 different scales.

tain a hybrid feature map at that scale. As shown in Fig. 3,
this process is repeated 3 more times to obtain the ﬂow maps
at subsequently higher scales (fn,2...4).
Transformer(T ): This generates a new frame by trans-
forming a sharp frame using the output returned by FD. It
is a modiﬁed version of the Spatial Transformer Layer [11],
which comprises of a grid generator followed by a sampler.
Instead of a single transformation for the entire image (as
originally proposed in [11]), T accepts one transformation
per pixel. Since we focus on learning features for motion
prediction, it provides immediate feedback on the ﬂow map
predicted by the optical ﬂow generation layers. Effectively,
the RVD function can be summarized as follows:

n , fn,1..4 = G(hdec
hdec
ˆxn,1..4 = T (x� N

N

hdec
1 = henc
n−1, fn−1,4)
2 �, fn,1..4)

(1)

(2)

(3)

for n ∈ [1,N] where hdec
n is decoder hidden state, fn,1..4 are
ﬂows predicted at n and ˆxn,1..4 are sharp frames predicted
at different scales and G refers to a recurrent cell of RVD.

2.3. Blurred Image Encoder (BIE)

We make use of the trained encoder-decoder couplet to
solve the task of extracting video from a blurred image. We
advocate a novel strategy of utilizing spatio-temporal em-
beddings to guide the training of a CNN. The trained de-
coder has learnt to generate optical ﬂow for all time-steps
from the encoder’s hidden state. We employ this proxy net-
work to solve the task of blurred image to video generation.
The use of optical ﬂow recurrence enables our network
to prefer temporally consistent sequences, which preempts
it from returning arbitrarily ordered frames. However, di-
rectional ambiguity stays. For a scene with multiple objects,
the ambiguity becomes more pronounced as each object can
have its own independent motion. The BIE is connected
with the pre-trained RVD and the pair is trained (RVD is
ﬁne-tuned) using a combination of ordering-invariant frame

6833

Input image

Deblurred image

Convolution Layer
Stride 1

Residual Dense Block

Convolution Layer
Stride 2

Deconvolution Layer

Bottleneck Block

Figure 4. An overview of our dense deblurring architecture which
we utilize to estimate the central sharp frame.
It follows an
encoder-decoder design with residual-dense blocks, bottleneck
blocks, and skip connections present at 3 different sub-scales.

reconstruction loss and spatial motion smoothness loss over
the RVD outputs (described later). No such ambiguity ex-
ists in the video autoencoder since the RVD has to exactly
reproduce the video which is fed to RVE.

The BIE is implemented as a CNN which specializes in
extracting motion features from a blurred image (we exper-
imentally found that feeding the central sharp frame along
with the blurred image improves its performance). The BIE
is tasked to extract the sequential motion in the image by
capturing local motion, e.g. at the smeared edges in the
image. Moreover, the generated encoding should be such
that the RVD can reconstruct motion trajectories. The BIE
has 7 convolutional layers with kernel sizes as shown in
Fig. 2(b). Each layer (except the last) is followed by batch-
normalization and leaky ReLU non-linearity.

2.4. Cost Function

Both our network pairs (RVE-RVD and BIE-RVD) are
trained by calculating the cost on the ﬂows and frames esti-
mated by the RVD. Since RVD implicitly estimates optical
ﬂows, we utilize a cost function motivated by learning-free
variational method [1] which resembles the original for-
mulation of [9] to impose ﬂow smoothness. At each time
step, the data loss measures the discrepancy between inten-
sities of target frame and the output of transformation layer
(obtained using the the predicted optical ﬂow ﬁeld). The
smoothness cost is in the form of total variation-loss on the

estimated ﬂow-maps: T V (s) =� |∇xs| + |∇ys|.

Coarse-to-Fine: Motivated by the approach employed in
FlowNet [4], we improve our network’s accuracy by esti-
mating the ﬂow-maps and frames in a coarse-to-ﬁne man-
ner. At each time-step, four loss terms are calculated us-
ing four optical ﬂows fn,1..4 predicted at sizes which are
8 , 1
( 1
2 , 1)th fraction of the original image resolution and
applied on the corresponding down-sampled central frame

4 , 1

(4)

(5)

using the transformation layers. Reconstruction losses
are calculated at each scale using suitably down-sampled
ground truth videos. Effectively, we use a weighted sum of
loss to guide the information ﬂow over the network, which
can be expressed as

L =

λj�Lj +

4

�j=1

N

�n=1

µT V (fn,j))�

For RVE-RVD training, the data term we use is

Lj =

N

ˆxn,j − xn,j���1
�n=1���

As mentioned in section 2.3, training of BIE-RVD requires
a loss term that preempts the network from penalizing a
video which correctly explains the blurred image but does
not match the available ground truth. Following [13], we
use loss function

N

2

Lj =

�n=1���
+���

|ˆxn,j + ˆxN −n,j| − |xn,j + xN −n,j|���1
|ˆxn,j − ˆxN −n,j| − |xn,j − xN −n,j|���1

Here, j represents the scale, n represents time-step, µ is
the regularization weight for total-variation loss empirically
set to 0.02. The relative weights λj s for each scale were
adopted according to the loss weight suggested in [22].

(6)

2.5. Deblurring Module (DM)

We propose an independent network for deblurring the
motion blurred observation. The estimated sharp frame is
fed to both BIE and RVD during testing.

Recent works on image restoration have proposed end-
to-end trainable networks which require labeled pairs of
degraded and sharp images. Among them, [23, 34] have
achieved promising results using multi-scale CNN com-
posed of residual connections. We explore a more effective
network architecture which is inspired by prior methods that
use multi-level and multi-scale features. Our high-level de-
sign is similar to that of U-Net [28], which has been used
extensively for preserving global context information in var-
ious image-to-image tasks [10]. Based on the observation
that increase in number of layers and connections across
them leads to a boost in feature extraction capability, the
encoder structure of our network utilizes a cascade of Resid-
ual Dense Blocks (RDB) [44] instead of convolutional lay-
ers. An RDB is a cascade of convolutional layers connected
through a rich set of residual and concatenation connections
which immensely improves feature extraction capability by
reusing features across multiple layers. Inclusion of such
connections maximizes information ﬂow along the interme-
diate layers and results in better convergence. These units

6834

efﬁciently learn deeper and more complex features than a
network with residual connections (which have been used
extensively in recent deblurring methods[23, 18, 34, 13]),
while requiring fewer parameters.

Our proposed deblurring architecture is depicted in Fig.
4. The decoder part of our network contains 3 pairs of up-
sampling blocks to gradually enlarge the spatial resolution
of feature maps. Each up-sampling block contains a bottle-
neck layer [12] followed by a deconvolution layer. Each
convolution layer (except the last) is followed by a non-
linearity. Similar to U-Net, features corresponding to the
same dimension in encoder and decoder are merged with
the help of projection layers. The output of the ﬁnal up-
sampling block is passed through two additional convolu-
tional layers to reconstruct the output sharp image. Our
network uses an asymmetric encoder-decoder architecture,
where the network capacity becomes higher beneﬁting from
the dense connections.

Further, we optimize the inference time of the network
by performing computationally intensive operations on fea-
tures at lower spatial resolution. This also reduces memory
footprint while increasing the receptive ﬁeld. Speciﬁcally,
before feeding the input blurred image to encoder, we map
the image to a lower resolution space using space-to-depth
transformation. Following [20, 23], we omit normalization
layers for stable training, better generalization and reduced
computational complexity and memory usage. To further
improve performance, we also exploit residual scaling [20].

3. Experiments

In this section, we carry out quantitative and qualitative
comparisons of our approach with state-of-the-art methods
for deblurring as well as video extraction tasks.

3.1. Implementation Details

We prepared our training data from GoPro dataset [23],
following standard train-test split, wherein 22 full videos
were used for creating training sets and 11 full videos were
reserved for validation and testing. Each blurred image is
produced by averaging 9 successive latent frames. Such an
averaging simulates a photo taken at approximately 26 fps,
while the corresponding sharp image shutter speed is 1/240.
We extract 256 × 256 patches from these image sequences
for training. Finally, our dataset is composed of 105 sets,
each containing N = 9 sharp frames and the correspond-
ing blurred image xB. We perform data augmentation by
random horizontal ﬂipping and zooming by a factor in the
range [0.2, 2]. The network is trained using Adam optimizer
with learning rate 1 × 10−4. The batch size was set to 10
and the training of our video-autoencoder took 5 × 104 it-
erations to converge. We then train the BIE-RVD pair with
the same training conﬁguration and reduce the learning rate
for RVD parameters to 2 × 10−5, for stable training.

[7]

[18]

[23]

[33]

[42]
Method
PSNR(dB) 21

[34] Ours
[39]
24.6 24.5 26.4 28.9 27.2 30.10 30.58
SSIM 0.740 0.845 0.851 0.863 0.911 0.905 0.933 0.941
0.02
Time (s) 3800 700 1500 1200
54.1 41.2 300 45.6 27.5 17.9
Size(MB)
Hardware CPU CPU CPU CPU GPU GPU GPU GPU
Table 1. Performance comparison of our deblurring network with
existing methods on the benchmark dataset [23].

0.4

0.8

6

-

-

For training and evaluating our single image deblurring
network, we utilized the same train-test split of the GoPro
dataset [23] as recent deblurring methods [23][34]. The
batch size was set to 16 and the entire training took 4.5×105
iterations to converge.

3.2. Results for Single Image Deblurring

We evaluated the efﬁcacy of our network (DM shown in
Fig. 4) for the intermediate task of deblurring, both quan-
titatively and qualitatively on 1100 test images (resolution
1280 × 704) from the GoPro dataset [23]. The method of
[39] is selected as representative traditional method for non-
uniform blur. We also compare our performance with deep
networks [23, 18, 34]. All the codes were downloaded from
the respective authors’ websites. Quantitative and qualita-
tive comparisons are presented in Table 1 and Fig. 5, re-
spectively. Since traditional method of [39] cannot model
combined effects of general camera shake and object mo-
tion, it fails to faithfully restore most of the images in the
test-set. On the other hand, the method of [18] trains a resid-
ual network containing instance-normalization layers using
a mixture of deep-feature losses and adversarial losses, but
leads to suboptimal performance on images containing large
blur. The methods [23, 34] use a multi-scale strategy to im-
prove capability to handle large blur, but fail in challenging
situations. Fig. 5 shows that results of prior works suffer
from incomplete deblurring or ringing artifacts. In contrast,
our network is able to restore scene details more faithfully,
while being 20 times faster than the nearest competitor [34].
These improvements are also reﬂected in the quantitative
values presented in the table.

3.3. Results and Comparisons for Video Extraction

In Fig 6, we give results on standard test blurred images
from the dataset of [23]. Note that some of them suffer
from signiﬁcant blur. Fig. 6(a) shows an image of a pla-
nar scene which is blurred due to dominant camera motion.
Fig. 6(b) shows a 3D scene blurred due to camera motion.
Figs. 6(c-f) show results on blurred images with dynamic
object motion. Observe that the videos generated by our
approach are realistic and qualitatively consistent with the
blur and depth of the scene, even when the foreground in-
curs large motion. Our network is able to reconstruct videos
from blurred images with diverse motion and scene content.

6835

Blurred Image

Blurred patch

Whyte et al. [39]

Nah et al. [23]

DelurGAN [18]

SRN [34]

Ours

Figure 5. Visual comparisons of deblurring results on test dataset [23] (best viewed in high resolution).

(a)

(b)

(c)

(d)

(e)

(f)

Figure 6. Comparisons of our video extraction results with [13] on motion blurred images obtained from the test dataset of [23]. The ﬁrst
row shows the blurred images while the second and third rows show deblurred frames generated by our method and [13], respectively.
Videos extracted using our method and [13] are provided in the supplementary document.

In comparison, the results of [13] suffer from local er-
rors in deblurring, inconsistent motion estimation, as well
as color distortions. We have observed that in general the
method of [13] fails in cases involving high blur as direct
image regression becomes difﬁcult for large motion. In con-
trast, we divide the overall problem into two sub-tasks of de-
blurring and motion extraction. This simpliﬁes learning and
yields improvement in deblurring quality as well as motion
estimation. The color issue in [13] can be attributed to the
design of their networks, wherein feature extraction and re-
construction branches are different for different color chan-
nels. Our method applies the same motion to each color
channel. By having a single recurrent network to generate
the video, our network can be directly trained to extract even
higher number of frames (> 9) without any design change
or additional parameters. In contrast, [13] requires training
of an additional network for each new pair of frames. Our
overall architecture is more compact (45 MB vs 70 MB)
and much faster (0.02s vs 0.45s for deblurring and 0.39s vs
1.10s for video generation) as compared to [13].

To perform quantitative comparisons with [13], we also
trained another version of our network on the restricted

case of blurred images produced by averaging 7 successive
sharp frames. For testing, 250 blurred images of resolution
1280 × 704 were created using the 11 test videos from the
dataset of [23]. We compared the videos estimated by the
two methods using the ambiguity invariant loss function de-
ﬁned in Eq. 6. The average error was found to be 49.06 for
[13] and 44.12 for our method. Thus, even for the restricted
case of small blur, our method performs favorably. Repeat-
ing the same experiment for 9 frames (i.e. for large blur
from the same test videos) led to an error of 48.24 for our
method, which is still less than the 7-frame error of [13].
We could not compute the 9-frame error for [13] as their
network is rigidly designed for 7 frames only.

3.4. Additional Results on Video Extraction

Results on Camera Motion Dataset: For evaluating qual-
itative performance on videos with camera motion alone,
we tested our network’s ability to reconstruct videos from
blurred images taken from datasets of [7], [15] and [19],
which are commonly used for benchmarking deblurring
techniques. Fig. 7(a) shows the video obtained on a syn-
thetically blurred image provided in [7]. Fig. 7(b) shows

6836

(a)

(b)

(c)

(d)

(e)

(f)

Figure 7. Video generation from images blurred with global camera motion from datasets of [7, 15] and [19]. First row shows the blurred
images and our deblurred frames are shown in second row (generated videos are provided in the supplementary document).

Figure 8. Video generation results on real motion blurred images from dataset of [32]. The ﬁrst row shows the blurred images. Second row
contains the deblurred images estimated with our method (extracted videos are provided in the supplementary document).

result on an image from the dataset of [15]. We can ob-
serve that the motion in the generated video conforms with
the blur. The dataset [19] consists of both synthetic and
real images collected from various conventional prior works
on deblurring. Figs. 7(c-d) show our network’s results on
synthetically blurred images from this dataset using non-
uniform camera motion. The examples in Figs. 7(e-f) are
real blurred images obtained from the same dataset. Our
method is able to re-enact underlying motion quite well.
Results on Blur Detection Dataset: In Fig. 8, we show
videos generated from real blurred images taken from the
dataset of [32] which contains dynamic scenes. The results
reafﬁrm that our network can sense direction and magnitude
even in severely blurred images.

3.5. More Results and Ablation Studies

Additional results and experiments to highlight the mo-
tivation for our design choices are given in the supplemen-
tary material. Speciﬁcally, for the video autoencoder, we
study the effects of motion ﬂow estimation (instead of di-
rect intensity estimation) and the recurrent design. This is
followed by an analysis on the inﬂuence of different loss
functions. Regarding training of BIE, we study the ef-
fect of input sharp frame on its performance and also com-
pare our two-stage strategy (BIE trained using pre-trained

RVD) with the case where BIE and RVD are trained directly
from scratch. We also include an analysis on variations in
growth-rate and residual-dense connection topology on the
training performance of our deblurring network.

4. Conclusions

We introduced a new methodology for video generation
from a single blurred image. We proposed a spatio-temporal
video auto-encoder based on an end-to-end differentiable
architecture that learns motion representation from sharp
videos in a self-supervised manner. The network predicts
a sequence of optical ﬂows and employs them to transform
a sharp central frame and return a smooth video. Using the
trained video decoder, we trained a blurred image encoder
to extract a representation from a single blurred image, that
mimics the representation returned by the video encoder.
This when fed to the decoder returns a plausible sharp video
representing the action within the blurred image. We also
proposed an efﬁcient deblurring architecture composed of
densely connected layers that yields state-of-the-art results.
The potential of our work can be extended in a variety of
directions including blur-based segmentation, video deblur-
ring, video interpolation, action recognition etc.
Acknowledgements: The ﬁrst author gratefully acknowl-
edges travel support from Google Research India.

6837

References

[1] Thomas Brox and Jitendra Malik. Large displacement opti-
cal ﬂow: descriptor matching in variational motion estima-
tion.
IEEE transactions on pattern analysis and machine
intelligence, 33(3):500–513, 2011.

[2] Ayan Chakrabarti. A neural approach to blind motion deblur-
In European Conference on Computer Vision, pages

ring.
221–235. Springer, 2016.

[3] Sunghyun Cho and Seungyong Lee. Fast motion deblurring.
In ACM Transactions on Graphics (TOG), volume 28, page
145. ACM, 2009.

[4] Alexey Dosovitskiy, Philipp Fischer, Eddy Ilg, Philip
Hausser, Caner Hazirbas, Vladimir Golkov, Patrick van der
Smagt, Daniel Cremers, and Thomas Brox. Flownet: Learn-
ing optical ﬂow with convolutional networks. In Proceedings
of the IEEE International Conference on Computer Vision,
pages 2758–2766, 2015.

[5] Rob Fergus, Barun Singh, Aaron Hertzmann, Sam T Roweis,
and William T Freeman. Removing camera shake from a
single photograph. In ACM transactions on graphics (TOG),
volume 25, pages 787–794. ACM, 2006.

[6] John Flynn, Ivan Neulander, James Philbin, and Noah
Snavely. Deepstereo: Learning to predict new views from
the world’s imagery. In Proceedings of the IEEE Conference
on Computer Vision and Pattern Recognition, pages 5515–
5524, 2016.

[7] Dong Gong, Jie Yang, Lingqiao Liu, Yanning Zhang, Ian
Reid, Chunhua Shen, AVD Hengel, and Qinfeng Shi. From
motion blur to motion ﬂow: a deep learning solution for re-
moving heterogeneous motion blur. In The IEEE conference
on computer vision and pattern recognition (CVPR), 2017.

[8] Alex Graves, Abdel-rahman Mohamed, and Geoffrey Hin-
ton. Speech recognition with deep recurrent neural networks.
In Acoustics, speech and signal processing (icassp), 2013
ieee international conference on, pages 6645–6649. IEEE,
2013.

[9] Berthold KP Horn and Brian G Schunck. Determining opti-

cal ﬂow. Artiﬁcial intelligence, 17(1-3):185–203, 1981.

[10] Phillip Isola, Jun-Yan Zhu, Tinghui Zhou, and Alexei A
Image-to-image translation with conditional adver-

Efros.
sarial networks. arXiv preprint, 2017.

[11] Max Jaderberg, Karen Simonyan, Andrew Zisserman, et al.
Spatial transformer networks. In Advances in Neural Infor-
mation Processing Systems, pages 2017–2025, 2015.

[12] Simon J´egou, Michal Drozdzal, David Vazquez, Adriana
Romero, and Yoshua Bengio.
The one hundred layers
tiramisu: Fully convolutional densenets for semantic seg-
mentation.
In Computer Vision and Pattern Recognition
Workshops (CVPRW), 2017 IEEE Conference on, pages
1175–1183. IEEE, 2017.

[13] Meiguang Jin, Givi Meishvili, and Paolo Favaro. Learning to
extract a video sequence from a single motion-blurred image.
arXiv preprint arXiv:1804.04065, 2018.

[14] Neel Joshi, Richard Szeliski, and David J Kriegman. Psf es-
timation using sharp edge prediction.
In Computer Vision
and Pattern Recognition, 2008. CVPR 2008. IEEE Confer-
ence on, pages 1–8. IEEE, 2008.

[15] Rolf K¨ohler, Michael Hirsch, Betty Mohler, Bernhard
Sch¨olkopf, and Stefan Harmeling. Recording and playback
of camera shake: Benchmarking blind deconvolution with a
real-world database. In European Conference on Computer
Vision, pages 27–40. Springer, 2012.

[16] Dilip Krishnan and Rob Fergus. Fast image deconvolution
using hyper-laplacian priors. In Advances in Neural Infor-
mation Processing Systems, pages 1033–1041, 2009.

[17] Dilip Krishnan, Terence Tay, and Rob Fergus. Blind decon-
volution using a normalized sparsity measure. In Computer
Vision and Pattern Recognition (CVPR), 2011 IEEE Confer-
ence on, pages 233–240. IEEE, 2011.

[18] Orest Kupyn, Volodymyr Budzan, Mykola Mykhailych,
Dmytro Mishkin, and Jiri Matas. Deblurgan: Blind mo-
tion deblurring using conditional adversarial networks. arXiv
preprint arXiv:1711.07064, 2017.

[19] Wei-Sheng Lai, Jia-Bin Huang, Zhe Hu, Narendra Ahuja,
and Ming-Hsuan Yang. A comparative study for single im-
age blind deblurring. In Proceedings of the IEEE Conference
on Computer Vision and Pattern Recognition, pages 1701–
1709, 2016.

[20] Bee Lim, Sanghyun Son, Heewon Kim, Seungjun Nah, and
Kyoung Mu Lee. Enhanced deep residual networks for sin-
gle image super-resolution. In The IEEE conference on com-
puter vision and pattern recognition (CVPR) workshops, vol-
ume 1, page 4, 2017.

[21] Ziwei Liu, Raymond Yeh, Xiaoou Tang, Yiming Liu, and
Aseem Agarwala. Video frame synthesis using deep voxel
ﬂow. arXiv preprint arXiv:1702.02463, 2017.

[22] Nikolaus Mayer, Eddy Ilg, Philip Hausser, Philipp Fischer,
Daniel Cremers, Alexey Dosovitskiy, and Thomas Brox. A
large dataset to train convolutional networks for disparity,
optical ﬂow, and scene ﬂow estimation. In Proceedings of the
IEEE Conference on Computer Vision and Pattern Recogni-
tion, pages 4040–4048, 2016.

[23] Seungjun Nah, Tae Hyun Kim, and Kyoung Mu Lee. Deep
multi-scale convolutional neural network for dynamic scene
deblurring. In CVPR, volume 1, page 3, 2017.

[24] TM Nimisha, Akash Kumar Singh, and AN Rajagopalan.
Blur-invariant deep learning for blind-deblurring.
In Pro-
ceedings of the IEEE E International Conference on Com-
puter Vision (ICCV), 2017.

[25] Jinshan Pan, Zhe Hu, Zhixun Su, and Ming-Hsuan Yang. De-
blurring text images via l0-regularized intensity and gradient
prior. In Proceedings of the IEEE Conference on Computer
Vision and Pattern Recognition, pages 2901–2908, 2014.

[26] Jinshan Pan, Zhouchen Lin, Zhixun Su, and Ming-Hsuan
Yang. Robust kernel estimation with outliers handling for
image deblurring. In Proceedings of the IEEE Conference
on Computer Vision and Pattern Recognition, pages 2800–
2808, 2016.

[27] Jinshan Pan, Deqing Sun, Hanspeter Pﬁster, and Ming-
Hsuan Yang. Blind image deblurring using dark channel
prior. In Proceedings of the IEEE Conference on Computer
Vision and Pattern Recognition, pages 1628–1636, 2016.

[28] Olaf Ronneberger, Philipp Fischer, and Thomas Brox. U-
net: Convolutional networks for biomedical image segmen-

6838

ings of the IEEE conference on computer vision and pattern
recognition, pages 1107–1114, 2013.

[43] Tianfan Xue, Jiajun Wu, Katherine Bouman, and Bill Free-
man. Visual dynamics: Probabilistic future frame synthesis
via cross convolutional networks. In Advances in Neural In-
formation Processing Systems, pages 91–99, 2016.

[44] Yulun Zhang, Yapeng Tian, Yu Kong, Bineng Zhong, and
Yun Fu. Residual dense network for image super-resolution.
In The IEEE Conference on Computer Vision and Pattern
Recognition (CVPR), 2018.

[45] Tinghui Zhou, Shubham Tulsiani, Weilun Sun, Jitendra Ma-
lik, and Alexei A Efros. View synthesis by appearance ﬂow.
In European Conference on Computer Vision, pages 286–
301. Springer, 2016.

tation. In International Conference on Medical image com-
puting and computer-assisted intervention, pages 234–241.
Springer, 2015.

[29] Christian J Schuler, Harold Christopher Burger, Stefan
Harmeling, and Bernhard Scholkopf. A machine learning
approach for non-blind image deconvolution.
In Proceed-
ings of the IEEE Conference on Computer Vision and Pattern
Recognition, pages 1067–1074, 2013.

[30] Christian J Schuler, Michael Hirsch, Stefan Harmeling, and
Bernhard Sch¨olkopf. Learning to deblur. IEEE transactions
on pattern analysis and machine intelligence, 38(7):1439–
1451, 2016.

[31] Qi Shan, Jiaya Jia, and Aseem Agarwala. High-quality mo-
tion deblurring from a single image. In Acm transactions on
graphics (tog), volume 27, page 73. ACM, 2008.

[32] Jianping Shi, Li Xu, and Jiaya Jia. Discriminative blur de-
tection features. In Computer Vision and Pattern Recogni-
tion (CVPR), 2014 IEEE Conference on, pages 2965–2972.
IEEE, 2014.

[33] Jian Sun, Wenfei Cao, Zongben Xu, and Jean Ponce. Learn-
ing a convolutional neural network for non-uniform motion
blur removal.
In Proceedings of the IEEE Conference on
Computer Vision and Pattern Recognition, pages 769–777,
2015.

[34] Xin Tao, Hongyun Gao, Xiaoyong Shen, Jue Wang, and Ji-
aya Jia. Scale-recurrent network for deep image deblurring.
In Proceedings of the IEEE Conference on Computer Vision
and Pattern Recognition, pages 8174–8182, 2018.

[35] Igor Vasiljevic, Ayan Chakrabarti,

Shakhnarovich.
recognition by convolutional networks.
arXiv:1611.05760, 2016.

and Gregory
Examining the impact of blur on
arXiv preprint

[36] Subeesh Vasu and AN Rajagopalan. From local to global:
Edge proﬁles to camera motion in blurred images. In Pro-
ceedings of the IEEE Conference on Computer Vision and
Pattern Recognition, pages 4447–4456, 2017.

[37] Oriol Vinyals, Alexander Toshev, Samy Bengio, and Du-
mitru Erhan. Show and tell: A neural image caption gen-
erator. In Proceedings of the IEEE conference on computer
vision and pattern recognition, pages 3156–3164, 2015.

[38] Carl Vondrick, Hamed Pirsiavash, and Antonio Torralba.
Generating videos with scene dynamics.
In Advances In
Neural Information Processing Systems, pages 613–621,
2016.

[39] Oliver Whyte, Josef Sivic, Andrew Zisserman, and Jean
Inter-

Ponce. Non-uniform deblurring for shaken images.
national journal of computer vision, 98(2):168–186, 2012.

[40] SHI Xingjian, Zhourong Chen, Hao Wang, Dit-Yan Yeung,
Wai-Kin Wong, and Wang-chun Woo. Convolutional lstm
network: A machine learning approach for precipitation
nowcasting. In Advances in neural information processing
systems, pages 802–810, 2015.

[41] Li Xu and Jiaya Jia. Two-phase kernel estimation for robust
In European Conference on Computer

motion deblurring.
Vision, pages 157–170. Springer, 2010.

[42] Li Xu, Shicheng Zheng, and Jiaya Jia. Unnatural l0 sparse
In Proceed-

representation for natural image deblurring.

6839

