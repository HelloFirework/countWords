GA-Net: Guided Aggregation Net for End-to-end Stereo Matching

Feihu Zhang1∗

1 University of Oxford

Victor Prisacariu1

Ruigang Yang2

Philip H.S. Torr1

Abstract

In the stereo matching task, matching cost aggregation is
crucial in both traditional methods and deep neural network
models in order to accurately estimate disparities. We pro-
pose two novel neural net layers, aimed at capturing local
and the whole-image cost dependencies respectively. The
ﬁrst is a semi-global aggregation layer which is a differen-
tiable approximation of the semi-global matching, the sec-
ond is the local guided aggregation layer which follows a
traditional cost ﬁltering strategy to reﬁne thin structures.

These two layers can be used to replace the widely
used 3D convolutional
layer which is computationally
costly and memory-consuming as it has cubic computa-
tional/memory complexity.
In the experiments, we show
that nets with a two-layer guided aggregation block eas-
ily outperform the state-of-the-art GC-Net which has nine-
teen 3D convolutional
layers. We also train a deep
guided aggregation network (GA-Net) which gets better
accuracies than state-of-the-art methods on both Scene
Flow dataset and KITTI benchmarks. Code is available at
https://github.com/feihuzhang/GANet.

1. Introduction

Stereo reconstruction is a major research topic in com-
puter vision, robotics and autonomous driving. It aims to
estimate 3D geometry by computing disparities between
matching pixels in a stereo image pair.
It is challenging
due to a variety of real-world problems, such as occlusions,
large textureless areas (e.g. sky, walls etc.), reﬂective sur-
faces (e.g. windows), thin structures and repetitive textures.
Traditionally, stereo reconstruction is decomposed into
three important steps: feature extraction (for matching cost
computation), matching cost aggregation and disparity pre-
diction [9, 21]. Feature-based matching is often ambiguous,
with wrong matches having a lower cost than the correct
ones, due to occlusions, smoothness, reﬂections, noise etc.
Therefore, cost aggregation is a key step needed to obtain
accurate disparity estimations in challenging regions.

Deep neural networks have been used for matching cost

∗Part of the work was done when working in Baidu Research.

2 Baidu Research, Baidu Inc.

(a) Input image

(b) GC-Net [13]

(c) Our GA-Net-2

(d) Ground truth

Figure 1: Performance illustrations. (a) a challenging input im-
age. (b) Result of the state-of-the-art method GC-Net [13] which
has nineteen 3D convolutional layers for matching cost aggrega-
tion. (c) Result of our GA-Net-2, which only uses two proposed
GA layers and two 3D convolutional layers.
It aggregates the
matching information into the large textureless region and is an
order of magnitude faster than GC-Net. (d) Ground truth.

computation in, e.g, [30,33], with (i) cost aggregation based
on traditional approaches, such as cost ﬁltering [10] and
semi-global matching (SGM) [9] and (ii) disparity com-
putation with a separate step. Such methods considerably
improve over traditional pixel matching, but still struggle
to produce accurate disparity results in textureless, reﬂec-
tive and occluded regions. End-to-end approaches that link
matching with disparity estimation were developed in e.g.
DispNet [15], but it was not until GC-Net [13] that cost ag-
gregation, through the use of 3D convolutions, was incorpo-
rated in the training pipeline. The more recent work of [3],
PSMNet, further improves accuracy by implementing the
stacked hourglass backbone [17] and considerably increas-
ing the number of 3D convolutional layers for cost aggrega-
tion. The large memory and computation cost incurred by
using 3D convolutions is reduced by down-sampling and
up-sampling frequently, but this leads to a loss of precision
in the disparity map.

Among these approaches, traditional semi-global match-
ing (SGM) [9] and cost ﬁltering [10] are all robust and ef-
ﬁcient cost aggregation methods which have been widely

1185

used in many industrial products. But, they are not differen-
tiable and cannot be easily trained in an end-to-end manner.
In this work, we propose two novel cost aggregation lay-
ers for end-to-end stereo reconstruction to replace the use of
3D convolutions. Our solution considerably increases accu-
racy, while decreasing both memory and computation costs.
First, we introduce a semi-global guided aggregation
layer (SGA) which implements a differentiable approxima-
tion of semi-global matching (SGM) [9] and aggregates the
matching cost in different directions over the whole image.
This enables accurate estimations in occluded regions or
large textureless/reﬂective regions.

Second, we introduce a local guided aggregation layer
(LGA) to cope with thin structures and object edges in order
to recover the loss of details caused by down-sampling and
up-sampling layers.

As illustrated in Fig. 1, a cost aggregation block with
only two GA layers and two 3D convolutional layers eas-
ily outperforms the state-of-the-art GC-Net [13], which has
nineteen 3D convolutional layers. More importantly, one
GA layer has only 1/100 computational complexity in terms
of FLOPs (ﬂoating-point operations) as that of a 3D convo-
lution. This allows us to build a real-time GA-Net model,
which achieves better accuracy compared with other exist-
ing real-time algorithms and runs at a speed of 15∼20 fps.
We further increase the accuracy by improving the net-
work architectures used for feature extraction and matching
cost aggregation. The full model, which we call “GA-Net”,
achieves the state-of-the-art accuracy on both the Scene
Flow dataset [15] and the KITTI benchmarks [7, 16].

2. Related Work

Feature based matching cost is often ambiguous, as
wrong matches can easily have a lower cost than correct
ones, due to occlusions, smoothness, reﬂections, noise etc.
To deal with this, many cost aggregation approaches have
been developed to reﬁne the cost volume and achieve bet-
ter estimations. This section brieﬂy introduces related work
in the application of deep neural networks in stereo recon-
struction with a focus on the existing matching cost aggre-
gation strategies, and brieﬂy reviews approaches for tradi-
tional local and semi-global cost aggregations.

2.1. Deep Neural Networks for Stereo Matching

Deep neural networks were used to compute patch-wise
similarity scores in [4, 6, 29, 33], with traditional cost ag-
gregation and disparity computation/reﬁnement methods
[9, 10] used to get the ﬁnal disparity maps. These ap-
proaches achieved state-of-the-art accuracy, but, limited by
the traditional matching cost aggregation step, often pro-
duced wrong predictions in occluded regions, large texture-
less/reﬂective regions and around object edges. Some other
methods looked to improve the performance of traditional

cost aggregation, with, e.g. SGM-Nets [23] predicting the
penalty-parameters for SGM [9] using a neural net, whereas
Sch¨onberger et al. [22] learned to fuse proposals by opti-
mization in stereo matching and Yang et al. proposed to ag-
gregate costs using a minimum spanning tree [28].

Recently, end-to-end deep neural network models have
become popular. Mayer et al. created a large synthetic
dataset to train end-to-end deep neural network for disparity
estimation (e.g. DispNet) [15]. Pang et al. [19] built a two-
stage convolutional neural network to ﬁrst estimate and then
reﬁne the disparity maps. Tulyakov et al. proposed end-to-
end deep stereo models for practical applications [26]. GC-
Net [13] incorporated the feature extraction, matching cost
aggregation and disparity estimation into a single end-to-
end deep neural model to get state-of-the-art accuracy on
several benchmarks. PSMNet [3] used pyramid feature ex-
traction and a stacked hourglass block [18] with twenty-ﬁve
3D convolutional layers to further improve the accuracy.

2.2. Cost Aggregation

Traditional stereo matching algorithms [1,9,27] added an
additional constraint to enforce smoothness by penalizing
changes of neighboring disparities. This can be both local
and (semi-)global, as described below.

2.2.1 Local Cost Aggregation

The cost volume C is formed of matching costs at each
pixel’s location for each candidate disparity value d. It has
a size of H × W × Dmax (with H: image height, W : image
width, Dmax: maximum of the disparities) and can be sliced
into Dmax slices for each candidate disparity d. An efﬁ-
cient cost aggregation method is the local cost ﬁlter frame-
work [10, 31], where each slice of the cost volume C(d) is
ﬁltered independently by a guided image ﬁlter [8, 25, 31].
The ﬁltering for pixel’s location p = (x, y) at disparity d is a
weighted average of all neighborhoods q ∈ Np in the same
slice C(d):

CA(p, d) = ∑
q∈Np

ω(p, q)·C(q, d)

(1)

Where C(q, d) means the matching cost at location p for
candidate disparity d. CA(p, d) represents the aggregated
matching cost. Different image ﬁlters [8,25,31] can be used
to produce the guided ﬁlter weights ω. Since these methods
only aggregate the cost in a local region Np, they can run at
fast speeds and reach real-time performance.

2.2.2 Semi-Global Matching

When enforcing (semi-)global aggregation, the matching
cost and the smoothness constraints are formulated into one
energy function E(D) [9] with the disparity map of the in-
put image as D. The problem of stereo matching can now
be formulated as ﬁnding the best disparity map D∗ that min-

186

CA

r (p, d) = C(p, d) + min

(3)

+ sum

imizes the energy E(D):
E(D) = ∑p{Cp(Dp) + ∑q∈Np P1 · δ (|Dp − Dq| = 1)
+ ∑q∈Np P2 · δ (|Dp − Dq| > 1)}.

(2)

The ﬁrst term ∑p Cp(Dp) is the sum of matching costs at all
pixel locations p for disparity map D. The second term is
a constant penalty P1 for locations q in the neighborhood
of p if they have small disparity discontinuities in disparity
map D (|Dp− Dq| = 1). The last term adds a larger constant
penalty P2, for all larger disparity changes (|Dp − Dq| > 1).
Hirschmuller proposed to aggregate matching costs in
1D from sixteen directions to get a approximate solution
with O(KN) time complexity, which is well known as semi-
global matching (SGM) [9]. The cost CA
r (p, d) of a location
p at disparity d aggregates along a path over the whole im-
age in the direction r, and is deﬁned recursively as:

CA
r (p− r, d),
CA
r (p− r, d − 1) + P1,
CA
r (p− r, d + 1) + P1,
CA
r (p− r, i) + P2.
min

i




Where r is a unit direction vector. The same aggregation
steps were used in MC-CNN [23, 30], and similar iterative
steps were employed in [1, 2, 14].

In the following section, we detail our much more efﬁ-
cient guided aggregation (GA) strategies, which include a
semi-global aggregation (SGA) layer and a local guided ag-
gregation (LGA) layer. Both GA layers can be implemented
with back propagation in end-to-end models to replace the
low-efﬁcient 3D convolutions and obtain higher accuracy.

3. Guided Aggregation Net

In this section, we describe our proposed guided aggre-
gation network (GA-Net), including the guided aggregation
(GA) layers and the improved network architecture.

3.1. Guided Aggregation Layers

State-of-the-art end-to-end stereo matching neural nets
such as [3, 13] build a 4D matching cost volume (with size
of H × W × Dmax × F, H: height, W : width, Dmax: max
disparity, F:
feature size) by concatenating features be-
tween the stereo views, computed at different disparity val-
ues. This is next reﬁned by a cost aggregation stage, and
ﬁnally used for disparity estimation. Different from these
approaches, and inspired by semi-global and local match-
ing cost aggregation methods [9, 10], we propose our semi-
global guided aggregation (SGA) and local guided aggrega-
tion (LGA) layers, as outlined below.

3.1.1 Semi-Global Aggregation

Traditional SGM [9] aggregates the matching cost itera-
tively in different directions (Eq.
(3)). There are several

difﬁculties in using such a method in end-to-end trainable
deep neural network models.

First, SGM has many user-deﬁned parameters (P1, P2),
which are not straightforward to tune. All of these param-
eters become unstable factors during neural network train-
ing. Second, the cost aggregations and penalties in SGM are
ﬁxed for all pixels, regions and images without adaptation
to different conditions. Third, the hard-minimum selection
leads to a lot of fronto parallel surfaces in depth estimations.

We design a new semi-global cost aggregation step
which supports backpropagation. This is more effective
than the traditional SGM and can be used repetitively in
a deep neural network model to boost the cost aggregation
effects. The proposed aggregation step is:

CA

r (p, d) = C(p, d)

w1(p, r)·CA

w2(p, r)·CA
w3(p, r)·CA

w4(p, r)· max

r (p− r, d),
r (p− r, d − 1),
r (p− r, d + 1),
CA
r (p− r, i).

i

(4)

This is different from the SGM in three ways. First, we
make the user-deﬁned parameters learnable and add them
as penalty coefﬁcients/weights of the matching cost terms.
These weights would therefore be adaptive and more ﬂex-
ible at different locations for different situations. Second,
we replace the ﬁrst/external minimum selection in Eq. (3)
with a weighted sum, without any loss in accuracy. This
change was proven effective in [24], where convolutions
with strides were used to replace the max-pooling layers to
get an all convolutional network without loss of accuracy.
Third, the internal/second minimum selection is changed
to a maximum. This is because the learning target in our
models is to maximize the probabilities at the ground truth
depths instead of minimizing the matching costs. Since
r (p, d) for
max
d different locations, here, we do not use another weighted
summation to replace it in order to reduce the computational
complexity.

CA
r (p− r, i) in Eq. (4) can be shared by CA

i

For both Eq. (3) and Eq. (4), the values of CA

r (p, d) in-
crease along the path, which may lead to very large values.
We normalize the weights of the terms to avoid such a prob-
lem. This leads to our new semi-global aggregation:

CA

r (p, d) = sum

s.t.

w0(p, r)·C(p, d)

w1(p, r)·CA
w2(p, r)·CA
w3(p, r)·CA

w4(p, r)· max
∑

r (p− r, d),
r (p− r, d − 1),
r (p− r, d + 1).
CA
r (p− r, i).

wi(p, r) = 1

i

i=0,1,2,3,4

(5)

C(p, d) is known as the cost volume (with a size of H×W ×
Dmax × F). Same as the traditional SGM [9], the cost vol-
ume can be sliced into Dmax slices at the third dimension for

187

(
a
)

G
A
N
e
t

-

A
r
c
h
i
t
e
c
t
u
r
e

(b) Semi-Global Guided Aggregation (SGA)

(c) Local Guided Aggregation (LGA)

Figure 2: (a) Architecture overview. The left and right images are fed to a weight-sharing feature extraction pipeline. It consists of a
stacked hourglass CNN and is connected by concatenations. The extracted left and right image features are then used to form a 4D cost
volume, which is fed into a cost aggregation block for regularization, reﬁnement and disparity regression. The guidance subnet (green)
generates the weight matrices for the guided cost aggregations (SGA and LGA). (b) SGA layers semi-globally aggregate the cost volume
in four directions. (c) The LGA layer is used before the disparity regression and locally reﬁnes the 4D cost volume for several times.

each candidate disparity d and each of these slices repeats
the aggregation operation of Eq. (5) with the shared weight
matrices (w0...4). All the weights w0...4 can be achieved by
a guidance subnet (as shown in Fig. 2). Different to the
original SGM which aggregates in sixteen directions, in or-
der to improve the efﬁciency, the proposed aggregations are
done in totally four directions (left, right, up and down)
along each row or column over the whole image, namely
r ∈ {(0, 1), (0,−1), (1, 0), (−1, 0)}.

The ﬁnal aggregated output CA(p) is obtained by select-

ing the maximum between the four directions:

CA(p, d) = max

r

CA

r (p, d)

(6)

The last maximum selection keeps the best message from
only one direction. This guarantees that the aggregation ef-
fects are not blurred by the other directions. The backprop-
agation for w and C(p, d) in the SGA layer can be done in-
versely as Eq. (5) (details are available in the supplementary
materials). Our SGA layer can be repeated several times in
the neural network model to obtain better cost aggregation
effects (as illustrated in Fig. 2).

3.1.2 Local Aggregation

We now introduce the local guided aggregation (LGA) layer
which aims to reﬁne the thin structures and object edges.
Down-sampling and up-sampling are widely used in stereo
matching models which blurs thin structures and object
edges. The LGA layer learns several guided ﬁlters to reﬁne
the matching cost and aid in the recovery of thin structure
information. The local aggregation follows the cost ﬁlter

deﬁnition [10] (Eq. (1)) and can be written as:
∑q∈Np ω0(p, q)·C(q, d),
CA(p, d) = sum
∑q∈Np ω1(p, q)·C(q, d − 1),
∑q∈Np ω2(p, q)·C(q, d + 1).

ω0(p, q) + ω1(p, q) + ω2(p, q) = 1

s.t. ∑
q∈Np

(7)

Different slices (totally Dmax slices) of cost volume share
the same ﬁltering/aggregation weights in LGA. This is the
same as the original cost ﬁlter framework [10] and the SGA
(Eq.(5)) in this paper. While, different with the traditional
cost ﬁlter [10] which uses a K × K ﬁlter kernel to ﬁlter the
cost volume in a K × K local/neighboor region Np, the pro-
posed LGA layer has three K × K ﬁlters (ω0, ω1 and ω2)
at each pixel location p for disparities d, d − 1 and d + 1
respectively. Namely, it aggregates with a K × K × 3 weight
matrix in a K × K local region for each pixel location p.
The setting of the weight matrix is also similar to [11], but,
weights and ﬁlters are shared during the aggregation as de-
signed in [10].

3.1.3 Efﬁcient Implementation

We use several 2D convolutional layers to build a fast guid-
ance subnet (as illustrated in Fig. 2). The implementation is
similar to [32].
It uses the reference image as input and
outputs the aggregation weights w (Eq.
(5)). For a 4D
cost volume C with size of H × W × D× F (H: height, W :
width, D: max disparity, F: feature size), the output of the
guidance subnet is split, reshaped and normalized as four
H ×W × K× F (K = 5) weight matrices for four directions’
aggregation using Eq. (5). Note that aggregations for dif-

188

SGA...    …SGASGA ..    ..LGAmaxCost AggregationFeature ExtractionCost VolumeDisparity Estimationferent disparities corresponding to a slice d share the same
aggregation weights. Similarly, the LGA layer need to learn

a H × W × 3K2 × F (K = 5) weight matrix and aggregates

using Eq. (7).

Even though the SGA layer involves an iterative ag-
gregation across the width or the height, the forward and
backward can be computed in parallel due to the indepen-
dence between elements in different feature channels or
rows/columns. For example, when aggregating in the left
direction, the elements in different channels or rows are in-
dependent and can be computed simultaneously. The ele-
ments of the LGA layer can also be computed in parallel by
simply decomposing it into element-wise matrix multipli-
cations and summations. In order to increase the receptive
ﬁeld of the LGA layer, we repeat the computation of EQ. (7)
twice with the same weight matrix, which is similar to [5].

3.2. Network Architecture

As illustrated in Fig.2, the GA-Net consists of four parts:
the feature extraction block, the cost aggregation for the 4D
cost volume, the guidance subnet to produce the cost ag-
gregation weights and the disparity regression. For the fea-
ture extraction, we use a stacked hourglass network which is
densely connected by concatenations between different lay-
ers. The feature extraction block is shared by both left and
right views. The extracted features for left and right images
are then used to form a 4D cost volume. Several SGA layers
are used for the cost aggregation and LGA layers can be im-
plemented before and after the softmax layer of the disparity
regression. It reﬁnes the thin-structures and compensate for
the accuracy loss caused by the down-sampling done for the
cost volume. The weight matrices (in Eq.(5) and Eq.(7)) are
generated by an extra guidance subnet which uses the refer-
ence view (e.g. the left image) as input. The guidance sub-
net consists of several fast 2D convolutional layers and the
outputs are reshaped and normalized into required weight
matrices for these GA layers.1

3.3. Loss Function

We adopt the smooth L1 loss function to train our mod-
els. Smooth L1 is robust at disparity discontinuities and has
low sensitivity to outliers or noises, as compared to L2 loss.
The loss function for training our models is deﬁned as:

L( ˆd, d) = 1
N

N
∑
n=1

l(| ˆd − d|)
x ≥ 1
x < 1

l(x) =(cid:26)x− 0.5,

x2/2,

(8)

where, | ˆd − d| measures the absolute error of the disparity

predictions, N is the number of valid pixels with ground
truths for training.

1The parameter settings of “GA-Net-15” used in our experiments are
detailed in the supplementary material (available at www.feihuzhang.com).

For the disparity estimation, we employ the disparity re-

gression proposed in [13]:

ˆd =

Dmax
∑
d=0

d × σ (−CA(d))

(9)

The disparity prediction ˆd is the sum of each disparity
candidate weighted by its probability. The probability of
each disparity d is calculated after cost aggregation via the
softmax operation σ (·). The disparity regression is shown
more robust than classiﬁcation based methods and can gen-
erate sub-pixel accuracy.

4. Experiments

In this section, we evaluate our GA-Nets with different
settings using Scene Flow [15] and KITTI [7, 16] datasets.
We implement our architectures using pytorch or caffe [12]
(only for real-time models’ implementation). All models
are optimized with Adam (β1 = 0.9, β2 = 0.999). We train
with a batch size of 16 on eight GPUs using 240× 576 ran-
dom crops from the input images. The maximum of the
disparity is set as 192. Before training, we normalize each
channel of the image by subtracting their means and divid-
ing their standard deviations. We train the model on Scene
Flow dataset for 10 epochs with a constant learning rate of
0.001. For the KITTI datasets, we ﬁne-tune the models pre-
trained on Scene Flow dataset for a further 640 epochs. The
learning rate for ﬁne-tuning begins at 0.001 for the ﬁrst 300
epochs and decreases to 0.0001 for the remaining epochs.

4.1. Ablation Study

We evaluate the performance of GA-Nets with differ-
ent settings, including different architectures and different
number (0-4) of GA layers. As listed in Table 1, The guided
aggregation models signiﬁcantly outperform the baseline
setting which only has 3D convolutional layers for cost ag-
gregation. The new architectures for feature extraction and
cost aggregation improve the accuracy by 0.14% on KITTI
dataset and 0.9% on Scene Flow dataset. Finally, the best
setting of GA-Net with three SGA layers and one LGA
layer gets the best 3-pixel threshold error rate of 2.71% on
KITTI 2015 validation set. It also achieves the best average
EPE of 0.84 pixel and the best 1-pixel threshold error rate
of 9.9% on the Scene Flow test set.

4.2. Effects of Guided Aggregations

In this section, we compare the guided aggregation
strategies with other matching cost aggregation methods.
We also analyze the effects of the GA layers by observing
the post-softmax probabilities output by different models.

Firstly, our proposed GA-Nets are compared with the
cost aggregation architectures in GC-Net (with nineteen 3D
convolutions) and PSMNet (with twenty-ﬁve 3D convolu-
tions). We ﬁxed the feature extraction architecture as pro-

189

√
√
√
√
√
√
√

r
o
r
r
e

t
n
i
o
p

d
n
E

Table 1: Evaluations of GA-Nets with different settings. Average end point error (EPE) and threshold error rate are used for evaluations.

Feature Extraction

Stacked Block

Densely Concatenate

Cost Aggregation
SGA Layer

LGA Layer

EPE Error

Error Rates (%)

Error Rates (%)

Scene Flow

KITTI 2015

√
√
√
√
√
√

+1
+2
+3
+4
+3

√

1.26
1.19
1.14
1.05
0.97
0.90
0.89
0.84

13.4
13.0
12.5
11.7
11.0
10.5
10.4
9.9

3.39
3.31
3.25
3.09
2.96
2.85
2.83
2.71

Table 2: Comparisons of different cost aggregation methods. Av-
erage end point error (EPE) and 1-pixel threshold error rate are
used for evaluations on Scene Flow dataset.

Models

GC-Net
PSMNet
GA-Net-1
GA-Net-2
GA-Net-3
GA-Net-7
GA-Net-11
GA-Net-15

3D Conv
Number

Param Time(s)

19
25
1
2
3
7
11
15

2.9M
3.5M
0.5M
0.7M
0.8M
1.3M
1.8M
2.3M

4.4
2.1
0.17
0.35
0.42
0.62
0.95
1.5

EPE
Error

1.80
1.09
1.82
1.51
1.36
1.07
0.95
0.84

Error
Rates

15.6
12.1
16.5
15.0
13.9
11.9
10.8
9.9

ﬁrst model (ﬁrst row of Fig. 4) only has 3D convolutions
(without any GA layers), the second model (second row of
Fig. 4) has SGA layers and the last model (last row of Fig.
4) has both SGA layers and LGA layer.

As illustrated in Fig. 4(a), for large textureless regions,
there would be a lot of noise since there is no any distinc-
tive features in these regions for correct matching. The
SGA layers successfully suppress these noise in the prob-
abilities by aggregating surrounding matching information.
The LGA layer further concentrates the probability peak on
the ground truth value. It could reﬁne the matching results.
Similarly, in the sample of reﬂective region (Fig. 4(b)), the
SGA and LGA layers correct the wrong matches and con-
centrate the peak on the correct disparity value. For the sam-
ples around the objects edges (Fig. 4(c)), there are usually
two peaks in the probability distribution which are inﬂu-
enced by the background and the foreground respectively.
The SGA and LGA use spatial aggregation along with ap-
propriate maximum selection to cut down the aggregation of
the wrong matching information from the background and
therefore suppress the false probability peak appeared at the
background’s disparity value.

4.3. Comparisons with SGMs and 3D Convolutions

The SGA layer is a differentiable approximation of the
SGM [9]. But, it produces far better results compared with
both the original SGM with handcrafted features and the
MC-CNN [30] with CNN based features (as shown in Table
5). This is because 1) SGA does not have any user-deﬁned
parameters that are all learned in an end-to-end fashion. 2)
The aggregation of SGA is fully guided and controlled by

190

Number of 3D conv

Figure 3: Illustration of the effects of guided aggregations. GA-
Nets are compared with the same architectures without GA Layers.
Evaluations are on Scene Flow dataset using average EPE.

posed above. As shown in Table 2, GA-Nets have fewer pa-
rameters, run at a faster speed and achieve better accuracy.
E.g., with only two GA layers and two 3D convolutions, our
GA-Net-2 outperforms the GC-Net by 0.29 pixel in average
EPE. Also, the GA-Net-7 with three GA layers and seven
3D convolutions outperforms the current best PSMNet [3]
which has twenty-ﬁve 3D convolutional layers.

We also study the effects of the GA layers by comparing
with the same architectures without GA steps. These base-
line models “GA-Nets∗” have the same network architec-
tures and all other settings except that there is no GA layer
implemented. As shown in Fig. 3, for all these models, GA
layers have signiﬁcantly improved the models’ accuracy (by
0.5-1.0 pixels in average EPE). For example, the GA-Net-
2 with two 3D convolutions and two GA layers produces
lower EPE (1.51) compared with GA-Net∗-11 (1.54) which
utilizes eleven 3D convolutions. This implies that two GA
layers are more effective than nine 3D convolutional layers.

Finally, in order to observe and analyze the effects of
GA layers, in Fig. 4, we plot the post-softmax probabili-
ties with respect to a range of candidate disparities. These
probabilities are directly used for disparity estimation using
Eq. (9) and can reﬂect the effectiveness of the cost aggrega-
tion strategies. The data samples are all selected from some
challenging regions, such as a large textureless region (sky),
the reﬂective region (window of a car) and pixels around the
object edges. Three different models are compared. The

0510152025300.51.01.52.02.53.0Only 3D convGANetsGC-NetPSMNetv
n
o
c
D
3
y
l
n
o

A
G
S
h
t
i

w

A
G
L
+
C
G
S

(a) large textureless region (sky)

(b) reﬂective region (car window)

(c) object edges

Figure 4: Post-softmax probability distributions with respect to disparity values. Red lines illustrate the ground truth disparities. Samples
are selected from three challenging regions: (a) the large smooth region (sky), (b) the reﬂective region from one car window and (c) one
region around the object edges. The ﬁrst row shows the probability distributions without GA layers. The second row shows the effects of
semi-global aggregation (SGA) layers and the last row is the reﬁned probabilities with one extra local guided aggregation (LGA) layer.

(a) Input view

(b) large textureless region

(c) result of traditional SGM

(d) result of our GA-Net-15

Figure 5: Comparisons with traditional SGM. More results and
comparisons are avaiable at GA-Net-15 and SGM.

the weight matrices. The guidance subnet learns effective
geometrical and contextual knowledge to control the direc-
tions, scopes and strengths of the cost aggregations.

Moreover, compared with original SGM, most of the
fronto-parallel approximations in large textureless regions
have been avoided. (Example is in Fig. 5.) This might be
beneﬁted from: 1) the use of the soft weighted sum in Eq.
(5) (instead of the hard min/max selection in Eq. (3)); and
2) the regression loss of Eq. (9) which helps achieve the
subpixel accuracy.

Our SGA layer is also more efﬁcient and effective than
the 3D convolutional layer. This is because the 3D convolu-
tional layer could only aggregate in a local region restricted
by the kernel size. As a result, a series of 3D convolutions
along with encoder and decoder architectures are indispens-
able in order to achieve good results. As a comparison,
our SGA layer aggregates semi-globally in a single layer
which is more efﬁcient. Another advantage of the SGA is
that the aggregation’s direction, scope and strength are fully
guided by variable weights according to different geometri-
cal and contextual information in different locations. E.g.,
the SGA behaves totally different in the occlusions and the
large smoothness regions. But, the 3D convolutional layer
has ﬁxed weights and always perform the same for all loca-
tions in the whole image.

Table 3: Comparisons with existing real-time algorithms

Methods

End point error

Error rates

Speed (fps)

Our GA-Net
DispNet [15]

Toast [20]

0.7 px
1.0 px
1.4 px

3.21 %
4.65 %
7.42 %

15 (GPU)
22 (GPU)
25 (CPU)

4.4. Complexity and Real time Models

The computational complexity of one 3D convolutional
layer is O(K3CN), where N is the elements number of the
output blob. K is the size of the convolutional kernel and
C is the channel number of the input blob. As a compari-
son, the complexity of SGA is O(4KN) or O(8KN) for four
or eight-direction aggregations. In GC-Net [13] and PSM-
Net [3], K = 3, C = 32, 64 or 128 and in our GA-Nets, K
is used as 5 (for SGA layer). Therefore, the computational
complexity in terms of ﬂoating-point operations (FLOPs) of
the proposed SGA step is less than 1/100 of one 3D convo-
lutional layer.

The SGA layer are much faster and more effective than
3D convolutions. This allows us to build an accurate real-
time model. We implement one caffe [12] version of the
GA-Net-1 (with only one 3D convolutional layer and with-
out LGA layers). The model is further simpliﬁed by us-
ing 4× down-sampling and up-sampling for cost volume.
The real-time model could run at a speed of 15∼20 fps for
300×1000 images on a TESLA P40 GPU. We also compare
the accuracy of the results with the state-of-the-art real-time
models. As shown in Table 3, the real-time GA-Net far out-
performs other existing real-time stereo matching models.

4.5. Evaluations on Benchmarks

For the benchmark evaluations, we use the GA-Net-15
with full settings for evaluations. We compare our GA-Net
with the state-of-the-art deep neural network models on the
Scene Flow dataset and the KITTI benchmarks.

191

01020304050600.000.050.100.150.2001020304050600.00.10.20.301020304050600.00.10.20.30.47080901001101201300.0000.0250.0500.0750.1007080901001101201300.000.050.100.150.207080901001101201300.00.10.20.3304050607080901001100.000.050.100.150.20304050607080901001100.00.10.2304050607080901001100.00.10.20.3Figure 6: Results visualization and comparisons. First row: input image. Second row: Results of GC-Net [13]. Third row: Results of
PSMNet [3]. Last row: Results of our GA-Net. Signiﬁcant improvements are pointed out by blue arrows. The guided aggregations can
effectively aggregate the disparity information to the large textureless regions (e.g. the cars and the windows) and give precise estimations.
It can also aggregate the object knowledge and preserve the depth structure very well (last column).

Table 4: Evaluation Results on KITTI 2012 Benchmark

Models

error rates
(2 pixels)

error rates
(3 pixels)

Reﬂective

Avg-All

regions

(end point)

Our GA-Net
PSMNet [3]
GC-Net [13]
MC-CNN [30]

2.18 %
2.44 %
2.71 %
3.90 %

1.36 %
1.49 %
1.77 %
2.43 %

7.87%
8.36%
10.80%
17.09%

0.5 px
0.6 px
0.7 px
0.9 px

Table 5: Evaluation Results on KITTI 2015 Benchmark

Models

Non Occlusion

All Areas

Foreground Avg All

Foreground Avg All

Our GA-Net-15
PSMNet [3]
GC-Net [13]
SGM-Nets [23]
MC-CNN [30]
SGM [9]

3.39%
4.31%
5.58%
7.43%
7.64%
11.68%

1.84%
2.14 %
2.61%
3.09%
3.33%
5.62%

3.91%
4.62%
6.16%
8.64%
8.88%
13.00%

2.03%
2.32%
2.87%
3.66%
3.89%
6.38%

4.5.1 Scene Flow Dataset

The Scene Flow synthetic dataset [15] contains 35,454
training and 4,370 testing images. We use the “ﬁnal” set
for training and testing. GA-Nets are compared with other
state-of-the-art DNN models by evaluating with the average
end point errors (EPE) and 1-pixel threshold error rates on
the test set. The results are presented in Table 2. We ﬁnd
that our GA-Net outperforms the state-of-the-arts on both of
the two evaluation metrics by a noteworthy margin (2.2%
improvement in error rate and 0.25 pixel improvement in
EPE compared with the current best PSMNet [3].).

4.5.2 KITTI 2012 and 2015 Datasets

After training on Scene Flow dataset, we use the GA-Net-
15 to ﬁne-tune on the KITTI 2015 and KITTI 2012 data sets

respectively. The models are then evaluated on the test sets.
According to the online leader board, as shown in Table 4
and Table 5, our GA-Net has fewer low-efﬁcient 3D con-
volutions but achieves better accuracy. It surpasses current
best PSMNet in all the evaluation metrics. Examples are
shown in Fig. 6. The GA-Nets can effectively aggregate
the correct matching information into the challenging large
textureless or reﬂective regions to get precise estimations.
It also keeps the object structures very well.

5. Conclusion

In this paper, we developed much more efﬁcient and ef-
fective guided matching cost aggregation (GA) strategies,
including the semi-global aggregation (SGA) and the lo-
cal guided aggregation (LGA) layers for end-to-end stereo
matching. The GA layers signiﬁcantly improve the accu-
racy of the disparity estimation in challenging regions, such
as occlusions, large textureless/reﬂective regions and thin
structures. The GA layers can be used to replace computa-
tionally costly 3D convolutions and get better accuracy.

Acknowledgement

Research is mainly supported by Baidu’s Robotics
and Auto-driving Lab and in part by the ERC grant
ERC-2012-AdG 321162-HELIOS, EPSRC grant Seebibyte
EP/M013774/1 and EPSRC/MURI grant EP/N019474/1.
We would also like to acknowledge the Royal Academy of
Engineering. Victor Adrian Prisacariu would like to thank
the European Commission Project Multiple-actOrs Virtual
Empathic CARegiver for the Elder (MoveCare).

192

References

[1] F. Besse, C. Rother, A. Fitzgibbon, and J. Kautz. Pmbp:
Patchmatch belief propagation for correspondence ﬁeld esti-
mation. International Journal of Computer Vision, 110(1):2–
13, Oct 2014. 2, 3

[2] M. Bleyer, C. Rhemann, and C. Rother. Patchmatch stereo-
In British

stereo matching with slanted support windows.
Machine Vision Conference (BMVC), pages 1–11, 2011. 3

[3] J.-R. Chang and Y.-S. Chen. Pyramid stereo matching net-
work. In Proceedings of the IEEE Conference on Computer
Vision and Pattern Recognition (CVPR), pages 5410–5418,
2018. 1, 2, 3, 6, 7, 8

[4] Z. Chen, X. Sun, L. Wang, Y. Yu, and C. Huang. A deep
visual correspondence embedding model for stereo matching
costs. In Proceedings of the IEEE International Conference
on Computer Vision (ICCV), pages 972–980, 2015. 2

[5] X. Cheng, P. Wang, and R. Yang. Depth estimation via afﬁn-
ity learned with convolutional spatial propagation network.
In Proceedings of the European Conference on Computer Vi-
sion (ECCV), pages 103–119, 2018. 5

[6] J. Flynn, I. Neulander, J. Philbin, and N. Snavely. Deep-
stereo: Learning to predict new views from the world’s im-
agery. In Proceedings of the IEEE Conference on Computer
Vision and Pattern Recognition (CVPR), pages 5515–5524,
2016. 2

[7] A. Geiger, P. Lenz, and R. Urtasun. Are we ready for au-
tonomous driving? the kitti vision benchmark suite. In Pro-
ceedings of the IEEE Conference on Computer Vision and
Pattern Recognition (CVPR), pages 3354–3361. IEEE, 2012.
2, 5

[8] K. He, J. Sun, and X. Tang. Guided image ﬁltering. IEEE
Transactions on Pattern Analysis and Machine Intelligence,
(6):1397–1409, 2013. 2

[9] H. Hirschmuller. Stereo processing by semiglobal matching
and mutual information. IEEE Transactions on Pattern Anal-
ysis and Machine Intelligence, 30(2):328–341, 2008. 1, 2, 3,
6, 8

[10] A. Hosni, C. Rhemann, M. Bleyer, C. Rother, and
M. Gelautz. Fast cost-volume ﬁltering for visual correspon-
dence and beyond. IEEE Transactions on Pattern Analysis
and Machine Intelligence, 35(2):504–511, 2013. 1, 2, 3, 4

[11] X. Jia, B. De Brabandere, T. Tuytelaars, and L. V. Gool. Dy-
In Advances in Neural Information

namic ﬁlter networks.
Processing Systems, pages 667–675, 2016. 4

[12] Y. Jia, E. Shelhamer, J. Donahue, S. Karayev, J. Long, R. Gir-
shick, S. Guadarrama, and T. Darrell. Caffe: Convolutional
architecture for fast feature embedding.
In Proceedings of
the ACM International Conference on Multimedia, pages
675–678. ACM, 2014. 5, 7

[13] A. Kendall, H. Martirosyan, S. Dasgupta, P. Henry,
R. Kennedy, A. Bachrach, and A. Bry. End-to-end learning
of geometry and context for deep stereo regression. CoRR,
vol. abs/1703.04309, 2017. 1, 2, 3, 5, 7, 8

[14] S. Liu, S. De Mello, J. Gu, G. Zhong, M.-H. Yang, and
J. Kautz. Learning afﬁnity via spatial propagation net-
works. In Advances in Neural Information Processing Sys-
tems (NIPS), pages 1520–1530, 2017. 3

[15] N. Mayer, E. Ilg, P. Hausser, P. Fischer, D. Cremers,
A. Dosovitskiy, and T. Brox. A large dataset to train convo-
lutional networks for disparity, optical ﬂow, and scene ﬂow
estimation. In Proceedings of the IEEE Conference on Com-
puter Vision and Pattern Recognition (CVPR), pages 4040–
4048, 2016. 1, 2, 5, 7, 8

[16] M. Menze and A. Geiger. Object scene ﬂow for autonomous
vehicles. In Proceedings of the IEEE Conference on Com-
puter Vision and Pattern Recognition (CVPR), pages 3061–
3070, 2015. 2, 5

[17] A. Newell, K. Yang, and J. Deng. Stacked hourglass net-
works for human pose estimation.
In Proceedings of the
European Conference on Computer Vision, pages 483–499.
Springer, 2016. 1

[18] A. Newell, K. Yang, and J. Deng. Stacked hourglass net-
works for human pose estimation. In Proceedings of the Eu-
ropean Conference on Computer Vision (ECCV), pages 483–
499. Springer, 2016. 2

[19] J. Pang, W. Sun, J. S. Ren, C. Yang, and Q. Yan. Cas-
cade residual learning: A two-stage convolutional neural net-
work for stereo matching. IEEE International Conference on
Computer Vision Workshops (ICCVW), 2017. 2

[20] B. Ranft and T. Strauß. Modeling arbitrarily oriented slanted
planes for efﬁcient stereo vision based on block matching. In
IEEE International Conference on Intelligent Transportation
Systems (ITSC), pages 1941–1947. IEEE, 2014. 7

[21] D. Scharstein and R. Szeliski. A taxonomy and evaluation of
dense two-frame stereo correspondence algorithms. Interna-
tional Journal of Computer Vision, 47(1-3):7–42, 2002. 1

[22] J. L. Sch¨onberger, S. N. Sinha, and M. Pollefeys. Learning to
fuse proposals from multiple scanline optimizations in semi-
global matching. In Proceedings of the European Conference
on Computer Vision (ECCV), pages 739–755, 2018. 2

[23] A. Seki and M. Pollefeys. Sgm-nets: Semi-global matching
with neural networks. In Proceedings of the IEEE Confer-
ence on Computer Vision and Pattern Recognition (CVPR),
pages 6640–6649, 2017. 2, 3, 8

[24] J. T. Springenberg, A. Dosovitskiy, T. Brox, and M. Ried-
miller. Striving for simplicity: The all convolutional net.
arXiv preprint arXiv:1412.6806, 2014. 3

[25] C. Tomasi and R. Manduchi. Bilateral ﬁltering for gray and
color images. In Proceedings of the IEEE International Con-
ference on Computer Vision (ICCV), pages 839–846. IEEE,
1998. 2

[26] S. Tulyakov, A. Ivanov, and F. Fleuret. Practical deep stereo
(pds): Toward applications-friendly deep stereo matching.
arXiv preprint arXiv:1806.01677, 2018. 2

[27] S. Xu, F. Zhang, X. He, X. Shen, and X. Zhang. Pm-pm:
Patchmatch with potts model for object segmentation and
stereo matching. IEEE Transactions on Image Processing,
24(7):2182–2196, July 2015. 2

[28] Q. Yang. A non-local cost aggregation method for stereo
matching. In Proceedings of the IEEE Conference on Com-
puter Vision and Pattern Recognition (CVPR), pages 1402–
1409. IEEE, 2012. 2

[29] S. Zagoruyko and N. Komodakis. Learning to compare im-
age patches via convolutional neural networks. In Proceed-

193

ings of the IEEE Conference on Computer Vision and Pattern
Recognition (CVPR), pages 4353–4361, 2015. 2

[30] J. Zbontar and Y. LeCun. Computing the stereo matching
cost with a convolutional neural network.
In Proceedings
of the IEEE Conference on Computer Vision and Pattern
Recognition (CVPR), pages 1592–1599, 2015. 1, 3, 6, 8

[31] F. Zhang, L. Dai, S. Xiang, and X. Zhang. Segment graph
based image ﬁltering: fast structure-preserving smoothing.
In Proceedings of the IEEE International Conference on
Computer Vision (ICCV), pages 361–369, 2015. 2

[32] F. Zhang and B. W. Wah. Supplementary meta-learning: To-
wards a dynamic model for deep neural networks. In Pro-
ceedings of the IEEE International Conference on Computer
Vision, pages 4344–4353, 2017. 4

[33] F. Zhang and B. W. Wah. Fundamental principles on learn-
ing new features for effective dense matching. IEEE Trans-
actions on Image Processing, 27(2):822–836, 2018. 1, 2

194

