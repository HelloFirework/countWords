IGE-Net: Inverse Graphics Energy Networks

for Human Pose Estimation and Single-View Reconstruction

Dominic Jack1

d1.jack@qut.edu.au

Frederic Maire1
f.maire@qut.edu.au

Sareh Shirazi1

s.shirazi@qut.edu.au

Anders Eriksson2
a.eriksson@uq.edu.au

1School of Electrical Engineering and Computer Science, Queensland University of Technology

2School of Information Technology and Electrical Engineering, University of Queensland

Abstract

2. Main Contributions

Inferring 3D scene information from 2D observations
is an open problem in computer vision. We propose us-
ing a deep-learning based energy minimization framework
to learn a consistency measure between 2D observations
and a proposed world model, and demonstrate that this
framework can be trained end-to-end to produce consis-
tent and realistic inferences. We evaluate the framework
on human pose estimation and voxel-based object recon-
struction benchmarks and show competitive results can be
achieved with relatively shallow networks with drastically
fewer learned parameters and ﬂoating point operations
than conventional deep-learning approaches.

1. Introduction

Computer graphics involves reducing 3D scene informa-
tion to 2D using well-understood physics-based arguments
and mathematical operations like frame transformations and
projections. Computer vision can be thought of as the in-
verse problem – inferring 3D scene information from some
2D representation.

Unlike graphics, computer vision is inherently ill-posed.
While it is straight-forward enough to obtain an inference
which is consistent with a given 2D representation using
standard graphics and optimization techniques, there is no
guarantee this inference will be realistic. To resolve this, we
propose using simple optimization techniques on a learned
energy function which combines graphics operations with a
learned realism component.

We learn this energy function itself using deep-learning
optimization techniques, resulting in a multi-level optimiza-
tion framework which can be trained end-to-end. We apply
our framework to two common problems: 3D human pose
estimation, and single-view voxel-based object reconstruc-
tion.

Our main contributions are as follows.

1. We propose simple parameterized energy functions
that capture both consistency and feasibility for the
problems of human pose estimation and object recon-
struction based on 2D features and well-understood
computer-graphics principles.

2. For the case of human pose estimation, we show the
proposed energy function can be used to lift 2D pose
inferences to 3D at competitive accuracies with sig-
niﬁcantly fewer learned parameters and computational
requirements.

3. For object reconstruction, we demonstrate the frame-
work can produce high-resolution voxel grids from
single images on standard desktop GPUs without the
need for 3D convolutions or deconvolutions, out-
performing state-of-the-art high-resolution methods in
terms of accuracy.

3. Prior Work

3.1. Multi-Level Optimization

Many problems in machine learning involve inferring
values of unknown variables from observations. Energy-
based models describe relationships between sets of vari-
ables by mapping each combination to a scalar energy
value, where realistic combinations correspond to lower en-
ergies than their less viable counterparts.
Inferences are
made by ﬁxing values of known variables and seeking un-
known values which minimize the energy [27].

Energy-based models have been combined with deep
learning in the past. Zheng et al. [59] formulated condi-
tional random ﬁelds (CRFs) as a recurrent neural network
layer, which combined with a standard convolutional neural
network (CNN) achieved state-of-the-art results for image

17075

segmentation. Amos and Kolter [1] considered energy func-
tions based on quadratic programs. Their implementation
solved the inner optimization problem efﬁciently and ex-
actly, and demonstrated it was able to learn hard constraints
like those associated with the number-game Sudoku.

Domke [13] presented a number of implementations for
efﬁciently computing and differentiating approximate opti-
mizations – solutions where the energy minimization pro-
cess is based on a ﬁxed number of steps of some optimiza-
tion algorithm. While the algorithms did not ﬁnd the exact
solution to the energy minimization problem, these trun-
cated optimization processes still yielded good results for
image denoising and labeling problems. Belanger et al. [3]
took a similar approach and showed inexact optimization of
complex energy functions outperformed exact solutions us-
ing simpler functions for image denoising and natural lan-
guage semantic role labeling.

3.2. Human Pose Estimation

Inferring human pose in two or three dimensions from
images is an important part of many tasks including human-
computer interaction and action recognition. For the 2D
problem, traditional approaches combine visual features
and image descriptors with a tree-structure of the body and
known invariants and proportions [58]. More recently, deep
learning’s wave of success in other image processing appli-
cations such as image classiﬁcation and segmentation has
ﬂowed into pose estimation, with fully-convolutional ap-
proaches achieving exceptionally accurate 2D inferences by
regressing heatmaps rather than the joint coordinates them-
selves [50, 35, 10, 5, 11].

The 3D problem is considerably more challenging. In
addition to problems involved in the 2D variant, the main
difﬁculty in training 3D pose inference systems that work
in the wild is the availability of varied datasets. While 2D
datasets can be annotated manually, 3D information is gen-
erally gathered using special motion-capture systems. Al-
though these systems are capable of generating massive vol-
umes of data, the examples within such datasets are usu-
ally limited in variety. For example, the human 3.6 million
dataset (H3M) [19] contains millions of frames, but all im-
ages are collected in the same room with only a handful of
subjects. By contrast, the popular 2D dataset COCO [30]
features over 50,000 human pose annotations with very few
duplicates.

To get around this lack of varied 3D data, many meth-
ods use a 2-stage approach to 3D inference by inferring 2D
poses from images, then lifting these 2D poses to 3D sepa-
rately [4, 7, 33]. These approaches beneﬁt from the varied
image features in 2D datasets, but the separate stages means
any “lifting” module is unable to take advantage of contex-
tual information learned in the ﬁrst stage.

The other main difﬁculty with 3D pose estimation is the

inherent ambiguity associated with depth inference and oc-
clusions. Adversarial approaches tackle this by introducing
loss terms which are themselves learned in a modiﬁed mini-
max game [21, 47, 56].

3.3. Single View 3D Object Reconstruction

Reconstructing 3D objects from a single view is a com-
mon problem in computer vision and robotics. Fundamen-
tal to any approach is the representation of the output ob-
ject. Volumetric methods are the most wildely used in
3D learning [48, 54, 8, 9, 20, 55, 37, 51, 24, 60]. These
approaches generally use 3D analogues of ideas and op-
erations that have proven successful in image processing,
including convolutions, deconvolutions and feature pool-
ing. Recent advances in auto-encoders [15, 43] and GANs
[53, 52, 31, 17] have also shown promising results on regu-
lar 3D grids, while Tulsiani et al. [46] showed object shape
and pose can be learned simultaneously and without 3D la-
bels using only depth maps or silhouettes to encourage view
consistency across multiple views.

Unfortunately, the additional dimension inherent to 3D
representations means these methods scale poorly with res-
olution, resulting in generally coarse outputs – typically 323
or 643. To overcome this scaling issue, octree networks
[40, 49, 18, 45] recursively divide regions of interest into
octants. By focusing only on regions near the object sur-
face, these methods operate with complexity proportional
to surface area rather than volume.

Other approaches to high-resolution inference keep the
regular volumetric data structure but use operations that
scale better to higher resolutions [23, 39].

Point cloud methods avoid the need to discretize space,
instead working on continuous coordinates of points on the
object surface [14, 36, 38, 28]. However, the variable size
and unordered nature of point clouds introduce their own
complexity in deep learning frameworks. Template defor-
mation approaches [26, 22, 57] instead infer a constant-
sized space warping that can be applied to an arbitrarily
dense cloud or mesh. This comes at a cost however, as the
topology of the output shape is intrinsically coupled with
that of the deformed template.

4. Method Overview

Our approach is based on energy minimization networks
which have been discussed previously in the literature [27,
13, 2, 3]. We base our notation on the work of Belanger,
McCallum and Yang [3], where we seek the minimizer of
some energy function

arg min

E(˜y; x, θE ).

˜y

(1)

We implement the energy function E as a neural network
which takes as inputs a proposed solution ˜y and extracted

7076

features x with learned parameters θE . For generic non-
convex energies, calculating the exact arg min is intractible,
hence we approximate the result by the output of some iter-
ative strategy

˜y(t) = f(˜y(t)

, E(˜y(t−1); x, θE ); θopt),

(2)

for some ﬁxed number of steps t ∈ [1, T ], where θopt are
hyper-parameters of the optimization strategy and ˜y(0) is an
initial proposal. For example, basic gradient-descent with
learning rate η is implemented as

f(˜y, E(˜y; x, θE ); η) = ˜y − η∇˜yE.

(3)

In this investigation we also considered gradient-descent
with momentum and gradient-clipping, where the momen-
tum term and clip value were trained as part of θopt.

Figure 1: Unrolled optimization involves iteratively updat-
ing a proposed value ˜y(t) to minimize some energy function
E according to an update step f. Parameters of E and f (blue)
are learned in the outer optimization process.

This process is illustrated in Figure 1. We refer to this
scheme as unrolled gradient descent or inner optimization.
To train our network we use a loss λ made up of a
weighted sum of losses applied to all steps of the optimiza-
tion process,

λ =

T
∑
t=0

ˆλ (˜y(t)

, y).

(4)

where kt is a scalar weighting value, y is the example label
and ˆλ is some per-proposal loss function dependent on the
problem. In all experiments we use exponential weighting
kt = 0.9T −t .

Assuming E and f are piecewise-doubly-differentiable
and λ0 is piecewise differentiable, the parameters θE and
θopt can be learned using any standard optimization strategy
referred to as the outer optimizer. For brevity, we drop the
parameters θE and θopt in equations and diagrams hereafter.
To summarise, our inverse graphics energy networks

(IGE-Net) are made up of:

• a feature extractor module that provides a (possibly

empty) set of features as well as an initial estimate;

• an energy module which reduces a proposed solution

and observed features to a scalar value; and

• an inner optimization strategy.

5. Human Pose Estimation

×2) to 3D (y ∈ RNJ3

We begin by considering the problem of lifting human
×3).
joint information from 2D (x ∈ RNJ2
Note we do not require the number of joints to be the same,
nor do we require any known correspondences between the
two sets. This allows us to pair 2D inferences from a model
trained on one dataset with 3D pose data with different joint
annotations.

Recent progress in this area has resulted in a number of
algorithms performing very well on standard benchmarks,
split on accuracy metrics by a matter of millimeters. For
many applications, such error rates are well and truly satis-
factory, so we approach this problem with the aim to mini-
mize memory requirements and computational costs – fac-
tors more important in areas such as mobile robotics and
autonomous systems – while maintaining reasonable accu-
racy.

We also limit our methods to perform well as deﬁned by
scale-invariant metrics. While scale can be learned based
on contextual information, errors in scale inference tend to
drown-out those associated with relative positions.

5.1. Network Structure

We base our feature extractor module on the work of
Martinez et al. [33]. The proposed network is made up of
two residual blocks each containing two dense layers along
with an input and output layer for a total of six, as well
as batch normalization, rectiﬁed linear activations, weight
clipping, residual connections and dropout. While this net-
work is small by modern standards, we reduce it further by
removing one of the internal blocks and dropping the num-
ber of units in each remaining inner layer by a factor of 8.
This reduces the number of trainable parameters by roughly
a factor of 100. Since our losses and evaluation are scale-
agnostic, we also remove the weight clipping.

We consider an energy function E as the combination of

a reprojection energy Ex and a feasibility energy Ey,

E(˜y; x) = Ex (˜x(˜y); x) + Ey(˜y),

(5)

where ˜x(˜y) is the projection of the proposed solution. We
assume the intrinsic camera parameters are known, and in-
fer 3D poses in the camera’s reference frame.

Each energy function makes use of pairwise squared eu-

clidean distances similar to Moreno-Noguer [34],

i j(z) = ||zi − z j||2
∆2

2, j > i,

(6)

where z is an ordered set of points in RN . This transforma-
tion has many desirable properties, including invariance to
rotation, translation and reﬂection. Unlike Moreno-Noguer,
we use the squared distance rather than the actual differ-
ence, as this avoids a square root operation causes problems
with gradients near zero.

7077

Figure 2: For lifting 2D pose information to 3D, we split
the energy into 2 parts: a reprojection loss Ex which mea-
sures how consistent the projected proposed pose is with the
observed 2D information, and a feasibility loss Ey which
operates on the normalized proposed pose.

We parameterize our reprojection loss as a 2-layer dense
In-
network DNx with a softplus and softabs activation.
puts are given by the pairwise squared distances between
all points in x and ˜x, i.e.

Ex(˜x; x) = DNx �∆2(˜x ⊕ x)� ,

(7)

where ⊕ is the concatenation operator along the joint di-
mension.

While a perfect proposal will yield a perfect reprojection
(˜y = y ⇒ ˜x = x), the reverse implication does not hold. As
the name suggests, the feasibility energy Ey is intended to
promote feasible proposals independently of the appearance
˜x. To make this scale-invariant, we normalize the proposed
pose ˆy = N(˜y) by dividing by the distance between the hip
joints, then consider the pairwise squared distances,

Ey(˜y) = DNy(∆2(ˆy)).

(8)

This energy architecture is illustrated in Figure 2.
To train our model, we use a per-step outer loss function

ˆλ (˜y(t)

, y) = ||k ˜y(t) − y||2,

(9)

where k is the optimal scaling factor with respect to the
squared error.

5.2. Implementation Details

We pretrain our initial pose estimation network indepen-
dently for 200 epochs with a batch size of 64 as per the
original [33].

For our inner loss networks, we initialized the hidden
layer weights using Glorot initialization [16], and the loss
layer weights with a version scaled down by 10−3. This re-
sulted in the inner optimizer starting with little effect and
growing, which smooths learning in the very early stages.
We used the same learning-rate decay schedule as Martinez
et al. [33] except with initial learning rate lowered by a fac-
tor of 10 and training to convergence.

We initialize our inner optimizer’s learning rate, gradient
clip value and momentum at 1, 1 and 0.1 respectively. To

prevent negative momentum early due to spurious gradients
in the initial loss function, we used the absolute value of a
learned parameter rather than the learned parameter itself.

We run experiments on the popular Human 3.6 million
(H3M) dataset [19]. We use 2D pose inferences provided
by Martinez et al. [33] which come from stacked hourglass
networks of Newell et al. [35]: one trained entirely on var-
ied 2D poses in-the-wild, and another ﬁne tuned on H3M.
We also experiment with ground-truth 2D poses. All train-
ing and evaluation uses inputs with the 16 joints used in
COCO [30], and infer a slightly different set of 16 joints
in 3D. Evaluation is on a 17-joint skeleton with additional
pelvis joint as per Martinez et al. [33]. We train on subjects
1, 5, 6, 7 and 8 and evaluate on subjects 9 and 11.

5.3. Results

Sample results for our 2-step network trained on 2D
ground-truth inputs are shown in Figure 3. We see the net-
work learns to reconcile inconsistent 2D data in a single
step. The subsequent step has a smaller impact, but still
makes minor adjustments to the 3D pose without losing
consistency with the observation.

Figure 3: Camera view (top) and novel view (bottom) of
inferred pose (solid) and ground truth (dotted) after 0, 1 and
2 steps. Note the observed 2D pose (dotted, top) has one
fewer joints in the head. The model uses camera view 2D
joint coordinates (top, dotted) as inputs.

We evaluate our models using two metrics: the mean per-
joint error after scaling as per Equation 9, and the per-joint
error after an optimal rigid body transformation. We refer to
these as Protocol 1a and Protocol 2 respectively (Martinez
et al. [33] deﬁne Protocol 1 to be a slightly different metric.
It is largely analogous in meaning to our Protocol 1a, though
not equivalent).

We begin analysis by looking at performance of our net-
works using ground truth 2D poses with different numbers
of inner optimizer steps. We compare against different ver-
sions of the base model without the IGE component by
varying the number of residual blocks as well as the number
of hidden units in each layer. Protocol 2 results are shown
in Figure 4.

Our IGE networks can achieve competitive results in
a handful of steps, with performance comparable to the
full base model with signiﬁcantly few operations. Unlike
the baseline, our networks also have a constant number of

7078

IGE
Base1
Base2

70

60

50

40

)

m
m

(

2

l

o
c
o
o
r
P

t

105

106

Multiply adds

Figure 4: Protocol 2 scores (lower is better) and the num-
ber of multiply-adds due to dense layers in inference. Base
model values are for networks with (left-to-right) 128, 256,
512 and 1024 units in each dense layer and 1 (red) or 2
(blue) residual blocks. IGE values (black) are for (left-to-
right) 0, 1, 2, 4, 6 and 8, 12 and 16 steps. The size of
each dot represents the number of trainable parameters of
the model.

2D source
Mart. [33]
Base 1024/2
IGE4
IGE8

Protocol 1a

Protocol 2

SH

-

79.0
75.1
72.8

FT
-

75.1
67.8
66.0

GT

-

61.6
45.1
42.6

SH
52.5
52.2
56.1
55.1

FT
47.7
47.9
51.5
50.5

GT
37.1
35.8
39.4
37.7

Table 1: Average Protocol 1a/Protocol 2 scores for infer-
ences based on stacked hourglass detections (SH), ﬁne-
tuned stacked hourglass detections (FT) and ground truth
projections (GT). Baseline models had 1024 hidden units
and 2 residual blocks. IGE networks were trained for 4 and
8 steps. Lower is better.

trained parameters, resulting in a signiﬁcantly smaller mem-
ory footprint.

Results for experiments based on inferred 2D poses are
shown in Table 1. Interestingly, our baseline method ap-
pears to overﬁt certain displacements, resulting in a rela-
tively high Protocol 1a loss, though achieves a loss consis-
tent with Martinetz et al. after optimal translation. Our IGE
network performs slightly worse than Martinez et al. on in-
ferred detections, though given the reduced computational
and memory burden we believe this would be an acceptable
trade-off in many scenarios.

6. Single View 3D Object Reconstruction

For the problem of 3D object reconstruction we param-
eterize shapes as voxel occupancy grids and seek a method
that will scale well to high resolutions.

6.1. Energy Formulation

Theoretically, the approach of separating reprojection
and feasibility losses can be applied to object reconstruc-

Figure 5: Energy function for single view reconstruction.

tion by comparing silhouettes and using some 3D con-
volutional encoder respectively. However, initial experi-
ments showed this approach suffered from a number is-
sues. These included issues with formulating projections
of continuous-valued proposed solutions and scaling issues
associated with the cubic nature of the grid.

Instead, we propose a very different energy function for-
mulation for single view reconstruction. We consider the in-
ner optimizer input x to be the progressive outputs of some
2D convolutional network with NC output feature-banks of
different resolutions x = {x1, x2, · · · , xNC }.

We consider an energy function made up of the sum of
energy functions at each resolution. For each image feature
map xi of shape (hi, wi, fi) we consider a voxel grid in the
camera’s viewing frustum ¯yi of shape (hi, wi, di) by averag-
ing the proposed voxel grid values in world coordinates ˜y
over the frustum voxel volumes. Our energy function seeks
to learn the consistency between all voxels values along a
ray and the image features of the associated pixel,

E(˜y; x) = ∑
i

CNNi(xi ⊕ ¯yi),

(10)

where concatenation is along the feature dimension and
CNNi is some short 2D convolutional neural network.

By setting the depth of the averaged frustum voxel grid
di and the number of ﬁlters in each layer of CNNi to be
proportional to the number of image features fi, and assum-
ing those image features roughly double in depth as they
halve in spatial resolution, we ensure the number of oper-
ations at each image resolution is the same. This allows
for much better resolution scaling than typical 3D convolu-
tion/deconvolution networks.

In practice, averaging a voxel grid in world coordinates
over voxels corresponding to a frustum grid is a non-trivial
operation and must be done at each step and resolution of
the inner optimizer across all examples. Instead, we trans-
form the labels of our dataset into the frustum space in a
preprocessing step. During inference, the proposed solu-
tion ˜y is a voxel grid in frustum coordinates which is av-
erage pooled anisotropically with different pool sizes for
each image resolution. This means only the average pool-

7079

ing must be done at each inner optimization step and res-
olution. Although this pooling operation still scales pro-
portionally to the number of voxels and inner optimization
steps (O(T N3)), GPU pooling implementations are rela-
tively fast and the operation introduces no additional pa-
rameters.

While this means our method requires knowledge of the
intrinsic camera parameters, we argue the choice of frame is
arbitrary. Our method does not explicitly use the pose of the
camera in its inference, and while the dataset transforma-
tion discussed above results in a slightly different problem
compared to other approaches in the literature, we do not
believe this puts us at an unfair advantage. On the contrary,
the transformation results in a more varied dataset, and we
demonstrate experimentally that traditional approaches per-
form slightly worse in this environment.

Our energy architecture is illustrated in Figure 5.

6.2. Outer Loss

For training, we experimented with two different per-
step outer losses. Firstly, we consider an α-balanced focal
loss [29] based on cross-entropy,

tion, which was a 3 × 3 followed by a 2 × 2, with softplus
and softabs activations.

Our inner optimizer used a learned learning rate and gra-
dient clip value. We observed no signiﬁcant difference with
momentum, so did not include it in experiments.

We used a base-line 3D deconvolutional network for
low-resolution comparison (323) similar to the initial esti-
mate network, except we doubled the number of features to
keep the number of trained parameters comparable.

An overview of feature sizes and parameter counts is
given in Table 2. Additional details and network diagrams
are provided in the supplementary material.

Image Encoder

3D Decoder

Image Decoder

Inner-loop CNN

Inner Optimizer
Total

Output size
Parameters
Initial size
Parameters
Initial size
Parameters
Initial size
Parameters
Parameters
Parameters

Base

MN2
1280

I4

1536

2, 223, 872
43 × 128
2, 656, 113

54, 276, 192

43 × 512

14, 159, 297

-
-
-
-
-

-
-
-
-
-

IGE

MN2

42 × 320
1, 811, 712

43 × 64
238, 009
42 × 128
140, 992
42 × 256
1, 109, 840

I4

42 × 1536
54, 276, 192

43 × 256
3, 802, 849
42 × 512
2, 928, 384
42 × 1024
16, 573, 760

2

2

4, 879, 985

68, 435, 489

3, 300, 555

77, 581, 187

ˆλCE (˜y, y) = −∑

[yv(1 − ˜yv)γ (1 + α) log( ˜yv)+

v

(1 − yv) ˜yγ

v(1 − α) log(1 − ˜yv)],

(11)

Table 2: Network speciﬁcation summary. Parameter counts
are for 323 networks – Image decoder and inner-loop CNN
parameter counts increase negligibly for higher resolutions.

where summation is over all voxels v. This is a general-
ization of standard cross-entropy (which is recovered by
setting γ = α = 0) designed to alleviate issues with class
imbalance. α ∈ (0, 1) results in additional focus on pos-
itive examples, while γ > 0 results in reduced focus on
easy examples like those associated with the outside (usu-
ally empty) or very center (usually ﬁlled) of the voxel grid.
Secondly, we experiment with a continuous intersection-
over-union implementation similar to that proposed by
Richter and Roth [39],

ˆλIoU (˜y, y) = 1 −

˜y · y

||˜y + y||1 − ˜y · y

.

(12)

6.3. Implementation Details

We experimented with two architectures: a small net-
work with encoder based on MobilenetV2 (MN) [42], and
another larger network based on Inception-V4 (I4) [44].

Image decoding networks built off the encoder network
following a typical U-Net architecture common in the lit-
erature [41, 32, 35]. For the initial estimate, we used the
output of a 3D deconvolution network based on the gener-
ator of Wu et al. [53] with one fewer layers, producing an
output of resolution 323. We then trilinearly upsampled to
the required resolution.

The inner-loop CNNs (CNNi) each consist of two 3 × 3
2D convolutions without padding except the lowest resolu-

6.4. Dataset

We conduct experiments on the 13 categories of the pop-
ular Shapenet dataset [6] popularized by Choy et al. [9].
Due to difﬁculties reconciling the rendering parameters, im-
ages and models supplied by the authors, we use our own
renderings and voxelizations. As per Choy et al. each model
was rendered from 24 different camera positions with az-
imuth angle uniformly sampled from [0◦
, 360◦) and eleva-
tion angle in [25◦

, 30◦] with resolution 128 × 128.

We created voxel grids by deﬁning any voxel intersected
by a face as ﬁlled. This means thin structures take up dis-
proportionately large volumes at low resolutions. This is
different to approaches which take a less strict approach
which may preserve a better overall volume ratio but risk
losing thin structures entirely. This difference can affect
low resolution grids signiﬁcantly, though the difference be-
comes insigniﬁcant at higher resolutions. After initial vox-
elization, grids were ﬁlled in consistent with the approach
used by Johnston et al. [23].

6.5. Results

Images of two of our models’ inferences are shown in
Figure 6 – our smaller model trained with α-balanced cross-
entropy loss and the larger model with continuous IoU. Un-
surprisingly both models learn to space-carve very well,
featuring virtually no voxels along rays that miss the ob-
ject. The IoU-trained model appears to be more conserva-

7080

Frustum Dataset

IGE

Base

Base

World Aligned Dataset

plane
bench
cabinet
car
telephone
chair
sofa
riﬂe
lamp
monitor
speaker
table
watercraft
mean

MN
59.6
52.4
73.6
78.4
69.9
57.0
69.6
60.6
54.0
58.8
74.5
57.4
61.9
63.7

I4 MN
49.2
47.3
70.6
74.2
65.4
52.4
65.9
47.8
47.5
53.5
72.4
52.9
55.5
58.0

62.4
55.2
74.9
79.9
72.2
60.1
71.2
62.6
56.5
60.7
76.5
60.6
64.0
65.9

IF
50.2
47.9
71.3
73.5
64.5
53.6
66.8
50.0
50.1
55.4
72.8
54.3
56.6
59.0

MN
55.0
52.8
72.1
77.2
70.9
55.0
66.7
55.0
48.7
54.7
70.6
57.8
54.8
60.8

I4

62.6
58.1
74.9
76.9
70.3
60.7
69.8
60.2
50.8
60.0
72.4
61.0
60.0
64.4

R2N2 [9] OGN [45] Mat. [39]

51.3
42.1
71.6
79.8
66.1
46.6
62.8
54.4
38.1
46.8
66.2
51.3
51.3
56.0

58.7
48.1
72.9
81.6
70.2
48.3
64.6
59.3
39.8
50.2
63.7
53.6
63.0
59.5

64.7
57.7
77.6
85.0
75.6
54.7
68.1
61.6
40.8
53.2
70.1
57.3
59.1
63.5

Table 3: IoU values (in %) at 323 resolutions. IGE mod-
els was trained with continuous IoU loss from Equation 12.
Mean values are calculated by class. A single model was
trained across all categories for each of our columns.

tive when it comes to thin-structures, while the α-balanced
model inferences often display slight shadowing along rays.
This often results in more realistic looking inferences de-
spite a lower average IoU score.

Quantitatively, we ﬁrst investigate the performance of
the models and effect of the frustum grid at 323 resolutions.
We compare against R2N2 [9] – a standard benchmark –
along with other approaches designed for high resolution in-
ference: Octree-Generation Network (OGN) [45] and Ma-
tryoshka networks (Mat.) [39].

Intersection-over-union (IoU) values are shown in Table
3. Baseline models trained on the world-aligned grid con-
sistently out-perform those trained on the frustum grid by
a small margin. This suggests the patterns present in the
frustum dataset are harder to learn than those in the regu-
lar dataset. This is not surprising, as there is signiﬁcantly
more variety in the frustum voxel grid dataset (1 grid per
view, rather than 1 grid per model). For example, almost
all planes in the world-aligned dataset have long fuselages
and angled wings. A model that learns to identify planes
could do reasonably well at low resolutions by simply infer-
ring the class average rather than taking into account ﬁne-
level detail. To do similarly well on the frustum dataset, the
model would need to additionally infer the camera position
and learn to transform the average grid values accordingly.

While this means subsequent comparison to other meth-
ods trained on world-aligned grids is not truly fair, we in-
clude their results anyway. We believe this is more infor-
mative than only using self-comparisons so long as they are
intepreted with this disclaimer in mind.

Our multi-level optimization approach clearly out-
performs the baseline on the same dataset across all cat-
egories and both image networks. It also out-performs the
base method on the easier world-aligned dataset, along with
all other competing methods considered on average.

IGE-MN

cont. IoU α = γ = 0 α = 0.7

323
643
1283

63.5
61.5
58.9

60.7
56.8
51.6

58.0
57.1
54.5

IGE-I4

γ = 2
59.8
56.9
53.9

cont. IoU α = γ = 0 α = 0.7

66.0
64.7
62.2

61.9
60.8
56.4

59.6
59.3
56.8

γ = 2
64.0
59.3
57.1

Table 4: Mean IoU (in %, averaged over categories) for our
IGE models trained with different losses.

car

plane

table

Resolution
OGN1 [45]
MAT1 [39]
IGE-MN13
IGE-I413
IGE-MN1
IGE-I41

32
64.1
68.3
57.8
57.9
57.0
58.4

64
77.1
78.4
68.8
70.9
70.3
71.2

128
78.2
79.4
72.8
74.0
76.2
76.5

256
76.6
79.6
73.3
75.2
75.2
76.5

32
-

36.7
29.6
30.5
30.7
30.1

64
-

48.8
44.8
47.8
47.9
49.2

128

256

-

58.0
52.9
57.5
58.7
60.5

-

59.6
54.4
57.3
58.1
62.0

32
-

38.6
33.6
34.8
33.6
35.0

64
-

42.3
44.0
46.5
45.9
46.4

128

256

-

43.5
47.8
52.7
50.6
52.2

-

41.3
48.2
50.5
50.2
52.1

Table 5: Mean IoU (in %) trained at difference resolutions
and evaluated at 2563 for models trained across all cate-
gories (13) and per-category (1). Per-category break-down
of 13-category models available in supplementary.

Unsurprisingly, our

larger model out-performs the
smaller one in all categories, regardless of the model ar-
chitecture.

To better understand the effect of the loss functions in-
volved, we trained models at various resolutions with con-
tinous IoU loss compared to models trained with different
versions of Equation 11: base cross entropy (α = 0, γ = 0),
reweighted cross entropy (α = 0.7, γ = 0) and focal loss
(α = 0, γ = 2). Results are provided in Table 4.

Continuous IoU loss gives superior metrics scores to
all variations of cross-entropy. There is no clear winner
amongst cross-entropy variants.

Finally, we consider how our continuous IoU model per-
forms at resolution of 2563. Results for models trained at
different resolutions and then linearly interpolated are given
in Table 5. We trained a single model on all 13 categories, as
well as a separate model for each of cars, planes and tables
for fair comparison with other work.

Our networks all perform comparably on cars and
planes, with our larger network performing slightly bet-
ter, and category-speciﬁc training also improving things
slightly. We signiﬁcantly out-perform other methods on the
table category, where the space-carving ability of our net-
work can extract high-precision corners and edges and ac-
curately reconstruct many thin structures.

Poor performance of low resolution models when evalu-
ated at high resolutions is clear for our models. We attribute
this to the large change in the volume of these structures as
resolution increases as a result of our voxelization strategy.
A small performance regression is observed going from
1283 to 2563 in most experiments on our 13-category mod-
els. This is consistent with the observation made in OGN
[45], who demonstrate that training on a more limited
dataset results in improved performance with resolution,
while more varied datasets are hindered by increased res-

7081

Figure 6: Sample results for IGE-MN model trained with α = 0.7 loss @ 1283 resolution and IGE-I4 model trained with
continuous IoU @ 2563. For each block of 6, top row: (left) input image, (middle) inference (blue) projected ground truth
silhouettes (gray), (right) same as middle except I4 network trained with cont. IoU loss. Bottom row: (left) ground truth
object, (middle) MN inference, (right) I4 inference.

olution. Unlike OGN, our regression occurs when training
on the cross-category dataset, where as theirs is apparent
training on the cars dataset.

7. Conclusion

We have demonstrated energy-based multi-level opti-
mization networks can take advantage of computer graphics
principles to infer 3D information from 2D inputs. Our hu-

man pose dimension-lifting model performed comparably
to networks with orders of magnitude mode parameters and
with a fraction of the number of operations. We investigated
two 3D reconstruction networks, and showed competitive
results could be achieved with a relatively small network,
and a larger network could out-perform other state-of-the-
art high-resolution networks.

This research was supported by the Australian Research

Council through the grant ARC FT170100072.

7082

References

[1] B. Amos and J. Z. Kolter. Optnet: Differentiable opti-
arXiv preprint

mization as a layer in neural networks.
arXiv:1703.00443, 2017. 2

[2] D. Belanger and A. McCallum. Structured prediction energy
networks. In International Conference on Machine Learn-
ing, pages 983–992, 2016. 2

[3] D. Belanger, B. Yang, and A. McCallum. End-to-end learn-
ing for structured prediction energy networks. In Proceed-
ings of the 34th International Conference on Machine Learn-
ing - Volume 70, ICML’17, pages 429–439. JMLR.org, 2017.
2

[4] F. Bogo, A. Kanazawa, C. Lassner, P. Gehler, J. Romero,
and M. J. Black. Keep it smpl: Automatic estimation of 3d
human pose and shape from a single image.
In European
Conference on Computer Vision, pages 561–578. Springer,
2016. 2

[5] Z. Cao, T. Simon, S.-E. Wei, and Y. Sheikh. Realtime multi-
person 2d pose estimation using part afﬁnity ﬁelds. In CVPR,
2017. 2

[6] A. Chang, T. Funkhouser, L. Guibas, P. Hanrahan, Q. Huang,
Z. Li, S. Savarese, M. Savva, S. Song, H. Su, et al.
Shapenet: An information-rich 3d model repository., corr
abs/1512.03012. URL http://arxiv. org/abs/1512.03012. 6

[7] C.-H. Chen and D. Ramanan. 3d human pose estimation=
2d pose estimation+ matching. In CVPR, volume 2, page 6,
2017. 2

[8] I. Cherabier, C. H¨ane, M. R. Oswald, and M. Pollefeys.
Multi-label semantic 3D reconstruction using voxel blocks.
In 3DV, 2016. 2

[9] C. B. Choy, D. Xu, J. Gwak, K. Chen, and S. Savarese. 3d-
r2n2: A uniﬁed approach for single and multi-view 3d object
reconstruction. In European conference on computer vision,
pages 628–644. Springer, 2016. 2, 6, 7

[10] X. Chu, W. Ouyang, H. Li, and X. Wang. Structured feature
learning for pose estimation.
In Proceedings of the IEEE
Conference on Computer Vision and Pattern Recognition,
pages 4715–4723, 2016. 2

[11] X. Chu, W. Yang, W. Ouyang, C. Ma, A. L. Yuille, and
X. Wang. Multi-context attention for human pose estima-
tion. In Proceedings of the IEEE Conference on Computer
Vision and Pattern Recognition, pages 1831–1840, 2017. 2

[12] J. Deng, W. Dong, R. Socher, L.-J. Li, K. Li, and L. Fei-
Fei.
Imagenet: A large-scale hierarchical image database.
In Computer Vision and Pattern Recognition, 2009. CVPR
2009. IEEE Conference on, pages 248–255. Ieee, 2009. 11

[13] J. Domke. Generic methods for optimization-based model-
ing. In Artiﬁcial Intelligence and Statistics, pages 318–326,
2012. 2

[14] H. Fan, H. Su, and L. J. Guibas. A point set generation net-
work for 3D object reconstruction from a single image. In
CVPR, 2017. 2

[15] R. Girdhar, D. F. Fouhey, M. Rodriguez, and A. Gupta.
Learning a predictable and generative vector representation
for objects. In ECCV, 2016. 2

[16] X. Glorot and Y. Bengio. Understanding the difﬁculty of
training deep feedforward neural networks. In Proceedings

of the thirteenth international conference on artiﬁcial intel-
ligence and statistics, pages 249–256, 2010. 4, 11

[17] J. Gwak, C. B. Choy, A. Garg, M. Chandraker, and
S. Savarese. Weakly supervised generative adversarial net-
works for 3D reconstruction. In 3DV, 2017. 2

[18] C. H¨ane, S. Tulsiani, and J. Malik. Hierarchical surface pre-

diction for 3D object reconstruction. In 3DV, 2017. 2

[19] C. Ionescu, D. Papava, V. Olaru, and C. Sminchisescu.
Human3. 6m: Large scale datasets and predictive meth-
ods for 3d human sensing in natural environments.
IEEE
transactions on pattern analysis and machine intelligence,
36(7):1325–1339, 2014. 2, 4

[20] D. J. Rezende, S. M. A. Eslami, S. Mohamed, P. Battaglia,
M. Jaderberg, and N. Heess. Unsupervised learning of 3D
structure from images. In NIPS, 2016. 2

[21] D. Jack, F. Maire, A. Eriksson, and S. Shirazi. Adversarially
parameterized optimization for 3d human pose estimation.
In 3D Vision (3DV), 2017 Fifth International Conference on.
IEEE, 2017. 2

[22] D. Jack, J. K. Pontes, S. Sridharan, C. Fookes, S. Shi-
razi, F. Maire, and A. Eriksson. Learning free-form de-
formations for 3d object reconstruction.
arXiv preprint
arXiv:1803.10932, 2018. 2

[23] A. Johnston, R. Garg, G. Carneiro, I. D. Reid, and A. van den
Hengel. Scaling cnns for high resolution volumetric recon-
struction from a single image.
In ICCV Workshops, pages
930–939, 2017. 2, 6

[24] A. Kar, C. H¨ane, and J. Malik. Learning a multi-view stereo

machine. In NIPS, 2017. 2

[25] D. P. Kingma and J. Ba. Adam: A method for stochastic

optimization. arXiv preprint arXiv:1412.6980, 2014. 11

[26] A. Kurenkov, J. Ji, A. Garg, V. Mehta, J. Gwak, C. B. Choy,
and S. Savarese. DeformNet: Free-form deformation net-
work for 3d shape reconstruction from a single image. vol-
ume abs/1708.04672, 2017. 2

[27] Y. LeCun, S. Chopra, R. Hadsell, M. Ranzato, and F. Huang.
A tutorial on energy-based learning. Predicting structured
data, 1(0), 2006. 1, 2

[28] C.-H. Lin, C. Kong, and S. Lucey. Learning efﬁcient point
In

cloud generation for dense 3D object reconstruction.
AAAI, 2018. 2

[29] T.-Y. Lin, P. Goyal, R. Girshick, K. He, and P. Doll´ar.
arXiv preprint

loss for dense object detection.

Focal
arXiv:1708.02002, 2017. 6

[30] T.-Y. Lin, M. Maire, S. Belongie, J. Hays, P. Perona, D. Ra-
manan, P. Doll´ar, and C. L. Zitnick. Microsoft coco: Com-
mon objects in context. In European conference on computer
vision, pages 740–755. Springer, 2014. 2, 4

[31] J. Liu, F. Yu, and T. A. Funkhouser. Interactive 3D modeling

with a generative adversarial network. In 3DV, 2017. 2

[32] J. Long, E. Shelhamer, and T. Darrell. Fully convolutional
networks for semantic segmentation. In Proceedings of the
IEEE conference on computer vision and pattern recogni-
tion, pages 3431–3440, 2015. 6

[33] J. Martinez, R. Hossain, J. Romero, and J. J. Little. A simple
yet effective baseline for 3d human pose estimation. In Inter-
national Conference on Computer Vision, volume 1, page 5,
2017. 2, 3, 4, 5

7083

[34] F. Moreno-Noguer. 3d human pose estimation from a single
image via distance matrix regression.
In Computer Vision
and Pattern Recognition (CVPR), 2017 IEEE Conference on,
pages 1561–1570. IEEE, 2017. 3

[35] A. Newell, K. Yang, and J. Deng. Stacked hourglass net-
works for human pose estimation. In European Conference
on Computer Vision, pages 483–499. Springer, 2016. 2, 4, 6
[36] C. R. Qi, H. Su, K. Mo, and L. J. Guibas. PointNet: Deep
learning on point sets for 3D classiﬁcation and segmentation.
In CVPR, 2017. 2

[49] P.-S. Wang, Y. Liu, Y.-X. Guo, C.-Y. Sun, and X. Tong. O-
CNN: Octree-based convolutional neural networks for 3D
shape analysis. In SIGGRAPH, 2017. 2

[50] S.-E. Wei, V. Ramakrishna, T. Kanade, and Y. Sheikh. Con-
volutional pose machines. In Proceedings of the IEEE Con-
ference on Computer Vision and Pattern Recognition, pages
4724–4732, 2016. 2

[51] J. Wu, Y. Wang, T. Xue, X. Sun, W. T. Freeman, and J. B.
Tenenbaum. MarrNet: 3D Shape Reconstruction via 2.5D
Sketches. In NIPS, 2017. 2

[37] C. R. Qi, H. Su, M. Nießner, A. Dai, M. Yan, and L. J.
Guibas. Volumetric and multi-view CNNs for object clas-
siﬁcation on 3D data. In CVPR, 2016. 2

[52] J. Wu, T. Xue, J. J. Lim, Y. Tian, J. B. Tenenbaum, A. Tor-
ralba, and W. T. Freeman. Single image 3D interpreter net-
work. In ECCV, 2016. 2

[53] J. Wu, C. Zhang, T. Xue, B. Freeman, and J. Tenenbaum.
Learning a probabilistic latent space of object shapes via 3d
generative-adversarial modeling. In Advances in Neural In-
formation Processing Systems, pages 82–90, 2016. 2, 6
[54] Z. Wu, S. Song, A. Khosla, X. Tang, and J. Xiao.

3D
ShapeNets: A deep representation for volumetric shapes. In
CVPR, 2015. 2

[55] X. Yan, J. Yang, E. Yumer, Y. Guo, and H. Lee. Perspec-
tive transformer nets: Learning single-view 3D object recon-
struction without 3D supervision. In NIPS, 2016. 2

[56] W. Yang, W. Ouyang, X. Wang, J. Ren, H. Li, and X. Wang.
3d human pose estimation in the wild by adversarial learning.
In Proceedings of the IEEE Conference on Computer Vision
and Pattern Recognition, volume 1, 2018. 2

[57] Y. Yang, C. Feng, Y. Shen, and D. Tian. Foldingnet: Point
cloud auto-encoder via deep grid deformation. In Proc. IEEE
Conf. on Computer Vision and Pattern Recognition (CVPR),
volume 3, 2018. 2

[58] Y. Yang and D. Ramanan. Articulated pose estimation with
ﬂexible mixtures-of-parts.
In Computer Vision and Pat-
tern Recognition (CVPR), 2011 IEEE Conference on, pages
1385–1392. IEEE, 2011. 2

[59] S. Zheng, S. Jayasumana, B. Romera-Paredes, V. Vineet,
Z. Su, D. Du, C. Huang, and P. H. Torr. Conditional ran-
dom ﬁelds as recurrent neural networks. In Proceedings of
the IEEE international conference on computer vision, pages
1529–1537, 2015. 1

[60] R. Zhu, H. K. Galoogahi, C. Wang, and S. Lucey. Rethinking
reprojection: Closing the loop for pose-aware shape recon-
struction from a single image. In NIPS, 2017. 2

[38] C. R. Qi, L. Yi, H. Su, and L. J. Guibas. PointNet++: Deep
hierarchical feature learning on point sets in a metric space.
In NIPS, 2017. 2

[39] S. R. Richter and S. Roth. Matryoshka networks: Predicting
3d geometry via nested shape layers. In Proceedings of the
IEEE Conference on Computer Vision and Pattern Recogni-
tion, pages 1936–1944, 2018. 2, 6, 7

[40] G. Riegler, A. O. Ulusoy, and A. Geiger. OctNet: Learning
deep 3D representations at high resolutions. In CVPR, 2017.
2

[41] O. Ronneberger, P. Fischer, and T. Brox. U-net: Convo-
lutional networks for biomedical image segmentation.
In
International Conference on Medical image computing and
computer-assisted intervention, pages 234–241. Springer,
2015. 6

[42] M. Sandler, A. Howard, M. Zhu, A. Zhmoginov, and L.-C.
Chen. Mobilenetv2: Inverted residuals and linear bottle-
necks. In Proceedings of the IEEE Conference on Computer
Vision and Pattern Recognition, pages 4510–4520, 2018. 6,
11

[43] A. Sharma, O. Grau, and M. Fritz. VConv-DAE: Deep vol-
In ECCVW,

umetric shape learning without object labels.
2016. 2

[44] C. Szegedy, S. Ioffe, V. Vanhoucke, and A. A. Alemi.
Inception-v4, inception-resnet and the impact of residual
connections on learning. In AAAI, volume 4, page 12, 2017.
6

[45] M. Tatarchenko, A. Dosovitskiy, and T. Brox. Octree gen-
erating networks: Efﬁcient convolutional architectures for
high-resolution 3d outputs.
In Proc. of the IEEE Interna-
tional Conf. on Computer Vision (ICCV), volume 2, page 8,
2017. 2, 7

[46] S. Tulsiani, A. A. Efros, and J. Malik. Multi-view con-
sistency as supervisory signal for learning shape and pose
prediction.
In Computer Vision and Pattern Regognition
(CVPR), 2018. 2

[47] H.-Y. F. Tung, A. W. Harley, W. Seto, and K. Fragkiadaki.
Adversarial inverse graphics networks: Learning 2d-to-3d
lifting and image-to-image translation from unpaired super-
vision. In Proceedings of the IEEE International Conference
on Computer Vision (ICCV’17), volume 2, 2017. 2

[48] A. O. Ulusoy, A. Geiger, and M. J. Black. Towards prob-
In

abilistic volumetric reconstruction using ray potential.
3DV, 2015. 2

7084

