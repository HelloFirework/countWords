Recurrent Neural Network for (Un-)supervised Learning of Monocular Video

Visual Odometry and Depth

Rui Wang, Stephen M. Pizer, Jan-Michael Frahm

University of North Carolina at Chapel Hill

Abstract

Deep learning-based,

single-view depth estimation
methods have recently shown highly promising results.
However, such methods ignore one of the most important
features for determining depth in the human vision sys-
tem, which is motion. We propose a learning-based, multi-
view dense depth map and odometry estimation method that
uses Recurrent Neural Networks (RNN) and trains utilizing
multi-view image reprojection and forward-backward Ô¨Çow-
consistency losses. Our model can be trained in a super-
vised or even unsupervised mode. It is designed for depth
and visual odometry estimation from video where the in-
put frames are temporally correlated. However, it also gen-
eralizes to single-view depth estimation. Our method pro-
duces superior results to the state-of-the-art approaches for
single-view and multi-view learning-based depth estimation
on the KITTI driving dataset.

1. Introduction

The tasks of depth and odometry (also called ego-
motion) estimation are longstanding tasks in computer vi-
sion providing valuable information for a wide variety of
tasks, e.g. autonomous driving, AR/VR applications, and
virtual tourism.

Recently, convolutional neural networks (CNN) [20, 4,
8, 42, 32] have begun to produce results of comparable qual-
ity to traditional geometric computer vision methods for
depth estimation in measurable areas and achieve signiÔ¨Å-
cantly more complete results for ambiguous areas through
the learned priors. However, in contrast to traditional meth-
ods, most CNN methods treat depth estimation as a single
view task and thus ignore the important temporal informa-
tion in monocular or stereo videos. The underlying ratio-
nale of these single view depth estimation methods is the
possibility of human depth perception from a single im-
age. However, they neglect the fact that motion is actually
more important for the human to infer distance [28]. We
are constantly exposed to moving scenes, and the speed of
things moving in the image is related to the combination of

Figure 1: Example results from our method. The Ô¨Årst row shows
the source image. The second row illustrates the projection of the
source image into the target image. The third row shows the target
image. The fourth row illustrates the estimated depth map and the
last row illustrates the estimated optical Ô¨Çow.

their relative speed and effect inversely proportional to their
depth.

In this work, we propose a framework that simultane-
ously estimates the visual odometry and depth maps from a
video sequence taken by a monocular camera. To be more
speciÔ¨Åc, we use convolutional Long Short-Term Memory
(ConvLSTM) [35] units to carry temporal information from
previous views into the current frame‚Äôs depth and visual
odometry estimation. We have improved upon existing deep
single- and two-view stereo depth estimation methods by
interleaving ConvLSTM units with the convolutional layers
to effectively utilize multiple previous frames in each es-
timated depth maps. Since we utilize multiple views, the
image reprojection constraint between multiple views can
be incorporated into the loss, which shows signiÔ¨Åcant im-
provements for both supervised and unsupervised depth and
camera pose estimation.

In addition to the image reprojection constraint, we fur-
ther utilize a forward-backward Ô¨Çow-consistency constraint
[38]. Such a constraint provides additional supervision to
image areas where the image reprojection is ambiguous.
Moreover, it improves the robustness and generalizability
of the model. Together these two constraints can even al-

15555

low satisfactory models to be produced when groundtruth
is unavailable at training time. Figure 1 shows an example
of forward-backward image reprojection and optical Ô¨Çow as
well as the resulting predicted depth maps.

We summarize our innovations as follows: 1) An RNN
architecture for monocular depth and odometry estimation
that uses multiple consecutive views. It does so by incor-
porating LSTM units, as used in natural language process-
ing, into depth and visual odometry estimation networks.
2) These LSTM units importantly allow the innovation of
using depth and camera motion estimation to beneÔ¨Åt from
the richer constraints of a multi-view process.
In partic-
ular, they use multi-view image reprojection and forward-
backward Ô¨Çow-consistency constraints to produce a more
accurate and consistent model. 3) This design allows two
novel capabilities: a) it can be trained in both supervised
and unsupervised fashion; b) it can continuously run on ar-
bitrary length sequences delivering a consistent scene scale.
We demonstrate on the KITTI [10] benchmark dataset
that our method can produce superior results over the state-
of-the-art for both supervised and unsupervised training.
We will release source code upon acceptance.

2. Related work

Traditionally, the 3D reconstruction and localization are
mostly solved by pure geometric reasoning.
SfM and
SLAM are the two most prevalent frameworks for sparse
3D reconstruction of rigid geometry from images. SfM is
typically used for ofÔ¨Çine 3D reconstruction from unordered
image collections, while visual SLAM aims for a real-time
solution using a single camera [3, 26]. More recent works
on SLAM systems include ORB-SLAM [25] and DSO [5].
Sch¬®onberger and Frahm [30] review the state-of-the-art in
SfM and propose an improved incremental SfM method.

Recently, CNNs are increasingly applied to 3D recon-
struction, in particular, to the problem of 3D reconstruction
of dense monocular depth, which is similar to the segmen-
tation problem and thus the structure of the CNNs can be
easily adapted to the task of depth estimation [21].

Supervised methods. Eigen et al.

[4] and Liu et al.
[20] proposed end-to-end networks for single-view depth
estimation, which opened the gate for deep learning-based
supervised single-view depth estimation. Following their
[18] proposed a deeper residual net-
work, Laina et al.
[27] jointly predicted
work for the same task. Qi et al.
depth and surface normal maps from a single image. Fu et
al. [6] further improved the network accuracy and conver-
gence rate by learning it as an ordinal regression problem.
Li et al. [19] used modern structure-from-motion and multi-
view stereo (MVS) methods together with multi-view Inter-
net photo collections to create the large-scale MegaDepth
dataset providing improved depth estimation accuracy via
bigger training dataset size. We improve upon these single-

view methods by utilizing multiple views through an RNN
architecture to generate more accurate depth and pose.

Two-view or multi-view stereo methods have tradition-
ally been the most common techniques for dense depth es-
timation. For the interested reader, Scharstein and Szeliski
[29] give a comprehensive review on two-view stereo meth-
ods. Recently, Ummenhofer et al.
[32] formulated two-
view stereo as a learning problem. They showed that by
explicitly incorporating dense correspondences estimated
from optical Ô¨Çow into the two-view depth estimation, they
can force the network to utilize stereo information on top
of the single view priors. There is currently a very lim-
ited body of CNN-based multi-view reconstruction meth-
ods. Choy et al. [2] use an RNN to reconstruct the object in
the form of a 3D occupancy grid from multiple viewpoints.
Yao et al. [37] proposed an end-to-end deep learning frame-
work for depth estimation from multiple views. They use
differentiable homography warping to build a 3D cost vol-
ume from one reference image and several source images.
Kumar et al. [16] proposed an RNN architecture that can
learn depth prediction from monocular videos. However,
their simple training pipeline, e.g., no explicit temporal con-
straints, failed to explore the full capability of the network.
Our method is trained with more sophisticated multi-view
reprojection losses and can perform both single-view and
multi-view depth estimation.

Unsupervised methods. Recently, by incorporating el-
ements of view synthesis [43] and Spatial Transformer Net-
works [14], monocular depth estimation has been trained
in an unsupervised fashion. This was done by transform-
ing the depth estimation problem into an image reconstruc-
tion problem where the depth is the intermediate product
that integrates into the image reconstruction loss. Godard et
al.[11], and Garg et al.[8] use stereo pairs to train CNNs to
estimate disparity maps from single views. Luo et al. [22]
leverage both stereo and temporal constraints to generate
improved depth at known scale. Zhou et al. [42] further re-
lax the needs of stereo images to monocular video by com-
bining a single view depth estimation network with a multi-
view odometry estimation network. Following Zhou et al.
[42]‚Äôs work, Mahjourian et al. [23] further enforced con-
sistency of the estimated 3D point clouds and ego-motion
across consecutive frames.
In addition to depth and ego-
[38] also jointly learn optical Ô¨Çow in
motion, Yin et al.
an end-to-end manner which imposed additional geometric
constraints. However, due to scale ambiguity and the lack of
temporal constraints, these methods cannot be directly ap-
plied for full trajectory estimation on monocular videos. By
leveraging recurrent units, our method can run on arbitrary
length sequences delivering a consistent scene scale.

5556

Fully 
Convolutional 
LSTM 
network

Learning 
parameters with 
shared weights

Fully 
Convolutional 
LSTM 
network

Forward seq

Backward seq

Warped seq

DGM

Deptn & Pose

No learning parameters

Deptn & Pose

Forward flow

DGM

Backward flow

DGM

DGM

Warped seq

Pseudo-
forward flow

Pseudo-
backward flow

(a)

(b)

(c)

ùêøùëëùëíùëùùë°‚Ñé1
ùêøùëìùë§
ùêøùëìùëôùëúùë§ùëêùëúùëõùë†ùëñùë†ùë°1

Losses

ùêøùëìùëôùëúùë§ùëêùëúùëõùë†ùëñùë†ùë°2
ùêøùëèùë§
ùêøùëëùëíùëùùë°‚Ñé2

(d)

Figure 2: Training pipeline of our proposed RNN-based depth and visual odometry estimation network. During training our framework
takes forward and backward 10-frame subsequences as input and uses multi-view image reprojection, Ô¨Çow-consistency, and optionally
groundtruth depth to train our depth and visual odometry networks. DGM is a differentiable geometric module.

temporal information in the depth estimation. The spatial-
temporal features computed by the encoder are then fed into
the decoder for accurate depth map reconstruction. The ab-
lation study in Secion 4.5 conÔ¨Årms our choice for the place-
ments of the ConvLSTM [35] units. Table 1 shows the de-
tailed network architecture. The input to the depth estima-
tion network is a single RGB frame It and the hidden states
hd
t‚àí1 from the previous time-step (hd
t‚àí1 are initialized to be
all zero for the Ô¨Årst time-step). The hidden states are trans-
mitted internally through the ConvLSTM units. The output
of our depth estimation network are the depth map Zt and
the hidden states hd

t for the current time-step .

Our visual odometry network uses a VGG16 [31] ar-
chitecture with recurrent units interleaved. Table 2 shows
the detailed network architecture. The input to our visual
odometry network is the concatenation of It and Zt to-
gether with the hidden states hp
t‚àí1 from the previous time-
step. The output is the relative 6DoF camera pose Pt‚Üít‚àí1
between the current view and the immediately preceeding
view. The main differences between our visual odometry
network and most current deep learning-based visual odom-
etry methods are 1) At each time-step, instead of a stack
of frames, our visual odometry network only takes the cur-
rent image as input; the knowledge about previous frames is
in the hidden layers. 2) Our visual odometry network also
takes the current depth estimation as input, which ensures a
consistent scene scale between depth and camera pose (im-
portant for unsupervised depth estimation, where the scale
is ambiguous). 3) Our visual odometry network can run on a
full video sequence while maintaining a single scene scale.

5557

Figure 3: Overall network architecture of our RNN-based depth
and visual odometry estimation framework. The height of each
rectangle represents the size of its feature maps, where each
smaller feature map is half the size of the preceding feature map.

3. Method

In this section we introduce our method for multi-view
depth and visual odometry estimation. We Ô¨Årst describe our
recurrent neural network architecture and then the multi-
view reprojection and forward-backward Ô¨Çow-consistency
constraints for the network training.

3.1. Network Architecture

Our architecture, shown in Figure 3, is made up of two

networks, one for depth and one for visual odometry.

Our depth estimation network uses a U-shaped net-
work architecture similar to DispNet [24]. Our main inno-
vation is to interleave recurrent units into the encoder which
allows the network to leverage not only spatial but also

Conv LayerInput/OutputLSTM BlockDeconv LayerDepth estimation networkPose estimation networkOutput 6DoF PoseInput image & depthInput image Output depth ConcatenationType
Input
Conv+ConvLSTM
Conv+ConvLSTM
Conv+ConvLSTM
Conv+ConvLSTM
Conv+ConvLSTM
Conv+ConvLSTM
Conv+ConvLSTM
Deconv+Concat+Conv
Deconv+Concat+Conv
Deconv+Concat+Conv
Deconv+Concat+Conv
Deconv+Concat+Conv
Deconv+Concat+Conv
Deconv
Conv (output)

Filters

32@3√ó3 √ó 3
64@3√ó3 √ó 32
128@3√ó3 √ó 64
256@3√ó3 √ó 128
256@3√ó3 √ó 256
256@3√ó3 √ó 256
512@3√ó3 √ó 256
256@3√ó3 √ó 512
128@3√ó3 √ó 256
128@3√ó3 √ó 128
128@3√ó3 √ó 128
64@3√ó3 √ó 128
32@3√ó3 √ó 64
16@3√ó3 √ó 32
1@3√ó3 √ó 16

Output size
128√ó416 √ó 3
64√ó208 √ó 32
32√ó104 √ó 64
16√ó52 √ó 128
8√ó26 √ó 256
4√ó13 √ó 256
2√ó7 √ó 256
1√ó4 √ó 512
2√ó7 √ó 256
4√ó13 √ó 128
8√ó26 √ó 128
16√ó52 √ó 128
32√ó104 √ó 64
64√ó208 √ó 32
128√ó416 √ó 16
128√ó416 √ó 1

Table 1: Detailed depth estimation network architecture. Every
convolution in the encoder uses stride 2 for downsampling. Be-
fore the output a sigmoid activation function is used to ensure the
output is in range [0, 1]; All the other convolutions and decovolu-
tions are followed by batch norm and LeakyRELU activation.

Type
Input
Conv+ConvLSTM
Conv+ConvLSTM
Conv+ConvLSTM
Conv+ConvLSTM
Conv+ConvLSTM
Conv+ConvLSTM
Conv+ConvLSTM
Conv (output)

Filters

32@3√ó3 √ó 3
64@3√ó3 √ó 32
128@3√ó3 √ó 64
256@3√ó3 √ó 128
256@3√ó3 √ó 256
256@3√ó3 √ó 256
512@3√ó3 √ó 256
6@1√ó1 √ó 512

Output size
128√ó416 √ó 4
64√ó208 √ó 32
32√ó104 √ó 64
16√ó52 √ó 128
8√ó26 √ó 256
4√ó13 √ó 256
2√ó7 √ó 256
1√ó4 √ó 512
1√ó1 √ó 6

Table 2: Detailed visual odometry network architecture. Every
convolution (except for output layer) is followed by batch normal-
ization and RELU as activation.

3.2. Loss Functions

3.2.1 Multi-view Reprojection Loss

Zhou et al. [42] showed that the learning of depth and visual
odometry estimation can be formulated as an image recon-
struction problem using a differentiable geometric module
(DGM). Thus we can use the DGM to formulate an image
reconstruction constraint between It and It‚àí1 using the es-
timated depth Zt and camera pose Pt‚Üít‚àí1 as introduced in
the previous subsection. However, such a pairwise photo-
metric consistency constraint is very noisy due to illumina-
tion variation, low texture, occlusion, etc. Recently, Iyer
et al. [13] proposed a composite transformation constraint
for self-supervised visual odometry learning. By combining
the pairwise image reconstruction constraint with the com-
posite transformation constraint, we propose a multi-view
image reprojection constraint that is robust to noise and pro-
vides strong self-supervision for our multi-view depth and
visual odometry learning. As shown in Figure 2(c), the out-

put depth maps and relative camera poses together with the
input sequence are fed into a differentiable geometric mod-
ule (DGM) that performs differentiable image warping of
every previous view of the sub-sequence into the current
view. Denote the input image sequence (shown in Figure
2(a)) as {It|t = 0...N ‚àí 1}, the estimated depth maps as
{Zt|t = 0...N ‚àí1}, and the camera poses as the transforma-
tion matrices from frame t to t‚àí1: {Pt‚Üít‚àí1|t = 0...N ‚àí1}.
The multi-view reprojection loss is

N ‚àí1

t‚àí1

Lf w =

X

X

X

Œªi
t œâi

t |It ‚àí ÀÜI i
t |

(1)

t=0

i=0

‚Ñ¶

where ÀÜI i
t is the ith view warped into tth view, ‚Ñ¶ is the image
domain, œâi
t is a binary mask indicating whether a pixel of
It has a counterpart in Ii, and Œªi
t is a weighting term that
decays exponentially based on t ‚àí i. Image pairs that are far
away naturally suffer from larger reprojection error due to
interpolation and moving foreground so we use Œªi
t to reduce
the effect of such artifacts. œâi

t are obtained as

t and ÀÜI i

t, ÀÜI i
œâi

t , Ft‚Üíi = œÜ(Ii, Zt, Pt‚Üíi, K)

(2)

where Ft‚Üíi is a dense Ô¨Çow Ô¨Åeld for 2D pixels from view t
to view i, which is used to compute Ô¨Çow consistency. K is
the camera intrinsic matrix. The pose change from view t
to i, Pt‚Üíi can be obtained by a composite transformation as

Pt‚Üíi = Pi+1‚Üíi ¬∑ ... ¬∑ Pt‚àí1‚Üít‚àí2 ¬∑ Pt‚Üít‚àí1

(3)

The function œÜ in Equation 2 warps image Ii into It us-
ing Zt and Pt‚Üíi. The function œÜ is a DGM [39], which
performs a series of differentiable 2D-to-3D, 3D-to-2D pro-
jections, and bi-linear interpolation operations [14].

In the same way, we reverse the input image sequence
and perform another pass of depth {Zt|t = N ‚àí 1...0} and
camera pose {Pt‚Üít+1|t = N ‚àí 1...0} estimation, obtain-
ing the backward multi-view reprojection loss Lbw. This
multi-view reprojection loss can fully exploit the temporal
information in our ConvLSTM units from multiple previous
views by explicitly putting constraints between the current
view and every previous view.

A trivial solution to Equation 1 is œâi

t to be all zeros. To
prevent the network from converging to the trivial solution,
we add a regularization loss Lreg to œâi
t, which gives a con-
stant penalty to locations where œâi

t is zero.

3.2.2 Forward-backward Flow Consistency Loss

A forward-backward consistency check has become a pop-
ular strategy in many learning-based tasks, such as optical
Ô¨Çow[12], registration [41], and depth estimation [38, 11,
33], which provides additional self-supervision and regu-
larization. Similar to [38, 33] we use the dense Ô¨Çow Ô¨Åeld as

5558

a hybrid forward-backward consistency constraint for both
the estimated depth and pose. We Ô¨Årst introduce a forward-
backward consistency constraint on a single pair of frames
and then generalize to a sequence. Let us denote a pair of
consecutive frames as IA and IB, and their estimated depth
maps and relative poses as ZA, ZB, PA‚ÜíB, and PB‚ÜíA.
We can obtain a dense Ô¨Çow Ô¨Åeld FA‚ÜíB from frame IA to
IB using Equation 2. Similarly we can obtain FB‚ÜíA us-
ing ZB, PB‚ÜíA. Using FB‚ÜíA we can compute a pseudo-
inverse Ô¨Çow ÀÜFA‚ÜíB (due to occlusion and interpolation) as

A , ÀÜFA‚ÜíB, FA‚ÜíB = œÜ(‚àíFB‚ÜíA, ZA, PA‚ÜíB, K)
œâB

(4)

This is similar to Equation 2 except that we are interpolating
FA‚ÜíB from ‚àíFB‚ÜíA instead of It from Ii. Therefore, we
can formulate the Ô¨Çow consistency loss as

Lf lowconsit = œâB

A ¬∑|FA‚ÜíB‚àí ÀÜFA‚ÜíB|+œâA

B¬∑|FB‚ÜíA‚àí ÀÜFB‚ÜíA|
(5)
This is performed for every consecutive pair of frames in
the input sequence. Unlike the multi-view reprojection loss
we only compute Ô¨Çow-consistency on pairs of consecutive
frames given the fact that the magnitude of the Ô¨Çow in-
creases, for frame pairs that are far apart, leading to inac-
curate pseudo-inverses due to interpolation.

3.2.3 Smoothness Loss

Local smoothness is a common assumption for depth esti-
mation. Following Zhan et al. [39], we use an edge-aware
smoothness constraint which is deÔ¨Åned as

Lsmooth =

N ‚àí1

X

t=0

X

‚Ñ¶

|‚àáŒæt| ¬∑ e‚àí|‚àáIt|

(6)

where Œæt is the inverse depth.

3.2.4 Absolute depth loss

The combination of multi-view reprojection loss Lf w, Lbw
deÔ¨Åned in Equation 1, forward-backward Ô¨Çow-consistency
loss Lf lowconsist deÔ¨Åned in Equation 5, and smoothness
loss Lsmooth deÔ¨Åned in Equation 6 can form an unsuper-
vised training strategy for the network. This manner of
training is suitable for cases where there is no groundtruth
depth available, which is true for the majority of real world
scenarios. However, the network trained in this way only
produces depth at a relative scale. So optionally, if there is
groundtruth depth available, even sparsely, we can train a
network to estimate depth at absolute scale by adding the
absolute depth loss deÔ¨Åned as

Ldepth =

N ‚àí1

X

t=0

X

|Œæt ‚àí ÀÜŒæt|

‚Ñ¶

(7)

In addition, we can replace the local smoothness loss in
Equation 6 by a gradient similarity to the groundtruth depth,
which can be deÔ¨Åned as

Lsmooth =

N ‚àí1

X

t=0

X

‚Ñ¶

|‚àáŒæt ‚àí ‚àá ÀÜŒæt|

(8)

3.3. Training Pipeline

The full training pipeline of our method is shown in Fig-
ure 2. Every N consecutive key frames (we use N = 10
in all our experiments) are grouped together as an input
sequence Sf w. The frames are grouped in a sliding win-
dow fashion such that more training data can be generated.
Here the key frame selection is based on the motion be-
tween successive frames. Because the image reprojection
constraints are ambiguous for very small baselines, we dis-
card frames with baseline motion smaller than œÉ. Before
passing the sequence to the network for training, we also
reverse the sequence to create a backward sequence Sbw,
which not only serves as a data augmentation but also is
used to enforce the forward-backward constraints. The in-
put sequence Sf w is generated ofÔ¨Çine during the data prepa-
ration stage while the backward sequence Sbw is generated
online during the data preprocessing stage. Sf w and Sbw are
fed into two networks with shared weights; each generates a
sequence of depth maps and camera poses as shown in Fig-
ure 2. The estimated depth maps and camera poses are then
utilized to generate dense Ô¨Çows to warp previous views to
the current view through a differentiable geometric module
(DGM) [43, 38]. Furthermore, we utilize DGMs to generate
the pseudo-inverse Ô¨Çows for both the forward and backward
Ô¨Çows. By combining image warping loss, Ô¨Çow-consistency
loss, and optionally absolute depth loss, we form the full
training pipeline for our proposed framework.

Once trained, our framework can run on arbitrary length
sequences without grouping frames into Ô¨Åxed length sub-
sequences. To bootstrap the depth and pose estimation, the
hidden states for the ConvLSTM units are initialized by
zero for the Ô¨Årst frame. All following estimations will then
depend on the hidden states from the previous time-step.

4. Experiments

In this section we show a series of experiments using the
KITTI driving dataset [9, 10] to evaluate the performance
of our RNN-based depth and visual odometry estimation
method. As mentioned in Section 1, our architecture can be
trained in a supervised or unsupervised mode. Therefore,
we evaluated both supervised and unsupervised versions of
our framework. In the following experiments we named the
supervised version as ours-sup and the unsupervised ver-
sion as ours-unsup. We also performed detailed ablation
studies to show the impact of the different constraints, ar-
chitecture choices, and estimations at different time-steps.

5559

Input

GT

Yang et al[36]

Kuznietsov et al.[17] Godard et al. [11]

Garg et al. [8]

Ours unsup

Ours sup

Figure 4: Visual comparison between the state-of-the-art methods. For visualization the groundtruth depth is interpolated. Our method
captures more details in thin structures, such as the motorcycle and columns in the lower right corner of Ô¨Ågure rows 2 and 3.

Methods

Dataset

Supervised

Error metric

depth

pose RMSE RMSE log Abs Rel

Zhou et al. [42]
Liu et al. [20]
Eigen et al. [4]
Yin et al.[38]

Zhan et al. [40]
Zou et al. [44]

Godard et al. [11]
Atapour et al. [1]

Kuznietsov et al. [17]

Yang et al. [36]

Fu et al. (ResNet) [7]

Ours-unsup (multi-view)
Ours-sup (single-view)
Ours-sup (multi-view)

CS+K

K
K
K
K
K

CS+K
K+S*

K
K
K

K
K
K

X

X

X

X

X

X

X

X

X

X

X

6.709
6.523
6.307
5.857
5.585
5.507
5.311
4.726
4.621
4.442
2.727

2.320
1.949
1.698

0.270
0.275
0.282
0.233
0.229
0.223
0.219
0.194
0.189
0.187
0.120

0.153
0.127
0.110

0.183
0.202
0.203
0.155
0.135
0.150
0.124
0.110
0.113
0.097
0.072

0.112
0.088
0.077

Sq Rel
1.595
1.614
1.548
1.296
1.132
1.124
1.076
0.929
0.741
0.734
0.307

0.418
0.245
0.205

Accuracy metric

Œ¥ < 1.25

Œ¥ < 1.252

Œ¥ < 1.253

0.734
0.678
0.702
0.806
0.820
0.793
0.847
0.923
0.875
0.888
0.932

0.882
0.915
0.941

0.902
0.895
0.890
0.931
0.933
0.933
0.942
0.967
0.964
0.958
0.984

0.974
0.984
0.990

0.959
0.965
0.958
0.931
0.971
0.973
0.973
0.984
0.988
0.980
0.994

0.992
0.996
0.998

Table 3: Quantitative comparison of our network with other state-of-the-art CNN-based methods on KITTI [10] dataset using the Eigen
Split [4]. Ours sup (Single-view) is the evaluation of single view depth estimation result. Ours sup (mult-view) is the result generated with
the assistance of nine previous views. Even though our method is not restricted to a Ô¨Åxed number of frames per sequence during prediction
or evaluation, we still use 10-frame sequence here for the consistency with the training. We discuss continuous estimation results in the
ablation study Section 4.5. The bold numbers are results that rank Ô¨Årst and the underlined results those that rank second. All results are
capped at 80m depth.

4.1. Implementation Details

1

We set the weights for depth loss, smoothness loss,
forward-backward consistency loss, and mask regulariza-
tion to 1.0, 1.0, 0.05, and 0.05, respectively. The weight
2Œ¥‚àí1 , where Œ¥ is the num-
for the image reprojection loss is
ber of frame intervals between source and target frame. We
use the Adam [15] optimizer with Œ≤1 = 0.9, Œ≤2 = 0.999.
The initial learning rate is 0.0002. The training process is
very time-consuming for our multi-view depth and odome-
try estimation network. One strategy we use to speed up our
training process, without losing accuracy, is Ô¨Årst to pretrain
the network with the consecutive view reprojection loss for
20 epochs. Then we Ô¨Åne-tune the network with the multi-
view reprojection loss for another 10 epochs.

4.2. Training datasets

We used the KITTI driving dataset [10] to evaluate our
proposed framework. To perform a consistent comparison
with existing methods, we used the Eigen Split approach [4]
to train and evaluate our depth estimation network. From
the 33 training scenes, we generated 45200 10-frame se-

quences. Here we used the stereo camera as two monocular
cameras. A sequence of 10 frames contains either 10 left-
camera or 10 right-camera frames. We resized the images
from 375 √ó 1242 to 128√ó416 for computational efÔ¨Åciency
and to be comparable with existing methods. The image re-
projection loss is driven by motion parallax, so we discarded
all static frames with baseline motion less than œÉ = 0.3 me-
ters during data preparation. 697 frames from the 28 test
scenes were used for quantitative evaluation. For odometry
evaluation we used the KITTI Odometry Split [10], which
contains 11 sequences with ground truth camera poses. We
follow [42, 39], which use sequences 00-08 for training and
09-10 as evaluation.

4.3. Depth Estimation

To evaluate the depth estimation component of our multi-
view depth and odometry network, we compare to the
state-of-the-art CNN-based depth estimation methods. Our
network takes advantage of previous images and depths
through recurrent units and thus achieves best performance
when running on a continuous video sequence. However,

5560

it would be unfair to compare against single view methods
when our method uses multiple views. On the other hand,
if we also use only a single view for our method, then we
fail to reveal the full capacity of our framework. There-
fore, in order to present a more comprehensive depth evalu-
ation, we report both our depth estimation results with and
without previous views‚Äô assistance. Ours-sup (single-view)
is the single view (or Ô¨Årst view) depth estimation result of
our framework, which also shows the bootstrapping perfor-
mance of our approach. Ours-sup (multi-view) is the tenth
view depth estimation result from our network. As shown in
Table 3, ours-sup (multi-view) performs signiÔ¨Åcantly better
than all of the other supervised [20, 4, 1, 36, 7, 17] and un-
supervised [42, 38, 44, 39, 11] methods. The unsupervised
version of our network outperforms the state-of-the-art un-
supervised methods as well as several supervised methods.
Both the supervised and unsupervised version of our net-
work outperform the respective state-of-the-art by a large
margin. Figure 4 shows a visual comparison of our method
with other methods. Our method consistently captures more
detailed structures, e.g., the motorcycle and columns in the
lower right corner of the Ô¨Ågures in rows 2 and 3.

4.4. Pose Estimation

We used the KITTI Odometry Split to evaluate our visual
odometry network. For pose estimation we directly ran our
method through the whole sequence instead of dividing into
10-frame sub-sequences. We compared to the state-of-the-
art learning-based visual odometry methods [39, 42, 38] as
well as a popular monocular SLAM method: ORB-SLAM
[25]. We used the KITTI Odometry evaluation criterion
[10], which computes the average translation and rotation
errors over sub-sequences of length (100m, 200m, ...
,
800m).

Methods

Seq 09

Seq 10

ORB-SLAM [25]

GeoNet [38]

Zhou et al. [42]
Zhan et al. [39]

DeepVO et al. [34]
Our unsupervised

Our supervised

terr(%)
15.30
43.76
17.84
11.92

-

9.88
9.30

rerr(deg/m)

terr(%)

rerr(deg/m)

0.003
0.160
0.068
0.036

-

0.034
0.035

3.68
35.60
37.91
12.62
8.11
12.24
7.21

0.005
0.138
0.178
0.034
0.088
0.052
0.039

Table 4: Quantitative comparison of visual odometry results on the
KITTI Odometry dataset. terr is the percentage of average trans-
lational error and rerr is the average degree per meter rotational
error.

Both the monocular ORB-SLAM and the unsupervised
learning-based visual odometry methods are suffering from
scale ambiguity, so we aligned their trajectories with
groundtruth prior to evaluation using evo1. The supervised

1github.com/MichaelGrupp/evo

Figure 5: Visual comparison of full trajectories on Seq 09 (left)
and 10 (right). Our predictions are closest to groundtruth (GT 09
and GT 10).

version of our method (absolute depth supervision) and the
stereo supervised method [39] are able to estimate camera
translations at absolute scale, so there is no post-processing
for these two methods.

Table 4 shows quantitative comparison results based on
the KITTI Visual Odometry criterion. Figure 5 shows a vi-
sual comparison of the full trajectories for all the methods.
Including our method, all the full trajectories of learning-
based visual odometry methods are produced by integrat-
ing frame-to-frame relative camera poses over the whole
sequence without any drift correction.

The methods [42, 38] take a small sub-sequence (5
frames) as input and estimate relative poses between frames
within the sub-squence. There is no temporal correlation
between different sub-sequences and thus the scales are dif-
ferent between those sub-sequences. However, our method
can perform continuous camera pose estimation within a
whole video sequence for arbitrary length. The temporal
information is transmitted through recurrent units for ar-
bitrary length and thus maintains a consistent scale within
each full sequence.

4.5. Ablation study

In this section we investigate the important components:
placements of the recurrent units, multi-view reprojection
and forward-backward consistency constraints in the pro-
posed depth and visual odometry estimation network.

Placements of recurrent units. Convolutional LSTM
units are essential components for our framework to lever-
age temporal information in depth and visual odometry es-
timation. Thus we performed a series of experiments to
demonstrate the inÔ¨Çuence of these recurrent units as well
as the choice for the placements of recurrent units in the
network architecture. We tested three different architecture
choices which are shown in Figure 6. The Ô¨Årst one is inter-
leaving LSTM units across the whole network (full LSTM).
The second one is interleaving LSTM units across the en-
coder (encoder LSTM). The third one is interleaving LSTM

5561

(a) Full LSTM

(b) Encoder LSTM

(c) Decoder LSTM

(a) Input

(b) Consecutive reproj.

(c) Muti-view reproj.

Figure 6: Three different architectures depend on the placements
of recurrent units.
(a) We put a convolutional LSTM after ev-
ery convolution or deconvolution layer. (b) We only place con-
volutional LSTM in the encoder. (c) We only place convolutional
LSTM in the decoder.

Figure 7: Visual examples between networks trained using consec-
utive image reprojection loss and those using multi-view reprojec-
tion loss. Results in the Ô¨Årst row are from ours-sup, and results in
the second row are from ours-unsup.

Method

RMSE RMSE log Abs Rel

Sq Rel

full LSTM
1.764
decoder LSTM 1.808
encoder LSTM 1.698

0.112
0.117
0.110

0.079
0.082
0.077

0.214
0.226
0.205

Table 5: Ablation study on network architectures. The evaluation
data and protocol are the same as table 3.

units across the decoder (decoder LSTM). Table 5 shows
the quantitative comparison results. It can be seen that the
encoder LSTM performs signiÔ¨Åcantly better than the full
LSTM and the decoder LSTM. Therefore, we chose the en-
coder LSTM as our depth estimation network architecture.

Multi-view reprojection and forward-backward con-
sistency constraints. To investigate the performance gain
from the multi-view reprojection and forward-backward
consistency constraints, we conducted another group of ex-
periments. Table 6 shows the quantitative evaluation re-
sults. We compared among three methods: with only
the consecutive image reprojection constraint (Ours-d),
with the consecutive image reprojection constraint and the
forward-backward consistency constraint (Ours-dc), and
with the multi-view reprojection constraint and the forward-
backward consistency constraint (Ours-mc). The multi-
view reprojection loss is more important in the unsuper-
vised training, which is shown by the results of the last two
rows in Table 6. Figure 7 shows a qualitative comparison
between networks trained using consecutive image repro-
jection loss and those using multi-view reprojection loss. It
can be seen that multi-view reprojection loss provides better
supervision to areas that lack groundtruth depth.

Estimation with different temporal-window sizes. Ta-
ble 7 shows a comparison between depth estimation with
different temporal-window sizes, i.e., the number of frames
forming the temporal summary. Here we use the Eigen Split
697 testing frames for these sliding-window-based evalua-
tions. In addition, we also ran through each whole testing
sequence and again performed evaluation on those 697 test-
ing frames. The result demonstrates that 1) the performance
of the depth estimation is increasing with the number of
depth estimations performed before the current estimation;

Method

Ours-d
Ours-dc
Ours-mc

Ours-dc unsup
Ours-mc unsup

RMSE RMSE log Abs Rel

Sq Rel

1.785
1.759
1.698

2.689
2.361

0.116
0.113
0.110

0.184
0.157

0.081
0.079
0.077

0.138
0.112

0.214
0.215
0.205

0.474
0.416

Table 6: Ablation study on multi-view reprojection and forward-
backward Ô¨Çow consistency constraints. d stands for consecutive
image reprojection. m stands for multi-view image reprojection.
c stands for forward-backward Ô¨Çow consistency constraint. The
Ô¨Årst three rows are comparison between supervised training and
the last two rows are unsupervised.

Window size RMSE RMSE log Abs Rel

Sq Rel

1
3
5
10
20

Whole seq.

1.949
1.707
1.699
1.698
1.711
1.748

0.127
0.110
0.110
0.110
0.117
0.119

0.088
0.077
0.077
0.077
0.077
0.079

0.245
0.206
0.205
0.205
0.208
0.214

Table 7: Depth estimation with different time-window sizes.

2) the performance of the depth estimation is not increasing
after 10 frames; 3) even though our network is trained on
10-frame based sub-sequences, it can succeed on an arbi-
trary length sequences.

4.6. Conclusion

In this paper we presented an RNN-based, multi-view
method for depth and camera pose estimation from monoc-
ular video sequences. We demonstrated that our method can
be trained either supervised or unsupervised and that both
produce superior results compared to the state-of-the-art in
learning-based depth and visual odometry estimation meth-
ods. Our novel network architecture and the novel multi-
vew reprojection and forward-backward consistency con-
straints let our system effectively utilize the temporal infor-
mation from previous frames for current frame depth and
camera pose estimation. In addition, we have shown that
our method can run on an arbitrary length video sequences
while producing temporally coherent results.

5562

References

[1] A. Atapour-Abarghouei and T. P. Breckon.

Real-time
monocular depth estimation using synthetic data with do-
main adaptation via image style transfer.
In Proceedings
of the IEEE Conference on Computer Vision and Pattern
Recognition, volume 18, page 1, 2018. 6, 7

[2] C. B. Choy, D. Xu, J. Gwak, K. Chen, and S. Savarese. 3d-
r2n2: A uniÔ¨Åed approach for single and multi-view 3d object
reconstruction. In European conference on computer vision,
pages 628‚Äì644. Springer, 2016. 2

[3] A. J. Davison, I. D. Reid, N. D. Molton, and O. Stasse.
Monoslam: Real-time single camera slam. IEEE Transac-
tions on Pattern Analysis & Machine Intelligence, (6):1052‚Äì
1067, 2007. 2

[4] D. Eigen and R. Fergus. Predicting depth, surface normals
and semantic labels with a common multi-scale convolu-
tional architecture. In Proceedings of the IEEE International
Conference on Computer Vision, pages 2650‚Äì2658, 2015. 1,
2, 6, 7

[5] J. Engel, V. Koltun, and D. Cremers. Direct sparse odometry.
IEEE transactions on pattern analysis and machine intelli-
gence, 40(3):611‚Äì625, 2018. 2

[6] H. Fu, M. Gong, C. Wang, K. Batmanghelich, and D. Tao.
Deep ordinal regression network for monocular depth esti-
mation. In The IEEE Conference on Computer Vision and
Pattern Recognition (CVPR), June 2018. 2

[7] H. Fu, M. Gong, C. Wang, K. Batmanghelich, and D. Tao.
Deep ordinal regression network for monocular depth esti-
mation. In Proceedings of the IEEE Conference on Computer
Vision and Pattern Recognition, pages 2002‚Äì2011, 2018. 6,
7

[8] R. Garg, V. K. BG, G. Carneiro, and I. Reid. Unsupervised
cnn for single view depth estimation: Geometry to the res-
cue.
In European Conference on Computer Vision, pages
740‚Äì756. Springer, 2016. 1, 2, 6

[9] A. Geiger, P. Lenz, C. Stiller, and R. Urtasun. Vision meets
robotics: The kitti dataset. International Journal of Robotics
Research (IJRR), 2013. 5

[10] A. Geiger, P. Lenz, and R. Urtasun. Are we ready for au-
tonomous driving?
In
Conference on Computer Vision and Pattern Recognition
(CVPR), 2012. 2, 5, 6, 7

the kitti vision benchmark suite.

[11] C. Godard, O. Mac Aodha, and G. J. Brostow. Unsupervised
In

monocular depth estimation with left-right consistency.
CVPR, volume 2, page 7, 2017. 2, 4, 6, 7

[12] J. Hur and S. Roth. MirrorÔ¨Çow: Exploiting symmetries in
joint optical Ô¨Çow and occlusion estimation. In Proc. of Intl
Conf. on Computer Vision (ICCV), 2017. 4

[13] G. Iyer, J. K. Murthy, K. Gunshi Gupta, and L. Paull. Ge-
ometric consistency for self-supervised end-to-end visual
odometry. arXiv preprint arXiv:1804.03789, 2018. 4

[14] M. Jaderberg, K. Simonyan, A. Zisserman, et al. Spatial
In Advances in neural information

transformer networks.
processing systems, pages 2017‚Äì2025, 2015. 2, 4

[15] D. P. Kingma and J. Ba. Adam: A method for stochastic

optimization. arXiv preprint arXiv:1412.6980, 2014. 6

[16] A. C. Kumar, S. M. Bhandarkar, and P. Mukta. Depthnet:
A recurrent neural network architecture for monocular depth
prediction. In 1st International Workshop on Deep Learning
for Visual SLAM,(CVPR), volume 2, 2018. 2

[17] Y. Kuznietsov, J. St¬®uckler, and B. Leibe. Semi-supervised
deep learning for monocular depth map prediction. In Proc.
of the IEEE Conference on Computer Vision and Pattern
Recognition, pages 6647‚Äì6655, 2017. 6, 7

[18] I. Laina, C. Rupprecht, V. Belagiannis, F. Tombari, and
N. Navab. Deeper depth prediction with fully convolutional
residual networks. In 3D Vision (3DV), 2016 Fourth Interna-
tional Conference on, pages 239‚Äì248. IEEE, 2016. 2

[19] Z. Li and N. Snavely. Megadepth: Learning single-view
depth prediction from internet photos. In The IEEE Confer-
ence on Computer Vision and Pattern Recognition (CVPR),
June 2018. 2

[20] F. Liu, C. Shen, and G. Lin. Deep convolutional neural Ô¨Åelds
for depth estimation from a single image.
In Proceedings
of the IEEE Conference on Computer Vision and Pattern
Recognition, pages 5162‚Äì5170, 2015. 1, 2, 6, 7

[21] J. Long, E. Shelhamer, and T. Darrell. Fully convolutional
networks for semantic segmentation. In Proceedings of the
IEEE conference on computer vision and pattern recogni-
tion, pages 3431‚Äì3440, 2015. 2

[22] Y. Luo, J. Ren, M. Lin, J. Pang, W. Sun, H. Li, and L. Lin.
Single view stereo matching.
In The IEEE Conference
on Computer Vision and Pattern Recognition (CVPR), June
2018. 2

[23] R. Mahjourian, M. Wicke, and A. Angelova. Unsupervised
learning of depth and ego-motion from monocular video
using 3d geometric constraints.
In The IEEE Conference
on Computer Vision and Pattern Recognition (CVPR), June
2018. 2

[24] N. Mayer, E. Ilg, P. Hausser, P. Fischer, D. Cremers,
A. Dosovitskiy, and T. Brox. A large dataset to train con-
volutional networks for disparity, optical Ô¨Çow, and scene
Ô¨Çow estimation.
In Proceedings of the IEEE Conference
on Computer Vision and Pattern Recognition, pages 4040‚Äì
4048, 2016. 3

[25] R. Mur-Artal, J. M. M. Montiel, and J. D. Tardos. Orb-slam:
a versatile and accurate monocular slam system. IEEE Trans-
actions on Robotics, 31(5):1147‚Äì1163, 2015. 2, 7

[26] R. A. Newcombe, S. J. Lovegrove, and A. J. Davison. Dtam:
Dense tracking and mapping in real-time. In Computer Vi-
sion (ICCV), 2011 IEEE International Conference on, pages
2320‚Äì2327. IEEE, 2011. 2

[27] X. Qi, R. Liao, Z. Liu, R. Urtasun, and J. Jia. Geonet: Ge-
ometric neural network for joint depth and surface normal
estimation.
In The IEEE Conference on Computer Vision
and Pattern Recognition (CVPR), June 2018. 2

[28] B. Rogers and M. Graham. Motion parallax as an indepen-
dent cue for depth perception. Perception, 8(2):125‚Äì134,
1979. 1

[29] D. Scharstein and R. Szeliski. A taxonomy and evaluation
of dense two-frame stereo correspondence algorithms.
In-
ternational journal of computer vision, 47(1-3):7‚Äì42, 2002.
2

5563

[30] J. L. Sch¬®onberger and J.-M. Frahm. Structure-from-motion
In Conference on Computer Vision and Pattern

revisited.
Recognition (CVPR), 2016. 2

[31] K. Simonyan and A. Zisserman. Very deep convolutional
networks for large-scale image recognition. arXiv preprint
arXiv:1409.1556, 2014. 3

[32] B. Ummenhofer, H. Zhou, J. Uhrig, N. Mayer, E. Ilg,
A. Dosovitskiy, and T. Brox. Demon: Depth and motion net-
work for learning monocular stereo. In IEEE Conference on
computer vision and pattern recognition (CVPR), volume 5,
page 6, 2017. 1, 2

[33] S. Vijayanarasimhan, S. Ricco, C. Schmid, R. Sukthankar,
and K. Fragkiadaki. Sfm-net: Learning of structure and mo-
tion from video. arXiv preprint arXiv:1704.07804, 2017. 4
[34] S. Wang, R. Clark, H. Wen, and N. Trigoni. Deepvo: To-
wards end-to-end visual odometry with deep recurrent con-
volutional neural networks.
In Robotics and Automation
(ICRA), 2017, pages 2043‚Äì2050. IEEE, 2017. 7

[35] S. Xingjian, Z. Chen, H. Wang, D.-Y. Yeung, W.-K. Wong,
and W.-c. Woo. Convolutional lstm network: A machine
learning approach for precipitation nowcasting. In Advances
in neural information processing systems, pages 802‚Äì810,
2015. 1, 3

[36] N. Yang, R. Wang, J. St¬®uckler, and D. Cremers. Deep vir-
tual stereo odometry: Leveraging deep depth prediction for
monocular direct sparse odometry. In European Conference
on Computer Vision, pages 835‚Äì852. Springer, 2018. 6, 7

[37] Y. Yao, Z. Luo, S. Li, T. Fang, and L. Quan. Mvsnet: Depth
inference for unstructured multi-view stereo. In The Euro-
pean Conference on Computer Vision (ECCV), September
2018. 2

[38] Z. Yin and J. Shi. Geonet: Unsupervised learning of dense
depth, optical Ô¨Çow and camera pose. In The IEEE Confer-
ence on Computer Vision and Pattern Recognition (CVPR),
June 2018. 1, 2, 4, 5, 6, 7

[39] H. Zhan, R. Garg, C. Saroj Weerasekera, K. Li, H. Agarwal,
and I. Reid. Unsupervised learning of monocular depth es-
timation and visual odometry with deep feature reconstruc-
tion. In The IEEE Conference on Computer Vision and Pat-
tern Recognition (CVPR), June 2018. 4, 5, 6, 7

[40] H. Zhan, R. Garg, C. S. Weerasekera, K. Li, H. Agarwal, and
I. Reid. Unsupervised learning of monocular depth estima-
tion and visual odometry with deep feature reconstruction.
In Proceedings of the IEEE Conference on Computer Vision
and Pattern Recognition, pages 340‚Äì349, 2018. 6

[41] J. Zhang.

Inverse-consistent deep networks for unsu-
arXiv preprint

pervised deformable image registration.
arXiv:1809.03443, 2018. 4

[42] T. Zhou, M. Brown, N. Snavely, and D. G. Lowe. Unsu-
In

pervised learning of depth and ego-motion from video.
CVPR, volume 2, page 7, 2017. 1, 2, 4, 6, 7

[43] T. Zhou, S. Tulsiani, W. Sun, J. Malik, and A. A. Efros. View
In European conference on

synthesis by appearance Ô¨Çow.
computer vision, pages 286‚Äì301. Springer, 2016. 2, 5

[44] Y. Zou, Z. Luo, and J.-B. Huang. Df-net: Unsupervised
joint learning of depth and Ô¨Çow using cross-task consistency.
In The European Conference on Computer Vision (ECCV),
September 2018. 6, 7

5564

