Auto-Encoding Scene Graphs for Image Captioning

Xu Yang, Kaihua Tang, Hanwang Zhang, Jianfei Cai

School of Computer Science and Engineering,

Nanyang Technological University,

{s170018@e,kaihua001@e}.ntu.edu.sg,{hanwangzhang@,ASJFCai@}ntu.edu.sg

Abstract

We propose Scene Graph Auto-Encoder (SGAE) that in-
corporates the language inductive bias into the encoder-
decoder image captioning framework for more human-like
captions. Intuitively, we humans use the inductive bias to
compose collocations and contextual inference in discourse.
For example, when we see the relation “person on bike”,
it is natural to replace “on” with “ride” and infer “per-
son riding bike on a road” even the “road” is not evi-
dent. Therefore, exploiting such bias as a language prior
is expected to help the conventional encoder-decoder mod-
els less likely overﬁt to the dataset bias and focus on rea-
soning. Speciﬁcally, we use the scene graph — a directed
graph (G) where an object node is connected by adjective
nodes and relationship nodes — to represent the complex
structural layout of both image (I) and sentence (S). In the
textual domain, we use SGAE to learn a dictionary (D) that
helps to reconstruct sentences in the S → G → D → S
pipeline, where D encodes the desired language prior; in
the vision-language domain, we use the shared D to guide
the encoder-decoder in the I → G → D → S pipeline.
Thanks to the scene graph representation and shared dic-
tionary, the inductive bias is transferred across domains
in principle. We validate the effectiveness of SGAE on the
challenging MS-COCO image captioning benchmark, e.g.,
our SGAE-based single-model achieves a new state-of-the-
art 127.8 CIDEr-D on the Karpathy split, and a competitive
125.5 CIDEr-D (c40) on the ofﬁcial server even compared
to other ensemble models. Code has been made available
at: https://github.com/yangxuntu/SGAE.

1. Introduction

Modern image captioning models employ an end-to-end
encoder-decoder framework [10, 30, 29, 2, 27], i.e., the en-
coder encodes an image into vector representations and then
the decoder decodes them into a language sequence. Since
its invention inspired from neural machine translation [3],
this framework has experienced several signiﬁcant upgrades

Figure 1. Illustration of auto-encoding scene graphs (blue arrows)
into the conventional encoder-decoder framework for image cap-
tioning (red arrows), where the language inductive bias is en-
coded in the trainable shared dictionary. Word colors correspond
to nodes in image and sentence scene graphs.

such as the top-bottom [50] and bottom-up [2] visual atten-
tions for dynamic encoding, and the reinforced mechanism
for sequence decoding [38, 9, 35]. However, a ubiquitous
problem has never been substantially resolved: when we
feed an unseen image scene into the framework, we usu-
ally get a simple and trivial caption about the salient objects
such as “there is a dog on the ﬂoor”, which is no better than
just a list of object detection [29]. This situation is par-
ticularly embarrassing in front of the booming “mid-level”
vision techniques nowadays: we can already detect and seg-
ment almost everything in an image [12, 17, 36].

We humans are good at telling sentences about a visual
scene. Not surprisingly, cognitive evidences [32] show that
the visually grounded language generation is not end-to-
end and largely attributed to the “high-level” symbolic rea-
soning, that is, once we abstract the scene into symbols,
the generation will be almost disentangled from the visual
perception. For example, as shown in Figure 1, from the
scene abstraction “helmet-on-human” and “road dirty”, we
can say “a man with a helmet in countryside” by using the
common sense knowledge like “country road is dirty”. In
fact, such collocations and contextual inference in human

10685

PersonMotorbikeHatRoadOnOnOnredDirtPersonMotorbikeHatRoadOnOnOnredDirtDictionary“a man with a red helmet riding a motorcycle down a countryside dirt road”ManMotorcycleHelmetRoadOnWearDownredDirtCountrysidelanguage can be considered as the inductive bias that is
apprehended by us from everyday practice, which makes
us performing better than machines in high-level reason-
ing [22, 5]. However, the direct exploitation of the inductive
bias, e.g., early template/rule-based caption models [20, 8],
is well-known ineffective compared to the encoder-decoder
ones, due to the large gap between visual perception and
language composition.

In this paper, we propose to incorporate the inductive
bias of language generation into the encoder-decoder frame-
work for image captioning, beneﬁting from the complemen-
tary strengths of both symbolic reasoning and end-to-end
multi-modal feature mapping. In particular, we use scene
graphs [13, 47] to bridge the gap between the two worlds.
A scene graph (G) is a uniﬁed representation that connects
1) the objects (or entities), 2) their attributes, and 3) their
relationships in an image (I) or a sentence (S) by directed
edges. Thanks to the recent advances in spatial Graph Con-
volutional Networks (GCNs) [31, 24], we can embed the
graph structure into vector representations, which can be
seamlessly integrated into the encoder-decoder. Our key in-
sight is that the vector representations are expected to trans-
fer the inductive bias from the pure language domain to the
vision-language domain.

Speciﬁcally, to encode the language prior, we propose
the Scene Graph Auto-Encoder (SGAE) that is a sentence
self-reconstruction network in the S → G → D → S
pipeline, where D is a trainable dictionary for the re-
encoding purpose of the node features, the S → G module
is a ﬁxed off-the-shelf scene graph language parser [1], and
the D → S is a trainable RNN-based language decoder [2].
Note that D is the “juice” — the language inductive bias
— we extract from training SGAE. By sharing D in the
encoder-decoder training pipeline: I → G → D → S,
we can incorporate the language prior to guide the end-to-
In particular, the I → G module
end image captioning.
is a visual scene graph detector [56] and we introduce a
multi-modal GCN for the G → D module in the caption-
ing pipeline, to complement necessary visual cues that are
missing due to the imperfect visual detection. Interestingly,
D can be considered as a working memory [45] that helps
to re-key the encoded nodes from I or S to a more generic
representation with smaller domain gaps. More motivations
and the incarnation of D will be discussed in Section 4.3.

We implement the proposed SGAE-based captioning
model by using the recently released visual encoder [37]
and language decoder [2] with RL-based training strat-
egy [38]. Extensive experiments on MS-COCO [26] vali-
dates the superiority of using SGAE in image captioning.
Particularly, in terms of the popular CIDEr-D metric [44],
we achieve an absolute 7.2 points improvement over a
strong baseline: an upgraded version of Up-Down [2].
Then, we advance to a new state-of-the-art single-model

achieving 127.8 on the Karpathy split and a competitive
125.5 on the ofﬁcial test server even compared to many en-
semble models.

In summary, we would like to make the following tech-

nical contributions:

• A novel Scene Graph Auto-Encoder (SGAE) for learning
the feature representation of the language inductive bias.

• A multi-modal graph convolutional network for modulat-

ing scene graphs into visual representations.

• A SGAE-based encoder-decoder image captioner with a

shared dictionary guiding the language decoding.

2. Related Work

Image Captioning. There is a long history for researchers
to develop automatic image captioning methods. Compared
with early works which are rules/templates based [21, 33,
23], the modern captioning models have achieved striking
advances by three techniques inspired from the NLP ﬁeld,
i.e., encoder-decoder based pipeline [46], attention tech-
nique [50], and RL-based training objective [38]. After-
wards, researchers tried to discover more semantic infor-
mation from images and incorporated them into captioning
models for better descriptive abilities. For example, some
methods exploit object [29], attribute [54], and relation-
ship [53] knowledge into their captioning models. Com-
pared with these approaches, we use the scene graph as the
bridge to integrate object, attribute, and relationship knowl-
edge together to discover more meaningful semantic con-
texts for better caption generations.
Scene Graphs. The scene graph contains the structured se-
mantic information of an image, which includes the knowl-
edge of present objects, their attributes, and pairwise rela-
tionships. Thus, the scene graph can provide a beneﬁcial
prior for other vision tasks like VQA [40, 43],image gener-
ation [13, 59], and visual grounding [28]. By observing the
potential of exploiting scene graphs in vision tasks, a vari-
ety of approaches are proposed to improve the scene graph
generation from images [57, 56, 52, 51, 49, 42, 6]. On the
another hand, some researchers also tried to extract scene
graphs only from textual data [1, 47]. In this research, we
use [56] to parse scene graphs from images and [1] to parse
scene graphs from captions.
Memory Networks. Recently, many researchers try to
augment a working memory into network for preserving
a dynamic knowledge base for facilitating subsequent in-
ference [41, 48, 45]. Among these methods, differentiable
attention mechanisms are usually applied to extract useful
knowledge from memory for the tasks at hand. Inspired by
these methods, we also implement a memory architecture
to preserve humans’ inductive bias, guiding our image cap-
tioning model to generate more descriptive captions.

10686

Encoder

C
N
N

C
N
N

SGAE

Map

Map

Decoder

M
G
C
N

G
C
N

Dictionary

Shared

Dictionary

R
N
N

R
N
N

R
N
N

Figure 2. Top:
the conventional encoder-decoder. Bottom: our
proposed encoder-decoder, where the novel SGAE embeds the
language inductive bias in the shared dictionary.

bias [14, 29]. We propose to exploit the language inductive
bias, which is beneﬁcial, to confront the dataset bias, which
is pernicious, for more human-like image captioning. As
shown in Figure 2, the proposed framework is formulated
as:

Encoder: V ← I,

Map:

ˆV ← R(V, G; D), G ← V,

(4)

Decoder: S ← ˆV.

As can be clearly seen that we focus on modifying the Map
module by introducing the scene graph G into a re-encoder
R parameterized by a shared dictionary D. As we will de-
tail in the rest of the paper, we ﬁrst propose a Scene Graph
Auto-Encoder (SGAE) to learn the dictionary D which em-
beds the language inductive bias from sentence to sentence
self-reconstruction (cf. Section 4) with the help of scene
graphs. Then, we equip the encoder-decoder with the pro-
posed SGAE to be our overall image captioner (cf. Sec-
tion 5). Speciﬁcally, we use a novel Multi-modal Graph
Convolutional Network (MGCN) (cf. Section 5.1) to re-
encode the image features by using D, narrowing the gap
between vision and language.

3. Encoder-Decoder Revisited

4. Auto-Encoding Scene Graphs

As illustrated in Figure 2, given an image I, the target of
image captioning is to generate a natural language sentence
S = {w1, w2, ..., wT } describing the image. A state-of-the-
art encoder-decoder image captioner can be formulated as:

Encoder: V ← I,
ˆV ← V,
Decoder: S ← ˆV.

Map:

(1)

Usually, an encoder is a Convolutional Neural Network
(CNN) [11, 37] that extracts the image feature V; the map is
the widely used attention mechanism [50, 2] that re-encodes
the visual features into more informative ˆV that is dynamic
to language generation; a decoder is an RNN-based lan-
guage decoder for the sequence prediction of S. Given a
ground truth caption S ∗ for I, we can train this encoder-
decoder model by minimizing the cross-entropy loss:

LXE = − log P (S ∗),

(2)

or by maximizing a reinforcement learning (RL) based re-
ward [38] as:

RRL = E

S s∼P (S)[r(S s; S ∗)],

(3)

where r is a sentence-level metric for the sampled sentence
S s and the ground-truth S ∗, e.g., the CIDEr-D [44] metric.
This encoder-decoder framework is the core pillar un-
derpinning almost all state-of-the-art
image captioners
since [46]. However, it is widely shown brittle to dataset

In this section, we will introduce how to learn D through
self-reconstructing sentence S. As shown in Figure 2,
the process of reconstructing S is also an encoder-decoder
pipeline. Thus, by slightly abusing the notations, we can
formulate SGAE as:

Encoder: X ← G ← S,

Map:

ˆX ← R(X ; D),

(5)

Decoder: S ← ˆX .

Next, we will detail every component mentioned in Eq. (5).

4.1. Scene Graphs

We introduce how to implement the step G ← S, i.e.,
from sentence to scene graph. Formally, a scene graph is a
tuple G = (N , E), where N and E are the sets of nodes and
edges, respectively. There are three kinds of nodes in N :
object node o, attribute node a, and relationship node r. We
denote oi as the i-th object, rij as the relationship between
object oi and oj , and ai,l as the l-th attribute of object oi.
For each node in N , it is represented by a d-dimensional
vector, i.e., eo, ea, and er. In our implementation, d is set
to 1, 000. In particular, the node features are trainable label
embeddings. The edges in E are formulated as follows:

• if an object oi owns an attribute ai,l, assigning a di-

rected edge from ai,l to oi;

• if there is one relationship triplet < oi − rij − oj >
appearing, assigning two directed edges from oi to rij
and from rij to oj , respectively.

10687

Figure 3. Graph Convolutional Network. In particular, it is spatial
convolution, where the colored neighborhood is “convolved” for
the resultant embedding.

Figure 3 shows one example of G, which contains 7 nodes
in N and 6 directed edges in E.

We use the scene graph parser provided by [1] for scene
graphs G from sentences, where a syntactic dependency tree
is built by [18] and then a rule-based method [39] is applied
for transforming the tree to a scene graph.

4.2. Graph Convolution Network

We present the implementation for the step X ← G in
Eq. (5), i.e., how to transform the original node embed-
dings eo, ea, and er into a new set of context-aware embed-
dings X . Formally, X contains three kinds of d-dimensional
embeddings: relationship embedding xrij for relationship
node rij , object embedding xoi for object node oi, and at-
tribute embedding xai for object node oi. In our implemen-
tation, d is set to 1, 000. We use four spatial graph convolu-
tions: gr, ga, gs, and go for generating the above mentioned
three kinds of embeddings. In our implementation, all these
four functions have the same structure with independent pa-
rameters: a vector concatenation input to a fully-connected
layer, followed by an ReLU.
Relationship Embedding xrij : Given one relationship
triplet < oi − rij − oj > in G, we have:

xrij = gr(eoi , erij , eoj ),

(6)

where the context of a relationship triplet is incorporated
together. Figure 3 (a) shows such an example.
Attribute Embedding xai : Given one object node oi with
all its attributes ai,1:N ai in G, where N ai is the number of
attributes that the object oi has, then xai for oi is:

xai =

1

N ai

N aiX

l=1

ga(eoi , eai,l ),

(7)

where the context of this object and all its attributes are in-
corporated. Figure 3 (b) shows such an example.
Object Embedding xoi : In G, oi can act as “subject” or
“object” in relationships, which means oi will play different
roles due to different edge directions. Then, different func-
tions should be used to incorporate such knowledge. For
avoiding ambiguous meaning of the same “predicate” in dif-
ferent context, knowledge of the whole relationship triplets

Figure 4. The visualization of the re-encoder function R. The
black dashed block shows the operation of re-encoding. The top
part demonstrates how “imagination” is achieved by re-encoding:
green line shows the generated phrase by re-encoding, while the
red line shows the one without re-encoding.

where oi appears should be incorporated into xoi . One sim-
ple example for ambiguity is that, in <hand-with-cup>, the
predicate “with” may mean “hold”, while in <head-with-
hat>, “with” may mean “wear”. Therefore, xoi can be cal-
culated as:

1

N ri

xoi =
+ X

[ X

oj ∈sbj(oi)

gs(eoi , eoj , erij )

go(eok , eoi , erki )].

(8)

ok∈obj(oi)

For each node oj ∈ sbj(oi), it acts as “object” while oi
acts as “subject”, e.g., sbj(o1) = {o2} in Figure 3 (c).
N ri = |sbj(i)| + |obj(i)| is the number of relationship
triplets where oi is present. Figure 3 (c) shows this example.

4.3. Dictionary

Now we introduce how to learn the dictionary D and
then use it to re-encode ˆX ← R(X ; D) in Eq. (5). Our
key idea is inspired by using the working memory to pre-
serve a dynamic knowledge base for run-time inference,
which is widely used in textual QA [41], VQA [48], and
one-shot classiﬁcation [45]. Our D aims to embed lan-
guage inductive bias in language composition. Therefore,
we propose to place the dictionary learning into the sen-
tence self-reconstruction framework. Formally, we denote
D as a d × K matrix D = {d1, d2, ..., dK}. The K is set
as 10, 000 in implementation. Given an embedding vector
x ∈ X , the re-encoder function RD can be formulated as:

ˆx = R(x; D) = Dα =

KX

k=1

αkdk,

(9)

where α = softmax(DT x) can be viewed as the “key” op-
eration in memory network [41]. As shown in Figure 4,
this re-encoding offers some interesting “imagination” in
human common sense reasoning. For example, from “yel-
low and dotted banana”, after re-encoding, the feature will
be more likely to generate “ripe banana”.

10688

We deploy the attention structure in [2] for reconstruct-
ing S. Given a reconstructed S, we can use the training ob-
jective in Eq. (2) or (3) to train SGAE parameterized by D in
an end-to-end fashion. Note that training SGAE is unsuper-
vised, that is, SGAE offers a potential never-ending learning
from large-scale unsupervised inductive bias learning for D.
Some preliminary studies are reported in Section 6.2.2.

5. Overall Model:

SGAE-based Encoder-

Decoder

In this section, we will introduce the overall model:
SGAE-based Encoder-Decoder as sketched in Figure 2 and
Eq. (4).

5.2. Training and Inference

Following the common practice in deep-learning feature
transfer [7, 55], we use the SGAE pre-trained D as the ini-
tialization for the D in our overall encoder-decoder for im-
age captioning. In particular, we intentionally use a very
small learning rate (e.g., 10−5) for ﬁne-tuning D to impose
the sharing purpose. The overall training loss is hybrid: we
use the cross-entropy loss in Eq. (2) for 20 epochs and then
use the RL-based reward in Eq. (3) for another 40 epochs.

For inference in language generation, we adopt the beam

search strategy [38] with a beam size of 5.

6. Experiments

5.1. Multi modal Graph Convolution Network

6.1. Datasets, Settings, and Metrics

The original image features extracted by CNN are not
ready for use for the dictionary re-encoding as in Eq. (9),
due to the large gap between vision and language. To this
end, we propose a Multi-modal Graph Convolution Net-
work (MGCN) to ﬁrst map the visual features V into a set
of scene graph-modulated features V ′.

Here, the scene graph G is extracted by an image scene
graph parser that contains an object proposal detector, an at-
tribute classiﬁer, and a relationship classiﬁer. In our imple-
mentation, we use Faster-RCNN as the object detector [37],
MOTIFS relationship detector [56] as the relationship clas-
siﬁer, and we use our own attribute classiﬁer: an small fc-
ReLU-fc-Softmax network head. The key representation
difference between the sentence-parsed G and the image-
parsed G is that the node oi is not only the label embed-
ding. In particular, we use the RoI features pre-trained from
Faster RCNN and then fuse the detected label embedding
eoi with the visual feature voi , into a new node feature uoi :

uoi = ReLU(W1eoi + W2voi ) − (W1eoi − W2voi )2.
(10)
where W1 and W2 are the fusion parameters follow-
ing [58]. Compared to the popular bi-linear fusion [58],
Eq (10) is empirically shown a faster convergence of train-
ing the label embeddings in our experiments. The rest node
embeddings: urij and uai are obtained in a similar way.
The differences between two scene graphs generated from
I and S are visualized in Figure 1, where the image G is
usually more simpler and nosier than the sentence G.

Similar to the GCN used in Section 4.2, MGCN also has
an ensemble of four functions fr, fa, fs and fo, each of
which is a two-layer structure: fc-ReLU with independent
parameters. And the computation of relationship, attribute
and object embeddings are similar to Eq. (6), Eq. (7), and
Eq. (8), respectively. After computing V ′ by using MGCN,
we can adopt Eq. (9) to re-encode V ′ as ˆV and feed ˆV to the
decoder for generating language S. In particular, we deploy
the attention structure in [2] for the generation.

MS-COCO [26].
There are two standard splits of
the ofﬁcial online test split and the 3rd-
MS-COCO:
party Karpathy split [15] for ofﬂine test. The ﬁrst split
has 82, 783/40, 504/40, 775 train/val/test images, each of
which has 5 human labeled captions. The second split has
113, 287/5, 000/5, 000 train/val/test images, each of which
has 5 captions.
Visual Genome [19] (VG). This dataset has abundant scene
graph annotations, e.g., objects’ categories, objects’ at-
tributes, and pairwise relationships, which can be exploited
to train the object proposal detector, attribute classiﬁer, and
relationship classiﬁer [56] as our image scene graph parser.
Settings. For captions, we used the following steps to pre-
process the captions: we ﬁrst tokenized the texts on white
space; then we changed all the words to lowercase; we also
deleted the words which appear less than 5 times; at last, we
trimmed each caption to a maximum of 16 words. This re-
sults in a vocabulary of 10, 369 words. This pre-processing
was also applied in VG. It is noteworthy that except for ab-
lative studies, these additional text descriptions from VG
were not used for training the captioner. Since the object,
attribute, and relationship annotations are very noisy in VG
dataset, we ﬁlter them by keeping the objects, attributes,
and relationships which appear more than 2, 000 times in
the training set. After ﬁltering, the remained 305 objects,
103 attributes, and 64 relationships are used to train our ob-
ject detector, attribute classiﬁer and relationship classiﬁer.

We chose the language decoder proposed in [2]. The
number of hidden units of both LSTMs used in this decoder
is set to 1000. For training SGAE in Eq. (5), the decoder is
ﬁrstly set as S ← X and D is not trained to learn a rudi-
ment encoder and decoder. We used the corss-entropy loss
in Eq. (2) to train them for 20 epochs. Then the decoder
was set as S ← ˆX to train D by cross-entropy loss for an-
other 20 epochs. The learning rate was initialized to 5e−4
for all parameters and we decayed them by 0.8 for every 5
epochs. For training our SGAE-based encoder-decoder, we
followed Eq. (4) to generate S with shared D pre-trained

10689

R

Table 1. The performances of various methods on MS-COCO
Karpathy split. The metrics: B@N, M, R, C and S denote
BLEU@N, METEOR, ROUGE-L, CIDEr-D and SPICE. Note
that the f use subscript indicates fused models while the rest meth-
ods are all single models. The best results for each metric on fused
models and single models are marked in boldface separately.
S
−
20.8
−
21.4
21.6
21.1
22.0
20.9
21.2
21.4
21.4
22.1
22.2
22.1

Models
SCST [38]
LSTM-A [54]
StackCap [9]
Up-Down [2]
CAVP [27]
GCN-LSTM† [53]
GCN-LSTM [53]
Base
Base+MGCN
Base+D w/o GCN
Base+D
SGAE
SGAEf use
GCN-LSTMf use [53]

B@1 B@4 M
26.7
27.3
27.4
27.7
28.3
28.0
28.5
27.7
27.9
27.8
28.1
28.4
28.4
28.6

114.0
118.3
120.4
120.1
126.3
122.8
127.6
120.6
123.4
124.2
125.7
127.8
129.1
128.7

−
78.6
78.6
79.8
−
80.0
80.5
79.9
80.2
80.2
80.4
80.8
81.0
80.9

34.2
35.5
36.1
36.3
38.6
37.1
38.2
36.8
37.2
37.3
37.7
38.4
39.0
38.3

55.7
56.8
−
56.9
58.5
57.3
58.3
57.0
57.5
58.0
58.2
58.6
58.9
58.5

C

from SGAE. The decoder was set as S ← { ˆV, V ′}, where
V ′ and ˆV can provide visual clues and high-level seman-
tic contexts respectively. In this process, cross-entropy loss
was ﬁrst used to train the network for 20 epochs and then the
RL-based reward was used to train for another 80 epochs.
The learning rate for D was initialized to 5e−5 and for other
parameters it was 5e−4, and all these learning rates were de-
cayed by 0.8 for every 5 epochs. Adam optimizer [16] was
used for batch size 100.
Metrics. We used ﬁve standard automatic evalua-
tions metrics: CIDEr-D [44], BLEU [34], METEOR[4],
ROUGE [25] and SPICE [1].

6.2. Ablative Studies

We conducted extensive ablations for architecture (Sec-
tion 6.2.1), language corpus (Section 6.2.2), and sentence
reconstruction quality (Section 6.2.3). For simplicity, we
use SGAE to denote our SGAE-based encoder-decoder
captioning model.

6.2.1 Architecture

Comparing Methods. For quantifying the importance of
the proposed GCN, MGCN, and dictionary D, we ablated
our SGAE with the following baselines: Base: We followed
the pipeline given in Eq (1) without using GCN, MGCN,
and D. This baseline is the benchmark for other ablative
baselines. Base+MGCN: We added MGCN to compute the
multi-modal embedding set ˆV. This baseline is designed for
validating the importance of MGCN. Base+D w/o GCN:
We learned D by using Eq. (5), while GCN is not used and
only word embeddings of S were input to the decoder. Also,
MGCN in Eq. (4) is not used. This baseline is designed for
validating the importance of GCN. Base+D: Compared to

Table 2. The performances of using different language corpora

B@1 B@4 M
Models
27.7
79.9
Base
28.0
80.2
VG
28.4
80.8
COCO
VG+COCO 81.1
28.6

36.8
37.8
38.4
38.9

R

57.0
58.2
58.6
58.8

C

120.6
123.2
127.8
128.6

S

20.9
21.3
22.1
22.2

Table 3. The performances of using different scene graphs

Models B@1 B@4 M
ˆX
34.3
X
38.5
28.4
SGAE

53.8
65.2
38.4

90.3
93.9
80.8

R

66.5
71.8
58.6

C

153.2
177.0
127.8

S

30.6
34.3
22.1

Table 4. The performances of various methods on MS-COCO
Karpathy split trained by cross-entropy loss only.

Models
SCST[36]
LSTM-A[50]
StackCap[8]
Up-Down[2]
GCN-LSTM[49]
Base
Base+MGCN
SGAE

B@1 B@4 M
25.9
25.4
26.5
27.0
27.9
27.1
27.2
27.7

−
73.4
76.2
77.2
77.3
76.8
77.1
77.6

30.0
32.6
35.2
36.2
36.8
36.1
36.2
36.9

R

53.4
54.0
−
56.4
57.0
56.3
56.5
57.2

C

99.4
100.2
109.1
113.5
116.3
113.1
114.2
116.7

S
−
18.6
−
20.3
20.9
20.3
20.5
20.9

Base, we learned D by using GCN. And MGCN in Eq. (4)
was not used. This baseline is designed for validating the
importance of the shared D.
Results. The middle section of Table 1 shows the perfor-
mances of the ablative baselines on MS-COCO Karpathy
split. Compared with Base, our SGAE can boost the CIDEr-
D by absolute 7.2. By comparing Base+MGCN, Base+D
w/o GCN, and Base+D with Base, we can ﬁnd that all
the performances are improved, which demonstrate that the
proposed MGCN, GCN, and D are all indispensable for ad-
vancing the performances. We can also observe that the per-
formances of Base+D or Base+D w/o GCN are better than
Base+MGCN, which suggests that the language inductive
bias plays an important role in generating better captions.
Qualitative Examples. Figure 5 shows 6 examples of
the generated captions using different baselines. We
can see that compared with captions generated by Base,
Base+MGCN’s descriptions usually contain more descrip-
tions about objects’ attributes and pairwise relationships.
For captions generated by SGAE, they are more complex
and descriptive. For example, in Figure 5 (a), the word
“busy” will be used to describe the heavy trafﬁc; in (b) the
scene “forest” can be deduced from “trees”; and in (d), the
weather “rain” will be inferred from “umbrella’.

6.2.2 Language Corpus

Comparing Methods. To test the potential of using large-
scale corpus for learning a better D, we used the texts
provided by VG instead of MS-COCO to learn D, and
then share the learned D in the encoder-decoder pipeline.
The results are demonstrated in Table 2, where VG and

10690

Car
Car
Car

Road
Road
Road

Bus
Bus
Bus

On
On
On

On
On
On

BASE: a city street with many cars
BASE: a city street with many cars
BASE+MGCN: a city street with many cars 
BASE+MGCN: a city street with many cars 
and buses
and buses
SGAE: a busy highway filled with lots of 
SGAE: a busy highway filled with lots of 
traffic
traffic
GT: there are many cars and buses on the 
GT: there are many cars and buses on the 
busy highway
busy highway

(a): 553879

Black
Black

BASE: a person walking in the street
BASE: a person walking in the street
BASE+MGCN: a person walking in the 
BASE+MGCN: a person walking in the 
street with a black umbrella
street with a black umbrella
SGAE: a person walking down street with 
SGAE: a person walking down street with 
a black umbrella in the rain
a black umbrella in the rain
GT: a group of people walking down a wet 
GT: a group of people walking down a wet 
rain soaked sidewalk
rain soaked sidewalk

Green
Green

BASE: a couple of elephants walking in a 
BASE: a couple of elephants walking in a 
field 
field 
BASE+MGCN: two elephants walking in 
BASE+MGCN: two elephants walking in 
the grass in a field
the grass in a field
SGAE: a couple of elephants walking 
SGAE: a couple of elephants walking 
through a lush green forest
through a lush green forest
GT: two elephants standing in grassy area 
GT: two elephants standing in grassy area 
with trees around
with trees around

(b): 45710

Motorbike
Motorbike

Road
Road

Park
Park

Dirty
Dirty

BASE: a motorcycle parked on the side of 
BASE: a motorcycle parked on the side of 
a road
a road
BASE+MGCN: a motorcycle parked on the 
BASE+MGCN: a motorcycle parked on the 
side of a road
side of a road
SGAE: a motorcycle is parked on the 
SGAE: a motorcycle is parked on the 
gravel road
gravel road
GT: a motor bike parked on the side of 
GT: a motor bike parked on the side of 
the road by the bushes
the road by the bushes

Yellow
Yellow

BASE: a banana sitting on top of a bowl
BASE: a banana sitting on top of a bowl
BASE+MGCN: a cup of coffee next to a 
BASE+MGCN: a cup of coffee next to a 
yellow banana
yellow banana
SGAE: a cup of coffee next to a ripe 
SGAE: a cup of coffee next to a ripe 
banana 
banana 
GT: an over ripened banana and a cup of 
GT: an over ripened banana and a cup of 
coffee
coffee

(c): 76529

Chair
Chair
Chair

Road
Road
Road

Motorbike
Motorbike
Motorbike

On
On
On

On
On
On

BASE: a building with a chair on the side 
BASE: a building with a chair on the side 
BASE: a building with a chair on the side 
of it
of it
of it
BASE+MGCN: a street with a motorbike 
BASE+MGCN: a street with a motorbike 
BASE+MGCN: a street with a motorbike 
and a chair on it
and a chair on it
and a chair on it
SGAE: a narrow alley with a chair and a 
SGAE: a narrow alley with a chair and a 
SGAE: a narrow alley with a chair and a 
motorbike on the side of it
motorbike on the side of it
motorbike on the side of it
GT: a narrow alley way with a chair by the 
GT: a narrow alley way with a chair by the 
GT: a narrow alley way with a chair by the 
side
side
side

(d):177861

(e): 325557

(f): 396209

Figure 5. Qualitative examples of different baselines. For each ﬁgure, the image scene graph is pruned to avoid clutter. The id refers to the
image id in MS-COCO. Word colors correspond to nodes in the detected scene graphs.

Figure 6. Captions generated by using different language corpora.

Table 5. The performances of various methods on the online MS-
COCO test server.

Model
Metric
SCST [38]
LSTM-A [54]
StackCap [9]
Up-Down [2]
CAVP [27]
SGAEsingle
SGAEf use

B@4

M

R-L

C-D

c5
35.2
35.6
34.9
36.9
37.9
37.8
38.5

c40
64.5
65.2
64.6
68.5
69.0
68.7
69.7

c5
27.0
27.0
27.0
27.6
28.1
28.1
28.2

c40
35.5
35.4
35.6
36.7
37.0
37.0
37.2

c5
56.3
56.4
56.2
57.1
58.2
58.2
58.6

c40
70.7
70.5
70.6
72.4
73.1
73.1
73.6

c5

114.7
116.0
114.8
117.9
121.6
122.7
123.8

c40
116.0
118.0
118.3
120.5
123.8
125.5
126.5

VG+COCO mean the results obtained by using texts from
VG and VG+COCO, respectively.
Results. We can observe that by using the web description
texts, the performances are boosted, which validates the po-
tential of our proposed model in exploiting additional Web
texts. We can also see that by using texts provided by MS-
COCO itself (SGAE), the generated captions have better
scores than using Web texts. This is intuitively reasonable
since D can preserve more useful clues when a matched lan-
guage corpus is given. All of these observations validate the

Figure 7. The pie charts each comparing the two methods in hu-
man evaluation. Each color indicates the percentage of users who
consider that the corresponding method generates more descrip-
tive captions. In particular, the gray color indicates that the two
methods are comparative.

effectiveness of D in two aspects: D can memorize common
inductive bias from the additional unmatched Web texts or
speciﬁc inductive bias from a matched language corpus. In
addition, when language corpora of both VG and COCO are
exploited, a consistent improvement can be achieved com-
pared with the baselines where only one corpus is used.

10691

(a): 4760(b): 199247(c): 557135(d): 520430(e): 173385(f): 412813Base: a fire hydrant sitting on the side of a streetWeb: a black fire hydrant sitting next to a sidewalkSGAE: a green bench sitting next to a yellow fire hydrantGT: a fire hydrant with a bench and building in a backgroundBase: a herd of sheep are laying in a fieldWeb: a herd of cows laying in the grassSGAE: a herd of animals laying in a lush green  fieldGT: a herd of animals laying down in a lush green fieldBase: a bathroom with two sinksWeb: a bathroom with a sink and a mirrorSGAE: a bathroom with two sinks and a mirrorGT: a bathroom that has two sinks and a showerBase: a woman holding a wii game controllerWeb: a woman holding a game controllerSGAE: a woman holding a nintendo wii game controllerGT: a young woman smiling holding a video game remoteBase: an elephant is standing in front of a buildingWeb: an elephant is standing in the sandsSGAE: an elephant is standing in the dirt near a building GT: an elephant is by a tire and a pile of dirtBase: an umbrella sitting on the beachWeb: a black umbrella sitting on the beachSGAE: a black and white photo of an umbrella on the beachGT: an umbrella is at the beach tilted over67%10%23%SGAE vs. Base39%33%28%SGAE vs. Web61%12%27%Web vs. BaseSGAEWebBaseComparativeQualitative Examples. Figure 6 shows 6 examples of gen-
erated captions by using different language corpora. Gen-
erally, compared with captions generated by Base, the cap-
tions of Web and SGAE are more descriptive. Speciﬁcally,
the captions generated by using the matched language cor-
pus can usually describe a scene by some speciﬁc expres-
sions in the dataset, while more general expressions will
appear in captions generated by using Web texts. For ex-
ample, in Figure 6 (b), SGAE uses “lush green ﬁeld” as GT
captions while Web uses “grass” ; or in (e), SGAE prefers
“dirt” while Web prefers “sand”.
Human Evaluation. For better evaluating the qualities
of the generated captions by using different language cor-
pora, we conducted human evaluation with 30 workers. We
showed them two captions generated by different methods
and asked them which one is more descriptive. For each
pairwise comparison, 100 images are randomly extracted
from the Karpathy split for them to compare. The results
of the comparisons are shown in Figure 7. From these pie
charts, we can observe that when a D is used, the generated
captions are evaluated to be more descriptive.

6.2.3 Sentence Reconstruction

Comparing Methods. We investigated how well the sen-
tences are reconstructed in training SGAE in Eq. (5), with
or without using the re-encoding by D, that is, we denote

bX as the pipeline using D and X as the pipeline directly

reconstructing sentences from their scene graph node fea-
tures. Such results are given in Table 3.
Analysis. As we can see, the performances of using direct

scene graph features bX are much better than those (X ) im-

posed with D for re-encoding. This is reasonable since D
will regularize the reconstruction and thus encourages the
learning of language inductive bias. Interestingly, the gap
between ˆX and SGAE suggest that we should develop a
more powerful image scene graph parser for improving the
quality of G in Eq. (4), and a stronger re-encoder should be
designed for extracting more preserved inductive bias when
only low-quality visual scene graphs are available.

6.3. Comparisons with State of The Arts

Comparing Methods. Though there are various captioning
models developed in recent years, for fair comparison, we
only compared SGAE with some encoder-decoder methods
trained by the RL-based reward (Eq. (3)), due to their su-
perior performances. Speciﬁcally, we compared our meth-
ods with SCST [38], StackCap [9], Up-Down [2], LSTM-
A [54], GCN-LSTM [53], and CAVP [27]. Among these
methods, SCST and Up-Down are two baselines where the
more advanced self-critic reward and visual features are
used. Compared with SCST, StackCap proposes a more
complex RL-based reward for learning captions with more

details. All of LSTM-A, GCN-LSTM, and CAVP try to
exploit information of visual scene graphs, e.g., LSTM-A
and GCN-LSTM exploit attributes and relationships infor-
mation respectively, while CAVP tries to learn pairwise re-
lationships in the decoder. Noteworthy, in GCN-LSTM,
they set the batch size as 1, 024 and the training epoch as
250, which is quite large compared with some other meth-
ods like Up-Down or CAVP, and is beyond our computation
resources. For fair comparison, we also re-implemented a
version of their work (since they do not publish the code),
and set the batch size and training epoch both as 100, such
result is denoted as GCN-LSTM† in Table 1. In addition,
the best result reported by GCN-LSTM is obtained by fus-
ing two probabilities computed from two different kinds of
relationships, which is denoted as GCN-LSTMf use, and our
counterpart is denoted as SGAEf use.
Analysis. From Table 1 and 4, we can see that our sin-
gle model can outperform the other image captioners. In
particular, when both cross-entropy loss and RL reward are
used, our single model can achieve a new state-of-the-art
score among all the compared methods in terms of CIDEr-
D, 127.8. And compared with GCN-LSTMf use, our fusion
model SGAEf use also achieves better performances. By
exploiting the inductive bias in D, even when our decoder
or RL-reward is not as sophisticated as CVAP or Stack-
Cap, our method still has better performances. Moreover,
our small batch size and fewer training epochs still lead to
higher performances than GCN-LSTM, whose batch size
and training epochs are much larger. Table 5 reports the per-
formances of different methods test on the ofﬁcial server.
Compared with the published captioning methods (by the
date of 16/11/2018), our single model has competitive per-
formances and can achieve the highest CIDEr-D score.

7. Conclusions

We proposed to incorporate the language inductive bias
— a prior for more human-like language generation — into
the prevailing encoder-decoder framework for image cap-
tioning. In particular, we presented a novel unsupervised
learning method: Scene Graph Auto-Encoder (SGAE), for
embedding the inductive bias into a dictionary, which can be
shared as a re-encoder for language generation and signif-
icantly improves the performance of the encoder-decoder.
We validated the SGAE-based framework by extensive ab-
lations and comparisons with state-of-the-art performances
on MS-COCO. As we believe that SGAE is a general solu-
tion for capturing the language inductive bias, we are going
to apply it in other vision-language tasks.

Acknowledgements. This work is partially supported
by NTU Data Science
Intelligence
and NTU-Alibaba Lab.
Research Center

and Artiﬁcial

(DSAIR)

10692

References

[1] P. Anderson, B. Fernando, M. Johnson, and S. Gould. Spice:
Semantic propositional image caption evaluation.
In Eu-
ropean Conference on Computer Vision, pages 382–398.
Springer, 2016. 2, 4, 6

[2] P. Anderson, X. He, C. Buehler, D. Teney, M. Johnson,
S. Gould, and L. Zhang. Bottom-up and top-down atten-
tion for image captioning and visual question answering. In
CVPR, volume 3, page 6, 2018. 1, 2, 3, 5, 6, 7, 8

[3] D. Bahdanau, K. Cho, and Y. Bengio. Neural machine trans-
lation by jointly learning to align and translate. ICLR, 2015.
1

[4] S. Banerjee and A. Lavie. Meteor: An automatic metric for
mt evaluation with improved correlation with human judg-
ments. In Proceedings of the acl workshop on intrinsic and
extrinsic evaluation measures for machine translation and/or
summarization, pages 65–72, 2005. 6

[5] P. W. Battaglia, J. B. Hamrick, V. Bapst, A. Sanchez-
Gonzalez, V. Zambaldi, M. Malinowski, A. Tacchetti, D. Ra-
poso, A. Santoro, R. Faulkner, et al. Relational inductive
biases, deep learning, and graph networks. arXiv preprint
arXiv:1806.01261, 2018. 2

[6] L. Chen, H. Zhang, J. Xiao, X. He, S. Pu, and S.-F. Chang.
Counterfactual critic multi-agent training for scene graph
generation. arXiv preprint arXiv:1812.02347, 2018. 2

[7] J. Devlin, M.-W. Chang, K. Lee, and K. Toutanova. Bert:
Pre-training of deep bidirectional transformers for language
understanding. arXiv preprint arXiv:1810.04805, 2018. 5

[8] H. Fang, S. Gupta, F. Iandola, R. K. Srivastava, L. Deng,
P. Doll´ar, J. Gao, X. He, M. Mitchell, J. C. Platt, et al. From
captions to visual concepts and back. In CVPR, 2015. 2

[9] J. Gu, J. Cai, G. Wang, and T. Chen. Stack-captioning:
Coarse-to-ﬁne learning for image captioning. AAAI, 2017.
1, 6, 7, 8

[10] J. Gu, G. Wang, J. Cai, and T. Chen. An empirical study of

language cnn for image captioning. In ICCV, 2017. 1

[11] K. He, X. Zhang, S. Ren, and J. Sun. Deep residual learn-
ing for image recognition. In Proceedings of the IEEE con-
ference on computer vision and pattern recognition, pages
770–778, 2016. 3

[12] R. Hu, P. Dollr, K. He, T. Darrell, and R. Girshick. Learning
to segment every thing. In The IEEE Conference on Com-
puter Vision and Pattern Recognition (CVPR), June 2018. 1

[13] J. Johnson, A. Gupta, and L. Fei-Fei. Image generation from

scene graphs. arXiv preprint, 2018. 2

[14] J. Johnson, B. Hariharan, L. van der Maaten, L. Fei-Fei,
C. L. Zitnick, and R. Girshick. Clevr: A diagnostic dataset
for compositional language and elementary visual reasoning.
In Computer Vision and Pattern Recognition (CVPR), 2017
IEEE Conference on, pages 1988–1997. IEEE, 2017. 3

[15] A. Karpathy and L. Fei-Fei. Deep visual-semantic align-
ments for generating image descriptions. In Proceedings of
the IEEE conference on computer vision and pattern recog-
nition, pages 3128–3137, 2015. 5

[16] D. P. Kingma and J. Ba. Adam: A method for stochastic

optimization. arXiv preprint arXiv:1412.6980, 2014. 6

[17] A. Kirillov, K. He, R. Girshick, C. Rother, and P. Doll´ar.
Panoptic segmentation. arXiv preprint arXiv:1801.00868,
2018. 1

[18] D. Klein and C. D. Manning. Accurate unlexicalized pars-
ing. In Proceedings of the 41st Annual Meeting on Associ-
ation for Computational Linguistics-Volume 1, pages 423–
430. Association for Computational Linguistics, 2003. 4

[19] R. Krishna, Y. Zhu, O. Groth, J. Johnson, K. Hata, J. Kravitz,
S. Chen, Y. Kalantidis, L.-J. Li, D. A. Shamma, et al. Vi-
sual genome: Connecting language and vision using crowd-
sourced dense image annotations. International Journal of
Computer Vision, 123(1):32–73, 2017. 5

[20] G. Kulkarni, V. Premraj, V. Ordonez, S. Dhar, S. Li, Y. Choi,
A. C. Berg, and T. L. Berg. Babytalk: Understanding and
generating simple image descriptions. In CVPR, 2011. 2

[21] P. Kuznetsova, V. Ordonez, A. C. Berg, T. L. Berg, and
Y. Choi. Collective generation of natural image descriptions.
In Proceedings of the 50th Annual Meeting of the Associa-
tion for Computational Linguistics: Long Papers-Volume 1,
pages 359–368. Association for Computational Linguistics,
2012. 2

[22] B. M. Lake, T. D. Ullman, J. B. Tenenbaum, and S. J. Ger-
shman. Building machines that learn and think like people.
Behavioral and Brain Sciences, 40, 2017. 2

[23] S. Li, G. Kulkarni, T. L. Berg, A. C. Berg, and Y. Choi.
Composing simple image descriptions using web-scale n-
grams. In Proceedings of the Fifteenth Conference on Com-
putational Natural Language Learning, pages 220–228. As-
sociation for Computational Linguistics, 2011. 2

[24] Y. Li, D. Tarlow, M. Brockschmidt, and R. Zemel.
arXiv preprint

Gated graph sequence neural networks.
arXiv:1511.05493, 2015. 2

[25] C.-Y. Lin. Rouge: A package for automatic evaluation of

summaries. Text Summarization Branches Out, 2004. 6

[26] T.-Y. Lin, M. Maire, S. Belongie, J. Hays, P. Perona, D. Ra-
manan, P. Doll´ar, and C. L. Zitnick. Microsoft coco: Com-
mon objects in context. In European conference on computer
vision, pages 740–755. Springer, 2014. 2, 5

[27] D. Liu, Z.-J. Zha, H. Zhang, Y. Zhang, and F. Wu. Context-
aware visual policy network for sequence-level image cap-
tioning. In 2018 ACM Multimedia Conference on Multime-
dia Conference, pages 1416–1424. ACM, 2018. 1, 6, 7, 8

[28] D. Liu, H. Zhang, Z.-J. Zha, and F. Wu. Learning to assem-
ble neural module tree networks for visual grounding. arXiv
preprint arXiv:1812.03299, 2018. 2

[29] J. Lu, J. Yang, D. Batra, and D. Parikh. Neural baby talk.
In Proceedings of the IEEE Conference on Computer Vision
and Pattern Recognition, pages 7219–7228, 2018. 1, 2, 3

[30] R. Luo, B. Price, S. Cohen, and G. Shakhnarovich. Discrim-
inability objective for training descriptive captions. In Pro-
ceedings of the IEEE Conference on Computer Vision and
Pattern Recognition, pages 6964–6974, 2018. 1

[31] D. Marcheggiani and I. Titov. Encoding sentences with graph
convolutional networks for semantic role labeling. In Pro-
ceedings of the 2017 Conference on Empirical Methods in
Natural Language Processing, pages 1506–1515, 2017. 2

10693

[32] D. Marr. Vision: A computational investigation into the hu-
man representation and processing of visual information. mit
press. Cambridge, Massachusetts, 1982. 1

[33] M. Mitchell, X. Han, J. Dodge, A. Mensch, A. Goyal,
A. Berg, K. Yamaguchi, T. Berg, K. Stratos,
and
H. Daum´e III. Midge: Generating image descriptions from
computer vision detections. In Proceedings of the 13th Con-
ference of the European Chapter of the Association for Com-
putational Linguistics, pages 747–756. Association for Com-
putational Linguistics, 2012. 2

[34] K. Papineni, S. Roukos, T. Ward, and W.-J. Zhu. Bleu: a
method for automatic evaluation of machine translation. In
Proceedings of the 40th annual meeting on association for
computational linguistics, pages 311–318. Association for
Computational Linguistics, 2002. 6

[35] M. Ranzato, S. Chopra, M. Auli, and W. Zaremba. Sequence

level training with recurrent neural networks. 2015. 1

Conference of the North American Chapter of the Associa-
tion for Computational Linguistics: Human Language Tech-
nologies, Volume 1 (Long Papers), pages 397–407. Associa-
tion for Computational Linguistics, 2018. 2

[48] C. Xiong, S. Merity, and R. Socher. Dynamic memory net-
works for visual and textual question answering.
In Inter-
national conference on machine learning, pages 2397–2406,
2016. 2, 4

[49] D. Xu, Y. Zhu, C. B. Choy, and L. Fei-Fei. Scene graph gen-
eration by iterative message passing. In Proceedings of the
IEEE Conference on Computer Vision and Pattern Recogni-
tion, volume 2, 2017. 2

[50] K. Xu, J. Ba, R. Kiros, K. Cho, A. Courville, R. Salakhudi-
nov, R. Zemel, and Y. Bengio. Show, attend and tell: Neural
image caption generation with visual attention. In Interna-
tional conference on machine learning, pages 2048–2057,
2015. 1, 2, 3

[36] J. Redmon and A. Farhadi. Yolo9000: Better, faster, stronger.
In 2017 IEEE Conference on Computer Vision and Pattern
Recognition (CVPR), pages 6517–6525. IEEE, 2017. 1

[51] J. Yang, J. Lu, S. Lee, D. Batra, and D. Parikh. Graph r-
cnn for scene graph generation. In European Conference on
Computer Vision, pages 690–706. Springer, 2018. 2

[37] S. Ren, K. He, R. Girshick, and J. Sun. Faster r-cnn: Towards
real-time object detection with region proposal networks. In
Advances in neural information processing systems, pages
91–99, 2015. 2, 3, 5

[52] X. Yang, H. Zhang, and J. Cai.

Shufﬂe-then-assemble:
Learning object-agnostic visual relationship features.
In
European Conference on Computer Vision, pages 38–54.
Springer, 2018. 2

[38] S. J. Rennie, E. Marcheret, Y. Mroueh, J. Ross, and V. Goel.
In

Self-critical sequence training for image captioning.
CVPR, volume 1, page 3, 2017. 1, 2, 3, 5, 6, 7, 8

[53] T. Yao, Y. Pan, Y. Li, and T. Mei. Exploring visual relation-
ship for image captioning. In Computer Vision–ECCV 2018,
pages 711–727. Springer, 2018. 2, 6, 8

[39] S. Schuster, R. Krishna, A. Chang, L. Fei-Fei, and C. D.
Manning. Generating semantically precise scene graphs
from textual descriptions for improved image retrieval.
In
Proceedings of the fourth workshop on vision and language,
pages 70–80, 2015. 4

[40] J. Shi, H. Zhang, and J. Li.

Explainable and ex-
plicit visual reasoning over scene graphs. arXiv preprint
arXiv:1812.01855, 2018. 2

[41] S. Sukhbaatar, J. Weston, R. Fergus, et al. End-to-end mem-
ory networks. In Advances in neural information processing
systems, pages 2440–2448, 2015. 2, 4

[54] T. Yao, Y. Pan, Y. Li, Z. Qiu, and T. Mei. Boosting image
captioning with attributes. In IEEE International Conference
on Computer Vision, ICCV, pages 22–29, 2017. 2, 6, 7, 8

[55] J. Yosinski, J. Clune, Y. Bengio, and H. Lipson. How trans-
ferable are features in deep neural networks? In Advances
in neural information processing systems, pages 3320–3328,
2014. 5

[56] R. Zellers, M. Yatskar, S. Thomson, and Y. Choi. Neural
motifs: Scene graph parsing with global context.
In Pro-
ceedings of the IEEE Conference on Computer Vision and
Pattern Recognition, pages 5831–5840, 2018. 2, 5

[42] K. Tang, H. Zhang, B. Wu, W. Luo, and W. Liu. Learning to
compose dynamic tree structures for visual contexts. arXiv
preprint arXiv:1812.01880, 2018. 2

[57] H. Zhang, Z. Kyaw, S.-F. Chang, and T.-S. Chua. Visual
translation embedding network for visual relation detection.
In CVPR, volume 1, page 5, 2017. 2

[58] Y. Zhang, J. Hare, and A. Pr¨ugel-Bennett. Learning to count
objects in natural images for visual question answering. In
ICLR, 2018. 5

[59] B. Zhao, L. Meng, W. Yin, and L. Sigal. Image generation

from layout. arXiv preprint arXiv:1811.11389, 2018. 2

[43] D. Teney, L. Liu, and A. van den Hengel. Graph-structured
representations for visual question answering. In 2017 IEEE
Conference on Computer Vision and Pattern Recognition
(CVPR), pages 3233–3241. IEEE, 2017. 2

[44] R. Vedantam, C. Lawrence Zitnick, and D. Parikh. Cider:
Consensus-based image description evaluation. In Proceed-
ings of the IEEE conference on computer vision and pattern
recognition, pages 4566–4575, 2015. 2, 3, 6

[45] O. Vinyals, C. Blundell, T. Lillicrap, D. Wierstra, et al.
Matching networks for one shot learning.
In Advances in
Neural Information Processing Systems, pages 3630–3638,
2016. 2, 4

[46] O. Vinyals, A. Toshev, S. Bengio, and D. Erhan. Show and
tell: A neural image caption generator. In CVPR, 2015. 2, 3
[47] Y.-S. Wang, C. Liu, X. Zeng, and A. Yuille. Scene graph
parsing as dependency parsing. In Proceedings of the 2018

10694

