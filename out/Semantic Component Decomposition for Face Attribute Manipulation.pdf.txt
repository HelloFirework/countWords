Semantic Component Decomposition for Face Attribute Manipulation

Ying-Cong Chen1 Xiaohui Shen4

Zhe Lin3 Xin Lu3

1The Chinese University of Hong Kong
{ycchen,leojia}@cse.cuhk.edu.hk

2Tencent Youtu Lab
shenxiaohui@gmail.com

I-Ming Pao3
3Adobe Research

2

Jiaya Jia1
4ByteDance AI Lab

,

{zlin, xinl, pao}@adobe.com

Abstract

Deep neural network-based methods were proposed for
face attribute manipulation. There still exist, however, two
major issues, i.e., insufﬁcient visual quality (or resolution)
of the results and lack of user control. They limit the appli-
cability of existing methods since users may have different
editing preference on facial attributes.
In this paper, we
address these issues by proposing a semantic component
model. The model decomposes a facial attribute into mul-
tiple semantic components, each corresponds to a speciﬁc
face region. This not only allows for user control of edit
strength on different parts based on their preference, but
also makes it effective to remove unwanted edit effect. Fur-
ther, each semantic component is composed of two funda-
mental elements, which determine the edit effect and region
respectively. This property provides ﬁne interactive control.
As shown in experiments, our model not only produces high-
quality results, but also allows effective user interaction.

1. Introduction

The popularity of sharing selﬁes and portrait photos on-
line motivates the rapid development of face edit tools.
Facial attribute manipulation is especially attractive with
the functions of adding/removing face accessories, such as
facial hair and eyeglasses, and/or changing intrinsic face
properties, such as age and gender.

Facial attribute manipulation has attracted great interest
[10, 2, 4, 3, 30, 26, 22], because of the great chance it brings
to research and real-world application. Early work focuses
on speciﬁc attributes of facial hair generation [1], expres-
sion change [31, 22, 30], beautiﬁcation/de-beautiﬁcation
[14, 6], aging [10], etc. These approaches are designed for
speciﬁc tasks, and require prior knowledge that is not appli-
cable to new editing tasks.

Recently, with the development of deep neural networks,
especially generative adversarial networks, several gen-
eral face attribute manipulation frameworks were proposed
[20, 19, 12, 16, 17, 32, 13, 8]. These approaches take fa-
cial attribute edit as an unpaired learning task, and thus are

capable of handling different attributes by only changing
the data. Our method can be categorized into this group,
which aims to provide a general solution for different facial
attributes.

Limitation of Existing Solutions Since most facial at-
tributes of a person are immutable within a short period
of time, collecting paired images with only desired change
seems difﬁcult and costly. Most frameworks resort to the
Generative Adversarial Network (GAN) [8, 32, 29, 17, 27,
16, 11, 13, 20, 24, 35, 25, 7, 19, 35, 34], which is popular
for unsupervised learning. However, despite recent progress
[9, 25], training a suitable GAN is still difﬁcult.

In addition, there is no effective indicator to monitor the
training process, which makes it hard to choose the “best”
model during training. These difﬁculties could cause non-
optimal training and produce unsatisfying results. Note that
when the result is not as expected, there is few options to
guide the system to ﬁx the problem.

Our Solution Inspired by CapsuleNet [18] that divides the
ﬁnal prediction to smaller parts, we seek for an approach
that divides a high-level attribute edit into multiple seman-
tic components, where each works on one semantic region
of a human face. With this scheme, our model allows
component-level user control, which is more ﬂexible than
existing solutions.

Moreover, we decompose each component into two fac-
tors, i.e., the attention map and the semantic painter. The
attention map highlights altered region of the correspond-
ing component, and the semantic painter corresponds to the
kind of effect applied to that region. These two factors en-
able us to manipulate each component by changing either
the edit region or the semantic painter. This further allows
interactive manipulation.

It is notable that our system conceptually mimics the way
image-editing software works: different semantic compo-
nents can be viewed as “layers” in Photoshop, and all layers
jointly compose the ﬁnal edit result. During testing, our
model generates an initial high-quality result for the target
attribute. If users have other requirements, they can further
adjust it in different levels of our system output.

Despite the simple and natural work-ﬂow, decomposing

9859

a high-level face attribute into different components is not
trivial. For example, changing the age of a person may
need to edit his/her eyes, nose, mouth, skin, etc, which are
too complicated and tedious for people to label respectively.
Our model instead learns such decomposition in an end-to-
end manner using unpaired data.

Speciﬁcally, our model is composed of three parts, i.e.,
AttentionNet, PainterNet, and FusionNet. AttentionNet
produces attention maps that ﬁgure out the edit region.
PainterNet produces a vector that controls the edit effect on
the corresponding region, while FusionNet combines each
pair of edit region and semantic painter to produce the ﬁ-
nal result. Compared with GAN, this training strategy is
more robust and works generally on different resolutions
and styles. Our main contributions are the following.

• We propose a semantic-component-based framework
for face attribute manipulation. It is the ﬁrst attempt to
learn semantic components from high-level attributes.

• Our model improves edit quality. It beneﬁts from com-
ponent decomposition that partitions an edit into rele-
vant and irrelevant parts, where the latter can be re-
moved for more dedicated focus on important regions.

• Our model also allows adjusting edit strength of differ-
ent components and manipulating edit effect on each
component. Thus it shows an effective way for inter-
active editing.

while our method can handle both local and global at-
tributes like face aging. Further, our method discovers sub-
properties for global attributes, allowing controlling each
local region conveniently. HDGAN [25] and Progressive
GAN [9] achieved much better results than previous GANs.
But HDGAN does not edit images based on high-level at-
tributes, while progressive GAN is designed for image gen-
eration, which handles tasks different from ours.
Deep Feature Interpolation In addition to the GAN based
frameworks, deep feature interpolation (DFI) [23] was em-
ployed for face attribute manipulation. By shifting deep fea-
tures of the query image with certain attribute tensor, the
semantic facial attributes can be updated accordingly. The
drawback is that estimation of shifting tensors may be noisy
[5], which cause undesired changes. Also, the computa-
tional burden is high. In [5], these problems were alleviated
by using a three-layer CNN to learn the attribute shifting
tensor.

Our work is related to [5], and yet is fundamentally dif-
ferent in two aspects. First, in [5], a shallow CNN was
used to avoid ﬁtting noise. This also prevents the model
from learning target attributes precisely.
In contrast, our
approach decomposes the attribute shifting tensor into sev-
eral components, so that the noisy components can be sup-
pressed individually. This advantage allows our model to
use more powerful structures. Second, our model supports
more user interaction while [5] only allows changing the
overall edit strength. Thus our model can better meet dif-
ferent users’ preference.

2. Related Work

3. Our Method

Early Solutions Face edit has been studied for years [10,
2, 4, 3, 30, 26, 22]. Most early work is for speciﬁc tasks,
such as face aging [10], relighting [26, 2], and expression
editing [30]. Our method is contrarily a general framework
for face attribute manipulation and is by nature different.
Generative Adversarial Network Several recent methods
utilize GAN to build general face attribute manipulation
frameworks. Face attribute disentangling [8, 32, 29, 17, 27,
16, 11, 13, 20, 24, 28] decomposes human faces in a deep
space where part of the features serve as attribute tags. By
altering these tags, the original face can be manipulated ac-
cordingly. However, disentangling is not easy to achieve,
and reconstructing face images based on the altered tags
may not be correct.

A simpler way to edit face attributes is to take it as a
set-to-set image transformation task. Cycle-GAN [34] and
its variants [35, 25, 7, 19, 35] are typical methods. This
line avoids face disentangling and thus simpliﬁes the prob-
lem. Nevertheless, the systems are hard to train and the
results may contain visual artifacts. SaGAN [33] used spa-
tial attention to avoid problems of irrelevant regions.
It
focuses on local attributes like facial hairs or eyeglasses,

Since face manipulation with traditional image process-
ing tools only considers pixel-level information, we propose
a model working in semantic level, which is more user-
friendly.

Suppose there are two face domains that differ on certain
semantic attribute S. We denote the negative samples as
S − and the positive ones as S +. Our goal is to transfer
image properties from S − to S +. Note that the training
images are collected from daily photos, which might vary
in background, illumination, viewpoint, etc. We expect the
model not to alter any region and property irrelevant to S.

3.1. The Baseline Model

Generally speaking, face attribute edit can be represented
as IS+ = O(IS− , VS ), where IS− , IS+ ∈ RH×W ×3 are
images with attribute S − and S +, H and W are the height
and width, VS denotes an “attribute tensor” that carries in-
formation about the attribute S, O(·) denotes a function that
transforms IS− to IS+ based on VS . By changing different
VS , corresponding attributes can be manipulated accord-
ingly.

9860

It is found that O(IS− , VS ) can be simpliﬁed to linear

interpolation in proper deep space [23], i.e.,

several different “painters” on distinct regions of face image
IS− . Speciﬁcally, we assume that

φ(IS+ ) = φ(IS− ) + λVS ,

(1)

VS = F(P1, P2, · · · , Pk, M1, M2, · · · , Mk),

(3)

where φ(IS− ), φ(IS+ ) ∈ Rh×w×c are deep feature maps
of IS− and IS+ respectively. h, w and c are the height,
width and channel numbers of the feature map respectively.
VS ∈ Rh×w×c controls the shift direction in the deep space.
λ ∈ (0, ∞) controls the edit strength. According to [23],
φ(·) can be deﬁned by a pretrained VGG [21] network. Af-
ter computing Eq. (1), IS+ is obtained by inverting φ(IS+ )
through back-propagation [23] or training an inversion net-
work [5].

As different IS− could appear quite differently, VS
should be adaptive to IS− . DFI [23] used K neighbors of
IS− to compute VS . Speciﬁcally, it is calculated as

VS =

1
K X

i∈N S+

K

φ(Ii) −

1
K X

i∈N S−

K

φ(Ii),

(2)

K /N S−

where N S+
K refer to K positive/negative nearest
neighbors of the query sample respectively. This averaging
operation in Eq. (2) aims at suppressing irrelevant changes
apart from the target attribute S [23, 5].

In spite of the insightful architecture and several decent

results, this model has two drawbacks as follows.

1. Simply using averaging in Eq. (2) does not suppress all
undesired changes (as discussed in Section 4.1). Al-
though learning VS with a shallow CNN alleviates this
problem [5], quality of attribute is sacriﬁced.

2. It does not allow altering edit strength of each part,
which hinders friendly edit interaction by users, espe-
cially considering individual users may have their re-
spective preference in face edit.

To address these issues, we propose a component-based
model, which decomposes VS into different components
VSi , 1 ≤ i ≤ k. Each component corresponds to one kind
of change. Thus users can control the edit strength sep-
arately. With this design, the undesirable changes can be
removed by simply setting the edit strength to 0 regarding
these components. Our model also supports ﬁne-grained
component edit, where users can ﬁnely adjust edit style and
region for each component VSi .

3.2. Key Components of Our Model

Generally, interactive digital image edit requires users
to select a “painter”, then applies it to certain regions of
the image. This natural interaction philosophy prompts us
to consider VS in Eq. (2) as the result of applying one or

where Pi denotes the i-th “Painter”. Mi ∈ Rh×w×c is the
mask that deﬁnes the region where Pi acts on. F(·) denotes
the network that predicts VS based on P and M.

Recall that VS should be adaptive to the input image

φ(IS− ) [23, 5], we further let

Pi = FPi (φ(IS− )), Mi = FMi (φ(IS− )),

(4)

where FPi (·) and FMi (·) are neural networks that predict
Pi and Mi based on φ(IS− ) respectively. In practice, VS
can be estimated with Eq. (2). This process makes the pa-
rameters of F , FPi and FMi be learned in an end-to-end
manner – that is, we learn to predict VS based on φ(IS− ).

Since different pairs of Pi and Mi are expected to be

unrelated, Eq. (3) is further simpliﬁed to

VS =

k

X

i=1

VSi ,

(5)

where VSi = Fi(FPi (φ(IS− )), FMi (φ(IS− ))). The Fi(·)
is a Fusion Network that predicts VSi based on the estimated
Pi and Mi. Here, a high-level attribute tensor VS is viewed
as a linear combination of different components VSi , 1 ≤
i ≤ k. Each component VSi handles only one speciﬁc kind
of effect (determined by Pi ) on the corresponding region
(determined by Mi).

Spatial/Channel Information Concentration Note that
in our model, Pi and Mi have precise physical meaning.
As Pi plays the role of “painter”, it should carry only in-
formation about the “effect” instead of the spatial region.
On the contrary, Mi denotes the location where Pi acts on.
Thus it should contain only spatial information instead of
the effect data. Hence, we design the shape of Pi and Mi
as Eq. (6) to remove redundant information.

Pi ∈ R1×1×c, Mi ∈ Rh×w×1.

(6)

In the Fusion Network Fi(·), Pi is spatially repeated to
Rh×w×c and concatenated with Mi. Vi is predicted with
this concatenated feature. Since Pi and Mi together deter-
mine VSi ∈ Rh×w×c, this setting forces them to consider
spatial and channel data respectively. As a result, Pi and
Mi encode different types of information as expected.

Also, note that one component is conditioned on one
painter vector Pi. This enforces each component to handle
only one effect, and makes corresponding regions located
correctly rather than spread arbitrarily to unrelated regions.
This simpliﬁes and clariﬁes the semantic meaning of VSi for
users and makes it easy to adjust the corresponding compo-
nent later if needed.

9861

 (!"#)

Painter Net  !

 !

 "

Fusion Net  !

#!

#"

Region Net  !

Fusion Net  
!

Sum

$"

 (!"%)

$%&

$%’

(a) VGG Encoder

(b)  ! and  !

(c) Painter  ! and Region  !

(d) Fusion Net  

(e) VGG Decoder

Figure 1. Pipeline illustration. (a) is a pretrained VGG to encode the input image in the deep space φ(IS− ) where weights are ﬁxed. (b)
is our proposed Painter Network FP and FM. (c) illustrates the painter vectors Pi and region maps Mi. Pi and Mi are paired before
fed into the Fusion Network. (d) is the Fusion Network F that fuses Pi and Mi to produce semantic component VSi . All semantic
components are ﬁnally summed to form VS . After that, φ(IS+ ) is computed by Eq. (1). (e) is the VGG decoder trained to invert φ(IS+ )
to IS+ . The architecture and training of the decoder follow [5].

Towards Non-overlapping Regions
In addition to re-
stricting each semantic component to only encode one ef-
fect, another key issue is to ensure that each facial region
is only affected by one dominant component. Otherwise,
users could be confused if one edit alters many compo-
nents in following interactive manipulation. This isolation
requires to keep all region masks Mi, k = 1, 2, · · · , k non-
overlapping.

Speciﬁcally, let M(m, n) = [M1(m, n), M2(m, n),
· · · , Mi(m, n)], where (m, n) is the location. The non-
overlapping constraint is formulated as ||M(m, n)||0 = 1,
which indicates that for each location, M(m, n) is encoded
as a one-hot vector.

Intuitively, it is achieved by setting the maximum ele-
ment of M(m, n) to 1 and all others to 0. But unfortu-
nately, this scheme is not differentiable. So we seek for
a soft version to approximate it, so that back-propagation
gradients exist to train the network. Our approximation is
expressed as

Mi(m, n) ←

eβMi(m,n)
j=1 eβMj (m,n)

Pk

,

(7)

where β is a positive scalar that controls the degree of sharp-
ness. A large β exaggerates the difference of elements in
M(m, n).
In extreme cases, the maximum element be-
comes 1 while the others are 0, making M(m, n) a nearly
one-hot vector. It is noted that a very large β may cause the
network difﬁcult to train. In this paper, we set β = 2.

The softly encoded region masks are also leveraged as
attention maps to highlight the dominant components and
suppress all others. This can be formulated as

VSi (m, n) ← Mi(m, n)VSi (m, n),

(8)

where VSi (m, n) ∈ R1×1×c refers to the (m, n) location of
VSi . With these strategies, for each location, the dominant
component is highlighted while the others are suppressed.

3.3. Network Architecture

Our network architecture is based on the key components
discussed in Section 3.2. Speciﬁcally, we use a Painter Net-
work FP (φ(IS− )) to produce k vectors that control the ef-
fect of semantic components. We also propose a Attention
Network FM(φ(IS− )) to produce corresponding attention
maps. Finally, we use k Fusion Networks to fuse the k pairs
of painter vectors and attention maps. Each pair outputs one
component VSi . These k components are then summed to
VS . The pipeline is visualized in Fig 1.

3.4. Interactive Editing

The proposed architecture is highly ﬂexible and thus al-
lows users to adjust results in different levels. The coarsest
level is to change the global effect like [23, 5], which is to
update λ in Eq. (1). In addition, our network linearly de-
composes VS to different semantic components VSi as indi-
cated in Eq. (5). This allows us to control the edit strength
of different components separately. Unwanted edit can be
totally removed by setting the edit strength to zero.

Further, because each component VSi is determined by
Pi and Mi, they can also be edited by changing Pi and
Mi. Note that Mi is a one-channel attention map, which
contains large values on updated regions and small ones oth-
erwise. It is thus intuitive for users to directly “draw” on
Mi. Pi, contrarily, is a spatial-invariant vector related to
the type of effect. With it, we can easily alter styles of VSi
by replacing Pi.

4. Experiments

We use the face attribute dataset CelebA [15] to train and
test our model. The large and diverse face dataset contains
202,599 images of 10,177 identities. In addition, there are
40 types of attribute annotation. They can be used to di-
vide the dataset into two domains to estimate VS in Eq. (2).
Three attribute-altering tasks are tested in this paper, includ-

9862

(a)

(b)

(c)

(d)

(e)

(f)

Figure 2. Illustration of visual effect of different components of attribute “younger”. (a) is the input. (b-f) shows gradual visual change
by incorporating different semantic components. The upper line shows the visual changes, and the lower line shows the edited region Mi
(Best view in original resolutions).

ing adding facial hair, turning older, and getting younger.
These attributes include various semantic components and
thus are suitable to evaluate the effectiveness of our net-
work. We unify the image resolution to 448 × 448, and
train our model with its training set. Since the resolution of
original CelebA is limited, we use its high-quality version
[9] during testing.

4.1. Evaluating Our Model

One key beneﬁt of our approach stems from the ability to
decompose an integrated attribute into several components
so that users can manipulate each of them separately. In this
section, we provide an extensive analysis of the component
decomposition property. We set k in Eq. (5) to 9, which is
large enough for most attributes. Although this may cause
some network branches to learn insigniﬁcant components,
our experiments show that it does not affect results because
insigniﬁcant components can be disabled during testing.

Visual Effect of Different Components
Intuitively, a
high-level facial attribute boils down to appearance change
of different face regions. For example, a young man/woman
usually has brighter eyes, fewer wrinkles, smoother skin
than a more senior person. So to make a face look younger,
these properties should be changed accordingly.

Our model captures these properties by components.
Fig. 2 shows different semantic components of attributes. It
reveals that our model decomposes attribute “younger” into
ﬁve components. The ﬁrst two components are in accor-
dance with our intuition that a younger person has brighter
eyes and smoother skin.
Interestingly, the 3rd-5th com-
ponents indicate that “younger” means thicker eyebrow,
brighter lip color, and tighter face contour. These compo-
nents work subtly and jointly to make the result look more

(a) Skin

(b) Eyes

(c) Nose

Figure 3. Illustration of changing edit strength of the “older” at-
tribute. For each row, the ﬁrst image indicates the edit region Mi
of the corresponding component. The second image is the input
image. The 3rd and 4th images are results of setting different
edit strength of the corresponding components respectively. When
changing the strength of one component, we ﬁx weights of others
(Best view in original resolutions).

realistic.

Changing Component Strength Note that Eq. (5) can be
extended to

VS =

k

X

i=1

λiVSi ,

(9)

where λi ≥ 0 is the weight of the i-th component. This

9863

(a) Input

(b) All Components

(c) Unwanted Removed

(a) Input

(b) Initial Result

(c) Edited Result

(d) Input

(e) All Components

(f) Unwanted Removed

Figure 4. Examples of component-level manipulation. (a) Original
image. (b) Result of the “facial hair” attribute using all compo-
nents. (c) improves (b) using only the signiﬁcant components. (d)
Original image. (e) Result of attribute “femininity”. (f) Result of
“remove facial hair”. Note that (f) is obtained by only keeping the
component with edit on mouth and removing all others (Best view
in original resolutions).

allows us to control the weight of each component during
testing. Fig. 3 shows the result of changing the strength
of semantic components of the “older” attribute. This is
more advantageous compared with existing models [34, 19]
that do not support changing edit strength or only do that
globally [23, 5].

Removing Unwanted Components One special case of
Eq. (9) is to set certain λi to 0, i.e., totally removing these
components. This is important to improve output quality.
Recall that VS is computed with Eq. (2), which is only an
approximation to the genuine attribute tensor.

In practice, there inevitably exist unwanted edit in VS ,
which may harm the ﬁnal result. Our model decomposes VS
into multiple components, each controls one kind of effect.
Thus it is likely that noise is ﬁtted by certain components
of our model. Interestingly, discarding them leads to even
better results.

Fig. 4(a)-(c) shows an example of “facial hair” attribute.
It is a simple property that should cause change only on the
mouth region. However, as shown in Fig. 4(b), noise in
VS contaminates other unrelated regions (such as eyes and
nose). By removing these noisy components, the unwanted
edits are suppressed, as shown in Fig. 4(c).

Learn One and Get More
Our model also allows us
to obtain different edits from only one attribute. Note that
a complex attribute is usually composed of several sub-
attributes. Fig. 2(b)-(f) shows a few sub-attributes for the
“younger” change. In many cases, these sub-attributes are

Figure 5. Illustration of edit on the attention map Mi. (a) is the
input image. (b) shows the initial output automatically produced
by our model. (c) is the editing result. The bottom right images
of (b) and (c) are their corresponding Mi. (Best view in original
resolutions).

very useful for new effect generation. Taking the “feminin-
ity” attribute as an example, as shown in Fig. 4(e), we train
this attribute with the gender label and converts a male-look
towards a female-look.
Interestingly, during this training
process, another semantic edit – “remove facial hair” – is
also learned as one component, as shown in Fig. 4(f).

Fine-grained Adjustment
In addition to changing the
edit strength of different components, our model also allows
ﬁne-grained control, which is to directly manipulate each
component. Note that each component VSi is decomposed
into two factors: the painter Pi and the edited region Mi.
By manipulating Mi, the edited region can be controlled.
Contrarily, with modiﬁed Pi, the edit style is updated. We
showcase the effects in the following.
- Effect 1: Editing Mi Mi provides spatial informa-
tion of component VSi according to Eqs. (5) and (6). As
Mi is 2-D attention map, manipulating Mi is simple and
straightforward. Fig. 5 shows an example of manipulating
the shape of facial hair by only changing the shape of Mi.
Pi serves as the complemen-
- Effect 2: Changing P i
tary part of Mi to instantiate VSi . Thus it is deemed as
controlling the type of effect on the corresponding region
Mi. Note that most high-level attributes have more than
one instantiations, which means VS in the training set con-
tains different Pi. So during testing, if the user is not satis-
ﬁed with the initial instantiation of the attribute change, s/he
can replace Pi with others to update results, as illustrated in
Fig. (6).

Running Time We report the running time with image
size 448 × 448, and the system runs on a Titan X graph-
ics card. Our framework can be divided into 3 parts, i.e.,
the VGG encoder, the decoder, and our semantic compo-
nent model. The VGG encoder takes 0.008 second, and the
decoder takes 0.014 second. The time cost of our model
varies from 0.026 (with 1 component) to 0.048 (with 5 com-
ponents) second. The time complexity variation is due to
various types of attributes that require different numbers of
components to compute. For simple attributes, such as fa-

9864

(a) Facial hair

(b) Older

(c) Younger

Figure 6. Illustration of changing instantiation by modifying Pi.
We pre-compute different Pi in the training set, and randomly pick
one to replace the predicted Pi of the query image. (a) illustrates
facial hair attribute. The color and texture of the facial hair are
different. (b) illustrates the “older” attribute. The cheek, eyebrows
and eyes are different. (c) illustrates the “younger” attribute. The
skin color, eyebrows and mouth are different. (Best view in orig-
inal resolutions).

cial hair, it requires only 1 component and thus can run re-
ally fast. For more global and complicated effect like get-
ting younger or older, it needs more components. Neverthe-
less, even for the very complicated edit, the running time is
still acceptable for interactive editing with above statistics.

4.2. Comparison with State of the Arts

In addition to high ﬂexibility, a fundamental advantage
of our method is that in most cases, it produces high-quality
results even on its initial proposals. To validate this, we
compare our approach with two categories of approaches,
i.e., DFI (Deep Feature Interpolation) based approaches
[23, 5] and GAN based approaches [27, 19].

For fair comparison, the weights of all semantic compo-
nents are set equal. After training, we discard branches that
produce noise, and only use branches that produce signiﬁ-
cant semantic components.

Facial hair
Older
Younger

Facial hair
Older
Younger

Ours>DFI

Ours>Facelet

52.8%
50.2%
65.3%

52.9%
54.0%
87.6%

Ours>CycleGAN Ours>ResGAN

61.7%
58.2%
71.3%

85.7%
87.0%
91.5%

Table 1. A/B test of image quality. Each entry reports the percent-
age among the 1,000 comparisons that images generated by our
approach are better than those of other solutions.

to process an image. Facelet Bank accelerates it by using a
3-layer CNN to predict Eq. (2). Since the methods are re-
lated, the quality regarding the target attribute is compara-
ble. Nevertheless, beneﬁting from component decomposi-
tion, our work yields the advantage of removing unwanted
edit. For example, for the “older” attribute in the 1st and
3rd rows, DFI and Facelet Bank adversely modify the back-
ground and hair respectively, while our approach correctly
updates the face regions.

Fig. 7(b) shows the comparison among our work, Cy-
cleGAN [34] and ResGAN [19]. CycleGAN is a general
framework for set-to-set image translation. ResGAN is
speciﬁcally designed for face edit that learns the residual
part of attribute change. Compared with these two methods,
our work consistently generates more reliable and higher
quality effect. For example, ResGAN fails to generate fa-
cial hair for the 4th person, and CycleGAN does not pro-
duce signiﬁcant “younger” attribute for the 1st person.

Further, our method can handle images in higher resolu-
tions compared with CycleGAN (256 × 256) and ResGAN
(128 × 128). It is known that high-res images make it eas-
ier to tell the generated images apart from the training ones,
making the discriminators hard to provide signiﬁcant gra-
dient information to update the generators. Our approach
does not have such problems since it is trained with a sim-
ple L2-loss. Higher resolutions do not increase the difﬁculty
of producing similar-quality effect during face edit.

Quantitative Evaluation We also conduct a randomized
pair-wise comparison of images edited by our approach and
the baseline methods on the Amazon Mechanical Turk plat-
form. Each time users are given an original image, two
edited ones (ours vs. another method) and the edit target
(facial hair, getting older or younger), and are asked to pick
one with the higher quality and less incorrect edit. Statis-
tics in Table 1 show that our approach outperforms all other
alternatives.

4.3. Limitations

Qualitive Evaluation
Fig. 7(a) shows the comparison
with DFI [23] and Facelet Bank [5]. DFI manipulates an
image by directly using Eq. (2), which takes about 1 minute

Similar to DFI [23] and Facelet [5], our model leverages
a pretrained VGG network as the encoder. Note that this
encoder is not updated during training. This may restrict

9865

Facial Hair

Younger

Older

Original

Ours

DFI

Facelet

Ours

DFI

Facelet

Ours

DFI

Facelet

Facial Hair

(a)

Younger

Older

Original

Ours

ResGAN

CycleGAN

Ours

ResGAN

CycleGAN

Ours

ResGAN

CycleGAN

Figure 7. (a) Comparison with (a) DFI [23] and Facelet-Bank [5] and with (b) CycleGAN [34] and ResGAN [19]. Please zoom in to see
more details.

(b)

the scope of application. If the target attribute is not well
represented in the latent space, our model may not learn
any signiﬁcant component. In our experiments, we found
that our model is not suitable for tasks that require large
geometry change, such as face frontalization.

5. Concluding Remarks

The presented method is the ﬁrst of its kind to decom-
pose semantic components from high-level attributes. This
on the one hand allows more user control of the face at-

tribute manipulation, avoids false edit, and improves results.
On the other hand, it improves our fundamental understand-
ing of what kind of changes lead to certain attributes and
makes the edit more interpretable. Other beneﬁts of our so-
lution include the fast computation speed that even allows
interactive editing. Extensive experiments manifest that our
approach achieves high-quality results and show the new
way to facilitate user-friendly realistic photo editing.

9866

[21] K. Simonyan and A. Zisserman. Very deep convolutional

networks for large-scale image recognition. arXiv, 2014. 3

[22] J. Thies, M. Zollh¨ofer, M. Nießner, L. Valgaerts, M. Stam-
minger, and C. Theobalt. Real-time expression transfer for
facial reenactment. TOG, 2015. 1, 2

[23] P. Upchurch, J. Gardner, K. Bala, R. Pless, N. Snavely, and
K. Weinberger. Deep feature interpolation for image content
changes. In CVPR, 2017. 2, 3, 4, 6, 7, 8

[24] C. Wang, C. Wang, C. Xu, and D. Tao. Tag disentangled gen-
erative adversarial network for object image re-rendering. In
IJCAI, 2017. 1, 2

[25] T.-C. Wang, M.-Y. Liu, J.-Y. Zhu, A. Tao, J. Kautz, and
B. Catanzaro. High-resolution image synthesis and semantic
manipulation with conditional gans. In CVPR, 2018. 1, 2

[26] Y. Wang, L. Zhang, Z. Liu, G. Hua, Z. Wen, Z. Zhang, and
D. Samaras. Face relighting from a single image under arbi-
trary unknown lighting conditions. TPAMI, 2009. 1, 2

[27] T. Xiao, J. Hong, and J. Ma. Dna-gan: Learning disentangled
representations from multi-attribute images. arXiv, 2017. 1,
2, 7

[28] T. Xiao, J. Hong, and J. Ma. Elegant: Exchanging latent
encodings with gan for transferring multiple face attributes.
In ECCV, 2018. 2

[29] X. Yan, J. Yang, K. Sohn, and H. Lee. Attribute2image: Con-
ditional image generation from visual attributes. In ECCV,
2016. 1, 2
[30] F. Yang,

J. Wang, E. Shechtman, L. Bourdev, and
D. Metaxas. Expression ﬂow for 3d-aware face component
transfer. TOG, 2011. 1, 2

[31] R. Yeh, Z. Liu, D. B. Goldman, and A. Agarwala. Seman-
tic facial expression editing using autoencoded ﬂow. arXiv,
2016. 1

[32] W. Yin, Y. Fu, L. Sigal, and X. Xue. Semi-latent gan: Learn-
ing to generate and modify facial images from attributes.
arXiv, 2017. 1, 2

[33] G. Zhang, M. Kan, S. Shan, and X. Chen. Generative adver-
sarial network with spatial attention for face attribute editing.
In ECCV, 2018. 2

[34] J.-Y. Zhu, T. Park, P. Isola, and A. A. Efros. Unpaired image-
to-image translation using cycle-consistent adversarial net-
works. In ICCV, 2017. 1, 2, 6, 7, 8

[35] J.-Y. Zhu, R. Zhang, D. Pathak, T. Darrell, A. A. Efros,
O. Wang, and E. Shechtman. Toward multimodal image-
to-image translation. In NIPS, 2017. 1, 2

References

[1] T. Beeler, B. Bickel, G. Noris, P. Beardsley, S. Marschner,
R. W. Sumner, and M. Gross. Coupled 3d reconstruction of
sparse facial hair and skin. ToG, 2012. 1

[2] V. Blanz, C. Basso, T. Poggio, and T. Vetter. Reanimating
faces in images and video. In Comput. Graph. Forum, 2003.
1, 2

[3] V. Blanz and T. Vetter. A morphable model for the synthe-
In Ann. Conf. Comput. Graph. Interactive

sis of 3d faces.
Techn., 1999. 1, 2

[4] C. Cao, Y. Weng, S. Zhou, Y. Tong, and K. Zhou. Faceware-
house: A 3d facial expression database for visual computing.
TVCG, 2014. 1, 2

[5] Y.-C. Chen, H. Lin, M. Shu, R. Li, X. Tao, Y. Ye, X. Shen,
In

and J. Jia. Facelet-bank for fast portrait manipulation.
CVPR, 2018. 2, 3, 4, 6, 7, 8

[6] Y.-C. Chen, X. Shen, and J. Jia. Makeup-go: Blind reversion

of portrait edit. In ICCV, 2017. 1

[7] Y. Choi, M. Choi, M. Kim, J.-W. Ha, S. Kim, and J. Choo.
Stargan: Uniﬁed generative adversarial networks for multi-
domain image-to-image translation. In CVPR, 2018. 1, 2

[8] Z. He, W. Zuo, M. Kan, S. Shan, and X. Chen. Arbitrary
facial attribute editing: Only change what you want. arXiv,
2017. 1, 2

[9] T. Karras, T. Aila, S. Laine, and J. Lehtinen. Progressive
growing of gans for improved quality, stability, and variation.
In ICLR, 2018. 1, 2, 5

[10] I. Kemelmacher-Shlizerman, S. Suwajanakorn, and S. M.
Seitz. Illumination-aware age progression. In CVPR, 2014.
1, 2

[11] T. Kim, B. Kim, M. Cha, and J. Kim. Unsupervised visual
attribute transfer with reconﬁgurable generative adversarial
networks. arXiv, 2017. 1, 2

[12] J. Kossaiﬁ, L. Tran, Y. Panagakis, and M. Pantic. Gagan:
Geometry-aware generative adverserial networks. In CVPR,
2018. 1

[13] G. Lample, N. Zeghidour, N. Usunier, A. Bordes, L. De-
noyer, et al. Fader networks: Manipulating images by sliding
attributes. In NIPS, 2017. 1, 2

[14] T. Leyvand, D. Cohen-Or, G. Dror, and D. Lischinski. Digi-

tal face beautiﬁcation. In Siggraph, 2006. 1

[15] Z. Liu, P. Luo, X. Wang, and X. Tang. Deep learning face

attributes in the wild. In ICCV, 2015. 4

[16] D. Ma, B. Liu, Z. Kang, J. Zhu, and Z. Xu. Two birds with
one stone: Iteratively learn facial attributes with gans. arXiv,
2017. 1, 2

[17] G. Perarnau, J. van de Weijer, B. Raducanu, and J. M.
´Alvarez. Invertible conditional gans for image editing. arXiv,
2016. 1, 2

[18] S. Sabour, N. Frosst, and G. E. Hinton. Dynamic routing

between capsules. In NIPS, 2017. 1

[19] W. Shen and R. Liu. Learning residual images for face at-

tribute manipulation. In CVPR, 2017. 1, 2, 6, 7, 8

[20] Z. Shu, E. Yumer, S. Hadap, K. Sunkavalli, E. Shechtman,
and D. Samaras. Neural face editing with intrinsic image
disentangling. In CVPR, 2017. 1, 2

9867

