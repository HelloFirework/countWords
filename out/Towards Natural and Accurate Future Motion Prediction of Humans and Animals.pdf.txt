Towards Natural and Accurate Future Motion Prediction of Humans and

Animals

Zhenguang Liu∗1, Shuang Wu∗2,3, Shuyuan Jin4, Qi Liu4, Shijian Lu3, Roger Zimmermann4, Li Cheng2,5

1Zhejiang Gongshang University, 2Bioinformatics Institute, A*STAR,

3Nanyang Technological University, 4National University of Singapore, 5University of Alberta

liuzhenguang2008@gmail.com, wushuang@bii.a-star.edu.sg, shuyuanjin@u.nus.edu,

leuchine@gmail.com, shijian.lu@ntu.edu.sg, rogerz@comp.nus.edu.sg, chengli@bii.a-star.edu.sg

Abstract

Anticipating the future motions of 3D articulate objects
is challenging due to its non-linear and highly stochastic
nature. Current approaches typically represent the skeleton
of an articulate object as a set of 3D joints, which unfor-
tunately ignores the relationship between joints, and fails
to encode ﬁne-grained anatomical constraints. Moreover,
conventional recurrent neural networks, such as LSTM and
GRU, are employed to model motion contexts, which inher-
ently have difﬁculties in capturing long-term dependencies.
To address these problems, we propose to explicitly encode
anatomical constraints by modeling their skeletons with a
Lie algebra representation. Importantly, a hierarchical re-
current network structure is developed to simultaneously
encodes local contexts of individual frames and global con-
texts of the sequence. We proceed to explore the applica-
tions of our approach to several distinct quantities includ-
ing human, ﬁsh, and mouse. Extensive experiments show
that our approach achieves more natural and accurate pre-
dictions over state-of-the-art methods.

1. Introduction

For a human being, it is usually not very hard to pre-
dict short-term future motions of the moving objects around
them. Without this ability, it would be extremely difﬁcult
for us to walk in a crowded street, get past defenders in
a football game, or avoid imminent dangers in movement.
Similarly, anticipating the movements of articulate objects,
especially humans and animals, is crucial for a machine to
adjust its behavior, plan its action, and properly allocate its
attention when interacting with humans and animals. Natu-
ral and accurate future motion prediction is also highly valu-
able for a wide range of applications including high-ﬁdelity

∗Denotes equal contribution

animal simulation in games and movies, human or animal
tracking, and intelligent driving [4, 25, 21, 31].

In this paper, we focus on the problem of predicting fu-
ture 3D poses of an articulate object given its prior skeleton
sequence. The problem is challenging due to the non-linear
dynamics, high dimensionality, and stochastic nature of hu-
man or animal movements. Conventional approaches utilize
latent-variable models, such as hidden Markov models [18],
Gaussian processes [29], and restricted Boltzmann machine
[26] to capture the temporal dynamics of human motions.
Recently, recurrent neural networks (RNNs) based methods
are introduced with improved performance. For example,
[9] uses an Encoder-Recurrent-Decoder network where the
long short-term memory (LSTM) is utilized in the recurrent
layer. [17] divides human body into spine, arms, and legs,
and uses multiple RNNs to model interactions between dif-
ferent body parts. Further, [21] and [25] resort to residual
Gated Recurrent Unit (GRU) and Modiﬁed Highway Unit
(MHU) to capture motion contexts.

Scrutinizing the released implementations of existing
methods [17, 21, 9], one observes that current methods of-
ten encounter difﬁculties in obtaining natural and accurate
future motion prediction. Speciﬁcally, for relatively long-
term prediction, existing methods tend to degrade into mo-
tionless states or drift away to non-human like motions. For
short-term prediction, there often exists a clear discontinu-
ity between the prior pose sequence and the ﬁrst prediction
[17].
Interestingly, quantitative evaluations revealed that
many existing methods may be outperformed by a trivial
baseline that simply predicts the future as its last observed
pose [21].

We believe these issues are mainly due to the following
reasons. First, current algorithms do not respect the phys-
ical laws of motions based on the skeletal anatomy. This
often leads to strange distortions in the predicted motion.
Second, In modelling temporal motion dynamics, current
approaches rely on conventional recurrent units, such as

110004

LSTM and GRU, where the hidden state sequentially reads
in a frame and updates its value. The hidden state then tends
to be overwhelmed by the inputs in recent time steps and
such recurrent units are known to have difﬁculties in cap-
turing long-term dependencies [2]. Moreover, the sequen-
tial updating characteristic of these architectures may lend
itself to undesirable computational bottlenecks in practice.
To address these issues, we propose a novel architecture,
which consists of a dedicated Hierarchical Motion Recur-
rent (HMR) network incorporated with a Lie algebra rep-
resentation. Speciﬁcally, we characterize the pose of an
articulate object, being e.g. a human, a mouse or a ﬁsh,
as a kinematic tree consisting of one or multiple kinematic
chains based on the mathematical formalism of Lie algebra.
Fine-grained anatomical constraints are explicitly and natu-
rally encoded. The pose sequence is then fed into our pro-
posed HMR network to learn its temporal evolution. Mo-
tion contexts are jointly modeled by a state hierarchy con-
sisting of local states for individual frames and an overall
sequence-level state. At each recurrent step, a frame ex-
changes contextual information with its neighboring frames
in two directions, as well as with the sequence-level state.
Differing from the traditional RNN architecture, the num-
ber of recurrent steps in our network does not scale with the
sequence length. Empirically, our method can effectively
model motion contexts in around 10 recurrent steps.

Moreover, state-of-the-art motion prediction methods
typically focus on humans. The principled approach that
we have developed generalizes well across object categories
and is easily adapted to modeling animal motions. Empir-
ically, our approach achieves state-of-the-art results on the
H3.6m benchmark dataset with a much enhanced long-term
proﬁciency, capable of predicting natural human-like mo-
tions over 50 seconds, and works well on animal datasets
such as ﬁsh and mouse.

To summarize, our key contributions are: 1) A novel
hierarchical RNN structure is proposed to effectively
model global and local motion contexts.
2) A Lie al-
gebra skeletal representation is formalized following the
kinematic body structure, which explicitly encodes the
anatomical constraints, and is applicable to a range of
articulate objects including but not
limited to human
3) Our method sets the new state-of-the-art on
body.
short-term and long-term motion predictions, and over-
all provides insights into the challenges in motion con-
text modeling using RNNs. Our implementation can be
found on https://github.com/BII-wushuang/
Lie-Group-Motion-Prediction.

2. Related Work

Skeleton-based Human Pose Representation

Hu-
man pose representation is a fundamental problem in com-
puter vision and graphics. Skeleton-based human pose rep-

resentations have attracted intense attention due to their ro-
bustness to viewpoint change, human body scale and mo-
tion speed as well as real-time performance [11, 12]. Many
existing approaches such as [4, 13] directly utilize raw 3D
joint positions to represent human skeleton. [8] follows this
line of work but divides the human skeleton into hierar-
chical body parts, while [5] selects only a subset of most
informative joints.
[17] and [6] characterize the orienta-
tion of a joint by an exponential map introduced in [10].
Displacement based skeletal representation has also been
explored either as displacements between pairwise skeletal
joints such as in [28] or displacements w.r.t. a global ref-
erence joint (hip center) as in [19]. [15] & [27] model the
relative geometry between each pair of joints with the Spe-
cial Euclidean group SE(3).

Motion Prediction

Conventional motion prediction
approaches have typically utilized shallow models includ-
ing hidden Markov models [18], Gaussian processes [29],
and restricted Boltzmann machine [26] to learn temporal
dynamics of human motions. Recently, deep learning based
methods have attracted increasing interests due to their su-
perior performance. For instance, [9] presents an Encoder-
Recurrent-Decoder network where LSTM is utilized for the
recurrent layer and non-linear transformations are incorpo-
rated in the encoder and decoder. [21] employs GRU as the
RNN unit and estimates the joint velocities instead of di-
rectly predicting body pose. [17] represents human body
parts as a structured graph of node RNNs linked by edge
RNNs. [25] introduces a motion context modeling network
using modiﬁed highway unit, while [3] develops a proba-
bilistic human motion prediction network employing gen-
erative adversarial networks.

Animal Datasets Now, let us consider the other two
articulated objects that we investigate in this work, i.e., ﬁsh
and mouse. They are important model organisms in the life
science community and there are increasing interests and
efforts in development of visual behavioral analysis toolkits
adopting computer vision and machine learning. Existing
literature [7, 23, 22] mostly focus on pose estimation and
tracking. [14, 30] are two recent work analyzing mice social
behaviors, where a mouse is characterized by a straight-line
and an ellipse, respectively.

3. Our Approach

Problem Formulation

Presented with an observed
3D pose sequence hp1, p2, · · · , pti of an articulate object,
we are interested in predicting its future pose sequence
hpt+1, pt+2, · · · , pt+T i. Note pose sequences can now be
conveniently acquired by commodity motion capture sys-
tems or extracted from depth images and videos using pose
estimation algorithms (e.g., [24, 32]).

There have been efforts to cast a pose as 3D coordi-
nates of all skeletal joints [4], which in fact regards joints

10005

as independent entities and fails to capture intrinsic geo-
metric constraints. The prediction results may suffer from
severe body distortion (shown in Subsection 4.2). More
importantly, most existing approaches simply adopt LSTM
or GRU, which cannot model motion contexts, especially
long-term dependencies, effectively [2, 25].

Method Overview To tackle these problems, we pro-
pose an approach that consists of two key components: 1) a
hierarchical motion recurrent network (HMR) and 2) a uni-
ﬁed Lie algebra representation formalism. Speciﬁcally, we
develop a Lie algebra representation for articulate objects,
which follows the kinematic structure of the body and ex-
plicitly encodes the geometric constraints and actual DoFs
(degrees of freedom) of individual joints. Then the pose
sequences, with each pose represented in the compact Lie
algebra space, are fed into the proposed HMR network to
model the dynamic evolution of poses.

3.1. Lie Algebra Representation

An articulate object can be characterized as a kinematic
tree of rigid bones connected by joints. As depicted in
Fig. 1(a), a human full-body is represented by a kinematic
tree consisting of ﬁve kinematic chains: the spine and the
four limbs, with a total of 57 DoFs. Similarly, a ﬁsh and
a mouse are both represented as a single kinematic chain
along the spine with 44 and 12 DoFs respectively.

We utilize the theory of Lie groups [32, 27] to character-
ize the relative 3D geometry between two successive bones.
Given two successive bones bi−1 and bi, their relative ge-
ometry is modeled as the 3D rigid transformation (trans-
lation and rotation) required to take bi to the position and
orientation of bi−1. Mathematically, 3D rigid transforma-
tions are elements of the Special Euclidean group SE(3),
which is a Lie group. Therefore, the relative geometry
between bi−1 and bi is represented as a point in SE(3),
while the entire skeletal pose is represented as a point in
SE(3) × SE(3) × · · · × SE(3) [27], which is a Lie group
endowed with a manifold structure. A motion corresponds
to a curve on this manifold, and motion prediction amounts
to regressing the future curves. However, regression in this
curved manifold is non-trivial, hence we map the curves
from SE(3)×SE(3)×· · ·×SE(3) to its Lie algebra space.
Below we elaborate the mathematical details.

Take the simpliﬁed ﬁsh kinematic model depicted in
Fig. 1(b) as an example, a local coordinate system is at-
tached to each of the bones such that the x-axis is aligned
with the bone and the origin is aligned with the start joint of
the bone. Descending along the kinematic chain, a 3D rigid
transformation relates the local coordinate systems between
two successive bones, which is represented as a 4×4 matrix

of the form (cid:18)R t

1(cid:19), with R being a 3 × 3 rotation matrix,

0

and t a 3D translation vector. This 3D rigid transformation

.




 ,

is an element of SE(3). Speciﬁcally, a joint with coordi-
nates x = (x, y, z)⊺ w.r.t. coordinate system i + 1 will have
coordinates x′ = (x′, y′, z ′)⊺ w.r.t coordinate system i with

1(cid:19) = (cid:18)Ri
(cid:18)x′

0

ti

1(cid:19)(cid:18)x
1(cid:19).

Therefore, the entire forward chain pose is naturally rep-
resented as the product of rigid transformations. Techni-
cally, a skeletal pose is an element in SE(3) × SE(3) ×
· · · × SE(3) which is a Lie group. A pose corresponds to
a point in this Lie group manifold, while a motion amounts
to a curve on the manifold. Being a Lie group, the manifold
also comes with its associated tangent space or Lie alge-
bra se(3) which possesses a vector space structure, so our
familiar linear algebra techniques can work.

Lie algebra se(3)

The tangent space at the identity of
SE(3) is referred to as its Lie algebra se(3). The SE(3) →
se(3) association is effectuated by the logarithm map 1 log :

(cid:18)R t

1(cid:19) 7→ ξ× =

0

0
ω3
−ω2

0




−ω3

0
ω1
0

ω2
−ω1

0
0

ν1
ν2
ν3
0

This has the closed-form solution [20]

θ

ω1
ω2
ω3


 =

ω = 




(cid:17) ,
where θ = arccos(cid:16) Tr(R)−1

2 sin θ

2

R(3, 2) − R(2, 3)
R(1, 3) − R(3, 1)
R(2, 1) − R(1, 2)

(1)

ν = 


ν1
ν2
ν3


 = (cid:20) (I3 − R)ω× + ωω⊺

kωk

(cid:21)−1

t.

ξ× is conveniently mapped to a vector form ξ = (cid:18)ω
ν(cid:19).

1

m1

(cid:0)ξ1

⊺(cid:1)⊺

⊺, · · · , ξ1

⊺, · · · , ξK
1

⊺, · · · , ξK
mK

The above formalizes the procedure of recasting a
skeletal pose as a se(3) parameterized vector, p =
. K denotes the
number of kinematic chains, mk the number of joints in
chain k, and ξk
the Lie algebra parameter vector of joint
i
i in chain k. Considering the bone length invariance, the
3 translational DoFs for all bones except the ﬁrst bone are
ﬁxed. If a bone is anatomically constrained to rotate along
one axis, our scheme obtains zero variance of the rotational
parameters along the other two axis. This nails down on
the exact DoF of the joint and we explicitly encode this by
ﬁxing its non-rotational elements as constants.

3.2. Hierarchical Motion Context Modeling

The future pose prediction problem can now be formu-
lated as follows: Given as input the sequence of Lie-algebra

1The inverse transformation is given by the exponential map exp :

ξ× ∈ se(3) 7→ (cid:18)R t

1(cid:19) ∈ SE(3).

0

10006

(a)

(b)

Figure 1: (a) A display of the three articulate objects, with their respective joints and skeletons. The ﬁrst bones of the
skeletons are of 6 DoFs, while all other bones in the ﬁsh or mouse skeleton have 2 DoFs. The ﬁrst bone amounts to the
bone located in the spine and starts from the root joint. (b) An illustration of a simpliﬁed ﬁsh kinematic chain. bi and Jk
stands for the ith bone and kth joint, respectively. Each bone is assigned with a local coordinate system describing its rigid
transformation relative to its parent (preceding) bone, the sequence of rigid transformations characterizes a pose. Speciﬁcally,
the rigid transformation of the ﬁrst bone is relative to the global coordinate system.

Figure 2: The proposed neural network unfolded over recurrent steps. Local hidden state hn
hn−1
j−1 , hn−1

, and pj . Global state gn is updated as a function of gn−1 and hn−1

j+1 , gn−1, cn−1

, hn−1

1

j

j

, · · · , hn−1
t−1 .

j is updated as a function of

parameterized poses, hp1, · · · , pti, generate predictions for
hpt+1, · · · , pt+T i. In conventional motion prediction mod-
els, the encoder and decoder usually consist of single or
stacked layers of LSTM or GRU cells. Poses are input suc-
cessively into the encoder cells to model motion contexts
into hidden states. The inputs must be processed sequen-
tially and the ﬁnal hidden state is largely affected by the
inputs at recent frames [25], which cannot properly capture
long-term dependencies [2]. To avoid this issue, we con-
sider a new encoder-decoder architecture, where a Hierar-
chical Motion Recurrent (HMR) network is proposed as the
encoder, and the entire input sequence of poses is fed one-
shot instead of successively. Motion contexts are jointly
modeled by a hierarchical state S consisting of local states
hj for individual frames and an overall sequence-level state
g. At each recurrent step n, the jth frame updates its motion
context hn
j by exchanging information with its neighboring
local states hn
j−1, as well as with the global state
gn. As the number of recurrent steps increases, the number
of frames that have information exchange with hn
j becomes
larger, which enriches state representations incrementally.

j+1 and hn

Fig. 2 illustrates the proposed encoder network unfolded

over recurrent steps. At recurrent step 0, the network is
initialized with h0
g =

j = W pj + b and g0 = c0

j = c0

j , where c0
h0

j and c0

g respectively denote the cell

1

t−1

t−1

Pj=1

states of h0
j and g0. Matrix W and vector b are network
parameters. Subsequently, at each recurrent step n, the state
transition process is performed to update hn
g as
functions of hn−1
. Fig. 3 illustrates the
one-step state transition process with equations formulating
the process and ﬁgures visualizing it.

, gn−1, cn−1

j , gn, cn

, cn−1

j , cn

g

j

j

j

j , cn

j−1 , hn−1

j(cid:1) As illustrated in

Update frame-level state (cid:0)hn
the left panel of Fig. 3, at recurrent step n, hn−1
is updated
j ) by exchanging information with hn−1
(to hn
j+1 , and
gn−1. There are a total of 4 types of forget gates: f n, ln, rn,
and qn (forward, left, right, and global forget gates), which
respectively control the information ﬂows from the current
j−1 , right cell state cn−1
cell state cn−1
j+1 ,
and global cell state cn−1
j . The
input gate in controls the information ﬂow from the pose
input pj . Finally, the jth frame hidden state hn
j is obtained
by a Hadamard product of the output gate on
j with the tanh

to the ﬁnal cell state cn

, left cell state cn−1

g

j

10007

Root Joint Intermediate Joint End Joint 25 joints; 57 DoFs 21 joints; 44 DoFs 5 joints; 12 DoFs 𝒙𝟐𝐉2𝐉1𝒛𝟐𝒚𝟐𝐉3𝒙𝟎𝒛𝟎𝒚𝟎…𝐉𝑚𝐉𝑚−1Global Coordinate System b1 b2 b3 J1 J2 J3 V0 Pose 1 Pose 2 J4 EncoderDecoder(തc,𝐡𝐠)(ഥ𝐜,ഥ𝐡)recurrent steptime𝑡−1𝑗+1𝑗−1𝑗1………𝐡𝑗𝑛−1…𝐠𝒏−𝟏𝐡1𝑛−1𝐡𝑗−1𝑛−1𝐡𝑗+1𝑛−1𝐡𝑡−1𝑛−1𝐡𝑗𝑛𝐡1𝑛𝐡𝑡−1𝑛……𝐠𝑛𝐩1𝐩𝑗−1𝐩𝑗𝐩𝑗+1𝐩𝑡−1𝑡time𝑡+1𝑡+𝑇−1𝑡+𝑇…LSTMLSTMLSTMLSTM……LSTMLSTM...LSTMLSTM𝐩𝑡ෝ𝐩𝑡+1ෝ𝐩𝑡+2ෝ𝐩𝑡+𝑇−1ෝ𝐩𝑡+𝑇Figure 3: The left panel shows the update process of frame-level state (cid:0)hn
sequence-level state (cid:0)gn, cn

j(cid:1), the right panel shows the update process of
g(cid:1). The equations in the two panels formulate the process while the ﬁgures visualize the gates.

j , cn

activated cell state cn
are parameters to be learned where k ∈ {f, l, r, q, i, o}.

j . Matrices Uk, Wk, Zk and biases bk

j

g

and cn−1

g and ˜f n

j with the tanh activated cn

Update sequence-level state (cid:0)gn, cn
g(cid:1)
The update
process from gn−1 to gn is demonstrated in the right panel
of Fig. 3. ˜f n
j are the respective forget gates that
ﬁlter information from cn−1
to global cell state
g . The global state ˜gn is obtained by a Hadamard product
cn
of the output gate ˜on
g . Matri-
ces ˜Wk, ˜Zk and biases ˜bk with index k ∈ {g, f, o} are the
parameters to be learned.
Encoder & Decoder

In the proposed HMR approach,
our encoder learns a two-level representation of the entire
input sequence.
It is subsequently passed to the decoder
that recursively outputs the future motion sequence. As dis-
played in Fig. 2, our decoder engages a two-layer stacked
LSTM network. For both layers of the decoder, the cell
state input is c = 1
j , namely the average over
all frame-level cell states at the ﬁnal recurrent step n. In
particular, for the ﬁrst layer, its hidden state input is set as
h = 1
j . Similarly, the hidden state input of the
second layer is conﬁgured as hg = 1
Finally, the pose pt at time t serves as the initial input pose
to the decoder. The decoder is executed following the di-
rected links shown in Fig. 2, producing pose predictions in
a recursive manner.

t−1 Pt−1
j=1 cn

t−1 Pt−1

t (cid:16)Pt−1

j + gn(cid:17).

j=1 hn

j=1 hn

Loss function Given a kinematic chain of m joints
m)⊺, the

with prescribed Lie algebra pose p = (ξ ⊺

1 , · · · , ξ ⊺

location of joint Ji can be obtained by forward kinematics

1(cid:19) = 
(cid:18)Ji


i

Yj=1

exp(ξj×)
(cid:18)0
1(cid:19) .

(2)

Existing works such as [17, 21] adopted a simple L2 loss
function for training, which unfortunately treats all joints
equally, and ignores this important kinematic chain hierar-
chy. One immediate consequence is that Lie algebraic pa-
rameter estimation errors will accumulate rapidly down the
chain. To account for this, we propose the following loss:

Loss(p, ˆp) =

(m − i)likξi − ˆξik2.

(3)

denotes the predicted pose, and

where ˆp = (cid:16) ˆξ ⊺

1 , · · · , ˆξ ⊺

li denotes the length of bone i. Now higher losses would
be incurred if there are errors in the preceding joints of a
chain. As will be illustrated in Subsection 4.5, this setting
improves prediction performance.

m−1

Xi=1
m(cid:17)⊺

4. Experiments

4.1. Experimental Settings

Datasets

Experiments are conducted on three large
and complex datasets of distinct articulate objects, namely
human, ﬁsh, and mouse. For human, the 3D human full-
body motion dataset H3.6m [16] is used. H3.6m contains

10008

𝐩𝑗𝜎𝜎𝜎𝜎𝐞𝑗𝑛−1𝐠𝑛−1𝐜𝑗𝑛−1𝜎𝐜𝑗−1𝑛−1𝐜𝑗+1𝑛−1𝐜𝑔𝑛−1෤𝐜𝑗𝑛𝐫𝑛𝐥𝑛𝐟𝑛𝐪𝑛𝐢𝑛tanh𝜎𝐨𝑛𝐜𝑗𝑛𝐡𝑗𝑛⨀⨀⨀⨀⨀tanh⨁⨀en−1j=(cid:16)hn−1j−1⊺,hn−1j⊺,hn−1j+1⊺(cid:17)⊺fn=σ(cid:0)Ufpj+Wfen−1j+Zfgn−1+bf(cid:1)ln=σ(cid:0)Ulpj+Wlen−1j+Zlgn−1+bl(cid:1)rn=σ(cid:0)Urpj+Wren−1j+Zrgn−1+br(cid:1)qn=σ(cid:0)Uqpj+Wqen−1j+Zqgn−1+bq(cid:1)in=σ(cid:0)Uipj+Wien−1j+Zign−1+bi(cid:1)˜cnj=tanh(cid:0)Ucpj+Wcen−1j+Zcgn−1+bc(cid:1)cnj=ln⊙cn−1j−1+fn⊙cn−1j+rn⊙cn−1j+1+qn⊙cn−1g+in⊙˜cnjonj=σ(cid:0)Uopj+Wonn−1j+Zogn−1+bo(cid:1)hnj=onj⊙tanh(cid:0)cnj(cid:1).𝐈𝐧𝐩𝐮𝐭𝐬𝐩𝑗:poseinputframe𝑗𝐡𝑗𝑛−1:hiddenstate𝑗atstep𝑛−1𝐠𝑛−1:globalstate𝑗atstep𝑛−1𝐜𝑗𝑛−1:localcellstate𝑗atstep𝑛−1𝐜𝑔𝑛−1:globalcellstateatstep𝑛−1𝐆𝐚𝐭𝐞𝐬𝐟𝐨𝐫𝐡𝑗𝑛𝐮𝐩𝐝𝐚𝐭𝐞𝐢𝒏:inputgate𝐪𝑛:globalforget𝐟𝑛:forwardforgetgate𝐥𝑛:leftforgetgate𝐫𝑛:rightforgetgate𝐨𝑛:outputgate𝐆𝐚𝐭𝐞𝐬𝐟𝐨𝐫𝐠𝑛𝐮𝐩𝐝𝐚𝐭𝐞ሚ𝐟𝒋𝑛:forgetgateforhiddenstate𝑗ሚ𝐟𝑔𝑛:forgetgateforglobalstate෥𝐨𝑛:outputgateOperations𝜎⨀⨁tanhSigmoid activationtanh activationHadamard productSum𝐎𝐮𝐭𝐩𝐮𝐭𝐬𝐡𝑗𝑛:hiddenstate𝑗atstep𝑛𝐠𝑛:globalstate𝑗atstep𝑛𝐜𝑗𝑛:cellstate𝑗atstep𝑛𝐜𝑔𝑛:globalcellstateatstep𝑛Legends𝐡1𝑛−1,…,𝐡𝑡−1𝑛−1𝜎𝜎𝜎𝜎𝐜1𝑛−1𝐜𝑗𝑛−1𝐜𝑡−1𝑛−1𝐜𝑔𝑛−1ሚ𝐟𝑡−1𝑛ሚ𝐟𝑔𝑛𝐜𝑔𝑛𝐠𝑛⨀⨀⨀…………𝐠𝑛−1𝜎tanh⨀෥𝐨𝑛ሚ𝐟𝑗𝑛ሚ𝐟1𝑛⨁⨀˜gn−1=1t−1t−1Xj=1hn−1j˜fnj=σ(cid:16)˜Wfhn−1j+˜Zfgn−1+˜bf(cid:17)˜fng=σ(cid:16)˜Wg˜gn−1+˜Zggn−1+˜bg(cid:17)cng=˜fng⊙cn−1g+t−1Xj=1˜fn−1j⊙cn−1j˜oni=σ(cid:16)˜Wo˜gn−1+˜Zogn−1+˜bo(cid:17)gn=˜oni⊙tanh(cng).3.6 million 3D human poses with 15 activities performed
by 7 subjects. Following existing works [25, 17], we down-
sampled the motion sequence by 2 to 25 frames per second
(FPS). For animals, we consider the ﬁsh and mouse datasets
of [32], which contain 14 ﬁsh videos (50 FPS) of 6 different
ﬁsh, and 8 mouse videos (25 FPS) of 4 lab mice. In general,
the continuous sequences in these videos vary from 2,250
frames to 24,000 frames. For all datasets, comparison with
existing methods were done with pose sequences parame-
terized using our Lie algebra representation.

Parameter Settings

The hidden state size, i.e. length
of state vectors h and g is set to 300, 800, and 100 respec-
tively for human, ﬁsh, and mouse motion prediction. All
other settings and hyperparameters are constant across dif-
ferent objects. The default number of recurrent steps is set
to 10 and neighboring context window size 3. Following
previous works [21, 25], we do not model global transla-
tion and utilize t = 50 observed frames as inputs to predict
future T = 10 frames in training. The Adam optimizer is
employed with an intial learning rate of 0.001 which decays
by 10% every 10,000 iterations. A batch size of 16 is used
and the gradient clipping threshold is set to 5.

4.2. Evaluation on H3.6m dataset

First, we benchmark our approach against state-of-the-
art methods on the H3.6m dataset [16] with the mean angle
error (MAE) metric adopted in previous works [17, 25, 21].
In Table 1, the performance of different methods are pre-
sented in terms of MAE for 4 complex activities, namely
“Discussion”, “Greeting, “Posing” and “Walking Dog”. A
including ERD [9],
total of 10 methods are compared,
LSTM-3LR [9], SRNN [17], Res-GRU [21], zero-velocity
[25], MHU [25], our HMR network, and 3 variants of HMR.
Zero-velocity is a baseline that constantly outputs the last
observed pose. We reproduced the existing methods fol-
lowing their released codes on GitHub2. For all methods,
training is done over all activity types with a training out-
put window size of T = 10 frames. From the quantitative
results in Table 1, the ﬁrst observation is that our HMR net-
work delivers state-of-the-art results for both short-term and
long-term predictions on complex activities. Interestingly,
many existing methods, such as ERD and SRNN, tend to be
outperformed by the simple baseline zero-velocity, which
reconﬁrms the ﬁndings reported in [21]. We can also ob-
serve that prediction error increases as we predicts deeper
into the future. We further conducted full experiments on
all other 11 activities, which reconﬁrms that our methods
consistently outperforms existing methods. We put them in
the supplementary ﬁles due to space limitations.

Besides quantitative evaluation, we further compare the
performance of state-of-the-art methods visually. Exem-

2The implementation of [25] is not available and we report the experi-

mental results in their paper.

plar visual results for long-term forecasting on the walk-
ing activity are demonstrated in Fig. 4, where the predicted
poses for future 50 seconds (1,250 frames) are presented.
A XYZ baseline is engaged in the comparison, which em-
ploys 3 stacked LSTM layers as the encoder and uses raw
3D joint coordinates instead of Lie algebra parameters as
inputs. Here, training for all methods is done over a sin-
gle activity type for a longer training output window size
of T = 100 frames. Our insights are that it is unrealistic
to expect accurate forecasting in the long-term and a more
reasonable goal is to achieve human-like motion. As shown
in Fig. 4 as well as in the supplementary video, LSTM-3LR
converges to a motionless state within 1 sec; ERD exhibits
jittery (nonsmooth) and unrealistic motion; Res-GRU con-
verges to a motionless pose after 5 sec. XYZ yields good
short term predictions but suffers from bone length defor-
mation (e.g., longer or shorter arms), leading to horrendous
predictions in the long term. HMR is capable of produc-
ing natural pose predictions throughout the entire forecast
window. In this regard, an important highlight of our archi-
tecture is the capability to generate long-term natural, bone-
length-invariant, and human-like motions.

For raw 3D joint coordinates representation as inputs,
besides the XYZ baseline presented, we also tried other en-
coders such as those in Res-GRU [21], ERD [9], and HMR.
Empirical evidences demonstrate similar severe body dis-
tortions in long-term prediction. Slight deformation at ear-
lier predictions propagate out of control, resulting in ex-
treme deterioration in long term performance. This suggests
the limitations (or challenges) of raw coordinates represen-
tation and the necessity of explicitly encoding the kinematic
body structure and anatomical constraints.

4.3. Evaluation on Fish and Mouse datasets

Whereas the human dataset poses the challenge of hav-
ing to model multiple kinematic chains simultaneously, the
ﬁsh and mouse datasets of [32] raise different issues such as
1) long kinematic chain of 21 joints for ﬁsh and 2) stochas-
tic nature of the animal motions and lack of activity type
classiﬁcation in the datasets.

For both datasets, we evaluate the performance of state-
of-the-art methods with quantitative results reported in Ta-
ble 2. HMR consistently and signiﬁcantly outperforms
other methods on both datasets.

It would be more instructive to look at the visual results.
A sample forecasting result for the ﬁsh dataset is shown in
Fig. 5. The long kinematic chain in the ﬁsh skeletal anatomy
resulted in modeling difﬁculties for the competing methods.
In both ERD and Res-GRU, the predicted ﬁsh pose demon-
strate unnatural distortions and a zigzagged contour, which
is especially the case for ERD. LSTM-3LR suffers from the
issue of quickly converging to a motionless state. In con-
trast, HMR retains streamlined shapes and the curvature of

10009

Methods

ERD [9]
LSTM-3LR [9]
SRNN [17]
Res-GRU [21]
Zero-velocity [21]
MHU [25]
HMR (Remove l, r from update of h)
HMR (Remove g)
HMR (Remove 2nd decoder layer)
HMR

Methods

ERD [9]
LSTM-3LR [9]
SRNN [17]
Res-GRU [21]
Zero-velocity [21]
MHU [25]
HMR (Remove l, r from update of h)
HMR (Remove g)
HMR (Remove 2nd decoder layer)
HMR

80ms
2.22
1.80
1.16
0.31
0.31
0.31
0.30
0.30
0.30
0.29

80ms
2.42
1.22
1.74
0.41
0.28
0.33
0.27
0.25
0.30
0.24

Discussion

Greeting

160ms

320ms

400ms

560ms

640ms

720ms

1000ms

2.38
2.00
1.40
0.69
0.67
0.66
0.59
0.57
0.60
0.55

2.58
2.13
1.75
1.03
0.97
0.93
0.93
0.87
0.94
0.83

2.69
2.13
1.85
1.12
1.04
1.00
1.02
0.96
1.03
0.94

2.89
2.29
2.06
1.52
1.41
1.37
1.42
1.38
1.40
1.35

Posing

2.93
2.32
2.07
1.61
1.56
1.51
1.56
1.54
1.55
1.49

2.94
2.36
2.08
1.70
1.71
1.66
1.67
1.69
1.69
1.61

3.11
2.44
2.19
1.87
1.96
1.88
1.80
1.89
1.86
1.72

160ms

320ms

400ms

560ms

640ms

720ms

1000ms

2.77
1.89
1.89
0.84
0.57
0.64
0.56
0.54
0.59
0.53

3.26
3.02
2.23
1.53
1.13
1.22
1.22
1.19
1.26
1.12

3.39
3.53
2.43
1.81
1.38
1.47
1.52
1.48
1.49
1.42

3.43
4.25
2.67
2.06
1.81
1.82
1.76
1.93
1.87
1.75

3.42
4.57
2.73
2.21
2.14
2.11
1.91
2.10
2.04
1.89

3.45
4.83
2.79
2.24
2.23
2.17
2.08
2.23
2.20
2.02

3.87
4.60
3.42
2.53
2.78
2.51
2.60
2.65
2.66
2.50

80ms
1.70
0.93
1.33
0.52
0.54
0.54
0.54
0.53
0.57
0.52

80ms
1.58
0.76
1.57
0.56
0.60
0.56
0.56
0.56
0.60
0.55

160ms

320ms

400ms

560ms

640ms

720ms

1000ms

2.04
1.51
1.60
0.86
0.89
0.87
0.89
0.86
0.92
0.85

2.60
2.27
1.83
1.30
1.30
1.27
1.30
1.28
1.33
1.25

160ms

320ms

1.78
1.29
1.73
0.95
0.98
0.88
0.89
0.87
0.90
0.87

2.02
1.91
1.93
1.33
1.36
1.21
1.33
1.23
1.24
1.20

2.81
2.54
1.98
1.47
1.49
1.45
1.44
1.45
1.49
1.40

3.29
2.97
2.27
1.78
1.79
1.75
1.68
1.71
1.75
1.65
Walking Dog
560ms

400ms

3.47
3.05
2.28
1.75
1.74
1.71
1.66
1.70
1.79
1.62

3.55
3.12
2.30
1.82
1.77
1.74
1.70
1.76
1.82
1.67

3.43
3.09
2.31
1.96
1.80
1.87
1.85
1.95
1.88
1.73

640ms

720ms

1000ms

2.10
2.18
1.96
1.48
1.50
1.37
1.49
1.42
1.48
1.36

2.31
2.72
2.13
1.78
1.74
1.67
1.73
1.84
1.79
1.65

2.37
3.01
2.17
1.81
1.80
1.72
1.82
1.90
1.86
1.70

2.48
3.30
2.23
1.88
1.87
1.81
1.90
1.94
1.94
1.77

2.60
3.78
2.20
1.96
1.96
1.90
2.00
2.06
2.07
1.84

Table 1: Performance evaluation (in MAE) of comparison methods over 4 different action types on the H3.6m dataset.

Ground 
Truth

ERD
(2015)

LSTM-3LR 
(2015)

Res-GRU 
(2017)

XYZ 
Baseline

HMR 
(Ours)

25

50

75

100

1,000

1,025

1,050

1,075

1,100

1,125

1,150

1,175

1,200

1,225

1,250

…

Frame

Figure 4: Long-term motion forecasting of walking activity by the comparison methods on the H3.6m dataset. 25 frames correspond to 1 sec. The
complete visual results can be found in the supplementary video ﬁle.

Methods

ERD [9]
LSTM-3LR [9]
Res-GRU [21]
HMR (ours)

80ms
0.62
0.91
0.52
0.40

Fish

Mouse

160ms

320ms

400ms

560ms

640ms

720ms

1000ms

0.59
0.59
0.56
0.48

0.54
0.45
0.52
0.44

0.69
0.39
0.39
0.28

0.79
0.25
0.26
0.13

0.85
0.26
0.25
0.12

0.87
0.30
0.26
0.13

1.20
0.29
0.26
0.11

80ms
0.77
0.68
0.40
0.39

160ms

320ms

400ms

560ms

640ms

720ms

1000ms

0.62
0.61
0.48
0.44

0.67
0.81
0.66
0.56

0.77
0.84
0.70
0.63

0.86
0.85
0.74
0.69

0.83
0.81
0.71
0.68

0.88
0.85
0.72
0.67

0.91
0.80
0.74
0.69

Table 2: Performance evaluation (in MAE) of the comparison methods for the Fish and Mouse datasets of [32].

the predicted pose remains smooth and natural.

4.4. Computational Efﬁciency

The mouse motion is highly stochastic, leading to difﬁ-
culties in accurate forecasting. Compared methods all tend
to converge to motionless states. A sample forecasting se-
quence on the mouse dataset is displayed in Fig. 6. ERD,
LSTM-3LR and Res-GRU converge to motionless states af-
ter 30, 15, 45 frames respectively. HMR remains in mo-
tion throughout with fairly accurate prediction for the ﬁrst
40 frames. In particular, it can be seen that the HMR pre-
dicted mouse body orientation remains in alignment with
the ground truth whereas compared methods all wrongly
predict the mouse orientation.

The training and testing time as well as number of train-
ing parameters required for different methods are shown
in Table 3. Our architecture is implemented using Ten-
sorFlow 1.8 [1]. All experiments were performed on a
Nvidia GeForce GTX TITAN X GPU. In brief, HMR re-
quires less parameters than existing methods, and its com-
putation speed is signiﬁcantly faster.

4.5. Loss Function Study

In this subsection we compare our loss function pre-
sented in Eq. (3) against conventional L2 loss. In addition

10010

Ground 
Truth

ERD
(2015)

LSTM-3LR 
(2015)

Res-GRU 
(2017)

HMR 
(Ours)

Ground 
Truth

ERD
(2015)

LSTM-3LR 
(2015)

Res-GRU 
(2017)

HMR 
(Ours)

0

20

40

60

80

0

15

30

45

60

Frame

Frame

Figure 5: Motion forecasting on Fish dataset. The head of the ﬁsh
is rendered wider (for resemblance with the actual zebraﬁsh).

Figure 6: Motion forecasting on Mouse dataset. The mouse shape
is rendered in gray color with joints marked out along the spine.

Methods
ERD
LSTM-3LR
SRNN
Res-GRU
HMR (Ours)

# Parameters Train time / 1,000 iterations (s) Test FPS
17,348,054
20,831,054
22,817,888
6,684,726
4,422,654

52.4
33.7
14.4
173.5
406.1

428
632
947
65
33

Table 3: Number of training parameters and efﬁciency.

to the MAE metric used, we also use the mean joint error
(MJE) as a supplementary metric. Experiments were con-
ducted on H3.6m dataset with results averaged over all 15
activities. In the experiments, we kept the network struc-
ture ﬁxed as HMR, while using different losses. As shown
in Table 4, the proposed loss consistently outperforms the
L2 loss. By respecting the hierarchical nature of kine-
matic chains, our proposed loss reduces errors in the root
joint predictions, which translates to a better estimate of
the global orientation and thus signiﬁcant improvements on
the MJE metric. Experimental results on animals (see Sub-
section 4.3) also indicate that employing the proposed loss
function (in our work) instead of the L2 loss (employed
in compared works) is more successful in capturing the
anatomical features of the skeleton and its motion dynam-
ics, such as better prediction of the mouse orientation.

MAE

Time(ms)
L2
Our
L2
Our

MJE

80
0.34
0.33
67.6
9.3

160
0.57
0.55
78.3
17.1

320
0.87
0.83
83.1
28.1

400
0.96
0.93
86.4
32.7

560
1.15
1.13
97.6
40.9

640
1.24
1.21
105.7
43.5

1000
1.40
1.36
113.4
46.4

Table 4: Comparison of our loss function against L2 loss in
terms of MAE and MJE, respectively.

4.6. Extensions and Reductions in HMR Network

By default in HMR the number of neighboring context
window size is ﬁxed to 3. As the number of steps increases,
the number of local states that have information exchange
with hn
j becomes larger. It is interesting to see the effect
of enlarging or reducing neighboring window size, which
we report in Table 5. We observe that enlarging the neigh-
boring context window size does not necessarily leads to
improvement in accuracy. The optimal number of recurrent

steps and hidden state size on the H3.6m dataset is also em-
pirically determined. This allows us to settle on the default
hidden state size 300 and number of recurrent steps 10.

Hidden Size Val. Loss

Rec. Steps Val. Loss Neigh. Win. Val. Loss

100
200
300
400
500

0.177
0.165
0.151
0.172
0.175

1
5
10
15
20

0.169
0.162
0.151
0.159
0.161

1
3
5
7
11

0.169
0.151
0.155
0.159
0.158

Table 5: Validation Loss on H3.6m on varying internal parameters, hid-
den states size, number of recurrent steps n, and context window size.

We also report 3 variants of our HMR network: 1) Re-
moval of the left and right forget gates in the update of the
frame level states hj from the encoder; 2) Removal of the
sequence level state g from the encoder; and 3) Removal
of the second decoder layer in Table 1. Removal of the se-
quence level state g from our HMR encoder is observed not
to severely affect forecasting before 400 ms (i.e. 10 frames)
but performance beyond 400 ms declines noticeably. Pre-
diction accuracy also suffered upon removal of the left and
right forget gates or the removal of the second decoder layer.

5. Conclusion

We have proposed a hierarchical motion recurrent net-
work, which can effectively model motion contexts and sig-
niﬁcantly surpasses existing work in both short-term and
long-term motion predictions. The proposed network incor-
porates our Lie algebra representation naturally preserves
the skeletal articulation of the underlying objects. Exten-
sive results on human, ﬁsh and mouse datasets demonstrate
the competency of our approach. Future work includes fur-
ther investigation into group-level motion predictions.

6. Acknowledgments

This paper is partly supported by the National Key R&D
Program of China (No. 2017YFB1401304), the Natural
Science Foundation of Zhejiang Province, China (Grant No.
LQ19F020001), the JCO grants of A*STAR Singapore, and
the support from University of Alberta-Huawei Joint Inno-
vation Center in Canada. We thank Yunphant Ltd. for their
constructive suggestions.

10011

References

[1] M. Abadi, P. Barham, J. Chen, Z. Chen, A. Davis, J. Dean,
M. Devin, S. Ghemawat, G. Irving, M. Isard, et al. Tensor-
ﬂow: A system for large-scale machine learning.
In 12th
{USENIX} Symposium on Operating Systems Design and
Implementation ({OSDI} 16), pages 265–283, 2016. 7

[2] D. Bahdanau, K. Cho, and Y. Bengio. Neural machine
translation by jointly learning to align and translate. CoRR,
abs/1409.0473, 2014. 2, 3, 4

[3] E. Barsoum, J. Kender, and Z. Liu. HP-GAN: proba-
bilistic 3d human motion prediction via GAN. CoRR,
abs/1711.09561, 2017. 2

[4] J. Butepage, M. Black, D. Kragic, and H. Kjellstrom. Deep
representation learning for human motion prediction and
classiﬁcation. In CVPR, 2017. 1, 2

[5] A. A. Chaaraoui, J. R. Padilla-L´opez, P. Climent-P´erez, and
F. Fl´orez-Revuelta. Evolutionary joint selection to improve
human action recognition with RGB-D devices. ESWA,
41(3):786–794, 2014. 2

[6] K. Cho, B. van Merrienboer, C¸ . G¨ulc¸ehre, D. Bahdanau,
F. Bougares, H. Schwenk, and Y. Bengio. Learning phrase
representations using RNN encoder-decoder for statistical
machine translation.
In EMNLP, pages 1724–1734, 2014.
2

[7] P. Doll´ar, P. Welinder, and P. Perona. Cascaded pose regres-

sion. In CVPR, pages 1078–1085, 2010. 2

[8] Y. Du, W. Wang, and L. Wang. Hierarchical recurrent neu-
ral network for skeleton based action recognition. In CVPR,
pages 1110–1118, 2015. 2

[9] K. Fragkiadaki, S. Levine, P. Felsen, and J. Malik. Recurrent
network models for human dynamics. In ICCV, 2015. 1, 2,
6, 7

[10] F. S. Grassia. Practical parameterization of rotations using
the exponential map. J. Graphics, GPU, & Game Tools,
3(3):29–48, 1998. 2

[11] F. Han, B. Reily, W. Hoff, and H. Zhang. Space-time rep-
resentation of people based on 3d skeletal data: A review.
CVIU, 158:85–105, 2017. 2

[12] D. Hoiem and S. Savarese. Representations and Techniques
for 3D Object Recognition and Scene Interpretation. Synthe-
sis Lectures on Artiﬁcial Intelligence and Machine Learning.
Morgan & Claypool Publishers, 2011. 2

[13] D. Holden, J. Saito, and T. Komura. A deep learning frame-
work for character motion synthesis and editing. ACM Trans.
Graph., 35(4):138:1–138:11, 2016. 2

[14] W. Hong, A. Kennedy, X. Burgos-Artizzu, M. Zelikowsky,
S. Navonne, P. Perona, and D. Anderson. Automated
measurement of mouse social behaviors using depth sens-
ing, video tracking, and machine learning.
PNAS,
112(38):E5351–E5360, 2015. 2

[15] Z. Huang, C. Wan, T. Probst, and L. V. Gool. Deep learn-
ing on lie groups for skeleton-based action recognition. In
CVPR, pages 1243–1252, 2017. 2

[16] C. Ionescu, D. Papava, V. Olaru, and C. Sminchisescu. Hu-
man3.6m: Large scale datasets and predictive methods for
3d human sensing in natural environments.
IEEE TPAMI,
36(7):1325–39, 2014. 5, 6

[17] A. Jain, A. R. Zamir, S. Savarese, and A. Saxena. Structural-
In CVPR,

rnn: Deep learning on spatio-temporal graphs.
pages 5308–5317, 2016. 1, 2, 5, 6, 7

[18] A. M. Lehrmann, P. V. Gehler, and S. Nowozin. Efﬁcient
nonlinear markov models for human motion. In CVPR, pages
1314–1321, 2014. 1, 2

[19] J. Luo, W. Wang, and H. Qi. Group sparsity and geometry
constrained dictionary learning for action recognition from
depth maps. In ICCV, pages 1809–1816, 2013. 2

[20] Y. Ma, S. Soatto, J. Koseck, and S. Sastry. An Invitation to
3-D Vision: From Images to Geometric Models. Springer,
2010. 3

[21] J. Martinez, M. Black, and J. Romero. On human motion
prediction using recurrent neural networks. In CVPR, 2017.
1, 2, 5, 6, 7

[22] A. Mathis, P. Mamidanna, K. M. Cury, T. Abe, V. N. Murthy,
M. W. Mathis, and M. Bethge. Deeplabcut: markerless pose
estimation of user-deﬁned body parts with deep learning.
Technical report, Nature Publishing Group, 2018. 2

[23] G. Salem, J. Krynitsky, M. H. H. III, T. Pohida, and X. P.
Burgos-Artizzu. Cascaded regression for 3d pose estima-
tion for mouse in ﬁsheye lens distorted monocular images.
In 2016 IEEE Global Conference on Signal and Information
Processing, GlobalSIP 2016, Washington, DC, USA, Decem-
ber 7-9, 2016, pages 1032–1036, 2016. 2

[24] J. Shotton, R. Girshick, A. Fitzgibbon, T. Sharp, M. Cook,
M. Finocchio, R. Moore, P. Kohli, A. Criminisi, A. Kipman,
and A. Blake. Efﬁcient human pose estimation from single
depth images. TPAMI, 35(12):2821–2840, 2013. 2

[25] Y. Tang, L. Ma, W. Liu, and W. Zheng. Long-term human
motion prediction by modeling motion context and enhanc-
ing motion dynamic. CoRR, abs/1805.02513, 2018. 1, 2, 3,
4, 6, 7

[26] G. W. Taylor, G. E. Hinton, and S. T. Roweis. Modeling
human motion using binary latent variables. In NIPS, pages
1345–1352, 2006. 1, 2

[27] R. Vemulapalli, F. Arrate, and R. Chellappa. Human action
recognition by representing 3d skeletons as points in a lie
group. In CVPR 2014, pages 588–595, 2014. 2, 3

[28] J. Wang, Z. Liu, Y. Wu, and J. Yuan. Mining actionlet en-
semble for action recognition with depth cameras. In CVPR,
pages 1290–1297, 2012. 2

[29] J. M. Wang, D. J. Fleet, and A. Hertzmann. Gaussian process

dynamical models. In NIPS, pages 1441–1448, 2005. 1, 2

[30] A. Wiltschko, M. Johnson, G. Iurilli, R. Peterson, J. Ka-
ton, S. Pashkovski, V. Abraira, R. Adams, and S. Datta.
Mapping sub-second structure in mouse behavior. Neuron,
88(6):1121–1135, 2015. 2

[31] J. Xie, S. Zhu, and Y. N. Wu. Synthesizing dynamic patterns
In CVPR, pages

by spatial-temporal generative convnet.
1061–1069, 2017. 1

[32] C. Xu, L. Govindarajan, Y. Zhang, and L. Cheng. Lie-X:
Depth image based articulated object pose estimation, track-
ing, and action recognition on Lie groups. IJCV, 123(3):454–
78, 2017. 2, 3, 6, 7

10012

