Bidirectional Learning for Domain Adaptation of Semantic Segmentation

Yunsheng Li ∗
UC San Diego

Lu Yuan
Microsoft

Nuno Vasconcelos

UC San Diego

yul554@eng.ucsd.edu

luyuan@microsoft.com

nvasconcelos@ucsd.edu

Abstract

Domain adaptation for semantic image segmentation is
very necessary since manually labeling large datasets with
pixel-level labels is expensive and time consuming. Ex-
isting domain adaptation techniques either work on lim-
ited datasets, or yield not so good performance compared
with supervised learning.
In this paper, we propose a
novel bidirectional learning framework for domain adap-
tation of segmentation. Using the bidirectional learning,
the image translation model and the segmentation adap-
tation model can be learned alternatively and promote to
each other. Furthermore, we propose a self-supervised
learning algorithm to learn a better segmentation adap-
tation model and in return improve the image translation
model. Experiments show that our method is superior to
the state-of-the-art methods in domain adaptation of seg-
mentation with a big margin. The source code is available
at https://github.com/liyunsheng13/BDL.

1. Introduction

Recent progress on image semantic segmentation [18]
has been driven by deep neural networks trained on large
datasets. Unfortunately, collecting and manually annotat-
ing large datasets with dense pixel-level labels has been ex-
tremely costly due to large amount of human effort is re-
quired. Recent advances in computer graphics make it pos-
sible to train CNNs on photo-realistic synthetic images with
computer-generated annotations [27, 28]. Despite this, the
domain mismatch between the real images (target) and the
synthetic data (source) cripples the models’ performance.
Domain adaptation addresses this domain shift problem.
Speciﬁcally, we focus on the hard case of the problem where
no labels from the target domain are available. This class of
techniques is commonly referred to as Unsupervised Do-
main Adaptation.

Traditional methods for domain adaptation involve min-
imizing some measure of distance between the source and

∗This work was done when Yunsheng Li is an intern at Microsoft Cloud

& AI

the target distributions. Two commonly used measures are
the ﬁrst and second order moment [2], and learning the dis-
tance metrics using Adversarial approaches [34, 35]. Both
approaches have had good success in the classiﬁcation prob-
lems (e.g., MNIST [16], USPS [7] and SVHN [22]); how-
ever, as pointed out in [37], their performance is quite lim-
ited on the semantic segmentation problem.

Recently, domain adaptation for semantic segmentation
has made good progress by separating it into two sequential
steps. It ﬁrstly translates images from the source domain to
the target domain with an image-to-image translation model
(e.g., CycleGAN [38]) and then add a discriminator on top
of the features of the segmentation model to further de-
crease the domain gap [12, 36]. When the domain gap is
reduced by the former step, the latter one is easy to learn
and can further decrease the domain shift. Unfortunately,
the segmentation model very relies on the quality of image-
to-image translation. Once the image-to-image translation
fails, nothing can be done to make it up in the following
stages.

In this paper, we propose a new bidirectional learning
framework for domain adaptation of image semantic seg-
mentation. The system involves two separated modules:
image-to-image translation model and segmentation adap-
tation model similar to [12, 36], but the learning process
involves two directions (i.e., “translation-to-segmentation”
and “segmentation-to-translation”).
The whole system
forms a closed-loop learning. Both models will be moti-
vated to promote each other alternatively, causing the do-
main gap to be gradually reduced. Thus, how to allow one
of both modules providing positive feedbacks to the other is
the key to success.

On

the

(i.e.,

similar

forward

direction

“translation-to-
to [12, 36]), we propose a
segmentation”,
self-supervised learning (SSL) approach in training our
segmentation adaptation model.
from seg-
mentation models trained on real data, the segmentation
adaptation model is trained on both synthetic and real
datasets, but the real data has no annotations. At every
time, we may regard the predicted labels for real data with
high conﬁdence as the approximation to the ground truth

Different

6936

labels, and then use them only to update the segmentation
adaptation model while excluding predicted labels with
low conﬁdence. This process is referred as self-supervised
learning, which aligns two domains better than one-trial
learning that is widely used in existing approaches. Fur-
thermore, better segmentation adaptation model would
contribute to better translation model through our backward
direction learning.

On the backward direction (i.e., “segmentation-to-
translation”), our translation model would be iteratively im-
proved by the segmentation adaptation model, which is dif-
ferent from [12, 36] where the image-to-image translation
is not updated once the model is trained. For the purpose,
we propose a new perceptual loss, which forces the seman-
tic consistency between every image pixel and its translated
version, to build the bridge between translation model and
segmentation adaptation model. With the constraint in the
translation model, the gap in visual appearance (e.g., light-
ing, object textures), between the translated images and real
datasets (target) can be further decreased. Thus, the seg-
mentation model can be further improved through our for-
ward direction learning.

From the above two directions, both the transla-
tion model and the segmentation adaptation model com-
plement each other, which helps achieve state-of-the-
art performance in adapting large-scale rendered image
dataset SYNTHIA [28]/GTA5 [27], to real image dataset,
Cityscapes [5], and outperform other methods by a large
margin. Moreover, the proposed method is general to dif-
ferent kinds of backbone networks.

In summary, our key contributions are:

1. We present a bidirectional learning system for seman-
tic segmentation, which is a closed loop to learn the
segmentation adaptation model and the image transla-
tion model alternatively.

2. We propose a self-supervised learning algorithm for
the segmentation adaptation model, which incremen-
tally align the source domain and the target domain at
the feature level, based on the translated results.

3. We introduce a new perceptual loss to the image-to-
image translation, which supervises the translation by
the updated segmentation adaptation model.

2. Related Work

Domain Adaptation. When transferring knowledge from
virtual images to real photos, it is often the case that there
exists some discrepancy from the training to the test stage.
Domain adaptation aims to rectify this mismatch and tune
the models toward better generalization at testing [24]. The
existing work on domain adaptation has mainly focused
on image classiﬁcation [30]. A lot of work aims to learn
domain-invariant representations through minimizing the

domain distribution discrepancy. Maximum Mean Discrep-
ancy (MMD) loss [8], computing the mean of representa-
tions, is a common distance metric between two domains.
As the extension to MMD, some statistics of feature dis-
tributions such as mean and covariance [2, 21] are used to
match two different domains. Unfortunately, when the dis-
tribution is not Gaussian, solely matching mean and covari-
ance is not enough to align the two different domains well.
Adversarial learning [9] recently becomes popular, and
another kind of domain adaptation methods. It reduces the
domain shift by forcing the features from different domains
to fool the discriminator. [34] would be the pioneer work,
which introduces an adversarial loss on top of the high-level
features of the two domains with the classiﬁcation loss for
the source dataset and achieves a better performance than
the statistical matching methods. Expect for adversarial
loss, some work proposed some extra loss functions to fur-
ther decrease the domain shift, such as reweighted function
for each class [4], and disentangled representations for sep-
arated matching [35]. All of these methods work on sim-
ple and small classiﬁcation datasets (e.g., MNIST [16] and
SVHN [22]), and may have quite limited performance in
more challenging tasks, like segmentation.

Domain Adaptation for Semantic Segmentation. Re-
cently, more domain adaptation techniques are proposed for
semantic segmentation models, since an enormous amount
of labor-intensive work is required to annotate so many im-
ages that are needed to train high-quality segmentation net-
works. A possible solution to alleviate the human efforts
is to train networks on virtual data which is labeled auto-
matically. For example, GTA5 [27] and SYHTHIA [28]
are two popular synthetic datasets of city streets with over-
lapped categories, similar views to the real datasets (e.g.,
CITYSCAPE [5], CamVid [1]). Domain adaptation can be
used to align the synthetic and the real datasets.

The ﬁrst work to introduce domain adaptation for seman-
tic segmentation is [13], which does the global and local
alignments between two domains in the feature level. Cur-
riculum domain adaptation [37] estimates the global dis-
tribution and the labels for the superpixel, and then learns
a segmentation model for the ﬁner pixel.
In [33], mul-
tiple discriminators are used for different level features to
reduce domain discrepancy. In [31], foreground and back-
ground classes are separately treated for decreasing the do-
main shift respectively. All these methods target to directly
align features between two domains. Unfortunately, the vi-
sual (e.g., appearance, scale, etc.) domain gap between syn-
thetic and real data usually makes it difﬁcult for the network
to learn transferable knowledge.

Motivated by the recent progress of unpaired image-to-
image translation work (e.g., CycleGAN [38], UNIT [17],
MUNIT [14]), the mapping from virtual to realistic data is
regarded as the image synthesis problem.
It can help re-

6937

duce the domain discrepancy before training the segmen-
tation models. Based on the translated results, Cycada [12]
and DCAN [36] further align features between two domains
in feature level. By separately reducing the domain shift
in learning, these approaches obtained the state-of-the-art
performance. However, the performance is limited by the
quality of image-to-image translation. Once it fails, nothing
can be done in the following step. To address this problem,
we introduce a bidirectional learning framework where both
translation and segmentation adaption models can promote
each other in a closed loop.

There are two most related work. In [6], the segmenta-
tion model is also used to improve the image translation, but
not to adapt the source domain to the target domain since it
is only trained on source data. [39] also proposed a self-
training method for training the segmentation model itera-
tively. However, the segmentation model is only trained on
source data and uses none of image translation techniques.

Bidirectional Learning. The kind of techniques were
ﬁrst proposed to solve the neural machine translation prob-
lem, such as [10, 23], which train a language translation
model for both directions of a language pair. It improves
the performance compared with the uni-direction learning
and reduces the dependency on large amount of data. Bidi-
rectional learning techniques were also extended to image
generation problem [25], which trains a single network for
both classiﬁcation and image generation problem from both
top-to-down and down-to-top directions. A more related
work [29] proposed bidirectional image translation (i.e.,
source-to-target, and target-to-source),
then trained two
classiﬁers on both domains respectively and ﬁnally fuses the
classiﬁcation results. By contrast, our bidirectional learning
refers to translation boosting the performance of segmenta-
tion and vise verse. The proposed method is used to deal
with the semantic segmentation task.

3. Method

Given the source dataset S with segmentation labels YS
(e.g., synthetic data generated by computer graphics) and
the target dataset T with no labels (i.e., real data), we want
to train a network for semantic segmentation, which is ﬁ-
nally tested on the target dataset T . Our goal is to make its
performance to be as close as possible to the model trained
on T with ground truth labels YT . The task is unsupervised
domain adaptation for semantic segmentation. The task is
not easy since the visual (e.g., lighting, scale, object tex-
tures, etc.) domain gap between S and T makes it difﬁcult
for the network to learn transferable knowledge at once.

To address this problem, the recent work [12] proposed
two separated subnetworks. One is image-to-image transla-
tion subnetwork F which learn to translate an image from S
to T in absence of paired examples. The another is segmen-

F

M

F

M

(a): sequential learning

(b): bidirectional learning

Figure 1: Sequential Learning vs Bidirectional Learning

tation adaptation subnetwork M that is trained on translated
results F(S), which have the same labels YS to S, and the
target images T with no labels. Both subnetworks are learnt
in a sequential way shown in Figure 1(a). Such a two-stage
solution has two advantages: 1) F helps decrease the visual
domain gap; 2) when domain gap is reduced, M is easy to
learn, causing better performance. However, the solution
has some limitations. Once F is learnt, it is ﬁxed. There is
no feedback from M to boost the performance of F. Be-
sides, one-trial learning for M seems to just learn limited
transferable knowledge.

In this section, we propose a new learning framework
which can address the above two issues well. We inherit the
way of separated subnetworks, but employ a bidirectional
learning instead (in Section 3.1), which uses a closed-loop
to iteratively update both F and M. Furthermore, we in-
troduce a self-supervised learning to allow M being self-
motivated in training (in Section 3.2). The network archi-
tecture and loss functions are presented in Section 3.3.

3.1. Bidirectional Learning

Our learning consists of two directions shown in Fig-

ure 1(b).

The forward direction (i.e., F → M) is similar to the
behavior of previous sequential learning [12]. We ﬁrst train
the image-to-image translation model F using images from
T and S. Then, we get the translated results S ′ = F(S).
Note that F won’t change the labels of S ′, which are the
same to YS (labels of S). Next, we train the segmentation
adaptation model M using S ′ with YS and T . The loss
function to learn M can be deﬁned as:

ℓM = λadvℓadv(M(S ′), M(T )) + ℓseg(M(S ′), YS ), (1)

where ℓadv is adversarial loss that enforces the distance be-
tween the feature representations of S ′ and the feature rep-
resentations of T (obtained after S ′, T are fed into M) as
small as possible. ℓseg measures the loss of semantic seg-
mentation. Since only S ′ have the labels, we solely measure
the accuracy for the translated source images S ′.

The backward direction (i.e., M → F) is newly added.
The motivation is to promote F using updated M. In [35,
14], a perceptual loss, which measures the distance of fea-
tures obtained from a pre-trained network on object recog-
nition, is used in the image translation network to improve
the quality of translated result. Here, we use M to compute
features for measuring the perceptual loss. By adding the

6938

other two losses: GAN loss and image reconstruction loss,
the loss function for learning F can be deﬁned as:

ℓF = λGAN [ℓGAN (S ′, T ) + ℓGAN (S, T ′)]

+ λrecon[ℓrecon(S, F−1(S ′)) + ℓrecon(T , F(T ′)]
+ ℓper(M(S), M(S ′)) + ℓper(M(T ), M(T ′),

(2)

where three losses are computed symmetrically, i.e., S →
T and T → S, to ensure the image-to-image translation
consistent. The GAN loss ℓGAN enforces two distributions
between S ′ and T similar to each other. T ′ = F−1(T ),
where F−1 is the reverse function of F that maps the image
from T to S. The loss ℓrecon measures the reconstruction
error when the image from S ′ is translated back to S. ℓper is
the perceptual loss that we propose to maintain the seman-
tic consistency between S and S ′ or between T and T ′.
That is, once we obtained an ideal segmentation adaptation
model M, whether S and S ′, or T and T ′ should have the
same labels, even although there is the visual gap between
S and S ′, or between T and T ′.

3.2. Self supervised Learning for Improving M

In the forward direction (i.e., F → M), if the label is
available for both the source domain S and the target do-
main T , the fully supervised segmentation loss ℓseg is al-
ways the best choice to reduce the domain discrepancy. But
in our case, the label for the target dataset is missing. As
we known, self-supervised learning (SSL) has been used in
semi-supervised learning before, especially when the labels
of dataset are insufﬁcient or noisy. Here, we use SSL to
help promote the segmentation adaptation model M.

Based on the prediction probability of T , we can obtain

some pseudo labels bYT with high conﬁdence. Once we have

the pseudo labels, the corresponding pixels can be aligned
directly with S according to the segmentation loss. Thus,
we modify the overall loss function used to learn M (in
Equation 1) as:

ℓM = λadvℓadv(M(S ′), M(T ))

+ ℓseg(M(S ′), YS ) + ℓseg(M(Tssl), bYT ),

(3)

where Tssl ⊂ T is a subset of the target dataset in which the

pixels have the pseudo labels bYT . It can be empty at the be-

ginning. When a better segmentation adaptation model M
is achieved, we can use M to predict more high-conﬁdent
labels for T , causing the size of Tssl to grow. The recent
work [39] also use SSL for segmentation adaptation. By
contrast, SSL used in our work is combined with adversarial
learning, which can work much better for the segmentation
adaptation model.

We use the illustration (shown in Figure 2) to explain the
principle of this process. When we learn the segmentation
adaptation model for the ﬁrst time, Tssl is empty and the

(a): step 1

(b): step 2

Figure 2: Self-supervised learning process

Algorithm 1 Training process of our network

s
T
T

ssl

Input: (S, YS ), (T , Tssl = ∅), M(0)
Output: M

(K)
N (F(K))

for k ← 1 to K do (Bidirectional Learning)

train F(k) with Equation 2
(k)
train M
0 with Equation 1
for i ← 1 to N do (SSL)
(k)
i−1

update Tssl with M
train M

(k)
i

again with Equation 3

end for

end for

domain gap between S and T can be reduced with the loss
shown in Equation 1. This process is shown in Figure 2
(a). Then we pick up the points in the target domain T that
have been well aligned with S to construct the subset Tssl.
In the second step, we can easily shift Tssl to S and keep
them being aligned with the help of the segmentation loss
provided by the pseudo labels. This process is shown in
the middle of Figure 2 (b). Therefore, the amount of data
in T that needs to be aligned with S is decreased. We can
continue to shift the remaining data to S same as step 1,
as shown the right side of Figure 2 (b). It worth noting that
SSL helps adversarial learning process focus on the rest data
that is not fully aligned at each step, since ℓadv can hardly
change the data from S and Tssl that has been aligned well.

3.3. Network and Loss Function

In this section, we introduce the network architecture
(shown in Figure 3), details of loss functions and the train-
ing process (shown in Algorithm 1). The network is mainly
composed with two components – the image translation
model and segmentation adaptation model.

While the translation model is learned, the loss ℓGAN
and loss ℓrecon (shown in Figure 3 and Equation 2) can be
deﬁned as:

ℓGAN (S ′, T ) = EIT ∼T [DF(IT )] + EIS ∼S [1 − DF((I ′

S ))],

ℓrecon(S, F−1(S ′)) = EIS ∼S [||F−1((I ′

S ))−IS||1],

where IS and IT are the input images from source and tar-
get dataset. I ′
S is the translated image given by F. DF is
the discriminator added to reduce the difference between IT
and I ′
S . For the reconstruction loss, L1 norm is used to keep
the cycle consistency between IS and F−1(I ′
S ) when F−1

6939

Image Translation Model

Segmentation Adaptation Model

Self-supervised Learning

translated  source data

source  probability

Softmax

source  prediction

mask

source  ground truth

source 
prediction

Ä

target data

target probability

target prediction

max probability

threshold

predicted  target 
ground truth

Figure 3: Network architecture and loss function

source  data

target data

target image

data forward

loss backpropagation

ground truth

M0

(1)(F(1))

M2

(1)(F(1))

M0

(2)(F(2))

M2

(2)(F(2))

Figure 4: Segmentation result for each step in bidirectional learning

is the reverse function of F. Here, we only show two losses
for one direction, and ℓGAN (S, T ′), ℓrecon(T , F(T ′)) can
be deﬁned similarly.

As shown in Figure 3, the perceptual loss ℓper connects
the translation model and segmentation adaptation model.
When we learn the perceptual loss ℓper for the translation
model, instead of only keeping the semantic consistency be-
tween IS and its translated result I ′
S , we add another term
weighted by λper recon, to keep the semantic consistency
between IS and its corresponding reconstruction F−1(I ′
S ).
With the new term, the translation model can be more stable
especially for the reconstruction part. ℓper is deﬁned as:

ℓper(M(S), M(S ′)) = λper EIS ∼S||M(IS ) − M((I ′

S ))||1+

λper reconEIS ∼S [||M(F−1((I ′

S ))) − M(IS )||1]

Due to the symmetry, ℓper(M(T ), M(T ′)) (shown in
Equation 2) can be deﬁned in a similar way.

When the segmentation adaptation model is trained, it
requires the adversarial learning with the loss ℓadv and the
self-supervised learning with the loss ℓseg (shown in Equa-
tion 3). For adversarial learning, we add a discriminator
DM to decrease the difference between the source and tar-
get probabilities shown in Figure 3. ℓadv can be deﬁned as:

ℓadv(M(S ′), M(T )) = EIT ∼T [DM(M(IT ))]
+ EIS ∼S [1 − DM(M(I ′

S ))].

The segmentation loss ℓseg uses the cross-entropy loss. For
the source image IS , ℓseg can be deﬁned as:

ℓseg(M(S ′), YS ) = −

1

HW X

H,W

CX

c=1

✶

[c=yhw

S ] log P hwc

S

,

where yS is the label map for IS , C is the number of classes,
H and W are the height and width of the output probabil-
ity map. PS is the source probability of the segmentation

adaptation model which can be deﬁned as PS = M(I ′
S ).
For the target image IT , we need to deﬁne how to choose

the pseudo label map byT for it. We choose to use a common

method we call as ”max probability threshold(MPT)” to ﬁl-
ter the pixels with high prediction conﬁdence in IT . Thus

we can deﬁne byT as byT = argmax M(IT ) and the mask
map for byT as mT = ✶[argmax M(IT )>threshold]. Thus the

segmentation loss for IT can be expressed as:

ℓseg(M(Tssl), bYT ) = −

1

HW X

H,W

mhw

T

CX

c=1

✶

[c=yhw

T ] log P hwc

T

,

where PT is the target output of M.

We present the training processing in Algorithm 1. The
training process consists of two loops. The outer loop is
mainly to learn the translation model and the segmenta-
tion adaptation model through the forward direction and the
backward direction. The inner loop is mainly used to im-
plement the SSL process. In the following section, we will
introduce how to choose the number of iteration for learning
F, M, and how to estimate the MPT for SSL.

4. Discussion

To know the effectiveness of bidirectional learning and
self-supervised learning for improving M, we conduct
some ablation studies. We use GTA5 [27] as the source
dataset and Cityscapes [5] as the target dataset.
The
translation model is CycleGAN [38] and the segmentation
adaptation model is DeepLab V2 [3] with the backbone
ResNet101 [11]. All the following experiments use the
same model, unless it is speciﬁed.

Here, we ﬁrst provide the description of notations used in
the following ablation study and tables. M(0) is the initial
model to start the bidirectional learning and is trained only
with source data. M(1) is trained with source and target
data with adversarial learning. For M(0)(F(1)), a transla-
tion model F(1) is used to translate the source data and then
a segmentation model M(0) is learned based on the trans-
(F(k)) for k = 1, 2 and i = 0, 1, 2
lated source data. M
refers to the model of k-th iteration for the outer loop and
i-th iteration for the inner loop in Algorithm 1.

(k)
i

6940

Table 1: Performance of bidirectinal learning

Table 3: Inﬂuence of threshold

Table 4: Inﬂuence of N

GTA5 → Cityscapes

GTA5 → Cityscapes

GTA5 → Cityscapes

model
M(0)
M(1)

(1)

M(0)(F(1))
0 (F(1))
M
0 (F(2))

(2)

M

mIoU

33.6

40.9

41.1

42.7

43.3

M

M

M

M

M

(1)

model
(1)
1 (F(1))
1 (F(1))
1 (F(1))
1 (F(1))
1 (F(1))

(1)

(1)

(1)

threshold mIoU

0.95
0.9
0.8
0.7
−

45.7

46.8

46.4

45.9

44.9

4.1. Bidirectional Learning without SSL

We show the results obtained by the model trained in a
bidirectional learning system without SSL. In Table 1, M(0)
is our baseline model that gives the lowerbound for mIoU.
We ﬁnd a similar performance between the model M(1) and
M(0)(F(1)) both of which achieve more than 7% improve-
ment compared to M(0) and about 1.6% further improve-
ment is given by M(1)(F(1)). It means segmentation adap-
tation model and the translation model can work indepen-
dently and when combined together which is basically one
iteration of the bidirectional learning they can be comple-
mentary to each other. We further show that through con-
tinue training the bidirectional learning system, in which
case M(1)(F(1)) is used to replace M(0) for the backward
direction, a better performance can be given by the new

model M

(2)
0 (F(2)).

4.2. Bidirectional Learning with SSL

In this section, we show how the SSL can further im-
prove the ability of segmentation adaption model and in re-
turn inﬂuence the bidirectional learning process. In Table 2,
we show results given by two iterations(k = 1, 2) based on
Algorithm 1. In Figure 4, we show the segmentation results
and the corresponding mask map given by the max proba-
bility threshold (MPT) which is 0.9. In Figure 4, the white
pixels are the ones with prediction conﬁdence higher than
MPT and the black pixels are the low conﬁdent pixels.

While k = 1, when model M

(1)
0 (F(1)) is updated
(1)
2 (F(1)) with SSL, the mIoU can be improved by
to M
4.5%. We can ﬁnd for each category when the IoU is be-
(1)
0 (F(1)) to
low 50, a big improvement can be got from M
(1)
2 (F(1)). It can prove our previous analysis in section
M
3.2 that with SSL the well aligned data from source and
target domain can be kept and the rest data can be further
aligned through the adversarial learning process.

While k = 2, we ﬁrst replace M(0) with M

(1)
2 (F(1))
to start the backward direction. Without SSL the mIoU is
44.3 which is a larger improvement compared to the results
shown in Table 1. It can further prove our discussion in sec-
tion 4.1 about the importance role played by the segmenta-
tion adaptation model in the backward direction. Further-
more, we can ﬁnd from Table 2, although in the beginning
of the second iteration the mIoU drops from 47.2 to 44.3,
while SSL is induced, the mIoU can be promoted to 48.5

model
(1)
0

M

(1)

(1)

0 (F(1))
1 (F(1))
2 (F(1))
3 (F(1))

(1)

(1)

pixel ratio mIoU

66%
69%
79%
81%
81%

40.9

42.7

46.8

47.2

47.1

0.7
prediction confidence

0.8

0.9

1

M

M

M

M

7

6

5

4

3

2

1

o
i
t
a
r
 
l
e
x
i
p

 
f
o

 
e
p
o
l
s

0
0.6

1

0.9

0.8

0.7

0.6

0.5

o
i
t
a
r
 
l
e
x
i
p

0.4

0.5

0.6

0.7

0.8

0.9

prediction confidence

Figure 5: Relationship between pixel ratio and the prediction conﬁdence

which outperforms the results in the ﬁrst iteration. From
the segmentation results shown in Figure 4, our ﬁndings
can be further conﬁrmed and the most important thing is
as we improve the segmentation performance, the segmen-
tation adaptation model can give more conﬁdent prediction
which can be observed by the increasing white area in the
mask map. It gives us the motivation to use the mask map to
choose the threshold and number of iterations for the SSL
process in Algorithm 1.

4.3. Hyper Parameter Learning

We will describe how to choose the threshold to ﬁlter
out data with high conﬁdence and the iteration number N
in Algorithm 1.

When we choose the threshold, we have to balance be-
tween two folds. On one hand, we desire the predicted la-
bels with high conﬁdence as many as possible (presented
as white areas in Figure 4). On the other hand, we want
to avoid inducing too much noise caused by the incorrect
prediction, namely, the threshold should be as high as possi-
ble. We present the relationship of the prediction conﬁdence
(maximum class probability of per pixel from M) and the
ratio between selected pixels and all pixels (i.e., percentage
of all white areas shown in Figure 4) on the left side of Fig-
ure 5, then show the slope in the right side of Figure 5. We
can ﬁnd when the prediction conﬁdence increases from 0.5
to 0.9, the ratio decreases almost linearly and the slope stays
almost unchanged. But from 0.9 to 0.99, the ratio decreases
much faster. Based on the observation, we choose the in-
ﬂection point 0.9 as the threshold as the trade-off between
the number and the quality of selected labels.

In order to further prove our choice, in Table 3, we show
segmentation results using different thresholds to the self-
supervised learning of MK
N when K = 1 and N = 1 in Al-
gorithm 1. As another option, we also consider soft thresh-
old instead of hard one, namely, every pixel being weighted

6941

Table 2: Performance of bidirectional learning with self-supervised learning

GTA5 → Cityscapes

k
l
a
w
e
d
i
s

12.7

42.0

47.8

47.9

41.3

46.1

44.7

g
n
i
d
l
i
u
b

69.5

82.0

84.0

84.2

83.2

83.9

84.2

d
a
o
r

69.0

89.1

91.2

91.4

88.2

91.2

91.0

l
l
a
w

9.9

24.3

34.8

32.4

28.8

31.6

34.6

e
c
n
e
f

19.5

15.1

28.9

26.0

21.9

20.6

27.6

e
l
o
p

22.8

27.4

31.7

31.8

31.7

29.9

30.2

t
h
g
i
l
-
t

31.7

35.7

37.7

37.3

35.2

36.4

36.0

n
g
i
s
-
t

15.3

24.6

36.0

33.0

28.2

31.9

36.0

n
o
i
t
a
t
e
g
e
v

73.9

81.1

84.0

83.3

83.0

85.0

85.0

n
i
a
r
r
e
t

11.3

32.4

40.4

39.2

26.2

39.7

43.6

y
k
s

67.2

78.0

76.6

79.2

83.2

84.7

83.0

n
o
s
r
e
p

54.7

57.6

57.9

57.7

57.6

57.5

58.6

r
e
d
i
r

23.9

28.7

25.3

25.6

27.0

29.6

31.6

r
a
c

53.4

76.0

80.4

81.3

77.1

83.1

83.3

k
c
u
r
t

29.7

26.5

31.2

36.3

27.5

38.8

35.3

s
u
b

n
i
a
r
t

4.6

11.6

36.0

41.7

39.7

34.6

46.9

49.7

4.0

2.8

2.6

2.5

2.5

3.3

e
k
i
b
r
o
t
o
m

26.1

25.7

27.2

31.3

28.3

27.5

28.8

e
l
c
y
c
i
b

32.5

24.9

32.4

33.5

36.1

38.2

35.6

mIoU

33.6

42.7

46.8

47.2

44.3

47.6

48.5

k = 1

k = 2

(1)

(1)

M(0)
(1)
0 (F(1))
1 (F(1))
2 (F(1))
0 (F(2))
1 (F(2))
2 (F(2))

(2)

(2)

(2)

M

M

M

M

M

M

by its maximum class probability. We show the result on
the bottom row. All the results conﬁrm our analysis. When
the threshold is lower than 0.9, the uncorrected prediction
becomes the key issue to inﬂuence the performance of SSL.
While we increase the threshold to 0.95, the SSL process
is more sensitive to the number of pixels that can be used.
When we use soft threshold, the result is still worse. It is
probably because an amount of labeling noise are involved
and the bad impact cannot be well alleviated by assigning
a lower weight to the noise label. Thus, 0.9 seems to be a
good choice for the threshold in the following experiments.

For the iteration number N , we select a proper value ac-
cording to the predicted labels as well. When N increases,
the segmentation adaptation model becomes much stronger,
causing more labels to be used for SSL. Once the pixel ra-
tio for SSL stops increasing, it means that the learning for
the segmentation adaptation model is converged and nearly
no improved. We deﬁnitely increase the value of K to start
another iteration. In Table 4, we show some segmentation
results with the theshold 0.9 as we increase the value of N .
We can ﬁnd the mIoU becomes better with the increasing of
N . When N = 2 or 3, the mIoU almost stopped increasing,
and the pixel ratio stay around the same. It may suggest that
N = 2 is a good choice, and we use it in our work.

5. Experiments

In this section, we compare the results obtained between

our method and the state-of-the-art methods.

Network Architecture.
In our experiments, we choose to
use DeepLab V2 [3] with ResNet101 [11] and FCN-8s [18]
with VGG16 [32] as our segmentation model. They are ini-
tialized with the network pre-trained with ImageNet [15].
The discriminator we choose for segmentation adaptation
model is similar to [26] which has 5 convolution layers with
kernel 4 × 4 with channel numbers {64, 128, 256, 512, 1}
and stride of 2. For each convolutional layer except the last
one, a leaky ReLU [20] parameterized by 0.2 is followed.
For the image translation model, we follow the architecture
of CycleGAN [38] with 9 blocks and add the segmentation
adaptation model as the perceptual loss.

Training. When training CycleGAN [38], the image is
randomly cropped to the size 452 × 452 and it is trained
for 20 epochs. For the ﬁrst 10 epochs, the learning rate is
0.0002 and decreases to 0 linearly after 10 epochs. We set
λGAN = 1, λrecon = 10 in Equation 3 and set λper = 0.1,
λper recon = 10 for the perceptual loss. When training the
segmentation adaptation model, images are resized with the
long side to be 1, 024 and the ratio is kept. Different pa-
rameters are used for DeepLab V2 [3] and FCN-8s [18].
For DeepLab V2 with ResNet 101, we use SGD as the
optimizer. The initial learning rate is 2.5 × 10−4 and de-
creased with ‘poly’ learning rate policy with power as 0.9.
For FCN-8s with VGG16, we use Adam as the optimizer
with momentum as 0.9 and 0.99. The initial learning rate
is 1 × 10−5 and decreased with ‘step’ learning rate policy
with step size as 5000 and γ = 0.1. For both DeepLab V2
and FCN-8s, we use the same discriminator that is trained
with Adam optimizer with initial learning rate as 1 × 10−4
for DeepLab V2 and 1 × 10−6 for FCN-8s. The momentum
is set as 0.9 and 0.99. We set λadv = 0.001 for ResNet101
and 1 × 10−4 for FCN-8s in Equation 1.
Dataset. As we have mentioned before, two synthetic
datasets – GTA5 [27] and SYNTHIA [28] are used as
the source dataset and Cityscapes [5] is used as the target
dataset. For GTA5 [27], it contains 24, 966 images with the
resolution of 1914 × 1052 and we use the 19 common cat-
egories between GTA5 and Cityscapes dataset. For SYN-
THIA [28], we use the SYNTHIA-RAND-CITYSCAPES
set which contains 9, 400 images with the resolution 1280×
760 and 16 common categories with Cityscapes [5]. For
Cityscapes [5], it is splited into training set, validation set
and testing set. The training set contains 2, 975 images with
the resolution 2048 × 1024. We use the training set as the
target dataset only. Since the ground truth labels for the test-
ing set are missing, we have to use the validation set which
contains 500 images as the testing set in our experiments.

Comparison with State-of-Art. We compare the results
between our method and the state-of-the-art method with
two different backbone networks: ResNet101 and VGG16
respectively. We perform the comparison on two tasks:
“GTA5 to Cityscapes” and “SYNTHIA to Cityscapes”. In
Table 5, we present the adaptation result on the task “GTA5

6942

Table 5: Comparison results from GTA5 to Cityscapes

GTA5 → Cityscapes

k
l
a
w
e
d
i
s

g
n
i
d
l
i
u
b

d
a
o
r

l
l
a
w

e
c
n
e
f

e
l
o
p

t
h
g
i
l
-
t

n
g
i
s
-
t

n
o
i
t
a
t
e
g
e
v

n
i
a
r
r
e
t

y
k
s

n
o
s
r
e
p

r
e
d
i
r

r
a
c

k
c
u
r
t

s
u
b

n
i
a
r
t

e
k
i
b
r
o
t
o
m

e
l
c
y
c
i
b

Oracle

Method

ResNet101[11]

65.1

VGG16[32]

60.3

Cycada[12]

65.0 12.0 28.6
AdaptSegNet[33] 86.5 25.9 79.8 22.1 20.0 23.6 33.1 21.8 81.8 25.9 75.9 57.3 26.2 76.3 29.8 32.1

86.7 35.6 80.1 19.8 17.5 38.0 39.9 41.5 82.7 27.9 73.6 64.9

31.1 42.0
29.5 32.5
85.0 30.8 81.3 25.8 21.2 22.2 25.4 26.6 83.4 36.7 76.2 58.9 24.9 80.7 29.5 42.9 2.50 26.9 11.6
31.9 31.4
87.0 27.1 79.6 27.3 23.3 28.3 35.5 24.2 83.6 27.4 74.2 58.6 28.0 76.2 33.1 36.7
91.0 44.7 84.2 34.6 27.6 30.2 36.0 36.0 85.0 43.6 83.0 58.6 31.6 83.3 35.3 49.7
28.8 35.6
16.8 16.6
55.2 18.8 18.9
8.4
16.3 11.1 75.7 13.3 66.5 38.0
74.9 22.0 71.7
6.0
18.9 32.4
28.3 25.9 10.1 75.5 15.7 51.6 47.2
71.9
66.7 26.8 73.7 14.8
2.2
85.2 37.2 76.5 21.8 15.0 23.8 22.9 21.5 80.5 31.3 60.7 50.5
76.9 17.1 28.2
9.8
82.3 26.7 77.4 23.7 20.5 20.4 30.3 15.9 80.9 25.4 69.5 52.6 11.1 79.6 24.9 21.2 1.30 17.0 6.70
88.0 30.6 79.2 23.4 20.5 26.1 23.0 14.8 81.6 34.5 72.0 45.8
80.5 26.6 29.9
10.7
0.0
89.2 40.9 81.2 29.1 19.2 14.2 29.0 19.6 83.7 35.9 80.7 54.7 23.3 82.7 25.8 28.0
25.7 19.9

6.7
3.3
0.0
5.4
4.5

9.3
6.2
9.0

11.9
9.5

0.0
2.3

4.5
7.2

DCAN[36]
CLAN[19]

Ours

Curriculum[37]

CBST[39]
Cycada[12]
DCAN[36]
CLAN[19]

Ours

3.7

7.9

19

0

mIoU
42.7
41.4
41.7
43.2
48.5
28.9
30.9
35.4
36.2
36.6
41.3

Table 6: Comparison results from SYNTHIA to Cityscapes

k
l
a
w
e
d
i
s

37.2
37.0
46.7
19.6
26.1
28.7
30.4
30.3

g
n
i
d
l
i
u
b

78.8
80.1
80.3
30.8
74.9
69.5
70.8
74.5

d
a
o
r

79.2
81.3
86.0
11.5
65.2
69.6
79.9
72.0

SYNTHIA → Cityscapes

l
l
a
w

-
-
-

4.4
0.1
12.1
1.6
0.1

e
c
n
e
f

-
-
-

0.0
0.5
0.1
0.6
0.3

e
l
o
p

-
-
-

20.3
10.7
25.4
22.3
24.6

t
h
g
i
l
-
t

9.9
16.1
14.1
0.1
3.5
11.9
6.7
10.2

n
g
i
s
-
t

10.5
13.7
11.6
11.7
3.0
13.6
23.0
25.2

n
o
i
t
a
t
e
g
e
v

78.2
78.2
79.2
42.3
76.1
82.0
76.9
80.5

n
o
s
r
e
p

53.5
53.4
54.1
51.2
47.1
49.1
41.9
54.7

r
e
d
i
r

19.6
21.2
27.9
3.8
8.2
14.5
16.7
23.2

y
k
s

80.5
81.5
81.3
68.7
70.6
81.9
73.9
80.0

r
a
c

67.0
73.0
73.7
54.0
43.2
66.0
61.7
72.7

s
u
b

29.5
32.9
42.2
3.2
20.7
6.6
11.5
24.0

e
k
i
b
r
o
t
o
m

21.6
22.6
25.7
0.2
0.7
3.7
10.3
7.5

e
l
c
y
c
i
b

31.3
30.7
45.3
0.6
13.1
32.4
38.6
44.9

mIoU
45.9
47.8
51.4
20.2
29.0
35.4
35.4
39.0

Oracle

Method

ResNet101[11]

71.7

VGG16[32]

59.5

AdaptSegNet[33]

CLAN[19]

Ours

FCN wild[13]
Curriculum[37]

CBST[39]
DCAN[36]

Ours

to Cityscapes” with ResNet101 and VGG16. We can ob-
serve the role of backbone in all domain adaptation meth-
ods, namely ResNet101 achieves a much better result than
In [37, 33, 19], they mainly focus on feature-
VGG16.
level alignment with different adversarial loss functions.
But working only on the feature level is not enough, even
though the best result [36] among them is still about 5%
worse than our results. Cycada [12] (we run their codes with
ResNet101) and DCAN [36] used the translation model fol-
lowed by the segmentation adaptation model to further re-
duce the visual domain gap, and both achieved very similar
performance. Ours uses similar loss function compared to
Cycada [12], but with a new proposed bidirectional learn-
ing method, 6% improvement can be achieved. CBST [39]
proposed a self-training method, and further improved the
performance with space prior information. For a fair com-
parison, we show the results that only use self-training.
With VGG16, we can get 10.4% improvement. Therefore,
we can ﬁnd without bidirectional learning, the self-training
method is not enough to achieve a good performance.

In Table 6, we present the adaptation result on the
task “SYNTHIA to Cityscapes” for both ResNet101
and VGG16.
The domain gap between SYNTHIA
and Cityscapes is much larger than that of GTA5 and
Cityscapes, and their categories are not fully overlapped.
As the baseline results [33, 19] chosen for ResNet101 only
use 13 categories, we also list results for the 13 categories
for a fair comparison. We can ﬁnd from Table 6, as the do-
main gap increases, the adaptation result for Cityscapes is
much worse compared to the result in Table 5. For exam-

ple, the category like ‘road’, ‘sidewalk’ and ‘car’ are more
than 10% worse. And this problem will have a bad impact
on the SSL because of the lower prediction conﬁdence. But
we can still achieve at least 4% better than most of other
results given by [37, 39, 36, 33].
Performance Gap to Upper Bound. We use the target
dataset with ground truth labels to train a segmentation
model, which shares the same backbone that we used, to
get the upper-bound result. For “GTA5 to Cityscapes”
with 19 categories, the upper bounds are 65.1 and 60.3 for
ResNet101 and VGG16 respectively. For “SYNTHIA to
Cityscapes” with 13 categories for ResNet101 and 16 cate-
gories for VGG16, the upper bounds are 71.7 and 59.5. For
our method, although the performance gap is 16.6 at least,
it has been reduced signiﬁcantly compared to other meth-
ods. However, it means there is still big room to improve
the performance. We leave it in future work.

6. Conclusion

In this paper, we propose a bidirectional learning method
with self-supervised learning for segmentation adaptation
problem. We show via a lot of experiments that segmen-
tation performance for real dataset can be improved when
the model is trained bidirectionally and achieve the state-
of-the-art result for multiple tasks with different networks.

Acknowledgment

This work was partially funded by NSF awards IIS-

1546305 and IIS-1637941.

6943

References

[1] G. J. Brostow, J. Shotton, J. Fauqueur, and R. Cipolla. Seg-
mentation and recognition using structure from motion point
clouds. In ECCV (1), pages 44–57, 2008. 2

[2] F. M. Carlucci, L. Porzi, B. Caputo, E. Ricci, and S. R. Bul`o.
In ICCV,

Autodial: Automatic domain alignment layers.
pages 5077–5085, 2017. 1, 2

[3] L.-C. Chen, G. Papandreou, I. Kokkinos, K. Murphy, and
A. L. Yuille. Deeplab: Semantic image segmentation with
deep convolutional nets, atrous convolution, and fully con-
nected crfs. IEEE transactions on pattern analysis and ma-
chine intelligence, 40(4):834–848, 2018. 5, 7

[4] Q. Chen, Y. Liu, Z. Wang, I. Wassell, and K. Chetty. Re-
weighted adversarial adaptation network for unsupervised
domain adaptation. In Proceedings of the IEEE Conference
on Computer Vision and Pattern Recognition, pages 7976–
7985, 2018. 2

[5] M. Cordts, M. Omran, S. Ramos, T. Rehfeld, M. Enzweiler,
R. Benenson, U. Franke, S. Roth, and B. Schiele. The
cityscapes dataset for semantic urban scene understanding.
In Proceedings of the IEEE conference on computer vision
and pattern recognition, pages 3213–3223, 2016. 2, 5, 7

[6] A. Dundar, M.-Y. Liu, T.-C. Wang, J. Zedlewski, and
J. Kautz. Domain stylization: A strong, simple baseline for
synthetic to real image domain adaptation. arXiv preprint
arXiv:1807.09384, 2018. 3

[7] J. Friedman, T. Hastie, and R. Tibshirani. The elements of
statistical learning, volume 1. Springer series in statistics
New York, NY, USA:, 2001. 1

[8] B. Geng, D. Tao, and C. Xu. Daml: Domain adaptation
IEEE Transactions on Image Processing,

metric learning.
20(10):2980–2989, 2011. 2

[9] I. Goodfellow,

J. Pouget-Abadie, M. Mirza, B. Xu,
D. Warde-Farley, S. Ozair, A. Courville, and Y. Bengio. Gen-
erative adversarial nets. In Advances in neural information
processing systems, pages 2672–2680, 2014. 2

[10] D. He, Y. Xia, T. Qin, L. Wang, N. Yu, T. Liu, and W.-Y. Ma.
Dual learning for machine translation. In Advances in Neural
Information Processing Systems, pages 820–828, 2016. 3

[11] K. He, X. Zhang, S. Ren, and J. Sun. Deep residual learn-
ing for image recognition. In Proceedings of the IEEE con-
ference on computer vision and pattern recognition, pages
770–778, 2016. 5, 7, 8

[12] J. Hoffman, E. Tzeng, T. Park, J.-Y. Zhu, P. Isola, K. Saenko,
A. A. Efros, and T. Darrell. Cycada: Cycle-consistent adver-
sarial domain adaptation. arXiv preprint arXiv:1711.03213,
2017. 1, 2, 3, 8

[13] J. Hoffman, D. Wang, F. Yu, and T. Darrell. Fcns in the
wild: Pixel-level adversarial and constraint-based adapta-
tion. arXiv preprint arXiv:1612.02649, 2016. 2, 8

[14] X. Huang, M.-Y. Liu, S. Belongie, and J. Kautz. Multimodal
arXiv preprint

unsupervised image-to-image translation.
arXiv:1804.04732, 2018. 2, 3

[15] A. Krizhevsky, I. Sutskever, and G. E. Hinton.

Imagenet
classiﬁcation with deep convolutional neural networks.
In
Advances in neural information processing systems, pages
1097–1105, 2012. 7

[16] Y. LeCun, L. Bottou, Y. Bengio, and P. Haffner. Gradient-
based learning applied to document recognition. Proceed-
ings of the IEEE, 86(11):2278–2324, 1998. 1, 2

[17] M.-Y. Liu, T. Breuel, and J. Kautz. Unsupervised image-to-
image translation networks. In Advances in Neural Informa-
tion Processing Systems, pages 700–708, 2017. 2

[18] J. Long, E. Shelhamer, and T. Darrell. Fully convolutional
networks for semantic segmentation. In Proceedings of the
IEEE conference on computer vision and pattern recogni-
tion, pages 3431–3440, 2015. 1, 7

[19] Y. Luo, L. Zheng, T. Guan, J. Yu, and Y. Yang. Taking
a closer look at domain shift: Category-level adversaries
for semantics consistent domain adaptation. arXiv preprint
arXiv:1809.09478, 2018. 8

[20] A. L. Maas, A. Y. Hannun, and A. Y. Ng. Rectiﬁer nonlin-
In Proc.

earities improve neural network acoustic models.
icml, volume 30, page 3, 2013. 7

[21] M. Mancini, L. Porzi, S. R. Bul`o, B. Caputo, and E. Ricci.
Boosting domain adaptation by discovering latent domains.
arXiv preprint arXiv:1805.01386, 2018. 2

[22] Y. Netzer, T. Wang, A. Coates, A. Bissacco, B. Wu, and A. Y.
Ng. Reading digits in natural images with unsupervised fea-
ture learning. In NIPS workshop on deep learning and un-
supervised feature learning, volume 2011, page 5, 2011. 1,
2

[23] X. Niu, M. Denkowski, and M. Carpuat. Bi-directional neu-
ral machine translation with synthetic parallel data. arXiv
preprint arXiv:1805.11213, 2018. 3

[24] V. M. Patel, R. Gopalan, R. Li, and R. Chellappa. Visual do-
main adaptation: A survey of recent advances. IEEE signal
processing magazine, 32(3):53–69, 2015. 2

[25] S. Pontes-Filho and M. Liwicki. Bidirectional learning for
robust neural networks. arXiv preprint arXiv:1805.08006,
2018. 3

[26] A. Radford, L. Metz, and S. Chintala. Unsupervised repre-
sentation learning with deep convolutional generative adver-
sarial networks. arXiv preprint arXiv:1511.06434, 2015. 7

[27] S. R. Richter, V. Vineet, S. Roth, and V. Koltun. Playing
for data: Ground truth from computer games. In European
Conference on Computer Vision, pages 102–118. Springer,
2016. 1, 2, 5, 7

[28] G. Ros, L. Sellart, J. Materzynska, D. Vazquez, and A. M.
Lopez. The synthia dataset: A large collection of synthetic
images for semantic segmentation of urban scenes. In Pro-
ceedings of the IEEE conference on computer vision and pat-
tern recognition, pages 3234–3243, 2016. 1, 2, 7

[29] P. Russo, F. M. Carlucci, T. Tommasi, and B. Caputo. From
source to target and back: symmetric bi-directional adaptive
gan. arXiv preprint arXiv:1705.08824, 3, 2017. 3

[30] K. Saenko, B. Kulis, M. Fritz, and T. Darrell. Adapting vi-
sual category models to new domains. In European confer-
ence on computer vision, pages 213–226. Springer, 2010. 2

[31] F. S. Saleh, M. S. Aliakbarian, M. Salzmann, L. Petersson,
and J. M. Alvarez. Effective use of synthetic data for urban
scene semantic segmentation.
In European Conference on
Computer Vision, pages 86–103. Springer, Cham, 2018. 2

6944

[32] K. Simonyan and A. Zisserman. Very deep convolutional
networks for large-scale image recognition. arXiv preprint
arXiv:1409.1556, 2014. 7, 8

[33] Y.-H. Tsai, W.-C. Hung, S. Schulter, K. Sohn, M.-H.
Yang, and M. Chandraker. Learning to adapt structured
output space for semantic segmentation.
arXiv preprint
arXiv:1802.10349, 2018. 2, 8

[34] E. Tzeng, J. Hoffman, K. Saenko, and T. Darrell. Adversarial
discriminative domain adaptation. In Computer Vision and
Pattern Recognition (CVPR), volume 1, page 4, 2017. 1, 2

[35] H. T. Vu and C.-C. Huang. Domain adaptation meets dis-
entangled representation learning and style transfer. CoRR,
2017. 1, 2, 3

[36] Z. Wu, X. Han, Y.-L. Lin, M. G. Uzunbas, T. Goldstein, S. N.
Lim, and L. S. Davis. Dcan: Dual channel-wise alignment
networks for unsupervised scene adaptation. arXiv preprint
arXiv:1804.05827, 2018. 1, 2, 3, 8

[37] Y. Zhang, P. David, and B. Gong. Curriculum domain adap-
In The
tation for semantic segmentation of urban scenes.
IEEE International Conference on Computer Vision (ICCV),
volume 2, page 6, 2017. 1, 2, 8

[38] J.-Y. Zhu, T. Park, P. Isola, and A. A. Efros. Unpaired image-
to-image translation using cycle-consistent adversarial net-
works. arXiv preprint, 2017. 1, 2, 5, 7

[39] Y. Zou, Z. Yu, B. V. Kumar, and J. Wang. Unsupervised
domain adaptation for semantic segmentation via class-
balanced self-training. In Proceedings of the European Con-
ference on Computer Vision (ECCV), pages 289–305, 2018.
3, 4, 8

6945

