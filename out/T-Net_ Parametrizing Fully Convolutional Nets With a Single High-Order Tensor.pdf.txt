T-Net: Parametrizing Fully Convolutional Nets with a Single High-Order Tensor

Jean Kossaiﬁ∗

Adrian Bulat∗

Georgios Tzimiropoulos

Maja Pantic

Samsung AI Center, Cambridge

United Kingdom

{j.kossaifi, adrian.bulat, georgios.t, maja.pantic}@samsung.com

Abstract

Recent ﬁndings indicate that over-parametrization,
while crucial for successfully training deep neural net-
works, also introduces large amounts of redundancy. Ten-
sor methods have the potential to efﬁciently parametrize
over-complete representations by leveraging this redun-
dancy. In this paper, we propose to fully parametrize Con-
volutional Neural Networks (CNNs) with a single high-
order, low-rank tensor. Previous works on network ten-
sorization have focused on parametrizing individual lay-
ers (convolutional or fully connected) only, and perform
the tensorization layer-by-layer separately. In contrast, we
propose to jointly capture the full structure of a neural net-
work by parametrizing it with a single high-order tensor,
the modes of which represent each of the architectural de-
sign parameters of the network (e.g. number of convolu-
tional blocks, depth, number of stacks, input features, etc).
This parametrization allows to regularize the whole net-
work and drastically reduce the number of parameters. Our
model is end-to-end trainable and the low-rank structure
imposed on the weight tensor acts as an implicit regular-
ization. We study the case of networks with rich structure,
namely Fully Convolutional Networks (FCNs), which we
propose to parametrize with a single 8th–order tensor. We
show that our approach can achieve superior performance
with small compression rates, and attain high compression
rates with negligible drop in accuracy for the challenging
task of human pose estimation.

1. Introduction

For a wide range of challenging tasks, including recog-
nition [22, 34, 13], detection [32], semantic segmentation
[25, 12] and human pose estimation [26], the state-of-the-art
is currently attained with Convolutional Neural Networks
(CNNs). There is evidence that a key feature behind the suc-
cess of these methods is over-parametrization, which helps

∗Equal contribution.

ﬁnd good local minima [11, 35]. However, at the same time,
over-parametrization leads to a great amount of redundancy,
and from a statistical perspective, it might hinder general-
ization because it excessively increases the number of pa-
rameters. Furthermore, models with an excessive number
of parameters have increased storage and computation re-
quirements, rendering them problematic for deployment on
devices with limited computational resources. This paper
focuses on a novel way of leveraging the redundancy in the
parameters of CNNs by jointly parametrizing the whole net-
work using tensor methods.

There is a signiﬁcant amount of recent work on using
tensors to reduce the redundancy and improve the efﬁciency
of CNNs, mostly focusing on re-parametrizing individual
layers. For example, [36, 17] treat a convolutional layer as a
4D tensor and then compute a decomposition of the 4D ten-
sor into a sum of a small number of low-rank tensors. Sim-
ilarly, [27] proposes tensorizing the fully-connected layers.
The bulk of these methods focus on tensorizing individual
layers only, and perform the tensorization layer-by-layer
disjointly, usually by applying a tensor decomposition to
the pre-trained weights and then ﬁne-tuning to compensate
for the performance loss. For example, [36] tensorizes the
second convolutional layer of AlexNet [22].

Our paper primarily departs from prior work by using
a single high-order tensor to parametrize the whole CNN
as opposed to using different tensors to parametrize the in-
dividual layers.
In particular, we propose to parametrize
the network with a single high-order tensor, each dimen-
sion of which represents a different architectural design
parameter of the network. For the case of Fully Convo-
lutional Networks (FCNs) with an encoder-decoder struc-
ture considered herein (see also Fig. 1), each dimension
of the 8−dimensional tensor represents a different architec-
tural design parameter of the network such as the number of
(stacked) FCNs used, the depth of each network, the num-
ber of input and output features for each convolutional block
and the spatial dimensions of each of the convolutional ker-
nels. By modelling the whole FCN with a single tensor,
our approach allows for learning correlations between the

7822

different tensor dimensions and hence to fully capture the
structure of the network. Moreover, this parametrization
implicitly regularizes the whole network and drastically re-
duces the number of parameters by imposing a low-rank
structure on that tensor. Owing to these properties, our
framework is much more general and ﬂexible compared to
prior work offering increased accuracy and high compres-
sion rates. In summary, the contributions of this work are:

• We propose using a single high-order tensor for whole
network tensorization and applying it for capturing
the rich structure of Fully Convolutional Networks.
Our end-to-end trainable approach allows for a wide
spectrum of network decompositions and compression
rates which can be chosen and optimized for a particu-
lar application.

• We show that for a large range of compression rates
(both high and low), our method preserves high ac-
curacy. Compared to prior work based on tensoriz-
ing individual convolutional layers, our method con-
sistently achieves higher accuracy, especially for the
case of high compression rates. In addition, we show
that, for lower compression rates, our method outper-
forms the original uncompressed network.

• We illustrate the favorable properties of our method
by performing a large number of experiments and ab-
lation studies for the challenging task of human pose
estimation. The experiments shed light on several in-
teresting aspects of our method including the effect of
varying the rank for each mode of the tensor, as well
as the decomposition method used. We further val-
idate our conclusions on a different dense prediction
task, namely semantic facial part segmentation.

2. Related Work

In this section, we review related work, both for tensor

methods and human pose estimation.

Tensor methods
offer a natural extension of traditional
algebraic methods to higher orders. For instance, Tucker
decomposition can be seen as a generalization of PCA to
higher dimensions [18]. Tensor decompositions have wide-
reaching applications, including learning a wide range of
probabilistic latent-variable models [1]. Tensor methods
have been recently applied to deep learning, for instance,
to provide a theoretical analysis of deep neural nets [9].
New layers were also proposed, leveraging tensor methods.
[19] proposes tensor contraction layers to reduce the dimen-
sionality of activation tensors while preserving their multi-
linear structure. Tensor regression layers [20] express out-
puts through a low-rank multi-linear mapping from a high-
order activation tensor to an output tensor of arbitrary order.

A lot of existing work has been dedicated to leverag-
ing tensor decompositions in order to re-parametrizing ex-
isting layers, either to speed up computation or to reduce
the number of parameters. Separable convolutions, for in-
stance, can be obtained from existing ones by applying CP
decomposition to their kernel. The authors in [23] propose
such parametrization of individual convolutional layers us-
ing CP decomposition with the goal of speeding them up.
Speciﬁcally, each of the 4D tensors parametrizing the con-
volutional layers of a pre-trained network are decomposed
into a sum of rank–1 tensors using CP decomposition. The
resulting factors are used to replace each existing convolu-
tion with a series of 4 convolutional layers with smaller ker-
nels. The network is then ﬁne-tuned to restore performance.
[17] proposes a similar approach but uses Tucker decompo-
sition instead of CP to decompose the convolutional layers
of a pre-trained network, before ﬁne-tuning to restore the
performance. Speciﬁcally, Tucker decomposition is applied
to each convolutional kernel of a pre-trained network, on
two of the modes (input and output channel modes). The
resulting network is ﬁne-tuned to compensate for the drop
in performance induced by the compression.

In [3], the layers of deep convolutional neural networks
are also re-parametrized using CP decomposition, opti-
mized using the tensor power method. The network is
then iteratively ﬁne-tuned to restore performance. Simi-
larly, [36] proposes to use tensor decomposition to remove
redundancy in convolutional layers and express these as the
composition of two convolutional layers with less param-
eters. Each 2D ﬁlter is approximated by a sum of rank–1
matrices. Thanks to this restricted setting, a closed-form
solution can be readily obtained with SVD. This is done for
each convolutional layer with a kernel of size larger than 1.
While all these focus of convolutional layers, other types of
layers can also be parametrized. For instance, [27] uses the
Tensor-Train (TT) format [28] to impose a low-rank ten-
sor structure on the weights of the fully-connected layers.
Tensorization of generative adversarial networks [6] and se-
quence models [45] have been also proposed.

The work of [7] proposes a new residual block, the so-
called collective residual unit (CRU), which is obtained by
applying a generalized block term decomposition to the last
two modes of a 4th–order tensor obtained by stacking the
convolutional kernels of several residual units. Similarly
to existing works, each of the CRUs is parametrized indi-
[44] leverages tensor decomposition for multi-
vidually.
task learning to allow for weight sharing between the fully-
connected and convolutional layers of two or more deep
neural networks.

Overall, to the best of our knowledge, our work is the
ﬁrst to propose an end-to-end trainable architecture, fully
parametrized by a single high order low-rank tensor.

7823

Other methods for network decomposition. There are
also other methods, besides tensor-based ones, for reduc-
ing the redundancy and number of parameters in neural net-
works. A popular approach is quantization which is con-
cerned with quantizing the weights and/or the features of
a network [41, 43, 46, 37, 10, 31]. Quantization methods
should be considered orthogonal to tensor methods as one
could apply them to the output of tensor decompositions,
too. Similarly, complementary to our work should be con-
sidered methods for improving the efﬁciency of neural net-
works using weight pruning [24, 14].

More related to our work are hand-crafted decompo-
sition methods such as MobileNet [15] and Xception [8]
which decompose 3 × 3 convolutions using efﬁcient depth-
wise and point-wise convolutions. We compare our meth-
ods with MobileNet, the method of choice for improving
the efﬁciency of CNNs, and show that our approach outper-
forms it by large margin.

Human pose estimation. CNN–based methods have re-
cently produced results of remarkable accuracy for the task
of human pose estimation, outperforming traditional meth-
ods by large margin [40, 39, 30, 4, 26, 42]. Arguably, one
of the most widely used architectures for this task is the
stacked HourGlass (HG) network proposed by [26]. An
HG is an encoder-decoder network with skip connections
between the encoder and the decoder, suitable for making
predictions at a pixel level in a fully convolutional manner.
[26] uses a stack of 8 of these networks to achieve state-of-
the-art performance on the MPII dataset [2]. The architec-
ture is shown in Fig. 1. In this work, we choose tensoriz-
ing the HG network primarily because of its rich structure
which makes it suitable to model it with a high-order ten-
sor. We note that the aim of this work is not to produce
state-of-the-art results for the task of human pose estima-
tion but to show the beneﬁts of modelling a state-of-the-art
architecture with a single high-order tensor.

3. Mathematical background

In this section we ﬁrst introduce some mathematical
background regarding the notation and tensor methods used
in this paper.

Notation. We denote vectors (1st–order tensors) as v, ma-
trices (2nd–order tensors) as M, and tensors of order 3 or
greater as X . We denote element (i0, i1, · · · , iN ) of a ten-
sor as Xi0,i1,··· ,iN or X (i0, i1, · · · , iN ). A colon is used to
denote all elements of a mode, e.g. the mode–1 ﬁbers of X
are denoted as X (:, i2, i3, · · · , iN ). Finally, for any i, j ∈
N, [i . . j] denotes the set of integers {i, i + 1, · · · , j − 1, j}.

Mode–n unfolding of a tensor X ∈ RI0×I1×···×IN , is a
matrix X[n] ∈ RIn,IM , with M = QN
Ik, deﬁned by
the mapping from element (i0, i1, · · · , iN ) to (in, j), with
j = PN

ik × QN

k=0,
k6=n

m=k+1,

k=0,
k6=n

Im.

m6=n

Mode-n product. For a tensor X ∈ RI0×I1×···×IN and
a matrix M ∈ RR×In , the n-mode product of a tensor is
a tensor of size (I0 × · · · × In−1 × R × In+1 × · · · × IN )
and can be expressed using the unfolding of X and
the classical dot product as X ×n M = MX[n] ∈
RI0×···×In−1×R×In+1×···×IN

Tensor diagrams. While 2nd–order tensors can easily be
depicted as rectangles and 3rd–order tensors as cubes, it is
impractical to represent high-order tensors in such way. We
instead use tensor diagrams, which are undirected graphs
where the vertices represent tensors. The degree of each
vertex (i.e. the number of edges originating from this cir-
cle) speciﬁes the order of the corresponding tensor. Ten-
sor contraction over two modes is then represented by sim-
ply linking together the two edges corresponding to these
two modes. Fig. 2 depicts the Tucker decomposition (i.e.
contraction of a core tensor with factor matrices along each
mode) of an 8th–order tensor with tensor diagrams.

4. T-Net: Fully-tensorized FCN architecture

In this section, we introduce our fully-tensorized method
by ﬁrst introducing the architecture before detailing the
structure of the parametrization weights.

4.1. FCN tensorization

In this section, we describe how to tensorize the stacked
HourGlass (HG) architecture of [26]. The HG has a num-
ber of design parameters namely the number of (stacked)
HGs, the depth of each HG, the three signal pathways of
each HG (skip, downsample and upsample), the number of
convolutional layers in each residual block (i.e. the depth
of each block), the number of input and output features of
each block and ﬁnally, the spatial dimensions of each of the
convolutional kernels.

To facilitate the tensorization of the whole network, we
used a modiﬁed HG architecture in which we replaced all
the residual modules with the basic block introduced by
[13], maintaining the same number of input and output
channels throughout the network. We made the encoder and
the decoder symmetric, with 4 residual modules each. Fig-
ure 1 illustrates the modiﬁed HG architecture. We note that
from an accuracy perspective, this modiﬁcation performs
(almost) the same as the original HG proposed in [26].

From the network described above, we derive the high-
order tensor for the proposed Tensorized-Network (T-Net)

7824

Figure 1: Overall network architecture. Each block in the fully convolutional network is a basic-block module [13] (blue
insert), containing bdepth (by default 2) convolutional layers with 3 × 3 kernels followed by BatchNorm and ReLU. For
all experiments, unless explicitly stated otherwise, we used a stack of 4 sub-networks with 3 pathways each: downsam-
pling/encoder (red blocks), upsampling/decoder (dark blue) and skip connection (cyan). Yellow dots are element-wise sums.

core G ∈ RR0×R1×···×R7 along with projection factors
(cid:0)U(0), · · · , U(7)(cid:1), with U(k) ∈ RRk,Ik , k ∈ [0 . . 7]. This

allows us to write the network’s weight tensor in a decom-
posed form as:

W = G ×0 U(0) ×1 U(2) × · · · ×7 U(7)

(1)

= JG; U(0), · · · , U(7)K

See also Fig. 2 for a tensor diagram of the Tucker form of
the weight tensor. Note that the CP decomposition is the
special case of the Tucker decomposition, where the core is
super-diagonal.

MPS T-Net. The Matrix-Product-State (MPS) form (also
known as tensor-train [28]) of our model expresses the con-
structed 8th–order weight tensor W as a series of third-
order tensors (the cores) and allows for especially large
In our case, given W ∈ RI0×I1×···×I7 ,
space-savings.
we can decompose it into a rank (R0, R1, · · · R8)–MPS
as a series of third-order cores G0 ∈ RR0,I0,R1 , G1 ∈
RR1,I1,R2 , · · · , G7 ∈ RR7,I7,R8 . The boundary condi-
tions dictate R0 = R8 = 1.
In terms of individual el-
ements, we can then write, for any i0 ∈ [0 . . I0], i1 ∈
[0 . . I1], · · · , i7 ∈ [0 . . I7]:

W(i0, i1, · · · , i7) = G0[i0]
| {z }

1×R1

× G1[i1]
| {z }

R1×R2

× · · · × G7[i7]
| {z }R7×1

Figure 2: Tensor diagram of the Tucker form of the weight
tensor W parametrizing our model.

as follows: all weights of the network are parametrized by
a single 8th–order tensor W ∈ RI0×I1×···×I7 , the modes of
which correspond to the number of HGs (I0 = #hg), the
depth of each HG (I1 = hgdepth), the three signal pathways
(I2 = hgsubnet), the number of convolutional layers per block
(I3 = bdepth), the number of input features (I4 = fin), the
number of output features (I5 = fout), and ﬁnally the height
(I6 = h) and width (I7 = w) of each of the convolutional
kernels.

4.2. T Net variants

Based on the previous parametrization of the network,
we can add various low-rank constraints on the weight ten-
sor, leading to variants of our method.

Tucker T-Net. The Tucker
form of our model ex-
presses the constructed 8th–order tensor W as a rank–
(R0, · · · , R7) Tucker tensor, composed of a low rank

4.3. Parameter analysis

This section compares the number of parameters of our
model which parameterizes the whole weight tensor with

7825

Baseline Tucker 1.37× Tucker 2.77× Tucker 4.17×
3.79 ms.

2.45 ms.

4.36 ms.

2.72 ms.

Figure 3: Tensor diagram of the MPS/TTrain form of the
weight tensor W. Note the train–like shape from which the
method takes its name, as well as the boundary conditions
(R0 = R8 = 1).

a single high-order tensor with methods based on layer-
wise decomposition (e.g. [17, 23]). Considering a Tucker
rank–R0, R1, · · · , R7 of the weight tensor parametrizing
the whole network, the resulting number of parameters is:

Table 1: Timing of baseline conv. vs. naive Tucker.
Speed-up for a 3 × 3 convolution preserving the number
of channels and input tensor of size (128 × 64 × 64), with a
batch-size 64 . We vary the Tucker-rank and report times.

This gives us an effective way of approximating each convo-
lution by three smaller convolutions [17]. While getting the
full speedup would require the writing of specialized CUDA
kernels, some timings results with a naive implementation
using PyTorch are shown in Table 1, for a single convolu-
tional layer with a kernel tensor of size 128 × 128 × 3 × 3
compressed using Tucker decomposition.

NT −N et =

7

Y

k=0

Rk +

7

X

k=0

Rk × Ik.

(2)

5. Experimental Setup

Compressing each of the Nconv convolutional layer sep-
arately [17], with a rank R4 and R5 for the number of in-
put and output features, respectively, and writing Nconv =
Q4
k=0 Ik, we obtain the total number of parameters:

Nconv × (R4 × R5 × I6 × I7 + R4 × I4 + R5I5) .

(3)

In comparison, our model, with the same ranks R4
and R5 imposed on the number of
features, would
only have Nconv × (R4 × R5 × 3 × 3) + R4 × I4 +
R5I5 parameters.
In other words, our model has
k=0 Ik − 1(cid:17) (R4 × I4 + R5I5) parameters less than a

(cid:16)Q4

corresponding layer-wise decomposition.

Speeding up the convolutions. When parametrized us-
ing a CP or Tucker decomposition, a convolutional layer
can be efﬁciently replaced by a series of convolutions with
smaller kernels [23, 17], thus allowing for large computa-
tional speedups. This efﬁcient re-parametrization also ap-
plies to our model. To see this, given the weight tensor
W ∈ RI0×I1×···×I7 of our Tucker T-Net, we have

W = G ×0 U(0) ×1 U(1) × · · · ×7 U(7).

For any i0, i1, i2, i3 ∈ (I0, I1, I2, I3),

let us denote
˜K = W(i0, i1, i2, i3, : , : , : , : ), corresponding to one of
the convolutional kernels of the T-Net. By re-arranging the
terms, and considering the partially contracted core, we can
write:

˜K(s, t, j, k) =

R4

X

r4=0

R5

X

r5=0

C(r4, r5, j, k)U(4)(s, r4)U(5)(t, r5)

The bulk of our experiments were conducted for the task
of human pose estimation. We also validated some of our
conclusions by conducting experiments for a different dense
prediction task, namely facial part segmentation.

Human pose estimation. Following [39], we conducted
experiments using the standard train and validation splits of
one of the most challenging single pose human pose estima-
tion datasets, namely MPII [2]. The dataset contains 22,000
images for training and another 3,000 for validation.

Semantic facial part segmentation. We constructed the
facial part segmentation dataset as in [5]: for training, we
used the 300W training dataset (more than 3,000 images)
and for testing the whole 300W competition test set (600
images) [33].

Implementation details We used a stacked HG architec-
ture with the following architectural parameters: #hg = 4,
hgdepth = 4, hgsubnet=3, bdepth = 2, fin=128, fout=128, and
h = w = 3. This resulted in a 8th–order tensor of size
4 × 4 × 3 × 2 × 128 × 128 × 3 × 3.

For the uncompressed baseline network, we reduced the
number of its parameters by simply decreasing the number
of channels in each residual block, varying it from 128 to
64. By doing so, (as opposed to reducing the number of
stacks), we maintain all the architectural advantages offered
by the stacked HG architecture and ensure a fair comparison
with the proposed tensorized network.

with C = Ci0,i1,i2,i3, : , : , : , : ∈ R(I4,I5,I6,I7) and

C = (cid:16)G ×0 U(0) × · · · ×3 U(3) ×6 U(6) ×7 U(7)(cid:17) .

Training. All models were trained for 110 epochs using
RMSprop [38]. The learning rate was varied from 2.5e − 4
to 1e − 6 using a Multi-Step ﬁxed scheduler. During train-
ing, we randomly augmented the data using: rotation (−25◦

7826

#hg

hgdepth

hgsubnet

bdepth

fin

fout

h w

Tucker-rank

Accuracy Compression
(PCKh)

ratio

3
2
1
4
4
4
4
4
4
4
4
4
4

4
4
4
3
2
1
4
4
4
4
4
4
4

Original

2
2
2
2
2
2
2
2
1
2
2
2
2

128
128
128
128
128
128
128
128
128
96
64
32
128

128
128
128
128
128
128
128
128
128
96
64
32
128

3
3
3
3
3
3
3
3
3
3
3
3
2

3
3
3
3
3
3
3
3
3
3
3
3
2

3
3
3
3
3
3
2
1
3
3
3
3
3

86.99%
87.42%
86.95%
86.05%
87.71%
87.59%
86.89%
87.53%
86.19%
82.59%
87.43%
86.13%
83.10%
87.30%

1.0x
1.28x
1.82x
3.03x
1.28x
1.82x
3.03x
1.43x
2.50x
1.82x
1.64x
3.03x
6.25x
1.98x

Table 2: Human pose estimation task. Study of the redundancy of each of the modes of the 8th–order weight tensor. We
compress one dimension at a time by reducing its corresponding rank in the Tucker tensor. Reported accuracy is in terms of
PCKh.

Figure 4: Qualitative results produced by our method on MPII.

to 25◦ for human pose and −40◦ to 40◦ for face part seg-
mentation), scale distortion (0.75 to 1.25), horizontal ﬂip-
ping and color jittering.

All experiments were run on a single NVIDIA TITAN V
GPU. All networks were implemented using PyTorch [29].
TensorLy [21] was used for all tensor operations.

curacy using the mean accuracy and mIOU metrics [25].
Finally, we measure the parameter savings using the
compression ratio = uncompressed
compressed , deﬁned as the total num-
ber of parameters of the uncompressed network divided by
the number of parameters of the compressed network.

6. Results

Performance measures. For the human pose estimation
experiments, we report accuracy in terms of PCKh [2].
For facial part segmentation, we report segmentation ac-

This section offers an in-depth analysis of the perfor-
mance and accuracy of the proposed T-Net. Our main re-
sults are that the proposed approach:
i) outperforms the

7827

Method

Parameters

Compression ratio Accuracy

Uncompressed Baseline

full, fin=fout=128

Trimmed Baseline
Trimmed Baseline
Trimmed Baseline
Trimmed Baseline
Trimmed Baseline
Trimmed Baseline

MobileNet-[16]
MobileNet-[16]

[17]
[17]
[17]
[17]
[17]

fin=fout=112
fin=fout=92
fin=fout=64
hg depth=3
hg depth=2
hg depth=1

fin=fout=194
fin=fout=160

rank–(128, 128, 2, 2)

rank–(96, 96, 3, 3)
rank–(64, 64, 3, 3)
rank–(32, 32, 3, 3)
rank–(16, 16, 3, 3)

Tucker T-Net [Ours]
Tucker T-Net [Ours]
Tucker T-Net [Ours]
Tucker T-Net [Ours]
Tucker T-Net [Ours]
Tucker T-Net [Ours]

rank–(4, 3, 3, 2, 110, 110, 3, 3)
rank–(4, 4, 2, 2, 110, 110, 3, 3)
rank–(3, 3, 3, 2, 110, 110, 2, 2)
rank–(3, 2, 3, 2, 96, 96, 3, 3)
rank–(3, 3, 2, 2, 80, 80, 3, 3)
rank–(2, 2, 2, 2, 96, 96, 3, 3)

MPS T-Net [Ours]

rank–(1, 4, 4, 12, 24, 110, 9, 3, 1)

1x

1.3x
2x
4x
1.3x
1.8x
3.0x

3.6x
5.4x

1.4x
1.3x
2.3x
4.7x
6.9x

1.7x
1.8x
3.7x
3.4x
4.2x
5.2x

7.4x

87%

86.9%
85.9%
84.5%
86.79%
86.82%
85.30%

84.3%
82.7%

84.9%
86.8%
86.4%
85.3%
83.7%

87.5%
87.4%
87.1%
86.7%
86.3%
86.0%

85.5%

Table 3: Human pose estimation task. Comparison between T-Net and various baselines and state-of-the-art methods.
Accuracy is reported in terms of PCKh. For the tensor decomposition-based methods, we report the rank, and for the others,
the number of channels in the convolutional layers.

layer-wise decomposition of [17] and [23], which are the
most closely related works to our method; ii) outperforms
the uncompressed, original network for low compression
rates; iii) achieves consistent compression ratios across ar-
bitrary dimensions and iv) outperforms MobileNet [16] by
large margin. Finally, we further validate some of these re-
sults for the task of semantic facial part segmentation.

All results reported were obtained by ﬁne-tuning our net-
works in an end-to-end manner from a pre-trained uncom-
pressed original network. We were able to reach the same
level of accuracy when training from scratch, though this
required training for more iterations. In contrast, we found
that when trained from scratch, the layer-wise method of
[17] reaches sub-par performance, as also reported in their
paper.

6.1. Redundancy of the weight tensor

In order to better understand the compressibility of each
mode of the weight tensor, we ﬁrst investigate the redun-
dancy of each of the modes of the tensor by compressing
only one of the modes at a time. Table 2 shows the accu-
racy (PCKh) as well as the compression ratio obtained by

compressing one of the modes, corresponding respectively
to the number of HGs (#hg), the depth of each HG (hgdepth),
the three pathways of each HG (hgsubnet), the number of con-
volutional layers per blocks (bdepth) and, ﬁnally, the number
of input features (fin), output features (fout), height (h) and
the width (w) of each of the convolutional kernels. The re-
sults are shown along with the performance of the origi-
nal uncompressed network. We observe that by taking ad-
vantage of the redundancy at network-level (as opposed to
[23, 17] which compress individual layers), the proposed
approach is able to effectively compress across arbitrary di-
mensions for large compression ratios while maintaining
similar, or even in some cases higher, accuracy than that
of the original uncompressed network.

6.2. Performance of the T Net

Based on the insights gained from the previous ex-
periment, we selected promising conﬁgurations and com-
pressed over multiple dimensions simultaneously. We then
compared these conﬁgurations with baseline and state-of-
the-art methods. The results can be seen in Table 3.

Compression vs. trimming. The obvious comparison

7828

Method

Parameters

Compression ratio mIOU

mAcc

Uncompressed baseline

full, fin=fout=128

T-Net [Ours]
T-Net [Ours]

Tucker–(3, 2, 3, 2, 96, 96, 3, 3)
Tucker–(2, 2, 2, 2, 64, 64, 3, 3)

1x

3.38x
6.94x

76.02% 97.31%

76.01% 97.29%
75.57% 97.01%

Table 4: Facial part segmentation task. Comparison between T-Net and a network with the same architecture and number
of features as the compressed one. Our approach is able to retain a high accuracy even at high compression rates (up to 7x).

Figure 5: Qualitative results produced by our method on the facial part segmentation task.

is between T-Net and the original baseline network, “com-
pressed” by trimming it, reducing the number of parameters
to match the compression ratio achieved by T-Net.

Comparison with efﬁcient architectures. A natural
question is whether T-Net performs favourably when com-
pared to architectures designed for efﬁciency. To answer
this, we performed a comparison with MobileNet [16], for
which we adjusted the number of channels of the convolu-
tional layers in order to vary the number of parameters and
obtain comparable compression ratios.

Comparison with the state-of-the-art. We also com-

pared with the layer-wise decomposition method of [17].

We ﬁrstly observe that by just reducing the number of
channels in the original network, a signiﬁcant drop in per-
formance can be noticed. Secondly, our method consis-
tently outperforms [17] across the whole spectrum of com-
pression ratios. This can be seen by comparing the accu-
racy provided for any compression ratio for [17] with the
accuracy of the closest but higher compression ratio for our
method (for example, compare 2.33x for [17] with 3.67x for
our method). Our method always achieves higher accuracy
even though the compression ratio is also higher. In addi-
tion, unlike to [17] which does not seem to work well when
the size of the convolutional kernel is compressed from 3×3
to 2 × 2, our method is able to compress that dimension too
while maintaining similar level of accuracy. Finally, our
method outperforms MobileNet [16] by a large margin.

In the same table, we also report the performance of a

variant of our method, using an MPS decomposition on the
weights rather than a Tucker one. This result shows that our
method works effectively with other decomposition meth-
ods as well. Nevertheless, we focused mainly on Tucker as
it is the most ﬂexible compression method, allowing us to
control the rank of each mode of the weight tensor.

Results on face segmentation. Finally, we selected two
of our best performing models and retrained them for the
task of semantic facial part segmentation. Our method of-
fers signiﬁcant compression ratios (up to 7x) with virtually
no loss in accuracy (see Table 4). These results further con-
ﬁrm that our method is task-independent.

7. Conclusions

We proposed an end-to-end trainable method to jointly
capture the full structure of a fully-convolutional neural net-
work, by parametrizing it with a single, high-order low-rank
tensor. The modes of this tensor represent each of the archi-
tectural design parameters of the network (e.g. number of
convolutional blocks, depth, number of stacks, input fea-
tures, etc). This parametrization allows for a joint regular-
ization of the whole network. The number of parameters
can be drastically reduced by imposing a low-rank structure
on the parameter tensor. We show that our approach can
achieve superior performance with low compression rates,
and attain high compression rates with negligible drop in
accuracy, on both the challenging task of human pose esti-
mation and semantic face segmentation.

7829

References

[1] Animashree Anandkumar, Rong Ge, Daniel Hsu, Sham M.
Kakade, and Matus Telgarsky. Tensor decompositions for
learning latent variable models. JMLR, 15(1):2773–2832,
jan 2014.

[2] Mykhaylo Andriluka, Leonid Pishchulin, Peter Gehler, and
Bernt Schiele. 2d human pose estimation: New benchmark
and state of the art analysis. In CVPR, 2014.

[3] Marcella Astrid and Seung-Ik Lee. Cp-decomposition with
tensor power method for convolutional neural networks com-
pression. CoRR, abs/1701.07148, 2017.

[4] Adrian Bulat and Georgios Tzimiropoulos. Human pose esti-
mation via convolutional part heatmap regression. In ECCV,
2016.

[5] Adrian Bulat and Georgios Tzimiropoulos. Binarized convo-
lutional landmark localizers for human pose estimation and
face alignment with limited resources. In ICCV, 2017.

[6] Xingwei Cao and Qibin Zhao. Tensorizing generative adver-

sarial nets. CoRR, abs/1710.10772, 2017.

[7] Yunpeng Chen, Xiaojie Jin, Bingyi Kang, Jiashi Feng, and
Shuicheng Yan. Sharing residual units through collective
tensor factorization to improve deep neural networks.
In
Proceedings of the Twenty-Seventh International Joint Con-
ference on Artiﬁcial Intelligence, IJCAI-18, pages 635–641.
International Joint Conferences on Artiﬁcial Intelligence Or-
ganization, 7 2018.

[8] Franc¸ois Chollet. Xception: Deep learning with depthwise
separable convolutions. arXiv preprint, pages 1610–02357,
2017.

[9] Nadav Cohen, Or Sharir, and Amnon Shashua. On the ex-
pressive power of deep learning: A tensor analysis. CoRR,
abs/1509.05009, 2015.

[10] Matthieu Courbariaux, Yoshua Bengio, and Jean-Pierre
David. Binaryconnect: Training deep neural networks with
binary weights during propagations. In NIPS, 2015.

[11] Simon S Du and Jason D Lee. On the power of over-
parametrization in neural networks with quadratic activation.
In ICML, 2018.

[12] Kaiming He, Georgia Gkioxari, Piotr Doll´ar, and Ross Gir-

shick. Mask r-cnn. In ICCV, 2017.

[13] Kaiming He, Xiangyu Zhang, Shaoqing Ren, and Jian Sun.
In CVPR,

Deep residual learning for image recognition.
2016.

[14] Yihui He, Xiangyu Zhang, and Jian Sun. Channel pruning
for accelerating very deep neural networks. In ICCV, 2017.
[15] Andrew G Howard, Menglong Zhu, Bo Chen, Dmitry
Kalenichenko, Weijun Wang, Tobias Weyand, Marco An-
dreetto, and Hartwig Adam. Mobilenets: Efﬁcient convolu-
tional neural networks for mobile vision applications. arXiv
preprint arXiv:1704.04861, 2017.

[16] Andrew G. Howard, Menglong Zhu, Bo Chen, Dmitry
Kalenichenko, Weijun Wang, Tobias Weyand, Marco An-
dreetto, and Hartwig Adam. Mobilenets: Efﬁcient convolu-
tional neural networks for mobile vision applications. CoRR,
abs/1704.04861, 2017.

[17] Yong-Deok Kim, Eunhyeok Park, Sungjoo Yoo, Taelim
Choi, Lu Yang, and Dongjun Shin. Compression of deep

convolutional neural networks for fast and low power mobile
applications. CoRR, 05 2016.

[18] Tamara G. Kolda and Brett W. Bader. Tensor decompositions

and applications. SIAM REVIEW, 51(3):455–500, 2009.

[19] Jean Kossaiﬁ, Aran Khanna, Zachary Lipton, Tommaso
Furlanello, and Anima Anandkumar. Tensor contraction lay-
ers for parsimonious deep nets. In Computer Vision and Pat-
tern Recognition Workshops (CVPRW), 2017 IEEE Confer-
ence on, pages 1940–1946. IEEE, 2017.

[20] Jean Kossaiﬁ, Zachary C. Lipton, Aran Khanna, Tommaso
Furlanello, and Anima Anandkumar. Tensor regression net-
works. CoRR, abs/1707.08308, 2018.

[21] Jean Kossaiﬁ, Yannis Panagakis, Anima Anandkumar, and
Maja Pantic. Tensorly: Tensor learning in python. Journal
of Machine Learning Research, 20(26):1–6, 2019.

[22] Alex Krizhevsky, Ilya Sutskever, and Geoffrey E Hinton.
Imagenet classiﬁcation with deep convolutional neural net-
works. In NIPS, 2012.

[23] Vadim Lebedev, Yaroslav Ganin, Maksim Rakhuba, Ivan V.
Oseledets, and Victor S. Lempitsky. Speeding-up convolu-
tional neural networks using ﬁne-tuned cp-decomposition.
CoRR, abs/1412.6553, 2014.

[24] Hao Li, Asim Kadav, Igor Durdanovic, Hanan Samet, and
In

Hans Peter Graf. Pruning ﬁlters for efﬁcient convnets.
ICLR, 2017.

[25] Jonathan Long, Evan Shelhamer, and Trevor Darrell. Fully
In

convolutional networks for semantic segmentation.
CVPR, 2015.

[26] Alejandro Newell, Kaiyu Yang, and Jia Deng. Stacked hour-
glass networks for human pose estimation. In ECCV, 2016.
[27] Alexander Novikov, Dmitry Podoprikhin, Anton Osokin,
and Dmitry Vetrov. Tensorizing neural networks.
In Pro-
ceedings of the 28th International Conference on Neural
Information Processing Systems, NIPS’15, pages 442–450,
2015.

[28] I. V. Oseledets. Tensor-train decomposition. SIAM J. Sci.

Comput., 33(5):2295–2317, Sept. 2011.

[29] Adam Paszke, Sam Gross, Soumith Chintala, Gregory
Chanan, Edward Yang, Zachary DeVito, Zeming Lin, Al-
ban Desmaison, Luca Antiga, and Adam Lerer. Automatic
differentiation in pytorch. In NIPS-W, 2017.

[30] Tomas Pﬁster, James Charles, and Andrew Zisserman. Flow-
ing convnets for human pose estimation in videos. In ICCV,
2015.

[31] Mohammad Rastegari, Vicente Ordonez, Joseph Redmon,
and Ali Farhadi. Xnor-net: Imagenet classiﬁcation using bi-
nary convolutional neural networks. In ECCV, 2016.

[32] Shaoqing Ren, Kaiming He, Ross Girshick, and Jian Sun.
Faster r-cnn: Towards real-time object detection with region
proposal networks. In NIPS, 2015.

[33] Christos Sagonas, Georgios Tzimiropoulos, Stefanos
Zafeiriou, and Maja Pantic. 300 faces in-the-wild challenge:
The ﬁrst facial landmark localization challenge. In Proceed-
ings of the IEEE International Conference on Computer
Vision Workshops, pages 397–403, 2013.

[34] Karen Simonyan and Andrew Zisserman. Very deep convo-
lutional networks for large-scale image recognition. arXiv,
2014.

7830

[35] Mahdi Soltanolkotabi, Adel Javanmard, and Jason D Lee.
Theoretical insights into the optimization landscape of over-
parameterized shallow neural networks. IEEE Transactions
on Information Theory, 2018.

[36] Cheng Tai, Tong Xiao, Xiaogang Wang, and Weinan E.
Convolutional neural networks with low-rank regularization.
CoRR, abs/1511.06067, 2015.

[37] Zhiqiang Tang, Xi Peng, Shijie Geng, Lingfei Wu, Shaoting
Zhang, and Dimitris Metaxas. Quantized densely connected
u-nets for efﬁcient landmark localization. In ECCV, 2018.

[38] Tijmen Tieleman and Geoffrey Hinton. Lecture 6.5-rmsprop:
Divide the gradient by a running average of its recent mag-
nitude. COURSERA: Neural networks for machine learning,
4(2), 2012.

[39] Jonathan J Tompson, Arjun Jain, Yann LeCun, and Christoph
Bregler.
Joint training of a convolutional network and a
graphical model for human pose estimation. In NIPS, 2014.
[40] Alexander Toshev and Christian Szegedy. Deeppose: Human

pose estimation via deep neural networks. In CVPR, 2014.

[41] Frederick Tung and Greg Mori. Clip-q: Deep network com-
In

pression learning by in-parallel pruning-quantization.
CVPR, 2018.

[42] Shih-En Wei, Varun Ramakrishna, Takeo Kanade, and Yaser

Sheikh. Convolutional pose machines. In CVPR, 2016.

[43] Jiaxiang Wu, Cong Leng, Yuhang Wang, Qinghao Hu, and
Jian Cheng. Quantized convolutional neural networks for
mobile devices. In CVPR, 2016.

[44] Yongxin Yang and Timothy M. Hospedales. Deep multi-task
representation learning: A tensor factorisation approach.
CoRR, abs/1605.06391, 2016.

[45] Rose Yu, Stephan Zheng, Anima Anandkumar, and Yisong
Yue. Long-term forecasting using tensor-train rnns. CoRR,
abs/1711.00073, 2017.

[46] Aojun Zhou, Anbang Yao, Kuan Wang, and Yurong Chen.
Explicit loss-error-aware quantization for low-bit deep neu-
ral networks. In CVPR, 2018.

7831

