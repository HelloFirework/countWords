Inverse Procedural Modeling of Knitwear

Elena Trunz, Sebastian Merzbach, Jonathan Klein, Thomas Schulze

Michael Weinmann, Reinhard Klein

Institute of Computer Science II, University of Bonn, Germany

{trunz,merzbach,kleinj,mw,rk}@cs.uni-bonn.de, s6tsschu@uni-bonn.de

Abstract

The analysis and modeling of cloth has received a lot
of attention in recent years. While recent approaches are
focused on woven cloth, we present a novel practical ap-
proach for the inference of more complex knitwear struc-
tures as well as the respective knitting instructions from only
a single image without attached annotations. Knitwear is
produced by repeating instances of the same pattern, con-
sisting of grid-like arrangements of a small set of basic
stitch types. Our framework addresses the identiﬁcation
and localization of the occurring stitch types, which is chal-
lenging due to huge appearance variations. The resulting
coarsely localized stitch types are used to infer the under-
lying grid structure as well as for the extraction of the knit-
ting instruction of pattern repeats, taking into account prin-
ciples of Gestalt theory. Finally, the derived instructions
allow the reproduction of the knitting structures, either as
renderings or by actual knitting, as demonstrated in several
examples.

1. Introduction

Fabrics are an essential matter in our daily life. In con-
trast to their woven counterparts, knitted clothing visually
sticks out due to complicated underlying stitch structures
formed by various knitting operations, each inducing a char-
acteristic appearance. Furthermore, knitting clothing of var-
ious types still belongs to a handcraft mastered by a rather
large group of our society covering all ages. One reason for
this may be the interest in manufacturing one’s own clothing
with knitting patterns following the individual subjective
preferences. While there are books and websites that pro-
vide a wide range of patterns together with their respective
construction instructions, it would be desirable to be able to
reproduce patterns from images provided e.g. by standard
search engines such as Google, which lack the correspond-
ing knitting instruction.

Unfortunately, inferring the underlying knitting patterns
by only ”reading” a single image is particularly challenging,

even for experts. The visual appearance of stitches exhibits
a large variety as neighboring stitches may occlude them or
cast shadows. The variability in the appearance of the ba-
sic stitch types is further increased by the properties of the
used yarns, such as their thickness, type of yarns, etc., or
the individual knitting styles of different people leading to
various deformations, such as stretchings, holes and tight
or loose stitches. Therefore, even experts often prefer ana-
lyzing the respective physical clothing pieces by stretching
it and performing the inspection from both sides, in order
to reliably infer the knitting instructions, including other-
wise covered stitches. These manipulations are not possible
when analyzing knitted fabrics in single photos.

Inverse procedural modeling of objects from only a few
or even single examples has received a lot of attention in
the last decade. Corresponding applications encompass the
derivation of production rules for plants, woven fabrics,
buildings and facades. However, the developed approaches
are custom tailored for the corresponding applications and
cannot be easily transformed to infer knitting patterns.

In this paper, we direct our attention to the inference
of the complicated structures of knitwear and the deriva-
tion of the respective knitting instructions, to the best of our
knowledge, for the ﬁrst time from only a single image with-
out annotations. This implies solving the labeling problem,
i.e. the identiﬁcation of the occurring stitch types as well as
their proper localization from the visually complex appear-
ance depicted in the input photographs. For this purpose, we
introduce a novel pipeline that involves four major compo-
nents represented by (1) the search for the individual stitch
types across the image, (2) the inference of the underlying
grid structure from the coarsely localized stitches from the
previous step, (3) an error correction and pattern size detec-
tion step that determines the size of the desired pattern and
corrects the labeling errors from the ﬁrst step, and, ﬁnally,
(4) the derivation of the ﬁnal knitting instruction (in anal-
ogy to instructions in knitting books), based on the found
pattern size and corrected underlying grid structure, taking
into account the intuition of human perception by applying
the Law of Symmetry and the Law of Pr¨agnanz [5]. These

8630

Figure 1: Exemplary appearance variations of knits (top)
and purls (bottom).

derived instructions allow the reproduction of the knitting
patterns with possibly different yarn types as demonstrated
in several examples.

In summary, the key contributions of this paper are:

• A novel method for inverse procedural modeling of

knitwear from a single image.

• The derivation of the underlying optimal regular grid
structure from initially determined hypotheses regard-
ing the coarse localization of stitch types.

• An error correction technique that determines the cor-
rect size of the knitting pattern and corrects possible
recognition errors.

• A ﬁnal induction of the knitting instruction from the

derived grid structure following human intuition.

2. Background

Knitting relies only on a relatively small set of basic ac-
tions, and their combinations allow to generate the under-
lying knit structures for various patterns [34]. Therefore,
even children can learn to produce caps, scarfs or pothold-
ers. These basic actions and their combinations result in a
number of stitch types, which are used to generate a wide
range of various knitting designs by repetitions and different
orderings. In this paper, we focus on the two fundamental
stitch types: knit and purl (see Figure 1).

The usual shape of a knit resembles the structure of a
”v”. If there is a purl stitch above or below (or both), a knit
stitch becomes partially covered by the purl stitch(es). Ad-
ditionally, the width of the stitch gets smaller than it would
be if it had other knits as an upper and/or lower neighbor.
The purl stitch usually resembles a wave structure. This
wave becomes wider if there are knit stitches underneath
and above the purl. However, in case there is a knit stitch
on the right or the left side (or both) of a purl, then the purl
stitch gets partially covered. Figure 1 illustrates some of the
appearance/shape variations of purls and knits. Note that
the shown stitch variations are solely induced by arranging
the basic stitch types in different orderings. Additionally,
these appearance variations heavily depend on the proper-
ties of the used yarn, as well as stitch deformations resulting
from subjective knitting styles, making almost every stitch
of a hand-made piece of knitted fabric individual.

3. Related Work

The major components of our framework for inverse
modeling of knitwear include the search for occurrences of
basic stitch types as marked by the user within the image,
the inference of a grid structure based on the stitch candi-
dates and underlying repeating patterns. As a consequence,
we brieﬂy review the developments in the areas of template
matching and inverse procedural modeling. We refrain from
a detailed discussion regarding the visualization of knitted
fabrics, but only refer to the work by Yuksel et al. [34].

Template matching: Traditional techniques for efﬁ-
ciently searching a query patch within an image are usually
based on using the Sum-of-Squared-Distances (SSD), the
Sum-of-Absolute-Distances (SAD) or Normalized Cross-
Correlation (NCC). Subsequent works addressed their lack-
ing robustness towards handling noise [10] and illumina-
tion changes [13]. Further improvements came with the
use of robust error functions [6, 22, 21, 18]. Later, Barnes
et al. [2, 3] introduced the PatchMatch algorithm for nearest
neighbor matching across translations, rotations and scales.
However, all of these techniques only allow a one-to-one
mapping between a template and the query region and rely
on a strict rigid geometric deformation between the tem-
plate patch and the target patch. As a consequence, they
are not capable of dealing with the geometric deformations
we expect for patches containing knitting primitives (knits
and purls). Towards handling appearance variations for ma-
terial recognition, other approaches rely on the matching
of histograms extracted for different images by considering
various descriptors (e.g. [20]) within classiﬁcation frame-
works. Furthermore, set-based matching has been explored
to allow a more robust matching of textures based on the
consideration of the appearance space of textures [14, 31].
Other approaches have been designed to explicitly han-
dle parametric deformations such as 2D afﬁne transfor-
mations [16] or more general non-rigid distortions [29].
However, despite the requirement of a parametric distortion
model for the underlying geometry, these techniques also
rely on the assumption of a one-to-one mapping between
the query and target patch, which is susceptible to errors in
the presence of occlusions or background clutter.

Further work explores the bi-directional similarity be-
tween target and query patch. Simakov et al. [23] rep-
resent images in terms of a set of patches and the con-
sidered bi-directional similarity (BDS) measure considers
the sum of distances between a patch in the ﬁrst image
and its nearest neighbor in the second image and vice
versa. To also distinguish between inliers and outliers aris-
ing from foreground/background parts of the considered
patches, the Best Buddies Similarity (BBS) has been pro-
posed [7], based on counting the Best Buddy Pairs and,
hence, using the actual distances only implicitly. Therefore,
an increased robustness in comparison to BDS has been

8631

achieved. Talmi et al. [26] extended this work by enforcing
diversity in the mutual nearest-neighbor matching and ex-
plicitly considering the deformation of the nearest-neighbor
ﬁeld. To achieve a speed up of the matching process, they
use an approximate nearest neighbor search.

While any of the template matching techniques could be
applied to derive probability maps for the localization of
certain basic primitives required in our approach, we use
template matching based on BBS due to its proven robust-
ness to deformations that are expected to occur for the prim-
itives of knitting. We improved the BBS technique by the
use of additional gradient information.
In the evaluation,
we compare several template matching techniques and show
that the extended BBS approach outperforms the other tech-
niques in the context of our particular problem.

Image-based detection of weave patterns: Cloth mod-
eling has received a lot of attention so far. Especially
approaches for detecting weave patterns from images are
closely related to our work.
In particular, the complete
reverse-engineering of woven cloth at the yarn level as
approached by Schr¨oder et al.
[19] and Guarnera et al.
[11] has been demonstrated to be the current state-of-the-
art technique. While these approaches are powerful for the
analysis of woven cloth, they are not designed to handle
knitted textiles. Knitted clothing is inherently 3D and the
ﬁnal shapes of stitches, especially hand-made stitches, do
not possess the similarity and regularity of warp and weft
of woven cloth, where occlusions and non-rigid deforma-
tions of the yarn have to be taken into account in order to be
able to ﬁnd the actual position and the type of the stitches
in the image. To the best of our knowledge, we are the ﬁrst
to tackle the problem of detecting knitting patterns and the
respective knitting instructions from a single image.

Inverse procedural modeling: Inverse procedural mod-
eling (IPM) is the problem of inferring a set of parameters
[28, 30] or even a whole procedural description for a given
model. Early investigations on applying inverse procedural
modeling for graphics applications include the works on 3D
meshes [4] and 2D vector designs [24], but there has been a
lot of progress in this area of research. Meanwhile, inverse
procedural modeling is widely used and has been applied
for varying purposes ranging from the inference of 3D de-
sign patterns [27] over the modeling of plants [25, 17] to
editing of building point clouds [8] as well as inferring pro-
cedural descriptions of building facades [32, 33, 9, 17] and
reverse engineering of woven cloth [19]. For a detailed and
extensive survey on inverse procedural modeling, we refer
to the report by Aliaga et al. [1].

4. Stitch Pattern Inference Approach

In this section, we introduce our approach to infer knit-
ting patterns and the respective instructions for their gener-
ation from single input images. An initial pre-processing

step compensates for non-axis-alignment of the depicted
knit patterns and, hence, makes our framework capable of
handling tilted images of knitwear. In the next step, the user
provides exemplars of particular basic stitch types, such
as knits or purls within the image via an intuitive inter-
face. Subsequently, image patches containing these stitch
types are searched within the whole image and the result-
ing coarse localization of the individual stitch types is used
to infer the underlying grid structure. Furthermore, an er-
ror correction procedure allows to compensate for possible
misclassiﬁcations of the stitch types in the grid and detects
the size of the repeating pattern. The found size and the
optimized grid structure are then used to ﬁnd the starting
position of the pattern, thus ﬁnalizing the process of stitch
pattern inference. Finally, we derive the underlying produc-
tion rules and convert them into corresponding knitting in-
structions that allow the reproduction of the knitting pattern
depicted in the input image. Details regarding the involved
components are described in the following sections.

4.1. Pre Processing

Before allowing the user to specify templates for the rel-
evant stitch types in the image, we perform a pre-processing
step to facilitate the annotation process. To compensate for
deviations from axis-alignment, we use Histograms of Ori-
ented Gradients (HOG) to determine the most dominant di-
rections in the photo, which is justiﬁed due to the inherent
grid structure resulting from the production process. This
allows the reversal of rotations to align the grid structure
with the axes and, hence, makes our algorithm capable of
also handling non-axis-aligned input patterns. Respective
examples are shown in the supplemental material.

4.2. Interactive Selection of Relevant Stitch Types

The detection of stitch types could possibly be ap-
proached with a completely automatic pipeline. However,
this would require huge annotated databases depicting the
possibly occurring stitch types with various stitch neigh-
borhoods and distortions with yarns of different properties
(yarn thickness, reﬂectance behavior, etc.) under different
illumination conditions. As such databases, to the best of
our knowledge, are not yet publicly available, we refrain
from relying on a completely automatic approach to de-
tect stitch types across the image based on machine learn-
ing techniques. Instead we let the user guide the search for
stitch types by providing a single template for the individ-
ual stitch types occurring in the input image, in order to
keep user interaction as minimal as possible. For this pur-
pose, we implemented an easy-to-use interface that allows
the user to choose a sample for each stitch type by simply
drawing a rectangle over a stitch. In turn, considering the
possibly strong variations of the occurring stitches requires
a subsequently applied robust template matching technique.

8632

4.3. Derivation of Stitch Localization Hypotheses

Finding certain stitch types in an image is complicated
because their appearance may signiﬁcantly vary due to par-
tial occlusions by neighboring stitches, variances in the used
yarn types including their reﬂectance behavior, thickness
and hairiness, as well as variations induced by the individ-
ual knitting style during manufacturing, manifested in de-
formations like tight or loose stitches. To be able to ﬁnd
stitch types across the image based on a given template,
handling distortions and partial matches becomes an essen-
tial prerequisite for the derivation of hypotheses of where
the respective stitch types are found.

Best Buddies Similarity (BBS) based template match-
ing [7] has been designed towards these goals of matching
distorted and partially occluded patterns and proven to out-
perform most previous techniques in this regard. We there-
fore apply this technique for the detection of hypotheses
for the individual stitch types such as knits or purls. Fol-
lowing Dekel et al. [7], the BBS between two point sets
P = {pi}N
i=1 extracted from a local im-
age region and a template is deﬁned according to

i=1 and Q = {qi}M

BBS(P, Q) =

Here,

1

min(M, N )

N

M

Xi=1

Xj=1

bb(pi, qj, P, Q).

(1)

bb(pi, qj, P, Q) =


1,

if NN(pi, Q) = qj

and NN(qj, P ) = pi

(2)

0,

otherwise

acts as an indicator function inﬂuenced by the nearest neigh-
bor deﬁnition

NN(pi, Q) = argminq∈Qd(pi, q)

(3)

and the distance measure

Figure 2: User-speciﬁed stitch templates (left) and corre-
sponding likelihood maps (middle). The likelihood value is
indicated with the colorization, i.e. the lighter the spot the
higher the probability. The image on the right depicts the
maximum likelihood map including the assignments to the
stitch types (knit = orange, purl = blue).

4.4. Inference of Grid Structure of Stitches

The maximum likelihood map retrieved in the last step
contains the coarse per-pixel likelihood regarding the local
presence of respective stitch types. From this coarse local-
ization we need to determine the ﬁne-grained arrangement
and the corresponding classes of the individual stitches. For
this purpose, we exploit the presence of an underlying grid-
like structure induced by the knitting process to account for
the fact that the spatial extension of the individual stitches
constrains their locations. In general, the latter will not be
equidistant and the grid may exhibit signiﬁcant distortions
due to the non-ideal man-made manufacturing process or
the respective treatment of the fabric. To model this be-
havior, we associate the centers of the stitches with a set of
labeled points arranged in a 2D grid-like structure. These
points have to fulﬁll the following properties:

• Each point is assigned a high likelihood of represent-

ing a certain stitch type such as knits or purls (P1).

• Neighboring points must preserve a minimal distance
(on the order of magnitude of a stitch prototype) to
each other (P2).

d(p, q) = ||p(A)

j

i − q(A)

2 + λG||p(G)
i − q(G)
||2
+λL ||p(L)
i − q(L)
||2
2.

j

j

||2
2

(4)

• Adjacent points cannot be further apart than the maxi-

mal extension of a stitch type (P3).

In comparison to the original implementation [7], we ex-
tend the RGB-based appearance (A) and spatial distance (L)
within the patch with an additional gradient constraint (G),
that enforces similar gradients within the patches. Based on
several examples, we determined λG = 100 to be suitable
for our purpose, and otherwise follow the original imple-
mentation in using λL = 2 and a decomposition of image
and template into k × k patches with k = 3.

As a result, we obtain BBS likelihood maps that indicate
where the respective stitch types are (coarsely) localized.
Finally, we merge the likelihood maps obtained for the dif-
ferent stitch types to a resulting likelihood map that con-
tains the maximum likelihood of the individual stitch types
obtained per pixel as well as the corresponding most likely
stitch type. An example of these maps is shown in Figure 2.

• The set of points has the structure of a regular approx-

imately rectangular grid (P4).

Finding the optimal set of points fulﬁlling the above
stated properties can then be formulated in terms of a point
selection problem.

4.4.1 Stitch Localization as Point Selection Problem

To infer the positions of the centers of the individual
stitches, we solve a point selection problem that can be for-
mulated in terms of an integer linear program (ILP). Let P
denote the set of all possible points (pixels) of the input im-
age. Furthermore, let Popt be the point set corresponding
to the solution of our optimization problem. Denoting the

8633

likelihood value of a pixel pi ∈ P to be assigned to a cer-
tain stitch type according to the likelihood map from the
previous step with score(i) and using the binary variables

oi =(0

1

if pi /∈ Popt
if pi ∈ Popt

(5)

that determine whether a point pi is assigned to the optimal
solution, we maximize the functional

score(i) oi

(6)

Xpi∈P

j

j

j

⊂ P and P max

subject to the constraints following from the aforemen-
tioned properties P2, P3 and P4. To ensure the properties
P2 and P3, we determine for each pixel pj ∈ P two corre-
sponding rectangular regions P min
⊂ P
that represent the uncertainty in the location of neighboring
points in the grid structure . P min
has the width wmin and
the height hmin of the estimated minimal extension of the
stitch and P max
has the width wmax and the height hmax of
the estimated maximal extension. The computation of the
corresponding extension size values and the uncertainties is
discussed in Section 4.4.3. To account for the property P2,
we constrain each region P min
to contain at most one op-
timal point p ∈ Popt and, to account for the property P3,
each region P max
is constrained to have at least one point
p ∈ Popt, i.e.:

j

j

j

oi ≤ 1

X∀i:pi∈P min

j

and X∀i:pi∈P max

j

oi ≥ 1 ∀pj ∈ P.

(7)
In order to force the points of the optimal solution to have
a grid-like structure (P4), we subdivide the input image into
r · c grid cells Gk ⊂ P with the width wi
c (1 − uw) and
the height hi
r (1 − uh), where wi and hi denote the width
and the height of the image respectively and c and r de-
note the number of rows and columns of the grid. These
are precomputed, as described in Section 4.4.2. With uw
and uh, we denote the uncertainties in the spatial extension
of the stitches in x and y direction respectively, which are
used here to allow the overlap of the cells. The values of
uw and uh are computed as described in Section 4.4.3. We
constrain the optimal solution to contain at least one point
in each grid cell. Furthermore, the number of points in the
solution is constrained to be equal to r · c. Both constraints
ensure (P4) while allowing for overlapping cells:

oi ≥ 1

∀Gj ∈ G,

X∀i:pi∈Gj
X∀i:pi∈P

oi = r · c.

(8)

(9)

G denotes the set of all grid cells. To solve this ILP, we
use the Gurobi solver [12]. From the points contained in

the resulting optimal solution we construct the grid in the
following manner: We sort all points according to the x
coordinates of the pixels and assign to each row of the grid
c points. The stitch types assigned to the individual points
are stored in a matrix M r×c.

4.4.2 Computing the Number of Rows and Columns

To determine the number of columns in the grid, we use the
position of one of the stitch samples selected by the user
during the initial step of the inference approach and select
the region around the stitch position within the likelihood
map. The height of the selected region corresponds to the
height of the selected template with some additional toler-
ance and the respective width is given by the image width.
To account for possible distortions, the height is allowed to
deviate up to uy in each direction from the center of the cho-
sen stitch sample (in our experiments, we use uy = 25%).
Using the data of this truncated map, we apply a similar ILP
formulation as before with slight changes. In contrast to the
optimization described before, the point variables consist of
the pixels from the chosen strip. The objective functional
and all constraints except for the row and the column num-
ber constraints remain unmodiﬁed. The number r of rows
is set to 1. Now we compute the possible minimal value of
the number of columns c as cmin = wi
, where Wmax
denotes the maximal width of both templates, since we do
not yet know the correct stitch labelings of this strip. To ac-
count for possible stitch occlusions, we compute the maxi-
mal value of c as cmax = 2 wi
, where Wmin denotes the
minimal width of both templates. We iterate through the
possible numbers of columns from cmin to cmax and divide
the resulting objective function of each optimal solution by
the current number of columns. Finally, we obtain the num-
ber c of columns corresponding to the largest value of the
normalized objective function as the optimal solution. The
number of rows is determined accordingly.

Wmax

Wmin

4.4.3 Uncertainty in the Locations of Adjacent Stitches

Because of occlusions and different deformations the
stitches vary from each other in size. Additional variations
are induced by the use of different yarn types and incon-
sistencies of the knitter. We implicitly take these aspects
into account by analyzing the strips extracted from the pre-
vious step to estimate uncertainties in the spatial extensions
of the stitches. First, we compute the average width wa and
height ha of the stitches taken from the four strips (two for
each sample). By computing the maximum absolute devi-
ation for the width (dw) and height (dh) separately, we get
the uncertainties uw = dw
, yielding the val-
wa
ues wmin = wa − uw and wmax = wa + uw for the width
and analogous values hmin and hmax for the height, which
are then used for the optimization.

and uh = dh
ha

8634

For the computation of the number of rows and columns
we use the average of the actual sizes of the templates se-
lected by the user and set the values of uncertainties ux and
uy to be equal to 25% of the average template size each.
Note that large uncertainty values result in an increasing
number of variables during the optimization, hence signiﬁ-
cantly increasing computational time.

4.5. Error Correction and Repeat Size Detection

After the inference of the underlying grid structure M
from the previous step, we aim at ﬁnding an intuitive re-
peating pattern of minimal size. For this purpose, we as-
sume that the knitting pattern of interest is at least twice
contained completely within the image, but unﬁnished re-
peats may occur as well. In order to ﬁnd the pattern, we ﬁrst
ﬁnd the correct size and subsequently determine the starting
position of the pattern. As the extracted matrix M of stitch
types resulting from the grid optimization step might still
contain some wrongly recognized stitch types, the identiﬁ-
cation of the pattern size in the matrix M as well as the po-
tentially required error correction have to be conducted si-
multaneously. While the size of the repeating structure may
be derived from the matrix M without labeling errors of the
stitch types using region growing procedures as proposed by
Wu et al. [33], the occurrence of errors in M instead forces
us to perform an exhaustive search over all possible repeat
sizes and to compute an error score for each possible repeat
size. Finally, the size with the least error score is assumed
to be the correct one.

2 and c ≤ C

Let r and c denote the number of the rows and columns
of a possible repeat. Assuming the presence of at least two
occurrences of the pattern in the image, we only consider
repeat sizes s = (r, c) that satisfy at least one of conditions
r ≤ R
2 . In more detail, we fully partition M into
a set of non-overlapping submatrices M s for each possible
i ∈ M s has the size s
repeat size s = (r, c), where each M s
(or smaller if depicting an unﬁnished repeat on a boundary).
The partitions are evaluated at different positions (m, n) of
M with m = r k and n = c h with k = 1, . . . , ⌊ R
r ⌋ and
h = 1, . . . , ⌊ C
c ⌋, respectively. Subsequently, we align all
i ∈ M s according to their indices and compute the ma-
M s
trix M s
max, which contains the stitch type with the maximal
occurrence for each equal index of the submatrices. Then,
we compute the Hamming distance Di between each M s
i
and M s
max. The sum of all Hamming distances yields the
overall distance Ds of the current repeat size s.

We consider the size and the underlying stitch type ma-
trix M s
max with the minimal distance as the resulting pattern
size. If there are several sizes with the same edit distance,
we take the one with the smallest value r + c, since other-
wise there is evidence for having another repeat withing the
repeat. In the case that we cannot determine the type with
maximal occurrence for an index position due to an equal

number of the stitch types at this position, we compare the
corresponding likelihood values of the pixels from which
these types were derived to determine the ﬁnal type.

If the distance of the resulting optimal repeat deviates
from zero, errors have been detected in the matrix M . In
this case, the corresponding M s
max is determined to have
the correct labelings of the stitches and all the submatrices
are corrected according to M s

max.

4.6. Repeat Position Determination

Finally, the localization of an as intuitive as possible re-
peating pattern from the underlying grid structure and the
size of the repeating pattern has to be computed.
In or-
der to select an intuitive pattern repeat, we take inspiration
from human perception and make use of two of the basic
laws in Gestalt theory [5]. The Law of Symmetry states
that symmetrical elements tend to be perceived as a uniﬁed
group. Taking this into consideration, we search for sym-
metry along the x-direction of the pattern. If there is a sym-
metry, we take it into account when selecting the starting
position of the repeat. If there is no symmetry in the struc-
ture of the repeat, we apply the Law of Pr¨agnanz. Accord-
ing to this law, humans prefer simpler and ordered states
that require less cognitive effort and, hence, can be faster
processed than complex structures that, in turn, might have
to be reorganized or even further decomposed. In our case,
this corresponds to selecting the starting position of the pat-
tern from all the possible positions that leads to the least
amount of changes from one type of stitch to another when
computing the sum of the type changes from each two ad-
jacent rows and columns of the pattern in question. This
ensures that individual structures such as squares or circles
appearing in the pattern will not be broken.

5. Results and Discussion

Sample selection: In order to test our approach, we have
chosen 25 photos and scans that depict knitting samples
with different patterns and were produced with yarns of var-
ious types and colors. Eight of the photos were taken from
the internet, one photo depicts a machine knitted piece and
sixteen photos depict hand-made knitting fabrics. The fo-
cus on hand-made samples results from the fact that these
exhibit a higher degree of variation and, hence, are more
challenging than machine-knitted samples.

Performance analysis: Table 1 provides an overview
over the computation times as well as the problem sizes for
the four examples selected for this paper. More examples
with corresponding running times are shown in the supple-
mental material. Since the most time-consuming operations
were computations of the similarity maps with BBS and
solving for the optimum with the Gurobi solver [12], we
report the computation times only for these steps. The other
steps required only a negligible amount of time. All com-

8635

putations were performed with an unoptimized implemen-
tation on an Intel(R) Core(TM) i7-5820K CPU with 3.30
GHz.

Table 1: The columns contain the image size (IS), the run-
times (in seconds) of BBS and ILP, as well as the size of
both the grid (GS) and the pattern (PS). eG and eP denote
the fraction of misclassiﬁed stitch types for the overall grid
and the pattern after error correction.

ID
1
2
3
4

IS

673× 257
690×370
803×844
516×347

BBS
102.53
31.93
219.79
137.74

GS
9×5

ILP
11.02
8.13
15×11
62.02 11×17
4.78

7×6

eG
PS
1/45
4×2
7×6 1/165
8×8 4/187
3×4

0

eP
0
0
0
0

Visual quality: Figure 3 demonstrates the results of the
individual steps of the pipeline for four of the example tex-
tiles. For the example in the second row one stitch in the
input image (the sixth stitch from the left in the bottom row)
has actually been wrongly knitted (knit instead of purl).
This error was recognized and corrected by our method. To
obtain the shown realistic renderings (last column), we syn-
thesize yarns using the procedural model of Zhao et al. [35].
We then deform the yarn according to the discovered knit-
ting instructions and discretize the resulting ﬁber geometry
into a voxel grid, storing averaged densities and ﬁber ori-
entations per voxel [15]. This voxel-based representation is
then rendered using a volumetric path tracer [15]. Further-
more, Figure 4 shows results for the inferred grid structure
obtained when applying our method on worn clothing.

Susceptibility to template selection: To evaluate the ro-
bustness regarding the selection of templates for the individ-
ual stitch types, we performed a study where 10 people aged
from 10 to 67 years were asked to provide respective anno-
tations. The results do not exhibit signiﬁcant differences, as
long as the testers follow the simple instruction of selecting
two templates, which look similar to other stitches of the
same type (Figure 1) (see supplemental material).

Table 2: Performance comparison of several
template
matching techniques: The rows contain the fractions of mis-
classiﬁed pixels eP x, stitch types for the overall grid eG and
the pattern after error correction eP . For the computation of
the ﬁrst measure we excluded pixels within a small band at
the transitions between different stitch types. In 32% of the
tests, the optimization based on the SAD likelihood maps
did not succeed in detecting the correct number of rows
and/or columns of the grid. These cases are excluded from
the reported values eG and eP for SAD.

SAD NCC DDIS BBS BBSg
eP x
0.194
0.422 0.453
eG 0.633 0.087
0.040
eP
0.029
0.268 0.056

0.342
0.071
0.046

0.216
0.062
0.051

Suitability of different template matching schemes:
We evaluated the suitability of different template matching
schemes for the generation of likelihood maps for the indi-
vidual stitch types. For this purpose, we compare our ex-
tended version of the BBS technique with additional gradi-
ent information (BBSg) to the normalized cross-correlation
(NCC), the sum of absolute differences (SAD), the original
BBS approach [7] without the proposed extension and the
deformable diverse similarity (DDIS) approach [26]. Ta-
ble 2 summarizes the respective results. In order to achieve
meaningful results, the resolution of the input image is re-
quired to be sufﬁcient so that the minimal template size is
not smaller that 30 × 30 pixels.

Computational efﬁciency: In order to ﬁnd the ﬁnal cen-
ter positions of stitches, we apply a global optimization
that is formulated as an ILP problem. As ILP problems
are known to be NP-hard, the computational times may be
impractical. In order to speed-up the inference of optimal
grids, which is particularly required for larger images, we
downsize the corresponding likelihood maps by the factor
of 0.5. The downsizing signiﬁcantly decreases the compu-
tational time of the optimization, while still yielding similar
results as without downsizing (for the evaluation of scaling
we refer to the supplemental material).

Another possibility to decrease the computational time
is to choose some iterative locally optimal approach instead
of global optimization. For comparison, we use the like-
lihood and the stitch type assignments from the template
matching step as the starting point for a greedy strategy to
select neighboring stitch centers, where we also exploit un-
certainty of the template sizes. In a ﬁrst step, we take the
maximum of the likelihood to ﬁnd the the most likely loca-
tion of a stitch and deﬁne a minimum distance within which
no other stitch is allowed to occur depending on the tem-
plate uncertainty. After discarding the respective area in the
likelihood, we continue to search for the next highest like-
lihood, place a stitch center and again remove the region
from the likelihood. This process is iterated until no fur-
ther stitch center can be placed or the remaining likelihoods
are lower than a certain threshold t (we used t = 0.2). As
shown in Figure 3, this approach does not result in accept-
able stitch center hypotheses, due to the iterative local op-
timization. Furthermore, this method does not compute the
uncertainties automatically but requires their manual speci-
ﬁcation for each fabric sample individually. In contrast, our
global optimization technique yields stitch center hypothe-
ses at a higher quality.

Pattern search:

In principle, once the size and cor-
rect labeling of the repeated pattern is found, one could
reproduce the initial knitted example, since the knitting is
done periodically. However, when knitting whole clothing
pieces, the borders of the piece should be appealing. Hence,
we need to identify the starting position of the correct or at

8636

input

knit map

purl map

greedy

ours

pattern

rendering

Figure 3: From left to right: input image, likelihoods for both stitch types, stitch center hypotheses derived via a greedy
approach and grid structure inferred via our approach, corresponding knitting instruction (counting the rows from bottom to
top, empty cells correspond to knits in odd rows and purls in even rows while cells containing bars correspond to purls in odd
rows and knits in even rows) and rendering.

stitches, so that already the coarse localization does not
yield meaningful results, the optimization technique will
not produce the correct labeling.

6. Conclusion and Future Work

We have presented a novel practical framework for the
inference of the complicated structures of knitwear as well
as the corresponding knitting instructions from a single im-
age. Templates for individual stitch types, as provided by
the user, are roughly localized across the complete image
and the resulting stitch positions are subsequently reﬁned
by optimizing the underlying grid structure within an in-
teger linear program. The size of the repeating pattern is
computed from the derived stitch labeling at the vertices
of the resulting grid. Subsequently, we apply the Law of
Symmetry and the Law of Pr¨agnanz from Gestalt theory to
ﬁnd an intuitive pattern repeat and derive the corresponding
knitting instruction. While our approach was demonstrated
to allow the derivation of the knitting instructions for sev-
eral different knitwears, there are still some open challenges
to be addressed by future research. Including further stitch
types into the framework as well as further reducing the de-
gree of user interaction based on the combination of a large
database of stitch types with their respective appearance
variations and machine learning techniques is a promising
avenue of research that we plan to pursue in future work.

References

[1] D. G. Aliaga, ˙I. Demir, B. Benes, and M. Wand. Inverse pro-
cedural modeling of 3D models for virtual worlds. In ACM

8637

Figure 4: General, unrestricted setup of knitwear worn by a
person (left) with detected grid structures for some regions
of interest (right).

least of a nice pattern. In the supplementary material, we
illustrate the problem of choosing an intuitive pattern. With
our pattern search procedure we try to avoid breaking ex-
isting structures of the pattern, such as triangles or checker-
boards, thereby following the Gestalt principles.

Limitations: In this paper, we limit our approach to
the two fundamental stitch types: knit and purl. However,
the number of stitch types is not strictly limited to two.
In the supplemental material we also provide an example
with three stitch types. However, including stitch types (e.g.
holes) that deform the grid-like structure of the patten, re-
quires including additional constraints, which we want to
pursue in future work. Furthermore, if the input image
is of low quality or contains almost completely occluded

SIGGRAPH 2016 Courses, SIGGRAPH ’16, pages 16:1–
16:316, New York, NY, USA, 2016. ACM.

[2] C. Barnes, E. Shechtman, A. Finkelstein, and D. B. Gold-
man. PatchMatch: A randomized correspondence algorithm
for structural image editing. ACM Transactions on Graphics
(Proc. SIGGRAPH), 28(3), Aug. 2009.

[3] C. Barnes, E. Shechtman, D. B. Goldman, and A. Finkel-
stein. The generalized PatchMatch correspondence algo-
rithm. In Proceedings of the 11th European Conference on
Computer Vision Conference on Computer Vision: Part III,
ECCV’10, pages 29–43, Berlin, Heidelberg, 2010. Springer-
Verlag.

[4] M. Bokeloh, M. Wand, and H.-P. Seidel. A connection be-
tween partial symmetry and inverse procedural modeling.
ACM Trans. Graph., 29(4):104:1–104:10, July 2010.

[5] S.

Bradley.

Design

principles:

the

and

perception
https://www.smashingmagazine.com/2014/03/design-
principles-visual-perception-and-the-principles-of-gestalt/,
2014.

principles

of

Visual
Gestalt.

[6] J.-H. Chen, C.-S. Chen, and Y.-S. Chen. Fast algorithm for
robust template matching with M-estimators. IEEE Transac-
tions on Signal Processing, 51(1):230–243, Jan 2003.

[7] T. Dekel, S. Oron, M. Rubinstein, S. Avidan, and W. T. Free-
man. Best-buddies similarity for robust template matching.
In 2015 IEEE Conference on Computer Vision and Pattern
Recognition (CVPR), pages 2021–2029, June 2015.

[8] I. Demir, D. G. Aliaga, and B. Benes. Procedural editing
of 3D building point clouds.
In Proceedings of the IEEE
International Conference on Computer Vision, pages 2147–
2155, 2015.

[9] I. Demir, D. G. Aliaga, and B. Benes. Proceduralization for
editing 3D architectural models.
In 2016 Fourth Interna-
tional Conference on 3D Vision (3DV), pages 194–202, Oct
2016.

[10] E. Elboher and M. Werman. Asymmetric correlation: A
noise robust similarity measure for template matching. IEEE
Transactions on Image Processing, 22(8):3062–3073, Aug
2013.

[11] G. C. Guarnera, P. Hall, A. Chesnais, and M. Glencross. Wo-
ven fabric model creation from a single image. ACM Trans.
Graph., 36(5):165:1–165:13, Oct. 2017.

[12] Inc. Gurobi Optimization. Gurobi optimizer reference man-

ual, 2016.

[13] Y. Hel-Or, H. Hel-Or, and E. David. Matching by tone
mapping: Photometric invariant template matching.
IEEE
Transactions on Pattern Analysis and Machine Intelligence,
36(2):317–330, Feb 2014.

[14] D. P. Huttenlocher, G. A. Klanderman, and W. J. Ruck-
lidge. Comparing images using the Hausdorff distance. IEEE
Transactions on Pattern Analysis and Machine Intelligence,
15(9):850–863, Sep 1993.

[15] W. Jakob, A. Arbree, J. T. Moon, K. Bala, and S. Marschner.
A radiative transfer framework for rendering materials with
anisotropic structure.
In ACM Transactions on Graphics
(TOG), volume 29, page 53. ACM, 2010.

[16] S. Korman, D. Reichman, G. Tsur, and S. Avidan. FasT-
Match: Fast afﬁne template matching. In 2013 IEEE Con-
ference on Computer Vision and Pattern Recognition, pages
2331–2338, June 2013.

[17] S. Lienhard, C. Lau, P. M¨uller, P. Wonka, and M. Pauly.
Design transformations for rule-based procedural modeling.
Comput. Graph. Forum, 36(2):39–48, May 2017.

[18] O. Pele and M. Werman. Robust real-time pattern match-
ing using bayesian sequential hypothesis testing.
IEEE
Transactions on Pattern Analysis and Machine Intelligence,
30(8):1427–1443, Aug 2008.

[19] K. Schr¨oder, A. Zinke, and R. Klein.

Image-based re-
verse engineering and visual prototyping of woven cloth.
IEEE Transactions on Visualization and Computer Graph-
ics, 21:188–200, 2015.

[20] L. Sharan, C. Liu, R. Rosenholtz, and E. H. Adelson. Rec-
ognizing materials using perceptually inspired features. In-
ternational Journal of Computer Vision, 103(3):348–371, Jul
2013.

[21] B. G. Shin, S.-Y. Park, and J. J. Lee. Fast and robust template
matching algorithm in noisy image.
In 2007 International
Conference on Control, Automation and Systems, pages 6–9,
Oct 2007.

[22] A. Sibiryakov. Fast and high-performance template matching

method. In CVPR 2011, pages 1417–1424, June 2011.

[23] D. Simakov, Y. Caspi, E. Shechtman, and M. Irani. Sum-
marizing visual data using bidirectional similarity. In 2008
IEEE Conference on Computer Vision and Pattern Recogni-
tion, pages 1–8, June 2008.

[24] O. Stava, B. Benes, R. Mech, D. G. Aliaga, and P. Kristof.
Inverse procedural modeling by automatic generation of L-
systems. Comput. Graph. Forum, 29(2):665–674, 2010.

[25] O. Stava, S. Pirk, J. Kratt, B. Chen, R. M´zch, O. Deussen,
and B. Benes. Inverse procedural modelling of trees. Com-
put. Graph. Forum, 33(6):118–131, Sept. 2014.

[26] I. Talmi, R. Mechrez, and L. Zelnik-Manor. Template match-
ing with deformable diversity similarity. 2017 IEEE Confer-
ence on Computer Vision and Pattern Recognition (CVPR),
pages 1311–1319, 2017.

[27] J. Talton, L. Yang, R. Kumar, M. Lim, N. Goodman, and R.
Mˇech. Learning design patterns with bayesian grammar in-
duction. In Proceedings of the 25th Annual ACM Symposium
on User Interface Software and Technology, UIST ’12, pages
63–74, New York, NY, USA, 2012. ACM.

[28] J. O. Talton, Y. Lou, S. Lesser, J. Duke, R. Mˇech, and
V. Koltun. Metropolis procedural modeling. ACM Trans.
Graph., 30(2):11:1–11:14, Apr. 2011.

[29] Y. Tian and Srinivasa G. Narasimhan. Globally optimal es-
timation of nonrigid image distortion. International Journal
of Computer Vision, 98(3):279–302, Jul 2012.

[30] C. A. Vanegas, I. Garcia-Dorado, D. G. Aliaga, B. Benes,
and P. Waddell. Inverse design of urban procedural models.
ACM Trans. Graph., 31(6):168:1–168:11, Nov. 2012.

[31] M. Weinmann and R. Klein. Material recognition for efﬁ-
cient acquisition of geometry and reﬂectance. In Computer
Vision - ECCV 2014 Workshops, pages 321–333. Springer
International Publishing, 2015.

8638

[32] J. Weissenberg, H. Riemenschneider, M. Prasad, and L.
Van Gool.
In
Computer Vision and Pattern Recognition (CVPR), 2013
IEEE Conference on, pages 185–192. IEEE, 2013.

Is there a procedural logic to architecture?

[33] F. Wu, D.-M. Yan, W. Dong, X. Zhang, and P. Wonka. In-
verse procedural modeling of facade layouts. ACM Trans.
Graph., 33(4):121:1–121:10, July 2014.

[34] C. Yuksel, J. M. Kaldor, D. L. James, and S. Marschner.
Stitch meshes for modeling knitted clothing with yarn-level
detail. ACM Trans. Graph., 31(4):37:1–37:12, July 2012.

[35] S. Zhao, F. Luan, and K. Bala. Fitting procedural yarn
models for realistic cloth rendering. ACM Transactions on
Graphics (TOG), 35(4):51, 2016.

8639

