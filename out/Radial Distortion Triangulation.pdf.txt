Radial Distortion Triangulation

Zuzana Kukelova

Viktor Larsson

Visual Recognition Group, FEE, CTU in Prague

Department of Computer Science, ETH Z¨urich

kukelova@cmp.felk.cvut.cz

viktor.larsson@inf.ethz.ch

Abstract

Original image

Undistorted image

This paper presents the ﬁrst optimal, maximal likelihood,
solution to the triangulation problem for radially distorted
cameras. The proposed solution to the two-view triangu-
lation problem minimizes the ℓ2-norm of the reprojection
error in the distorted image space.

We cast the problem as the search for corrected distorted
image points, and we use a Lagrange multiplier formulation
to impose the epipolar constraint for undistorted points. For
the one-parameter division model, this formulation leads
to a system of ﬁve quartic polynomial equations in ﬁve un-
knowns, which can be exactly solved using the Gr¨obner ba-
sis method. While the proposed Gr¨obner basis solution is
provably optimal; it is too slow for practical applications.

Therefore, we developed a fast iterative solver to this
problem. Extensive empirical tests show that the iterative
algorithm delivers the optimal solution virtually every time,
thus making it an ℓ2-optimal algorithm de facto.
It is it-
erative in nature, yet in practice, it converges in no more
than ﬁve iterations. We thoroughly evaluate the proposed
method on both synthetic and real-world data, and we show
the beneﬁts of performing the triangulation in the distorted
space in the presence of radial distortion.

1. Introduction

In the parlance of modern computer vision, to triangulate a
point—given n ≥ 2 camera projection matrices {Pi}n
i=1,
Pi ∈ R3×4, and a set of image points {xi}n
i=1, xi =
[xi, yi, 1]⊤

—is to ﬁnd X ∈ R4, such that

αixi = PiX, i = 1, . . . , n, αi ∈ R,

(1)

i.e., such that the points xi are the projections of the point
X using the projection matrices Pi [14].

For a noise-less scenario, the triangulation problem be-
comes a trivial exercise in linear algebra. In the presence
of noise, however, the n rays originating from the camera
centers through the image points xi do not generally inter-
sect in the 3D space, i.e., there is no 3D point X that would

e
v
i
a
N

d
e
s
o
p
o
r
P

Figure 1. Level-sets for the reprojection error in the distorted and
undistorted images. Top: First undistorting the images and then
performing triangulation (e.g. using [25]) minimizes the ℓ2 error in
the undistorted images. Due to the non-linear distortion this does
not minimize any meaningful cost in the original image. Bottom:
The proposed method instead minimizes the ℓ2 error in the original
image.

satisfy Eq. (1) for all xi. Thus, for noisy data, the triangu-
lation problem becomes an optimization problem of ﬁnding
a point X that ﬁts the constraints in Eq. 1 “the best“. What
constitutes “the best“ ﬁt necessarily depends on the input
data and computational resources at hand. However, it has
been shown [13] that assuming independent Gaussian noise
on the image measurements, the optimal, maximum likeli-
hood solution to the triangulation problem is a solution that
minimizes the ℓ2-norm of the reprojection error.

Since triangulation is an integral part of many larger
computer vision methods and systems, a plethora of algo-
rithms for solving this problem has been proposed in the
past. Taxonomy of the triangulation methods can be es-
tablished along several lines: the methods may vary in the
number of views they can handle, in the form of the objec-
tive function (algebraic, reprojection error), in the way they
measure the error (ℓ2-norm, ℓ∞-norm, ℓ1-norm), or in the
optimization method they use to compute the results.

One of the simplest solutions to the triangulation prob-
lem is the linear least square method [14]. This method is

9681

fast and easily expandable to the multiview case, however,
the method does not guarantee an optimal solution and it
is prone to scaling issues. Usually, a solution provided by
the linear least square method or by methods based on ℓ∞-
norm minimization [12, 19, 17] is used as initialization for
a non-linear reﬁnement method to be eventually optimized
alongside other relevant parameters. Such an approach falls
in the class of methods known as bundle adjustment [29, 2].
The bundle adjustment method is quite effective, yet it is
still a local optimization method that requires good initial
estimates. Inaccurate initialization may cause the method
to get trapped in a local minimum.

A great deal of research effort went in recent years into

developing globally optimal triangulation methods.

The ﬁrst ℓ2-norm optimal triangulation method is due to
Hartley and Sturm [13]. This method is quite simple for
two views, where the problem reduces to a solution to a
polynomial equation of degree 6. However, it can’t be eas-
ily extended to more views. In [18], Kanatani et al. intro-
duced a fast iterative solution for the two-view triangulation
problem. While their solution may fall into local minima,
depending on the number of iterations, an extension of the
method by Lindstrom [25] usually converges to the global
optimum in two steps.

Optimal triangulation in three-views was solved for the
ﬁrst time by St´ewenius et al. [28]. This method, like its sub-
sequent extensions and speedups [8, 9, 10], solves the prob-
lem using advanced algebraic methods for solving polyno-
mial equations by searching for stationary points of an un-
constrained cost function. Unfortunately, not only are these
solutions too slow for any practical use, but also the imple-
mentation is quite involved. Kukelova et al. [22] presented a
faster algorithm for three-view triangulation, however, their
approach is only a relaxed formulation, thus not guarantee-
ing optimal solutions.

The last group of optimal triangulation methods is com-
prised of algorithms capable of handling an arbitrary num-
ber of views, i.e., multiview triangulation algorithms. These
are usually based on branch-and-bound [12, 1, 26, 16], or
second-order cone programming [17, 19, 3] approaches.

All previously mentioned solutions to the triangulation
problem assume the pinhole camera model (1) without
modeling radial distortion. However, nowadays consumer
photography is dominated by mobile-phone and wide-angle
action cameras (e.g. GoPro-type cameras). Therefore, im-
ages with signiﬁcant radial lens distortion are quite com-
mon.
In the presence of radial distortion, the projection
equations (1) holds for undistorted image points

αiu(xi) = PiX, i = 1, . . . , n, αi ∈ R,

(2)

where u(·) is a non-linear undistortion function that undis-
torts the measured distorted image points.

Since the state-of-the-art triangulation methods cannot

handle undistortion functions, a standard approach to the
triangulation in the presence of radial distortion is to ﬁrst
undistort the image points and then run a triangulation
method on the undistorted points. This means that the
state-of-the-art “ℓ2 optimal“ triangulation methods mini-
mize ℓ2-norm of the reprojection error in the undistorted im-
age space. However, assuming independent Gaussian noise
on the original distorted image measurements, the optimal,
maximal likelihood solution to the triangulation problem is
a solution that minimizes ℓ2-norm of the reprojection error
in the distorted space. Therefore the state-of-the-art meth-
ods are not optimal in the presence of radial distortion.

In this paper, we propose the ﬁrst solution to the two-
view triangulation problem that is based on the minimiza-
tion of the ℓ2-norm of the reprojection error in the original
image space, i.e. the distorted space. This method is the
ﬁrst optimal, maximal likelihood solution to the triangula-
tion problem for radially distorted cameras.

We derived two solutions to this problem. The ﬁrst so-
lution, called GBD, is based on the Gr¨obner basis method
for solving polynomial equations and it solves the problem
by searching for all stationary points of an unconstrained
cost function. Unfortunately, since the cost function results
in a quite complicated system of polynomial equations, this
solution is too slow for practical use.

Therefore we developed an iterative algorithm, called
ITD through the rest of this paper. This algorithm signif-
icantly outperforms GBD in terms of speed. By extensive
experimental comparison to the theoretically optimal GBD
solver, we found ITD to deliver the optimal solution virtu-
ally every time, thus making it an ℓ2-optimal algorithm de
facto. It is iterative in nature, yet in practice, it converges in
no more than ﬁve iterations.

Next, we formally introduce the triangulation problem

for radially distorted image points.

2. Radial distortion triangulation

Let us formalize triangulation as a problem of reprojection
error minimization in ℓ2-norm in the distorted image space:

Problem 1 Given the fundamental matrix F between the 1-
st and the 2-nd view, and given two corresponding distorted
image points xdi = [xdi , ydi , 1]⊤ , i = 1, 2,

minimize f (ˆxd1 , ˆxd2 ) = P2

subject to u(ˆxd1 )⊤

F u(ˆxd2 ) = 0,

i=1 kxdi − ˆxdi k2 ,

where ˆxdi = [ˆxdi , ˆydi , 1]⊤
points and u(·) is an undistortion function.

are corrected distorted image

Notice that instead of projection matrices Pi and 3D
point X as in the case of the projection equation (2), Prob-
lem 1 formulates the triangulation constraint using the fun-
damental matrix F, the corrected distorted image points ˆxdi

9682

and the undistortion function u(·). This formulation does
not contain divisions needed for perspective projection and
directly leads to polynomial constraints. The fundamental
matrix F can be easily computed from Pi [14] and the trian-
gulated point X from the corrected and thus noiseless image
points ˆxdi and the undistortion function u(·).

Formally, Problem 1 is a problem of function minimiza-
tion subject to equality constraints. Such a problem can be
solved by transforming the original constrained optimiza-
tion problem into an unconstrained problem by the method
of Lagrange multipliers. In the case of Problem 1, this leads
to the Lagrange function L(ˆxd1 , ˆxd2 , λ):

i=1 kxdi − ˆxdi k2 + 2λ u(ˆxd1 )⊤F u(ˆxd2 ),

(3)

L = P2

where λ is the Lagrange multiplier and the constant ‘2’ is
introduced only for easier subsequent manipulation of the
equations and it does not inﬂuence the ﬁnal solution.

The theory of Lagrange multipliers tells us that
d1 , ˆx⋆

if
f (ˆx⋆
d2 ) is a minimum of the original constrained Prob-
d2 , λ⋆) is
then there exists λ⋆ such that (ˆx⋆
lem 1,
a stationary point of L (3),
i.e., a point where all the
partial derivatives of L vanish. The Lagrange function
L(ˆxd1 , ˆxd2 , λ) in (3) is a function of ﬁve unknowns: four
image point coordinates ˆxdi , i = 1, 2, and the Lagrange
multiplier λ. Thus, to ﬁnd all stationary points of L we need
to solve the following system of ﬁve polynomial equations
in ﬁve unknowns:

d1 , ˆx⋆

u(ˆxd1 )⊤
2 S(ˆxd1 − xd1 ) + 2λDˆxd1
2 S(ˆxd2 − xd2 ) + 2λDˆxd2

F

F u(ˆxd2 ) = 0,
F u(ˆxd2 ) = 0,
⊤u(ˆxd1 ) = 0,

(4)

(5)

(6)

and Dˆxd1

where S is a 2×3 matrix that returns the ﬁrst two coordi-
nates of a three dimensional vector, and Dˆxd1
are
gradients of the undistortion functions u(ˆxd1 ) and u(ˆxd2 ).
Thanks to its compactness and expressive power, the
one-parameter division model [11] is widely used to model
radial lens distortion, and many different camera geometry
solvers based on this model were proposed recently [7, 15,
6, 21, 20, 24, 27]. In the division model the undistortion
function u(·) has the following form

u(xdi ) = (cid:2)xdi , ydi , 1 + k(x2

di + y2
di )(cid:3)

⊤

,

(7)

where (xdi , ydi ) are the centered distorted image coordi-
nates and k is the distortion parameter.

For the one-parameter division model (7) the gradients

Dˆxd1

and Dˆxd2

in (5) and (6) have the following form

Dˆxd1 = (cid:20) 1 0 2k1 ˆxd1

2k1 ˆyd1 (cid:21) , Dˆxd2 = (cid:20) 1 0 2k2 ˆxd2

2k2 ˆyd2 (cid:21) ,

0 1

0 1

(8)

we do not mean undistorted points, but distorted points that
after undistortion satisfy the epipolar constraint.

The solution for the two-parameter polynomial distor-

tion model is described in the supplementary material.

2.1. Gr¨obner Basis solution

Equations (5) and (6) are vector equations obtained as par-
tial derivatives of L w.r.t. the elements of ˆxdi . There-
fore (4)–(6) is a system of ﬁve quartic equations in ﬁve
unknowns. This system can be solved by algebraic meth-
ods such as the Gr¨obner basis method. Using the automatic
generator from Larsson et al. [23] we created a polynomial
solver for the equations (4)–(6). In general, this system has
20 solutions and the generated solver performs linear elim-
ination on a matrix of size 408 × 428. While this solver is
guaranteed to return the globally optimal solution (up to nu-
merical instabilities), it is too slow to be useful in practice.
However, we will use it in Section 3.2 to validate the results
of our iterative approach presented in the next section.

2.2. Iterative solution

In this section we propose an iterative solver that efﬁciently
solves the original ℓ2-optimal problem 1—the ITD solver.

First, let us denote ∆xdi = S (xdi − ˆxdi ) and

(9)

(10)

(11)

(12)

(13)

(14)

n1 = Dˆxd1
n2 = Dˆxd2

F u(ˆxd2 ),
⊤u(ˆxd1 ),
F

Now, we can rewrite equations (4)–(6) as

u(xd1

− S

⊤∆xd1 )⊤

F u(xd2

− S

⊤∆xd2 ) = 0,

λDˆxd1
λDˆxd2

F u(ˆxd2 ) = λn1 = ∆xd1 ,
⊤u(ˆxd1 ) = λn2 = ∆xd2 ,
F

and the cost function of Problem 1 can be restated as

f (ˆxd1 , ˆxd2 ) = P2

i=1 ∆x⊤

di ∆xdi .

d1

, xk−1

The proposed iterative solution to equations (11)–(13)
follows the idea of the two-view triangulation method
from [25]. First, let hxk−1
d2 i denote the current best
estimate of the corrected distorted image points hˆxd1 , ˆxd2 i
after the (k−1)-th iteration. The measured points x0
di ≡
xdi , i = 1, 2 are used as initialization. In the k-th iteration,
to get the updated estimates hxk
d2 i the algorithm starts
by replacing the optimal points hˆxd1 , ˆxd2 i on the left-hand
side of equations (12)–(13) by the current best estimates
hxk−1
d2 i. This results in the expressions for ∆xd1 and
∆xd2 , which are in turn substituted into equation (11). The
updated equation (11) is a univariate polynomial in λk:

d1 , xk

, xk−1

d1

where k1 and k2 are the distortion parameters of the ﬁrst and
the second camera and (ˆxdi , ˆydi ) are the coordinates of cor-
rected distorted image points. Note that by corrected points

u(cid:0)xd1 −S

where

⊤

⊤(λknk

1)(cid:1)

F u(cid:0)xd2 −S

⊤(λknk

2)(cid:1) = 0,

(15)

9683

Algorithm 1 ITD: Iterative radial distortion triangulation
Input: Fundamental matrix F,

Image points xdi = [xdi , ydi , 1]⊤ , i = 1, 2,
Distortion parameters k1, k2
ǫ1, ǫ2, maxiter

Output: Corrected points ˆxdi = [ˆxdi , ˆydi , 1]⊤ , i = 1, 2

that solve Problem 1

1: found ← 0, k ← 1
2: x0

d1 ← xd1 , x0

d2 ← xd2

3: while (not found) and (k ≤ maxiter) do
4:

F u(xk−1

2 ← D

1 ← D

d2 ), nk

nk

ˆx

ˆx

k−1
d1

F⊤u(xk−1
d1 )

k−1
d2

5:

λk ← Solution to equation (15), such that equa-
tion (14) is minimized

6: ∆xk

d1 ← λknk

1 , ∆xk

d2 ← λknk

2

7:

8:

9:

10:

11:

12:

13:

errk ← P2

d1 ← xd1 − ∆xk
xk

i=1 ∆xk⊤

di ∆xk
d1 , xk

di

d2 ← xd2 − ∆xk

d2

if (k > 1 and
then

|errk−errk−1|

errk

< ǫ1) or (errk < ǫ2)

hˆxd1 , ˆxd2 i ← (cid:10)xk

found ← 1

d1 , xk
d2(cid:11)

else

k ← k + 1

end if

14:
15: end while

16: if not found then
17:
18: end if

hˆxd1 , ˆxd2 i ← (cid:10)xk−1

d1

, xk−1

d2 (cid:11)

nk

1 = D

ˆx

nk

2 = D

ˆx

F u(xk−1

d2 ),

⊤u(xk−1
F

d1 ).

k−1
d1

k−1
d2

(16)

(17)

For the one-parameter division model (7) the equation (15)
is a 4th degree polynomial in the unknown Lagrange multi-
plier λk. The roots of this polynomial can be easily found
in closed form or using numerical methods. More details on
the implementation of the ITD solver are in Section 2.3.

d1 and ∆xk

From the up to four possible solutions of (15), a solu-
tion that minimizes the cost function (14) is selected. Fur-
ther, this solution is used to compute the k-th iteration dis-
placements ∆xk
d2 using equations (12)–(13) and
subsequently the new current estimates hxk
d2 i. The it-
eration stops based on two natural criteria: once the rela-
tive error of two consecutive iterations is smaller than some
predetermined threshold ǫ1 > 0, or once the error itself is
smaller than some predetermined threshold ǫ2 > 0.

d1 , xk

Note that by solving the equation (15), we explicitly en-
force the epipolar constraints in each iteration. ITD solver
is formalized in Algorithm 1.

2.3. Implementation details and runtime

We have implemented the iterative ITD solver in C++. To
solve the update in λ we use the closed form solution for
univariate quartic polynomials. Similarly to [25], the cost
function is always minimized by by the λ with smallest
magnitude. To see this, note that when we substitute (12)-
(13) into (14) the cost function reduces to

f (ˆxd1 , ˆxd2 ) = λ2(cid:0)nT

1

n1 + nT

2

n2(cid:1) .

(18)

With this in mind, we constructed another solver of (15)
which instead of solving the quartic polynomial fully, per-
forms Newton iterations starting from λ = 0. This typically
convergences in less than ﬁve iterations and is slightly faster
than solving the full quartic. Note that we are not perform-
ing local optimization on the cost function, but doing root
reﬁnement on the polynomial equation (15). In Section 3.2
we compare the two approaches and show that the Newton-
based solver has similar performance as the quartic solver.
Since there was no implementation available from Lind-
strom [25], we have reimplemented the method in C++. The
runtimes for the different solvers are shown in Table 1. Note
that our solver (and the solver from Lindstrom [25]) only
return the corrected image points which satisfy the epipolar
constraints. The runtime in Table 1 is only for the solver
and not computing the 3D point.

Our

Our

Lindstrom

(Closed)

(Newton)

Runtime (ns)
106 points/second

1190
0.84

141
7.1

[25]

52
19.2

Table 1. The table shows the mean runtime in nanoseconds and the
number of million points triangulated per second.

3. Evaluation on synthetic data

We have studied the performance of the proposed iterative
algorithm (ITD) on synthetically generated ground-truth 3D
scenes. These scenes were created by ﬁrst generating 2000
random image points in the ﬁrst camera P1 = [I | 0]. The ra-
dial distortion of this camera was set to k = −0.3, the focal
length to f = 1300 px (1750 px respectively) and the image
size to 3000 px × 3000 px. These settings approximately
correspond to the parameters of GoPro Hero4 camera with
the wide (medium) ﬁeld-of-view setting. The correspond-
ing 3D points were created by backprojecting the points to
random depths chosen uniformly from the interval [2, 20].
The 3D points were then projected to the second camera
with random feasible orientation and position and with the
same internal parameters as the ﬁrst camera. Finally, Gaus-
sian noise with standard deviation σ was added to the image
points.

Note that here k = −0.3 corresponds to the radial distor-
tion parameter that was applied to calibrated image points,

9684

IT

ITD

r
o
r
r
e
D
3

 

1.5

1

0.5

0

-0.01

-0.1

-0.2

-0.3

-0.4

-0.5

Radial distortion

r
o
r
r
e
n
o

 

j

i
t
c
e
o
r
p
e
R

10

8

6

4

2

0

IT
ITD

2

1.8

1.6

1.4

All points
20% border

 

r
o
r
r
e
D
3
D
T

 

I
/

T

I

1.2

1

-0.01

-0.1

-0.2

-0.3

-0.4

-0.5

-0.01

-0.1

-0.2

-0.3

-0.4

-0.5

Radial distortion

Radial distortion

Figure 2. Comparison of the new ITD and the IT [25] solvers for varying radial distortions, 5% radial distortion error, 1 px image noise
w.r.t. 3000 px × 3000 px image size, and f = 1300 px. The radial distortion k = −0.3 approximately corresponds to GoPro Wide setting.

1

0.8

r
o
r
r
e
D
3

 

0.6

0.4

0.2

0

IT
ITD

0.1

0.5

1

2

5

10

Image noise

r
o
r
r
e

 

n
o

j

i
t
c
e
o
r
p
e
R

10

8

6

4

2

0

IT
ITD

1.4

1.3

1.2

All points
20% border

 

r
o
r
r
e
D
3
D
T

 

I
/

T

I

1.1

1

0.1

0.5

1

2

5

10

0.1

0.5

1

2

5

10

Image noise

Image noise

Figure 3. Comparison of the new ITD and the IT [25] solvers for varying image noise, k = −0.3, 2% radial distortion error, 3000 px ×
3000 px image size and f = 1300 px. These camera parameters approximately correspond to the GoPro Wide setting.

which is a more common way of expressing radial distor-
tion. For uncalibrated image points in (7), and assuming
the calibration matrix to be K = diag([f, f, 1]), this corre-
sponds to the radial distortion parameter k/f 2.

In the ﬁrst experiment, we tested the new triangulation
solver on scenes with various noise contamination, differ-
ent camera conﬁgurations, different radial distortions and
different errors in the distortion parameter.

Figure 2 shows the result of our new iterative ITD solver
and the state-of-the-art IT solver [25] for cameras with dif-
ferent radial distortions. In this case, we added 1px noise to
image points and instead of the ground truth radial distor-
tion parameter we used the distortion parameter with 5% er-
ror. This simulates a calibration error that can be present in
real applications. Figure 2 shows the comparison of the 3D
error, the reprojection error and the ratio of 3D errors of the
IT [25] and the ITD solver on 1000 different scenes using
box plots. For ratios of 3D errors, we also show the results
for the 20% of points which have undergone the most dis-
tortion (i.e. points closest to the borders), to highlight the
beneﬁt of performing the triangulation in distorted space.
It can be seen that especially for larger radial distortions
our new method signiﬁcantly outperforms the state-of-the-
art IT solver [25], which minimizes ℓ2 reprojection error in
the undistorted image space. Note that here k = −0.3 ap-
proximately corresponds to GoPro Hero4 camera with the
wide ﬁeld-of-view setting.

A similar comparison for different image noise contam-
ination is in Figure 3 and for radial distortion noise in Fig-

ure 4. In both these experiments, we set the radial distortion
parameter to k = −0.3. It can be seen that in general the
proposed method provides more accurate 3D point triangu-
lations compared to the IT solver [25]. The improvement
is even larger when we consider points closer to the image
border which are more affected by the distortion.

More detailed statistics from these experiments includ-
ing medians, means, the percentage of points where the new
method gives smaller 3D error than [25], and the results for
the “20% border points” are in the supplementary material.

3.1. Distance from the distortion center

In the second experiment, we studied the inﬂuence of the
distance of the triangulated image points from the distortion
center (image center) on the 3D triangulation error.

We generated 10 000 random scenes similarly to the pre-
vious experiment for the GoPro Wide setting (f = 1300
px) and the GoPro Medium setting (f = 1750 px) with 1
px image noise. In both cases the ground truth radial dis-
tortion w.r.t. to the calibrated image points was kgt = −0.3,
however, for the triangulation we used the distortion param-
eter k = −0.29, to simulate an error in the calibration.

Figure 5 shows medians and means of ratios of 3D errors
of the state-of-the-art IT [25] and the new ITD method (i.e.
3D error IT / 3D error ITD) as a functions of distances d1
and d2 of the triangulated points xd1 and xd2 from the im-
age center. Here w corresponds to the image width, which
was in this case 3000 px. The top row shows results for Go-
Pro Medium and the bottom row for GoPro Wide setting.

9685

r
o
r
r
e
D
3

 

2.5

2

1.5

1

0.5

0

IT
ITD

0

1

10
Radial distortion noise (%)

2

5

r
o
r
r
e

 

n
o

j

i
t
c
e
o
r
p
e
R

20

15

10

5

0

IT
ITD

0

20

1.4

1.3

1.2

All points
20% border

 

r
o
r
r
e
D
3
D
T

 

I
/

T

I

1.1

1

20

0

1

10
Radial distortion noise (%)

2

5

1

10
Radial distortion noise (%)

2

5

20

Figure 4. Comparison of the new ITD and the IT [25] solvers for varying radial distortion noise, k = −0.3, 1px image noise, 3000 px ×
3000 px image size and f = 1300 px. These camera parameters approximately correspond to the GoPro Wide setting.

Median 3D error IT / ITD

Mean 3D error IT / ITD

3D error

m
u
i
d
e
M
o
r
P
o
G

e
d
i
W
o
r
P
o
G

w
2

/

2
w
2

2

d

0

0

w
2

/

2
w
2

2

d

0

0

1.6

1.5

1.4

1.3

1.2

1.1

1

1.6

1.5

1.4

1.3

1.2

1.1

1

w
2

/

2
w
2

2

d

0

0

w
2

/

2
w
2

2

d

0

0

2w/2

d

1

2w

2w/2

d

1

2w

1.6

1.5

1.4

1.3

1.2

1.1

1

1.6

1.5

1.4

1.3

1.2

1.1

1

All points

mean median

ITD
IT [25]
IT / ITD
ITD < IT

0.1418
0.1529
1.0789

0.0703
0.0752
1.0247

71.4%

20% border mean median

ITD
IT [25]
IT / ITD
ITD < IT

0.2695
0.2810
1.1185

0.1357
0.1476
1.0392

67.9%

All points

mean median

ITD
IT [25]
IT / ITD
ITD < IT

0.2946
0.3637
1.1561

0.1561
0.1739
1.0503

77.5%

20% border mean median

ITD
IT [25]
IT / ITD
ITD < IT

0.6649
0.8723
1.3465

0.3855
0.4762
1.1565

79.3%

2w/2

d

1

2w

2w/2

d

1

2w

Figure 5. Medians and means of ratios of 3D errors of the IT [25] and the proposed ITD method (i.e. 3D error IT / 3D error ITD) as a
functions of distances d1 and d2 of the triangulated points xd1 and xd2 from the image center for GoPro Medium and GoPro Wide settings.

The beneﬁt of performing the triangulation in distorted
space is visible especially for points that are further from the
distortion center (i.e. points which have undergone larger
distortion). Here for some points the 3D error of the state-
of-the-art method [25], which optimizes ℓ2 reprojection er-
ror in the undistorted space, was more than 1.6× larger
than the error of the new ITD method.
Interestingly for
points with similar distances from the distortion center, i.e.
d1 ≈ d2 (diagonals in graphs), the difference of the IT [25]
and ITD method was not so signiﬁcant.

More detailed statistics can be seen in the last col-
umn of Figure 5. Note that here we triangulated approxi-
mately 16M points, however, due to the way of generating
our scene, not all combinations of distances (d1, d2) were
equally present and therefore these graphs are not smooth.

3.2. Convergence of the iterative solver

In this section, we empirically show that the proposed it-
erative method essentially always converges to the globally
optimal solution. To perform the experiment we used the
optimal Gr¨obner basis solver from Section 2.1. To avoid in-
correct solutions from numerical instabilities we performed
further reﬁnement on the solutions from the GBD solver.

For the experiment, we generated synthetic scenes sim-
ilarly to Section 3. We compared the globally optimal so-
lutions that we get from the GBD solver with the solutions
found using the iterative approach ITD. The differences in
the returned solutions are shown in Figure 6 (Left). Here we
compared both approaches for solving quartic (15), i.e. the
closed form solver for quartic and Newton iterations start-
ing from λ = 0, as described in Section 2.3. We can see

9686

ITD (Closed)
ITD (Newton)

0.3

0.2

0.1

0
−20 −18 −16 −14 −12 −10 −8 −6

s
n
o
i
t
a
r
e
t
i

f
o

.

m
u
n

.

g
v
A

3

2.8

2.6

2.4

2.2

2

0

5

10

15

20

Noise std. (px)

Figure 6. (Left) Log10 distance to global optima. (Right) The av-
erage number of iterations required for varying noise levels.

that both approaches are very stable and essentially always
converge to the globally optimal solution. Figure 6 (Right)
shows the number of iterations required for convergence for
varying levels of image noise. Note that even for large noise
levels (20 px) the proposed method typically converges in
less than three iterations.

3.3. Comparison to bundle adjustment

In this section we compare with doing initial triangulation in
the undistorted images followed by non-linear optimization
of the reprojection error in the distorted images. Figure 7
shows a comparison of the runtime for synthetic data, using
Levenberg-Marquardt for the non-linear reﬁnement (maxi-
mum of 5 iterations). The experimental setup is similar to
the one in Section 3. In the experiment we compare to linear
triangulation (DLT [14]), the midpoint method (see [4, 13])
and the method from [25]. We also compare different meth-
ods for solving the linear least squares problem in the linear
triangulation; SVD (for homogeneous parametrization) and
QR/Cholesky (for inhomogeneous parametrization). For
our method (ITD) and Lindstrom’s method [25] (IT), the
runtime includes solving the 3 × 3 linear system to recover
the 3D points (which takes approximately 200 ns). We
can see that our method clearly outperforms the competing
methods. Note that LM needs to solve a 3 × 3 linear sys-
tem in each iteration, making it signiﬁcantly slower even in
cases where it only runs two or three iterations. Figure 8
shows the percentage of instances where the methods failed
to reach the optimal solution after local optimization (we
consider it as a failure when kX − X⋆k/kX⋆k > 0.01).

4. Evaluation on real images

In this section, we evaluate our approach on real images. We
consider a set of images containing a checkerboard calibra-
tion pattern. This allows us to have reliable ground truth for
3D point positions. In the supplementary material we show
additional experiments on images from general scenes.

4.1. Checkerboard calibration dataset

The dataset contains images of a checkerboard calibration
pattern taken with a GoPro Hero4 camera. The camera was
used in the medium (26 images) and wide (32 images) ﬁeld-
of-view settings (approximately 94 and 122 degrees hori-

3,000

2,000

1,000

)
s
n
(

e
m

i
t
n
u
R

0
10−1

)
s
n
(

e
m

i
t
n
u
R

3,000

2,000

1,000

0

100

Image noise (px)

101

DLT
(SVD)
+LO

DLT
(QR)
+LO

DLT

(Chol.)

+LO

Midp.
+ LO

IT

+LO

ITD

Figure 7. Top: Runtime vs. image noise. Bottom: Distributions of
runtimes for σ = 10 px.

)

%

(

e
r
u
l
i
a
F

2

1.5

1

0.5

0
10−1

DLT (SVD) + LO

DLT (QR) + LO

DLT (Chol.) + LO

Midp. + LO

IT + LO

ITD

100

Image noise (px)

101

Figure 8. Failure to reach optimal solution after 5 iterations
(dashed lines show 50 iterations).

Figure 9. Example of checkerboard images used for the experi-
ment in Section 4.1. Top: Medium ﬁeld-of-view setting. Bottom:
Wide ﬁeld-of-view setting.

zontal ﬁeld-of-view). The ground truth was created using
the calibration toolbox from [5]. Since [5] estimates a poly-
nomial distortion model, we reﬁt the division model (7) us-
ing the estimated camera poses. The mean reprojection er-
ror for the calibration was 0.32 px and 0.41 px respectively.
Some example images are shown in Figure 9.

We again compared our ITD solver with the IT solver
from [25] which performs triangulation on undistorted im-
age points (i.e. is optimal in the undistorted space). For
each pair of images, we computed the relative pose and per-
formed the triangulation using both methods. The results
are shown in Table 2 and 3. We also include results where

9687

3D error [mm]

mean

median

IT

ITD

IT

ITD

0% 0.0794
1% 0.0994
5% 0.2728
10% 0.5005

0.0793
0.0971
0.2563
0.4712

0.0637
0.0719
0.1472
0.2632

0.0635
0.0712
0.1416
0.2537

Reprojection error [px]

mean

median

ITD<IT
52.0%
60.5%
77.7%
82.8%

IT

ITD

IT

ITD

ITD<IT

0.1211
0.1709
0.5307
0.9865

0.1205
0.1699
0.5269
0.9788

0.0910
0.1217
0.2881
0.4953

0.0908
0.1213
0.2876
0.4940

100%
100%
100%
100%

Table 2. Results for the checkerboard experiment with the medium ﬁeld-of-view setting.

3D error [mm]

mean

median

IT

ITD

IT

ITD

0% 0.1020
1% 0.1774
5% 0.7240
10% 1.4032

0.1013
0.1603
0.6255
1.1967

0.0748
0.1078
0.3720
0.7254

0.0747
0.1026
0.3375
0.6512

Reprojection error [px]

mean

median

ITD<IT
51.6%
68.0%
83.7%
88.1%

IT

ITD

IT

ITD

ITD<IT

0.1902
0.3667
1.4505
2.8881

0.1853
0.3549
1.3970
2.7800

0.1439
0.2536
0.8300
1.6210

0.1407
0.2496
0.8151
1.5905

100%
100%
100%
100%

Table 3. Results for the checkerboard experiment with the wide ﬁeld-of-view setting.

3D error [mm]

mean

median

IT

ITD

IT

ITD

0% 0.1339
1% 0.2260
5% 0.9282
10% 1.6981

0.1319
0.2064
0.8086
1.5176

0.0993
0.1551
0.5185
1.1234

0.0966
0.1447
0.4732
1.0288

Reprojection error [px]

mean

median

ITD<IT
61.2%
74.8%
86.5%
88.0%

IT

ITD

IT

ITD

ITD<IT

0.1856
0.4158
1.7028
3.1144

0.1829
0.4097
1.6783
3.0666

0.1410
0.3294
1.3161
2.5120

0.1391
0.3275
1.2907
2.4858

100%
100%
100%
100%

Table 4. Results for the checkerboard experiment with the medium ﬁeld-of-view setting. Top 5% of most distorted points.

3D error [mm]

mean

median

IT

ITD

IT

ITD

0% 0.2314
1% 0.5222
5% 2.2356
10% 4.5794

0.2162
0.4180
1.7182
3.4405

0.1756
0.3272
1.3063
2.6298

0.1725
0.2752
1.0553
1.9991

Reprojection error [px]

mean

median

ITD<IT
61.8%
77.9%
88.1%
90.7%

IT

ITD

IT

ITD

ITD<IT

0.3273
0.8825
3.9506
8.1388

0.3064
0.8279
3.7037
7.6161

0.2441
0.7542
3.2601
6.3812

0.2324
0.7164
3.0760
6.0055

100%
100%
100%
100%

Table 5. Results for the checkerboard experiment with the wide ﬁeld-of-view setting. Top 5% of most distorted points.

we simulated errors in the distortion parameter. In the table
5% error corresponds to the distortion parameter k being
uniformly drawn from the interval [0.95kGT , 1.05kGT ].

To highlight the beneﬁt of performing the triangulation
in distorted space, we also show the results for the 5% of
points which have undergone the most distortion (i.e. clos-
est to the borders) separately in Table 4 and 5.

5. Conclusions

The paper presents the ﬁrst optimal, maximal likelihood,
solutions to the two-view triangulation problem for radially
distorted cameras. The proposed solutions minimize the ℓ2-
norm of the reprojection error in the original distorted im-
age space. The ﬁrst proposed Gr¨obner basis solution, which
searches for all stationary points of the Lagrange function is

provably optimal, however, it is too slow for practical appli-
cations. The second iterative solver in practice converges
in no more than ﬁve iterations to the optimal solution, thus
making it an ℓ2-optimal algorithm de facto.

We thoroughly evaluate the proposed method on both
synthetic and real-world data, and we show the beneﬁt of
performing the triangulation in the distorted space in the
presence of radial distortion.

Acknowledgments. Zuzana Kukelova was supported by
the ESI Fund, OP RDE programme under the project In-
ternational Mobility of Researchers MSCA-IF at CTU No.
CZ.02.2.69/0.0/0.0/17 050/0008025. Viktor Larsson re-
ceived funding from the ETH Zurich Postdoctoral Fellow-
ship program and the Marie Sklodowska-Curie Actions CO-
FUND program.

9688

References

[1] Sameer Agarwal, Manmohan Chandraker, Fredrik Kahl,
David Kriegman, and Serge Belongie. Practical global op-
timization for multiview geometry.
In European Confer-
ence on Computer Vision (ECCV), volume 1, pages 592–605,
2006. 2

[2] Sameer Agarwal, Noah Snavely, Steven M Seitz, and
Richard Szeliski. Bundle adjustment in the large. In Euro-
pean Conference on Computer Vision (ECCV), pages 29–42.
Springer, 2010. 2

[3] Chris Aholt, Sameer Agarwal, and Rekha R. Thomas. A
QCQP approach to triangulation. In European Conference
on Computer Vision (ECCV), pages 654–667, 2012. 2

[4] Paul A Beardsley, Andrew Zisserman, and David W Murray.
Navigation using afﬁne structure from motion. In European
Conference on Computer Vision (ECCV), 1994. 7

[5] Jean-Yves Bouguet. Camera calibration toolbox for matlab.

http://www.vision.caltech.edu/bouguetj/
calib_doc/index.html, 2004. 7

[6] Martin Bujnak, Zuzana Kukelova, and Tomas Pajdla. New
efﬁcient solution to the absolute pose problem for cam-
era with unknown focal length and radial distortion.
In
Asian Conference on Computer Vision (ACCV), pages 11–
24. Springer, 2010. 3

[7] Martin Byr¨od, Matthew A Brown, and Kalle ˚Astr¨om. Mini-
mal solutions for panoramic stitching with radial distortion.
In British Machine Vision Conference (BMVC), pages 1–11,
2009. 3

[8] Martin Byr¨od, Klas Josephson, and Kalle ˚Astr¨om. Fast opti-
mal three view triangulation. In Asian Conference on Com-
puter Vision (ACCV), 2007. 2

[9] Martin Byr¨od, Klas Josephson, and Kalle ˚Astr¨om. Improv-
ing numerical accuracy of gr¨obner basis polynomial equa-
tion solvers. In International Conference on Computer Vi-
sion (ICCV), 2007. 2

[10] Martin Byr¨od, Klas Josephson, and Kalle ˚Astr¨om. A
column-pivoting based strategy for monomial ordering in nu-
merical gr¨obner basis calculations. In European Conference
on Computer Vision (ECCV), 2008. 2

[11] Andrew W Fitzgibbon. Simultaneous linear estimation of
multiple view geometry and lens distortion.
In Computer
Vision and Pattern Recognition (CVPR), volume 1, pages I–
I. IEEE, 2001. 3

[12] Richard Hartley and Frederik Schaffalitzky. L∞ minimiza-
tion in geometric reconstruction problems. In Computer Vi-
sion and Pattern Recognition (CVPR), 2004. 2

[13] Richard Hartley and Peter F. Sturm. Triangulation. Com-
puter Vision and Image Understanding (CVIU), 68(2):146–
157, 1997. 1, 2, 7

[14] Richard Hartley and Andrew Zisserman. Multiple View Ge-
ometry in Computer Vision. Cambridge University Press,
2004. 1, 3, 7

[15] Klas Josephson and Martin Byrod. Pose estimation with ra-
dial distortion and unknown focal length. In Computer Vision
and Pattern Recognition (CVPR), pages 2419–2426. IEEE,
2009. 3

[16] Klas Josephson and Fredrik Kahl. Triangulation of points,
lines and conics. Journal of Mathematical Imaging and Vi-
sion (JMIV), 32(2):215–225, 2008. 2

[17] Fredrik Kahl and Richard Hartley. Multiple-view geometry
under the L∞-norm. IEEE Trans. Pattern Analysis and Ma-
chine Intelligence (PAMI), 30(9):1603–1617, Sept 2008. 2

[18] Kenichi Kanatani, Yasuyuki Sugaya, and Hirotaka Niitsuma.
Triangulation from two views revisited: Hartley-sturm vs.
optimal correction.
In British Machine Vision Conference
(BMVC), 2008. 2

[19] Qifa Ke and Takeo Kanade. Quasiconvex optimization for
robust geometric reconstruction. IEEE Trans. Pattern Anal-
ysis and Machine Intelligence (PAMI), 29(10):1834–1847,
2007. 2

[20] Yubin Kuang, Jan E Solem, Fredrik Kahl, and Kalle Astrom.
Minimal solvers for relative pose with a single unknown ra-
dial distortion. In Computer Vision and Pattern Recognition
(CVPR), pages 33–40, 2014. 3

[21] Zuzana Kukelova, Martin Bujnak, and Tomas Pajdla. Real-
time solution to the absolute pose problem with unknown ra-
dial distortion and focal length. In International Conference
on Computer Vision (ICCV), pages 2816–2823, 2013. 3

[22] Zuzana Kukelova, Tomas Pajdla, and Martin Bujnak. Fast
and stable algebraic solution to L2 three-view triangulation.
In International Conference on 3D Vision (3DV), pages 326–
333. IEEE, 2013. 2

[23] Viktor Larsson, Kalle ˚Astr¨om, and Magnus Oskarsson. Efﬁ-
cient solvers for minimal problems by syzygy-based reduc-
tion. In Computer Vision and Pattern Recognition (CVPR),
2017. 3

[24] Viktor Larsson, Zuzana Kukelova, and Yinqiang Zheng.
Making minimal solvers for absolute pose estimation com-
pact and robust. In International Conference on Computer
Vision (ICCV), pages 2335–2343. IEEE, 2017. 3

[25] Peter Lindstrom. Triangulation made easy.

In Computer
Vision and Pattern Recognition (CVPR), 2010. 1, 2, 3, 4,
5, 6, 7

[26] Fangfang Lu and Richard Hartley. A fast optimal algorithm
for L2 triangulation. In Asian Conference on Computer Vi-
sion (ACCV), 2007. 2

[27] James Pritts, Zuzana Kukelova, Viktor Larsson, and Ondrej
Chum. Radially-distorted conjugate translations. In Confer-
ence on Computer Vision and Pattern Recognition, volume 2,
2018. 3

[28] Henrik St´ewenius, Frederik Schaffalitzky, and David Nist´er.
How hard is 3-view triangulation really?
In International
Conference on Computer Vision (ICCV), volume 1, pages
686–693, 2005. 2

[29] Bill Triggs, Philip Mclauchlan, Richard Hartley, and Andrew
In
Fitzgibbon. Bundle adjustment - a modern synthesis.
Vision Algorithms: Theory and Practice, LNCS, pages 298–
375. Springer Verlag, 2000. 2

9689

