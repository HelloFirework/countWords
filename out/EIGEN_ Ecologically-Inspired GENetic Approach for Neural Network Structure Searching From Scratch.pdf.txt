EIGEN: Ecologically-Inspired GENetic Approach for Neural Network Structure

Searching from Scratch

Jian Ren1, Zhe Li2, Jianchao Yang3, Ning Xu4, Tianbao Yang2, David J. Foran1

1Rutgers University

2The University of Iowa

3Bytedance AI Lab

4Amazon Go

Abstract

Designing the structure of neural networks is considered
one of the most challenging tasks in deep learning, espe-
cially when there is few prior knowledge about the task do-
main. In this paper, we propose an Ecologically-Inspired
GENetic (EIGEN) approach that uses the concept of suc-
cession, extinction, mimicry, and gene duplication to search
neural network structure from scratch with poorly initial-
ized simple network and few constraints forced during the
evolution, as we assume no prior knowledge about the task
domain. Speciﬁcally, we ﬁrst use primary succession to
rapidly evolve a population of poorly initialized neural net-
work structures into a more diverse population, followed
by a secondary succession stage for ﬁne-grained searching
based on the networks from the primary succession. Extinc-
tion is applied in both stages to reduce computational cost.
Mimicry is employed during the entire evolution process to
help the inferior networks imitate the behavior of a superior
network and gene duplication is utilized to duplicate the
learned blocks of novel structures, both of which help to ﬁnd
better network structures. Experimental results show that
our proposed approach can achieve similar or better per-
formance compared to the existing genetic approaches with
dramatically reduced computation cost. For example, the
network discovered by our approach on CIFAR-100 dataset
achieves 78.1% test accuracy under 120 GPU hours, com-
pared to 77.0% test accuracy in more than 65, 536 GPU
hours in [36].

1. Introduction

Deep Convolutional Neural Networks (CNN) have
achieved tremendous success among many computer vision
tasks [14, 25, 39]. However, a hand-crafted network struc-
ture tailored to one task may perform poorly on another
task. Therefore, it usually requires extensive amount of hu-
man efforts to design an appropriate network structure for a
certain task.

Recently, there are emerging research works [2, 3, 6,
22, 32, 51] on automatically searching neural network struc-

tures for image recognition tasks. In this paper, we focus on
optimizing the evolution-based algorithms [30, 33, 42, 44]
for searching networks from scratch with poorly-initialized
networks, such as a network with one global pooling layer,
and with few constraints forced during the evolution [36]
as we assume no prior knowledge about the task domain.
Existing work along this line of research suffers from either
prohibitive computational cost or unsatisﬁed performance
compared with hand-crafted network structures.
In [36],
it costs more than 256 hours on 250 GPU for searching
neural network structures, which is not affordable for gen-
eral users. In [44], the ﬁnal learned network structure by
their genetic approach achieves about 77% test accuracy on
CIFAR-10, even though better performance as 92.9% could
be obtained after ﬁne-tuning certain parameters and modify-
ing some structures on the discovered network. In [27], they
ﬁrstly aim to achieve better performance with the reduced
computational cost by the proposed aggressive selection
strategy in genetic approach and more mutations operation
to increase diversity which is decreased by the proposed
selection strategy.
In their work, they reduce computa-
tional cost dramatically from more than 64, 000 GPU hours
(GPUH) to few hundreds GPUH. However, their approach
still suffers performance sacriﬁce, for example, 90.5% test
accuracy compared to 94.6% test accuracy from [36] on
CIFAR-10 dataset.

Inspired by a few key concepts in ecological system, in
this paper, we try to improve the genetic approach to achieve
better test performance compared to [36] or competitive
performance to hand-crafted network structures [18] under
limited computation cost [27], but without utilizing pre-
designed architectures [29, 30, 31, 51].
Inspired by pri-
mary, secondary succession from ecological system [38],
we enforce a poorly initialized population of neural network
structures to rapidly evolve to a population containing net-
work structures with dramatically improved performance.
After the ﬁrst stage of primary succession, we perform ﬁne-
grained search for better networks in a population during the
secondary succession stage. During the succession stages,
we also introduce an accelerated extinction algorithm to im-
prove the search efﬁciency. In our approach, we apply the

19059

mimicry [16] concept to help inferior networks learn the
behavior from superior networks to obtain the better perfor-
mance. In addition, we also introduce the gene duplication
to further utilize the novel block of layers that appear in the
discovered network structure.

The contribution of this paper is four-fold and can be

summarized as follows:

• We proposed an efﬁcient genetic approach to search
neural network structure from scratch with poorly ini-
tialized network and without limiting the searching
space. Our approach can greatly reduce the computa-
tion cost compared to other genetic approaches, where
neural network structures are searched from scratch.
This is different from some recent works [13, 31, 34]
that signiﬁcantly restricts the search space.

• We incorporate primary and secondary succession
concepts from ecological system into our genetic
framework to search for optimal network structures
under limited computation cost.

• We explore the mimicry concept from ecological sys-
tem to help search better networks during the evolution
and use the gene duplication concept to utilize the dis-
covered beneﬁcial structures.

• Experimental results show that the obtained neural net-
work structures achieves better performance compared
with existing genetic-based approaches and competi-
tive performance with the hand-crafted network struc-
tures.

2. Related Work

There is growing interest on automatic searching of neu-
ral network architectures from scratch. Methods based on
reinforcement learning (RL) show promising results on ob-
taining the networks with the performance similar or bet-
ter than human designed architectures [3, 48, 50]. Zoph et
al. propose to searching in cells, including a normal cell
and a reduction cell, where the ﬁnal architecture is based on
stacking the cells [51]. The idea of cell based searching is
widely adopted in many studies [9, 10, 29, 31, 34, 49]. In
order to reduce high computational cost, efforts have been
done to avoid training all networks during the searching pro-
cess from scratch [4, 5, 7, 9, 11, 13, 23, 47]. However,
these works require strict hand-designed constraints to re-
duce computation cost, and comparison with them are not
the focus of this paper.

On the other hand, there emerges a few studies [36, 43,
44] targeting on network searching using evolutionary ap-
proaches. In order to have a fair comparison with the RL
and evolutionary based approaches, Real et al. [35] conduct
the study where the RL and evolutionary approaches are

performed under the same searching space. Experiments
show the evolutionary approach converges faster than RL.

Therefore, in this paper we focus on the genetic-based
approaches for searching optimal neural network struc-
tures. Suganuma et al. propose the network searching
based on Cartesian genetic programming [17]. However,
a pre-deﬁned grid with the ﬁxed row and column is used
as the network has to ﬁt in the grid [43] . The studies
that have the searching space similar to us are introduced
in [27, 36, 44], where the network searching starts from
poorly-initialized networks and uses few constraints during
the evolution. Since in this paper we focus on achieving
better performance with limited computational cost through
a genetic approach, we will highlight the differences be-
tween our work with the similar studies [27, 36, 44] in the
following from two aspects: reducing computation cost and
improving performance.

In [36],

the authors encode each individual network
structure as a graph into DNA and deﬁne several differ-
ent mutation operations such as IDENTITY and RESET-
WEIGHTS to apply to each parent network to generate chil-
dren networks. The essential part of this genetic approach is
that they utilize a large amount of computation to search the
optimal neural network structures in a huge searching space.
Speciﬁcally, the entire searching procedure costs more than
256 hours with 250 GPUs to achieve 94.6% test accuracy
from the learned network structure on CIFAR-10 dataset,
which is not affordable for general users.

Due to prohibitive computation cost, in [44] the authors
impose restriction on the neural network searching space. In
their work, they only learn one block of network structure
and stack the learned block by certain times in a designed
routine to obtain the best network structure. Through this
mechanism, the computation cost is reduced to several hun-
dreds GPU hours, however, the test performance of the ob-
tained network structure is not satisfactory, for example, the
found network achieves 77% test accuracy on CIFAR-10,
even though ﬁne-tuning parameters and modifying certain
structures on the learned network structure could lead to the
test accuracy as 92.9%.

In [27], they aim to achieve better performance from au-
tomatically learned network structure with limited compu-
tation cost in the course of evolution, which is not brought
up previously. Different from restricting the search space
to reduce computational cost [12, 44], they propose the ag-
gressive selection strategy to eliminate the weak neural net-
work structures in the early stage. However, this aggressive
selection strategy may decrease the diversity which is the
nature of genetic approach to improve performance. In or-
der to remedy this issue, they deﬁne more mutation opera-
tions such as add fully connected or add pooling. Finally,
they reduce computation cost dramatically to 72 GPUH on
CIFAR-10. However, there is still performance loss in their

9060

approach. For example, on CIFAR-10 dataset, the test ac-
curacy of the found network is about 4% lower than [36].

small search space is used in the secondary succession for
ﬁne-grained search.

At the end of this section, we highlight that our work is in
the line of [27]. Inspired from ecological concepts, we pro-
pose the Ecologically-Inspired GENetic approach (EIGEN)
for neural network structure search by evolving the net-
works through rapid succession, and explore the mimicry
and gene duplication along the evolution.

3. Approach

Our genetic approach for searching the optimal neural
network structures follows the standard procedures: i) ini-
tialize population in the ﬁrst generation with simple net-
work structures; ii) evaluate the ﬁtness score of each neural
network structure (ﬁtness score is the measurement deﬁned
by users for their purpose such as validation accuracy, num-
ber of parameters in network structure, number of FLOP in
inference stage, and so on); iii) apply a selection strategy to
decide the surviving network structures based on the ﬁtness
scores; iv) apply mutation operations on the survived par-
ent network structures to create the children networks for
next generation. The last three steps are repeated until the
convergence of the ﬁtness scores. Note that in our genetic
approach, the individual is denoted by an acyclic graph with
each node representing a certain layer such as convolution,
pooling and concatenation layer. A children network can be
generated from a parent network through a mutation proce-
dure. A population includes a ﬁxed number of networks in
each generation, which is set as 10 in our experiments. For
details of using genetic approach to search neural network
structures, we refer the readers to [27]. In the following,
we apply the ecological concepts of succession, extinction,
mimicry and gene duplication to the genetic approach for
an accelerated search of neural network structures.

3.1. Evolution under Rapid Succession

Our inspiration comes from the fact that in an ecologi-
cal system, the population is dominated by diversiﬁed fast-
growing individuals during the primary succession, while
in the secondary succession, the population is dominated by
more competitive individuals [38]. Therefore, we treat all
the networks during each generation of the evolution pro-
cess as a population and focus on evolving the population
instead of on a single network [36].

With this treatment, we propose a two-stage rapid suc-
cession for accelerated evolution, analogous to the ecolog-
ical succession. The proposed rapid succession includes a
primary succession, where it starts with a community con-
sisting of a group of poorly initialized individuals which
only contains one global pooling layer, and a secondary suc-
cession which starts after the primary succession.
In the
primary succession, a large search space is explored to al-
low the community grow at a fast speed, and a relatively

In order to depict how the search space is explored, we
deﬁne mutation step-size m as the maximum mutation it-
erations between the parent and children. The actual mu-
tation step for each child is uniformly chosen from [1, m].
In the primary succession, in order to have diversiﬁed fast-
growing individuals, a large mutation step-size is used in
each generation so the mutated children could be signiﬁ-
cantly different from each other and from their parent. Since
we only go through the training procedure after ﬁnishing the
entire mutation steps, the computation cost for each gener-
ation will not increase with the larger step-size. In the sec-
ondary succession, we adopt a relative small mutation step-
size to perform a ﬁne-grained search for network structures.
Each mutation step is randomly selected from the nine

following operations including:

• INSERT-CONVOLUTION: A convolutional layer is
randomly inserted into the network. The inserted con-
volutional layer has a default setting with kernel size
as 3×3, number of channels as 32, and stride as 1.
The convolutional layer is followed by batch normal-
ization [21] and Rectiﬁed Linear Units [25].

• INSERT-CONCATENATION: A concatenation layer
is randomly inserted into the network where two bot-
tom layers share the same size of feature maps.

• INSERT-POOLING: A pooling layer is randomly in-
serted into the network with kernel size as 2×2 and
stride as 2.

• REMOVE-CONVOLUTION: The operation ran-

domly remove a convolutional layer.

• REMOVE-CONCATENATION: The operation ran-

domly remove a concatenation layer.

• REMOVE-POOLING: The operation randomly re-

move a pooling layer.

• ALTER-NUMBER-OF-CHANNELS,

ALTER-
STRIDE, ALTER-FILTER-SIZE: The three opera-
tions modify the hyper-parameters in the convolutional
layer. The number of channels is randomly selected
from a list of {16, 32, 48, 64, 96}; the stride is ran-
domly selected from a list of {1, 2}; and the ﬁlter size
is randomly selected from {1 × 1, 3 × 3}.

During the succession, we employ the idea from previ-
ous work [27] that only the best individual in the previ-
ous generation will survive. However, instead of evaluat-
ing the population in each generation after all the training
iterations, it is more efﬁcient to extinguish the individuals
that may possibly fail at early iterations, especially during

9061

the primary succession where the diversity in the popula-
tion leads to erratic performances. Based on the assumption
that a better network should have better ﬁtness score at ear-
lier training stages, we design our extinction algorithm as
follows.

To facilitate the presentation, we denote n as the pop-
ulation size in each generation, T1 and T2 as the landmark
iterations, fg,i,T1 and fg,i,T2 as ﬁtness scores (validation ac-
curacy used in our work) of the ith network in the gth gen-
eration after training T1 and T2 iterations, vg,T1 and vg,T2
as threshold to eliminate weaker networks at T1 and T2 it-
erations in the gth generation.
In the gth generation, we
have ﬁtness scores for all networks Fg,T1 = {fg,i,T1 , i =
1, · · · , n} and Fg,T2 = {fg,i,T2 , i = 1, · · · , ˆn} after train-
ing T1 and T2 iterations, respectively. Note that ˆn can be
less than n since weaker networks are eliminated after T1
iterations. The thresholds vg,T1 and vg,T2 are updated at gth
iteration as

and

vg,T1 = max(cid:16)S(Fg,T1 )p, vg−1,T1(cid:17)
vg,T2 = max(cid:16)S(Fg,T2 )q, vg−1,T2(cid:17)

(1)

(2)

where S(.) is a sorting operator in decreasing order on a
list of values and the subscripts p and q represents pth and
qth value after the sorting operation, p and q are the hyper-
parameters.

For each generation, we perform the following steps un-
til the convergence of the ﬁtness scores: (i) train the popula-
tion for T1 iterations, extinguish the individuals with ﬁtness
scores less than vg,T1 ; (ii) train the remaining population
for T2 iterations, and distinguish the population with ﬁtness
scores less than vg,T2 ; (iii) the survived individuals are fur-
ther trained till convergence and the best one is chosen as
the parent for next generation. The details for the extinction
algorithm are described in Algorithm 1.

3.2. Mimicry

In biology evolution, mimicry is a phenomenon that one
species learn behaviours from another species. For exam-
ple, moth caterpillars learn to imitate body movements of a
snake so that they could scare off predators that are usually
prey items for snakes [16]. The analogy with mimicry sig-
niﬁes that we could force inferior networks to adopt (learn)
the behaviors, such as statistics of feature maps [37, 45] or
logits [8, 19], from superior networks in designing neural
network structure during the evolution.

In our approach, we force the inferior networks to learn
the behavior of a superior network by generating similar
distribution of logits in the evolution procedure. Since
learning the distribution of logits from the superior network
gives more freedom for inferior network structure, com-
pared to learning statistics of feature maps. This is in fact

Algorithm 1 Algorithm for Extinction

1: Input: T1, T2, v0,T1 , v0,T2 , p, q
2: for g = 1 · · · , G do
3:

Obtain Fg,T1 = {fg,i,T1 , i = 1, ..., n}, n = 10 by
training all individuals for T1 iterations
Update vg,T1 based on Eq. 1
Extinguish the individuals with ﬁtness value less than
vg,T1
Obtain Fg,T2 = {fg,i,T1 , i = 1, ..., ˆn} by training the
remain individuals for T2 iterations
Update vg,T2 based on Eq. 2
Extinguish the individuals with ﬁtness value less than
vg,T2
Train the remain individuals for T3 iterations and se-
lect the best one as parent

4:

5:

6:

7:

8:

9:

10: end for

Figure 1: Example of duplication. The image on the left
shows the structure discovered after the rapid succession,
where each block includes a number of layers with the same
size of feature maps. The image in the middle and right are
two examples of the duplication that the Block 2 undergoes
different combination to create new architectures.

the knowledge distillation proposed in [19]. More speciﬁ-
cally, for the given training image x with one-hot class label
y, we deﬁne t as the logits predicted from the pre-trained
superior network, and s as the logits predicted by the infe-
rior network. We use the following deﬁned LK as the loss
function to encode the prediction discrepancy between infe-
rior and superior networks as well as the difference between
inferior networks prediction and ground truth annotations
during the evolution:

LK = (1 − α)LC(y, H(s)) + αT 2LC (cid:18)H(cid:16) s

T (cid:17) , H(cid:18) t

T (cid:19)(cid:19)

(3)

9062

Model

MAXOUT [15]

Network In Network [28]

ALL-CNN [40]

DEEPLY SUPERVISED [26]

HIGHWAY [41]
RESNET [18]
DENSENET

(k = 40, l = 100) [20]

Teacher Network

EDEN [12]

Genetic CNN [44]
LS-Evolution [36]
LS-Evolution [36]
AG-Evolution [27]
AG-Evolution [27]

EIGEN
EIGEN

PARAMS.

-
-

1.3 M

-

2.3 M
1.7 M

25.6 M

17.2 M

0.2 M

-

5.4 M
40.4 M

-
-

2.6 M
11.8 M

C10+

90.7%
91.2%
92.8%
92.0%
92.3%
93.4%

96.5%

96.0%

74.5%
92.9%
94.6%

-

90.5%

-

94.6%

-

C100+

Comp Cost

61.4%
64.3%
66.3%
65.4%
67.6%
72.8%

82.8%

82.0%

-

71.0%

-

77.0%

-

66.9%

-

78.1%

-
-
-
-
-
-

-

-

-

408 GPUH

64,000 GPUH

> 65,536 GPUH

72 GPUH
136 GPUH

48 GPUH
120 GPUH

Table 1: Comparison with hand-designed architectures and automatically discovered architectures using genetic algorithms.
The C10+ and C100+ columns indicate the test accuracy achieved on data-augmented CIFAR-10 and CIFAR-100 datasets,
respectively. The PARAMS. column indicates the number of parameters in the discovered network.

where H(.) is the softmax function, LC is the cross-entropy
of two input probability vectors such that

LC(y, H(s)) = −Xk

yklogH(sk),

(4)

α is the ratio controlling two loss terms and T is a hyper-
parameter. We adopt the terms from knowledge distilla-
tion [19] where student network and teacher network repre-
sent the inferior network and superior network, respectively.
We ﬁx T as a constant. While the target of neural network
search is to ﬁnd the optimal architecture, mimicry is par-
ticularly useful when we want to ﬁnd a small network for
applications where inference computation cost is limited.

3.3. Gene Duplication

During the primary succession, the rapid changing of
network architectures leads to the novel beneﬁcial struc-
tures decoded in DNA [36] that are not shown in the pre-
vious hand-designed networks. To further leverage the au-
tomatically discovered structures, we propose an additional
mutation operation named duplication to simulate the pro-
cess of gene duplication since it has been proved as an im-
portant mechanism for obtaining new genes and could lead
to evolutionary innovation [46]. In our implementation, we
treat the encoded DNA as a combination of blocks. For each
layer with the activation map deﬁned as N × D × W × H,
where N, D, W, H denote the batch size, depth, width and

height, respectively, the block includes the layers with ac-
tivation map that have the same W and H. As shown in
Figure 1, the optimal structure discovered from the rapid
succession could mutate into different networks by combin-
ing the blocks in several ways through the duplication. We
duplicate the entire block instead of single layer because the
block contains the beneﬁcial structures discovered automat-
ically while simple layer copying is already an operation in
the succession.

4. Experimental Results and Analysis

In this section, we report the experimental results of us-
ing EIGEN for structure search of neural networks. We
ﬁrst describe the experiment setup including datasets pre-
prossessing and training strategy in Subsection 4.1 and
show the comparison results in Subsection 4.2. Following
that, we analyze the experimental results in Subsection 4.3
with regard to each component of our approach.

4.1. Experiment Setup

Datasets. The experiments are conducted on two bench-
mark datasets including CIFAR-10 [24] and CIFAR-
100 [24]. The CIFAR-10 dataset contains 10 classes with
50, 000 training images and 10, 000 test images. The im-
ages have the size of 32×32. The data augmentation is
applied by a Global Contrast Normalization (GCN) and
ZCA whitening [15]. The CIFAR-100 dataset is similar to

9063

(a) The discovered network architecture using the proposed method on CIFAR-10 dataset that includes convolutional layers, concatenation
layers and global pooling layer.

(b) The detailed architecture of the BLOCK shown in (a).

Figure 2: Discovered neural network structure for CIFAR-10 dataset.

CIFAR-10 except it includes 100 classes.

4.2. Comparison Results

Training Strategy and Details. During the training pro-
cess, we use mini-batch Stochastic Gradient Descent (SGD)
to train each individual network with the batch size as 128,
momentum as 0.9, and weight-decay as 0.0005. Each net-
work is trained for a maximum of 25, 000 iterations. The
initial learning rate is 0.1 and is set as 0.01 and 0.001 at
15, 000 iterations and 20, 000 iterations, respectively. The
parameters in Algorithm 1 are set to T1 = 5, 000, T2 =
15, 000, T3 = 5, 000, p = 5, and q = 2. For the mimicry,
we set T to 5 and α to 0.9 in Eq. 3. The teacher network is
an ensemble of four Wide-DenseNet (k = 60, l = 40) [20].
The ﬁtness score is validation accuracy from validation set.
The primary succession ends when the ﬁtness score satu-
rates and then the secondary succession starts. The entire
evolution procedure is terminated when the ﬁtness score
converges. Training is conducted with TensorFlow [1].

We directly adopt the hyper-parameters developed on
CIFAR-10 dataset to CIFAR-100 dataset. The experiments
are run on a machine that has one Intel Xeon E5-2680 v4
2.40GHz CPU and one Nvidia Tesla P100 GPU.

The experimental results shown in Table 1 justify the
proposed approach are competitive with hand designed net-
works. Compared with the evolution-based algorithms, we
can achieve the best results with the minimum computa-
tional cost. For example, we obtain similar results on the
two benchmark datasets compared to [36], but our ap-
proach is 1,000 times faster. Also, the number of parameters
of the networks found by our approach on the two datasets
are more than two times smaller than LS-Evolution [36].

We show the discovered network architecture using our
proposed method on CIFAR-10 dataset in Figure 2, where
Figure 2a shows the engire network and Figure 2b repre-
sents the detailed architecture in the BLOCK of Figure 2a.

4.3. Analysis

Effect of Primary Succession. We show the results on
different mutation step-size for the primary succession in
Figure 3. The solid lines show average test accuracy of
the best networks among ﬁve experiments and the shaded
area represents the standard deviation σ in each generation
among ﬁve experiments. Larger mutation step-size, such as
100, leads to the faster convergence of ﬁtness score com-

9064

(a) Primary succession using the mutation step-size as 1, 2, 10 and
100.

)

%

(
 
y
c
a
r
u
c
c
A
 
t
s
e
T

100
90
80
70
60
50
40
30
20
10
0

)

%

(
 
y
c
a
r
u
c
c
A
 
t
s
e
T

80

70

60

50

40

30

20

10

0
0

CIFAR-10

1.4

1.2

1.0

0.8

0.6

0.4

0.2

)

M

(
 
s
r
e
t
e
m
a
r
a
P
 
f
o
 
r
e
b
m
u
N

10

20

30
40
Generation

50

60

0.0

70

(a) Experiment on CIFAR-10 dataset.

CIFAR-100

10

)

M

8

6

4

2

(
 
s
r
e
t
e
m
a
r
a
P
 
f
o
 
r
e
b
m
u
N

10

20

30

40
50
Generation

60

70

80

0
90

(b) Experiment on CIFAR-100 dataset.

(b) Primary succession using the muation step-size as 50, 100 and
200.

Figure 3: The effect of different mutation step-size for the
primary succession on CIFAR-10. The solid lines show
the average test accuracy over ﬁve experiments of the in-
dividuals with the highest accuracy in each generation. The
shaded area around each line has a width of standard devia-
tion ±σ. In general, the larger mutation step-size, the faster
the convergence of ﬁtness score.

pared with the smaller mutation step-size, as shown in Fig-
ure 3a. However, no further improvement is observed by
using too large mutation step-size, such as 200, as shown in
Figure 3b.

Effect of Secondary Succession. We further analyze the
effect of the secondary succession during the evolution pro-
cess. After the primary succession, we utilize the secondary
succession to search the networks with a smaller searching
space. We adopt small mutation step-size for the purpose of
ﬁne-grained searching based on the survived network from
previous generation. Figure 4 shows the example evolution

Figure 4: The progress of rapid succession on CIFAR-10 (a)
and CIFAR-100 (b). The blue line is the test performance of
the best individual in each generation. The gray dots show
the number of parameters of the individuals in each gener-
ation. The red line denotes the generation where primary
succession ends.

on CIFAR-10 and CIFAR-100 during the rapid succession.
We use mutation step-size 100 and 10 for primary succes-
sion and secondary succession, respectively. The blue line
in the plots shows performance of the best individual in each
generation. The gray dots show the number of parameters
for the population in each generation, and the red line indi-
cates where the primary succession ends. The accuracy on
the two datasets for the secondary succession shown in Ta-
ble 2 demonstrates that small mutation step-size is helpful
for searching better architectures in the rapid succession.

Analysis on Mimicry.
In order to analyze the effect of
mimicry, we consider the situation where only primary and
secondary succession are applied during the evolution. Both
the duplication and mimicry are disabled. We denote the
method as EIGEN w/o mimicry and duplication. We
compare EIGEN w/o mimicry and duplication with the
approach where mimicry is enabled and denote it as EIGEN
w/o duplication. The comparison between EIGEN w/o

9065

Succession

C10+

C100+

Method

Primary Succession

Secondary Succession

93.3% 74.7%
93.7% 76.9%

EIGEN network w/o mimicry
EIGEN network w mimicry

C10+

93.3%
94.6%

C100+

73.9%
78.1%

Table 2: The results of secondary succession during the evo-
lution. After the primary succession, the smaller mutation
step-size is adopted to search the better network architec-
tures. The accuracy on both CIFAR-10 and CIFAR-100 are
improved.

Method

C10+

C100+

EIGEN w/o mimicry

and duplication

EIGEN w/o
duplication

92.4% 74.8%

93.7% 76.9%

Table 3: Analysis of mimicry during the raipd succession.

mimicry and duplication and EIGEN w/o duplication in
Table 3 proves the effectiveness of the mimicry during the
rapid succession.

Effect of Gene Duplication. After the rapid succession,
the duplication operation is applied to leverage the automat-
ically discovered structures. To analyze the effect of gene
duplication, we denote the approach without duplication as
EIGEN w/o duplication and show the results on CIFAR-
10 and CIFAR-100 in Table 4. Although more parameters
are induced in the networks by duplication, the beneﬁcial
structures contained in the block can actually contribute to
the network performance through duplication.

Method

C10+

C100+

(PARAMS.)

(PARAMS.)

EIGEN w/o duplication

EIGEN

93.7% (1.2 M)
94.6% (2.6 M)

76.9% (6.1 M)
78.1% (11.8 M)

Table 4: Analysis of the gene duplication operation on
CIFAR-10 and CIFAR-100. The performance on the two
datasets is improved with more parameters on the networks
discovered from gene duplication.

Furthermore, we analyze the effect of mimicry on the
network after the gene duplication. We denote the best net-
work found by our approach as EIGEN network. By uti-
lizing the mimicry to train the network from scratch, which
is EIGEN network w mimicry, the networks obtain the
improvement as 1.3% and 4.2% on CIFAR-10 and CIFAR-
100, respectively, compared with the network trained from
scratch without mimicry, which is EIGEN network w/o
mimicry.

Table 5: Analysis of mimicry after the gene duplication.

5. Discussion and Conclusions

In this paper, we propose an Ecologically-Inspired GE-
Netic Approach (EIGEN) for searching neural network ar-
chitectures automatically from scratch, with poor initializa-
tion networks, such as a network with one global pooling
layer, and few constraints forced during the searching pro-
cess. Our searching space follows the work in [27, 36] and
we introduce rapid succession, mimicry and gene duplica-
tion in our apporach to make the search more efﬁcient and
effective. The rapid succession and mimicry could evolve
a population of networks into an optimal status under the
limited computational resources. With the help of gene du-
plication, the performance of the found network could be
boosted without sacriﬁcing any computational cost. The ex-
perimental results show the proposed approach can achieve
competitive results on CIFAR-10 and CIFAR-100 under
dramatically reduced computational cost compared with
other genetic-based algorithms.

Admittedly, compared with other searching neural net-
work algorithms [31, 34] which aim to searching net-
work under limited computation resource, our work has the
slightly higher error rate. But our genetic algorithm requires
little prior domain knowledge from human experts, and
is more “complete-automatic” compared with other semi-
automatic searching neural network approaches [31, 34],
which require more advanced initialization, carefully de-
signed cell-based structures and much more training iter-
ations after the searching process. Such comparison, al-
though unfair, still indicates that more exploration is needed
to improve the efﬁciency for genetic-based approaches in
searching neural networks from scratch for the future study.

References

[1] Mart´ın Abadi, Paul Barham, Jianmin Chen, Zhifeng Chen,
Andy Davis, Jeffrey Dean, Matthieu Devin, Sanjay Ghe-
mawat, Geoffrey Irving, Michael Isard, et al. Tensorﬂow:
a system for large-scale machine learning.
In OSDI, vol-
ume 16, pages 265–283, 2016. 6

[2] Filipe Assunc¸ ˜ao, Nuno Lourenc¸o, Penousal Machado, and
Bernardete Ribeiro. Using gp is neat: Evolving composi-
tional pattern production functions. In European Conference
on Genetic Programming, pages 3–18. Springer, 2018. 1

[3] Bowen Baker, Otkrist Gupta, Nikhil Naik, and Ramesh
Raskar. Designing neural network architectures using rein-

9066

forcement learning. arXiv preprint arXiv:1611.02167, 2016.
1, 2

Congress on Computational Intelligence). IEEE Congress
on, pages 1921–1928. IEEE, 2008. 2

[4] Bowen Baker, Otkrist Gupta, Ramesh Raskar, and Nikhil
Naik. Accelerating neural architecture search using perfor-
mance prediction. arXiv preprint arXiv:1705.10823, 2017.
2

[5] Gabriel Bender, Pieter-Jan Kindermans, Barret Zoph, Vijay
Vasudevan, and Quoc Le. Understanding and simplifying
one-shot architecture search. In International Conference on
Machine Learning, pages 549–558, 2018. 2

[6] James Bergstra, Daniel Yamins, and David Daniel Cox.
Making a science of model search: Hyperparameter opti-
mization in hundreds of dimensions for vision architectures.
2013. 1

[7] Andrew Brock, Theo Lim, J.M. Ritchie, and Nick Weston.
SMASH: One-shot model architecture search through hyper-
networks. In International Conference on Learning Repre-
sentations, 2018. 2

[8] Cristian Bucilu, Rich Caruana, and Alexandru Niculescu-
Mizil. Model compression. In Proceedings of the 12th ACM
SIGKDD international conference on Knowledge discovery
and data mining, pages 535–541. ACM, 2006. 4

[9] Han Cai, Tianyao Chen, Weinan Zhang, Yong Yu, and Jun
Wang. Efﬁcient architecture search by network transforma-
tion. AAAI, 2018. 2

[10] Han Cai, Jiacheng Yang, Weinan Zhang, Song Han, and
Yong Yu. Path-level network transformation for efﬁcient ar-
chitecture search. arXiv preprint arXiv:1806.02639, 2018.
2

[11] Tobias Domhan, Jost Tobias Springenberg, and Frank Hut-
ter. Speeding up automatic hyperparameter optimization of
deep neural networks by extrapolation of learning curves. In
IJCAI, volume 15, pages 3460–8, 2015. 2

[12] Emmanuel Dufourq and Bruce A Bassett. Eden: Evolution-
ary deep networks for efﬁcient machine learning.
In Pat-
tern Recognition Association of South Africa and Robotics
and Mechatronics (PRASA-RobMech), 2017, pages 110–
115. IEEE, 2017. 2, 5

[13] Thomas Elsken, Jan-Hendrik Metzen, and Frank Hutter.
Simple and efﬁcient architecture search for convolutional
neural networks. arXiv preprint arXiv:1711.04528, 2017. 2
[14] Ross Girshick. Fast r-cnn. In Proceedings of the IEEE inter-
national conference on computer vision, pages 1440–1448,
2015. 1

[15] Ian J Goodfellow, David Warde-Farley, Mehdi Mirza, Aaron
Courville, and Yoshua Bengio. Maxout networks. In Pro-
ceedings of the 30th International Conference on Interna-
tional Conference on Machine Learning-Volume 28, pages
III–1319. JMLR. org, 2013. 5

[16] HF Greeney, LA Dyer, and AM Smilanich. Feeding by lepi-
dopteran larvae is dangerous: A review of caterpillars’ chem-
ical, physiological, morphological, and behavioral defenses
against natural enemies. Invertebrate Survival Journal, 9(1),
2012. 2, 4

[18] Kaiming He, Xiangyu Zhang, Shaoqing Ren, and Jian Sun.
Deep residual learning for image recognition. In Proceed-
ings of the IEEE conference on computer vision and pattern
recognition, pages 770–778, 2016. 1, 5

[19] Geoffrey Hinton, Oriol Vinyals, and Jeff Dean. Distill-
arXiv preprint

ing the knowledge in a neural network.
arXiv:1503.02531, 2015. 4, 5

[20] Gao Huang, Zhuang Liu, Kilian Q Weinberger, and Laurens
van der Maaten. Densely connected convolutional networks.
In Proceedings of the IEEE conference on computer vision
and pattern recognition, volume 1, page 3, 2017. 5, 6

[21] Sergey Ioffe and Christian Szegedy. Batch normalization:
Accelerating deep network training by reducing internal co-
variate shift. arXiv preprint arXiv:1502.03167, 2015. 3

[22] Roxana Istrate, Florian Scheidegger, Giovanni Mariani, D
Nikolopoulos, Costas Bekas, and A Cristiano I Malossi.
Tapas: Train-less accuracy predictor for architecture search.
arXiv preprint arXiv:1806.00250, 2018. 1

[23] Aaron Klein, Stefan Falkner, Jost Tobias Springenberg, and
Frank Hutter. Learning curve prediction with bayesian neural
networks. 2016. 2

[24] Alex Krizhevsky and Geoffrey Hinton. Learning multiple

layers of features from tiny images. 2009. 5

[25] Alex Krizhevsky, Ilya Sutskever, and Geoffrey E Hinton.
Imagenet classiﬁcation with deep convolutional neural net-
works.
In Advances in neural information processing sys-
tems, pages 1097–1105, 2012. 1, 3

[26] Chen-Yu Lee, Saining Xie, Patrick Gallagher, Zhengyou
In Ar-

Zhang, and Zhuowen Tu. Deeply-supervised nets.
tiﬁcial Intelligence and Statistics, pages 562–570, 2015. 5

[27] Zhe Li, Xuehan Xiong, Zhou Ren, Ning Zhang, Xiaoyu
Wang, and Tianbao Yang. An aggressive genetic program-
ming approach for searching neural network structure under
computational constraints. arXiv preprint arXiv:1806.00851,
2018. 1, 2, 3, 5, 8

[28] Min Lin, Qiang Chen, and Shuicheng Yan. Network in net-

work. arXiv preprint arXiv:1312.4400, 2013. 5

[29] Chenxi Liu, Barret Zoph, Jonathon Shlens, Wei Hua, Li-Jia
Li, Li Fei-Fei, Alan Yuille, Jonathan Huang, and Kevin Mur-
phy. Progressive neural architecture search. arXiv preprint
arXiv:1712.00559, 2017. 1, 2

[30] Hanxiao Liu, Karen Simonyan, Oriol Vinyals, Chrisantha
Fernando, and Koray Kavukcuoglu. Hierarchical repre-
sentations for efﬁcient architecture search. arXiv preprint
arXiv:1711.00436, 2017. 1

[31] Hanxiao Liu, Karen Simonyan,

Darts: Differentiable architecture search.
arXiv:1806.09055, 2018. 1, 2, 8

and Yiming Yang.
arXiv preprint

[32] Hector Mendoza, Aaron Klein, Matthias Feurer, Jost Tobias
Springenberg, and Frank Hutter. Towards automatically-
tuned neural networks. In Workshop on Automatic Machine
Learning, pages 58–65, 2016. 1

[17] Simon Harding. Evolution of image ﬁlters on graphics
processor units using cartesian genetic programming.
In
Evolutionary Computation, 2008. CEC 2008.(IEEE World

[33] Risto Miikkulainen, Jason Liang, Elliot Meyerson, Aditya
Rawal, Daniel Fink, Olivier Francon, Bala Raju, Hormoz
Shahrzad, Arshak Navruzyan, Nigel Duffy, et al. Evolving

9067

block-wise neural network architecture generation. arXiv
preprint arXiv:1808.05584, 2018. 2

[50] Barret Zoph and Quoc V Le. Neural architecture search with
reinforcement learning. arXiv preprint arXiv:1611.01578,
2016. 2

[51] Barret Zoph, Vijay Vasudevan, Jonathon Shlens, and Quoc V
Le. Learning transferable architectures for scalable image
recognition. In Proceedings of the IEEE conference on com-
puter vision and pattern recognition (CVPR), 2018. 1, 2

In Artiﬁcial Intelligence in the Age
deep neural networks.
of Neural Networks and Brain Computing, pages 293–312.
Elsevier, 2019. 1

[34] Hieu Pham, Melody Y Guan, Barret Zoph, Quoc V Le, and
Jeff Dean. Efﬁcient neural architecture search via parameter
sharing. arXiv preprint arXiv:1802.03268, 2018. 2, 8

[35] Esteban Real, Alok Aggarwal, Yanping Huang, and Quoc V
Le. Regularized evolution for image classiﬁer architecture
search. arXiv preprint arXiv:1802.01548, 2018. 2

[36] Esteban Real, Sherry Moore, Andrew Selle, Saurabh Saxena,
Yutaka Leon Suematsu, Jie Tan, Quoc V Le, and Alexey Ku-
rakin. Large-scale evolution of image classiﬁers. In Interna-
tional Conference on Machine Learning, pages 2902–2911,
2017. 1, 2, 3, 5, 6, 8

[37] Adriana Romero, Nicolas Ballas, Samira Ebrahimi Kahou,
Antoine Chassang, Carlo Gatta, and Yoshua Bengio. Fitnets:
Hints for thin deep nets. arXiv preprint arXiv:1412.6550,
2014. 4

[38] Sarda Sahney and Michael J Benton. Recovery from the
most profound mass extinction of all time. Proceedings
of the Royal Society of London B: Biological Sciences,
275(1636):759–765, 2008. 1, 3

[39] Karen Simonyan and Andrew Zisserman. Very deep convo-
lutional networks for large-scale image recognition. arXiv
preprint arXiv:1409.1556, 2014. 1

[40] J Springenberg, Alexey Dosovitskiy, Thomas Brox, and M
Riedmiller. Striving for simplicity: The all convolutional
net. In ICLR (workshop track), 2015. 5

[41] Rupesh Kumar Srivastava, Klaus Greff, and J¨urgen Schmid-
huber. Highway networks. arXiv preprint arXiv:1505.00387,
2015. 5

[42] Kenneth O Stanley and Risto Miikkulainen. Evolving neu-
ral networks through augmenting topologies. Evolutionary
computation, 10(2):99–127, 2002. 1

[43] Masanori Suganuma, Shinichi Shirakawa, and Tomoharu
Nagao. A genetic programming approach to designing con-
volutional neural network architectures.
In Proceedings
of the Genetic and Evolutionary Computation Conference,
pages 497–504. ACM, 2017. 2

[44] Lingxi Xie and Alan L Yuille. Genetic cnn. In ICCV, pages

1388–1397, 2017. 1, 2, 5

[45] Junho Yim, Donggyu Joo, Jihoon Bae, and Junmo Kim. A
gift from knowledge distillation: Fast optimization, network
minimization and transfer learning. In The IEEE Conference
on Computer Vision and Pattern Recognition (CVPR), 2017.
4

[46] Jianzhi Zhang. Evolution by gene duplication: an update.

Trends in ecology & evolution, 18(6):292–298, 2003. 5

[47] Zhao Zhong, Junjie Yan, and Cheng-Lin Liu. Practical
arXiv preprint

network blocks design with q-learning.
arXiv:1708.05552, 2017. 2

[48] Zhao Zhong, Junjie Yan, Wei Wu, Jing Shao, and Cheng-Lin
Liu. Practical block-wise neural network architecture gener-
ation. In Proceedings of the IEEE Conference on Computer
Vision and Pattern Recognition, pages 2423–2432, 2018. 2

[49] Zhao Zhong, Zichen Yang, Boyang Deng, Junjie Yan, Wei
Wu, Jing Shao, and Cheng-Lin Liu. Blockqnn: Efﬁcient

9068

