Deep Geometric Prior for Surface Reconstruction

Francis Williams1, Teseo Schneider1, Claudio Silva 1, Denis Zorin1, Joan Bruna1, and Daniele Panozzo1

francis.williams@nyu.edu, teseo.schneider@nyu.edu, csilva@nyu.edu, dzorin@cs.nyu.edu,

bruna@cims.nyu.edu, panozzo@nyu.edu

1New York University

Abstract

The reconstruction of a discrete surface from a point
cloud is a fundamental geometry processing problem that
has been studied for decades, with many methods devel-
oped. We propose the use of a deep neural network as a
geometric prior for surface reconstruction. Speciﬁcally, we
overﬁt a neural network representing a local chart parame-
terization to part of an input point cloud using the Wasser-
stein distance as a measure of approximation. By jointly
ﬁtting many such networks to overlapping parts of the point
cloud, while enforcing a consistency condition, we compute
a manifold atlas. By sampling this atlas, we can produce a
dense reconstruction of the surface approximating the input
cloud. The entire procedure does not require any training
data or explicit regularization, yet, we show that it is able
to perform remarkably well: not introducing typical overﬁt-
ting artifacts, and approximating sharp features closely at
the same time. We experimentally show that this geomet-
ric prior produces good results for both man-made objects
containing sharp features and smoother organic objects, as
well as noisy inputs. We compare our method with a number
of well-known reconstruction methods on a standard sur-
face reconstruction benchmark.

1. Introduction

3D geometry is commonly acquired in the form of col-
lections of (possibly incomplete) range images (laser scan-
ning, structured light, etc) or measurements of more com-
plex structure (LIDAR). Unordered set of points (point
clouds) is a commonly used representation of combined
registered results of scanning objects or scenes. Point
clouds can be obtained in other ways, e.g., by sampling an
implicit surface using ray casting. Computing a continu-
ous representation of a surface from the discrete point cloud
(e.g., a polygonal mesh, an implicit surface, or a set of pa-
rameteric patches) in way that is robust to noise, and yet

retains critical surface features and approximates the sam-
pled surface well, is a pervasive and challenging problem.

Different approaches have been proposed, mostly
grouped into several categories: (1) using the points to de-
ﬁne a volumetric scalar function whose 0 level-set corre-
sponds to the desired surface, (2) attempt to ”connect the
dots” in a globally consistent way to create a mesh, (3) ﬁt a
set of primitive shapes so that the boundary of their union
is close to the point cloud, and (4) ﬁt a set of patches to the
point cloud approximating the surface.

We propose a novel method, based, on the one hand, on
constructing a manifold atlas commonly used in differen-
tial geometry to deﬁne a surface, and, on the other hand, on
observed remarkable properties of deep image priors [37],
using an overﬁtted neural network for interpolation. We
deﬁne a set of 2D parametrizations, each one mapping a
square in parametric space to a region of a surface, ensur-
ing consistency between neighbouring patches. This prob-
lem is inherently ambiguous: there are many possible valid
parametrizations, and only a small subset will correspond to
a faithful representation of the underlying surface. We com-
pute each parametrization by overﬁting a network to a part
of the point cloud, while enforcing consistency conditions
between different patches. We observe that the result is a
reconstruction which is superior quantitatively and qualita-
tively to commonly used surface reconstruction methods.

We use the Wasserstein distance as a training loss, which
is naturally robust to outliers, and has the added advantage
of providing us explicit correspondences between the para-
metric domain coordinates and the ﬁtted points, allowing us
to explicitly measure, and thus minimize, the disagreement
between neighbouring patches covering a surface.

We use a standard shape reconstruction benchmark to
compare our method with 12 competing methods, showing
that, despite the conceptual simplicity of our algorithm, our
reconstructions are superior in terms of quantitative and vi-
sual quality.

110130

2. Related work

Geometric Deep Learning A variety of architectures
were proposed for geometric applications. A few work with
point clouds as input; in most cases however, these methods
are designed for classiﬁcation or segmentation tasks. One
of the ﬁrst examples are PointNet [33] and PointNet++ [34]
originally designed for classiﬁcation and segmentation, us-
ing a set-based neural architecture [39, 36]. PCPNet [14]
is version of PointNet architecture, for estimation of local
shape properties. A number of learning architectures for
3D geometry work with voxel data converting input point
clouds to this form (e.g., [38]). The closest problems these
types of networks solve is shape completion and point cloud
upsampling.

Shape completion is considered, e.g., in [9], where vol-
umetric CNN is used to predict a very course shape com-
pletion, which is then reﬁned using data-driven local shape
[16], follows a
synthesis on small volumetric patches.
somewhat similar approach, combining multiview and vol-
umetric low-resolution global data at a ﬁrst stage, and using
a volumetric network to synthesize local patches to obtain
higher resolution. Neither of these methods aims to achieve
high-quality surface reconstruction.

PU-Net, described in [41], is to the best of our knowl-
edge, the only learning-based work addressing point cloud
upsampling directly. The method proceeds by splitting in-
put shapes into patches and learning hierarchical features
using PointNet++ type architecture. Then feature aggrega-
tion and expansion is used to perform point set expansion in
feature space, followed by the (upsampled) point set recon-
struction.

In contrast to other methods, the untrained networks in
our method take parametric coordinates in square paramet-
ric domains as inputs and produce surface points as output.
An important exception is the recent work [12] deﬁning an
architecture, AtlasNet, in which the decoder part is simi-
lar to ours, but with some important distinctions discussed
in Section 3. Finally, [4] studied the ability of neural net-
works to approximate low-dimensional manifolds, showing
that even two-layer ReLU networks have remarkable abil-
ity to encode smooth structures with near-optimal number
of parameters. In our setting, we rely on overparametrisa-
tion and leverage the implicit optimization bias of gradient
descent.

Surface Reconstruction is an established research area
dating back at least to the early 1990s (e.g, [17]); [6] is
a recent comprehensive survey of the area. We focus our
discussion on the techniques that we use for comparison,
which are a superset of those included in the surface re-
construction benchmark of Berger et al [5]. Berger tested
10 different techniques in their paper; we will follow their

nomenclature. They separate techniques into four main cat-
egories: indicator function, point-set surfaces, multi-level
partition of unity, and scattered point meshing.

Indicator function techniques deﬁne a scalar function in
space that can be used for testing if a given point is in-
side or outside the surface. There are multiple ways to
deﬁne such a function from which a surface is generated
by isocontouring. Poisson surface reconstruction (Pois-
son) [21] inverts the gradient operator by solving a Pois-
son equation to deﬁne the indicator function. Fourier sur-
face reconstruction (Fourier) [20] represents the indicator
function in the Fourier basis, while Wavelet surface recon-
struction (Wavelet) [27] employs a Haar or a Daubechies
(4-tap) basis.
Screened Poisson surface reconstruction
(Screened) [22] is an extension of [21] that incorporates
point constraints to avoid over smoothing of the earlier tech-
nique. This technique is not considered in [5], but is con-
sidered by us.

Point-set surfaces [2] deﬁne a projection operator that
moves points in space to a point on the surface, where the
surface is deﬁned to be the collection of stationary points of
the projection operator. Providing a deﬁnition of the projec-
tion operators are beyond the scope of our paper (see [5]).
In our experiments, we have used simple point set surfaces
(SPSS) [1], implicit moving least squares (IMLS) [24], and
algebraic point set surfaces (APSS) [13].

Edge-Aware Point Set Resampling (EAR) [18] (also not
considered in [5], but considered by us) works by ﬁrst com-
puting reliable normals away from potential singularities,
followed by a resampling step with a novel bilateral ﬁlter
towards surface singularities. Reconstruction can be done
using different techniques on the resulting augmented point
set with normals.

Multi-level Partition of Unity deﬁnes an implicit func-
tion by integrating weight function of a set of input points.
The original approach of [29] (MPU) uses linear functions
as low-order implicits, while [28] (MPUSm) deﬁnes differ-
ential operators directly on the MPU function. The method
of [31] (RBF) uses compactly-supported radial basis func-
tions.

Scattered Point Meshing [30]

(Scattered) grows
weighted spheres around points in order to determine the
connectivity in the output triangle mesh.

The work in [32] uses a manifold-based approach to a
direct construction of a global parametrization from a set
of range images (a point cloud, or any other surface repre-
sentation, can be converted to such a set by projection to
multiple planes). It uses range images as charts with pro-
jections as chart maps; our method computes chart maps by
ﬁtting. [40] jointly optimizes for connectivity and geome-
try to produce a single mesh for an entire input point cloud.
In contrast, our method produces a global chart map using
only a local optimization procedure.

10131

X
1

X
2

X

X
3

Á(v; µ1)

Á(v; µ2)

Á(v; µ3)

v

~

L(µ1)

~

L(µ2)

~

L(µ3)

Figure 1. Overview of our proposed surface reconstruction archi-
tecture. An input point cloud X is split into overlapping patches
p, where a local chart ϕp(v) = φ(v, θp) is obtained via the min-
X
imisation of a Wasserstein loss ˜L(θ) (2). The local charts are made
globally consistent thanks to the correspondences arising during
the Wasserstein loss minimization (Section 3.2)

.

Deep Image Prior Our approach is inspired, in part, by
the deep image prior. [37] demonstrated that an untrained
deep network can be overﬁtted to input data producing
a remarkably high-quality upsampling and even hole ﬁll-
ing without training, with the convolutional neural network
structure acting as a regularizer. Our approach to surface re-
construction is similar, in that we use untrained networks to
represent individual chart embedding functions. However,
an important difference is that our loss function measures
geometric similarity.

3. Method

Our method for surface reconstruction uses a set of deep
ReLU networks to obtain local charts or parametrizations
(Section 3.1). These parameterizations are then made con-
sistent with each other on the parts where they overlap (Sec-
tion 3.2). The networks are trained using the 2-Wasserstein
distance as a loss function. The overall architecture of our
technique is illustrated in Figure 1.

In the following, we denote by S a smooth surface (pos-
sibly with a boundary) in R3. The goal of surface recon-
struction is to estimate S from a possibly noisy point cloud
X = {xi = yi + wi; yi ∈ S; i ≤ N }, where wi models the
acquisition noise.

3.1. Local Parametrization Model

Let us ﬁrst consider the reconstruction of a given neigh-
borhood of S around a point p, denoted as Up, from the cor-
responding point cloud Xp = X ∩ Up. If Up is sufﬁciently
small, from the implicit function theorem, one can charac-
terize Up ∩ S as the image of the open square V = (0, 1)2
by a differentiable mapping ϕ : V → Up.

We propose to approximate ϕ using a neural network,
φ(·; θp) : V → R3, where θp is a vector of parameters, that
we ﬁt so that the image of φ approximates Up ∩ S. For that
purpose, we ﬁrst consider a sample {v1, . . . , vn} of n =
|Xp| points in V using a Poisson disk distribution, and the
associated Earth Movers or 2-Wasserstein Distance (EMD)
between {φ(vi; θp) : i = 1 . . . n} and Xp = {x1 . . . , xn}:

L(θ) = inf
π∈Πn

X

i≤n

kφ(vi; θ) − xπ(i)k2.

(1)

where Πn is the set of permutations of n points. The
computation of the EMD in (1) requires solving a linear
assignment problem, which can be done in O(n3) using,
for instance, the Hungarian algorithm [25]. Since this is
prohibitive for typical values of n, we rely instead on the
Sinkhorn regularized distance [8]:

˜L(θ) = min
P ∈Pn

X

i,j≤n

Pi,jkφ(vj; θ) − xik2 − λ−1H(P ) (2)

where Pn is the set of n × n bi-stochastic matrices and

H(P ) is the entropy, H(P ) = −Pi,j Pij log Pij . This

distance provably approximates the Wasserstein metric as
λ → ∞ and can be computed in near-linear time [3]. Fig-
ure 14 in the supplemental material shows the effect of vary-
ing the regularization parameter λ on the results.

We choose φ to be a MLP with the half-rectiﬁed activa-

tion function:

φ(v; θ) = θKReLU(θK−1ReLU . . . ReLU(θ1v)),

where θi, i = 1 . . . K, are per-layer weight matrices. This
choice of activation function implies that we are ﬁtting a
piece-wise linear approximation to Xp. We choose to over-
parametrize the network such that the total number of train-
able parameters T = dim(θ1) + · · · + dim(θK), where dim
refers to the total number of entries in the matrix, satisﬁes
T ≫ 3n, which is the number of constraints.

Under such overparametrized conditions, one veriﬁes
that gradient-descent converges to zero-loss in polynomial
time for least-squares regression tasks [10]. By observing
that

min

θ

˜L(θ) = min
P ∈Pn

min

θ

˜L(θ; P ), with

˜L(θ; P ) = X

i,j≤n

Pi,jkφ(vj; θ) − xik2 − λ−1H(P ),

and that ˜L(θ; P ) is convex with respect to P , it follows that
gradient-descent can ﬁnd global minimsers of ˜L in polyno-
mial time.

As λ → ∞, the entropic constraint disappears, which
implies that by setting P to any arbitrary permutation ma-
trix Π, we can still obtain zero loss (minθ ˜L(θ, Π) = 0). In
other words, the model has enough capacity to produce any

10132

arbitrary correspondence between the points {vi}i and the
targets {xi}i in the limit λ → ∞. A priori, this is an unde-
sirable property of our model, since it would allow highly
oscillatory and irregular surface reconstructions. However,
our experiments (Section 4) reveal that the gradient-descent
optimization of ˜L remarkably biases the model towards so-
lutions with no apparent oscillation. This implicit regular-
isation property is reminiscent of similar phenomena en-
joyed by gradient-descent in logistic regression [35, 15] or
matrix factorization [26]. In our context, gradient-descent
appears to be favoring solutions with small complexity,
measured for instance in terms of the Lipschitz constant of
φθ, without the need of explicit regularization. We leave the
theoretical analysis of such inductive bias for future work
(Section 5). Note that, in practice, we set λ to a large value,
which may have an extra regularizing effect.

B(q; ˜cr) consists of multiple connected components, possi-
bly of nontrivial genus. We use the heuristic described be-
low to ﬁlter out points we expect to be on a different sheet
from the ball center q.

To ensure consistency as deﬁned above, we ﬁt the charts
in two phases. In the ﬁrst phase, we locally ﬁt each chart
to its associated points. In the second phase, we compute a
joint ﬁtting of all pairs of overlapping charts.

Let (θp, πp) and (θq, πq) denote the parameters and per-
mutations of the patches p and q respectively at some iter-
ation of the optimization. We compute the ﬁrst local ﬁtting
phase as

min
θp

inf
πp

X

i≤|Xp|

kφ(vi; θp) − xπp(i)k2.

(3)

We deﬁne the set of indices of parametric points in chart

3.2. Building a Global Atlas

p of the intersection Xp,q as

Section 3.1 described a procedure to obtain a local chart
around a point p ∈ S, with parametric domain Vp and its
associated ﬁtted parametrization ϕp = φ(·; θ∗
p) : Vp →
R3. In this section, we describe how to construct an atlas
{(Vq, ϕq); q ∈ Q} by appropriately selecting a set of an-
chor points Q and by ensuring consistency between charts.

Consistency. To deﬁne atlas consistency more precisely,
we need to separate the notions of parametric coordinate-
assignment and surface approximation, since the local chart
functions ϕp deﬁne both. We say that two charts p and q
overlap, if Xp,q = Xp ∩ Xq 6= ∅. Each discrete chart ϕα is
equipped with a permutation πα, assigning indices of points
in Xp to indices of parametric positions in Vp. Two overlap-
ping charts p and q are consistent on the surface samples
if

ϕq(vπ−1

q (i); θq) = ϕp(vπ−1

p (i); θp), ∀xi ∈ Xp ∩ Xq

i.e., for any point in the patch overlap, the values of the two
chart maps at corresponding parametric values coincide. If
all chart maps are interpolating, then consistency is guaran-
teed by construction, but this is in general not the case. We
enforce consistency explicitly by minimizing a consistency
loss (4).

Constructing the Atlas. We construct the set of patch
centers Q using Poisson disk sampling [7] of X , with a
speciﬁed radius, r. For each q ∈ Q, we ﬁrst extract a neigh-
borhood Xq by intersecting a ball of radius cr centered at
q with X (X ∩ B(q; cr)), where c > 1 is another hyper-
parameter. To reduce boundary effects, we consider a larger

radius ˜c > c and use eXq := X ∩ B(q; ˜cr) to ﬁt the local

chart for Xq. In general, the intersection of S with the ball

Tpq = {i|xπp(i) ∈ Xp,q},

where Tqp is the corresponding set in chart q. The map
between indices of corresponding parametric points in two
patches is given by: πp→q := πq ◦ π−1

: Tpq → Tqp.

p

Equipped with this correspondence, we compute the sec-

ond joint ﬁtting phase between all patch pairs as:

min
θp,θq

inf
πp,πq

X

i∈Tp;q

kφ(vi; θp) − φ(vπp→q(i); θq)k2.

(4)

Observe that by the triangle inequality,

kφ(vi; θp) − φ(vπp→q(i); θq)k ≤kφ(vi; θp) − xπp(i)k+

kφ(vπp→q(i); θq) − xπp(i)k.

Therefore, the joint ﬁtting term (4) is bounded by the sum
of two separate ﬁtting terms (3) for each patch (note that
xπp(i) = xπq(πp→q(i))). Consistent transitions are thus en-
forced by the original Wasserstein loss if the charts are in-
terpolating, i.e. φ(vi; θp) = xπp(i) for all i, p. However,
in presence of noisy point clouds, the joint ﬁtting phase en-
ables a smooth transition between local charts without re-
quiring an exact ﬁt through the noisy samples.

If the Sinkhorn distance is used instead of the EMD, then
we project the stochastic matrices Pq, Pq′ to the nearest per-
mutation matrix by setting to one the maximum entry in
each row.

Filtering Sample Sets Xr.
In our experiments, we choose
the ball radius to be sufﬁciently small to avoid most of the
artifacts related to ﬁtting patches to separate sheets of the
surface-intersection with B(q; cr). The radius can be easily
chosen adaptively, although at a signiﬁcant computational
cost, by replacing a ball by several smaller balls whenever

10133

Input

Fitted surface

Figure 2. Single patch ﬁtting with uv-mapping illustrated with a
checkerboard texture.

25

75

100

3.2e−1

1.0e−1

3.2e−2

s
s
o
L

1.0e−2

3.2e−3

1.0e−3

150

500

0

100

200

300

400

500

Iteration

Convergence

Figure 3. Evolution of single-patch reconstruction as the loss ˜L(θ)
is minimised. The jumps in the loss are a side-effect of the adaptive
gradient descent scheme ADAM.

the quality of the ﬁt is bad. Instead, we use a cheaper heuris-
tic to eliminate points from each set that are likely to be on
a different sheet: We assume that the input point cloud X
also contains normals. If normals are unavailable, they can
be easily estimated using standard local ﬁtting techniques.
We then discard all vertices in each Xp whose normals form
an angle greater than a ﬁxed threshold α with respect to the
normal at the center. In all our experiments (Section 4) we
used r = 2.5% of the bounding box diagonal enclosing the
point cloud, c = 1.5 ˜c = 1.5, α = 100 degrees.

4. Experiments

Experimental Setup. We run our experiments on a com-
puting node with an Intel(R) Xeon(R) CPU E5-2690 v4,
256 GBgb of memory, and 4 NVIDIA Tesla P40 GPUs. The
runtime of our algorithm are considerably higher than com-
peting methods, requiring around 0.45 minutes per patch,
for a total of up to 6.5 hours to optimize an the entire model.
We optimize the losses (3) and (4) using the ADAM
[23] implementation in PyTorch with default parameters.
Speciﬁcally for ADAM, we use a learning rate of 10−3,
β = (0.9, 0.999), ǫ = 10−8, and no weight decay. For the

Sinkhorn loss, we use a regularization parameter, λ = 1000.
For the networks, φ, we use an MLP with fully connected
layer sizes: (2, 128, 256, 512, 512, 3) and ReLU activa-
tions. Our reference implementation is available at https:
//github.com/fwilliams/deep-geometric-prior.

Single Patch Fitting. Our ﬁrst experiment shows the be-
haviour of a single-patch network overﬁtted on a complex
point cloud (Figure 2 left). Our result is a tight ﬁt to the
point cloud. An important side effect of our construction is
an explicit local surface parametrization, which can be used
to compute surface curvature, normals, or to apply an image
onto the surface as a texture map (Figure 2 right).

Figure 3 shows the evolution of the ﬁtting and of the pa-
rameterisation ϕθ as the optimization of ˜L(θ) progresses.
We observe that the optimization path follows a trajectory
where φθ does not exhibit distortions, supporting the hy-
pothesis that gradient descent biases towards solutions with
low complexity.

Global Consistency. As described in Section 3.2, recon-
structing an entire surface from local charts requires consis-
tent transitions, leading to the formulation in (3) and (4)
which reinforces consistency across overlapping patches.
Figure 5 illustrates the effect of adding the extra consistency
terms. We verify that these terms signiﬁcantly improve the
consistency.

Surface Reconstruction Benchmark. To evaluate quan-
titatively the performance of our complete reconstruction
pipeline, we use the setup proposed by [5], using the ﬁrst
set of range scans for each of the 5 benchmark models. Fig-
ure 4 shows the results (and percentage error) of our method
on the ﬁve models of the benchmark. We compare our re-
sults against the baseline methods described in Section 2,
and use the following metrics to evaluate the quality of the
reconstruction: Let X denote the input point cloud. From

tain two dense point clouds that we denote respectively by

the ground-truth surface S and the reconstruction bS, we ob-
Y and bY. We consider

dinp→rec(i) = minbyj ∈ bY kxi − byjk , i ≤ |X |,
drec→GT(j) = minyk∈Y kbyj − ykk , j ≤ |bY|.

(5)

That is, drec→GT measures a notion of precision of the re-
construction, while dinp→rec measures a notion of recall.
Whereas drec→GT is an indication of overall quality, it does
not penalize the methods for not covering undersampled re-
gions of the input. Figure 6 illustrates these one-sided corre-
spondence measures. A naive reconstruction that copies the
input satisﬁes dinp→rec ≡ 0 but since in general the input
point cloud consists of noisy measurements, we will have
dinp→GT > 0.

10134

Anchor

Dancing Children

Daratech

Gargoyle

Lord Quas

Figure 4. Fitted points on the different models of the benchmark, the color illustrates the error with respect to the ground truth.

1.0e+0

8.0e−1

y
c
n
e
u
q
e
r
F

6.0e−1

4.0e−1

2.0e−1

0.0e+0

ApssApss

EarEar

Fourier
Fourier

Imls
Imls

MpuMpu

Mpusmooth
Mpusmooth

Poisson
Poisson

Screen Poisson
Screen Poisson

RbfRbf

Scattered
Scattered

SpssSpss

Wavelet
Wavelet

OurOur

1.0e+0

8.0e−1

y
c
n
e
u
q
e
r
F

6.0e−1

4.0e−1

2.0e−1

0.0e+0

2%

1.5%

1%

0.5%

0%

ApssApss

EarEar

Fourier
Fourier

Imls
Imls

MpuMpu

Mpusmooth
Mpusmooth

Poisson
Poisson

Screen Poisson
Screen Poisson

RbfRbf

Scattered
Scattered

SpssSpss

Wavelet
Wavelet

OurOur

First patches

Final patches

Figure 5. Initial patch ﬁtting (left), we clearly see the “un-mixed”
colors due to the disagreeing patches. After optimization (right)
all patches are overlapping producing a mix of color.

0

0.001

0.002

0.003

0.004

0.005

0

0.001

0.002

0.003

0.004

0.005

Error

Anchor

Error

Gargoyle

Figure 8. Percentage of ﬁtted vertices (y-axis) to reach a given er-
ror (drec→GT), x-axis) for different methods. The errors are mea-
sured as distance from the input data to the ﬁtted surface. The
plots for the remaining models of the dataset are provided in the
supplementary document.

d

inp!rec

d

rec!GT

Input

Reconstructed

Ground Truth

Figure 6. Diagram illustrating the evaluation measures we use to
compare different reconstructions.

1.0e+0

1.0e−1

1.0e−2

1.0e−3

1.0e−4

y
c
n
e
u
q
e
r
F

1.0e−5

1.0e−6

1.0e−7

ApssApss

EarEar

Fourier
Fourier

Imls
Imls

MpuMpu

Mpusmooth
Mpusmooth

Poisson
Poisson

Screen Poisson
Screen Poisson

RbfRbf

Scattered
Scattered

SpssSpss

Wavelet
Wavelet

OurOur

y
c
n
e
u
q
e
r
F

1.0e+0

1.0e−1

1.0e−2

1.0e−3

1.0e−4

1.0e−5

1.0e−6

1.0e−7

ApssApss

EarEar

Fourier
Fourier

Imls
Imls

MpuMpu

Mpusmooth
Mpusmooth

Poisson
Poisson

Screen Poisson
Screen Poisson

RbfRbf

Scattered
Scattered

SpssSpss

Wavelet
Wavelet

OurOur

EAR

Ours

Figure 9. EAR (left) versus Ours (right). The input point cloud
contains noise which is smoothed out by our reconstruction (while
preserving sharp features quite well) but interpolated by EAR. The
result is that EAR produces spurious points and visible artifacts.

0

0.02

0.04

0.06

0.08

0.1

0

0.02

0.04

0.06

0.08

0.1

Error

Anchor

Error

Gargoyle

Figure 7. Percentage of ﬁtted vertices (y-axis, log scale) to reach
a given error (dinp→rec, x-axis) for different methods. The errors
are computed from the ﬁtted surface to the ground truth. The plots
for the remaining models of the dataset are provided in the supple-
mentary document.

Figures 7 and 8 show respectively the percentage of ver-

tices of bY and X such that drec→GT and dinp→rec is below

a given error.

Our technique outperforms all the technique we tested,

and it is on par with the state-of-the art EAR method [19],
which achieves a similar score for these 5 models. But, as
we will discuss in the next paragraph, EAR is unable to cope
with noisy inputs. This is a remarkable result considering
that our method, differently from all the others, produces an
explicit parametrization of the surface, which can be resam-
pled at arbitrary resolutions, used for texture mapping, or to
compute analytic normals and curvature values.

EAR is an interpolative method, which by construction

satisﬁes X ⊂ bY. It follows that the noise in the measure-

ments is necessarily transferred to the surface reconstruc-

10135

Sharp Features

Noise

Chamfer

Reference

Poisson

Ear

Our

Figure 10. Example of reconstruction on extreme conditions for
our method versus the most representative traditional methods.
The red dots in the Reference are the input points for the recon-
struction.

tion. Figure 9 illustrates that our deep geometric prior pre-
serves the sharp structures while successfully denoising the
input point cloud. The mathematical analysis of such im-
plicit regularisation is a fascinating direction of future work.

Noise and Sharp Features. As discussed above, the be-
havior of surface reconstruction methods is particularly
challenging in the presence of sharp features and noise in
the input measurements. We performed two additional ex-
periments to compare the behaviour of our architecture with
the most representative traditional methods on both noisy
point clouds and models with sharp features. Schreened
Poisson Surface Reconstruction [22] (Figure 10, left) is very
robust to noise, but fails at capturing sharp features. EAR
(Figure 10, middle) is the opposite: it captures sharp fea-
tures accurately, but being an interpolatory method fails
at reconstructing noisy inputs, thus introducing spurious
points and regions during the reconstruction. Our method
(Figure 10, right) does not suffer from these limitations, ro-
bustly ﬁtting noisy inputs and capturing sharp features.

Generating a Triangle Mesh. Our method generates
a collection of
local charts, which can be sampled
at an arbitrary resolution. We can generate a trian-
gle mesh by using off-the-shelf-techniques such as Pois-
son Surface Reconstruction [22] on our dense point
clouds. We provide meshes reconstructed in this way
for all the benchmark models at https://github.com/
fwilliams/deep-geometric-prior.

Comparison with AtlasNet [12]. Our atlas construction
is related to the AtlasNet model introduced in [12]. Atlas-

Wasserstein (w/ Sinkhorn)

Figure 11. Surface reconstruction of stacked cubes using a sin-
gle chart, with two different choices of metric. We verify
that the Wasserstein metric, even with the Sinkhorn entropy-
regularization, provides a more uniform parametrisation, as well
as bijective correspondences between overlapping charts.

Net is a data-driven reconstruction method using an autoen-
coder architecture. While their emphasis was on leverag-
ing semantic similarity of shapes and images on several 3D
tasks, we focus on high-ﬁdelity point cloud reconstruction
in data-sparse regimes, i.e. in absence of any training data.
Our main contribution is to show that in such regimes, an
even simpler neural network yields state-of-the-art results
on surface reconstruction. We also note the following es-
sential differences between our method and AtlasNet.

• No Learning: Our model does not require any training
data, and, as a result, we do not need to consider an
autoencoder architecture with speciﬁc encoders.

• Transition Functions: Since we have pointwise cor-
respondences, we can deﬁne a transition function be-
tween overlapping patches Vp and Vq by consistently
triangulating corresponding parametric points in Vp
and Vq. In contrast, AtlasNet does not have such corre-
spondences and thus does not produce a true manifold
atlas.

• Patch Selection: We partition the input into point-sets
Xp that we ﬁt separately. While it is theoretically at-
tractive to attempt to ﬁt each patch to the whole set as
it is done in AtlasNet, and let the algorithm ﬁgure out
the patch partition automatically, in practice the difﬁ-
culty of the optimization problem leads to unsatisfac-
tory results. In other words, AtlasNet is approximating
a global matching whereas our model only requires lo-
cal matchings within each patch.

10136

y
c
n
e
u
q
e
r
F

1.0e+0
5.0e−1

2.0e−1
1.0e−1
5.0e−2

2.0e−2
1.0e−2
5.0e−3

2.0e−3
1.0e−3
5.0e−4

2.0e−4
1.0e−4
5.0e−5

2.0e−5
1.0e−5

Atlasnet
Atlasnet

OurOur

1.0e+0

y
c
n
e
u
q
e
r
F

8.0e−1

6.0e−1

4.0e−1

2.0e−1

0.0e+0

0

0.02

0.04

0.06

0.08

0.1

0

0.001

0.002

0.003

0.004

0.005

Error

Error

Atlasnet

Our

Figure 12. Comparison with Atlasnet. Top: drec→GT and dinp→rec
cumulative histograms. Bottom: surface reconstruction visualiza-
tion. Observe that local charts do not have consistent transitions in
the Atlasnet output.

• Wasserstein vs. Chamfer Distance: As discussed
above,
the EMD automatically provides transition
maps across local charts. AtlasNet considers instead
the Chamfer distance between point clouds, which
is more efﬁcient to compute but sacriﬁces the abil-
ity to construct bijections in the overlapping regions.
Moreover, as illustrated in Figure 11, we observe that
Chamfer distances may result in distortion effects even
within local charts.

• Chart Consistency: We explicitly enforce consis-
tency (4) which has a signiﬁcant effect on quality, as
illustrated in Section 4, whereas AtlasNet does not pro-
duce a real manifold atlas, since it has no deﬁnition of
transition maps.

We provide quantitative and qualitative comparisons to
assess the impact of our architecture choices by adapting
AtlasNet to a data-free setting. In this setting, we overﬁt At-
lasNet on a single model with the same number of patches
used for our method. Figure 12 reports both drec→GT and
dinp→rec cumulative histograms on a twisted cube surface
using 10 local charts. We verify that when the Atlasnet
architecture is trained to ﬁt the surface using our experi-
mental setup, it is clearly outperformed both quantitatively
and qualitatively by our deep geometric prior. We empha-
size however that AtlasNet is designed as a data-driven ap-
proach, and as such it can leverage semantic information
from large training sets.

Atlasnet
Atlasnet

OurOur

5. Discussion

Neural networks – particularly in the overparametrised
regime – are remarkably efﬁcient at curve ﬁtting in high-
dimensional spaces. Despite recent progress in understand-
ing the dynamics of gradient descent in such regimes, their
ability to learn and generalize by overcoming the curse
of dimensionality remains a major mystery.
In this pa-
per, we bypass this high-dimensional regime and concen-
trate on a standard low-dimensional interpolation problem:
surface reconstruction. We demonstrate that in this regime
neural networks also have an intriguing capacity to recon-
struct complex signal structures while providing robustness
to noise.

Our model is remarkably simple, combining two key
principles: (i) construct local piece-wise linear charts by
means of a vanilla ReLU fully-connected network, and (ii)
use Wasserstein distances in each neighborhood, enabling
consistent transitions across local charts. The resulting ar-
chitecture, when combined with gradient descent, provides
a “deep geometric prior” that is shown to outperform exist-
ing surface-reconstruction methods, which rely on domain-
speciﬁc geometric assumptions. The theoretical analysis of
this deep geometric prior is our next focus, which should
address questions such as how the geometry of the surface
informs the design the neural network architecture, or why
is gradient descent biasing towards locally regular recon-
structions.

Despite these promising directions, we also note the lim-
itations our approach is facing. In particular, our method
is currently substantially more expensive than alternatives.
One natural possibility to accelerate it, would be to train a
separate neural network model to provide an efﬁcient ini-
tialization for the local chart minimisation (2), similarly as
in neural sparse coders [11]. Another important question for
future research is the adaptive patch selection, which would
leverage the beneﬁts of multiscale approximations.

6. Acknowledgements

We are grateful to the NYU HPC staff for providing
computing cluster service. This project was partially sup-
ported by the NSF CAREER award 1652515, the NSF
grant IIS-1320635, the NSF grant DMS-1436591, the NSF
grant DMS-1835712, the NSF grant RI-IIS 1816753, the
SNSF grant P2TIP2 175859, the Alfred P. Sloan Foun-
dation, the Moore-Sloan Data Science Environment, the
DARPA D3M program, NVIDIA, Samsung Electronics,
Labex DigiCosme, DOA W911NF-17-1-0438, a gift from
Adobe Research, and a gift from nTopology. Any opinions,
ﬁndings, and conclusions or recommendations expressed in
this material are those of the authors and do not necessarily
reﬂect the views of DARPA. The authors would also like to
thank the anonymous reviewers for their time and effort.

10137

References

[1] A. Adamson and M. Alexa. Approximating and inter-
secting surfaces from points. In SGP, page 239, 2003.
2

[2] M. Alexa, J. Behr, D. Fleishman, D. Levin, and
C. Silva. Point Set Surfaces. In IEEE VIS, page 21,
2001. 2

[3] J. Altschuler, J. Weed, and P. Rigollet. Near-linear
time approximation algorithms for optimal transport
via sinkhorn iteration. In Advances in Neural Infor-
mation Processing Systems, pages 1964–1974, 2017.
3

[4] R. Basri and D. Jacobs.

Efﬁcient representation
of low-dimensional manifolds using deep networks.
arXiv preprint arXiv:1602.04723, 2016. 2

[5] M. Berger, J. A. Levine, L. G. Nonato, G. Taubin, and
C. T. Silva. A benchmark for surface reconstruction.
ACM TOG, 32(2):20:1–20:17, 2013. 2, 5, 11

[6] M. Berger, A. Tagliasacchi, L. M. Seversky, P. Al-
liez, G. Guennebaud, J. A. Levine, A. Sharf, and C. T.
Silva. A survey of surface reconstruction from point
clouds. CGF, 36(1):301–329, 2017. 2

[7] J. Bowers, R. Wang, L.-Y. Wei, and D. Maletz. Par-
allel poisson disk sampling with spectrum analysis on
surfaces. In ACM Transactions on Graphics (TOG),
volume 29, page 166. ACM, 2010. 4

[8] M. Cuturi. Sinkhorn distances: Lightspeed computa-
tion of optimal transport. In Advances in neural infor-
mation processing systems, pages 2292–2300, 2013.
3

[9] A. Dai, C. R. Qi, and M. Nießner. Shape completion
using 3d-encoder-predictor cnns and shape synthesis.
In Proc. IEEE Conf. on Computer Vision and Pattern
Recognition (CVPR), volume 3, 2017. 2

point clouds. Computer Graphics Forum, 37(2):75–
85, 2018. 2

[15] S. Gunasekar, J. Lee, D. Soudry, and N. Srebro. Char-
acterizing implicit bias in terms of optimization geom-
etry. arXiv preprint arXiv:1802.08246, 2018. 4

[16] X. Han, Z. Li, H. Huang, E. Kalogerakis, and Y. Yu.
High-resolution shape completion using deep neural
networks for global structure and local geometry in-
ference. In Proceedings of IEEE International Con-
ference on Computer Vision (ICCV), 2017. 2

[17] H. Hoppe, T. DeRose, T. Duchamp, J. McDonald, and
W. Stuetzle. Surface reconstruction from unorganized
points. In SIGGRAPH, pages 71–78, 1992. 2

[18] H. Huang, S. Wu, M. Gong, D. Cohen-Or, U. M. As-
cher, and H. R. Zhang. Edge-aware point set resam-
pling. ACM TOG, 32(1):9:1–9:12, 2013. 2

[19] Q. Huang, F. Wang, and L. Guibas. Functional map
networks for analyzing and exploring large shape col-
lections. In SIGGRAPH, 2014. 6

[20] M. Kazhdan. Reconstruction of solid models from ori-

ented point sets. In SGP, page 73, 2005. 2

[21] M. Kazhdan, M. Bolitho, and H. Hoppe. Poisson sur-

face reconstruction. In SGP, page 70, 2006. 2

[22] M. M. Kazhdan and H. Hoppe. Screened poisson
surface reconstruction. ACM TOG, 32(3):29:1–29:13,
2013. 2, 7

[23] D. P. Kingma and J. Ba. Adam: A method for stochas-
arXiv preprint arXiv:1412.6980,

tic optimization.
2014. 5

[24] R. Kolluri. Provably Good Moving Least Squares. In

SODA, pages 1008–1018, 2005. 2

[25] H. W. Kuhn. The hungarian method for the assign-
ment problem. Naval research logistics quarterly, 2(1-
2):83–97, 1955. 3

[10] S. S. Du, X. Zhai, B. Poczos, and A. Singh. Gradient
descent provably optimizes over-parameterized neural
networks. arXiv preprint arXiv:1810.02054, 2018. 3

[26] Y. Li, T. Ma, and H. Zhang. Algorithmic regular-
ization in over-parameterized matrix recovery. arXiv
preprint arXiv:1712.09203, 2017. 4

[11] K. Gregor and Y. LeCun. Learning fast approxima-
tions of sparse coding.
In Proceedings of the 27th
International Conference on International Conference
on Machine Learning, pages 399–406. Omnipress,
2010. 8

[12] T. Groueix, M. Fisher, V. G. Kim, B. C. Russell, and
M. Aubry. Atlasnet: A papier-m\ˆ ach\’e approach
to learning 3d surface generation.
arXiv preprint
arXiv:1802.05384, 2018. 2, 7

[13] G. Guennebaud and M. Gross. Algebraic Point Set

Surfaces. SIGGRAPH, 26:23–9, 2007. 2

[14] P. Guerrero, Y. Kleiman, M. Ovsjanikov, and N. J. Mi-
tra. PCPNet: Learning local shape properties from raw

[27] J. Manson, G. Petrova, and S. Schaefer. Streaming sur-
face reconstruction using wavelets. 27(5):1411–1420,
2008. 2

[28] Y. Nagai, Y. Ohtake, and H. Suzuki. Smoothing of
Partition of Unity Implicit Surfaces for Noise Robust
Surface Reconstruction. 28(5):1339–1348, 2009. 2

[29] Y. Ohtake, A. Belyaev, M. Alexa, G. Turk, and H. Sei-
del. Multi-level partition of unity implicits. ACM
TOG, 22(3):463–470, 2003. 2

[30] Y. Ohtake, A. Belyaev, and H. Seidel. An integrating
approach to meshing scattered point data. In Sympo-
sium on Solid and Physical Modeling, page 69, 2005.
2

10138

[31] Y. Ohtake, A. G. Belyaev, and H.-P. Seidel. 3d scat-
tered data interpolation and approximation with mul-
tilevel compactly supported rbfs. Graphical Models,
67(3):150–165, 2005. 2

[32] N. Pietroni, M. Tarini, O. Sorkine, and D. Zorin.
Global parametrization of range image sets. In ACM
Transactions on Graphics (TOG), volume 30, page
149. ACM, 2011. 2

[33] C. R. Qi, H. Su, K. Mo, and L. J. Guibas. Pointnet:
Deep learning on point sets for 3d classiﬁcation and
segmentation. In CVPR, 2017. 2

[34] C. R. Qi, L. Yi, H. Su, and L. J. Guibas. Pointnet++:
Deep hierarchical feature learning on point sets in a
metric space. arXiv preprint arXiv:1706.02413, 2017.
2

[35] D. Soudry, E. Hoffer, M. S. Nacson, S. Gunasekar,
and N. Srebro. The implicit bias of gradient descent
on separable data. arXiv preprint arXiv:1710.10345,
2017. 4

[36] S. Sukhbaatar, R. Fergus, et al. Learning multiagent
communication with backpropagation. In Advances in
Neural Information Processing Systems, pages 2244–
2252, 2016. 2

[37] D. Ulyanov, A. Vedaldi, and V. Lempitsky. Deep im-
age prior. arXiv preprint arXiv:1711.10925, 2017. 1,
3

[38] J. Varley, C. DeChant, A. Richardson, J. Ruales, and
P. Allen. Shape completion enabled robotic grasp-
ing. In Intelligent Robots and Systems (IROS), 2017
IEEE/RSJ International Conference on, pages 2442–
2447. IEEE, 2017. 2

[39] O. Vinyals, S. Bengio, and M. Kudlur. Order mat-
ters: Sequence to sequence for sets. arXiv preprint
arXiv:1511.06391, 2015. 2

[40] S. Xiong, J. Zhang, J. Zheng, J. Cai, and L. Liu.
Robust surface reconstruction via dictionary learning.
ACM Transactions on Graphics (TOG), 33(6):201,
2014. 2

[41] L. Yu, X. Li, C.-W. Fu, D. Cohen-Or, and P.-A. Heng.
Pu-net: Point cloud upsampling network. In Proceed-
ings of the IEEE Conference on Computer Vision and
Pattern Recognition, pages 2790–2799, 2018. 2

10139

