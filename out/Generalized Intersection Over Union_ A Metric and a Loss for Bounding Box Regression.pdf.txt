Generalized Intersection over Union: A Metric and A Loss for Bounding Box

Regression

Hamid Rezatoﬁghi1,2 Nathan Tsoi1

JunYoung Gwak1 Amir Sadeghian1,3

Ian Reid2 Silvio Savarese1

1Computer Science Department, Stanford University, United states
2School of Computer Science, The University of Adelaide, Australia

3Aibee Inc, USA

hamidrt@stanford.edu

Abstract

Intersection over Union (IoU) is the most popular evalu-
ation metric used in the object detection benchmarks. How-
ever, there is a gap between optimizing the commonly used
distance losses for regressing the parameters of a bounding
box and maximizing this metric value. The optimal objec-
tive for a metric is the metric itself.
In the case of axis-
aligned 2D bounding boxes, it can be shown that IoU can
be directly used as a regression loss. However, IoU has a
plateau making it infeasible to optimize in the case of non-
overlapping bounding boxes. In this paper, we address the
weaknesses of IoU by introducing a generalized version as
both a new loss and a new metric. By incorporating this
generalized IoU (GIoU ) as a loss into the state-of-the art
object detection frameworks, we show a consistent improve-
ment on their performance using both the standard, IoU
based, and new, GIoU based, performance measures on
popular object detection benchmarks such as PASCAL VOC
and MS COCO.

1. Introduction

Bounding box regression is one of the most fundamental
components in many 2D/3D computer vision tasks. Tasks
such as object localization, multiple object detection, ob-
ject tracking and instance level segmentation rely on ac-
curate bounding box regression. The dominant trend for
improving performance of applications utilizing deep neu-
ral networks is to propose either a better architecture back-
bone [15, 13] or a better strategy to extract reliable local
features [6]. However, one opportunity for improvement
that is widely ignored is the replacement of the surrogate
regression losses such as ℓ1 and ℓ2-norms, with a metric
loss calculated based on Intersection over Union (IoU ).

||.||

2

  = 8.41

IoU= 0.26

GIoU= 0.23

||.||

2

  = 8.41

IoU= 0.49

GIoU= 0.41

(a)

||.||

  = 8.41
2

IoU= 0.65

GIoU= 0.65

||.||

1

 = 9.07

IoU = 0.27

GIoU = 0.24

||.||

1

 = 9.07

IoU = 0.59

GIoU = 0.59
(b)

||.||

 = 9.07
1

IoU = 0.66

GIoU = 0.62

Figure 1. Two sets of examples (a) and (b) with the bounding
boxes represented by (a) two corners (x1, y1, x2, y2) and (b) cen-
ter and size (xc, yc, w, h). For all three cases in each set (a) ℓ2-
norm distance, ||.||2, and (b) ℓ1-norm distance, ||.||1, between the
representation of two rectangles are exactly same value, but their
IoU and GIoU values are very different.

IoU , also known as Jaccard index, is the most commonly
used metric for comparing the similarity between two arbi-
trary shapes. IoU encodes the shape properties of the ob-
jects under comparison, e.g. the widths, heights and loca-
tions of two bounding boxes, into the region property and
then calculates a normalized measure that focuses on their

1658

areas (or volumes). This property makes IoU invariant to
the scale of the problem under consideration. Due to this
appealing property, all performance measures used to eval-
uate for segmentation [2, 1, 25, 14], object detection [14, 4],
and tracking [11, 10] rely on this metric.

However, it can be shown that there is not a strong cor-
relation between minimizing the commonly used losses,
e.g. ℓn-norms, deﬁned on parametric representation of two
bounding boxes in 2D/3D and improving their IoU values.
For example, consider the simple 2D scenario in Fig. 1 (a),
where the predicted bounding box (black rectangle), and the
ground truth box (green rectangle), are represented by their
top-left and bottom-right corners, i.e. (x1, y1, x2, y2). For
simplicity, let’s assume that the distance, e.g. ℓ2-norm, be-
tween one of the corners of two boxes is ﬁxed. Therefore
any predicted bounding box where the second corner lies
on a circle with a ﬁxed radius centered on the second corner
of the green rectangle (shown by a gray dashed line cir-
cle) will have exactly the same ℓ2-norm distance from the
ground truth box; however their IoU values can be signiﬁ-
cantly different (Fig. 1 (a)). The same argument can be ex-
tended to any other representation and loss, e.g. Fig. 1 (b).
It is intuitive that a good local optimum for these types of
objectives may not necessarily be a local optimum for IoU .
Moreover, in contrast to IoU , ℓn-norm objectives deﬁned
based on the aforementioned parametric representations are
not invariant to the scale of the problem. To this end, several
pairs of bounding boxes with the same level of overlap, but
different scales due to e.g. perspective, will have different
objective values. In addition, some representations may suf-
fer from lack of regularization between the different types
of parameters used for the representation. For example, in
the center and size representation, (xc, yc) is deﬁned on the
location space while (w, h) belongs to the size space. Com-
plexity increases as more parameters are incorporated, e.g.
rotation, or when adding more dimensions to the problem.
To alleviate some of the aforementioned problems, state-of-
the-art object detectors introduce the concept of an anchor
box [22] as a hypothetically good initial guess. They also
deﬁne a non-linear representation [19, 5] to naively com-
pensate for the scale changes. Even with these handcrafted
changes, there is still a gap between optimizing the regres-
sion losses and IoU values.

In this paper, we explore the calculation of IoU between
two axis aligned rectangles, or generally two axis aligned n-
orthotopes, which has a straightforward analytical solution
and in contrast to the prevailing belief, IoU in this case can
be backpropagated [24], i.e. it can be directly used as the
objective function to optimize. It is therefore preferable to
use IoU as the objective function for 2D object detection
tasks. Given the choice between optimizing a metric itself
vs. a surrogate loss function, the optimal choice is the met-
ric itself. However, IoU as both a metric and a loss has a

major issue: if two objects do not overlap, the IoU value
will be zero and will not reﬂect how far the two shapes are
from each other. In this case of non-overlapping objects, if
IoU is used as a loss, its gradient will be zero and cannot
be optimized.

In this paper, we will address this weakness of IoU by
extending the concept to non-overlapping cases. We ensure
this generalization (a) follows the same deﬁnition as IoU ,
i.e. encoding the shape properties of the compared objects
into the region property; (b) maintains the scale invariant
property of IoU , and (c) ensures a strong correlation with
IoU in the case of overlapping objects. We introduce this
generalized version of IoU , named GIoU , as a new met-
ric for comparing any two arbitrary shapes. We also pro-
vide an analytical solution for calculating GIoU between
two axis aligned rectangles, allowing it to be used as a loss
in this case. Incorporating GIoU loss into state-of-the art
object detection algorithms, we consistently improve their
performance on popular object detection benchmarks such
as PASCAL VOC [4] and MS COCO [14] using both the
standard, i.e. IoU based [4, 14], and the new, GIoU based,
performance measures.

The main contribution of the paper is summarized as fol-

lows:

• We introduce this generalized version of IoU , as a new

metric for comparing any two arbitrary shapes.

• We provide an analytical solution for using GIoU as
loss between two axis-aligned rectangles or generally
n-orthotopes1.

• We incorporate GIoU loss into the most popular
object detection algorithms such as Faster R-CNN,
Mask R-CNN and YOLO v3, and show their per-
formance improvement on standard object detection
benchmarks.

2. Related Work

Object detection accuracy measures: Intersection over
Union (IoU ) is the defacto evaluation metric used in object
detection. It is used to determine true positives and false
positives in a set of predictions. When using IoU as an eval-
uation metric an accuracy threshold must be chosen. For
instance in the PASCAL VOC challenge [4], the widely re-
ported detection accuracy measure, i.e. mean Average Pre-
cision (mAP), is calculated based on a ﬁxed IoU threshold,
i.e. 0.5. However, an arbitrary choice of the IoU threshold
does not fully reﬂect the localization performance of dif-
ferent methods. Any localization accuracy higher than the
threshold is treated equally. In order to make this perfor-
mance measure less sensitive to the choice of IoU thresh-
old, the MS COCO Benchmark challenge [14] averages
mAP across multiple IoU thresholds.

1Extension provided in supp. material

659

Bounding box representations and losses: In 2D ob-
ject detection, learning bounding box parameters is crucial.
Various bounding box representations and losses have been
proposed in the literature. Redmon et al. in YOLO v1[19]
propose a direct regression on the bounding box parameters
with a small tweak to predict square root of the bounding
box size to remedy scale sensitivity. Girshick et al. [5] in R-
CNN parameterize the bounding box representation by pre-
dicting location and size offsets from a prior bounding box
calculated using a selective search algorithm [23]. To al-
leviate scale sensitivity of the representation, the bounding
box size offsets are deﬁned in log-space. Then, an ℓ2-norm
objective, also known as MSE loss, is used as the objective
to optimize. Later, in Fast R-CNN [7], Girshick proposes
ℓ1-smooth loss to make the learning more robust against
outliers. Ren et al. [22] propose the use of a set of dense
prior bounding boxes, known as anchor boxes, followed by
a regression to small variations on bounding box locations
and sizes. However, this makes training the bounding box
scores more difﬁcult due to signiﬁcant class imbalance be-
tween positive and negative samples. To mitigate this prob-
lem, the authors later introduce focal loss [13], which is
orthogonal to the main focus of our paper.

Most popular object detectors [20, 21, 3, 12, 13, 16] uti-
lize some combination of the bounding box representations
and losses mentioned above. These considerable efforts
have yielded signiﬁcant improvement in object detection.
We show there may be some opportunity for further im-
provement in localization with the use of GIoU , as their
bounding box regression losses are not directly representa-
tive of the core evaluation metric, i.e. IoU .

Optimizing IoU using an approximate or a surro-
gate function: In the semantic segmentation task, there
have been some efforts to optimize IoU using either an
approximate function [18] or a surrogate loss [17]. Simi-
larly, for the object detection task, recent works [8, 24] have
attempted to directly or indirectly incorporate IoU to bet-
ter perform bounding box regression. However, they suffer
from either an approximation or a plateau which exist in
optimizing IoU in non-overlapping cases. In this paper we
address the weakness of IoU by introducing a generalized
version of IoU , which is directly incorporated as a loss for
the object detection problem.

3. Generalized Intersection over Union

Intersection over Union (IoU ) for comparing similarity
between two arbitrary shapes (volumes) A, B ⊆ S ∈ Rn is
attained by:

IoU =

|A ∩ B|
|A ∪ B|

(1)

Two appealing features, which make this similarity mea-
sure popular for evaluating many 2D/3D computer vision
tasks are as follows:

Algorithm 1: Generalized Intersection over Union
input : Two arbitrary convex shapes: A, B ⊆ S ∈ Rn
output: GIoU

1 For A and B, ﬁnd the smallest enclosing convex object C,

where C ⊆ S ∈ Rn

2 IoU =

|A ∩ B|
|A ∪ B|

3 GIoU = IoU −

|C\(A ∪ B)|

|C|

• IoU as a distance, e.g. LIoU = 1−IoU , is a metric (by
mathematical deﬁnition) [9]. It means LIoU fulﬁlls all
properties of a metric such as non-negativity, identity
of indiscernibles, symmetry and triangle inequality.

• IoU is invariant to the scale of the problem. This
means that the similarity between two arbitrary shapes
A and B is independent from the scale of their space S
(the proof is provided in supp. material).

However, IoU has a major weakness:

• If |A∩B| = 0, IoU (A, B) = 0. In this case, IoU does
not reﬂect if two shapes are in vicinity of each other or
very far from each other.

To address this issue, we propose a general extension to

IoU , namely Generalized Intersection over Union GIoU .

For two arbitrary convex shapes (volumes) A, B ⊆ S ∈
Rn, we ﬁrst ﬁnd the smallest convex shapes C ⊆ S ∈ Rn
enclosing both A and B2. For comparing two speciﬁc types
of geometric shapes, C can be from the same type. For
example, two arbitrary ellipsoids, C could be the smallest
ellipsoids enclosing them. Then we calculate a ratio be-
tween the volume (area) occupied by C excluding A and B
and divide by the total volume (area) occupied by C. This
represents a normalized measure that focuses on the empty
volume (area) between A and B. Finally GIoU is attained
by subtracting this ratio from the IoU value. The calcula-
tion of GIoU is summarized in Alg. 1.

GIoU as a new metric has the following properties: 3

1. Similar to IoU , GIoU as a distance, e.g. LGIoU =
1 − GIoU , holding all properties of a metric such
as non-negativity, identity of indiscernibles, symmetry
and triangle inequality.

2. Similar to IoU , GIoU is invariant to the scale of the

problem.

3. GIoU is always a lower bound for IoU , i.e. ∀A, B ⊆
S GIoU (A, B) ≤ IoU (A, B), and this lower bound
becomes tighter when A and B have a stronger shape

2Extension to non-convex cases has been provided in supp. material.
3Their proof has been provided in supp. material.

660

similarity and proximity, i.e. limA→B GIoU (A, B) =
IoU (A, B).

Algorithm 2: IoU and GIoU as bounding box losses
input : Predicted Bp and ground truth Bg bounding box

4. ∀A, B ⊆ S, 0 ≤ IoU (A, B) ≤ 1, but GIoU
i.e. ∀A, B ⊆ S, −1 ≤

has a symmetric range,
GIoU (A, B) ≤ 1.

I) Similar to IoU , the value 1 occurs only when two
objects overlay perfectly, i.e. if |A∪B| = |A∩B|,
then GIoU = IoU = 1

II) GIoU value asymptotically converges to -1
when the ratio between occupying regions of
|A ∪ B|, and the volume (area)
two shapes,
of the enclosing shape |C| tends to zero, i.e.

lim
|A∪B|

|C|

→0

GIoU (A, B) = −1 .

In summary, this generalization keeps the major proper-
ties of IoU while rectifying its weakness. Therefore, GIoU
can be a proper substitute for IoU in all performance mea-
sures used in 2D/3D computer vision tasks. In this paper,
we only focus on 2D object detection where we can easily
derive an analytical solution for GIoU to apply it as both
metric and loss. The extension to non-axis aligned 3D cases
is left as future work.

3.1. GIoU as Loss for Bounding Box Regression

So far, we introduced GIoU as a metric for any two ar-
bitrary shapes. However as is the case with IoU , there is no
analytical solution for calculating intersection between two
arbitrary shapes and/or for ﬁnding the smallest enclosing
convex object for them.

Fortunately, for the 2D object detection task where the
task is to compare two axis aligned bounding boxes, we can
show that GIoU has a straightforward solution. In this case,
the intersection and the smallest enclosing objects both have
rectangular shapes. It can be shown that the coordinates of
their vertices are simply the coordinates of one of the two
bounding boxes being compared, which can be attained by
comparing each vertices’ coordinates using min and max
functions. To check if two bounding boxes overlap, a con-
dition must also be checked. Therefore, we have an exact
solution to calculate IoU and GIoU .

Since back-propagating min, max and piece-wise linear
functions, e.g. Relu, are feasible, it can be shown that every
component in Alg. 2 has a well-behaved derivative. There-
fore, IoU or GIoU can be directly used as a loss, i.e. LIoU
or LGIoU , for optimizing deep neural network based object
detectors. In this case, we are directly optimizing a metric
as loss, which is an optimal choice for the metric. However,
in all non-overlapping cases, IoU has zero gradient, which
affects both training quality and convergence rate. GIoU ,
in contrast, has a gradient in all possible cases, including
non-overlapping situations. In addition, using property 3,

coordinates:
Bp = (xp

1, yp
output: LIoU , LGIoU .

1 , xp

2, yp

2 ), Bg = (xg

1, yg

1 , xg

2, yg

2 ).

1 and yp

2 > yp
1 :

1, xp
2),
1 , yp
2 ),

ˆxp
1 = min(xp
ˆyp
1 = min(yp

1 For the predicted box Bp, ensuring xp
ˆxp
2 = max(xp
ˆyp
2 = max(yp

2 > xp
1, xp
2),
1 , yp
2 ).
2 Calculating area of Bg: Ag = (xg
2 − xg
1) × (yg
3 Calculating area of Bp: Ap = (ˆxp
2 − ˆxp
1) × (ˆyp
4 Calculating intersection I between Bp and Bg:

2 − yg
2 − ˆyp

1 ).
1 ).

1 = max(ˆxp
xI
1 = max(ˆyp
yI

1, xg
1 , yg
2 − xI

2 = min(ˆxp
xI
1),
2 = min(ˆyp
yI
1 ),
2 − yI
1 ) × (yI
1 )

2, xg
2),
2 , yg
2 ),
if xI
2 > xI

1 , yI

2 > yI

1

I =((xI

0

otherwise.

5 Finding the coordinate of smallest enclosing box Bc:

1 = min(ˆxp
xc
1 = min(ˆyp
yc

1, xg
1),
1 , yg
1 ),

2 = max(ˆxp
xc
2 = max(ˆyp
yc

2, xg
2),
2 , yg
2 ).
2 − xc
1) × (yc

6 Calculating area of Bc: Ac = (xc

2 − yc

1).

, where U = Ap + Ag − I.

7 IoU =

I
U

8 GIoU = IoU −

Ac − U

Ac

.

9 LIoU = 1 − IoU , LGIoU = 1 − GIoU .

we show that GIoU has a strong correlation with IoU ,
especially in high IoU values. We also demonstrate this
correlation qualitatively in Fig. 2 by taking over 10K ran-
dom samples from the coordinates of two 2D rectangles. In
Fig. 2, we also observe that in the case of low overlap, e.g.
IoU ≤ 0.2 and GIoU ≤ 0.2, GIoU has the opportunity to
change more dramatically compared to IoU . To this end,
GIoU can potentially have a steeper gradient in any possi-
ble state in these cases compared to IoU . Therefore, opti-
mizing GIoU as loss, LGIoU can be a better choice com-
pared to LIoU , no matter which IoU -based performance
measure is ultimately used. Our experimental results ver-
ify this claim.

Loss Stability: We also investigate if there exist any ex-
treme cases which make the loss unstable/undeﬁned given
any value for the predicted outputs.

1

0.8

0.6

0.4

0.2

U
o
I

0

-1

Overlapping samples
Line IoU = GIoU
Non-overlaping samples
Line IoU = 0 & GIoU < 0

-0.8

-0.6

-0.4

-0.2

0

0.2

0.4

0.6

0.8

1

GIoU

Figure 2. Correlation between GIoU and IOU for overlapping and
non-overlapping samples.

661

Considering the ground truth bounding box, Bg is a rect-
angle with area bigger than zero, i.e. Ag > 0. Alg. 2 (1)
and the Conditions in Alg. 2 (4) respectively ensure the pre-
dicted area Ap and intersection I are non-negative values,
i.e. Ap ≥ 0 and I ≥ 0 ∀Bp ∈ R4. Therefore union U > 0
for any predicted value of Bp = (xp
2) ∈ R4.
This ensures that the denominator in IoU cannot be zero
for any predicted value of outputs. Moreover, for any val-
ues of Bp = (xp
2) ∈ R4, union is always bigger
than intersection, i.e. U ≥ I. Consequently, LIoU is always
bounded, i.e. 0 ≤ LIoU ≤ 1 ∀Bp ∈ R4.

1 , xp

1 , xp

1, yp

2, yp

1, yp

2, yp

Ac

Ac−U

To check the stability of LGIoU , the extra term, i.e.
, should always be a deﬁned and bounded value. It
can be easily perceived that the smallest enclosing box Bc
cannot be smaller than Bg for all predicted values. There-
fore the denominator in Ac−U
is always a positive non-
Ac
zero value, because Ac ≥ Ag ∀Bp ∈ R4 and Ag ≥ 0.
Moreover, the area of the smallest enclosing box cannot be
smaller than union for any value of predictions, i.e. Ac ≥ U
∀Bp ∈ R4. Therefore, the extra term in GIoU is positive
and bounded. Consequently, LGIoU is always bounded, i.e.
0 ≤ LGIoU ≤ 2 ∀Bp ∈ R4.

LGIoU behaviour when IoU = 0: For GIoU loss, we
have LGIoU = 1 − GIoU = 1 + Ac−U
Ac − IoU . In the case
when Bg and Bp do not overlap, i.e. I = 0 and IoU = 0,
GIoU loss simpliﬁes to LGIoU = 1 + Ac−U
Ac = 2 − U
Ac .
In this case, by minimizing LGIoU , we actually maximize
the term U
Ac . This term is a normalized measure between 0
and 1, i.e. 0 ≤ U
Ac ≤ 1, and is maximized when the area
of the smallest enclosing box Ac is minimized while the
union U = Ag + Ap, or more precisely the area of predicted
bounding box Ap, is maximized. To accomplish this, the
vertices of the predicted bounding box Bp should move in
a direction that encourages Bg and Bp to overlap, making
IoU 6= 0.

been provided in their own sections.
PASCAL VOC 2007: The Pascal Visual Object Classes
(VOC) [4] benchmark is one of the most widely used
datasets for classiﬁcation, object detection and semantic
segmentation. It consists of 9963 images with a 50/50 split
for training and test, where objects from 20 pre-deﬁned
categories have been annotated with bounding boxes.
image
MS COCO: Another popular benchmark for
captioning,
recognition, detection and segmentation is
the more recent Microsoft Common Objects in Context
(MS-COCO) [14]. The COCO dataset consists of over
200,000 images across train, validation and test sets with
over 500,000 annotated object instances from 80 categories.

In this paper, we adopt

Evaluation protocol.
the
same performance measure as the MS COCO 2018
Challenge [14] to report all our results. This includes
the calculation of mean Average precision (mAP) over
different class labels for a speciﬁc value of IoU threshold
in order to determine true positives and false positives.
The main performance measure used in this benchmark is
shown by AP, which is averaging mAP across different
value of IoU thresholds, i.e. IoU = {.5, .55, · · · , .95}.
Additionally, we modify this evaluation script to use GIoU
instead of IoU as a metric to decide about true positives
and false positives. Therefore, we report another value for
AP by averaging mAP across different values of GIoU
thresholds, GIoU = {.5, .55, · · · , .95}. We also report the
mAP value for IoU and GIoU thresholds equal to 0.75,
shown as AP75 in the tables.

All detection baselines have also been evaluated using
the test set of the MS COCO 2018 dataset, where the an-
notations are not accessible for the evaluation. Therefore in
this case, we are only able to report results using the stan-
dard performance measure, i.e. IoU .

4. Experimental Results

4.1. YOLO v3

We evaluate our new bounding box regression loss
LGIoU by incorporating it into the most popular 2D object
detectors such as Faster R-CNN [22], Mask R-CNN [6]
and YOLO v3 [21]. To this end, we replace their default
regression losses with LGIoU , i.e. we replace ℓ1-smooth in
Faster /Mask-RCNN [22, 6] and MSE in YOLO v3 [21].
We also compare the baseline losses against LIoU

4.

Dataset. We train all detection baselines and report
all the results on two standard object detection benchmarks,
i.e. the PASCAL VOC [4] and the Microsoft Common
Objects in Context (MS COCO) [14] challenges. The
details of their training protocol and their evaluation have

4All source codes including the evaluation scripts, the training codes,
trained models and all loss implementations in PyTorch, TensorFlow and
darknet are available at: https://giou.stanford.edu.

Training protocol. We used the original Darknet imple-
mentation of YOLO v3 released by the authors 5. For base-
line results (training using MSE loss), we used DarkNet-
608 as backbone network architecture in all experiments
and followed exactly their training protocol using the re-
ported default parameters and the number of iteration on
each benchmark. To train YOLO v3 using IoU and GIoU
losses, we simply replace the bounding box regression MSE
loss with LIoU and LGIoU losses explained in Alg. 2. Con-
sidering the additional MSE loss on classiﬁcation and since
we replace an unbounded distance loss such as MSE dis-
tance with a bounded distance, e.g. LIoU or LGIoU , we
need to regularize the new bounding box regression against
the classiﬁcation loss. However, we performed a very min-
imal effort to regularize these new regression losses against

5Available at: https://pjreddie.com/darknet/yolo/

662

Table 1. Comparison between the performance of YOLO v3 [21] trained
using its own loss (MSE) as well as LIoU and LGIoU losses. The results
are reported on the test set of PASCAL VOC 2007.

Table 2. Comparison between the performance of YOLO v3 [21] trained
using its own loss (MSE) as well as LIoU and LGIoU losses. The results
are reported on 5K of the 2014 validation set of MS COCO.

AP

AP75

Loss (cid:14) Evaluation

AP

AP75

Loss (cid:14) Evaluation

MSE [21]

IoU

.461

LIoU

.466
Relative improv % 1.08%
.477

LGIoU

GIoU

.451

.460
2.02%
.469

IoU

.486

.504
3.70%
.513

GIoU

.467

.498
6.64%
.499

Relative improv % 3.45% 4.08%

5.56% 6.85%

the MSE classiﬁcation loss.

PASCAL VOC 2007. Following the original code’s
training protocol, we trained the network using each loss
on both training and validation set of the dataset up to 50K
iterations. Their performance using the best network model
for each loss has been evaluated using the PASCAL VOC
2007 test and the results have been reported in Tab. 1.

Considering both standard IoU based and new GIoU
based performance measures, the results in Tab. 1 show
that training YOLO v3 using LGIoU as regression loss can
considerably improve its performance compared to its own
regression loss (MSE). Moreover, incorporating LIoU as
regression loss can slightly improve the performance of
YOLO v3 on this benchmark. However, the improvement is
inferior compared to the case where it is trained by LGIoU .
MS COCO. Following the original code’s training pro-
tocol, we trained YOLO v3 using each loss on both the
training set and 88% of the validation set of MS COCO
2014 up to 502k iterations. Then we evaluated the re-
sults using the remaining 12% of the validation set and re-
ported the results in Tab. 2. We also compared them on
the MS COCO 2018 Challenge by submitting the results to
the COCO server. All results using the IoU based perfor-
mance measure are reported in Tab. 3. Similar to the PAS-
CAL VOC experiment, the results show consistent improve-
ment in performance for YOLO v3 when it is trained using
LGIoU as regression loss. We have also investigated how
each component, i.e. bounding box regression and classiﬁ-
cation losses, contribute to the ﬁnal AP performance mea-

0.8

0.75

0.7

U
o
I
 

y
c
a
r
u
c
c
A

0.65

0

30

25

20

15

10

s
s
o
L
 
s
s
a
l
C

5

0

IoU loss
GIoU loss
YOLO loss

1

2

3

Training Iteration

4
5
10

IoU loss
GIoU loss
YOLO loss

1

2

3

Training Iteration

4
5

10

(a)

(b)

Figure 3. The classiﬁcation loss and accuracy (average IoU )
against training iterations when YOLO v3 [21] was trained using
its standard (MSE) loss as well as LIoU and LGIoU losses.

MSE [21]

IoU

0.314

GIoU

0.302

LIoU

0.322
Relative improv % 2.55%
0.335

0.313
3.64%
0.325
Relative improv % 6.69% 7.62%

LGIoU

IoU

0.329

GIoU

0.317

0.335
0.345
5.68%
4.86%
0.359
0.348
9.12% 9.78%

Table 3. Comparison between the performance of YOLO v3 [21] trained
using its own loss (MSE) as well as using LIoU and LGIoU losses. The
results are reported on the test set of MS COCO 2018.
AP75

Loss (cid:14) Evaluation

AP

MSE [21]

.314

LIoU

.321
Relative improv % 2.18%
.333

LGIoU

.333

.348
4.31%
.362

Relative improv % 5.71% 8.01%

sure. We believe the localization accuracy for YOLO v3
signiﬁcantly improves when LGIoU loss is used (Fig. 3 (a)).
However, with the current naive tuning of regularization pa-
rameters, balancing bounding box loss vs. classiﬁcation
loss, the classiﬁcation scores may not be optimal, compared
to the baseline (Fig. 3 (b)). Since AP based performance
measure is considerably affected by small classiﬁcation er-
ror, we believe the results can be further improved with a
better search for regularization parameters.

4.2. Faster R CNN and Mask R CNN

Training protocol. We used the latest PyTorch imple-
mentations of Faster R-CNN [22] and Mask R-CNN [6] 6,
released by Facebook research. This code is analogous to
the original Caffe2 implementation 7. For baseline results
(trained using ℓ1-smooth), we used ResNet-50 the backbone
network architecture for both Faster R-CNN and Mask R-
CNN in all experiments and followed their training proto-
col using the reported default parameters and the number of
iteration on each benchmark. To train Faster R-CNN and
Mask R-CNN using IoU and GIoU losses, we replaced
their ℓ1-smooth loss in the ﬁnal bounding box reﬁnement
stage with LIoU and LGIoU losses explained in Alg. 2. Sim-
ilar to the YOLO v3 experiment, we undertook minimal ef-
fort to regularize the new regression loss against the other
losses such as classiﬁcation and segmentation losses. We
simply multiplied LIoU and LGIoU losses by a factor of 10
for all experiments.

PASCAL VOC 2007. Since there is no instance mask
annotation available in this dataset, we did not evaluate
Mask R-CNN on this dataset. Therefore, we only trained
Faster R-CNN using the aforementioned bounding box re-

6https://github.com/roytseng-tw/Detectron.pytorch
7https://github.com/facebookresearch/Detectron

663

P
A
m

0.6

0.5

0.4

0.3

0.2

0.1

0
0.5

IoU loss
GIoU loss
Default loss

0.6

0.7

0.8

0.9

1

IoU Threshold

Figure 4. mAP value against different IoU thresholds, i.e. .5 ≤
IoU ≤ .95, for Faster R-CNN trained using ℓ1-smooth (green),
LIoU (blue) and LGIoU (red) losses.

gression losses on the training set of the dataset for 20k iter-
ations. Then, we searched for the best-performing model on
the validation set over different parameters such as the num-
ber of training iterations and bounding box regression loss
regularizer. The ﬁnal results on the test set of the dataset
have been reported in Tab. 4.

According to both standard IoU based and new GIoU
based performance measure, the results in Tab. 4 show that
training Faster R-CNN using LGIoU as the bounding box
regression loss can consistently improve its performance
compared to its own regression loss (ℓ1-smooth). More-
over, incorporating LIoU as the regression loss can slightly
improve the performance of Faster R-CNN on this bench-
mark. The improvement is inferior compared to the case
where it is trained using LGIoU , see Fig. 4, where we vi-
sualized different values of mAP against different value of
IoU thresholds, i.e. .5 ≤ IoU ≤ .95.

MS COCO. Similarly, we trained both Faster R-CNN
and Mask R-CNN using each of the aforementioned bound-
ing box regression losses on the MS COCO 2018 training
dataset for 95K iterations. The results for the best model on
the validation set of MS COCO 2018 for Faster R-CNN and
Mask R-CNN have been reported in Tables 5 and 7 respec-
tively. We have also compared them on the MS COCO 2018
Challenge by submitting their results to the COCO server.
All results using the IoU based performance measure are
also reported in Tables 6 and 8.

Table 4. Comparison between the performance of Faster R-CNN [22]
trained using its own loss (ℓ1-smooth) as well as LIoU and LGIoU losses.
The results are reported on the test set of PASCAL VOC 2007.

Loss (cid:14) Evaluation

ℓ1-smooth [22]

IoU

.370

LIoU

.384
Relative improv. % 3.78%
.392

LGIoU

AP

AP75

GIoU

.361

.375
3.88%
.382

IoU

.358

.395

GIoU

.346

.382

10.34%

10.40%

.404

.395

Relative improv. % 5.95% 5.82%

12.85% 14.16%

Table 5. Comparison between the performance of Faster R-CNN [22]
trained using its own loss (ℓ1-smooth) as well as LIoU and LGIoU losses.
The results are reported on the validation set of MS COCO 2018.

Loss (cid:14) Evaluation

ℓ1-smooth [22]

LIoU

Relative improv.%

LGIoU

AP

AP75

IoU

.360

.368
2.22%
.369

GIoU

.351

.358
1.99%
.360

IoU

.390

.396
1.54%
.398

GIoU

.379

.385
1.58%
.388

Relative improv. % 2.50% 2.56%

2.05% 2.37%

Table 6. Comparison between the performance of Faster R-CNN [22]
trained using its own loss (ℓ1-smooth) as well as LIoU and LGIoU losses.
The results are reported on the test set of MS COCO 2018.

Loss (cid:14) Metric

ℓ1-smooth [22]

AP

.364

AP75

.392

LIoU

.403
Relative improv.% 2.47% 2.81%
.404

.373

.373

LGIoU

Relative improv.% 2.47% 3.06%

Table 7. Comparison between the performance of Mask R-CNN [6]
trained using its own loss (ℓ1-smooth) as well as LIoU and LGIoU losses.
The results are reported on the validation set of MS COCO 2018.

Loss (cid:14) Evaluation

ℓ1-smooth [6]

LIoU

Relative improv.%

LGIoU

AP

AP75

IoU

.366

.374
2.19%
.376

GIoU

.356

.364
2.25%
.366

IoU

.397

.404
1.76%
.405

GIoU

.385

.393
2.08%
.395

Relative improv. % 2.73% 2.81%

2.02% 2.60%

Table 8. Comparison between the performance of Mask R-CNN [6]
trained using its own loss (ℓ1-smooth) as well as LIoU and LGIoU losses.
The results are reported on the test set of MS COCO 2018.

Loss (cid:14) Metric

ℓ1-smooth [6]

AP

.368

AP75

.399

LIoU

.408
Relative improv.% 2.45% 2.26%
.409

.377

.377

LGIoU

Relative improv.% 2.45% 2.51%

Similar to the above experiments, detection accuracy
improves by using LGIoU as regression loss over ℓ1-
smooth [22, 6]. However, the amount of improvement be-
tween different losses is less than previous experiments.
This may be due to several factors. First, the detection an-
chor boxes on Faster R-CNN [22] and Mask R-CNN [6] are
more dense than YOLO v3 [21], resulting in less frequent
scenarios where LGIoU has an advantage over LIoU such
as non-overlapping bounding boxes. Second, the bound-
ing box regularization parameter has been naively tuned
on PASCAL VOC, leading to sub-optimal result on MS
COCO [14].

664

Figure 5. Example results from COCO validation using YOLO v3 [21] trained using (left to right) LGIoU , LIoU , and MSE losses. Ground
truth is shown by a solid line and predictions are represented with dashed lines.

Figure 6. Two example results from COCO validation using Mask R-CNN [6] trained using (left to right) LGIoU , LIoU , ℓ1-smooth losses.
Ground truth is shown by a solid line and predictions are represented with dashed lines.

5. Conclusion

In this paper, we introduced a generalization to IoU as
a new metric, namely GIoU , for comparing any two arbi-
trary shapes. We showed that this new metric has all of
the appealing properties which IoU has while addressing
its weakness. Therefore it can be a good alternative in all
performance measures in 2D/3D vision tasks relying on the
IoU metric.

We also provided an analytical solution for calculating
GIoU between two axis-aligned rectangles. We showed
that the derivative of GIoU as a distance can be computed
and it can be used as a bounding box regression loss. By in-
corporating it into the state-of-the art object detection algo-
rithms, we consistently improved their performance on pop-
ular object detection benchmarks such as PASCAL VOC
and MS COCO using both the commonly used performance
measures and also our new accuracy measure, i.e. GIoU
based average precision. Since the optimal loss for a metric
is the metric itself, our GIoU loss can be used as the opti-
mal bounding box regression loss in all applications which
require 2D bounding box regression.

In the future, we plan to investigate the feasibility of de-
riving an analytic solution for GIoU in the case of two ro-
tating rectangular cuboids. This extension and incorporat-
ing it as a loss could have great potential to improve the
performance of 3D object detection frameworks.

References

[1] H. Alhaija, S. Mustikovela, L. Mescheder, A. Geiger, and
C. Rother. Augmented reality meets computer vision: Efﬁ-
cient data generation for urban driving scenes. International
Journal of Computer Vision (IJCV), 2018. 2

[2] M. Cordts, M. Omran, S. Ramos, T. Rehfeld, M. Enzweiler,
R. Benenson, U. Franke, S. Roth, and B. Schiele. The
cityscapes dataset for semantic urban scene understanding.
In Proc. of the IEEE Conference on Computer Vision and
Pattern Recognition (CVPR), 2016. 2

[3] J. Dai, Y. Li, K. He, and J. Sun. R-fcn: Object detection
via region-based fully convolutional networks. In Advances
in neural information processing systems, pages 379–387,
2016. 3

[4] M. Everingham, L. Van Gool, C. K. I. Williams, J. Winn, and
A. Zisserman. The pascal visual object classes (voc) chal-

665

lenge. International Journal of Computer Vision, 88(2):303–
338, June 2010. 2, 5

ceedings of the IEEE conference on computer vision and pat-
tern recognition, pages 779–788, 2016. 2, 3

[5] R. Girshick, J. Donahue, T. Darrell, and J. Malik. Rich fea-
ture hierarchies for accurate object detection and semantic
segmentation.
In Proceedings of the IEEE conference on
computer vision and pattern recognition, pages 580–587,
2014. 2, 3

[6] K. He, G. Gkioxari, P. Doll´ar, and R. Girshick. Mask r-cnn.
In Computer Vision (ICCV), 2017 IEEE International Con-
ference on, pages 2980–2988. IEEE, 2017. 1, 5, 6, 7, 8

[7] K. He, X. Zhang, S. Ren, and J. Sun. Deep residual learn-
ing for image recognition. In Proceedings of the IEEE con-
ference on computer vision and pattern recognition, pages
770–778, 2016. 3

[8] B. Jiang, R. Luo, J. Mao, T. Xiao, and Y. Jiang. Acquisi-
tion of localization conﬁdence for accurate object detection.
In Proceedings, European Conference on Computer Vision
(ECCV) workshops, 2018. 3

[9] S. Kosub. A note on the triangle inequality for the jaccard

distance. arXiv preprint arXiv:1612.02696, 2016. 3

[10] M. Kristan and et al. The visual object tracking vot2016
challenge results. In Proceedings, European Conference on
Computer Vision (ECCV) workshops, pages 777–823, 8Oct.
2016. 2

[11] L. Leal-Taix´e, A. Milan,

I. D. Reid, S. Roth, and
K. Schindler. Motchallenge 2015: Towards a benchmark for
multi-target tracking. CoRR, abs/1504.01942, 2015. 2

[12] T.-Y. Lin, P. Doll´ar, R. Girshick, K. He, B. Hariharan, and
S. Belongie. Feature pyramid networks for object detection.
In Computer Vision and Pattern Recognition (CVPR), 2017
IEEE Conference on, pages 936–944. IEEE, 2017. 3

[13] T.-Y. Lin, P. Goyal, R. Girshick, K. He, and P. Doll´ar. Focal
loss for dense object detection. IEEE transactions on pattern
analysis and machine intelligence, 2018. 1, 3

[14] T.-Y. Lin, M. Maire, S. Belongie, J. Hays, P. Perona, D. Ra-
manan, P. Doll´ar, and C. L. Zitnick. Microsoft coco: Com-
mon objects in context. In European conference on computer
vision, pages 740–755. Springer, 2014. 2, 5, 7

[15] S. Liu, L. Qi, H. Qin, J. Shi, and J. Jia. Path aggregation
network for instance segmentation.
In Proceedings of the
IEEE Conference on Computer Vision and Pattern Recogni-
tion, pages 8759–8768, 2018. 1

[16] W. Liu, D. Anguelov, D. Erhan, C. Szegedy, S. Reed, C.-
Y. Fu, and A. C. Berg. Ssd: Single shot multibox detector.
In European conference on computer vision, pages 21–37.
Springer, 2016. 3

[17] M. B. A. R. T. Matthew and B. Blaschko. The lov´asz-
softmax loss: A tractable surrogate for the optimization of
the intersection-over-union measure in neural networks. In
Proc. of the IEEE Conference on Computer Vision and Pat-
tern Recognition (CVPR), 2018. 3

[18] M. A. Rahman and Y. Wang. Optimizing intersection-over-
union in deep neural networks for image segmentation. In
International Symposium on Visual Computing, pages 234–
244, 2016. 3

[19] J. Redmon, S. Divvala, R. Girshick, and A. Farhadi. You
only look once: Uniﬁed, real-time object detection. In Pro-

[20] J. Redmon and A. Farhadi. Yolo9000: Better, faster, stronger.

arXiv preprint arXiv:1612.08242, 2016. 3

[21] J. Redmon and A. Farhadi. Yolov3: An incremental improve-

ment. arXiv, 2018. 3, 5, 6, 7, 8

[22] S. Ren, K. He, R. Girshick, and J. Sun. Faster r-cnn: Towards
real-time object detection with region proposal networks. In
Advances in neural information processing systems, pages
91–99, 2015. 2, 3, 5, 6, 7

[23] J. R. Uijlings, K. E. Van De Sande, T. Gevers, and A. W.
Smeulders. Selective search for object recognition.
Inter-
national journal of computer vision, 104(2):154–171, 2013.
3

[24] J. Yu, Y. Jiang, Z. Wang, Z. Cao, and T. Huang. Unitbox:
An advanced object detection network.
In Proceedings of
the 2016 ACM on Multimedia Conference, pages 516–520.
ACM, 2016. 2, 3

[25] B. Zhou, H. Zhao, X. Puig, S. Fidler, A. Barriuso, and A. Tor-
ralba. Scene parsing through ade20k dataset.
In Proceed-
ings of the IEEE Conference on Computer Vision and Pattern
Recognition, 2017. 2

666

