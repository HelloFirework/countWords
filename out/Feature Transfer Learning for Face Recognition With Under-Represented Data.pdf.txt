Feature Transfer Learning for Face Recognition with Under-Represented Data

Xi Yin†∗, Xiang Yu‡, Kihyuk Sohn‡, Xiaoming Liu† and Manmohan Chandraker§‡

†Michigan State University
‡ NEC Laboratories America

§University of California, San Diego

{yinxi1,liuxm}@cse.msu.edu, {xiangyu,ksohn,manu}@nec-labs.com

Abstract

Despite the large volume of face recognition datasets,
there is a signiﬁcant portion of subjects, of which the sam-
ples are insufﬁcient and thus under-represented. Ignoring
such signiﬁcant portion results in insufﬁcient training data.
Training with under-represented data leads to biased classi-
ﬁers in conventionally-trained deep networks. In this paper,
we propose a center-based feature transfer framework to
augment the feature space of under-represented subjects
from the regular subjects that have sufﬁciently diverse sam-
ples. A Gaussian prior of the variance is assumed across
all subjects and the variance from regular ones are trans-
ferred to the under-represented ones. This encourages the
under-represented distribution to be closer to the regular
distribution. Further, an alternating training regimen is pro-
posed to simultaneously achieve less biased classiﬁers and
a more discriminative feature representation. We conduct
ablative study to mimic the under-represented datasets by
varying the portion of under-represented classes on the MS-
Celeb-1M dataset. Advantageous results on LFW, IJB-A and
MS-Celeb-1M demonstrate the effectiveness of our feature
transfer and training strategy, compared to both general
baselines and state-of-the-art methods. Moreover, our fea-
ture transfer successfully presents smooth visual interpola-
tion, which conducts disentanglement to preserve identity of
a class while augmenting its feature space with non-identity
variations such as pose and lighting.

1. Introduction

Face recognition is one of the ongoing success stories in
the deep learning era, yielding very high accuracy on several
benchmarks [12, 20, 21]. However, it remains undetermined
how deep learning classiﬁers for ﬁne-grained recognition
are trained to maximally exploit real-world data. While
it is known that recognition engines are data-hungry and

∗Main part of the work is done when Xi was an intern at NEC Laborato-

ries America.

800 

600 

400 

200 

 
s
e
g
a
m

i
 

#

0 
0 
0

 

m
r
o
n

 
t
h
g
i
e
w

 
r
e
i
f
i
s
s
a
l
c

1.2 

1.0 

0.8 

0.6 

norm varies 

0.4 
0 
0

1008 

5000

class ID 
(b)
( )

10449 
10000

5000

class ID 
(a)
( )

10000 
10000

(c)

(d)

Figure 1. Illustration of the UR data problem and our proposed
solution. (a) The data distribution of CASIA-WebFace dataset [47].
(b) Classiﬁer weight norm varies across classes in proportion to
their volume. (c) Weight norm for regular class 1008 is larger than
UR class 10449, causing a bias in the decision boundary (dashed
line) towards ID 10449. (d) Data re-sampling solves the classiﬁer
bias to some extent. However, the variance of ID 1008 is much
larger than ID 10449. We augment the feature space of ID 1008
(dashed ellipsoid) and propose improved training strategies, which
corrects the classiﬁer bias and learns a better feature representation.

keep improving with more volume, mechanisms to derive
beneﬁts from the vast diverse data are relatively unexplored.
In particular, as discussed by [18], there is a non-negligible
part of data that is under-represented (UR), where only a few
samples are available for each class.

It is evident that classiﬁers that ignore this UR data
likely imbibe hidden biases. Consider CASIA-Webface [47]
dataset as an example (Figure 1 (a)). About 39% of the 10K
subjects have less than 20 images. A simple solution is to
discard the UR classes, which results in insufﬁcient training
data. Besides reduction in the volume of data, the inherently
uneven sampling leads to bias in the weight norm distribu-
tion across regular and UR classes (Figure 1 (b,c)). Sampling

5704

UR classes at a higher frequency alleviates the problem, but
still leads to biased decision boundaries due to insufﬁcient
intra-class variance in UR classes (Figure 1 (d)).

In this paper, we propose Feature Transfer Learning (FTL)
to train less biased face recognition classiﬁers by adapting
the feature distribution of UR classes to mimic that of regular
classes. Our FTL handles such UR classes during training by
augmenting their feature space using a center-based transfer.
In particular, assuming a Gaussian prior on features with
class-speciﬁc mean and the shared variance across regular
and UR classes, we generate new samples of UR classes at
feature space, by transferring the linear combination of the
principal components of variance that are estimated from
regular classes to the UR classes.

Our feature transfer addresses the issue of imbalanced
training data. However, using the transferred data directly for
training is sub-optimal as the transfer might skew the class
distributions. Thus, we propose a training regimen that alter-
nates between carefully designed choices to solve for feature
transfer (with the goal of obtaining a less biased decision
boundary) and feature learning (with the goal of learning a
more discriminative representation) simultaneously. Besides,
we propose a novel and effective metric regularization which
contributes to the general deep training in an orthogonal way.
To study the empirical properties of our method, we con-
struct UR datasets by limiting the number of samples for
various proportions of classes in MS-Celeb-1M [12], and
evaluate on LFW [20], IJB-A [21] and the hold-out test set
from MS-Celeb-1M. We observe that our FTL consistently
improves upon baseline method that does not speciﬁcally
handle UR classes. Advantageous results over state-of-the-
art methods on LFW and IJB-A further conﬁrm the effec-
tiveness of the feature transfer module. Moreover, our FTL
can be applied to low-shot or one-shot scenarios, where a
few samples are available for some classes. Competitive
record on MS-celeb-1M one-shot challenge [11] evidences
the advantage. Finally, we visualize our feature transfer mod-
ule through smooth feature interpolation. It shows that for
our feature representation, identity is preserved while non-
identity aspects are successfully disentangled and transferred
to the target subject.

We summarize our contributions as the following items.
• A center-based feature transfer algorithm to enrich the
distribution of UR classes, leading to diversity without
sacriﬁcing volume. It also leads to an effective disentan-
glement of identity and non-identity representations.

• A two-stage alternative training scheme to achieve a less
biased classiﬁer and retain discriminative power of the
feature representation.

• A simple but effective metric regularization to enhance
performance for both our method and baselines, which is
also applicable to other recognition tasks.

• Extensive ablation experiments demonstrate the effective-

ness of our FTL framework. Combining with the proposed
m-L2 regularization and other orthogonal metric learning
methods, we achieve top performance on LFW and IJB-A.

2. Related Work

Imbalanced data classiﬁcation Classic works study data
re-sampling methods [1, 15], which learn unbiased classi-
ﬁers by changing the sampling frequency. By applying deep
neural networks [16, 22], the frontier of face recognition
research has been signiﬁcantly advanced [24, 32, 42]. How-
ever, there are only few works that discuss about learning
from UR data. Huang et al. [19] propose quintuplet sampling
based hinge loss to maintain both inter-cluster and inter-class
margins. Zhang et al. [50] propose the range loss that si-
multaneously reduces intra-class variance and enlarges the
inter-class variance. However, UR classes are treated in the
same way as regular classes in the above methods. Guo and
Zhang [11] propose UR class promotion loss that regularizes
the norm of weight vectors of UR classes, which can solve
the unbalance issue to some extent. Other than designing
data sampling rules or regularization on UR classes, we aug-
ment UR classes by generating feature-level samples through
transfer of intra-class variance from regular classes, which
solves the fundamental problem of UR data.
One-shot and low-shot learning Low-shot learning aims
at recognizing an image for a speciﬁc class with very few
or even one image available at training. Some efforts are
made by enforcing strong regularization [14] or utilizing non-
parametric classiﬁcation methods based on distance metric
learning [34, 39]. Generative model based methods have
also been studied in recent years. Dixit et al. [9] propose
a data augmentation method using attribute-guided feature
descriptor for generation. The method in [14] proposes non-
parametric generation of features by transferring within class
pair-wise variation from regular classes in object classiﬁca-
tion task. Compared to their task on ImageNet [30] with
1K classes, face recognition is a ﬁne-grained classiﬁcation
problem that incorporates at least two orders of magnitude
more classes with low inter-class variance.
Feature transfer learning Transfer learning applies infor-
mation from a known domain to an unknown one [3, 4]. We
refer to [27] for further discussion. Attributes are used in [9]
to synthesize feature-level data. In [35], features are trans-
ferred from web images to video frames via a generative
adversarial network (GAN) [10]. Our method shares the
same ﬂavor in terms of feature transfer concept. However,
compared to [35], no additional supervision is provided in
our method as it may introduce new bias. We model the
intra-class variance in a parametric way, assuming the regu-
lar classes and UR classes share the same feature variance
distribution. By transferring this shared variance, we transfer
sample features from regular classes to UR classes.

5705

Enc
EncEncEnc

Dec

GG

(cid:99)x

R
RRRR

(cid:54)(cid:87)(cid:68)(cid:74)(cid:72)(cid:3)(cid:20)(cid:29)

FC

x

g

c(cid:20)c
c

c(cid:21)cc

(cid:54)(cid:87)(cid:68)(cid:74)(cid:72)(cid:3)(cid:21)(cid:29)

f

w(cid:20)

w(cid:20)

w(cid:21)

(cid:71)(cid:72)(cid:70)(cid:76)(cid:86)(cid:76)(cid:82)(cid:81)(cid:3)(cid:69)(cid:82)(cid:88)(cid:81)(cid:71)(cid:68)(cid:85)(cid:92) (cid:85)(cid:72)(cid:86)(cid:75)(cid:68)(cid:83)(cid:72)
w(cid:20)

w(cid:20)
w(cid:20)

w(cid:21)

(cid:70)(cid:82)(cid:80)(cid:83)(cid:68)(cid:70)(cid:87)(cid:3)(cid:73)(cid:72)(cid:68)(cid:87)(cid:88)(cid:85)(cid:72)(cid:3)(cid:79)(cid:72)(cid:68)(cid:85)(cid:81)(cid:76)(cid:81)(cid:74)

w(cid:21)

w(cid:21)

Figure 2. Overview of our proposed FTL framework. It consists of a feature extractor Enc, a decoder Dec, a feature ﬁlter R, a fully
connected layer as classiﬁer F C, and a feature transfer module G. The network is trained with an alternating bi-stage strategy. At stage 1
(solid arrows), we ﬁx Enc and apply feature transfer G to generate new feature samples (blue triangles) that are more diverse to reshape the
decision boundary. In stage 2 (dashed arrows), we ﬁx the rectiﬁed classiﬁer F C, and update all the other models. As a result, the samples
that are originally on or across the boundary are pushed towards their center (blue arrows in bottom right). Best viewed in color.

3. The Proposed Approach

decision boundary bias problem.

In this section, we ﬁrst introduce the problems caused
by training with UR classes for face recognition (Sec. 3.1).
Then, we present the recognition backbone framework with
our proposed metric regularization (Sec. 3.2), our proposed
feature transfer framework (Sec. 3.3), and the alternating
training scheme to solve these problems (Sec. 3.4).

3.1. Limitations of Training with UR Classes

A recent work [50] shows that directly learning face rep-
resentation with UR classes results in degraded performance.
To demonstrate the problems of training with UR classes,
we train a network (CASIA-Net) on CASIA-Webface [47],
of which the data distribution is shown in Figure 1 (a).
We mainly observe two issues: (1) wildly variant classi-
ﬁer weight norms; and (2) imbalanced intra-class variances
between regular and UR classes.
Imbalance on classiﬁer weight norm As shown in Figure 1
(b), the norms of the classiﬁer weights (i.e., the weights in the
last fully connected layer) of regular classes are much larger
than those of UR classes, which causes the decision boundary
biases towards the UR classes [11]. This is because the
much larger volume of regular classes lead to more frequent
weight updates than those of UR classes. To alleviate this
problem, there are typical solutions such as data re-sampling
or weight normalization [11]. However, such strategies can
not solve the fundamental problem of lacking sufﬁcient and
diversiﬁed samples in UR classes, which is demonstrated in
the following.
Imbalance on intra-class variance As an illustrative ex-
ample, we randomly pick two classes, one regular class
(ID=1008) and one UR class (ID=10449). We visualize
the features from two classes projected onto 2D space us-
ing t-SNE [38] in Figure 1(c). Further, the feature space
after weight norm regularization is shown in Figure 1(d).
Although the weight norms are regularized to be similar,
the low intra-class variance of the UR class still causes the

Based on these observations, we posit that enlarging the
intra-class variance for UR classes is the key to alleviate
these imbalance issues. Therefore, we propose a feature
transfer learning approach that generates extra samples for
UR classes to enlarge the intra-class variance. As illustrated
in Figure 1(d), the feature distribution augmented by the
virtual samples (blue triangles) helps to rectify the classiﬁer
decision boundary and learn a better representation.

3.2. The Proposed Framework

Most recent success in deep face recognition works on
novel losses or regularizations [7, 24, 31, 32, 34], which aim
at improving model generalization. In contrast, our method
focuses on enlarging intra-class variance of UR classes by
transferring knowledge from regular classes. At ﬁrst glance,
our goal of diversifying features seems to contradict with
the general premise of face recognition frameworks, i.e.,
pursuing compact features. In fact, we enlarge the intra-class
variance of UR classes at a lower level feature space, which
we term as rich-feature layer [13]. The subsequent ﬁltering
layers will learn a more discriminative representation.

As illustrated in Figure 2, the proposed framework is
composed of several modules including an encoder, decoder,
feature transfer module followed by ﬁltering module and
a classiﬁer layer. An encoder Enc computes rich features
g = Enc(x) ∈ R320 from an input image x ∈ R100×100
and reconstructs the input with a decoder Dec, i.e., x′ =
Dec(g) = Dec(Enc(x)) ∈ R100×100. This pathway is
trained with the following pixel-wise reconstruction loss:

Lrecon = (cid:3)x′ − x(cid:3)2
2.

(1)

The reconstruction loss allows g to contain diverse non-
identity variations such as pose, expression, and lighting.
Therefore, we denote g as the rich feature space.

A ﬁltering network R is applied to generate discriminative
identity features f = R(g) ∈ R320 that are fed to a linear
classiﬁer layer F C with weight matrix W = [wj]Nc
j=1 ∈

5706

Figure 3. Visualization of samples closest to the feature center of classes with most number of images (left) and classes with least number of
images (right). We ﬁnd that near-frontal close-to-neutral faces are the nearest neighbors of the feature centers of regular classes. However,
the nearest neighbors of the feature centers of UR classes still contain pose and expression variations. Features are extracted by VGGFace
model [28] and samples are from CASIA-WebFace dataset.

RNc×320 where Nc is the total number of classes. This
pathway optimizes the softmax loss:

Lsf mx = − log

exp(wT

yi f )
exp(wT

(cid:2)Nc

j

j f )

,

(2)

where yi is the ground-truth identity label of x.

Note that softmax loss is scale-dependent where the loss
can be made arbitrarily small by scaling the norm of the
weights wj or features f . Typical solutions to prevent this
problem are to either regularize the norm of weights1 or
features, or to normalize both of them [40]. However, we
argue that these methods are too stringent since they penalize
norms of individual weights and features without considering
their compatibility. Instead, we propose to regularize the
norm of the output of F C as following:

Lreg = (cid:3)WT f (cid:3)2
2.

(3)

We term the proposed regularization as metric L2 or m-
L2 regularization. As will shown in the experiment, joint
regularization on weights and features works better than
individual regularization.

Finally, we formulate the training loss in Eqn. (4), with
the following coefﬁcients αsf mx = αrecon = 1, αreg = 0.25
unless otherwise stated:

L = αsf mxLsf mx + αreconLrecon + αregLreg.

(4)

3.3. Feature Transfer for UR Classes

Following the Joint Bayesian face model [2], we assume
that the rich feature gik from class i lies in a Gaussian distri-
bution with a class mean ci and a covariance matrix Σi. The
class mean or center is estimated as an arithmetic average
over all features from the same class. As shown in the left
of Figure 3, the center representation of regular classes is
identity-speciﬁc while removing non-identity factors such as
pose, expression and illumination. However, as in the right
of Figure 3, due to the lack of samples, the center estimation
of UR classes is not accurate and often biased towards cer-
tain identity-irrelevant factors like pose, which we ﬁnd to be
dominant in practice.

1http://ufldl.stanford.edu/wiki/index.php/

Softmax_Regression#Weight_Decay

To improve the quality of center estimation for UR classes,
we discard samples with extreme pose variation. Further-
more, we consider averaging features from both the original
and horizontally ﬂipped images. With ¯gik ∈ R320 denoting
the rich feature extracted from the ﬂipped image, the feature
center is estimated as follows:

ci=

1
2|Ωi| (cid:3)

k∈Ωi

(gik+¯gik), Ωi={k | |pik|+|¯pik| ≤ τ }, (5)

where pik and ¯pik are the estimated poses of the original and
ﬂipped images, respectively. By bounding the summation,
we expect the yaw angle pik to be an inlier.

To transfer the intra-class variance from regular classes
to UR classes, we assume the covariance matrices are shared
across all classes, i.e., Σi = Σ. In theory, one can draw
feature samples of UR classes by adding a noise vector
 ∼ N (0, Σ) to its center ci. However, the direction of the
noise vector might be too random and does not reﬂect the
true factors of variations found in the regular classes. There-
fore, we transfer the intra-class variance evaluated from the
samples of regular classes. First, we calculate the covariance
matrix V via:

V =

Nc

mi

(cid:3)

(cid:3)

i=1

k=1

(gik − ci)T (gik − ci)

(6)

where mi is the total number of samples for class i. We
perform PCA to decompose V into major components and
take the ﬁrst 150 Eigenvectors as Q ∈ R320×150, which
preserves 95% energy. Our center-based feature transfer is
achieved via:

˜gik = ci + QQT (gjk − cj),

(7)

where gjk and cj are the feature-level sample and the center
of a regular class j. ci is the feature center of an UR class
i and ˜gik is the transferred features for class i. Here, ˜gik
preserves the same identity as ci, with similar intra-class vari-
ance as gjk. By sufﬁciently sampling gjk across different
regular classes, we expect to obtain an enriched distribution
of the UR class i, which consists of both the original features
gik and the transferred features ˜gik.

5707

Stage 1: Decision boundary reshape.

Fixed models: Enc and Dec.
Training models: R and F C, using Eqn. 2 and 3.
Init [C, Q, h] = UpdateStats(), Niter = # iterations.
for i = 1, . . . , Niter do

Train 1st batch sampled from h in Dreg: {xr, yr}.
Train 2nd batch sampled from DU R: {xu, yu}.
Feature transfer: ˜gu = Transfer(xr, yr, yu).
Train 3rd batch: {˜gu, yu}.

Stage 2: Compact feature learning.

Fixed models: F C.
Training models: Enc, Dec, and R, using Eqn. 4.
for i = 1, . . . , Niter do

train batch sampled from D: {x, y}.

Alternate stage 1 and 2 every Niter until convergence.

Function [C, Q, h] = UpdateStats()
Init C = [], V = [], h = [], mi = #samples in class i,
Nc = # classes, Ns = # samples in each batch.
for i = 1, . . . , Nc do

for j = 1, . . . , mi do

gij = Enc(xij), ¯gij = Enc(¯xij)

2|Ωi| (cid:2)k∈Ωi (gik + ¯gik)

ci = 1
C.append(ci)
if i in Dreg then

mi (cid:2)k ||gik − ci||2

di = 1
for j = 1, . . . , mi do

V += (gij − ci)T (gij − ci)
if ||gij − ci||2 > di then

h.append([i,j])

Q = PCA(V)
Function ˜gu = Transfer(xr, yr, yu)
gr = Enc(xr)
for k = 1, . . . , Ns do

cj = C(yr
˜gu
k = ci + QQT (gr

k, :), ci = C(yu
k − cj)

k , :)

Algorithm 1: Two-stage alternating training strategy.

3.4. Alternating Training Strategy

Given a training set of both regular and UR classes
D = {Dreg, DU R}, we ﬁrst pre-train all modules M =
{Enc, Dec, R, F C} using Eqn. 4 without feature transfer.
Then, we alternate between the training of the classiﬁer with
our proposed feature transfer method for decision boundary
reshape and learning a more discriminative feature represen-
tation with boundary-corrected classiﬁer. The overview of
our two-stage alternating training process is illustrated in
Algorithm 1, which we describe in more details below.
Stage 1: Decision boundary reshape.
In this stage, we
train R and F C while ﬁxing other modules (the rich feature
space is ﬁxed for stable feature transfer). The goal is to

reshape the decision boundary by transferring features from
regular classes to UR classes. We ﬁrst update the statistics for
each regular class including the feature centers C, PCA basis
Q and an index list h of hard samples whose distances to
the feature centers exceeding the average distance. The PCA
basis Q is achieved by decomposing the covariance matrix
V computed with the samples from all regular classes Dreg.
Three batches are applied for training in each iteration: (1) a
regular batch sampled from hard index list h: {gr, yr}, to
guarantee no degradation in the performance; (2) a UR batch
sampled from UR classes {gu, yu}, to conduct the updating
similar to class-balanced sampling; (3) a transferred batch
{˜gu, yu} by transferring the variances from regular batch to
UR batch, to reshape the decision boundary.
Stage 2: Compact feature learning. In this stage, we train
Enc, Dec and R using normal batches {x, y} from both
regular and UR classes without feature transfer. We keep
F C ﬁxed since it is already updated from the previous stage
with decision boundary correction. The gradient directly
back-propagates to R and Enc to learn a more compact
representation that reduces the violation of crossing rectiﬁed
classiﬁer boundaries. We perform online alternation between
stage 1 and 2 for every Niter iterations until convergence.

4. Experiments

We use MS-Celeb-1M as our training set. Due to label
noise, we adopt a cleaned version from [43] and remove the
classes overlapped with LFW and IJB-A, which results in
4.8M images of 76.5K classes. A class with no more than
20 images is considered as a UR class, following [50]. A
facial key point localization method [49] is applied as the
face alignment and cropping.

We apply an encoder-decoder structure for model Enc
and Dec. Model R consists of a linear layer, two de-
convolution layers, two convolution layers and another linear
layer to obtain f ∈ R320. Detail of the network structure is
referred to the supplementary material. Adam solver with a
learning rate of 2e−4 is used in model pre-training. A learn-
ing rate of 1e−5 is used in stage 1 and 2, which alternate for
every 5K iterations until convergence. The hyper-parameter
setting is determined by an off-line parameter search based
on a hold-out validation set.

4.1. Feature Center Estimation

Feature center estimation is a key step for feature transfer.
To evaluate center estimation for UR classes, 1K regular
classes are selected from MS-Celeb-1M and features are ex-
tracted using a pre-trained recognition model. We randomly
choose a subset of 1, 5, 10, 20 images to mimic an UR class.
Three methods are compared: (1) “PickOne”, randomly pick
one sample as center. (2) “AvgAll”, average features of all
images. (3) “AvgFlip”, proposed method in Eqn. 5. We
compute the error as the difference between the center of

5708

r
o
r
r
e

0.5

0.4

0.3

0.2

0.1

0

PickOne
AvgAll
AvgFlip

(cid:3)(cid:1)
(cid:3)(cid:1)(cid:3)

(cid:3)(cid:1)

(cid:3)(cid:1)

(cid:2)(cid:1)
(cid:2)(cid:1)(cid:2)

1

5
# images

10

20

(a)

0.34 
0 34
0.34 

0.49 
0 490.49 

0.79 
0.79 

1.00 

(b)

Figure 4. (a) Center estimation error comparison. (b) Illustration of
intra- and inter-class variances. Circles from small to large show the
minimum, mean and maximum distances from intra-class samples
to center. Distances are averaged across 1K classes.

n
o
r
u
e
n

 

d
n
2

 
e
h
t
 
f
o

 

n
o
i
t
a
v
i
t
c
A

400

200

8

0

-200

4

5

7

3

9

2

1

6

0

-500

500
Activation of the 1st neuron

0

(a)

40

20

8

0

n
o
r
u
e
n

 

d
n
2

 
e
h
t
 
f
o

 

-20

n
o
i
t
a
v
i
t
c
A

-40

4

5

7

3

2

6

0

9

1

-50

0

50

Activation of the 1st neuron

(b)

Figure 5. Toy example on MNIST to show the effectiveness of our
m-L2 regularization. Figure shows the feature distributions for
models trained without (a) and with (b) m-L2 regularization.

the full set (ground truth) and the subset (estimated), and is
normalized by the inter-class variance.

Results in Figure 4 show that our “AvgFlip” achieves a
smaller error. When compared to the intra-class variance,
the error is fairly small, which suggests that our center esti-
mation is accurate to support the feature transfer.

4.2. Effects of m-L2 Regularization

To study the effects of the proposed m-L2 regularization,
we show a toy example on the MNIST dataset [23]. We use
LeNet++ network (following [42]) to learn a 2D feature
space for better visualization. Two models are compared:
one trained with softmax loss only; the other trained with
softmax loss and m-L2 regularization (αreg = 0.001).

We have the following observations: (1) m-L2 effectively
avoids over-ﬁtting. In Figure 5, the norm of the features in (a)
is much larger than that in (b), as increasing the feature norm
can reduce softmax loss, which may cause over-ﬁtting. (2)
m-L2 enforces a more balanced feature distribution, where
Figure 5 (b) shows a more balanced angular distribution
than that in (a). On the MNIST testing set, the performance
with m-L2 improves sf mx from 99.06% to 99.35%. More-
over, the testing accuracy with m-L2 improves sf mx and
sf mx + L2 from 98.60% and 98.53% to 99.37% on LFW
as in Table 3. Note that m-L2 is a general regularization
which is orthogonal to our main claim in this paper, that can
be easily adapted to other recognition frameworks.

(a)

(b)

Figure 6. Center visualization. (a) one sample image from the
selected class; (b) the decoded image from the feature center.

4.3. Ablation Study

We study the impact of the ratio between the portion of
regular classes and the portion of UR classes on training
a face recognition system. To construct the exact regular
and UR classes, we use the top 60K regular classes, which
contain the most images from MS-Celeb-1M. Further, the
top 10K classes are selected as regular classes which are
shared among all training sets. We regard the 10K and 60K
sets as the lower and upper bounds. Among the rest 50K
classes sorted by the number of images, we select the ﬁrst
10K, 30K and 50K and randomly pick 5 images per class.
In this way, we form the training set of 10K10K, 10K30K,
and 10K50K, of which the ﬁrst 10K are regular and the last
10K or 30K or 50K are called faked UR classes. A hold-out
testing set is formed by selecting 5 images from each of the
shared 10K regular classes and 10K UR classes.

The evaluation on the hold out test set from MS-Celeb-
1M is to mimic low-shot learning, where we use the feature
center from the training images as the gallery and nearest
neighbor (NN) for face matching. The rank-1 accuracy for
both regular and UR classes are reported. We also evaluate
the recognition performance on LFW and IJB-A. The results
are shown in Table 1 and we draw the following observations.

• The rich feature space g is less discriminative than the
feature space f , which validates our intuition that g is rich
in intra-class variance for feature transfer while f is more
discriminative for face recognition.

• The proposed m-L2 regularization boosts the performance

with a large margin over the baseline softmax loss.

• The proposed FTL method consistently improves over

softmax and sfmx+m-L2 with signiﬁcant margins.

• Our method is more beneﬁcial when more UR classes
are used for training as more training data usually lead to
better face recognition performance.

4.4. One-Shot Face Recognition

As our method has tangential relation to low-shot
learning, we evaluate on the MS-celeb-1M one-shot chal-
lenge [11]. The training data consists of a base set with
20K classes each with 50∼100 images and a novel set of 1K
classes each with only 1 image. The test set consists of 1
image per base (regular) class and 5 images per novel (UR)
class. The goal is to evaluate the performance on the novel

5709

Test →

Train↓

Method↓

10K0K

10K10K

10K30K

10K50K

60K0K

sfmx
sfmx+m-L2
sfmx
sfmx+m-L2
FTL (Ours)∗
sfmx
sfmx+m-L2
FTL (Ours)∗
sfmx
sfmx+m-L2
FTL (Ours)∗
sfmx
sfmx+m-L2

LFW

IJB-A: Verif.

IJB-A: Identif.

g

97.15
97.00

–

97.08
96.72

–

97.13
96.87

–

97.32
96.95
97.52
97.90

f

97.45
97.88
97.85
97.85
98.33
97.80
98.08
98.42
97.93
98.10
98.48
98.30
98.85

FAR@.01 @.001

Rank-1

Rank-5

69.39
73.00
72.96
74.07
80.25
74.03
76.92
81.80
72.87
78.52
82.60
82.75
86.38

33.04
44.78
49.22
46.27
54.95
47.93
47.17
61.04
49.04
53.44
62.60
62.33
74.44

81.63
83.77
82.38
83.70
85.88
83.04
84.81
86.08
82.40
84.95
86.53
87.11
89.34

90.35
91.49
90.46
91.74
92.83
91.25
91.93
92.62
91.15
92.17
93.08
93.78
94.65

MS1M: NN
Reg.

UR

87.17
90.21
85.87
89.48
92.27
86.14
90.60
91.76
85.28
90.24
92.08
90.43
93.68

82.47
84.68
85.25
84.10
88.16
85.47
86.40
88.72
84.21
87.11
89.36
89.54
93.46

Table 1. Controlled experiments by varying the ratio between regular and UR classes in training sets. FTL (Ours)∗: model trained on subsets.

Method

Ext #Models

Base

MCSM [45]
YES
Cheng et al. [5] YES
Choe et al. [6]
NO
UP [11]
NO
Hybrid [44]
NO
NO
DM [33]
FTL (Ours)
NO

3
4
1
1
2
1
1

–

99.74

≥ 95.00

99.80
99.58

–

99.21

Novel

61.0
100
11.17
77.48
92.64
73.86
92.60

Table 2. Comparison on one-shot learning challenge. Result on
base classes are reported as rank-1 accuracy and on novel classes
as Coverage@Precision = 0.99. “Ext” means “External Data”.

Method

Acc

Method

L-Softmax [25]
VGG Face [28]
DeepID2 [36]
NormFace [40]
CenterLoss [42]
SphereFace [24]
RangeLoss [50]

98.71
98.95
99.15
99.19
99.28
99.42
99.53

ArcFace [8]
FaceNet [32]
CosFace [41]
sfmx
sfmx + L2
sfmx + m-L2 (Ours)
FTL (Ours)

Acc

99.53
99.63
99.73
98.60
98.53
99.18
99.55

Table 3. Performance comparisons on LFW. Methods of sfmx,
sfmx+L2, sfmx+m-L2 are our implementations.

classes while monitoring the performance on base classes.
We use the output from softmax layer as the conﬁdence
score and achieve 92.60% coverage at precision of 0.99 with
single-model single-crop testing, as in Table 2. Note that
both methods [5, 44] use model ensemble and multi-crop
testing. Compared to methods [6, 11] with similar setting,
we achieve competitive performance on the base classes and
much better accuracy on the novel classes by 15%.

4.5. Large-Scale Face Recognition

In this section, we train our model on the full MS-celeb-
1M dataset and evaluate on LFW and IJB-A. On LFW (Ta-
ble 3), our performance is strongly competitive, achieving
99.55% whereas the state-of-the-arts show 99.63% from

Test →
Method ↓

Veriﬁcation
0.01 0.001

PAMs [26]
DR-GAN [37]
FF-GAN [48]
TA [7]
TPE [31]
NAN [46]
sfmx
sfmx + m-L2 (Ours)
FTL (Ours)
FTL + MP (Ours)
FTL + MP + TA (Ours)

–

65.2
69.9
66.3

82.6
83.1
85.2
93.9
81.3
90.0
88.1
94.1
77.4
91.5
80.2
92.5
82.9
93.5
94.3
85.1
95.3 91.2

Identiﬁcation
1

5

10

–

–
–

84.0 92.5 94.6
90.1 95.3
90.2 95.4
92.8
98.6
86.3 93.2 97.7
95.8 98.0 98.6
92.4 96.4 97.3
93.9 97.2 97.9
94.8 97.8 98.3
95.1 97.8 98.4
96.0 98.3 98.7

Table 4. Face recognition results on IJB-A. “MP” and “TA” rep-
resent media pooling and template adaptation. Veriﬁcation and
identiﬁcation results are reported at different FARs and ranks.

FaceNet [32] and 99.73% from CosFace [41]. On IJB-A
(Table 4), the softmax loss with our proposed m-L2 regular-
ization already provides good results denoted as sfmx+m-L2.
Our FTL improves the performance signiﬁcantly, with mar-
gins varying from 0.6% to 2.8%. We further combine media
pooling (MP) and template adaptation (TA) [7] metric learn-
ing with our proposed method (FTL + MP + TA), and achieve
consistently better results than state-of-the-art methods [46].

4.6. Qualitative Results

We apply decoder Dec in our framework for feature vi-
sualization. While skip link between encoder and decoder
improves the visual quality [48], we do not apply it to en-
courage the rich features g to encode intra-class variance.
Center visualization We compute a feature center for a
given class, on which the Dec is applied to generate a center
face. As shown in Figure 6, we conﬁrm the observation that
the center is mostly an identity-preserved frontal neutral face.
It also applies to portrait and cartoon ﬁgures.
Feature transfer The transferred features are visualized by

5710

Input

Recon.

Transfer

Figure 7. Feature transfer visualization between two classes for every two columns. The ﬁrst row are the input, in which odd column denotes
class 1: x1 and the even column denotes class 2: x2. The second row are the reconstructed images x′
2. In the third row, odd column
image is the decoded image of the transferred feature from class 1 to class 2 and even column image is the decoded image of the transferred
feature from class 2 to class 1. It is clear that the transferred features share the same identity as the target class while obtain the source
image’s non-identity variance including pose, expression, illumination, and etc.

1 and x′

α →

0.1

0.2

0.3

0.4

0.5

0.6

0.7

0.8

0.9

1.0

Figure 8. Transition from top-left image to top-right image via feature interpolation. First row shows traditional feature interpolation; second
row shows our transition of non-identity variance; third row shows our transition of identity variance.

Dec. Let x1,2, x′
1,2, g1,2, c1,2 denote the input images, re-
constructed images, encoded rich features and feature centers
of two classes, respectively. We transfer feature from class
1 to class 2 by: g12 = c2 + QQT (g1 − c1), and visualize
the decoded images. We also transfer from class 2 to class 1
and visualize the decoded images. As shown in Figure 7, the
transferred images preserve the target class’s identity while
retaining intra-class variance of the source image in terms of
pose, expression and lighting, which shows that our feature
transfer is effective in enlarging the intra-class variance.

Feature interpolation The interpolation between two rep-
resentations shows the appearance transition from one to the
other [29, 37]. Let g1,2, c1,2 denote the encoded features
and the centers of two classes. Previous work generates a
new representation as g = g1 + α(g2 − g1) where iden-
tity and non-identity changes are mixed together. In our
work, we can generate transitions of non-identity change
as g = c1 + αQQT (g2 − c2) and identity change as
g = g1 + α(c2 − c1). Figure 8 shows an interpolation
example of a female with left pose and a male with right
pose, where the illumination changes signiﬁcantly. Com-
pared to traditional interpolation that generates undesirable
artifacts, our method shows smooth transitions, which ver-

iﬁes that the proposed model is effective at disentangling
identity and non-identity features.

5. Conclusions

In this paper, we propose a novel feature transfer ap-
proach for deep face recognition training which explores the
imbalance issue with UR classes. We observe that generic
face recognition approaches encounter classiﬁer bias due
to imbalanced distribution of training data across classes.
By applying the proposed feature transfer approach, we en-
rich the feature space of the UR classes, while retaining
identity. Utilizing the generated data, our alternating fea-
ture learning method rectiﬁes the classiﬁer and learns more
compact feature representations. Our proposed m-L2 reg-
ularization demonstrates consistent advantages which can
potentially boost performance across different recognition
tasks. The disentangled nature of the augmented feature
space is visualized through smooth interpolations. Exper-
iments consistently show that our method can learn better
representations to improve the performance on regular, UR,
and unseen classes. While this paper focuses on face recog-
nition, our future work will also derive advantages from the
proposed feature transfer for other recognition applications,
such as UR natural species [17].

5711

References

[1] N. Chawla, K. Bowyer, L. Hall, and W. Kegelmeyer. SMOTE:

synthetic minority over-sampling technique. JAIR, 2002.

[2] D. Chen, X. Cao, L. Wang, F. Wen, and J. Sun. Bayesian face

revisited: A joint formulation. In ECCV, 2012.

[3] J. Chen and X. Liu. Transfer learning with one-class data.

Pattern Recognition Letters, 37:32–49, February 2014.

[4] J. Chen, X. Liu, P. Tu, and A. Aragones. Learning person-
speciﬁc models for facial expression and action unit recogni-
tion. Pattern Recognition Letters, 34(15):1964–1970, Novem-
ber 2013.

[5] Y. Cheng, J. Zhao, Z. Wang, Y. Xu, K. Jayashree, S. Shen,
and J. Feng. Know you at one glance: A compact vector
representation for low-shot learning.
In ICCV workshop,
2017.

[6] J. Choe, S. Park, K. Kim, J. Hyun Park, D. Kim, and H. Shim.
Face generation for low-shot learning using generative adver-
sarial networks. In ICCV workshop, 2017.

[7] N. Crosswhite, J. Byrne, C. Stauffer, O. Parkhi, Q. Cao, and
A. Zisserman. Template adaptation for face veriﬁcation and
identiﬁcation. In FG, 2017.

[8] J. Deng, J. Guo, N. Xue, and S. Zafeiriou. ArcFace: Additive
In CVPR,

angular margin loss for deep face recognition.
2019.

[9] M. Dixit, R. Kwitt, M. Niethammer, and N. Vasconcelos.

AGA: Attribute-guided augmentation. In CVPR, 2017.

[10] I. Goodfellow, J. Pouget-Abadie, M. Mirza, B. Xu, D. Warde-
Farley, S. Ozair, A. Courville, and Y. Bengio. Generative
adversarial nets. In NIPS, 2014.

[11] Y. Guo and L. Zhang. One-shot face recognition by promoting
underrepresented classes. arXiv preprint arXiv:1707.05574,
2017.

[12] Y. Guo, L. Zhang, Y. Hu, X. He, and J. Gao. MS-Celeb-1M:
A dataset and benchmark for large scale face recognition. In
ECCV, 2016.

[13] S. Gupta, R. Girshick, P. Arbelaez, and J. Malik. Learning
rich features from RGB-D images for object detection and
segmentation. In ECCV, 2014.

[14] B. Hariharan and R. Girshick. Low-shot visual recognition

by shrinking and hallucinating features. In ICCV, 2017.

[15] H. He and E. A. Garcia. Learning from imbalanced data. In

TKDE, 2009.

[16] K. He, X. Zhang, S. Ren, and J. Sun. Deep residual learning

for image recognition. In CVPR, 2016.

[17] G. V. Horn, O. M. Aodha, Y. Song, A. Shepard, H. Adam,
P. Perona, and S. Belongie. The inaturalist challenge 2017
dataset. In CVPR Workshop, 2017.

[18] G. V. Horn and P. Perona. The devial is in the tails: Fine-
grained classiﬁcation in the wild. In arXiv:1709.01450, 2017.

[19] C. Huang, Y. Li, C. C. Loy, and X. Tang. Learning deep
representation for imbalanced classiﬁcation. In CVPR, 2016.

[20] G. Huang, M. Ramesh, T. Berg, and E. Learned-Miller. La-
beled faces in the wild: A database for studying face recogni-
tion in unconstrained environments. Technical Report 07-49,
University of Massachusetts, Amherst, 2007.

[21] B. F. Klare, B. Klein, E. Taborsky, A. Blanton, J. Cheney,
K. Allen, P. Grother, A. Mah, M. Burge, and A. K. Jain.
Pushing the frontiers of unconstrained face detection and
recognition: IARPA Janus Benchmark A. In CVPR, 2015.

[22] A. Krizhevsky, I. Sutskever, and G. Hinton. ImageNet clas-
siﬁcation with deep convolutional neural networks. In NIPS,
2012.

[23] Y. LeCun, C. Cortes, and C. J.C. Burges. The MNIST

database of handwritten digits. Technical report, 1998.

[24] W. Liu, Y. Wen, Z. Yu, M. Li, B. Raj, and L. Song.
SphereFace: Deep hypersphere embedding for face recog-
nition. In CVPR, 2017.

[25] W. Liu, Y. Wen, Z. Yu, and M. Yang. Large-margin softmax

loss for convolutional neural networks. In ICML, 2016.

[26] I. Masi, S. Rawls, G. Medioni, and P. Natarajan. Pose-aware

face recognition in the wild. In CVPR, 2016.

[27] S. J. Pan and Q. Yang. A survey on transfer learning. In

TKDE, 2009.

[28] O. Parkhi, A. Vedaldi, and A. Zisserman. Deep face recogni-

tion. In BMVC, 2015.

[29] A. Radford, L. Metz, and S. Chintala. Unsupervised represen-
tation learning with deep convolutional generative adversarial
networks. In ICLR, 2016.

[30] O. Russakovsky, J. Deng, H. Su, J. Krause, S. Satheesh, S. Ma,
Z. Huang, A. Karpathy, A. Khosla, M. Bernstein, A. C. Berg,
and L. Fei-Fei. ImageNet Large Scale Visual Recognition
Challenge. IJCV, 2015.

[31] S. Sankaranarayanan, A. Alavi, C. D. Castillo, and R. Chel-
lappa. Triplet probabilistic embedding for face veriﬁcation
and clustering. In BTAS, 2016.

[32] F. Schroff, D. Kalenichenko, and J. Philbin. FaceNet: A
uniﬁed embedding for face recognition and clustering. In
CVPR, 2015.

[33] E. Smirnov, A. Melnikov, S. Novoselov, E. Luckyanets, and
G. Lavrentyeva. Doppelganger mining for face representation
learning. In ICCV workshop, 2017.

[34] K. Sohn. Improved deep metric learning with multi-class

n-pair loss objective. In NIPS, 2016.

[35] K. Sohn, S. Liu, G. Zhong, X. Yu, M.-H. Yang, and M. Chan-
draker. Unsupervised domain adaptation for face recognition
in unlabeled videos. In ICCV, 2017.

[36] Y. Sun, Y. Chen, X. Wang, and X. Tang. Deep learning face
representation by joint identiﬁcation-veriﬁcation. In NIPS,
2014.

[37] L. Tran, X. Yin, and X. Liu. Disentangled representation
learning GAN for pose-invariant face recognition. In CVPR,
2017.

[38] L. van der Maaten and G. Hinton. Visualizing high-
dimensional data using t-SNE. Journal of Machine Learning
Research, 9:2579–2605, 2008.

[39] O. Vinyals, C. Blundell, T. Lillicrap, K. Kavukcuoglu, and
D. Wierstra. Matching networks for one shot learning. In
CoRR, 2016.

[40] F. Wang, X. Xiang, J. Cheng, and A. L. Yuille. Normface: l 2
hypersphere embedding for face veriﬁcation. arXiv preprint
arXiv:1704.06369, 2017.

5712

[41] H. Wang, Y. Wang, Z. Zhou, X. Ji, and W. Liu. CosFace:
Large margin cosine loss for deep face recognition. In CVPR,
2018.

[42] Y. Wen, K. Zhang, Z. Li, and Y. Qiao. A discriminative
feature learning approach for deep face recognition. In ECCV,
2016.

[43] X. Wu, R. He, Z. Sun, and T. Tan. A light CNN for
deep face representation with noisy labels. arXiv preprint
arXiv:1511.02683, 2015.

[44] Y. Wu, H. Liu, and Y. Fu. Low-shot face recognition with

hybrid classiﬁers. In ICCV workshop, 2017.

[45] Y. Xu, Y. Cheng, J. Zhao, Z. Wang, L. Xiong, K. Jayashree,
H. Tamura, T. Kagaya, S. Pranata, S. Shen, et al. High per-
formance large scale face recognition with multi-cognition
softmax and feature retrieval. In ICCV workshop, 2017.

[46] J. Yang, P. Ren, D. Chen, F. Wen, H. Li, and G. Hua. Neural
aggregation network for video face recognition. In CVPR,
2017.

[47] D. Yi, Z. Lei, S. Liao, and S. Z. Li. Learning face representa-

tion from scratch. arXiv preprint:1411.7923, 2014.

[48] X. Yin, X. Yu, K. Sohn, X. Liu, and M. Chandraker. Towards

large-pose face frontalization in the wild. In ICCV, 2017.

[49] X. Yu, F. Zhou, and M. Chandraker. Deep deformation net-

work for object landmark localization. In ECCV, 2016.

[50] X. Zhang, Z. Fang, Y. Wen, Z. Li, and Y. Qiao. Range loss
for deep face recognition with long-tailed training data. In
ICCV, 2017.

5713

