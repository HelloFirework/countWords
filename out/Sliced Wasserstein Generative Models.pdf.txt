Sliced Wasserstein Generative Models

Jiqing Wu*1

Zhiwu Huang*1 Dinesh Acharya1 Wen Li1

Janine Thoma1 Danda Pani Paudel1

Luc Van Gool1,2

1 Computer Vision Lab, ETH Zurich, Switzerland

2 VISICS, KU Leuven, Belgium

{jwu, zhiwu.huang, liwen, jthoma, paudel, vangool}@vision.ee.ethz.ch

*Equal contribution

Abstract

In generative modeling, the Wasserstein distance (WD)
has emerged as a useful metric to measure the discrepancy
between generated and real data distributions. Unfortu-
nately, it is challenging to approximate the WD of high-
dimensional distributions. In contrast, the sliced Wasserstein
distance (SWD) factorizes high-dimensional distributions
into their multiple one-dimensional marginal distributions
and is thus easier to approximate.

In this paper, we introduce novel approximations of the
primal and dual SWD. Instead of using a large number of
random projections, as it is done by conventional SWD ap-
proximation methods, we propose to approximate SWDs with
a small number of parameterized orthogonal projections in
an end-to-end deep learning fashion. As concrete appli-
cations of our SWD approximations, we design two types
of differentiable SWD blocks to equip modern generative
frameworks—Auto-Encoders (AE) and Generative Adversar-
ial Networks (GAN).

In the experiments, we not only show the superiority of
the proposed generative models on standard image synthesis
benchmarks, but also demonstrate the state-of-the-art per-
formance on challenging high resolution image and video
generation in an unsupervised manner 1.

1. Introduction

The Wasserstein distance (WD) is an important metric,
which was originally applied in the optimal transport prob-
lem2 [33]. Recently, [3, 11, 30, 36, 31, 23, 1, 2] discovered
the advantages of the WD in generative models and achieved
state-of-the-art performance for image synthesis. However,
the WD has some drawbacks. For instance, its primal form
is generally intractable for high-dimensional probability dis-
tributions, although some works [31, 10, 30] have proposed

1Code: https://github.com/musikisomorphie/swd.git
2Optimal transport addresses the problem of ﬁnding an optimal plan to

transfer a source distribution to a target distribution at minimal cost.

relaxed versions of the primal form. The dual form of the
WD can be more easily derived, but it remains difﬁcult to
approximate its k-Lipschitz constraint [36, 37].

Given the weaknesses of the WD, the sliced Wasserstein
distance (SWD) suggests itself as a potential alternative. The
SWD factorizes high-dimensional distributions into their
multiple one-dimensional marginal distributions and can
therefore be approximated more easily, as studied in [5, 21,
19, 9]. However, due to the inefﬁcient approximations of
the SWD in existing methods, its potential in generative
modeling has not been fully explored yet.

In this paper, we address this issue. Our contributions can

be summarized as follows:

• Relying on our novel primal SWD approximation,
we propose sliced Wasserstein Auto-Encoder (SWAE)
models. By seamlessly stacking the proposed primal
SWD blocks (layers) on top of the standard encoder, we
give the traditional AE generative capabilities. State-of-
the-art AE-based generative models usually require an
additional regularizer to achieve the same effect.

• Based on our new dual SWD approximation, we intro-
duce a sliced version of Wasserstein Generative Adver-
sarial Networks (SWGAN) by applying the proposed
dual SWD blocks to the discriminator. To the best of
our knowledge, this is the ﬁrst work to study the dual
SWD and its application to generative models.

• To satisfy the orthogonality constraint required by the
projection matrices of the proposed SWD blocks, we ap-
ply a non-Euclidean optimization algorithm on Stiefel
manifolds to update the projection matrices.

• Motivated by the improvements of visual quality and
model stability demonstrated on the standard image
synthesis benchmarks, we apply our proposed model
to the challenging task of unsupervised high resolution
image and video synthesis. These evaluations conﬁrm
the advantage of our model under non-trivial cases.

3713

2. Background

2.1. Wasserstein Distance & Related Models

The primal Wasserstein distance (WD) is given by

Wp(PX , PY ) =

inf

γ∈Π(PX ,PY )

E(X,Y )∼γ[dp(X, Y )]

1
p ,

(1)

where X, Y are random variables, Π(PX , PY ) denotes the
set of all joint distributions γ(X, Y ) whose marginal distri-
butions are PX , PY respectively, d is a metric, and p > 0.
For p = 1, the Kantorovich’s dual of the WD is

W1(PX , PY ) = sup
f ∈Lip1

EX∼PX [f (X)] − EY ∼PY [f (Y )],

(2)
where Lip1 is the set of all 1-Lipschitz functions. The dual
WD becomes k · W1 if we replace Lip1 with Lipk for k > 0.
The original form of the primal WD (Eq. 1) is generally in-
tractable. For the case of Auto-Encoders (AE), however, [31]
have proven that optimizing the primal WD over tractable en-
coders is equivalent to optimizing it over the intractable joint
distributions γ(X, Y ). This idea yields Wasserstein Auto-
Encoders (WAE). Another way of avoiding the intractable
primal WD is to use its dual form instead. By parameteriz-
ing the f in Eq. 2 with a neural network, [3] have found a
natural way of introducing the dual WD to the GAN frame-
work. WAE and WGAN stand for typical applications of the
primal and dual WD in generative models and are closely
related to our proposed methods. We therefore summarize
the necessary details in the following.

2.1.1 Wasserstein AE (WAE)

The WAE proposed by [31] optimizes a relaxed version of
the primal WD. In order to impose the prior distribution on
the encoder, an additional divergence D is introduced to the
objective:

inf

PQ(Z|X)∈Q

EX∼PX

EQ∼PQ(Z|X) [c(X, G(Z))] + λD(PQ, PZ),

(3)
where Z is random noise, G is the decoder, Q is any non-
parametric set of marginal distributions PQ on encoders Q,
c is the Euclidean distance, λ > 0 is a hyperparameter, and
D is the divergence between the PQ of the encoder and the
prior distribution PZ of Z. [31] instantiate D by using either
maximum mean discrepancy (MMD) or GAN, both of which
can be regarded as a distribution matching strategy.

2.1.2 Wasserstein GAN (WGAN)

The key challenge of WGAN is the k-Lipschitz constraint
required in Eq. 2. The original WGAN [3] adopt a weight
clipping strategy; however, it satisﬁes the k-Lipschitz con-
straint poorly. To alleviate this problem, the improved train-
ing of Wasserstein GAN (WGAN-GP) [11] penalizes the

norm of the discriminator’s gradient with respect to a few
input samples. This gradient penalty is then added to the
basic WGAN loss (i.e. the dual form of the WD) resulting in
the following full objective:

min

G

max

D

EX∼PX [D(X)] − E ˜X∼PG

[D(G(Z))]+

λ E ˆX∼P ˆX

[(k∇ ˆX D( ˆX)k2 − 1)2],

(4)

where G, D denotes the generator and discriminator respec-
tively, Z is random noise, ˆX is random samples follow-
ing the distribution P ˆX which is sampled uniformly along
straight lines between pairs of points sampled from PX and
PG, and ∇ ˆX D( ˆX) is the gradient with respect to ˆX. As
studied in [36], a limited number of samples is not sufﬁcient
to impose the k-Lipschitz constraint on a high-dimensional
domain. Thus, [36] further improved the Wasserstein GAN
with an additional consistency term (CTGAN). Furthermore,
[26] introduced a spectral normalization (SN) technique
which also improves the training of GAN including the
family of WGAN. The SNGAN imposes the 1-Lipschitz
constraint by normalizing the weights of each layer. To
strengthen GAN training stability and to achieve high res-
[16] applied WGAN-GP to a
olution image generation,
progressive growing scheme (PG-WGAN).

2.2. Sliced Wasserstein Distance & Related Models

The idea underlying the sliced Wasserstein distance
(SWD) is to decompose the challenging estimation of a
high-dimensional distribution into the simpler estimation
of multiple one-dimensional distributions. Formally, let
PX , PY be probability distributions of random variables
X, Y . For a unit vector θ ∈ Sn−1 we deﬁne the correspond-
ing inner product πθ(x) = θT x and marginal distribution
θPX = PX ◦ π−1
π∗

θ . Then the primal SWD is given by

SWp(PX , PY ) =(cid:18)ZSn−1

Wp(π∗

θPX , π∗

1
p

.

θPY )pdθ(cid:19)

(5)
Several works [5, 21, 19] exploit the fact that the WD has a
closed form solution for the optimal transport plan between
one-dimensional probability distributions. More concretely,
let FX , FY be the cumulative distribution functions (CDFs)
corresponding to PX , PY , then for all θ ∈ Sn−1 there exists
a unique closed form solution

τθ = (π∗

θFY )−1 ◦ π∗

θFX ,

(6)

such that the integrand of Eq. 5 can be computed by

Wp(π∗

θPX , π∗

θPY )p =ZR

dp(x, τθ(x))dπ∗

θPX .

(7)

3714

Furthermore, as proven by [6] (Chapter 5), the SWD is not
only a valid distance, but also equivalent3 to the WD

target n-dim PDF
source n-dim PDF

project n-dim PDFs to 
1-dim marginal PDFs 
by orthogonal matrix 

(1)

SWp(PX , PY )p ≤ α1Wp(PX , PY )p ≤ α2SWp(PX , PY )
(8)
where α1, α2 are constants and n is the dimension of sample
vectors from X, Y . Given such favorable properties, the
SWD has the potential to improve modern generative model-
ing especially when processing samples of high-dimensional
distributions such as images and videos.

1
n+1 ,

The SWD is typically approximated by using a summa-
tion over the projections along random directions (random
projections) [28, 21, 16, 9]. For example, [28] iteratively
use a large number of random projections to estimate the
SWD from samples and update the samples by gradient de-
scent. Similarly, the sliced Wasserstein Generator (SWG) [9]
optimizes its generator with an SWD loss. This SWD loss
computes the difference between marginal distributions of
feature maps decomposed by random projections. Unfor-
tunately, these methods require a large amount of random
projections and have not fully unlocked the potential of the
SWD yet.

3. Proposed Method

Compared to a set of random vectors (projections), a
set of orthogonal projections is more efﬁcient to span an
entire space. Also, neural networks have been shown to
possess robust generalization abilities. We thus propose to
approximate the primal and dual SWD with a small set of
parameterized orthogonal matrices in a deep learning fash-
ion. In the following, we give a detailed description of our
primal and dual SWD approximations. Later, we introduce
two generative modeling applications of the resulting SWD
blocks—sliced Wasserstein AE (SWAE) and sliced Wasser-
stein GAN (SWGAN).

3.1. Primal SWD Approximation

Given i ∈ N, guided by the target distribution PY , we
deﬁne the i-th computational block which transfers the input
distribution PX i to PX i+1 as follows

(3)

match n-dim PDFs
by comparing 1-dim 
marginal PDFs

(2)

target 1-dim marginal PDF
source 1-dim marginal PDF

Figure 1. Illustration of our primal and dual SWD approximations.
(1) - (2): By projecting samples along orthogonal unit vectors (or-
thogonal matrix), we decompose n-dimensional target and source
probability distribution functions (PDFs) into their one-dimensional
marginal PDFs. (2) - (3): We match the n-dimensional PDFs by
comparing their marginal PDFs. For the primal SWD approxima-
tion, this is done implicitly through the iterative transformation of
source to target distribution. For the dual approximation, the dual
SWD is calculated explicitly.

and the convergence holds when m → ∞. To reduce the
number of computational blocks (Eq. 9) required by IDT, we
propose to parameterize the orthogonal matrices and learn
them in an end-to-end deep learning fashion. As a result, a
small number of such parameterized computational blocks
is sufﬁcient to approximate the primal SWD.

3.2. Dual SWD Approximation

Since the integrand of the SWD (Eq. 5) is nothing but a
one-dimensional WD, its Kantorovich’s dual can be seam-
lessly applied and Eq. 5 can be rewritten as

ZSn−1  sup

f ∈Lipk

EXθ ∼π∗

θ PX [f (Xθ)] − EYθ ∼π∗

θ PY [f (Yθ)]! dθ.

(10)
Similar to the primal SWD approximation, we propose to
employ orthogonal matrices to estimate the integral over
Sn−1. These orthogonal matrices are also parametrized and
learned in the context of deep learning. It therefore sufﬁces
to use a moderate number of orthogonal matrices to achieve
a good estimation. The proposed SWD approximations are
conceptually illustrated in Fig. 1.

Qi

Θ(x) = Oi

Θ

Πi

Θ((Oi

Θ)T x),

(9)

3.3. Sliced Wasserstein AE (SWAE)

, τ i
θ2

Θ = [θi

1, . . . , θi

, . . . , τ i
θn

where x is a sample vector from PX i , Oi
n] ∈
Rn×n is a random orthogonal matrix, and Πi
Θ =
(τ i
) (Eq. 6) are optimal transport maps with
θ1
respect to the marginal distributions of PX i , PY projected by
Θ ◦ Q1
Oi
Θ
results in the iterative distribution transfer (IDT) method [27].
As studied in [6], let the target distribution PY be Gaussian,
then PXm converges to PY with respect to the primal SWD,

Θ. Stacking m computational blocks Qm

Θ ◦ . . . ◦ Q2

3Here, we adopt the usage of ‘equivalent’ from [6], which is an abuse of

notation.

Since AE-based generative models require to impose a
prior distribution on the encoder, it is natural to make Eq. 9
learnable and incorporate it into the encoder. By stacking our
primal SWD blocks (layers) on top of the standard encoder,
we give generative capability to the traditional Auto-encoder.
In other words, we can implicitly match the encoder and prior
distributions without introducing an extra regularizer such
as D required in Eq. 3. Speciﬁcally, our encoder Q is the
composition of a standard encoding network E and m primal
SWD blocks Sp,1, . . . , Sp,m, that is, Q = Sp,m◦. . .◦Sp,1◦E.

3715

written as an empirical distribution function (EDF) [8], we
obtain the following error estimation for Alg. 1:

Theorem 1. Given b ∈ N, let Z1, Z2, . . . , Zb be real-
valued i.i.d. random variables with a continuous CDF F −1
with domain [0, 1]. Then we deﬁne the associated EDF
1{Zi≤t}. Assume ˜FY , FY are CDFs sat-
F −1
Z,b(t) = 1
isfying k ˜FY − FY k∞ ≤ γ, then there exists a δ > 0 such

i=1

Z

b Pb

2b ln 2 it holds that

i =

z′
i−minj {z′

i,j }

maxj {z′

i,j }−minj {z′

i,j } ,

i respectively.
i , z′′
, pz′′
, pz′′

of y′′

i

i

i with l bins

that for all ε − δγ ≥q 1
Pr(cid:16)kF −1

˜FY (t) − F −1

Z,b

Z FY (t)k∞ > ε(cid:17) ≤ e−2b(ε−δγ)2

.

(11)

Algorithm 1 The proposed primal SWD block

Require: Orthogonal matrix OΘ = [θ1, . . . , θr] ∈ Rr×r,
batch of latent codes My = [y1, . . . , yb] ∈ Rr×b, batch of
Gaussian noise Mz = [z1, . . . , zb] ∈ Rr×b, and bin number l
Output: Batch of transferred latent codes M ˜y = [ ˜y1, . . . , ˜yb]
for i ← 1, r do

y′
y′′
y′
i,j , z′

maxj {y′

i My, z′

i Mz
i,j }

i,j }−minj {y′

i = θT
i−minj {y′
y′

i = θT
i =
i,j are the j-th element of y′

i,j } , z′′
i, z′
Compute soft PDF histogram py′′
of py′′
Compute CDF Fy′′
(y′′
Compute Fy′′
i
{z′
ˆyi = (max
i,j } − min

, Fz′′

{z′

i,j })(Fz′′
i

j

j

i

i

i

i

i ) element-wise by linear interpolation
{z′

(y′′

i ) + min

)−1Fy′′

i,j }

i

j

end for
Compute M ˜y = OΘM T

ˆy , M ˆy = [ ˆyT

1 , . . . , ˆyT
r ]

Algorithm 2 The proposed SWAE

Require: Primal SWD block number m, batch size b, decoder
G and encoder Q = Sp,m ◦ . . . ◦ Sp,2 ◦ Sp,1 ◦ E, training steps
h, training hyperparameters, etc.
for t ← 1, h do

Sample real data Mx = [x1, . . . , xb] from PX
Sample Gaussian noise Mz = [z1, . . . , zb] from N (0, 1)
Update the weights w of Q and G by descending:
b kMx − G(Q(Mx, Mz))k2
w ← Adam(∇w( 1

2), w)

end for

By feeding the latent codes from E into the primal SWD
blocks Sp,1, . . . , Sp,m, the distribution of latent codes is
transferred to the prior distribution. In this paper, we choose
the prior distribution to be Gaussian, as it is frequently done
for AE-based models. However, supported by [6], more
complicated prior distributions are acceptable as well.

The implementation details of our primal SWD block are
presented in Alg. 1. The idea behind the algorithm is to
decompose Eq. 6 into multiple differentiable computational
steps. However, the conventional histogram computation
is not differentiable. We therefore propose a soft version
of histogram computation to make the PDF histogram com-
putation differentiable. More speciﬁcally, for an element y
we assign the weight e−αky−cik2
to the
i-th bin, where c1, . . . , cl are the bin centers. Eventually, we
obtain the histogram by summing the weights for each bin
over all elements y . Note that for α → ∞ this soft version
returns to the original non-differentiable version. In practice,
due to the minor impact of α on the generative capability, we
empirically determine α = 1. As a result, the primal SWD
block (Alg. 1) is differentiable and can be trained in a deep
learning manner.

j=1 e−αky−cj k2

/Pl

The approximation error of Alg. 1 is dominated by its
core steps corresponding to Eq. 6. Since Alg. 1 rescales all
sample vectors to [0, 1], the inverse functions of its CDFs
are again CDFs. Together with the fact that a CDF can be

For a proof of Theorem 1 please refer to our supplemen-
tary material. Since it is straightforward to estimate an EDF
on one-dimensional data using a moderate number of sam-
ples, Theorem 1 tells us that the core steps of our primal
SWD block approximate Eq. 6 well. Owing to the implicit
SWD approximation by the primal SWD blocks, it is un-
necessary to introduce an explicit regularization on the ﬁnal
objective. The objective of our proposed SWAE model is:

inf

PQ(Z|X)∈Q

EX∼PX

EQ∼PQ(Z|X) [kX − G(Q(X, Z))k2
2],

(12)
where Q, G are the encoder and decoder respectively, and
Q is implicitly constrained by our primal SWD blocks. The
corresponding algorithm is presented in Alg. 2.

3.4. Sliced Wasserstein GAN (SWGAN)

The success of WGAN indicates that the dual WD can
be used as a suitable objective for the discriminator of GAN
models. In order to keep the advantages of this setup, but
to avoid imposing the k-Lipschitz constraint on a high di-
mensional distribution, we propose to use the dual SWD
instead. Speciﬁcally, we introduce m dual SWD blocks
Sd,1, . . . , Sd,m to the discriminator D (see Alg. 3). Image
data distributions are supported by low-dimensional mani-
folds. For this reason, classic GAN discriminators encode
their input data into lower-dimensional feature maps. We
follow this setting. Our discriminator is the composition of
an encoding network E and dual SWD blocks Sd,s, that is,
D = [Sd,1 ◦ E, . . . , Sd,m ◦ E]T .

Eventually, we estimate the integral over Sn−1 of the
dual SWD by summing over the outputs’ mean value of
SWD blocks Sd,1, . . . , Sd,m (see Alg. 4). In order to approx-
imate the one-dimensional optimal f ∈ Lipk (Eq. 10) in our
SWD blocks, it sufﬁces to use non-linear neural network
layers. This is supported by the universal approximation
theorem [14, 12]. For our case, we empirically set Fi in
Alg. 3 to be Fi(y′
i + vi), where
ui, vi, wi are scalar parameters.

i) = uiLeakyReLU(wiy′

The k-Lipschitz gradient penalty has its drawbacks in
high dimensional space. For one-dimensional functions,

3716

Algorithm 3 The proposed dual SWD block

Require: Orthogonal matrix OΘ = [θ1, . . . , θr] ∈ Rr×r and batch
of latent codes My = [y1, . . . , yb] ∈ Rr×b.
Output: Batch of ˜y for dual SWD
for i ← 1, r do
Compute y′
Compute y′′

i) element-wise, where F = (F1, . . . , Fr)

i = θT
i My
i = Fi(y′

are one-dimensional functions to approximate the f in Eq. 10.
end for
˜y = [y′′

1 , . . . , y′′

b ]T

Algorithm 4 The proposed SWGAN

Require: Number of dual SWD blocks m, batch size b, generator G
and discriminator D = [Sd,1 ◦ E, . . . , Sd,m ◦ E]T , latent code dimen-
sion r, Lipschitz constant k, training steps h, training hyperparameters,
etc.
for t ← 1, h do

Sample real data Mx = [x1, . . . , xb] from PX
Sample Gaussian noise Mz = [z1, . . . , zb] from N (0, 1)
Sample two vectors µ1, µ2 from uniform distribution U [0, 1] and

for l = 1, . . . , b calculate the elements of M ˆx, M ˆy:

ˆxl = (1 − µ1,l)xl + µ1,lG(zl)
ˆyl = (1 − µ2,l)E(xl) + µ2,lE(G(zl))
Update the weights wG of G by descending:
wG ← Adam(∇wG ( 1
Update the weights wD of D by descending:
wD ← Adam(∇wD ( 1

b Pr×m,b

b Pr×m,b

λ1k∇M ˆx D(M ˆx)k2
compute the gradients of F element-wise.
end for

2 + λ2k∇M ˆy F (M ˆy) − k · 1k2

j,i=1 Dji(G(Mz))), wG)

j,i=1 (Dji(Mx) − Dji(G(Mz)) +
2), wD), where we

however, it can easily impose the k-Lipschitz constraint.
Thus, we additionally apply the gradient penalty on each
dimension of the Fis’ output. Since dual WD with different
k-Lip constraints are equivalent to each other up to a scalar,
we treat k, k′ as tunable hyper-parameters for both F, D and
relax the search interval to k, k′ ≥ 0, this relaxation can be
justiﬁed by [37]. Consequently, the ﬁnal objective is

G

min

max

λ1E ˆX∼P ˆX

[k∇ ˆX D( ˆX) − k′k2

D Zθ∈Sn−1(cid:16)EX∼PX [D(X)] − E ˜X∼PG
2] + λ2E ˆY ∼P ˆY

[D(G(Z))](cid:17)+
[k∇ ˆY F ( ˆY ) − k · 1k2
2],
(13)
where θ is embedded in D, and 1 is a vector with all entries
being 1. We sample ˆX, ˆY based on [11]. λ1, λ2 are coef-
ﬁcients which balance the penalty terms (see Alg. 4). For
the sake of computational efﬁciency our objective swaps the
order of maximum and integral compared to Eq. 10. This
exchange results in a lower bound estimation of Eq. 10. It
implies that the objective can lead to the convergence of the
dual SWD.
Discussion.
In addition to the proposed SWAE and
SWGAN, it is also possible to apply our proposed primal
and dual SWD approximations to other generative models.
For example, following [25], AE-based models can be en-
hanced by adversarial training using our dual SWD. Inspired
by [30] it is possible to regularize GAN with our primal
SWD. Moreover, by using a sorting algorithm [20] we can

incorporate a simple primal SWD loss into GAN models.

3.5. Training for SWAE and SWGAN

To train the proposed SWAE and SWGAN models,
we utilize the standard Adam optimization algorithm [17].
Throughout training, the projection matrices in the SWD
blocks should remain orthogonal. For this purpose we ﬁrst
initialize the parameters of SWD blocks with random orthog-
onal matrices through QR decomposition, then update them
on a curved manifold instead of a Euclidean space. Building
upon the manifold-valued update rule [15], we optimize the
orthogonal matrices on Stiefel manifolds4.

t ∇L(k)

In the t-th training step, after computing the Euclidean
gradient ∇L(k)
of an orthogonal matrix Ot, we obtain
Ot
its tangential component by subtracting Ot(OT
+
(∇L(k)
)T Ot)/2 (see [7]), where L(k) is the loss for the
Ot
k-th layer. For simplicity, we subsequently drop the index
k. Searching along the tangential direction yields the update
in the tangent space of the Stiefel manifold. In the end, the
resulting update is projected back to the Stiefel manifold
by a retraction operation Γ. Accordingly, the update of the
current orthogonal matrix Ot on the Stiefel manifold can be
written in the following form

Ot

˜∇LOt = (∇LOt − Ot(∇LOt )T Ot)/2,
Ot+1 = Γ(Ot − Ω( ˜∇LOt )),

(14)

(15)

where Γ denotes the retraction operation corresponding to
QR decomposition and Ω(·) denotes the standard Adam
optimization. Note that the retraction has complexity O(r3)
for r-dimensional data and is the main contributor to the time
complexity of the optimization method. We therefore encode
the n-dimensional input data into r-dimensional latent codes
(r < n) before applying the SWD blocks, such that the
training speed of our method remains comparable to the
existing methods (see Tab. 1). The inference speed is not
affected by the retraction operation.

4. Experiments under Standard Training

After discussing the theoretical merits of SWD and its ap-
plications to generative modeling, we examine the practical
advantages of our proposed models under a standard training
setting.

4.1. Evaluation on Toy Datasets

Following [11], we ﬁrst conduct experiments on three
toy datasets: Swiss Roll, 8 Gaussians and 25 Gaussians (see
Fig. 2). For a fair comparison, we respect the experimental
settings of [11] for the compared methods. For this exper-
iment, the SWAE and SWGAN use only one SWD block.

4A compact Stiefel manifold St(d, n) is deﬁned as St(d, n) = {A ∈

Rn×d : AT A = Id}, where Id is the d × d identity matrix.

3717

WAE

AE +100 IDT SWAE

CT-GAN

SWG

SWGAN

CIFAR-10

CelebA

LSUN

CIFAR-10

CelebA

0.04 (0.06) 0.05 (0.06) 0.04 (0.04)

0.01

0.03

0.01

0.07 (0.04) 0.06 (0.06) 0.03 (0.02)

0.03

0.05

0.02

0.05 (0.03) 0.05 (0.06) 0.04 (0.02)

0.02

0.05

0.01

Figure 2. Visual and FID results for generated samples (green dots)
compared to real samples (yellow dots) on Swiss Roll (top row), 8
Gaussians (middle row) and 25 Gaussians (bottom row). For the
AE-based models, the FID scores displayed in parentheses indicate
the discrepancy between generated latent codes and real noise. For
the GANs, value surfaces of the discriminators are also plotted.

The superiority of our models is illustrated by visual results
and the Fr´echet inception distance (FID) [13].
SWD vs WD. Compared to the WD-based models–WAE
and CTGAN–Fig. 2 shows that our SWAE outperforms WAE
both visually and quantitatively. SWGAN also achieves bet-
ter scores than CTGAN. These results support the advantages
of SWD over WD for generative modeling.
SWAE vs AE + IDT. IDT [27] is the starting point of our
SWAE. Thus, we also use it as a baseline. For this purpose,
we stack IDT blocks on top of a regular encoder. We deter-
mine the optimal number of IDT blocks to be 100 by running
multiple experiments. Then we train the IDT enhanced AE
(AE + 100 IDT) under the standard Adam optimization. The
FID scores in parentheses in Fig. 2 indicate that our SWAE,
equipped with only one SWD block, better approximates
the real noise distribution than the IDT enhanced AE with
100 IDT blocks. Moreover, the visual results conﬁrm the
improvement of SWAE over AE + 100 IDT for all three
datasets. This shows that a single learnable primal SWD
block is more effective than multiple original IDT blocks.
SWGAN vs SWG. We compare our SWGAN to the state-of-
the-art SWD-based GAN model SWG [9]. SWG is a typical
application of SWD approximation with projections along
random unit vectors. Despite the use of 10000 random unit
vectors in SWD, Fig. 2 shows that our SWGAN with only
one dual SWD block (128 orthogonal unit vectors) is more
successful at capturing the real data distribution in terms
of better visual and better FID results, leveraging learnable
projections along orthogonal unit vectors.

4.2. Evaluation on Standard Datasets

In addition to our toy dataset experiments, we also con-
duct various experiments on three widely-used benchmarks:

VAE

WAE-MMD

AAE (WAE-GAN)

SWAE

DCGAN
WGAN

WGAN-GP

SNGAN
CTGAN

SWG

SWGAN

144.7±9.6
109.1±1.5
107.7±2.1
107.9±5.2

30.2 ± 0.9
51.3 ± 1.5
19.0 ± 0.8
21.5 ± 1.3
17.6 ± 0.7
33.7 ± 1.5
17.0 ± 1.0

66.8±2.2
59.1±4.9
49.3±5.8
48.9±4.3

52.5 ± 2.2
37.1 ± 1.9
18.0 ± 0.7
21.7 ± 1.5
15.8 ± 0.6
21.9 ± 2.0
13.2 ± 0.7

–
–
–
–

61.7 ± 2.9
73.3 ± 2.5
26.9 ± 1.1
31.3 ± 2.1
19.5 ± 1.2
67.9 ± 2.7
14.9 ± 1.0

0.16s
0.17s
0.25s
0.16s

0.13s
0.25s
0.60s
0.21s
0.63s
0.22s
0.64s

0.64s
0.63s
1.61s
0.37s

1.57s
2.12s
2.40s
0.53s
2.61s
0.83s
2.74s

Table 1. FID (left) and runtime (right) comparison of AE-based and
GAN models. The runtime is computed for one training step on a
TITAN Xp GPU.

CIFAR-10 [22], CelebA [24], and LSUN [38]. We com-
pare our SWAE to VAE [18], WAE-MMD [31], and AAE
(WAE-GAN) [31, 25]. For GAN models, we compare
our SWGAN against DCGAN [29], WGAN [3], WGAN-
GP [11], SNGAN [26], CTGAN [36], and SWG [9].

Our proposed SWAE uses the decoder architecture sug-
gested by [4]. For the encoder, we stack our primal SWD
blocks on a shallow encoding network containing a down-
scaling and linear transform layer. Our SWGAN employs
the ResNet structure used by [11] for the generator. For the
discriminator, we apply our dual SWD blocks to an encoding
network containing multiple ResNet layers. Please refer to
our supplementary material for more architecture details. As
to the compared methods, we use the ofﬁcial implementation
if it is available online, and we apply the optimal settings
tuned by their authors.

The evaluations of AE-based models in Tab. 1, Fig. 3
(Right: MTurk preference score) and Fig. 4 show that our
proposed SWAE clearly outperforms the pure VAE model.
Furthermore, our FID score is only marginally higher than
the one of AAE (WAE-GAN), which additionally employs
adversarial training. Due to this adversarial training, AAE
(WAE-GAN) is generally less stable, while our model pro-
vides stable training (see Fig. 3 (Left a)) owing to a simple
l2 reconstruction loss without any additional regularizer.

Tab. 1 and Fig. 3 (Right) highlight the advantages of
our SWGAN model in terms of FID and MTurk preference
score. Relying on extra label information, SNGAN achieved
a competitive FID score of 17.5 on CIFAR-10 as reported
in [26]. Meanwhile, our SWGAN reaches an even lower
score of 17.4 without the use of ground truth labels. The
visual results reported in Fig. 4 are consistent with the FID
scores in Tab. 1. We believe that the good performance of
SWGAN mainly results from the efﬁcient approximation of
the proposed SWD on multiple one-dimensional marginal
distributions of the training data.
Stability Study.
In addition to the optimal architecture
comparison, we also study the model stability under a variety
of settings: ConvNet and ResNet, with normalization (w/
norm) and without normalization (w/o norm). As shown in
Tab. 2, our proposed models are less sensitive in terms of
FID scores, which is credited to the easier approximation of

3718

Human Preference Score

SWAE / VAE
SWAE / WAE-MMD
SWAE / AAE (WAE-GAN)
SWGAN / WGAN-GP
SWGAN / SNGAN
SWGAN / CTGAN
SWGAN / SWG
PG-SWGAN / PG-WGAN
PG-SWGAN-3D / VGAN
PG-SWGAN-3D / MoCoGAN
PG-SWGAN-3D / PG-WGAN-3D

0.74 / 0.26
0.55 / 0.45
0.48 / 0.52
0.61 / 0.39
0.66 / 0.34
0.56 / 0.44
0.69 / 0.31
0.55 / 0.45
0.91 / 0.09
0.95 / 0.05
0.54 / 0.46

Figure 3. Left: Training and hyperparameter study for SWAE (top row) and SWGAN (bottom row). Right: Preference score from MTurk
user study for generated images on CelebA and synthesized videos on TrailerFaces.

ResNet (w/ norm) ResNet (w/o norm) ConvNet (w/ norm) ConvNet (w/o norm)

WAE-MMD

AAE (WAE-GAN)

SWAE

CTGAN

SWG

SWGAN

64.0
62.3
63.2

16.0
24.3
13.0

61.8
56.7
59.1

16.5
29.1
14.8

55.8
48.3
65.2

19.5
22.2
19.2

67.8
66.1
48.6

19.7
28.5
18.8

Table 2. FID scores of various architectures on CelebA. The opti-
mal architectures are ConvNet for SWG, WAE-MMD, AAE (WAE-
GAN), ResNet for CTGAN, SWGAN, and ConvNet without nor-
malization (w/o norm) for SWAE.

SWD (see visual results in supplementary material).
Training and Hyperparameters. Fig. 3 (Left b, f) show
that the visual quality produced by our SWAE and SWGAN
increases progressively with increasing training iterations.
Also, using a small number of SWD blocks—3 primal and 4
dual blocks (Fig. 3 (Left c, g))—is sufﬁcient to achieve top
performances. The 4 dual blocks (4×128 unit vectors) in our
SWGAN, stand in contrast to the 10000 random unit vectors
required by SWG [9]. This conﬁrms the efﬁciency of our
learnable SWD blocks. In another experiment, we study the
impact of the Lipschitz constant k, k′ for SWGAN and bin
number l for SWAE. Fig. 3 (Left d, h) show that SWGAN
favors relatively small values of k. k′ is determined to be 0
(see supplementary material). The optimal bin number for
SWAE is 32. By analyzing the trade-off between computa-
tional complexity and performance, we set the r-dimension
to 128 (Alg. 1, 3). We also determine λ1, λ2 (Eq. 13) to be
20, 10 using grid search. Both studies are presented in the
supplementary material. The learning rate of SWGAN and
SWAE is determined empirically to be 0.0003. Finally, we
set the discriminator iterations per training step of SWGAN
to 4 for LSUN and CelebA and 5 for CIFAR-10.

5. Experiments under Progressive Training

Encouraged by the visual quality and stability improve-
ments on standard benchmarks, we evaluate our proposed
model for high resolution image and video generation under
the progressive training manner suggested by [16].
Higher Resolution Image Generation. For this task, we
use the CelebA-HQ [16] and LSUN [38] datasets, which
contain 1024×1024 and 256×256 images respectively. To
improve high resolution image generation, [16] introduces a

progressive growing training scheme for GANs (PG-GAN).
PG-GAN uses WGAN-GP loss (PG-WGAN) to achieve
state-of-the-art high resolution image synthesis. For fair
comparison, we equip the same progressive growing archi-
tecture with our proposed SWGAN objective and its dual
SWD blocks (PG-SWGAN). As shown in Fig. 3 (Right)
and Fig. 5, our PG-SWGAN can outperform PG-WGAN in
terms of both qualitative and quantitative comparison on the
CelebA-HQ and LSUN datasets.
Higher Resolution Video Generation. We introduce a new
baseline unsupervised video synthesis method along with a
new facial expression video dataset5. The dataset contains
approximately 200,000 individual clips of various facial ex-
pressions, where the faces are cropped with 256×256 resolu-
tion from about 6,000 Hollywood movie trailers on YouTube.
Thus, we name the dataset as TrailerFaces. For progressive
video generation, we exploit a new PG-GAN network de-
sign for unsupervised video generation. We progressively
scale the network in spatio-temporal dimension such that
it can produce spatial appearance and temporal movement
smoothly from coarse to ﬁne. Fig. 3 (Right) shows the superi-
ority of our model over the state-of-the-art methods [34, 32]
in terms of preference score. For qualitative comparison,
please refer to our supplementary videos.

Based on the proposed PG-GAN design, we evaluate the
original WGAN loss (PG-WGAN-3D) and our proposed
SWGAN loss (PG-SWGAN-3D). Fig. 3 (Right) and Fig. 5
present their qualitative and quantitative comparison. For
the FID evaluation, we follow [35] to compute the video
FID scores for PG-WGAN-3D and PG-SWGAN-3D. The
higher preference score (Fig. 3 (Right)) and the lower FID
score (Fig. 5) of our PG-SWGAN-3D reﬂect the advantage
of using our proposed SWGAN.
Limitations. For pure AE-based generative models, includ-
ing SWAE, the extension to high resolution image and video
synthesis tasks is non-trivial. The challenges for SWAE
to generate high quality images and videos on par with
SWGAN remain. We plan to address this performance gap
in future research.

5Both the baseline code and dataset will be released at https://

github.com/musikisomorphie/swd.git

3719

VAE

WAE-MMD

AAE (WAE-GAN)

SWAE

SWG

CTGAN

WGAN-GP

SWGAN

CIFAR-10

CelebA

CIFAR-10

CelebA

LSUN

Figure 4. Visual results for SWAE, SWGAN, and compared methods. More results are available in the supplementary material.

PG-WGAN

PG-SWGAN

CelebA-HQ

LSUN

7.5

5.5

8.4

PG-WGAN-3D

8.0

PG-SWGAN-3D

TrailerFaces

462.6

404.1

Figure 5. Visual and FID results for compared methods on higher resolution images/videos. More results are available in the supplementary.

6. Conclusion

In this paper, we introduce a novel way of efﬁciently
approximating the primal and dual SWD. As concrete ap-

plications, we enhance modern AE-based and GAN models
with the resulting primal and dual SWD blocks. For image
and video synthesis, both qualitative and quantitative results
show the superiority of our models over other approaches.

3720

References

[1] Jonas Adler and Sebastian Lunz. Banach Wasserstein GAN.

In NIPS, 2018. 1

[2] Luca Ambrogioni, Umut G¨uc¸l¨u, Ya˘gmur G¨uc¸l¨ut¨urk, Max
Hinne, Marcel AJ van Gerven, and Eric Maris. Wasserstein
variational inference. In NIPS, 2018. 1

[3] Martin Arjovsky, Soumith Chintala, and L´eon Bottou. Wasser-
stein generative adversarial networks. In ICML, 2017. 1, 2,
6

[4] David Berthelot, Tom Schumm, and Luke Metz. BEGAN:
Boundary equilibrium generative adversarial networks. arXiv
preprint arXiv:1703.10717, 2017. 6

[5] Nicolas Bonneel, Julien Rabin, Gabriel Peyr´e, and Hanspeter
Pﬁster. Sliced and radon Wasserstein barycenters of measures.
Journal of Mathematical Imaging and Vision, 51(1):22–45,
2015. 1, 2

[6] Nicolas Bonnotte. Unidimensional and evolution methods for

optimal transportation. PhD thesis, Paris 11, 2013. 3, 4

[7] Nicolas Boumal, Bamdev Mishra, P-A Absil, and Rodolphe
Sepulchre. Manopt, a matlab toolbox for optimization on
manifolds. The Journal of Machine Learning Research,
15(1):1455–1459, 2014. 5

[8] Rui Castro. The empirical distribution function and the his-
togram. Lecture Notes, 2WS17-Advanced Statistics. Depart-
ment of Mathematics, Eindhoven University of Technology,
2015. 4

[9] Ishan Deshpande, Ziyu Zhang, and Alexander Schwing. Gen-
erative modeling using the sliced Wasserstein distance. In
CVPR, 2018. 1, 3, 6, 7

[10] Aude Genevay, Gabriel Peyr´e, and Marco Cuturi. Learning
generative models with Sinkhorn divergences. arXiv preprint
arXiv:1706.00292, 2017. 1

[11] Ishaan Gulrajani, Faruk Ahmed, Martin Arjovsky, Vincent
Dumoulin, and Aaron Courville. Improved training of Wasser-
stein GANs. In NIPS, 2017. 1, 2, 5, 6

[12] Simon Haykin and Neural Network. A comprehensive foun-

dation. Neural networks, 2(2004):41, 2004. 4

[13] Martin Heusel, Hubert Ramsauer, Thomas Unterthiner, Bern-
hard Nessler, and Sepp Hochreiter. GANs trained by a two
time-scale update rule converge to a local Nash equilibrium.
In NIPS, 2017. 6

[14] Kurt Hornik. Approximation capabilities of multilayer feed-
forward networks. Neural networks, 4(2):251–257, 1991.
4

[15] Zhiwu Huang and Luc Van Gool. A Riemannian network for

cessing and machine-learning applications. IEEE Signal Pro-
cessing Magazine, 34(4):43–59, 2017. 1, 2

[20] Soheil Kolouri, Phillip E Pope, Charles E Martin, and Gus-
tavo K Rohde. Sliced wasserstein auto-encoders. In ICLR,
2019. 5

[21] Soheil Kolouri, Yang Zou, and Gustavo K Rohde. Sliced
Wasserstein kernels for probability distributions. In CVPR,
2016. 1, 2, 3

[22] Alex Krizhevsky and Geoffrey Hinton. Learning multiple
layers of features from tiny images. Technical report, Citeseer,
2009. 6

[23] Huidong Liu, GU Xianfeng, and Dimitris Samaras. A two-
step computation of the exact GAN Wasserstein distance. In
ICML, 2018. 1

[24] Ziwei Liu, Ping Luo, Xiaogang Wang, and Xiaoou Tang.

Deep learning face attributes in the wild. In ICCV, 2015. 6

[25] Alireza Makhzani, Jonathon Shlens, Navdeep Jaitly, Ian
Goodfellow, and Brendan Frey. Adversarial autoencoders. In
ICLR, 2016. 5, 6

[26] Takeru Miyato, Toshiki Kataoka, Masanori Koyama, and
Yuichi Yoshida. Spectral normalization for generative adver-
sarial networks. In ICLR, 2018. 2, 6

[27] Franc¸ois Piti´e, Anil C Kokaram, and Rozenn Dahyot. Auto-
mated colour grading using colour distribution transfer. CVIU,
107(1):123–137, 2007. 3, 6

[28] Julien Rabin, Gabriel Peyr´e, Julie Delon, and Marc Bernot.
Wasserstein barycenter and its application to texture mixing.
In International Conference on Scale Space and Variational
Methods in Computer Vision, pages 435–446. Springer, 2011.
3

[29] Alec Radford, Luke Metz, and Soumith Chintala. Unsuper-
vised representation learning with deep convolutional genera-
tive adversarial networks. arXiv preprint arXiv:1511.06434,
2015. 6

[30] Tim Salimans, Han Zhang, Alec Radford, and Dimitris
Metaxas. Improving GANs using optimal transport. In ICLR,
2018. 1, 5

[31] Ilya Tolstikhin, Olivier Bousquet, Sylvain Gelly, and Bern-
hard Schoelkopf. Wasserstein auto-encoders. In ICLR, 2018.
1, 2, 6

[32] Sergey Tulyakov, Ming-Yu Liu, Xiaodong Yang, and Jan
Kautz. MoCoGAN: Decomposing motion and content for
video generation. In CVPR, 2018. 7

[33] C´edric Villani. Optimal transport: old and new, volume 338.

Springer Science & Business Media, 2008. 1

SPD matrix learning. In AAAI, 2017. 5

[34] Carl Vondrick, Hamed Pirsiavash, and Antonio Torralba. Gen-

[16] Tero Karras, Timo Aila, Samuli Laine, and Jaakko Lehtinen.
Progressive growing of GANs for improved quality, stability,
and variation. In ICLR, 2018. 2, 3, 7

[17] Diederik Kingma and Jimmy Ba. Adam: A method for
stochastic optimization. arXiv preprint arXiv:1412.6980,
2014. 5

[18] Diederik P Kingma and Max Welling. Auto-encoding varia-

tional bayes. arXiv preprint arXiv:1312.6114, 2013. 6

[19] Soheil Kolouri, Se Rim Park, Matthew Thorpe, Dejan Slepcev,
and Gustavo K Rohde. Optimal mass transport: Signal pro-

erating videos with scene dynamics. In NIPS, 2016. 7

[35] Ting-Chun Wang, Ming-Yu Liu, Jun-Yan Zhu, Guilin Liu,
Andrew Tao, Jan Kautz, and Bryan Catanzaro. Video-to-video
synthesis. In NIPS, 2018. 7

[36] Xiang Wei, Boqing Gong, Zixia Liu, Wei Lu, and Liqiang
Wang. Improving the improved training of Wasserstein GANs:
A consistency term and its dual effect. In ICLR, 2018. 1, 2, 6

[37] Jiqing Wu, Zhiwu Huang, Janine Thoma, Dinesh Acharya,
and Luc Van Gool. Wasserstein divergence for GANs. In
ECCV, 2018. 1, 5

3721

[38] Fisher Yu, Ari Seff, Yinda Zhang, Shuran Song, Thomas
Funkhouser, and Jianxiong Xiao. LSUN: Construction of a
large-scale image dataset using deep learning with humans in
the loop. arXiv preprint arXiv:1506.03365, 2015. 6, 7

3722

