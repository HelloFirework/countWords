Learning Image and Video Compression through Spatial-Temporal Energy

Compaction

Zhengxue Cheng, Heming Sun, Masaru Takeuchi, Jiro Katto

Department of Computer Science and Communication Engineering, Waseda University, Tokyo, Japan

{zxcheng@asagi., hemingsun@aoni., masaru-t@aoni., katto@}waseda.jp

Abstract

Compression has been an important research topic for
many decades, to produce a signiﬁcant impact on data
transmission and storage. Recent advances have shown a
great potential of learning image and video compression.
Inspired from related works, in this paper, we present an
image compression architecture using a convolutional au-
toencoder, and then generalize image compression to video
compression, by adding an interpolation loop into both
encoder and decoder sides. Our basic idea is to realize
spatial-temporal energy compaction in learning image and
video compression. Thereby, we propose to add a spa-
tial energy compaction-based penalty into loss function, to
achieve higher image compression performance. Further-
more, based on temporal energy distribution, we propose
to select the number of frames in one interpolation loop,
adapting to the motion characteristics of video contents.
Experimental results demonstrate that our proposed image
compression outperforms the latest image compression s-
tandard with MS-SSIM quality metric, and provides higher
performance compared with state-of-the-art learning com-
pression methods at high bit rates, which beneﬁts from our
spatial energy compaction approach. Meanwhile, our pro-
posed video compression approach with temporal energy
compaction can signiﬁcantly outperform MPEG-4 and is
competitive with commonly used H.264. Both our image
and video compression can produce more visually pleasant
results than traditional standards.

1. Introduction

Data compression has been a signiﬁcant research topic in
the ﬁeld of signal processing for several decades. In terms
of image compression codecs, existing image compression
standards, such as JPEG [1], JPEG2000 [2], and BPG,
which uses the intra-coded HEVC [3], rely on the hand-
crafted encoder-decoder pipeline. These image formats are
widely used in various image applications. Conventional

(a) Reconstructed images kodim21 from kodak dataset.

(b) Reconstructed frame akiyo cif from VTL dataset.

Figure 1: Visualized results of our approach and commonly
used image/video compression standards. With the same
bit bugets, our approach produces more visually pleasant
results than conventional standards.

video coding algorithms, including H.261, MPEG-4 Part 2,
commonly used standard H.264/AVC [4], most recent stan-
dard HEVC/H.265 [3], have also achieved impressive per-
formance through efforts spanning several decades. How-
ever, along with the proliferation of high-resolution im-
ages and videos, as well as the development of novel im-
age/video formats, existing standards are not expected to be
the optimal compression solution for all types of contents.

Recently, deep learning has been successfully applied to
compression tasks. There are several potential advantages
for learning compression to enhance the performance of
image and video compression. First, the encoder-decoder
pipeline in conventional compression standards resembles
an autoencoder to learn high-level representation. Although

10071

autoencoders are basically applied to dimensionality reduc-
tion tasks [5], they are able to achieve better compression
performance. Most recent learning based compression ap-
proaches, including recurrent neural networks [8, 9, 10],
convolutional neural networks [11, 12, 13, 14, 15, 16, 17]
and generative adversarial networks [18, 19, 20], have al-
l adopted the autoencoder architecture. Next, the tempo-
ral redundancy of video compression can be intuitively re-
duced by using learning based video prediction, generation
and interpolation approaches. The works [21, 22] have al-
ready achieved promising results by using prediction or in-
terpolation neural networks. The last advantage of learning
based compression is that, although the development and
standardization of a conventional codecs has historically s-
panned several years, a deep learning based compression
approach can be adapted much quicker because all of the
parameters in an autoencoder architecture can be learned in
an automatic and unsupervised manner. Therefore, learning
compression is expected to become more generalized and
more efﬁcient.

However, there are still issues to be addressed. Gener-
ally speaking, image compression exploits spatial distribu-
tion, and video compression exploits temporal distribution
to learn high-level features. Good spatial-temporal energy
compaction is important for high coding efﬁciency, accord-
ing to traditional digital coding theory [25]. Previous work-
s use rate-distortion optimization, but few works analyze
whether spatial-temporal energy is well-compacted or not.
In this paper, we present a convolutional autoencoder ar-
chitecture with differential quantization and entropy estima-
tion for image compression. Thereby, we propose to add
an energy compaction-based penalty into loss function, to
achieve higher image compression performance. Further-
more, we generalize our image compression to video com-
pression, by adding an interpolation loop to image encoder
and propose to adaptively select number of frames in one in-
terpolation loop by analyzing temporal energy distribution.
We compare our image compression to state-of-the-art
image standards and recent learning approaches. Our ap-
proach achieves signiﬁcantly better MS-SSIM in compar-
ison with the latest image compression standard BPG and
outperforms state-of-the-art learning compression methods
at high bit rate. On the other hand, our video compression is
competitive with H.264 with MS-SSIM and produce more
visually pleasant reconstructed videos.

2. Related Work

Hand-crafted Compression Existing image compression
standards, such as JPEG [1], JPEG2000 [2], and BPG,
which uses the intra-coded HEVC [3], reply on hand-
crafted module design individually. Speciﬁcally, these mod-
ules include intra prediction, discrete cosine transform or
wavelet transform, quantization, and entropy coder such as

Huffman coder or content adaptive binary arithmetic coder
(CABAC). They design each module with multiple modes
and conduct the rate-distortion optimization to determine
the best mode. During the development of next-generation
compression algorithms, some hybrid methods have been
proposed to improve the performance, by taking advantage
of both conventional compression algorithms and latest ma-
chine learning approaches, such as [6, 7].

State-of-the-art video compression algorithms, such as
HEVC/H.265 [3], H.264 [4], MPEG-4 Part 2, incorporate
the inter prediction into the encoder architecture. Inter pre-
diction utilize the temporal similarity of neighboring frames
to reduce the transmitted information. As for the order of
reference frames, both H.264 and HEVC/H.265 support t-
wo conﬁgurations, that is low delay P and random access.
low delay P only use the previous frames as uni-directional
references, while random access allows bidirectional refer-
encing in a hierarchical way. Random access can achieve
higher coding efﬁciency than low delay P. The key tech-
nique in inter prediction is integer and fractional motion es-
timation using block matching and motion compensation.
Learning Compression Recently, end-to-end image com-
pression has attracted great attention. Some approaches
proposed to use recurrent neural networks (RNNs) to en-
code the residual information between the raw image and
the reconstructed images in several iterations, such as the
work [8, 9] optimized by mean-squared error (MSE) or
the work [10] optimized by MS-SSIM [30]. Some gen-
erative adversarial networks (GANs) based techniques are
proposed in [18, 19, 20] for high subjective reconstruction
quality at extremely low bit rates. Other notable approaches
include differentiable approximations of round-based quan-
tization [11, 12, 14] for end-to-end training, content-aware
importance map [17], hyperprior entropy model [13] and
conditional probability models [15] for entropy estimation.
However, learning video compression has not yet been
largely exploited. Only a few related works [21][22] have
been proposed. Wu et al. [21] ﬁrstly proposed to use im-
age interpolation network to predict frames except for key
frames. Chen et al. [22] relied on traditional block based ar-
chitecture to use CNN nets for predictive and residual sig-
nals. It is highly desired to further exploit learning video
compression algorithms.

3. Proposed Method

Our proposed learning image and video compression is
illustrated in Fig. 2, and image compression models serve
for frames in video compression architecture.

3.1. Learning Image Compression

Given an image, a compression system can be consid-
ered as an analysis transform f at the encoder side, and
a synthesis transform g at the decoder side, as shown in

10072

(a) Learning Image Compression

(b) Learning Video Compression

Figure 2: Overview of our proposed learning image and video compression with spatial-temporal energy compaction.

Fig. 2(a),

y = fθ(x)
ˆx = gφ(ˆy)

(1)

where x, ˆx, y, and ˆy are the original images, reconstruct-
ed images, compressed data (also called latent presenta-
tion) before quantization, and quantized compressed data,
respectively. θ and φ are optimized parameters in the anal-
ysis and synthesis transforms, respectively.

To obtain high-level features, the analysis and synthesis
transforms can be composed into a sequence of consecutive
down(up)sampling operations, which can be implemented
by convolutional or transposed convolutional ﬁlter with a
stride of 2. Our network architecture mainly refer to the au-
toencoder in [12], but according to [24], it is pointed that
super resolution is achieved more efﬁciently by ﬁrst con-
volving the images and then upsampling, instead of ﬁrst up-
sampling and then convolving. Thus we use 2 convolutional
ﬁlters as one down(up)sampling unit, and the network archi-
tecture is given in Fig. 3. Assume we have n downsampling

Figure 3: Network architecture of analysis and synthesis
transform, where “k3 n128-s2” represents a convolution
layer with kernel size 3, 128 channels and a stride of 2. T-
conv represents transposed convolutional layers.

units and the number of convolutional ﬁlters in the last lay-
er is K, the compressed data y will have the dimension of
2n × W
H
2n × K. In practice, n = 3, K = 48, H and W are
set as 128 due to memory limitation.

Based on the rate-distortion cost function in traditional

codecs, the loss function is deﬁned as follows:

J(θ, φ; x) = λD(x, ˆx) + R(ˆy)

(2)

where λ controls the tradeoff between the rate and distor-
tion. D represents the distortion between the original im-
ages x and reconstructed images ˆx; R represents the bits
required to encode the quantized compressed data ˆy.

3.1.1 Quantization and Entropy Estimation

In Fig. 2(a), Q represents quantization, AE and AD repre-
sent the arithmetic encoder and arithmetic decoder, respec-
tively. In traditional codecs, quantization is implemented by
using a round function (denoted as Q[·]), and its derivative
is almost zero except at the integers. Therefore, it cannot be
directly incorporated into the gradient-based optimization
process. Several quantization approximations have been
proposed, such as uniform noise approximation [12] and
soft vector quantization [14]. The approximate quantized
ˆy are shown in Fig. 4, where soft vector quantization has
a shaping parameter σ and high σ leads to accurate result-
s, low σ is good for smooth gradient propagation. In oth-
er studies [11][15], the derivation was replaced in the back
propagation only, but it was guaranteed that the quantized
value was correct in the forward propagation. By conduct-
ing experiments, we found different quantization methods
have very little effect on the compression performance. For
simplicity, we used additive uniform noise approximation.
According to the Shannon theory [34], the rate is lower-
bounded by the entropy of the discrete probability distribu-

10073

by constructing several fake compressed data ck, whose k-
th channel is all-1 and other channels are all-0. By feeding
these ck as ˆy into a given pre-trained synthesis transform in-
dividually, we stack σ2
ˆx to form Bk. Both Ak and Bk have
the dimension of K × 1.

Based on Eq.(4), optimum bit allocation is formulat-
ed [26]. With a constant rate constraint, minimized recon-
struction error is given by

min{σ2

r } ∝

K−1

Y

i

(AkBk)

(5)

i

Detailed proof can be referred to [26]. If QK−1

(AkBk)
can be minimized, spatially energy can be optimally com-
pact. Thus, we propose to add a penalty in loss function to
regularize Ak and Bk. First, we need to center the energy
in a few channels as much as possible. We normalize Ak
by dividing its sum, therefore, normalized Ak measures the
energy distribution for yk. For example, if Ak[e] = 0.8 for
the e-th channel, 80% of energy will be distributed in the
e-th channel. Then, we construct a penalty term by using
the entropy of the energy distribution as follows:

P = E[−Ak log2 Ak]

(6)

We add this penalty to the loss function. After several
iterations, most of the energy is centered only in one or a
few channels, while the other channels have little energy.
We denote the channel with the largest energy as e. Next,
we minimize the corresponding Bk[e] to make AkBk mini-
mized, and the penalty term is deﬁned as:

P = Bk[e]

(7)

Finally, the loss function is deﬁned as:

J(θ, φ; x) = λD(x, ˆx) + R(ˆy) + βP (Ak, Bk)

(8)

Figure 4: Performance with different quantization methods.

tion of the quantized codes, as follows:

R = E
˜y∼q

[− log2(p˜y(˜y))]

(3)

where q is the actual distribution of the compressed code ˜y
and p˜y(˜y) is the entropy model. Thus, several entropy esti-
mation methods have been introduced by related studies, in-
cluding soft histogram based entropy estimation [14], non-
parametric factorized entropy model [13], 3D-CNN based
conditional probability model [15], and hyperprior based
entropy model [13]. We used a fully factorized entropy
model [13], which yields promising image compression
performance. Factorized entropy model produces an esti-
mated entropy and serves for AE and AD. During the test,
we can use JPEG2000 entropy coder to generate bitstream.

3.1.2 Spatial Energy Compaction Constraint

According to digital coding theories [25], good energy com-
paction property is critical for high coding efﬁciency perfor-
mance. The analysis transform converts input x into com-
pressed data y with K spatial channels, which resembles a
subband coding system. In a subband coding system, for
any arbitrary transforms (which is not required to be non-
orthogonal), the energy of K spatial channels satisﬁes [26],

σ2
y = Akσ2
K−1

x

σ2
r =

Bkσ2
q

X

k=0

where q is the quantization error for each spatial channel,
i.e. q = ˆy − y, and r is reconstructed error of images,
i.e. r = ˆx − x. σ2 denotes the variance of a certain data
to represent the energy. Ak describes the energy distribu-
tion of channels in the analysis transform, determined by x
and optimized parameter θ; Bk measures the extent of the
quantization error’s impact on the reconstructed error for
a speciﬁed channel in the synthesis transform, determined
by quantization errors and parameter φ. Ak can be easi-
ly calculated by obtaining the variance of x and y. Bk is
determined by both the quantization errors and the param-
eter φ during the synthesis transform. Bk can be estimated

where β controls the inﬂuence of the penalty term on the
loss function.

(4)

3.2. Learning Video Compression

Considering that a video consists of consecutive frames,
a video compression system can be simply extended from
image compression system as

y(t) = fθ(x(t))
ˆx(t) = gφ(ˆy(t))

(9)

where x(t) represents {x(0), x(1), · · ·, x(T )}, and similar no-
tations are for y(t), ˆy(t), ˆx(t), t ∈ [0, T ). We deﬁne T as
group of pictures (GOPs) as HEVC/H.265 [3], which can
be encoded and decoded independently. Two consecutive
groups share the same boundary frames.

10074

Due to the temporal similarity of neighboring frames,
encoding residual information between two frames can
gain more coding efﬁciency than encoding them separate-
ly. Thus, a more general form of video compression system
is rewritten as

E

z(t) = x(t) − ˜x(t)
y(t) = fθ(z(t))
ˆz(t) = gφ(ˆy(t))
ˆx(t) = ˆz(t) + ˜x(t)

D

(10)

(a) Sequence Akiyo in VTL, HT =2.673.

E and ˜x(t)

where ˜x(t)
D are predicted frame using neighboring
frames at encoder and decoder side, repectively. For the
ﬁrst frame, there is no previous information, i.e. ˜x(0)
E =
˜x(0)
D = 0, video compression reduces to a image compres-
sion, therefore, we call these key frames as I-frame. The
block diagram of the proposed learning image compression
is illustrated in Fig. 2(b).

3.2.1

Interpolation Loop

The closer generated predictive frame ˜x(t) gets to raw
frames x(t), the fewer information z(t) has. Therefore, a
high-quality frame interpolation network is desired. We use
the latest work [35] to formulate the interpolation as a con-
volution h over two neighboring frames as

˜x(t) = hψ(x(t−i), x(t+i))

(11)

where i is the distance between reference frames and gen-
erated frames. ψ are optimized parameters in interpolation
network h. More importantly, according to Eq.(10), pre-
dicted frames should be kept the same at both encoder and
decoder side to prevent the quality gap,

˜x(t)
E = ˜x(t)

D

(12)

Therefore, the encoder and decoder should see the same in-
formation equally. Then, the input for interpolation network
should be reconstructed frames, not raw frames. Eq.(11) is
rewritten as

˜x(t) = hψ(ˆx(t−i), ˆx(t+i))

(13)

We use a local interpolation loop at the encoder side to store
reconstructed frames in the buffer, as Fig. 2(b).

3.2.2 Temporal Energy Compaction

To further reduce the temporal redundancy, inspired by
HEVC random access [3] and the work [21], we use a hier-
archy interpolation method, which can be illustrated as

z(0) = x(0), z(T ) = x(T )
˜x( T
˜x( T

2 ) = hψ(ˆx(0), ˆx(T ))
4 ) = hψ(ˆx(0), ˆx( T

2 )), ˜x( 3∗T

4 ) = hψ(ˆx( T

2 ), ˆx(T ))

(14)

(b) Sequence Bus in VTL, HT =7.999

Figure 5: Examples of Temporal Energy Histogram for RT

The hierarchy interpolation is recursively conducted until
all the frames are reconstructed.

Each video contents has different motion textures, so the
T should be adaptively selected to ﬁt the motion character-
istic of videos, so we propose an adaptive T determination
strategy based on temporal energy compaction. We deﬁne
the temporal motion difference in two neighboring I-frames
with a proper distance τ (in our experiments τ = 16) as

RT = x(τ ) − x(0)

(15)

then, we consider the distribution of RT , and calculate the
entropy of Rt as

HT = E[−PRT log2 PRT ]

(16)

HT describes the motion characteristic of video sequences,
as shown in Fig. 5. Large HT implies that this video has
fast motion objects, while low motion videos has small HT .
Then we propose to select the T using

T =




U ≤ HT
L ≤ HT < U

2,
8,
16, HT < L

(17)

where L, U are constants for lower and upper bounds. Low
motion videos are assigned with T = 16, that is, intermedi-
ate (T − 1) frames can be interpolated, without destroying
the quality. In this case, z(t) is already small, so we send
fewer I-frames to achieves temporal energy compaction. As
for high motion videos, T is only set as 2, because I-frames
do not provide enough information to interpolate a high-
quality frame, so we remove the hierarchy interpolation to
prevent the error propagation.

10075

4. Implementation Details

Dataset To train our image compression models, we used
a subset of ImageNet database [28], and cropped them into
millions of 128 × 128 samples. For testing, we used com-
monly used Kodak lossless image database [29] with 24 un-
compressed 768×512 images. To validate the robustness of
our proposed method, we also tested the proposed method
on the CVPR workshop CLIC validation dataset [23] with
large and various resolutions up to about 2K. To test the
performance of video compression, we use the widely used
Video Trace Library (VTL) dataset [36], which includes 20
videos with the resolution of 352×288 and 8 test sequences
with the resolution of 832 × 480 and 416 × 240, which are
commonly used by video coding standardization group with
rich texture scenes and motion scenes.
Training Details To train our image compression autoen-
coder, the model was optimized using Adam [27] with a
batch size of 16. The learning rate was maintained at a ﬁxed
value of 1 × 10−4 during the training process. In the Eq.(8),
β was set to 0.001. In our experiments, we add the ener-
gy compaction penalty to the model at high bit rate, and
train for several 105 iterations, and then train the model up
to several 106 iterations for each λ. By introducing differ-
ent λ to ﬁne-tune a pre-trained autoencoder, we can obtain
variable bit rates. We have found that by changing λ with
a pre-trained autoencoder, the energy distribution property
will not be changed largely, as long as the initial state of the
parameters in the models already has a good spatially ener-
gy compaction. Thus, we only consider the penalty for one
λ trial when training the neural network. Here, we obtained
six models with λ in the set {2, 4, 8, 16, 32, 64}.

In our video compression approach, we use the pre-
trained models of [35] to build our reconstruction loop. By
checking the histogram of HT using VTL dataset, we used
L = 6.0, U = 8.0 in Eq.(17) to ensure majority of se-
quences to select proper T and averaged T is equal to 8.
Measurements
To achieve high subjective quality, we
used a popular MS-SSIM [30] as distortion term deﬁned
by D = 1 − MS-SSIM(x, ˆx). To measure the coding efﬁ-
ciency, the rate is measured in bits per pixel (bpp), and the
rate-distortion (RD) curves are drawn to demonstrate their
coding efﬁciency.

5. Experiments

In this section, we conduct experiments to evaluate the

performance, and present comparison results.

5.1. Ablation study

In order to show the effectiveness of our proposed
spatial-temporal energy compaction approach, we ﬁrst per-
form the following ablation study.

We compare the performance of our image compression

(a) MS-SSIM evaluated on Kodak.

(b) MS-SSIM evaluated on VTL.

Figure 6: Ablation Study.

with spatial energy compaction constraint to the case with-
out energy constraint. The RD performance averaged on the
Kodak dataset is presented in Fig. 6(a). It is observed that
energy compaction constraint can help autoencoder to gain
a higher coding efﬁciency, especially with large bit budgets.
To visualize how temporal energy compact works, we
conduct the experiments of learning video compression
with different T , as shown in Fig. 6(b). Along with the
increasing of T , coding efﬁciency gets improved, but the
performance almost saturates between T = 8 and T = 16.
Our approach can adaptively select T to achieve better rate-
distortion optimization than the case with constant T .

5.2. Performance of learning image compression

We compare our method with well-known compression
standards, and recent neural network-based learned com-
pression methods, as shown in Fig. 7(a), where MS-SSIM
is converted to decibels (−10 log10(1−MS-SSIM)) to illus-
trate the difference clearly. For JPEG and JPEG2000, we
used the ofﬁcial software libjpeg [31] and OpenJPEG [32],
which uses the default conﬁguration YUV420 format. The
state-of-the-art image compression standard was BPG [33],
for which we used the non-default YUV444 format refer
to [15][18]. Because the source codes of previous neural
networks based approaches were not available, we carefully
traced the point in the RD curves from the respective stud-
ies of Nick et al. [10], Theis et al. [11], Ball´e et al. [12],
and Ripple et al. [18]. The data in Mentzer et al. [15] were
obtained from their project page. It can be observed that
our method signiﬁcantly outperforms Nick et al. [10], The-
is et al. [11], Ball´e et al. [12]. Our methodology is better
than the work of Mentzer et al. [15] and Ripple et al. [18]
at high bit rate, because our spatially energy compact con-
straint can allocate bits more efﬁciently, with higher bit bud-
gets. Our proposal achieves comparable performance with
Mentzers work et al. [15] and Ripple et al. [18] at low bit
rate. Currently we only use a factorized entropy model and
our method does not depend on the design of entropy mod-

10076

(a) Kodak image dataset.

(b) CLIC image dataset.

(c) VTL video dataset.

Figure 7: Comparison results using different datasets.

Figure 8: Comparison results for each video sequence.

els. Thus, in future work, our bit allocation method can
be combined with a more complicated context adaptive en-
tropy model, such as [13], to yield a better result. Fig. 7(b)
shows the comparison between JPEG, JPEG2000, and BPG
averaged on the CLIC validation dataset. Our method out-
performed JPEG, JPEG2000 and BPG signiﬁcantly in terms
of MS-SSIM, with high resolution images.

5.3. Performance of learning video compression

We compare our learning video compression with state-
of-the-art video compression algorithm and recent learn-
ing video compression methods [21]. For fair comparison,
we use the the averaged results on each video sequences
as [21]. The performance using VTL is shown in Fig. 7(c).
For HEVC/H.265 and H.264, we use the ofﬁcial software
HM 16.0 [37] and JM 19.0 [38] with random access conﬁg-
uration. The GOP is set as 8 and intra period is also 8 to
make the comparison fair. For MPEG-4 Part2 and H.261,

we use FFMPEG software. The data point of [21] are from
their original paper. It is observed that our method outper-
forms MPEG-4 and H.261 signiﬁcantly and is competitive
with H.264. Moreover, we offer a wide range of bit rates
and achieve better performance even at low bit rate than the
work [21], which beneﬁts from our proposed interpolation
loop and temporal energy compaction.

To cover a variety of video contents, we also test
our codec using common test sequences, following the
work [22], whose results are a little worse than H.264. The
RD curves of eight sequences are shown in Fig. 8. It can be
observed that our method outperforms H.264 for most se-
quences, and even outperforms HEVC/H.265 for sequences
BasketballPass and BQSquare.

5.4. Qualitative results

We visualize some reconstructed images and videos to

demonstrate qualitative performance.

10077

Figure 9: Example of one reconstruction image kodim01 from Kodak dataset.

Figure 10: Example of one reconstruction frame in Video paris cif from VTL dataset.

The reconstructed images are shown in Fig. 1(a) and
Fig. 9. Fig. 1(a) shows examples kodim21 with approxi-
mately 0.12 bpp and a compression ratio of 200:1. It can
be observed that the cloud above the sea appear more nat-
ural in our reconstructed images using 0.115 bpp less bits
than BPG, JPEG2000, and JPEG. Particularly, for the BPG-
encoded images, blocking artifacts occur in the sky when a
large compression ratio is applied. Fig. 9 shows examples
kodim01 under approximately 0.24 bpp with a compression
ratio of 100:1, because the raw images are a lossless PNG
format with 24 bpp (8 bit for each color component). Thus,
it is observed that the latch on the door is maintained well in
our reconstructed images. However, the images are blurry
for the BPG, JPEG2000 and JPEG reconstructed images.

Some reconstructed frames from VTL dataset are shown
in Fig. 1(b) and Fig. 10. Using the interpolation loop, the
rate can be greatly saved. Clear block artifacts are observed
for MPEG-4 compressed frames. Many details and shapes,
such as woman’s eyes in Fig. 10, are destroyed in H.264
compressed frames. Unlike them, our approach do not have

any block artifacts to produce visually pleasant results.

6. Conclusion

We propose learning image and video compression ap-
proach through spatial-temporal energy compaction prop-
erty. Speciﬁcally, we propose to add a spatial energy
compaction-based penalty into loss function in image com-
pression models, to achieve higher performance. We gener-
alize image compression to video compression with an in-
terpolation loop and adaptive interpolation period selection
based on entropy of temporal information.

Experimental results demonstrate that our proposed im-
age compression outperforms BPG with MS-SSIM quali-
ty metric, and provides higher performance compared with
state-of-the-art learning compression methods. Our video
compression approach outperforms MPEG-4, and is com-
petitive with commonly used H.264. Both our image and
video compression can produce more visually pleasant re-
sults than traditional standards.

10078

References

[1] G. K Wallace, “The JPEG still picture compression stan-
dard”, IEEE Trans. on Consumer Electronics, vol. 38, no. 1,
pp. 43-59, Feb. 1991.

[2] Majid Rabbani, Rajan Joshi, “An overview of the JPEG2000
still image compression standard”, ELSEVIER Signal Pro-
cessing: Image Communication, vol. 17, no, 1, pp. 3-48, Jan.
2002.

[3] G. J. Sullivan, J. Ohm, W. Han and T. Wiegand, “Overview of
the High Efﬁciency Video Coding (HEVC) Standard”, IEEE
Transactions on Circuits and Systems for Video Technology,
vol. 22, no. 12, pp. 1649-1668, Dec. 2012.

[4] T. Wiegand, G. J. Sullivan, G. Bjontegaard, A. Luthra,
“Overview of the H.264/AVC Video Coding Standard”, IEEE
Transactions on Circuits and Systems for Video Technology,
vol. 13, no. 7, pp. 560-576, July. 2003.

[5] P. Vincent, H. Larochelle, Y. Bengio and P.-A. Manzagol,
“Extracting and composing robust features with denoising au-
toencoders”, Intl. conf. on Machine Learning (ICML), pp.
1096-1103, July 5-9. 2008.

[6] Z. Cheng, H. Sun, M. Takeuchi, J. Katto, “Performance Com-
parison of Convolutional AutoEncoders, Generative Adver-
sarial Networks and Super-Resolution for Image Compres-
sion”, CVPR Workshop and Challenge on Learned Image
Compression (CLIC), pp. 1-4, June 17-22, 2018.

[7] Z. Chen, Y. Li, F. Liu, Z. Liu, X. Pan, W. Sun, Y. Wang, Y.
Zhou, H. Zhu, S. Liu, “CNN-Optimized Image Compression
with Uncertainty based Resource Allocation”, CVPR Work-
shop and Challenge on Learned Image Compression (CLIC),
pp. 1-4, June 17-22, 2018.

[8] G. Toderici, S. M.O’Malley, S. J. Hwang, et al., “Variable rate
image compression with recurrent neural networks”, arXiv:
1511.06085, 2015.

[9] G, Toderici, D. Vincent, N. Johnson, et al., “Full Resolution
Image Compression with Recurrent Neural Networks”, IEEE
Conf. on Computer Vision and Pattern Recognition (CVPR),
pp. 1-9, July 21-26, 2017.

[10] Nick Johnson, Damien Vincent, David Minnen, et al., “Im-
proved Lossy Image Compression with Priming and Spa-
tially Adaptive Bit Rates for Recurrent Networks”, arX-
iv:1703.10114, pp. 1-9, March 2017.

[11] Lucas Theis, Wenzhe Shi, Andrew Cunninghan and Ferenc
Huszar, “Lossy Image Compression with Compressive Au-
toencoders”, Intl. Conf. on Learning Representations (ICLR),
pp. 1-19, April 24-26, 2017.

[12] J. Balle, Valero Laparra, Eero P. Simoncelli, “End-to-End
Optimized Image Compression”, Intl. Conf. on Learning Rep-
resentations (ICLR), pp. 1-27, April 24-26, 2017.

[13] Johannes Balle, D. Minnen, S. Singh, S. J. Hwang, N.
Johnston, “Variational Image Compression with a Hyper-
prior”,
Intl. Conf. on Learning Representations (ICLR),
pp. 1-23, 2018. https://tensorflow.github.io/
compression/

[14] E. Agustsson, F. Mentzer, M. Tschannen, L. Cavigelli, R.
Timofte, L. Benini, L. V. Gool, “Soft-to-Hard Vector Quan-
tization for End-to-End Learning Compressible Representa-
tions”, Neural Information Processing Systems (NIPS) 2017,
arXiv:1704.00648v2.

[15] F. Mentzer, E. Agustsson, M. Tschannen, R. Timofte, L.
V. Gool, “Conditional Probability Models for Deep Image
Compression”, IEEE Conf. on Computer Vision and Pat-
tern Recognition (CVPR), June 17-22, 2018. https://
github.com/fab-jul/imgcomp-cvpr

[16] Z. Cheng, H. Sun, M. Takeuchi, J. Katto, “Deep Convolu-
tional AutoEncoder-based Lossy Image Compression”, Pic-
ture Coding Symposium, pp. 1-5, June 24-27, 2018.

[17] M. Li, W. Zuo, S. Gu, D. Zhao, D. Zhang, “Learning Con-
volutional Networks for Content-weighted Image Compres-
sion”, IEEE Conf. on Computer Vision and Pattern Recog-
nition (CVPR), June 17-22, 2018.

[18] Ripple Oren, L. Bourdev, “Real Time Adaptive Image Com-
pression”, Proc. of Machine Learning Research, Vol. 70, pp.
2922-2930, 2017.

[19] S. Santurkar, D. Budden, N. Shavit, “Generative Compres-

sion”, Picture Coding Symposium, June 24-27, 2018.

[20] E. Agustsson, M. Tschannen, F. Mentzer, R. Timofte, and
L. V. Gool, “Generative Adversarial Networks for Extreme
Learned Image Compression”, arXiv:1804.02958.

[21] C-Y Wu, N. Singhal, P. Krahenbuhl, “Video Compression
through Image Interpolation”, 15th European Conference on
Computer Vision, September 8 C 14, 2018.

[22] T. Chen, H. Liu, Q. Shen, T. Yue, X. Cao, and Z. Ma. “Deep-
coder: A deep neural network based video compression”.
2017 IEEE Visual Communications and Image Processing (V-
CIP), pp. 1C4, Dec 2017.

[23] Workshop and Challenge on Learned Image Compres-
sion, CVPR2018, http://www.compression.cc/
challenge/

[24] W. Shi, J. Caballero, F. Huszar, et al. “Real-time single image
and video super-resolution using an efﬁcient sub-pixel convo-
lutional neural network”, Intl. IEEE Conf. on Computer Vi-
sion and Pattern Recognition, June 26-July 1, 2016.

[25] N.S. Jayant and P. Noll, “Digital coding of waveforms”, En-

glewood Cliffs NJ, Prentice-Hall, 1984.

[26] J.Katto and Y.Yasuda: “Performance Evaluation of Subband
Coding and Optimization of Its Filter Coefﬁcients”, SPIE Vi-
sual Communication and Image Processing, Nov.1991.

[27] D. P. Kingma and J. Ba, “Adam: A method for stochastic

optimization”, arXiv:1412.6980, pp.1-15, Dec. 2014.

[28] J. Deng, W. Dong, R. Socher, L. Li, K. Li and L. Fei-Fei,
“ImageNet: A Large-Scale Hierarchical Image Database”,
IEEE Conf. on Computer Vision and Pattern Recognition, pp.
1-8, June 20-25, 2009.

[29] Kodak Lossless True Color Image Suite, Download from

http://r0k.us/graphics/kodak/

10079

[30] Z. Wang, E. P. Simoncelli and A. C. Bovik, “Multiscale
structural similarity for image quality assessment”, The 36-
th Asilomar Conference on Signals, Systems and Computers,
Vol.2, pp. 1398-1402, Nov. 2013.

[31] JPEG

ofﬁcial

software

libjpeg,

http-

s://jpeg.org/jpeg/software.html

[32] JPEG2000 ofﬁcial software OpenJPEG,

https://jpeg.org/jpeg2000/software.html

[33] BPG Image Format, https://bellard.org/bpg/

[34] C. E. Shannon, “A Mathematical Theory of Communica-
tion”, The Bell System Technical Journal, Vol. 27, pp. 379-
423, July, 1948.

[35] S. Niklaus, L. Mai and F. Liu, “Video Frame Interpolation vi-
a Adaptive Separable Convolution”, IEEE International Con-
ference on Computer Vision (ICCV) 2017.

[36] Video Trace Library. http://trace.eas.asu.edu/

index.html

[37] K. McCann, C. Rosewarne, B. Bross, M. Naccari, K. Shar-
man, G. J. Sullivan, “High Efﬁciency Video Coding (HEVC)
Test Model 16 (HM 16) Encoder Description”, Document
JCTVC-R1002, Sapporo, Jul. 2014. https://hevc.hhi.
fraunhofer.de/svn/svn_HEVCSoftware/

[38] A. M.Tourapis, K. Suhring, G. Sullivan, “H.264/14496-10
AVC Reference Software Manual”, Document JVT-AE010,
London, UK, 28 June- 3 July 2009. http://iphome.
hhi.de/suehring/tml/download/

10080

