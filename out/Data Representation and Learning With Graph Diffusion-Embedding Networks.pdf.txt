Data Representation and Learning with Graph Diffusion-Embedding Networks

Bo Jiang, Doudou Lin, Jin Tang∗, Bin Luo

School of Computer Science and Technology, Anhui University, Hefei, 230601, China

jiangbo@ahu.edu.cn, ahu lindd@163.com, ahhftang@gmail.com, luobin@ahu.edu.cn

Abstract

Recently, graph convolutional neural networks have
been widely studied for graph-structured data represen-
tation and learning.
In this paper, we present Graph
Diffusion-Embedding networks (GDENs), a new model for
graph-structured data representation and learning. GDENs
are motivated by our development of graph based feature d-
iffusion. GDENs integrate both feature diffusion and graph
node (low-dimensional) embedding simultaneously into a u-
niﬁed network by employing a novel diffusion-embedding
architecture. GDENs have two main advantages. First, the
equilibrium representation of the diffusion-embedding oper-
ation in GDENs can be obtained via a simple closed-form
solution, which thus guarantees the compactivity and efﬁ-
ciency of GDENs. Second, the proposed GDENs can be
naturally extended to address the data with multiple graph
structures. Experiments on various semi-supervised learn-
ing tasks on several benchmark datasets demonstrate that
the proposed GDENs signiﬁcantly outperform traditional
graph convolutional networks.

1. Introduction

Compact feature representation of data is a fundamen-
tal problem in computer vision and machine learning area.
Convolutional Neural Networks (CNNs) have been widely
applied for data representation and learning in many com-
puter vision applications, in which the underlying data gen-
erally have a grid-like structure. However, in some real
problems, data are not coming with grid-like structure but
instead have some irregular structures. Such data are usu-
ally represented in the form of graphs. Traditional CNNs
generally fail to directly address graph-structured data and
the convolution operation on graph data is generally not as
well-deﬁned as on grid structure data. To solve this prob-
lem, early works aim to use Recursive Neural Network-
s (RNNs) [7, 29] to deal with directed acyclic graph data.
As an extension of RNNs, Graph Neural Networks (GNNs)

∗Corresponding author

[9, 27] have also been introduced to address the general
cyclic graph data.

Recently, there is an increasing attention in generalizing
neural networks to deal with arbitrary graph-structured data
[22, 10, 30, 30]. For example, Bruna et al. [3] propose a
CNN-like neural architecture on graphs in the Fourier do-
main by employing eigen-decomposition of graph Lapla-
cian. To reduce high computational complexity of graph
Laplacian eigen-decomposition, Defferrard et al.
[4] pro-
pose to approximate the ﬁlters by using recurrent Cheby-
shev polynomials. Kipf and Welling [15] further propose
a simpliﬁed Graph Convolutional Network (GCN) based
on the ﬁrst-order approximation of spectral ﬁlters. Similar
work has also been proposed in [6]. Atwood and Towsley
[1] propose Diffusion-Convolutional Neural Networks (D-
CNNs) by employing a random walk diffusion process to
include contextual information for data feature representa-
tion. Monti et al. [22] present mixture model CNNs (MoN-
et) which provides a kind of uniﬁed generalization of CNN
architecture on graphs. Veliˇckovi´c et al. [30] present Graph
Attention Networks (GAT) by designing an attention layer
that aggregates the feature information of the neighboring
nodes for data representation.

In this paper, we propose Graph Diffusion-Embedding
Networks (GDENs) for graph data representation and learn-
ing. GDENs are motivated by our development on graph
based feature diffusion to explore contextual information
for graph node representation. Our GDENs follow the gen-
eral network structure of recent GCNs [15], but compute
the hidden representation of each node by employing a nov-
el ‘diffusion-embedding’ architecture. The main beneﬁts
of the proposed diffusion-embedding architecture are two
aspects. First, the equilibrium representation of the pro-
posed diffusion-embedding operation can be obtained via
a simple closed-form solution, which guarantees the com-
pactivity and efﬁciency of GDENs. Second, the proposed
diffusion-embedding architecture can be naturally extended
to address the data with multiple graph structures. Overall,
the main contributions are summarized as follows:

• We propose Graph Diffusion-Embedding Networks
(GDENs) which integrate graph feature diffusion and

110414

embedding together for graph data representation and
semi-supervised learning.

• We propose a general mechanism of graph based fea-
ture diffusion which can provide a compact contextu-
al representation for graph node by jointly employing
both unary feature information of each node and con-
textual feature information from its neighboring nodes
simultaneously.

• Based on GDENs, we provide a novel graph neural net-
work (called as M-GDEN) to address multiple graph
data representation and learning.

As an application, we apply GDENs on various semi-
supervised classiﬁcation tasks on graph data. Experimental
results on several widely used benchmarks demonstrate that
GDENs signiﬁcantly outperform the state-of-the-art graph
neural network models on semi-supervised learning tasks.

2. Brief Review of GCN

As an extension of CNNs from regular grid to irregular
graph, Graph Convolutional Networks (GCNs) [4, 15] have
been widely studied for graph data representation and learn-
ing in recent years. Similar to the classic CNNs, GCNs con-
tain several convolutional hidden layers that take a feature

map matrix H(k) ∈ Rn×dk as the input and output a fea-
ture map H(k+1) ∈ Rn×dk+1 by using a graph convolution
operator. In general, we set dk+1 ≤ dk, and thus the con-
volution operation also provides a kind of low-dimensional
embedding for nodes on graph.

Given an input feature matrix H(0) ∈ Rn×d0 and graph
A ∈ Rn×n, GCN [15] conducts the following layer-wise

propagation as,

(1)

H(k+1) = σ((I + D− 1

2 AD− 1

2 )H(k)W(k))

where k = 0, 1,··· K − 1 and I is an identity matrix.
D = diag(d1, d2 ··· dn) is a diagonal matrix with di =
∑n
j=1 Aij. W(k) ∈ Rdk×dk+1 is a layer-speciﬁc trainable
weight matrix. σ(·) denotes an activation function, such as
ReLU(·) = max(0,·).
Remark. To alleviate the problem of numerical instabilities
and vanishing gradients, it is suggested to use the following
re-normalization trick in above propagation (Eq.(1)) as [15],

− 1

2 ˜A ˜D

− 1
2

(2)

2 AD− 1

I + D− 1

2 → ˜D
where ˜A = A + I and ˜Dii =∑n

j=1

˜Aij.

The last layer of GCN outputs the ﬁnal representation
H(K) of graph nodes, which can be widely utilized for
graph data analysis, such as graph classiﬁcation [4], graph
link prediction [16] or graph node (semi-supervised) classi-
ﬁcation [15], etc. In this paper, we focus on semi-supervised

classiﬁcation. For this task, a softmax activation function
is further conducted on each row of the ﬁnal output fea-

ture map matrix H(K). Let Z = softmax(H(K)) ∈ Rn×c
be the ﬁnal output, where c denotes the number of class.
Then Z provides a kind of label prediction for graph n-
odes. The weight parameters of GCN network W =
{W0, W1,··· W(K)} are trained by minimizing the cross-
entropy loss over all the labeled nodes L, i.e.,

LSemi-GCN = −∑i∈L∑c

j=1

YijlnZij

(3)

where L indicates the set of labeled nodes and each row
Yi·, i ∈ L of Y denotes the corresponding label indication
vector for the i-th labeled node [15].

3. Graph Diffusion-Embedding Networks

3.1. Motivation

In this section, we propose Graph Diffusion-Embedding
Networks (GDENs). Our GDENs are motivated by our ob-
servation on layer-wise propagation rule of GCN [15]. Intu-
itively, the propagation rule Eq.(1) in GCN can be decom-
posed into two operations, i.e.,

F(k) = (I + D− 1

2 AD− 1

2 )H(k)

H(k+1) = σ(F(k)W(k))

(4)

(5)

where Eq.(4) provides a kind of feature diffusion on graph
A and Eq.(5) presents a non-linear transformation (embed-
ding) for feature F(k) via projection matrix W(k) and non-
linear activation function σ(·).
Here, we focus on diffusion operation Eq.(4), which is
further analyzed as follows. For simplicity, we rewrite up-
date Eq.(4) as

F = (I + D− 1

2 AD− 1

2 )H

(6)

Let F = (f1 ··· fn) and H = (h1 ··· hn), then we can note
that the representation fi of each node is updated as

fi =∑j,j̸=i

ˆAij hj + hi

(7)

2 AD− 1

where ˆA = D− 1
2 . From Eq.(7), we can note that GC-
N indeed employs an one-step feature diffusion on normal-
ized graph ˆA (biased by feature itself) to obtain contextual
feature representation in layer-wise propagation. Obviously,
this one-step diffusion does not return the equilibrium rep-
resentation of feature diffusion which thus may lead to weak
contextual feature representation. This motivated us to pro-
pose a general diffusion-embedding network. In the follow-
ing, we ﬁrst propose our general feature diffusion models.
Then, we present the details of our GDEN architecture.

10415

3.2. Graph based feature diffusion

Given a graph A ∈ Rn×n and feature descriptors H =
(h1, h2 ··· hn) ∈ Rn×d of graph nodes, the aim of our graph
tation F = Fd(A, H) = (f1, f2 ··· fn) ∈ Rn×d for graph

based feature diffusion is to learn a kind of feature represen-

nodes by incorporating the contextual information of their
neighboring nodes. In the following, we present three kinds
of graph based feature diffusion models. Note that, similar
diffusion models have been commonly used in ranking and
label propagation tasks [34, 35, 5, 20]. Differently, here we
propose to explore them for feature diffusion and represen-
tation problem.

(1) Graph random walk feature diffusion
One intuitive way to formulate the feature diffusion
Fd(A, H) is using random walk with restart (RWR) model
[35, 20, 12, 13] and obtain the equilibrium representation of
graph nodes based on the ﬁnal equilibrium state of random
walk. First, we deﬁne a transition probability matrix as

P = AD−1

(8)

where D = diag(d1 ··· dn) with di = ∑j Aij . Then, start-
ing from initial F(0) = H = (h1 ··· hn), we explore RWR

model to conduct diffusion as

(t+1)
f
i

= λ∑j,j̸=i

Pij f

(t)

j + (1 − λ)hi

(9)

where t = 0, 1,··· and λ ∈ [0, 1]. 1 − λ is the jump prob-
(t)
j denotes the j-th row of F(t). The
ability. Each vector f
restart term is used to preserve the unary feature information
of each node during diffusion. It is known that, the above
iteration (Eq.(9)) will converge to the equilibrium state as,

F = (1 − λ)(I − λP)−1H

(10)

We use this converged F as the ﬁnal equilibrium representa-
tion of graph nodes.
Remark.
It is noted that, GCN update rule Eq.(4 or 7)
is similar to the one-step iteration (t = 0) of Eq.(9) with
α = 0.5 (on row normalize graph P). Therefore, from diffu-
sion aspect, the proposed diffusion Eq.(9 or 10) provides
an equilibrium and ﬂexible contextual feature representa-
tion by exploring graph structure A and the input feature
H. We will incorporate this feature diffusion in our GDEN
layer-wise propagation, as shown in §3.3 in detail.

(2) Graph Laplacian feature diffusion
In additional to the above RWR model, we can also for-
mulate feature diffusion Fd(A, H) by employing Laplacian
regularization models [34].
In particular, we propose to
compute the optimal diffused representation F by minimiz-
ing the following Laplacian regularization problem,

min

F

1
2

n

∑i,j=1

Aij∥fi − fj∥2

2 + λ

n

∑i=1

∥fi − hi∥2

2

(11)

The ﬁrst smoothness term conducts feature diffusion (or
propagation) on graph A while the second ﬁtting term en-
courages to preserve the original feature information hi of
each node in diffusion process. It is known that, Eq.(11) has
a closed-form solution which is given by

F = λ(D − A + λI)−1H

(12)

Similarly, we can also compute the optimal diffused repre-
sentation F by minimizing the following normalized Lapla-
cian regularization problem [35, 20],

min

F

1
2

The optimal closed-form solution is given by

n

∑i,j=1

fj

fi√di −

Aij∥

√dj ∥2
F = (1 − γ)(I − γD− 1
λ+1 .

2 + λ

n

∑i=1

∥fi − hi∥2

2 (13)

2 AD− 1

2 )−1H

(14)

where γ = 1
Remark. Note that, the above Laplacian regularization
models have been explored for graph node ranking and la-
bel propagation [34, 35, 5, 11]. Here we propose to explore
them for feature diffusion task whose aim is to learn a con-
textual feature representation for graph node while preserve
the unary information of each node.

Table 1 summarizes the feature diffusion operators based
on the proposed three diffusion models.
In additional to
these methods, some other diffusion models [5, 20] can al-
so be explored here. Generally, these models have three
main desired properties. First, they conduct feature diffu-
sion while preserving the information of original feature H
in feature diffusion process. Second, they all have an explic-
it equilibrium representation which can be computed via a
simple closed-form solution and thus can be computed ef-
ﬁciently. Third, they can be naturally extended to address
multiple graphs, as shown in §3.4 in detail.

Table 1. Summary of the proposed feature diffusion methods.

Model

RWR Eq.(9)

LapReg Eq.(11)

NLapReg Eq.(13)

Diffusion operator Fd(A, H)
(1 − λ)(I − λAD−1)−1H

λ(D − A + λI)−1H
2 AD− 1

(1 − γ)(I − γD− 1

2 )−1H

3.3. GDEN architecture

In this section, we present our Graph Diffusion-
Embedding Networks (GDENs) based on the proposed fea-
ture diffusion operators. Similar to the structure of GCN-
s [15], GDENs contain one input layer, several hidden lay-
ers and one ﬁnal perceptron layer. For hidden layer, it takes

a feature matrix H(k) ∈ Rn×dk as the input and outputs a
feature map matrix H(k+1) ∈ Rn×dk+1 by using diffusion

and embedding operators. The diffusion operator aims to

10416

learn a contextual feature representation for graph nodes by
exploring graph structure while the embedding operator is
used to learn a low-dimensional representation for graph n-
odes.

Formally, given an input feature matrix H(0) ∈ Rn×d0
and graph A ∈ Rn×n, GDENs conduct the following layer-

wise propagation as,

(15)

H(k+1) = σ(Fd(A, H(k))W(k))

where k = 0, 1,··· K − 1 and Fd(A, H(k)) denotes the
contextual (diffused) feature representation based on graph
A and feature map matrix H(k). We can use any kind of
diffusion models Fd(A, H(k)) listed in Table 1. W(k) ∈
Rdk×dk+1 is a layer-speciﬁc trainable weight matrix to con-
duct linear embedding. Function σ(·) denotes an activation
function, such as ReLU(·) = max(0,·).
The last layer of GDENs output the ﬁnal representation
of graph nodes H(K), which can be used for graph classiﬁ-
cation [4], graph link prediction [16] and graph node semi-
supervised classiﬁcation task [15]. For semi-supervised
learning task, we add a softmax activation function on each
row of the ﬁnal output feature map matrix H(K) as,

Zij = softmax(H(K)) =

exp(H

(K)
ij

j=1 exp(H

)
(K)
ij

(16)

)

∑c

where c denotes the number of class. The ﬁnal obtained
output Z ∈ Rn×c gives the ﬁnal label prediction for al-
l graph nodes in which each row Zi of matrix Z denotes
the corresponding label prediction vector for the i-th node.
The optimal weight parameters W = {W0, W1,··· W(K)}
of GDENs are obtained by minimizing the following cross-
entropy loss function over all the labeled nodes L, i.e.,

LSemi-GDEN = −∑i∈L∑c

j=1

YijlnZij

(17)

where L indicates the set of labeled nodes and Yi·, i ∈ L
denotes the corresponding label indication vector for the i-
th labeled node, i.e.,

Yij ={1

0

if node i belongs to j-th class

otherwise

Figure 1 shows the training loss values across different
epochs. One can note that, GDENs obtain obviously low-
er cross-entropy loss values than GCN [15] at convergence,
which clearly demonstrates the higher predictive accuracy
of GDENs model. Also, the convergence speeds of GDEN-
s are faster than GCN, indicating the efﬁciency of GDENs.
Figure 2 demonstrates the 2D visualizations of the feature
map output by the ﬁrst hidden layer of GCN and GDEN
(with normalized Laplacian diffusion), respectively. Differ-
ent colors denote different classes. Intuitively, one can ob-
serve that the data of different classes are distributed more

clearly in our GDEN representation, which demonstrates
the beneﬁts of GDEN on conducting graph data represen-
tation and learning.

2

1.5

s
s
o

l
 

GCN

GDEN-Lap

GDEN-RWR

GDEN-NLap

i

g
n
n
a
r
T

i

1

0.5

0

0

100

200

300

400

500

600

700

Epoch

Figure 1. Demonstration of cross-entropy loss values across differ-
ent epochs on Cora dataset.

3.4. GDENs on multiple graphs

One important property of the proposed GDENs is that
they can naturally address the structured data with mul-
tiple graph representations. This is because we can ex-
tend Laplacian regularized diffusion models (Eq.(11) and
Eq.(13)) on multiple graphs to provide multiple graph fea-
ture diffusion operators. Formally, given an input feature

matrix H(0) ∈ Rn×d0 with multiple graph representations
A = {A(1) ··· A(m)}, we can obtain an optimal feature d-
iffusion F = Fd(A(1), A(2) ··· A(m); H) on graph set A by

optimizing

1
2

m

n

n

(v)

F

2

v=1

αr

vA

min

∑i=1

∥fi − hi∥2

2) + λ

ij ∥fi − fj∥2

∑i,j=1
αv = 1, αv ≥ 0

∑v=1(
s.t. ∑m
where α = (α1, α2 ··· αm) denote the important weights
of different graphs which are learned adaptively. The pa-
rameter r > 1 is used to control the weight distribution, as
suggested in previous work [32]. First, we rewrite Eq.(18)
more compactly as

(18)

(v)

v=1

v=1

(19)

min

and d

αv = 1, αv ≥ 0

vTr(FT L(v)F) + λTr(FT F − 2FT H)
αr

F ∑m
s.t. ∑m
where L(v) = D(v) − A(v) and D(v) = diag{d
i =∑j A
F ∑m
+ ξ(∑m
s.t. αv ≥ 0

··· d(v)
n }
(v)
ij . The equivalent Lagrangian form is
vTr(FT L(v)F) + λTr(FT F − 2FT H)
αr
αv − 1)

min

(v)
1

(20)

v=1

v=1

10417

100

80

60

40

20

0

-20

-40

-60

-80

-100

-80

-60

-40

-20

0

20

40

60

80

-100

-50

0

50

100

80

60

40

20

0

-20

-40

-60

-80

(a) GCN result

(b) GDEN result

Figure 2. t-SNE [21] visualizations of the feature maps output by the ﬁrst hidden layer of GCN and GDEN, respectively on the CIFAR10
dataset. Different classes are marked by different colors. Note that, the data distribution of different classes is demonstrated more clearly
in our GDEN representation.

where ξ is the Lagrangian multiplier. Fix α and obtain the
optimal F by setting the derivation w.r.t F to zero and obtain

F = λ(λI +∑m

v=1

αr

vL(v))−1

H

(21)

Fix F and we similarly obtain the optimal as α.

1

(1/Tr(FT L(v)F))
v=1(1/Tr(FT L(v)F))

r−1

1

r−1

(22)

α =

∑m

Therefore, the optimal F can be obtained by alternatively
updating F and α as follows until convergence,

F ← λ(λI +∑m

v=1

αr

vL(v))−1

r−1

1

(1/Tr(FT L(v)F))
v=1(1/Tr(FT L(v)F))

α ←

1

r−1

H

∑m

(23)

(24)

Empirically, the algorithm converges quickly, generally less
than 10 iterations. Similarly, we can also derive multiple
graph feature diffusion based on normalized Laplacian reg-
ularization diffusion model (Eq.(13)).

Based on the above multiple graph feature diffusion oper-
ators, we can extend GDEN on multiple graphs and present
our Multiple GDENs (M-GDENs). Formally, given an in-

put feature matrix H(0) ∈ Rn×d0 and multiple graphs
A = {A(1) ··· A(m)}, M-GDENs conduct the following

layer-wise propagation as,

3.5. Comparison with related works

We provide the detail comparisons with some recent
works including Graph Convolutional Network (GCN) [15],
Diffusion Convolutional Neural Network (DCNN) [1], D-
iffusion Convolutional Recurrent Neural Network (DCRN-
N) [19] and Graph Attention Networks (GAT) [30]. Both
GCN [15] and GAT [30] use a one-step diffusion operation
while DCRNN [19] utilizes a ﬁnite K-step truncation of
diffusion on graph. In DCNN [1], it uses a standard ran-
dom walk based diffusion process. One main limitation for
these methods is that the equilibrium representation of fea-
ture diffusion is not obtained, which thus may lead to weak
contextual feature representation in their networks. Also,
these models can not be used directly for the data with
multiple graph structures. In contrast, in GDENs, we ex-
plore regularized diffusion (Eq.(9), Eq.(11) and Eq.(13)) in
our diffusion-embedding architecture for contextual feature
representation. The main beneﬁts are three aspects. First,
they all have an explicit equilibrium representation which
encourage GDENs to generate more compact feature rep-
resentations for graph data. Second, they conduct feature
diffusion while preserve the information of original input
feature in feature representation process. Thus, they present
an effective representation by integrating both unary feature
information of graph nodes and contextual feature informa-
tion from neighboring nodes simultaneously. Third, they
can be naturally extended to address multiple graphs.

H(k+1) = σ(Fd(A(1) ··· A(m); H(k))W(k))

where k = 0, 1,··· K − 1 and Fd(A(1) ··· A(m); H(k)) de-

notes the contextual (diffused) feature representation which
is obtained by computing the optimal solution of multiple
graph diffusion Eq.(18) via update algorithm Eqs.(23,24).

4. Experiments

(25)

4.1. Datasets

We test our GDENs on ﬁve datasets including three stan-
dard citation network benchmark datasets (Citeseer, Cora
and Pubmed [28]) and two widely used image datasets (CI-
FAR10 [17] and SVHN [23]. The details of these datasets

10418

and their usages in our experiments are introduced below.
Citeseer dataset. It is a citation network which contains
3327 nodes and 4732 edges. The nodes of this network are
falling into six categories and each node has a 3703 dimen-
sion feature descriptor.
Cora dataset. Similar to Citeseer dataset, it contains 2708
nodes and 5429 edges. Each node has a 1433 dimension
descriptor and all nodes are falling into six categories.
Pubmed dataset. This is a larger network data which con-
tains 19717 nodes and 44338 edges in all. Each node has
a 500 dimension feature descriptor and all the nodes are
falling into three categories.
CIFAR10 dataset. It contains 10 classes of 50000 RGB im-
ages with the same size 32×32 [17]. In our experiments, we
select 1500 images per class and use 15000 images in all for
evaluation. For each image, we ﬁrst extract a CNN feature
descriptor for it. Then, we construct a k nearest neighbor
graph (k = 3) with nodes denoting images and edges repre-
senting the neighborhood relationship between images. The
weight of each edge is computed by Heat kernel function.
SVHN dataset.
It contains 73257 training and 26032 test
RGB images with the same size 32 × 32 [23]. Each image
contains several digits and the task is to classify the digit in
the center of image. Similar to CIFAR10, we select 1500
images per class and use 15000 images in all for evaluation.
We extract a CNN feature for each image and construct a
k nearest neighbor graph (k = 3) for images. The edge
weight is computed by Heat kernel function.

4.2. Experimental setup

For Cora, Citeseer and Pubmed datasets, we follow the
experimental setup in work [15, 30]. For image dataset
CIFAR10 [17] and SVHN [23], we randomly select 1000,
2000 and 4000 images as labeled samples and use the re-
maining data as unlabeled samples. For unlabeled samples,
we select 1000 images for validation purpose and use the
remaining 13000, 12000 and 10000 images as test sam-
ples. All the accuracy results are averaged over 10 runs
with different data splits. We implement our GDEN with
three versions, i.e., 1) GDEN-RWR that utilizes random
walk with restart (RWR) based diffusion operation in G-
DEN; 2) GDEN-Lap that utilizes graph Laplacian diffusion
operation in GDEN; 3) GDEN-NLap that utilizes normal-
ized Laplacian diffusion operation in GDEN. The optimal
parameter λ in GDEN-RWR, GDEN-Lap and γ in GDEN-
NLap are determined based on the validation loss values.
Similar to [15], we set the number of diffusion-embedding
layers in GDENs to 2. The number of units in each hid-
den layer is set to 40. We present additional experiments on
performance of GDENs with different hidden unit number-
s and convolutional layers in §4.4. We train GDENs for a
maximum of 2000 epochs (training iterations) using Adam
[14] with a learning rate of 0.01. Similar to [30], we stop

training if the validation loss does not decrease for 100 con-

secutive epochs. All the network weights {W(0) ··· W(K)}

are initialized using Glorot initialization [8].

4.3. Comparison to state of the art methods

We compare our method with some other graph (neu-
ral network) based semi-supervised learning methods. The
compared methods contain i)
two graph based semi-
supervised learning methods including Label Propagation
(LP) [36] and Manifold Regularization (ManiReg) [2]; i-
i) two deep neural network based semi-supervised learning
methods including Planetoid [33] and DeepWalk [26]; iii)
three graph neural network methods including Graph Con-
volutional Network (GCN) [15], Diffusion Convolutional
Neural Networks (DCNNs) [1] and Graph Attention Net-
works (GAT)
[30]. The codes of DCNN, GCN and GAT
have been provided by authors and we use them in our ex-
periments. For fair comparison, the parameter settings of
GCN are the same as our GDEN to obtain the average bet-
ter performance on all datasets.

Table 2. Comparison results on citation network datasets

Methond

ManiReg [2]

LP [36]

DeepWalk [26]
Planetoid [33]

DCNN [1]
GCN [15]
GAT [30]

GDEN-RWR
GDEN-Lap
GDEN-NLap

Pubmed
Cora
Citeseer
70.7%
59.5%
60.1%
63.0%
68.0%
45.3%
65.3%
67.2%
43.2%
77.2%
75.7%
64.7%
75.3%
76.7%
64.5%
78.3%
83.6%
70.3%
78.0%
83.2%
71.0%
72.8% 82.0%
78.7%
78.9%
72.6%
84.7%
70.3% 85.1% 78.7%

Table 2 summarizes the comparison results on three net-
work benchmark datasets1. The best results are marked by
bold. Here we can note that, 1) GDENs generally perform
better than GCN [15], DCNN [1] and GAT [30]. That is,
comparing with some other competing graph convolution
architectures, the proposed diffusion-embedding architec-
tures in GDENs are more effective for graph data representa-
tion and learning. 2) GDENs perform better than other semi-
supervised learning methods, such as Planetoid [33] and
DeepWalk [26], which indicates the effectiveness and bene-
ﬁts of GDENs on conducting graph based semi-supervised
learning tasks. Table 3 summarizes the comparison result-
s on two widely used image datasets (CIFAR10 [17] and
SVHN [23]). The highest results are marked by bold. Over-
all, we can note that 1) GDENs perform better than re-

1GCN results in Table 2 are slightly different from that reported in
work [15], because we use a different hidden layer setting to make it con-
sistent with GDEN and also obtain average better results on all the network
and image datasets.

10419

Table 3. Comparison results on SVHN and CIFAR10 datasets

Dateset

No. of label
ManiReg [2]

LP [36]

DeepWalk [26]
Planetoid [33]

GCN [15]
GAT [30]
GDEN-L

GDEN-RWR
GDEN-NL

1000

SVHN
2000

4000

1000

CIFAR10

2000

4000

79.38±0.53% 82.14±0.39% 84.24±0.42% 66.49±0.49% 70.26±0.37% 73.62±0.30%
64.82±0.92% 67.05±0.60% 69.84±0.45% 57.45±0.99% 59.30±1.07% 60.97±0.57%
72.85±0.58% 74.69±0.34% 76.38±0.43% 57.09±0.41% 59.93±0.29% 62.51±0.29%
79.48±0.71% 82.09±0.49% 83.96±0.40% 64.24±0.61% 68.01±0.44% 71.34±0.41%
81.07±0.52% 81.90±0.36% 82.42±0.40% 68.86±0.50% 71.55±0.29% 71.55±0.29%
76.45±0.29% 77.38±0.24% 77.71±0.34% 64.33±0.65% 65.21±0.40% 65.94±0.36%
82.18±0.48% 84.04±0.42% 85.44±0.29% 69.08±0.53% 72.17±0.27% 75.03±0.31%
82.72±0.53% 84.76±0.33% 86.36±0.41% 68.60±0.52% 72.12±0.42% 75.19±0.35%
82.88±0.54% 84.80±0.39% 86.24±0.36% 69.08±0.53% 72.56±0.29% 75.46±0.21%

GCN

GDEN-Lap

GDEN-RWR

GDEN-NLap

GCN

GDEN-Lap

GDEN-RWR

GDEN-NLap

y
c
a
r
u
c
c
A

0.73

0.72

0.71

0.7

0.69

0.68

0.67

y
c
a
r
u
c
c
A

0.85

0.84

0.83

0.82

0.81

0.8

0.79

0.78

20

30
50
Number of hidden units

40

60

20

30
50
Number of hidden units

40

60

Figure 3. Results of two-layer GDENs across different unit number in hidden layers (LEFT: CIFAR10 dataset; RIGHT: SVHN dataset).

cent GCN models (GCN [15], GAT [30]) on both dataset-
s, which further demonstrates the effectiveness of the pro-
posed diffusion-embedding architecture to enhance the abil-
ity of GDENs for graph data learning. 2) GDENs outperfor-
m the other graph based semi-supervised learning methods
and obtain the best performances on both datasets, indicat-
ing the better performance of the proposed GDENs based
semi-supervised learning on image data. 3) GDEN-NLap
usually performs better than GDEN-RWR and GDEN-Lap
on these two datasets.

4.4. Evaluation on GDENs setting

We evaluate the performance of GDENs under different
network settings. As a baseline method, we also report the
performance of GCN [15] with the same setting.
Analysis on number of hidden units. We ﬁrst evaluate
the performance of GDENs across different number of hid-
den units. Figure 3 summarizes the results on dataset CI-
FAR10 [17] and SVHN [23], respectively. We can observe
that GDENs generally perform insensitively w.r.t. the num-
ber of units in the hidden layer.Also, GDENs always outper-
form GCN on all settings of unit numbers in hidden layer.
Analysis on model depth. We then investigate the inﬂu-
ence of model depth (number of hidden layers) on ﬁnal

performance of GDENs. Figure 4 shows the results on CI-
FAR10 [17] and SVHN [23], respectively. Note that GDEN-
s can obtain desired better results using a simple two-layer
setting. This phenomenon also occurs in many other graph
neural networks, such as GCN [15] and GAT [30]. GDENs
are generally insensitive w.r.t. model depth. It maintains
better performs under different numbers of hidden layers.
Also, GDENs generally outperform GCN on all settings of
model depth, indicating the better performance of GDENs.

4.5. Evaluation on M GDEN

Our ﬁnal evaluation is to verify the effectiveness of the
proposed M-GDEN on the data with multiple graphs. Here,
we evaluate the performance of the proposed M-GDEN
for semi-supervised learning on two datasets, i.e., MSRC-
v1 [31] and Caltech101-7 [18, 25]. MSRC-v1 contains 210
images which are falling into 7 classes. Following the ex-
perimental setting in work [25], we construct ﬁve graphs
(5 nearest neighbor graph) for this dataset based on ﬁve d-
ifferent kinds of visual descriptors. Caltech101-7 [18, 24]
is an object recognition data set containing 101 categories
of images. We follow the experimental setup of previous
work [24] and select the widely used 7 classes. We con-
struct six graphs (5 nearest neighbor graph) for this dataset

10420

y
c
a
r
u
c
c
A

0.8

0.7

0.6

0.5

0.4

0.3

0.2

1

GDEN-Lap

GDEN-RWR

GDEN-NLap

GCN

GDEN-Lap

GDEN-RWR

GDEN-NLap

GCN

SVHN

CIFAR10

0.85

0.8

0.75

0.7

0.65

0.6

y
c
a
r
u
c
c
A

2

3

4

Number of layers

5

0.55

1

2

3

4

5

Number of layers

Figure 4. Results of GDENs across different network layers (LEFT: CIFAR10 dataset; RIGHT: SVHN dataset).

based on six kinds of visual feature descriptors. Table 4
summarizes the semi-supervised classiﬁcation results under
different rates of labeled data on these two datasets, respec-
tively. As a baseline, we also report the classiﬁcation results
of GCN method [15]. Since GCN can not be used to deal
with multiple graphs, we implement it in two variants, i.e.,
i) GCN(v) that conducts convolution on the v-th individual
graph A(v); ii) GCN-A that conducts convolution on the av-
eraged graph ¯A = 1
v=1 A(v). Here, one can note that,
comparing with baseline methods, our method obtains the
best performance on both datasets, which demonstrates the
effectiveness of M-GDEN on multiple graphs.

m∑m

Table 4. Semi-supervised classiﬁcation results on multiple graphs.

Dateset

Rate

10%
47.86
70.77
69.46
67.14
67.14

GCN(1)
GCN(2)
GCN(3)
GCN(4)
GCN(5)
GCN(6)
GCN-A
80.36
M-GDEN 84.70

-

MSRC-v1

Caltech101-7

20%
49.25
76.26
83.33
72.59
75.7

-

87.14
89.59

30%
49.21
80.00
84.29
84.29
73.33

-

88.73
90.70

10%
82.13
82.47
85.62
92.06
90.27
89.54
91.05
92.69

20%
84.93
83.73
86.03
94.78
93.82
92.76
94.09
95.77

30%
84.88
84.92
87.63
94.74
94.09
93.74
94.68
96.74

5. Conclusion and Future Work

We present Graph Diffusion-Embedding Networks (G-
DENs) for graph-structured data representation and learn-
ing. GDENs integrate both feature diffusion and embed-
ding simultaneously in a uniﬁed network by introducing
a new diffusion-embedding architecture. The diffusion-
embedding architecture in GDENs can produce an equilibri-
um representation for graph nodes by exploring graph struc-
ture, which makes GDENs be able to obtain a more com-
pact representation for graph data. Furthermore, GDENs
provide a straightforward mechanism to address structured
data with multiple graphs. Experimental results on several

widely used benchmarks demonstrate that GDENs signiﬁ-
cantly outperform the state-of-the-art graph neural network
models on various semi-supervised learning tasks.

In our future, we will develop some approximate algo-
rithms to compute the inversion operation in GDENs and
thus to make GDENs more efﬁciently in practical.

Acknowledgment

This work is supported in part by NSFC Key Projects
of International (Regional) Cooperation and Exchanges un-
der Grant (61860206004); National Natural Science Foun-
dation of China (61602001, 61872005, 61671018); Natural
Science Foundation of Anhui Province (1708085QF139);
Natural Science Foundation of Anhui Higher Education In-
stitutions of China (KJ2016A020).

References

[1] James Atwood and Don Towsley.

Diffusion-
convolutional neural networks. In Advances in Neural
Information Processing Systems, pages 1993–2001,
2016.

[2] Mikhail Belkin, Partha Niyogi, and Vikas Sindhwani.
Manifold regularization: A geometric framework for
learning from labeled and unlabeled examples. Jour-
nal of machine learning research, 7(Nov):2399–2434,
2006.

[3] Joan Bruna, Wojciech Zaremba, Arthur Szlam, and
Yann LeCun. Spectral networks and locally connected
networks on graphs. In International Conference on
Learning Representations, 2014.

[4] Micha¨el Defferrard, Xavier Bresson, and Pierre Van-
dergheynst. Convolutional neural networks on graphs
with fast localized spectral ﬁltering.
In Advances in
Neural Information Processing Systems, pages 3844–
3852, 2016.

10421

[5] Michael Donoser and Horst Bischof. Diffusion pro-
cesses for retrieval revisited.
In IEEE Conference
on Computer Vision and Pattern Recognition, pages
1320–1327, 2013.

[6] David K Duvenaud, Dougal Maclaurin, Jorge Ipar-
raguirre, Rafael Bombarell, Timothy Hirzel, Al´an
Aspuru-Guzik, and Ryan P Adams. Convolutional net-
works on graphs for learning molecular ﬁngerprints.
In Advances in Neural Information Processing System-
s, pages 2224–2232, 2015.

[7] Paolo Frasconi, Marco Gori, and Alessandro Sperdu-
ti. A general framework for adaptive processing of da-
ta structures. IEEE transactions on Neural Networks,
9(5):768–786, 1998.

[8] Xavier Glorot and Yoshua Bengio. Understanding the
difﬁculty of training deep feedforward neural network-
s. In International conference on artiﬁcial intelligence
and statistics, pages 249–256, 2010.

[9] Marco Gori, Gabriele Monfardini, and Franco Scarsel-
li. A new model for learning in graph domains.
In
IEEE International Joint Conference on Neural Net-
works, pages 729–734, 2005.

In-
[10] Will Hamilton, Zhitao Ying, and Jure Leskovec.
ductive representation learning on large graphs.
In
Advances in Neural Information Processing Systems,
pages 1024–1034, 2017.

[11] Bo Jiang, Chris Ding, Bio Luo, and Jin Tang. Graph-
laplacian pca: Closed-form solution and robustness.
In Proceedings of the IEEE Conference on Comput-
er Vision and Pattern Recognition, pages 3492–3498,
2013.

[12] Bo Jiang, Zhouqin He, Chris Ding, and Bin Luo.
Saliency detection via a multi-layer graph based dif-
fusion model. Neurocomputing, 314:215–223, 2018.

[13] Tae Hoon Kim, Kyoung Mu Lee, and Sang Uk Lee.
Generative image segmentation using random walks
with restart. In European conference on computer vi-
sion, pages 264–275, 2008.

[14] Diederik P Kingma and Jimmy Ba. Adam: A method
In International Confer-

for stochastic optimization.
ence on Learning Representations, 2015.

[15] Thomas N Kipf and Max Welling. Semi-supervised
classiﬁcation with graph convolutional networks. arX-
iv preprint arXiv:1609.02907, 2016.

[16] Thomas N Kipf and Max Welling. Variational graph
arXiv preprint arXiv:1611.07308,

auto-encoders.
2016.

[17] Alex Krizhevsky and Geoffrey Hinton. Learning mul-
tiple layers of features from tiny images. Technical
report, University of Toronto, 2009.

[18] Yeqing Li, Feiping Nie, Heng Huang, and Junzhou
Huang. Large-scale multi-view spectral clustering via
bipartite graph. In AAAI, pages 2750–2756, 2015.

[19] Yaguang Li, Rose Yu, Cyrus Shahabi, and Yan Liu. D-
iffusion convolutional recurrent neural network: Data-
driven trafﬁc forecasting. In International Conference
on Learning Representations, 2018.

[20] Song Lu, Vijay Mahadevan, and Nuno Vasconcelos.
Learning optimal seeds for diffusion-based salient ob-
ject detection.
In IEEE Conference on Computer
Vision and Pattern Recognition, pages 2790–2797,
2014.

[21] Laurens van der Maaten and Geoffrey Hinton. Visu-
alizing data using t-sne. Journal of machine learning
research, 9:2579–2605, 2008.

[22] Federico Monti, Davide Boscaini, Jonathan Masci, E-
manuele Rodola, Jan Svoboda, and Michael M Bron-
stein. Geometric deep learning on graphs and mani-
folds using mixture model cnns. In IEEE Conference
on Computer Vision and Pattern Recognition, pages
5423–5434, 2017.

[23] Yuval Netzer, Tao Wang, Adam Coates, Alessandro
Bissacco, Bo Wu, and Andrew Y Ng. Reading digits
in natural images with unsupervised feature learning.
In NIPS workshop on deep learning and unsupervised
feature learning, 2011.

[24] Feiping Nie, Guohao Cai, and Xuelong Li. Multi-
view clustering and semi-supervised classiﬁcation
with adaptive neighbours. In AAAI, pages 2408–2414,
2017.

[25] Feiping Nie, Jing Li, Xuelong Li, et al. Parameter-free
auto-weighted multiple graph learning: A framework
for multiview clustering and semi-supervised classiﬁ-
cation. In IJCAI, pages 1881–1887, 2016.

[26] Bryan Perozzi, Rami Al-Rfou, and Steven Skiena.
Deepwalk: Online learning of social representation-
s.
In ACM SIGKDD international conference on
Knowledge discovery and data mining, pages 701–
710, 2014.

[27] Franco Scarselli, Marco Gori, Ah Chung Tsoi, Markus
Hagenbuchner, and Gabriele Monfardini. The graph
neural network model. IEEE Transactions on Neural
Networks, 20(1):61–80, 2009.

[28] Prithviraj Sen, Galileo Namata, Mustafa Bilgic, Lise
Getoor, Brian Galligher, and Tina Eliassi-Rad. Col-
lective classiﬁcation in network data. AI magazine,
29(3):93, 2008.

[29] Alessandro Sperduti and Antonina Starita. Supervised
neural networks for the classiﬁcation of structures.
IEEE Transactions on Neural Networks, 8(3):714–
735, 1997.

10422

[30] Petar Veliˇckovi´c, Guillem Cucurull, Arantxa Casano-
va, Adriana Romero, Pietro Lio, and Yoshua Ben-
gio. Graph attention networks. arXiv preprint arX-
iv:1710.10903, 2017.

[31] John Winn and Nebojsa Jojic. Locus: Learning ob-
ject classes with unsupervised segmentation. In IEEE
International Conference on Computer Vision, pages
756–763, 2005.

[32] Tian Xia, Dacheng Tao, Tao Mei, and Yongdong
Zhang. Multiview spectral embedding. IEEE Transac-
tions on Systems, Man, and Cybernetics, Part B (Cy-
bernetics), 40(6):1438–1446, 2010.

[33] Zhilin Yang, William W. Cohen, and Ruslan Salakhut-
dinov. Revisiting semi-supervised learning with graph
embeddings. In International Conference on Machine
Learning, pages 40–48, 2016.

[34] Dengyong Zhou, Olivier Bousquet, Thomas N Lal, Ja-
son Weston, and Bernhard Sch¨olkopf. Learning with
local and global consistency. In Advances in neural in-
formation processing systems, pages 321–328, 2004.

[35] Dengyong Zhou, Jason Weston, Arthur Gretton, Olivi-
er Bousquet, and Bernhard Sch¨olkopf. Ranking on da-
ta manifolds. In Advances in neural information pro-
cessing systems, pages 169–176, 2004.

[36] Xiaojin Zhu, Zoubin Ghahramani, and John D Laffer-
ty. Semi-supervised learning using gaussian ﬁelds and
harmonic functions.
In International conference on
Machine learning, pages 912–919, 2003.

10423

