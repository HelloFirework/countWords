Fast and Flexible Indoor Scene Synthesis via

Deep Convolutional Generative Models

Daniel Ritchie ∗

Kai Wang ∗
Brown University

Yu-an Lin

{daniel ritchie, kai wang, yu-an lin@brown.edu }

Bedrooms

Living Rooms

Ofﬁces

Bathrooms

Figure 1. Synthetic virtual scenes generated by our method. Our model can generate a large variety of such scenes, as well as complete
partial scenes, in under two seconds per scene. This performance is enabled by a pipeline of multiple deep convolutional generative models
which analyze a top-down representation of the scene.

Abstract

We present a new, fast and ﬂexible pipeline for in-
door scene synthesis that is based on deep convolu-
tional generative models. Our method operates on a
top-down image-based representation, and inserts ob-
jects iteratively into the scene by predicting their cate-
gory, location, orientation and size with separate neu-
ral network modules. Our pipeline naturally supports
automatic completion of partial scenes, as well as syn-
thesis of complete scenes. Our method is signiﬁcantly
faster than the previous image-based method and gen-
erates result that outperforms it and other state-of-the-
art deep generative scene models in terms of faithful-
ness to training data and perceived visual quality.

1. Introduction

People spend a large percentage of their lives indoors: in
bedrooms, living rooms, ofﬁces, kitchens, and other such

∗Equal contribution

spaces. The demand for virtual versions of these real-world
spaces has never been higher. Games, virtual reality, and
augmented reality experience often take place in such en-
vironments. Architects often create virtual instantiations of
proposed buildings, which they visualize for customers us-
ing computer-generated renderings and walkthrough anima-
tions. People who wish to redesign their living spaces can
beneﬁt from a growing array of available online virtual inte-
rior design tools [25, 21]. Furniture design companies, such
as IKEA and Wayfair, increasingly produce marketing im-
agery by rendering virtual scenes, as it is faster, cheaper, and
more ﬂexible to do so than to stage real-world scenes [10].
Finally, and perhaps most signiﬁcantly, computer vision and
robotics researchers have begun turning to virtual environ-
ments to train data-hungry models for scene understanding
and autonomous navigation [2, 3, 8].

Given the recent interest in virtual indoor environments,
a generative model of interior spaces would be valuable.
Such a model would provide learning agents a strong prior
over the structure and composition of 3D scenes. It could

6182

also be used to automatically synthesize large-scale virtual
training corpora for various vision and robotics tasks.

We deﬁne such a scene synthesis model as an algorithm
which, given an empty interior space delimited by archi-
tectural geometry (ﬂoor, walls, and ceiling), decides which
objects to place in that space and where to place them. Any
model which solves this problem must reason about the ex-
istence and spatial relationships between objects in order to
make such decisions. In computer vision, the most ﬂexible,
general-purpose mechanism available for such reasoning is
convolution, especially as realized in the form of deep con-
volutional neural networks (CNNs) for image understand-
ing. Recent work has attempted to perform scene synthe-
sis using deep CNNs to construct priors over possible ob-
ject placements in scenes [13]. While promising, this ﬁrst
attempt suffers from many limitations.
It reasons locally
about object placements and can struggle to globally coor-
dinate an entire scene (e.g. failing to put a sofa into a living
room scene). It does not model the size of objects, lead-
ing to problems with inappropriate object selection (e.g. an
implausibly-long wardrobe which blocks a doorway). Fi-
nally, and most critically, it is extremely slow, requiring
minutes to synthesize a scene due to its use of hundreds
of deep CNN evaluations per scene.

We believe that

image-based synthesis of scenes is
promising because of the ability to perform precise, pixel-
level spatial reasoning, as well as the potential to leverage
existing sophisticated machinery developed for image un-
derstanding with deep CNNs. In this paper, we present a
new image-based scene synthesis pipeline, based on deep
convolutional generative models, that overcomes the issues
of prior image-based synthesis work. Like the previous
method mentioned above, it generates scenes by iteratively
adding objects. However, it factorizes the step of adding
each object into a different sequence of decisions which al-
low it (a) to reason globally about which objects to add, and
(b) to model the spatial extent of objects to be added, in ad-
dition to their location and orientation. Most importantly,
it is fast: two orders of magnitude faster than prior work,
requiring on average under 2 seconds to synthesize a scene.

We evaluate our method by using it to generate syn-
thetic bedrooms, living rooms, ofﬁces, and bathrooms (Fig-
ure 1). We also show how, with almost no modiﬁcation
to the pipeline, our method can synthesize multiple auto-
matic completions of partial scenes using the same fast gen-
erative procedure. We compare our method to the prior
image-based method, another state-of-the art deep gener-
ative model based on scene hierarchies, and scenes created
by humans, in several quantitative experiments and a per-
ceptual study. Our method performs as well or better than
these prior techniques.

2. Related Work

Indoor Scene Synthesis A considerable amount of effort
has been devoted to studying indoor scene synthesis. Some
of the earliest work in this area utilizes interior design prin-
ciples [19] and simple statistical relationships [31] to ar-
range pre-speciﬁed sets of objects. Other early work at-
tempts fully data-driven scene synthesis [6] but is limited to
small scale scenes due to the limited availability of training
data and the learning methods available at the time.

With the availability of large scene datasets such as
SUNCG [28], new data-driven methods have been pro-
posed. [20] uses a directed graphical model for object se-
lection but relies on heuristics for object layout. [23] uses
a probabilistic grammar to model scenes, but also requires
data about human activity in scenes (not readily available
in all datasets) as well as manual annotation of important
object groups. In contrast, our model uses deep convolu-
tional generative models to generate all important object
attributes—category, location, orientation and size—fully
automatically.

Other recent methods have adapted deep neural networks
for scene synthesis. [33] uses a Generative Adversarial Net-
work to generate scenes in an attribute-matrix form (i.e. one
column per scene object). More recently, GRAINS [16]
uses recursive neural networks to encode and sample struc-
tured scene hierarchies. Most relevant to our work is [13],
which also uses deep convolutional neural networks that op-
erate on top-down image representations of scenes and syn-
thesizes scenes by sequentially placing objects. The main
difference between our method and theirs is that (1) our
method samples each object attribute with a single inference
step, while theirs perform hundreds of inferences, and (2)
our method models the distribution over object size in addi-
tion to category, location, and orientation. Our method also
uses separate modules to predict category and location, thus
avoiding some of the failure cases their method exhibits.

Deep Generative Models Deep neural networks are in-
creasingly used to build powerful models which generate
data distributions, in addition to analyzing them, and our
model leverages this capability. Deep latent variable mod-
els, in particular variational autoencoders (VAEs) [14] and
generative adversarial networks (GANs) [7], are popular
for their ability to pack seemingly arbitrary data distribu-
tions into well-behaved, lower-dimensional “latent spaces.”
Our model uses conditional variants of these models—
CVAEs [27] and CGANs [18]—to model the potentially
multimodal distribution over object orientation and spatial
extent. Deep neural networks have also been effectively
deployed for decomposing complex distributions into a se-
quence of simpler ones. Such sequential or autoregressive
generative models have been used for unsupervised parsing

6183

Current scene

Image representation

Next Category (§ 3.1) 

Location (§ 3.2) 

Orientation (§ 3.3) 

Dimensions (§ 3.4) 

Insert Object (§ 3.5)

CNN

CNN

CNN

FCN

(

CNN

CNN

cos $ , sin $

(

CNN

Translate

Snap?

Rotate

Category Counts

1 1 0 1 0 1 0 0

Category

Location

Orientation

Dimensions

Figure 2. Overview of our automatic object-insertion pipeline. We extract a top-down-image-based representation of the scene, which is
fed to four decision modules: which category of object to add (if any), the location, orientation, and dimensions of the object.

of objects in images [5], generating natural images with se-
quential visual attention [9], parsing images of hand-drawn
diagrams [4], generating 3D objects via sequential assem-
blies of primitives [34], and controlling the output of pro-
cedural graphics programs [24], among other applications.
We use an autoregressive model to generate indoor scenes,
constructing them object by object, where each step is con-
ditioned on the scene generated thus far.

Training Data from Virtual Indoor Scenes Virtual in-
door scenes are rapidly becoming a crucial source of train-
ing data for computer vision and robotics systems. Sev-
eral recent works have shown that indoor scene under-
standing models can be improved by training on large
amounts of synthetically-generated images from virtual in-
door scenes [32]. The same has been shown for indoor 3D
reconstruction [2], as well as localization and mapping [17].
At the intersection of vision and robotics, researchers work-
ing on visual navigation often rely on virtual indoor envi-
ronments to train autonomous agents for tasks such as in-
teractive/embodied question answering [3, 8]. To support
such tasks, a myriad of virtual indoor scene simulation plat-
forms have emerged in recent years [26, 29, 1, 15, 30, 22].
Our model can complement these simulators by automati-
cally generating new environments in which to train such
intelligent visual reasoning agents.

3. Model

Our goal is to build a deep generative model of scenes
that leverages precise image-based reasoning, is fast, and
can ﬂexibly generate a variety of plausible object arrange-
ments. To maximize ﬂexibility, we use a sequential gen-
erative model which iteratively inserts one object at a time
until completion. In addition to generating complete scenes
from an empty room, this paradigm naturally supports par-
tial scene completion by simply initializing the process with
a partially-populated scene. Figure 2 shows an overview
of our pipeline. It ﬁrst extracts a top-down, ﬂoor-plan im-
age representation of the input scene, as done in prior work
on image-based scene synthesis [13]. Then, it feeds this

representation to a sequence of four decision modules to
determine how to select and add objects into the scene.
These modules decide which category of object to add to
the scene, if any (Section 3.1), where that object should be
located (Section 3.2), what direction it should face (Sec-
tion 3.3), and its physical dimensions (Section 3.4). This
is a different factorization than in prior work, which we
will show leads to both faster synthesis and higher-quality
results. The rest of this section describes the pipeline at
a high level; precise architectural details can be found in
the supplemental material, and the source code for our sys-
tem is available at https://github.com/brownvc/
fast-synth.

3.1. Next Object Category

The goal of our pipeline’s ﬁrst module is, given a top
down scene image representation, to predict the category of
an object to add to the scene. The module needs to reason
about what objects are already present, how many, and the
available space in the room. To allow the model to also de-
cide when to stop, we augment the category set with an ex-
tra “<STOP>” category. The module uses a Resnet18 [11]
to encode the scene image. It also extract the counts of all
categories of objects in the scene (i.e. a “bag of categories”
representation), as in prior work [13], and encodes this with
a fully-connected network. Finally, the model concatenates
these two encodings and feeds them through another fully-
connected network to output a probability distribution over
categories. At test time, the module samples from the pre-
dicted distribution to select the next category.

Figure 3 shows some example partial scenes and the
most probable next categories that our model predicts for
them. Starting with an empty scene, the next-category
distribution is dominated by one or two large, frequently-
occurring objects (e.g. beds and wardrobes, for bedroom
scenes). The probability of other categories increases as
the scene begins to ﬁll, until the scene becomes sufﬁciently
populated and the “<STOP>” category begins to dominate.
Prior work in image-based scene synthesis predicted cat-
egory and location jointly [13]. This lead to the drawback,
as the authors has noted, that objects which are very likely

6184

Double Bed

Wardrobe

Nightstand

Figure 4. Probability densities for the locations of different object
types predicted by our fully-convolutional network module.

(a)

(b)

(c)

(d)

Figure 5. Probability distributions for nightstands, without ((a) &
(c)) and with ((b) & (d)) regularization.

by-pixel, invoking a deep convolutional network once per
pixel of the scene [13]. In contrast, our module uses a single
forward pass through a fully-convolutional encoder-decoder
network (FCN) to predict the entire distribution at once.

This module uses a Resnet34 encoder followed by an up-
convolutional decoder. The decoder outputs a 64× 64×|C|
image, where |C| is the number of categories. The module
then slices out the channel corresponding to the category
of interest and treats it as a 2D probability distribution by
renormalizing it. We also experimented with using separate
FCNs per category that predict a 64 × 64 × 1 probability
density image but found it not to work as well. We suspect
that training the same network to predict all categories pro-
vides the network with more context about different loca-
tions, e.g. instead of just learning that it should not predict a
wardrobe at a location, it can also learn that this is because a
nightstand is more likely to appear there. Before renormal-
ization, the module zeros out any probability mass that falls
outside the bounds of the room. When predicting locations
for second-tier categories (e.g.
table lamps), it also zeros
out probability mass that falls on top of an object that was
not observed as a supporting surface for that category in the
dataset. At test time, we sample from a tempered version of
this discrete distribution (we use temperature τ = 0.8 for
all experiments in this paper).

Figure 4 shows examples of predicted location distribu-
tions for different scenes. The predicted distributions for
bed and wardrobe avoid placing probability mass in loca-
tions which would block the doors. The distribution for
nightstand is bimodal, with each mode tightly concentrated
around the head of the bed.

To train the network, we use pixel-wise cross entropy
loss. As in prior work, we augment the category set with
a category for “empty space,” which allows the network

6185

Figure 3. Distributions over the next category of object to add to
the scene, as predicted by our model. Empty scenes are dominated
by one or two large, frequent object types (top), partially populated
scenes have a range of possibilities (middle), and very full scenes
are likely to stop adding objects (bottom).

to occur in a location can be repeatedly (i.e. erroneously)
sampled, e.g. placing multiple nightstands to the left of a
bed.
In contrast, our category prediction module reasons
about the scene globally and thus avoid this problem.

3.2. Object Location

In the next module, our model takes the input scene and
predicted category to determine where in the scene an in-
stance of that category should be placed. We treat this
problem as an image-to-image translation problem: given
the input top-down scene image, output a ‘heatmap’ image
containing the probability per pixel of an object occurring
there. This representation is advantageous because it can
be treated as a (potentially highly multimodal) 2D discrete
distribution, which we can sample to produce a new loca-
tion. This pixelwise discrete distribution is similar to that
of prior work, except they assembled the distribution pixel-

double_bed    wardrobe        single_beddeskstand0.00.10.20.30.40.50.6Predicted Next Category Probabilitydressing_tableplantsofa_chaircoffee_tablefloor_lamp0.000.050.100.150.200.25Predicted Next Category Probability<STOP>floor_lamptable_lampsofa_chairshelving0.000.050.100.150.200.25Predicted Next Category ProbabilityNightstand

Table Lamp

Armchair

Double Bed

TV Stand

Ottoman

Figure 6. High-probability object orientations sampled by our
CVAE orientation predictor (visualized as a density plot of front-
facing vectors). Objects typically either snap to one orientation
(left) or multiple orientation modes (middle), or have a range of
values clustered around a single mode (right).

Figure 7. High-probability object dimensions sampled by our
CVAE-GAN dimension predictor (visualized as a density plot of
bounding boxes). Objects in more constrained locations have
lower-variance size distributions (right).

to reason about where objects should not be, in addition
to where they should. Empty-space pixels are weighted 10
times less heavily than occupied pixels in the training loss
computation.
As the ground truth label for each train-
ing example is a single location instead of a distribution,
our model has the potential to overﬁt to that exact location.
This is shown in Figures 5a & 5c, where the predicted dis-
tribution collapses to single-point locations. In the second
case, the network likely tries to match the input room to
several memorized ones, none of which makes sense. To
deal with this problem, we handicap the capacity of the net-
work by applying L2 regularization and dropout, forcing it
to learn a latent space where structurally similar scenes are
close together. This results in averaged output locations, i.e.
a continuous distribution of locations (Figures 5b & 5d).

Before moving on to the next module, our system trans-
lates the input scene image so that it is centered about the
predicted location. This makes the subsequent modules
translation-invariant.

3.3. Object Orientation

Given a translated top-down scene image and object cat-
egory, the orientation module predicts what direction an ob-
ject of that category should face if placed at the center of
the image. We assume each category has a canonical front-
facing direction. Rather than predict the angle of rotation
θ, which is circular, we instead predict the front direction
[cos θ, sin θ]. This must be a normalized vec-
vector, i.e.

tor, i.e. the magnitude of sin θ must be √1 − cos2 θ. Thus,

our module predicts cos θ along with a Boolean value giv-
ing the sign of sin θ. Here, we found using separate network
weights per category to be most effective.

The set of possible orientations has the potential to be
multimodal: for instance, a bed in the corner of a room may
be backed up against either wall of the corner. To allow
our module to model this behavior, we implement it with a
conditional variational autoencoder (CVAE) [27]. Speciﬁ-
cally, we use a CNN to encode the input scene, which we
then concatenate with a latent code z sampled from a mul-

tivariate unit normal distribution, and then feed to a fully-
connected decoder to produce cos θ and the sign of sin θ. At
training time, we use the standard CVAE loss formulation
(i.e. with an extra encoder network) to learn an approximate
posterior distribution over latent codes).

Since interior scenes are frequently enclosed by rectilin-
ear architecture, objects in them are often precisely aligned
to cardinal directions. A CVAE, however, being a proba-
bilistic model, samples noisy directions. To allow our mod-
ule to produce precise alignments when appropriate, this
module includes a second CNN which takes the input scene
and predicts whether the object to be inserted should have
its predicted orientation “snapped” to the nearest of the four
cardinal directions.

Figure 6 shows examples of predicted orientation distri-
butions for different input scenes. The nightstand snaps to
a single orientation, being highly constrained by its rela-
tions to the bed and wall. Table lamps are often symmet-
ric, which leads to a predicted orientation distribution with
multiple modes. An armchair to be placed in the corner of
a room is most naturally oriented diagonally with respect to
the corner, but some variability is possible.

Before moving on to the next module, our system ro-
tates the input scene image by the predicted angle of rota-
tion. This transforms the image into the local coordinate
frame of the object category to be inserted, making sub-
sequent modules rotation-invariant (in addition to already
being translation-invariant).

3.4. Object Dimensions

Given a scene image transformed into the local coordi-
nate frame of a particular object category, the dimensions
module predicts the spatial extent of the object. That is, it
predicts an object-space bounding box for the object to be
inserted. This is also a multimodal problem, even more so
than orientation (e.g. many wardrobes of varying lengths
can ﬁt against the same wall). Again, we use a CVAE for
this: a CNN encodes the scene, concatenates it with z, and
then uses a fully-connected decoder to produce the [x, y]
dimensions of the bounding box.

6186

The human eye is very sensitive to errors in size, e.g.
an object that is too large and thus penetrates the wall next
to it. To help ﬁne-tune the prediction results, we also in-
clude an adversarial loss term in the CVAE training. This
loss uses a convolutional discriminator which takes the in-
put scene concatenated channel-wise with the signed dis-
tance ﬁeld (SDF) of the predicted bounding box. As with
the orientation module, this module also uses separate net-
work weights per category.

Figure 7 visualizes predicted size distributions for differ-
ent object placement scenarios. The predicted distributions
capture the range of possible sizes for different object cat-
egories, e.g. TV stands can have highly variable length.
However, in a situation such as Figure 7 Right, where an
ottoman is to be placed between the nightstand and the
wall, the predicted distribution is lower-variance due to this
highly constrained location.

3.5. Object Insertion

To choose a speciﬁc 3D model to insert given the pre-
dicted category, location, orientation, and size, we per-
form a nearest neighbor search through our dataset to ﬁnd
3D models that closely ﬁt the predicted object dimensions.
When multiple likely candidate models exist, we favor ones
that have frequently co-occurred in the dataset with other
objects already in the room, as this slightly improves the
visual style of the generated rooms (though it is far from a
general solution to the problem of style-aware scene synthe-
sis). Occasionally, the inserted object collides with existing
objects in the room, or, for second-tier objects, overhangs
too much over its supporting surface. In such scenarios, we
choose another object of the same category. In very rare sit-
uations (less than 1%), no possible insertions exist. If this
occurs, we resample a different category from the predicted
category distribution and try again.

4. Data & Training

We train our model using the SUNCG dataset, a collec-
tion of over forty thousand scenes designed by users of an
online interior design tool [28]. In this paper, we focus our
experiments on four common room types: bedrooms, liv-
ing rooms, bathrooms, and ofﬁces. We extract rooms of
these types from SUNCG, performing pre-processing to ﬁl-
ter out uncommon object types, mislabeled rooms, etc. Af-
ter pre-processing, we obtained 6300 bedrooms (with 40
object categories), 1400 living rooms (35 categories), 6800
bathrooms (22 categories), and 1200 ofﬁces (36 categories).
Further details about our dataset and pre-processing proce-
dures can be found in the supplemental material.

To generate training data for all of our modules, we fol-
low the same general procedure:
take a scene from our
dataset, remove some subset of objects from it, and task the
module with predicting the ‘next’ object to be added (i.e.

one of the removed objects). This process requires an or-
dering of the objects in each scene. We infer static support
relationships between objects (e.g. lamp supported by table)
using simple geometric heuristics, and we guarantee that
all supported objects come after their supporting parents in
this ordering. We further guarantee that all such supported
‘second-tier’ objects come after all ‘ﬁrst-tier’ objects (i.e.
those supported by the ﬂoor). For the category prediction
module, we further order objects based on their importance,
which we deﬁne to be the average size of a category multi-
plied by its frequency of occurrence in the dataset. Doing
so imposes a stable, canonical ordering on the objects in the
scene; without such an ordering, we ﬁnd that there are too
many valid possible categories at each step, and our model
struggles to build coherent scenes across multiple object in-
sertions. For all other modules, we use a randomized order-
ing. Finally, for the location module, the FCN is tasked with
predicting not the location of a single next object, but rather
the locations of all missing objects removed from the train-
ing scene whose supporting surface is present in the partial
scene.

We train each module in our pipeline separately for dif-
ferent room categories. Empirically, we ﬁnd that the cate-
gory module performs best after seeing ∼ 300, 000 train-
ing examples, and the location module performs best after
∼ 1, 000, 000 examples. As the problems that the orienta-
tion and dimension models are solving is more local, their
behavior is more stable across different epochs. In practice,
with use orientation modules trained with ∼ 2, 000, 000 ex-
amples and dimension modules trained with ∼ 1, 000, 000
examples.

5. Results & Evaluation

Complete scene synthesis Figure 1 shows examples of
complete scenes synthesized by our model, given the ini-
tial room geometry. Our model captures multiple possible
object arrangement patterns for each room type: bedrooms
with desks vs.
those with extra seating, living rooms for
conversation vs. watching television, etc.

Scene completion Figure 8 shows examples of partial
scene completion, where our model takes an incomplete
scene as input and suggests multiple next objects to ﬁll the
scene. Our model samples a variety of different comple-
tions for the same starting partial scene. This example also
highlights our model’s ability to cope with non-rectangular
rooms (bottom row), one of the distinct advantages of pre-
cise pixel-level reasoning with image-based models.

Object category distribution For a scene generative
model to capture the training data well, a necessary condi-
tion is that the distribution of object categories which occurs

6187

Input Partial Scene

Synthesized Completions

Method

Acc Method

GRAINS [16]
Deep Priors [13]
Ours

96.56 No Input Alignment (Orient)
84.69 No Input Alignment (Dims)
58.75
Joint Category + Location

Perturbed (1%)
Perturbed (5%)
Perturbed (10%)

50.00 Category from [13]
54.69
Location from [13]
64.38 Orient + Dims from [13]

Acc

94.10
76.60
81.70

89.30
83.60
67.30

Table 2. Real vs. synthetic classiﬁcation accuracy for scenes gen-
erated by different methods (Left) and our method, modiﬁed by
changing the design of some of the components or substituting
them with similar components from prior works (Right). Lower
(closer to 50%) is better.

Figure 8. Given an input partial scene (left column), our method
can generate multiple automatic completions of the scene. This re-
quires no modiﬁcation to the method’s sampling procedure, aside
from seeding it with a partial scene instead of an empty one.

Method

Bedroom Living

Bathroom

Ofﬁce

Uniform
Deep Priors [13]
GRAINS [16]
Ours

0.6202
0.2017
0.2135
0.0095

0.8858
0.4874
0.3217
0.0179

1.3675
0.2479

—

0.7219
0.2138

—

0.0240

0.0436

Table 1. KL divergence between the distribution of object cate-
gories in synthesized results vs. training set. Lower is better. Uni-
form is the uniform distribution over object categories.

in its synthesized results should closely resemble that of the
training set. To evaluate this, we compute the Kullback-
Leibler divergence DKL(Psynth||Pdataset) between the cat-
egory distribution of synthesized scenes and that of the
training set. Note that we cannot compute a symmetrized
Jensen-Shannon divergence because some of the methods
we compare against have zero probability for certain cate-
gories, making the divergence inﬁnite. Table 1 shows the
category distribution KL divergence of different methods.
Our method generates a category distribution that are more
faithful to that of the training set than other approaches.

Figure 9. Correcting failure cases from [13], Fig 14. (Left) Our
model does not omit sofas for seating. (Right) Our model chooses
a cabinet that does not block the door.

mance on 320 held out test scenes.

Table 2 shows the performance against different base-
lines. Compared to previous methods, our results are sig-
niﬁcantly harder for the classiﬁer to distinguish.
In fact,
it is marginally harder to distinguish our scenes from real
training scenes that it is to do so for scenes in which ev-
ery object is perturbed by a small random amount (standard
deviation of 10% of the object’s bounding box dimensions).

Effectiveness of our design choices We use the same
classiﬁcation setup to investigate the effectiveness of our
individual design choices. As Table 2 suggests, swapping
out our model components for those of [13], omitting input
alignment for the orient and dimension modules, and pre-
dicting location + category jointly all lead to worse results
than the full model. We also show qualitatively in Fig 9 that
our strategy help to avoid common failure cases from prior
work [13]. Using a separate category module allows our
model to generate seats for the living room (left), and intro-
ducing a dimension module prevents the use of a too-large
cabinet that blocks the ofﬁce door.

Scene classiﬁcation accuracy Looking beyond cate-
gories, to evaluate how well the distribution of our gener-
ated scenes match that of the training scenes, we train a
classiﬁer tasked to distinguish between “real” scenes (from
the training set) and “synthetic” scenes (generated by our
method). The classiﬁer is a Resnet34 that takes as input the
same top-down multi-channel image representation that our
model uses. The classiﬁer is trained with 1,600 scenes, half
real and half synthetic. We evaluate the classiﬁer perfor-

Speed comparisons Table 3 shows the time taken for dif-
ferent methods to synthesize a complete scene. It takes on
average less than 2 seconds for our model to generate a
complete scene on a NVIDIA Geforce GTX 1080Ti GPU,
which is two orders of magnitudes faster than the previous
image based method (Deep Priors). While slower than end-
to-end methods such as [16], our model can also perform
tasks such as scene completion and next object suggestion,
both of which can be useful in real time applications.

6188

Method

Avg. Time ( s)

Deep Priors [13]
GRAINS [16]
Ours

∼ 240
0.1027
1.858

Table 3. Average time in seconds to generate a single scene for
different methods. Lower is better.

Perceptual study We also conducted a two-alternative
forced choice (2AFC) perceptual study on Amazon Me-
chanical Turk to evaluate how plausible our generated
scenes appear compared those generated by other methods.
Participants were shown two top-down rendered scene im-
ages side by side and asked to pick which one they found
more plausible.
Images were rendered using solid colors
for each object category, to factor out any effect of material
or texture appearance. For each comparison and each room
type, we recruited 10 participants, which was sufﬁcient to
produce strong 95% conﬁdence intervals. Each participant
performed 55 comparisons; 5 of these were “vigilance tests”
comparing against a randomly jumbled scene to check that
participants were paying attention. We ﬁlter out participants
who did not pass all vigilance tests.

Table 4 shows the results of this study. Our gener-
ated scenes are signiﬁcantly preferred to those generated by
GRAINS across all room types (GRAINS does not provide
bathroom or ofﬁce results). Due to format differences, our
reconstruction of GRAINs room geometry is imperfect. We
manually removed rooms where objects intersect with the
walls, but it should be noted that the reconstructed rooms
might still differ slightly from the results presented in their
work. Compared to the Deep Priors method, our scenes are
preferred for bedrooms and bathrooms, and judged indis-
tinguishable for living rooms. Our generated ofﬁce scenes
are less preferred, however. We hypothesize that this is be-
cause the ofﬁce training data is highly multimodal, contain-
ing personal ofﬁces, group ofﬁces, conference rooms, etc.
It appears to us that the rooms generated by the Deep Priors
method are mostly personal ofﬁces. We also generate high
quality personal ofﬁces consistently. However, when the
category module tries to sample other types of ofﬁces, this
intent is not communicated well to other modules, result-
ing in unorganized results e.g. a small table with ten chairs.
Finally, compared to held-out human-created scenes from
SUNCG, our results are indistinguishable for bedrooms and
bathrooms, nearly indistinguishable for living rooms, and
again less preferred for ofﬁces.

Room Type GRAINS [16] Deep Priors [13]

SUNCG

Ours vs.

—
—

82.7 ± 3.6
74.1 ± 3.8

56.1 ± 4.1
52.7 ± 4.5
68.6 ± 3.9
36.3 ± 4.5

48.0 ± 4.7
Bedroom
45.0 ± 4.5
Living
50.0 ± 4.5
Bathroom
34.8 ± 5.1
Ofﬁce
Table 4. Percentage (± standard error) of forced-choice compar-
isons in which scenes generated by our method are judged as more
plausible than scenes from another source. Higher is better. Bold
indicate our scenes are preferred with > 95% conﬁdence; gray in-
dicates our scenes are dis-preferred with > 95% conﬁdence; reg-
ular text indicates no preference. — indicates unavailable results.

to add to a scene, where to add them, how they should be
oriented, and how large they should be. Combined, these
decision modules allow for rapid (under 2 seconds) synthe-
sis of a variety of plausible scenes, as well as automatic
completion of existing partial scenes. We evaluated our
method via statistics of generated scenes, the ability of a
classiﬁer to detect synthetic scenes, and the preferences of
people in a forced-choice perceptual study. Our method out-
performs prior techniques in all cases.

There are still many opportunities for future work in
the area of automatic indoor scene synthesis. We would
like to address the limitations mentioned previously in
our method’s ability to generate room types with multiple
strong modes of variation, e.g. single ofﬁces vs. confer-
ence ofﬁces. One possible direction is to explore integrat-
ing our image-based models with models of higher-level
scene structure, encoded as hierarchies a la GRAINS, or
perhaps as graphs or programs. Neither our method, nor
any other prior work in automatic scene synthesis of which
we are aware, addresses the problem of how to generate
stylistically-consistent indoor scenes, as would be required
for interior design applications. Finally, to make automatic
scene synthesis maximally useful for training autonomous
agents, generative models must be aware of the functional-
ity of indoor spaces, and must synthesize environments that
support carrying out activities of interest.

Acknowledgments

We thank the anonymous reviewers for their helpful sug-
gestions. Scene renderings shown in this paper were cre-
ated using the Mitsuba physically-based renderer [12]. This
work was supported in part by NSF award #1753684 and by
a hardware donation from Nvidia.

6. Conclusion

References

In this paper, we presented a new pipeline for indoor
scene synthesis using image-based deep convolutional gen-
erative models. Our system analyzes top-down view repre-
sentations of scenes to make decisions about which objects

[1] S. Brodeur, E. Perez, A. Anand, F. Golemo, L. Celotti,
F. Strub, J. Rouat, H. Larochelle, and A. C. Courville.
HoME: a Household Multimodal Environment.
CoRR,
arXiv:1711.11017, 2017. 3

6189

[2] A. Dai, D. Ritchie, M. Bokeloh, S. Reed, J. Sturm, and
M. Nießner. Scancomplete: Large-scale scene completion
and semantic segmentation for 3d scans. In Proc. Computer
Vision and Pattern Recognition (CVPR), IEEE, 2018. 1, 3

[3] A. Das, S. Datta, G. Gkioxari, S. Lee, D. Parikh, and D. Ba-

tra. Embodied Question Answering. In CVPR, 2018. 1, 3

[4] K. Ellis, D. Ritchie, A. Solar-Lezama, and J. B. Tenenbaum.
Learning to Infer Graphics Programs from Hand-Drawn Im-
ages. CoRR, arXiv:1707.09627, 2017. 3

[5] S. M. A. Eslami, N. Heess, T. Weber, Y. Tassa, D. Szepesvari,
K. Kavukcuoglu, and G. E. Hinton. Attend, Infer, Repeat:
Fast Scene Understanding with Generative Models. In NIPS
2016, 2016. 3

[6] M. Fisher, D. Ritchie, M. Savva, T. Funkhouser, and P. Han-
rahan. Example-based Synthesis of 3D Object Arrange-
ments. In SIGGRAPH Asia 2012, 2012. 2

[7] I. Goodfellow,

J. Pouget-Abadie, M. Mirza, B. Xu,
D. Warde-Farley, S. Ozair, A. Courville, and Y. Bengio. Gen-
erative Adversarial Nets. In NIPS 2014, 2014. 2

[8] D. Gordon, A. Kembhavi, M. Rastegari, J. Redmon, D. Fox,
and A. Farhadi. IQA: Visual Question Answering in Interac-
tive Environments. In CVPR, 2018. 1, 3

[9] K. Gregor, I. Danihelka, A. Graves, and D. Wierstra. DRAW:
A recurrent neural network for image generation. In ICML
2015, 2015. 3

[10] C. Group.

Putting

the
Visualize

CGI

in

IKEA:
Homes.

Helps

V-Ray

How
https://www.chaosgroup.com/blog/putting-the-cgi-in-ikea-
how-v-ray-helps-visualize-perfect-homes, 2018. Accessed:
2018-10-13. 1

Perfect

[11] K. He, X. Zhang, S. Ren, and J. Sun. Deep Residual Learning

for Image Recognition. In CVPR 2016, 2016. 3

[12] W. Jakob. Mitsuba renderer, 2010. http://www.mitsuba-

renderer.org. 8

[13] Kai Wang, Manolis Savva, Angel X. Chang, and Daniel
Ritchie. Deep Convolutional Priors for Indoor Scene Syn-
thesis. In SIGGRAPH 2018, 2018. 2, 3, 4, 7, 8

[14] D. P. Kingma and M. Welling. Auto-Encoding Variational

Bayes. In ICLR 2014, 2014. 2

[15] E. Kolve, R. Mottaghi, D. Gordon, Y. Zhu, A. Gupta, and
A. Farhadi. AI2-THOR: an interactive 3d environment for
visual AI. CoRR, arXiv:1712.05474, 2017. 3

[16] M. Li, A. G. Patil, K. Xu, S. Chaudhuri, O. Khan, A. Shamir,
C. Tu, B. Chen, D. Cohen-Or, and H. Zhang. Grains: Gen-
erative recursive autoencoders for indoor scenes. CoRR,
arXiv:1807.09193, 2018. 2, 7, 8

[17] W. Li, S. Saeedi, J. McCormac, R. Clark, D. Tzoumanikas,
Q. Ye, Y. Huang, R. Tang, and S. Leutenegger.
Interior-
net: Mega-scale multi-sensor photo-realistic indoor scenes
dataset.
In British Machine Vision Conference (BMVC),
2018. 3

[18] S. O. Mehdi Mirza. Conditional generative adversarial nets.

CoRR, arXiv:1411.1784, 2014. 2

[19] P. Merrell, E. Schkufza, Z. Li, M. Agrawala, and V. Koltun.
Interactive Furniture Layout Using Interior Design Guide-
lines. In SIGGRAPH 2011, 2011. 2

[20] V. F. Paul Henderson, Kartic Subr. Automatic Generation of
Constrained Furniture Layouts. CoRR, arXiv:1711.10939,
2018. 2

[21] Planner5d. Home Design Software and Interior Design
Tool ONLINE for home and ﬂoor plans in 2D and 3D.
https://planner5d.com, 2017. Accessed: 2017-10-20. 1

[22] X. Puig, K. Ra, M. Boben, J. Li, T. Wang, S. Fidler, and
A. Torralba. VirtualHome: Simulating Household Activities
via Programs. In CVPR, 2018. 3

[23] Qi, Siyuan and Zhu, Yixin and Huang, Siyuan and Jiang,
Chenfanfu and Zhu, Song-Chun. Human-centric Indoor
Scene Synthesis Using Stochastic Grammar. In CVPR 2018,
2018. 2

[24] D. Ritchie, A. Thomas, P. Hanrahan, and N. D. Goodman.
Neurally-Guided Procedural Models: Amortized Inference
for Procedural Graphics Programs using Neural Networks.
In NIPS 2016, 2016. 3

[25] RoomSketcher.

http://www.roomsketcher.com.
1

Visualizing
Accessed:

Homes.
2017-11-06.

[26] M. Savva, A. X. Chang, A. Dosovitskiy, T. Funkhouser, and
V. Koltun. MINOS: Multimodal indoor simulator for navi-
gation in complex environments. arXiv:1712.03931, 2017.
3

[27] K. Sohn, H. Lee, and X. Yan. Learning structured output rep-
resentation using deep conditional generative models. In Ad-
vances in Neural Information Processing Systems 28. 2015.
2, 5

[28] S. Song, F. Yu, A. Zeng, A. X. Chang, M. Savva, and
T. Funkhouser. Semantic Scene Completion from a Single
Depth Image. 2017. 2, 6

[29] Y. Wu, Y. Wu, G. Gkioxari, and Y. Tian. Building Gener-
alizable Agents with a Realistic and Rich 3D Environment.
CoRR, arXiv:1801.02209, 2018. 3

[30] C. Yan, D. K. Misra, A. Bennett, A. Walsman, Y. Bisk, and
Y. Artzi. CHALET: cornell house agent learning environ-
ment. CoRR, arXiv:1801.07357, 2018. 3

[31] L.-F. Yu, S.-K. Yeung, C.-K. Tang, D. Terzopoulos, T. F.
Chan, and S. J. Osher. Make It Home: Automatic Optimiza-
tion of Furniture Arrangement. In SIGGRAPH 2011, 2011.
2

[32] Y. Zhang, S. Song, E. Yumer, M. Savva, J.-Y. Lee, H. Jin, and
T. Funkhouser. Physically-based rendering for indoor scene
understanding using convolutional neural networks. The
IEEE Conference on Computer Vision and Pattern Recog-
nition (CVPR), 2017. 3

[33] Z. Zhang, Z. Yang, C. Ma, L. Luo, A. Huth, E. Vouga, and
Q. Huang. Deep generative modeling for scene synthesis via
hybrid representations. CoRR, arXiv:1808.02084, 2018. 2

[34] C. Zou, E. Yumer, J. Yang, D. Ceylan, and D. Hoiem. 3D-
PRNN: Generating Shape Primitives with Recurrent Neural
Networks. In ICCV 2017, 2017. 3

6190

