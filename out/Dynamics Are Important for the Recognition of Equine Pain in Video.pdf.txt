Dynamics are Important for the Recognition of Equine Pain in Video

Soﬁa Broom´e1 Karina Bech Gleerup2

Pia Haubro Andersen3 Hedvig Kjellstr¨om1

1 Division of Robotics, Perception, and Learning, KTH Royal Institute of Technology, Sweden

2 Section for Medicine and Surgery, University of Copenhagen, Denmark

3 Deptartment of Clinical Sciences, Swedish University of Agricultural Sciences, Sweden

sbroome@kth.se

kbg@sund.ku.dk

pia.haubro.andersen@slu.se

hedvig@kth.se

Abstract

A prerequisite to successfully alleviate pain in animals
is to recognize it, which is a great challenge in non-verbal
species. Furthermore, prey animals such as horses tend to
hide their pain.
In this study, we propose a deep recur-
rent two-stream architecture for the task of distinguishing
pain from non-pain in videos of horses. Different models
are evaluated on a unique dataset showing horses under
controlled trials with moderate pain induction, which has
been presented in earlier work. Sequential models are ex-
perimentally compared to single-frame models, showing the
importance of the temporal dimension of the data, and are
benchmarked against a veterinary expert classiﬁcation of
the data. We additionally perform baseline comparisons
with generalized versions of state-of-the-art human pain
recognition methods. While equine pain detection in ma-
chine learning is a novel ﬁeld, our results surpass veteri-
nary expert performance and outperform pain detection re-
sults reported for other larger non-human species.

1. Introduction

This paper presents a method for automatic detection of
equine pain behavior in video – a highly challenging prob-
lem since horses display pain through subtle signals.

Recognition of pain in animals is important because pain
compromises animal welfare and can be a manifestation of
disease. Pain diagnostics for humans typically include self-
evaluation with the help of standardized forms and labeling
of the pain by a clinical expert using pain scales. However,
animals cannot verbalize their pain. The use of standardized
pain scales is moreover challenged by the fact that prey an-
imals such as horses and cattle display subtle and less obvi-
ous pain behavior. It is simply beneﬁcial for a prey animal
to appear healthy, to lower the interest from predators.

Pain in horses is instead typically assessed by (manu-
ally) observing a combination of behavioral traits such as
exploratory behavior, restlessness, positioning in the box

and changes in facial expressions [37]. Video ﬁlming may
be used to prolong the observation periods and increase
the likelihood of capturing pain behavior. However, proper
manual annotation such as EquiFACS [37] of the facial ex-
pressions and other behavioral signs of pain is time consum-
ing [19] – it can take two hours to evaluate a two minute
video clip. This severely limits the possibilities for rou-
tine pain diagnostics on horses, for instance before or after
surgery. An automatic pain detection system would allow
veterinarians and horse owners to reliably and frequently
screen the pain level of the horse. Section 2.1 provides more
background on equine pain from a veterinary point of view.

We introduce a new research direction and application
ﬁeld in computer vision: detection of equine pain in video.
While human pain detection has been performed with sin-
gle images, owing to our expressive faces, the research hy-
pothesis in this paper is that the pose and movement pat-
terns matter more for horses. The equine pain detection
task is explored using recurrent neural network architec-
tures. These memory-preserving networks are chosen in or-
der to model temporality, which is considered crucial when
assessing pain in horses [37]. We have not seen previous
work in pain detection for non-human species where tem-
poral information is taken into account.

Speciﬁcally, we propose a deep neural network approach
to automatic detection of horse pain in video, taking both
spatial and temporal context into account (Section 4). Our
architecture is a new combination of existing network types,
using optical ﬂow as an attention mask in a Convolutional
LSTM [29] two-stream setting. We have reinterpreted the
two-stream network ﬁrst presented by [30] into a fully re-
current two-stream Convolutional LSTM network. The
fusion of the two streams is done on the feature-level,
adding the optical ﬂow feature map to the RGB feature map
element-wise, which highlights the regions of interest in the
video. The method learns patterns end-to-end without the
help of intermediate representations such as the Facial Ac-
tion Coding System (FACS) [5]. To the best of our knowl-
edge, this has not been done previously for animals.

12667

The method is experimentally shown to outperform sev-
eral baselines, including a method relying on single-frame
analysis. Most notably, we show that our method performs
better than manual classiﬁcation by veterinarians with ex-
tensive expertize in equine pain assessment.

2. Background and related work

2.1. Pain evaluation in horses

Within the last decade, there has been an increasing fo-
cus on pain evaluation in horses, both because there is an
increasing knowledge about the detrimental effects of pain
and because advanced treatments and surgical procedures
have become more common for horses [9]. Compared to
small animals, horses are often not given the optimal pain
treatment [15]. Reducing pain to a minimum ensures animal
welfare, improves convalescence and optimizes treatment
success [26]. Pain detection and quantiﬁcation in horses
depend on an observer to detect potentially pain related
changes in behavior and in physiological parameters.

There is increasing focus on behavioral observations,
since physiological parameters are often not pain-speciﬁc
[1]. When in pain, horses change their activity budget
[23, 24], meaning the percentage of their time that they
spend lying down, eating, being attentive, etc. However,
documenting this is very time consuming. Even though
short, applicable pain scoring tools have been developed
[9], these do not capture all pain behavior but rather do spot
sampling. An automated means to record pain behavior
from surveillance videos would be an important step for-
ward in equine pain research.

Facial expressions have lately been presented as a sen-
sitive measure of pain in horses, when observed in combi-
nation with other pain behaviors [3, 8, 9, 35]. A few ex-
amples of the facial pain characteristics described in [8] are
slightly dropped ears, muscle tension around the eyes with
an increased incidence of exposing the white in the eye, a
square-like shape of the nostrils and an increased tension of
the lips and chin.

2.2. Automated pain recognition

Automated pain recognition has largely focused on hu-
man pain. Littlewort et al. [14] distinguish between posed
and real pain for humans in video by training separate lin-
ear support vector machine (SVM) classiﬁers for different
FACS [5] action units. Among the works on pain recog-
nition in humans using deep learning are Kahou et al. [11],
Rodriguez et al. [25] and Zhou et al. [38]. [25] use an LSTM
layer on top of a VGG-16 [31] CNN. Their task is to detect
pain in the UNBC-McMaster Shoulder Pain Database [17],
which is a video dataset for human pain recognition. Fea-
tures up until and including the ﬁrst dense layer in VGG-
16 are extracted frame-wise and then arranged in sequences

that are fed to the LSTM. The top LSTM layer is found
to improve the result signiﬁcantly compared to the base
model. By aligning, cropping, masking and frontalizing the
input data to the VGG+LSTM architecture they obtain the
best known result on this dataset. Albeit without the pre-
processing, we have included tests of their architecture on
our dataset in Section 5.

Lu et al. [16] explore automated pain assessment in
sheep faces from still images. To our knowledge, this is
the only previous work in automatic recognition of pain
for larger animals. Facial action units associated with pain
are detected through the successive steps of facial detec-
tion, landmark detection, feature extraction and classiﬁca-
tion with an SVM. Our system performs better than the one
of [16] on the binary pain detection task for unseen subjects.
Tuttle et al. [34] use deep learning to perform automatic
facial action unit detection in mice, to score for pain. The
single-frame InceptionV3 CNN is trained to detect action
units, which are counted according to a grimace scale to
establish the presence of pain.

Differently from the work of [16] and [34], our method
takes an end-to-end approach to the problem, so as to not
depend on pre-deﬁned pain cues. We do not only study the
face but also the pose, body and movement pattern of the an-
imal, which we believe is crucial for reliable pain diagnos-
tics in horses. The data both in [16] and in [34] are labeled
according to a grimace scale ground truth and not accord-
ing to whether pain was induced or not. Furthermore, the
respective datasets are both culled so that only clear frontal
faces are considered.

2.3. Action recognition in video

Action recognition methods can guide model develop-
ment for pain recognition in video data, since both ﬁelds
require the capability of extracting information from se-
quences of images. The challenge in action recognition and
computer vision for video lies in fully using the information
captured in dependencies across the temporal dimension of
the data. The task of recognizing movements and gestures
from video is still far from human performance, in contrast
to single image object recognition. There are different ways
of utilizing temporal information across a sequence of im-
ages. In a neural network context, this can for example be
achieved using 3D convolutional layers, pooling across the
temporal dimension, or by using recurrence. Long Short-
Term Memory (LSTM) networks [10] are Recurrent Neural
Networks (RNNs), proven to work well for data with long-
term dependencies since they can mitigate the problem of
vanishing gradients, from which standard RNNs suffer [22].
An early work in action recognition using deep learning
by Karpathy et al. [12] compares single-frame and sequen-
tial models and ﬁnds only a marginal difference between
the two approaches. But more recently, sequential models

12668

have clearly outperformed the ones that are trained on single
frames [2, 21, 36]. Single-frame models base their classiﬁ-
cation on image content instead of on the dynamics between
frames. This works to some extent, especially on datasets
such as Sports-1M [12] or UCF-101 [32] where most of the
activity categories contain pertinent visual objects – con-
sider for example walking a dog or playing the piano.

Ng et al. [21] mainly test two approaches to the se-
quential activity recognition problem, after deep two-stream
CNN [30] feature extraction of the frames and their corre-
sponding optical ﬂow. Stacked LSTM layers are compared
to different ways of feature pooling across the temporal di-
mension. The former approach obtained the thereto highest
result on the Sports-1M dataset.

Concerning the two-stream model, in [11] a comparison
is made between stream fusion at the feature-level vs. fu-
sion at the decision-level (meaning typically after the soft-
max output), and the authors ﬁnd that feature-level fusion
improves their results. In our two-stream architecture ex-
periments, we follow their example and fuse the streams at
the feature-level.

Shi et al. [29] introduce the Convolutional LSTM (C-
LSTM) unit, where the fully-connected matrix multiplica-
tions involving the weight matrices in the LSTM equations
[10] are replaced with convolutions. The idea with the C-
LSTM is to preserve spatial structure and avoid having to
collapse the input images to vectors, as one needs to do for
a standard LSTM (Section 4.1). Networks composed of C-
LSTM units were the best-performing architectures in our
experiments on the equine dataset.

The C-LSTM in [29] is applied to weather prediction
with radar map sequences as input. But owing to the contri-
bution of [29], C-LSTM layers have recently been used in
a few works on action and gesture recognition from video
data, notably by Li et al. [13] and Zhu et al. [39]. The ar-
chitecture of [39] consists of two streams: one using RGB
and one using RGB-D as input. The streams are each com-
posed of a 4-layer 3D CNN followed by a 2-layer C-LSTM
network, spatial pyramid pooling and a dense layer before
fusion. Similar to our method, [39] perform simultaneous
extraction of temporal and spatial features. Their idea is
to let the 3D convolutions handle the short-term temporal

Table 1: Dataset overview, per horse subject and pain label
(hh:mm:ss).

Subj. ID 1

2

3

4

5

6

Total

Gender

Mare

Mare

Mare

Mare

Mare

Gelding

Age (years)

14

7

12

6

14

3

n/a

n/a

Pain

No pain

Total

00:58:55

00:39:30

00:29:52

00:22:21

00:44:38

00:26:09

03:41:25

01:00:27

01:01:29

01:01:10

01:31:12

00:59:49

00:29:37

06:03:44

01:59:22

01:40:59

01:31:02

01:53:33

01:44:27

00:55:46

09:45:09

# frames, 2 fps

14324

12118

10924

13626

12534

6692

70292

dependencies of the data and the C-LSTM the longer-term
dependencies. We differ from the method of [39] in that we
use optical ﬂow and not RGB-D data for the motion stream
and that our parallel streams consist only of recurrent C-
LSTM layers, without 3D convolutions.

Li et al. [13] introduce the VideoLSTM architecture, us-
ing C-LSTM networks in combination with a soft atten-
tion mechanism both for activity recognition and localiza-
tion. Features are ﬁrst extracted from RGB and optical ﬂow
frames using a single-frame VGG-16 [31] pre-trained on
ImageNet [4] before they are fed to the recurrent C-LSTM
streams. The attention in [13] is computed by convolving
the input feature map at t with the hidden state from t − 1.
A given C-LSTM stream in their pipeline always has one
layer, consisting of 512 units. By contrast, our C-LSTM
network is deep but has fewer units per layer, and we do not
separate feature extraction from the temporal modeling.

3. The Equine Pain Dataset

The equine pain dataset used in this paper has been col-
lected by Gleerup et al. [8], and consists of 9 hours and 45
minutes of video across six horse subjects, out of which 3
hours and 41 minutes are labeled as pain and 6 hours and
3 minutes as non-pain. These binary labels have been set
according to the presence of pain induction, known from
the recording protocol (Section 3.1). Frames are extracted
from the equine videos at 2 fps. When training on 10-frame
sequences, the dataset contains ∼ 7k sequences. Duration-
wise this dataset is comparable to known video datasets
such as Hollywood2 [18] (20 hours) and UCF-101 [32] (30
hours). Details on the class distribution across the different
subjects can be seen in Table 1. A more complete descrip-
tion with image examples can be found in [8].

3.1. Recording setup and pain induction

The subjects were trained with positive reinforcement
before the recordings to be able to stand relatively still in
the trial area. They were ﬁlmed during positive and nega-
tive pain induction trials with a stationary camera at a dis-
tance of approximately two meters. The imagery contains
the head and the body until the wither. The camera was
ﬁxed, which means that the data is suited for extraction of
optical ﬂow, since there is no camera motion bias [12].

Pain was induced using one out of two noxious stimuli
applied to the horses for 20 minutes: a pneumatic blood
pressure cuff placed around the antebrachium or the appli-
cation of capsaicin 10% (chili extract) on 10 cm2 skin [8].
Both types of experimental pain are ethically regulated and
also occur in human pain research. They caused moderate
but completely reversible pain to the horses [8].

12669

3.2. Noise and variability

The videos in the dataset present some challenging noise.
The lighting conditions were not ideal and some videos
are quite dark. Unexpected elements like a veterinarian
standing by the horse for a while, frequent occlusion of the
horse’s head, varying backgrounds, poses, camera angles
and colors on halters all contribute to the challenging na-
ture of the dataset. The coat color of the horses is mostly
dark brown except for one chestnut but they do have vary-
ing characteristics such as stars and blazes.

Furthermore, there is some variability among the sub-
jects. Subject 6 is by far the youngest horse at age 3, and
frequently moves in and out of the frame. This presented
difﬁculties for our classiﬁers as can be seen in Table 4. Im-
portantly, this subject did not go through the same training
for standing still as the other subjects. We include test runs
on this horse for transparency.

4. Approach

Three main architectures are investigated, and each is
additionally extended to a two-stream version. With two
streams, we can feed sequences of different modalities to
the network. In our case, we use RGB in one stream and
optical ﬂow in the other. The optical ﬂow of two adjacent
frames is an approximation of the gradients (u and v) of the
pixel trajectories in the horizontal and vertical directions,
respectively. We compute the optical ﬂow using the algo-
rithm presented by [6] and add the magnitude of u and v as
a third channel to the tensor. The one-stream models receive
either single frames or sequences of either modality.

The three base architectures are the deep CNN Incep-
tionV3 [33], which takes single-frame input,
the partly
recurrent VGG+LSTM architecture from [25] which is a
VGG-16 CNN [31] up to and including the ﬁrst dense layer
with one LSTM layer on top, and the fully recurrent C-
LSTM. Intuitively, the three models differ in the extent by
which they can model the dynamics of the data.
Incep-
tionV3 is a static model that only learns patterns from single
frames. In its two-stream setting, it processes single optical
ﬂow frames in parallel to the RGB frames, which adds lim-
ited motion information. The VGG+LSTM model extracts
temporal features, but does so separately from the spatial
features. Its recurrent top layer is not an integral part of the
network, as it is for the C-LSTM model. In the C-LSTM
architecture all layers are fully recurrent and the spatial and
temporal feature extraction take place simultaneously.

4.1. Convolutional LSTM

Shi et al. [29] introduce the Convolutional LSTM (C-
LSTM) unit, where the fully-connected matrix multiplica-
tions involving for instance the input-hidden and hidden-
hidden weight matrices in the LSTM equations [10] are re-

placed with convolutions. This enables the parameter shar-
ing and location invariance that comes with convolutional
layers, while maintaining a recurrent setting. This type of
layer structure is not to be confused with the more common
setup of stacking RNN layers on top of convolutional layers
(as in the VGG+LSTM architecture), which differs in two
important and related aspects from the C-LSTM. First, any
input to a standard RNN layer has to be ﬂattened to a one-
dimensional vector beforehand, which shatters the spatial
grid patterns of an image. Second, by extracting the spatial
features separately, hence by performing down-sampling
convolutions of the images before any sequential process-
ing, one risks losing important spatio-temporal features. In
effect, there are features of a video clip that do not stem
exclusively from either spatial or temporal data, but rather
from both. For this reason, C-LSTM layers are especially
suited to use for video analysis.

Next, we present the details of the C-LSTM networks in

one and two streams from our experiments.

Convolutional LSTM in one and two streams. The one-
stream C-LSTM model (C-LSTM-1) has four stacked layers
of 32 C-LSTM units each with max pooling and batch nor-
malization between every layer, followed by a dense layer
and sigmoid output.

The two-stream C-LSTM (C-LSTM-2) is shown in Fig-
ure 2. This model consists of two parallel C-LSTM-1
streams. The idea, just like in [30], is for the motion stream
(optical ﬂow) to complete the spatial stream (RGB). How-
ever, our C-LSTM two-stream model differs in some as-
pects from the original architecture presented in [30]. To
begin with, in [30], only the motion stream takes input with
a temporal span while the spatial one processes single (mo-
mentaneous) RGB frames. Furthermore, the motion stream
input, consisting of k concatenated optical ﬂow frames, is
not treated recurrently but as one single input volume. In
[30], both streams are feedforward CNNs, whereas in our
case both streams are recurrent.
In addition, we choose
to fuse our two streams at the feature-level, in contrast to
[30] who fuse the class scores only after the softmax output
layer. In particular, we fuse the two tensor outputs from the
fourth layers in both streams by either element-wise mul-
tiplication or addition (Table 3), in order to use the optical
ﬂow features as an attention mask on the RGB features. To
this end, the optical ﬂow is computed using rather large av-
eraging windows, which results in soft, blurry motion pat-
terns, similar to the attention results presented in [28] (Fig-
ure 1). When using multiplication, the attention mask be-
haves like an AND gate; when using addition, it behaves
like the softer OR gate. Both types of fusion emphasize
the parts of the image where pixels have moved, which are
likely to be of interest to the model.

12670

4.2. Implementation details

The top dense and LSTM layers of the VGG+LSTM
model are trained from scratch and the convolutional lay-
ers of the VGG-16 base model are pre-trained on ImageNet
[4] as an initialization. Its LSTM layer has 512 units, which
hyperparameter was set after trials with [32, 256, 512, 1024]
units. InceptionV3 is trained from scratch since this worked
better than with ImageNet pre-trained weights. The top
part of the original model is replaced with a dense layer
with 512 units and global average pooling before the out-
put layer. All architectures have a dense output layer with
sigmoid activation and binary cross-entropy as loss func-
tion. The respective optimizers used are shown in Table 2.
For the VGG+LSTM, we also trained with the Adam opti-
mizer, as in [25], but Adadelta gave better results. We use
larger frames when training the InceptionV3 models than
when training the sequential models (Table 2) because In-
ceptionV3 has a minimum input size. When training on
sequences, they consist of 10 frames each. The sequences
are extracted back-to-back without overlap (stride 10). We
use early stopping of 15 epochs on a maximum of 100
epochs throughout the experiments. All two-stream mod-
els use dropout with probability 0.2 after the fusion of the
two streams. Since additive feature level fusing worked best
for the C-LSTM-2, this is chosen as the method of fusion
for the two-stream extensions of VGG+LSTM and Incep-
tionV3 as well. Data augmentation for the sequences con-
sists of horizontal ﬂipping, random cropping and shading
by adding Gaussian noise. The transformations are consis-
tent across a given sequence (i.e. for random cropping, the
same crop is applied for the whole sequence). Remaining
hyperparameters and the code for the experiments can be
found at https://goo.gl/9TPYNk.

5. Experiments and results

5.1. Evaluation method

The classiﬁcation task is evaluated using leave-one-
subject-out cross testing, meaning that for the equine
dataset we always train on four subjects, validate on one
and test on the remaining subject. By separating the sub-
jects used for training, validation and testing respectively,
we enforce generalization to unseen subjects. Subject 5 is
always used as validation set for early stopping, on account
of its relatively even class balance (Table 1). When it is

tested on, subject 1 is used for validation instead. The re-
sults presented are the average of the six cross-subject test
rotations, which additionally were repeated ﬁve times. The
standard deviations in Table 3 are the averages of the stan-
dard deviations across the test folds for every run, while the
standard deviations presented in Table 4 are the per-subject
variations across the ﬁve runs, which are smaller. F1-score
is the harmonic mean of precision and recall. The reason
to use F1-score in addition to accuracy is that it is a more
cautious measure when a dataset contains class imbalance.
The labels are set globally according to the presence of
pain induction from the recording protocol for the different
video clips before frame extraction, meaning that frames be-
longing to the same clip always have the same ground truth.
Nevertheless, the loss function is optimized per frame dur-
ing training, which means that the network outputs one clas-
siﬁcation per frame. When computing the F1-score at eval-
uation time for sequential models, we want to measure their
performance on the aggregate 10-frame sequence-level. To
this end, a majority vote is taken of the classiﬁcations across
the sequence. If there is a tie, the vote is random.

5.2. Veterinary expert baseline experiment

As a baseline comparison, four veterinarians with expert
training in recognizing equine pain were engaged in clas-
sifying 51 ﬁve second-clips sampled at random from the
dataset (but distributed across the subjects) as pain or no
pain. Five seconds is the same temporal footprint that the
sequential models are trained and tested on. The results in
Table 3 show that it is not evident, even for an expert, to per-
form this kind of classiﬁcation, highlighting the challenging
nature of the task and dataset. The average F1-score (accu-
racy) of the experts was 54.6 (58.0%).

Since the clips are randomly extracted from the videos, it
can happen that the horse looks away or interacts too much
with an on-site observer. When the experts judged that it
was not possible to assess pain from a certain clip, they did
not respond. Thus, those results are not part of the aver-
ages. On average 5-10 clips out of the 51 were discarded
by every rater. This ”cherry-picking” should speak to the
advantage of the experts compared to the models, as well
as the fact that the experts could re-watch the clips. Yet, on
average, the experts perform 18.9 percentage points (p.p.)

Table 2: Overview of input details for the four evaluated models.

Input, Equine data

Batch size

Sequential

Optimizer

Model

C-LSTM-1

C-LSTM-2

[10, 128, 128, 3]

[10, 128, 128, 3] ×2

16

8

16

8

100

50

Yes

Yes

Yes

Yes

No

No

Adadelta

Adadelta

Adadelta

Adadelta

RMSProp

RMSProp

Figure 1: Example sequence from the dataset. Optical ﬂow on
second row. In the two-stream model, the optical ﬂow serves as
attention when fused with the RGB frames.

VGG+LSTM [25]

[10, 128, 128, 3]

VGG+LSTM-2 [25]

[10, 128, 128, 3] ×2

InceptionV3 [33]

[320, 240, 3]

InceptionV3-2 [33]

[320, 240, 3] ×2

12671

Figure 2: Our fully recurrent C-LSTM-2 model, which performed the best on the equine dataset. The yellow and purple layers are max
pooling and batch normalization, respectively. The arrows on top of the C-LSTM layers symbolize recurrence.

worse than the C-LSTM-2 model.

magnitude less parameters (Table 3).

Even so, the F1-scores varied among the raters. Their
individual results were 52.7%, 50.7%, 72.2% and 42.7%.
Interestingly, the rater that obtained 72.2% knew the dataset
best out of the four and was present throughout the data col-
lection. This rater’s result, close to that of our best model,
can thus be seen, to some extent, as testing on training data.

5.3. Automatic detection in the Equine Pain Dataset

Table 3 shows average results and standard deviations
for the different evaluated models. The best obtained F1-
score (accuracy) is 73.5 ± 18.3% (75.4 ± 14.1%) using the
C-LSTM-2 architecture. Both C-LSTM-1 and C-LSTM-2
in their best settings outperform the relevant baselines.

The effect of two streams and temporal dynamics. We
see a clear improvement of +2.2 p.p. from the C-LSTM
one-stream model to its two-stream version, in terms of F1-
score. For the VGG+LSTM model, there is no improvement
from one to two streams when no data augmentation is used,
and very little improvement (+0.1 p.p.) when data aug-
mentation is used. The two-stream version of InceptionV3
in effect performs worse than its RGB one-stream version.
When comparing the importance of the RGB and optical
ﬂow streams, respectively, for the three different models,
we see that the ﬂow alone performs better for the C-LSTM-
1 (69.8% F1-score) than for the VGG+LSTM (66.1% F1-
score) and the InceptionV3 (54.1% F1-score). Out of the
three models, the performance gap between the modalities
is the least for the C-LSTM-1. The above observations com-
bined interestingly show that dynamics and sequentiality
are more important to the C-LSTM model.

Furthermore, we see in Table 3 that the C-LSTM mod-
els perform better than the single-frame model InceptionV3,
which can be considered as a baseline.
Its best result is
68.1% F1-score for one stream with data augmentation. As
a reminder, the input resolution to InceptionV3 is 320 × 240
pixels, compared to the 128 × 128 pixels for the C-LSTM
networks. This underlines the better performance of the lat-
ter, even with nearly ﬁve times less pixels and orders of

The effect of data augmentation. We can observe in Ta-
ble 3 that the C-LSTM and VGG+LSTM models trained
without augmented data perform better than those trained
with augmented data. For InceptionV3, the performance is
better with data augmentation. A possible explanation for
why the C-LSTM models do not learn the augmented data
as well as the clean data is their small number of parameters,
compared to the other models (Table 3). The fact that the C-
LSTM models do not improve with data augmentation sug-
gests that they are of the appropriate size for the dataset and
have not overﬁt. The VGG-16 base model of VGG+LSTM
has many parameters but we hypothesize that it is the sin-
gle LSTM layer that might be too minimalistic for the aug-
mented data in this case. In the future, when working on
more varied datasets, it will likely become necessary to use
a larger number of hidden units, in the interest of stronger
network expressivity and generalizing ability. Nevertheless,
it is reasonable to use a smaller number of hidden units for
equine data than for example when training on a larger and
more varied dataset such as UCF-101 [32]. For our appli-
cations, the data will always reside on a smaller manifold
than general activity recognition datasets since we restrict
ourselves to horses in a box or hospital setting. Data aug-
mentation was only applied to the C-LSTM-2 (add) model
since it performed better than the one with multiplicative
fusion. In addition, the computational cost in training time
was considerable, especially with augmented data.

Performance difference between subjects. The perfor-
mance of VGG+LSTM varies markedly between subjects
(Table 4). On that account, it has the highest global standard
deviation among the models. When inspecting its classiﬁca-
tion decisions for subjects 1 and 2, for which it often scored
above 90% F1-score, the model had sometimes identiﬁed
hay in the corner or the barred background as being signi-
ﬁcative of the pain category. The horses it performed the
worst on, subjects 5 and 6, have screens as background in
the dataset and thus not as many details to overﬁt to.

As shown in Table 4, the results are generally better for

12672

Table 3: Results (% F1-score and accuracy) for binary pain classiﬁcation per evaluated model. C-LSTM-2 (add) has the best average
result. InceptionV3 is a single-frame model, while VGG+LSTM and C-LSTM are sequential models. Data augmentation was only applied
to C-LSTM-2 (add), for computational reasons, since it performed better than the one with multiplicative fusion.

One-Stream Models

Avg. F1

Avg. accuracy

Avg. F1

Avg. accuracy

# Parameters

No data augmentation

Data augmentation

InceptionV3 [33], Flow
InceptionV3 [33], RGB
VGG+LSTM [25], Flow
VGG+LSTM [25], RGB
C-LSTM-1, Flow (Ours)
C-LSTM-1, RGB (Ours)

Two-Stream Models

54

62

65

69

69

71

.

.

.

.

.

.

1 ± 10

6 ± 19

3 ± 16

4 ± 28

8 ± 10

3 ± 19

9

.

4

.

6

.

8

.

3

.

4

.

60

66

67

72

70

73

.

.

.

.

.

.

8 ± 10

5 ± 16

6 ± 13

8 ± 22

3

.

8

.

6

.

9

.

8 ± 9

4

.

5 ± 16

3

.

57

68

50

63

59

64

.

.

.

.

.

.

5 ± 12

1 ± 15

5 ± 17

8 ± 26

5 ± 11

0 ± 20

3

.

8

.

0

.

9

.

6

.

5

.

60

68

60

70

64

68

.

.

.

.

.

.

4 ± 8

5

.

8 ± 14

9 ± 13

3 ± 19

2

.

2

.

8

.

1 ± 9

8

.

7 ± 14

9

.

InceptionV3-2 (add)
VGG+LSTM-2 (add)
C-LSTM-2 (mult.) (Ours)
C-LSTM-2 (add) (Ours)

62

69

67

.

.

.

4 ± 20

4 ± 29

3 ± 19

5

.

7

.

1

.

73

.

5 ± 18

3

.

66

74

72

75

.

.

.

.

3 ± 16

6 ± 22

2 ± 14

4 ± 14

7

.

5

.

9

.

1

.

55

63

-
66

4 ± 18

9 ± 26

0

.

4

.

.

.

5 ± 20

6

.

.

59

70

-
68

7 ± 15

5 ± 18

3

.

9

.

.

.

8 ± 13

8

.

.

Veterinary expert

54

.

6 ± 11

0

.

58

.

0 ± 13

6

.

n/a

n/a

22

22

57

57

,

,

,

,

852

852

713

713

731

731

,

,

,

,

,

,

898

898

474

474

522

522

45

115

704

425

,

,

1

,

1

,

458

458

770

922

946

946

,

,

,

,

n/a

subjects 1-5 compared to subject 6. Had we not included
subject 6 in our ﬁnal score, our best average would instead
have been 80.9 ±8.6% F1-score. This horse displayed atyp-
ical behavior consisting of extreme playfulness and inter-
action with the human observer, because it had not been
trained to stand still like the other subjects (Section 3.2).

The accuracies in Table 3 in general have lower standard
deviations than the F1-scores. This is because the F1-score
discredits results where the model exclusively chooses one
class for a whole test round. This often happened when the
classiﬁcation failed, as was almost always the case for sub-
ject 6. The F1-scores for subject 6 are around 40%, whereas
in terms of accuracy these results are instead around 50%,
hence reducing the standard deviation gap.

Tuning of C-LSTM-2. For C-LSTM-2, the softer fusion
by addition performs better than fusion by multiplication.
The optical ﬂow is computed at 16 fps and is matched to
the corresponding 2 fps RGB frames. If the horse moves
fast, there can be discrepancies when overlaying the RGB
image with an AND mask (corresponding to multiplicative
fusion) not ﬁtting the shape of the horse. This could explain
the better performance of the additive fusion.

Comparison to Lu et al. To our knowledge, [16] is the
only previous study done on automatic pain recognition in
larger non-human species. An accuracy of 67% is obtained

Table 4: Per-subject F1-scores for C-LSTM-2 and VGG+LSTM.
The distribution is more even for C-LSTM-2.

Subject: 1

2

3

4

5

6

C-LSTM-2

87.1 ± 4.8 83.4 ± 5.6 79.7 ± 11.2 73.4 ± 5.8 76.5 ± 11.5 40.8 ± 3.6

VGG+LSTM 90.5 ± 4.1 94.4 ± 3.2 77.2 ± 16.3 89.1 ± 4.8 32.1 ± 7.0

33.8 ± 4.2

on a three-class pain level classiﬁcation task (76.8% for two
classes) via the detection of facial action units from images
of sheep. The mapping from action units to pain level is
done using the sheep pain facial expression scale, SPFES
[20]. However, this result is not obtained on a subject-
exclusive train/test split and the data is culled for frontal
faces with visible action units. Importantly, the labels are
set based on action units, and not on induced pain. The fact
that the ground truth is based on visible action units makes
the task easier. The authors also evaluate their method for
unseen subjects; a confusion matrix is presented in [16]
with results from a three-class task. We translate this into
two classes, to be able to compare our results. The F1-
score (accuracy) when testing on unseen subjects is 58.4%
(58.1%), 15 p.p. less than our best result.

What do the models consider as pain? We compute
saliency maps for the two best models, C-LSTM-2 and
VGG+LSTM, to investigate their classiﬁcation decisions.
Two example sequences are shown in Figure 3. The
saliency maps are made using the Grad-CAM method [27],
taking the gradient of the class output with respect to the
different ﬁlters in the last convolutional layer (for C-LSTM-
2, we take the gradient with respect to the last layer in the
RGB-stream). The ﬁlters are then weighted according to
their corresponding gradient magnitude. The one with the
highest magnitude is considered the most critical for the
classiﬁcation decision. This particular ﬁlter, upsampled to
the true image size, is then visualized as a heatmap.

The sequence in Figure 3b shows a rather still horse with
its head in an upright position. The sequence was misclas-
siﬁed as pain by all four experts but was correctly classi-
ﬁed by the two computer models. The veterinarians based

12673

(a) A pain sequence correctly classiﬁed by both C-LSTM-2 and VGG+LSTM, as well as by veterinarians.

(b) A non-pain sequence correctly classiﬁed by both C-LSTM-2 and VGG+LSTM, misclassiﬁed by all veterinarians.

Figure 3: Saliency maps for two sequences and two different models (C-LSTM-2 on the ﬁrst row, VGG+LSTM on the second row in each
ﬁgure). We observe that in general, the C-LSTM-2 model focuses on the horse and follows its movement, whereas the VGG+LSTM model
has overﬁt (looks at the background) and does not follow a smooth temporal pattern across the sequence. In 3a, the C-LSTM-2 is attentive
to the pose of the horses’ shoulder and also zooms in on the tense eye area in the last three frames. In 3b, the muzzle, neck and eye area
are in focus for the C-LSTM-2, whereas it appears that the VGG+LSTM has mostly learned to detect the presence of a horse.

their decision mostly on the tense triangular eye in the clip
(sign of pain), visible in the proper resolution of the image,
whereas the C-LSTM-2 seems to have mostly focused on
the relaxed muzzle and upright head position (signs of non-
pain). The VGG+LSTM seems to look at the entire horse,
and frequently changes focus to the background and back
again. Our impression is that the VGG+LSTM does not
have a distinct enough focus to properly assess pain. Fur-
thermore, Figure 3a, indicates that the VGG+LSTM model
has overﬁt to the dataset, often looking at the background.
The non-smooth temporal pattern of the saliency maps for
VGG+LSTM in both Figures 3a and 3b could be explained
by this model’s separation of spatial and temporal feature
extraction. By contrast, C-LSTM-2 tends to follow relevant
parts of the horse in a temporally smooth fashion, which
gives us more conﬁdence in its classiﬁcations. This study
is not conclusive but gives an indication to what kind of
patterns the models seem to learn from the data, as well
as a preliminary explanation to the better performance of
C-LSTM-2. Grad-CAM was applied to the single-frame
model InceptionV3 as well, but the results were uninfor-
mative and showed no particular saliency, while at the same
time the model gave over-conﬁdent classiﬁcation decisions.

6. Conclusions

From our comparisons of three main models and their
respective two-stream extensions, varying in the extent by

which they model temporal dynamics, it appears that the
spatio-temporal unfolding of behavior is crucial for pain
recognition in horses.
In this work, we have found that
sequential imagery and a model such as the Convolutional
LSTM that simultaneously processes the spatial and tempo-
ral features improves results compared to models that pro-
cess single frames. Sequentiality seems particularly impor-
tant when assessing equine pain behavior, since horses do
not convey a single straightforward face to show that they
are in pain, the way humans can. Our obtained results on
data labeled according to pain induction surpass a veteri-
nary expert baseline and outperform the only previously re-
ported result [16] on subject-exclusive larger animal pain
detection by a clear margin, using no facial action unit an-
notations or pre-processing of the data.

6.1. Future work

In future work, we would like to systematically investi-
gate what the model ﬁnds salient when it comes to equine
pain behavior and compare it to today’s veterinary pain
scoring.
Interpretability is becoming increasingly impor-
tant in deep learning, as shown by works such as [7] and
[27]. We see an interesting research direction for exploring
the spatio-temporal patterns of equine pain both in terms of
the learned representations and classiﬁcation attribution. In
the coming months, we will append more video labeled in
terms of pain behavior to the database of [8].

12674

References

[1] G. Bussieres, C. Jacques, O. Lainay, G. Beauchamp,
A. Leblond, J. L. Cadore, L. M. Desmaizieres, S. G. Cu-
velliez, and E. Troncy. Development of a Composite Or-
thopaedic Pain Scale in Horses. Research in Veterinary Sci-
ence, 85, 2008.

[2] J. Carreira and A. Zisserman. Quo vadis, action recog-
nition? A new model and the Kinetics dataset. CoRR,
abs/1705.07750, 2017.

[3] E. D. Costa, M. Minero, D. Lebelt, D. Stucke, E. Canali,
and M. C. Leach. Development of the Horse Grimace Scale
(HGS) as a Pain Assessment Tool in Horses Undergoing
Routine Castration. PLoS ONE, 9(3), 2014.

[4] J. Deng, W. Dong, R. Socher, L. J. Li, K. Li, and L. Fei-fei.
ImageNet: A Large-Scale Hierarchical Image Database. In
CVPR09, 2009.

[5] P. Ekman and W. V. Friesen. Measuring Facial Move-
ment. Environmental Psychology and Nonverbal Behavior,
1, 1976.

[6] G. Farneb¨ack. Two-Frame Motion Estimation Based on
Polynomial Expansion. Lecture Notes in Computer Science,
2749(1):363–370, 2003.

[7] C. Feichtenhofer, A. Pinz, R. P. Wildes, and A. Zisserman.
What have we learned from deep representations for action
recognition? CoRR, abs/1801.01415, 2018.

[8] K. B. Gleerup, B. Forkman, C. Lindegaard, and P. H. An-
dersen. An equine pain face. Veterinary Anaesthesia and
Analgesia, 42, 2015.

[9] K. B. Gleerup and C. Lindegaard. Recognition and Quantiﬁ-
cation of Pain in Horses: A Tutorial Review. Equine Veteri-
nary Education, 28, 2016.

[10] S. Hochreiter and J. Schmidhuber. Long short-term memory.

Neural Computation, 9(8):1735–1780, 1997.

[11] S. E. Kahou, V. Michalski, K. Konda, R. Memisevic, and
C. Pal. Recurrent Neural Networks for Emotion Recognition
in Video. Proceedings of the 2015 ACM on International
Conference on Multimodal Interaction - ICMI ’15, 2015.

[12] A. Karpathy, G. Toderici, S. Shetty, T. Leung, R. Sukthankar,
and L. Fei-Fei. Large-Scale Video Classiﬁcation with Con-
volutional Neural Networks.
2014 IEEE Conference on
Computer Vision and Pattern Recognition (CVPR), 2014.

[13] Z. Li, E. Gavves, M. Jain, and C. G. M. Snoek. VideoLSTM
convolves, attends and ﬂows for action recognition. CoRR,
abs/1607.01794, 2016.

[14] G. C. Littlewort, M. S. Bartlett, and K. Lee. Automatic Cod-
ing of Facial Expressions Displayed During Posed and Gen-
uine Pain. Image and Vision Computing, 27, 2009.

[15] E. J. Love. Assessment and Management of Pain in Horses.

Equine Veterinary Education, 21, 2009.

[16] Y. Lu, M. Mahmoud, and P. Robinson. Estimating Sheep
Pain Level Using Facial Action Unit Detection.
In 12th
IEEE International Conference on Automatic Face & Ges-
ture Recognition (FG 2017), 2017.

[17] P. Lucey, J. F. Cohn, K. M. Prkachin, P. E. Solomon, and
I. Matthews. Painful data: The UNBC-McMaster Shoul-
der Pain Expression Archive Database. In Face and Gesture
2011, pages 57–64, March 2011.

[18] M. Marszałek, I. Laptev, and C. Schmid. Actions in context.
In IEEE Conference on Computer Vision & Pattern Recogni-
tion, 2009.

[19] S. McDonnell. Is it Psychological, Physical, or Both?

In
Proceedings of the 51st Annual Convention of the Ameri-
can Association of Equine Practitioners, Seattle, Washing-
ton, USA, 2005.

[20] K. M. McLennan, C. J. Rebelo, M. J. Corke, M. A. Holmes,
M. C. Leach, and F. Constantino-Casas. Development of a
facial expression scale using footrot and mastitis as models
of pain in sheep. Applied Animal Behaviour Science, 176:19
– 26, 2016.

[21] J. Y.-H. Ng, M. Hausknecht, S. Vijayanarasimhan,
O. Vinyals, R. Monga, and G. Toderici. Beyond Short Snip-
pets : Deep Networks for Video Classiﬁcation. 2015.

[22] R. Pascanu, T. Mikolov, and Y. Bengio. Understanding the

exploding gradient problem. CoRR, abs/1211.5063, 2012.

[23] J. Price, N. Clarke, E. Welsh, and N. Waran. Preliminary
Evaluation of Subjective Scoring Systems for Assessment of
Postoperative Pain in Horses. Veterinary Anaesthesia and
Analgesia, 30, 2003.

[24] L. C. Pritchett, C. Ulibarri, M. C. Roberts, R. K. Schneider,
Identiﬁcation of Potential Physiological
and D. C. Sellon.
and Behavioral Indicators of Postoperative Pain in Horses
After Exploratory Celiotomy for Colic. Applied Animal Be-
havioural Science, 80, 2003.

[25] P. Rodriguez, G. Cucurull, J. Gonalez, J. M. Gonfaus,
K. Nasrollahi, T. B. Moeslund, and F. X. Roca. Deep Pain:
Exploiting Long Short-Term Memory Networks for Facial
Expression Classiﬁcation. IEEE Transactions on Cybernet-
ics, 2017.

[26] D. C. Sellon, M. C. Roberts, A. T. Blikslager, C. Ulibarri, and
M. G. Papich. Effects of Continuous Rate Intravenous Infu-
sion of Butorphanol on Physiologic and Outcome Variables
in Horses after Celiotomy. Journal of Veterinary Internal
Medicine, 18, 2004.

[27] R. R. Selvaraju, A. Das, R. Vedantam, M. Cogswell,
D. Parikh, and D. Batra. Grad-cam: Why did you say that?
visual explanations from deep networks via gradient-based
localization. CoRR, abs/1610.02391, 2016.

[28] S. Sharma, R. Kiros, and R. Salakhutdinov. Action recogni-

tion using visual attention. CoRR, abs/1511.04119, 2015.

[29] X. Shi, Z. Chen, and H. Wang. Convolutional LSTM Net-
work : A Machine Learning Approach for Precipitation
Nowcasting. CoRR, abs/1506.04214, 2015.

[30] K. Simonyan and A. Zisserman. Two-Stream Convolutional
Networks for Action Recognition in Videos. In Advances in
Neural Information Processing Systems 27, 2014.

[31] K. Simonyan and A. Zisserman.

Very deep convolu-
tional networks for large-scale image recognition. CoRR,
abs/1409.1556, 2014.

[32] K. Soomro, A. R. Zamir, and M. Shah. UCF101: A dataset
of 101 human actions classes from videos in the wild. CoRR,
abs/1212.0402, 2012.

[33] C. Szegedy, V. Vanhoucke, J. Shlens, and Z. Wojna. Rethink-
ing the Inception Architecture for Computer Vision. CoRR,
abs/1512.00567, 2014.

12675

[34] A. H. Tuttle, M. J. Molinaro, J. F. Jethwa, S. G. Sotocinal,
J. C. Prieto, M. A. Styner, J. S. Mogil, and M. J. Zylka. A
deep neural network to assess spontaneous pain from mouse
facial expressions. Molecular Pain, 14:1744806918763658,
2018. PMID: 29546805.

[35] J. P. van Loon and M. C. van Dierendonck. Monitoring Acute
Equine Visceral Pain with the Equine Utrecht University
Scale for Composite Pain Assessment (EQUUS-COMPASS)
and the Equine Utrecht University Scale for Facial Assess-
ment of Pain (EQUUS-FAP): A Scale-Construction study.
The Veterinary Journal, 206, 2015.

[36] L. Wang, Y. Xiong, Z. Wang, Y. Qiao, D. Lin, X. Tang,
and L. van Gool. Temporal Segment Networks: Towards
Good Practices for Deep Action Recognition. Lecture Notes
in Computer Science (Including Subseries Lecture Notes in
Artiﬁcial Intelligence and Lecture Notes in Bioinformatics),
9912 LNCS, 2016.

[37] J. Wathan, A. M. Burrows, B. M. Waller, and K. McComb.
EquiFACS: The Equine Facial Action Coding System. PLoS
ONE, 10(8), 2015.

[38] J. Zhou, X. Hong, F. Su, and G. Zhao. Recurrent Convolu-
tional Neural Network Regression for Continuous Pain In-
tensity Estimation in Video. IEEE Computer Society Con-
ference on Computer Vision and Pattern Recognition Work-
shops, pages 1535–1543, 2016.

[39] G. Zhu, L. Zhang, P. Shen, and J. Song. Multimodal Ges-
ture Recognition Using 3-D Convolution and Convolutional
LSTM. IEEE Access, 5:4517–4524, 2017.

12676

