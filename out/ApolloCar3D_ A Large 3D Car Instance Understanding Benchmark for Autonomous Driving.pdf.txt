ApolloCar3D: A Large 3D Car Instance Understanding Benchmark for

Autonomous Driving

Xibin Song1,2, Peng Wang1,2, Dingfu Zhou1,2, Rui Zhu3, Chenye Guan1,2,

Yuchao Dai4, Hao Su3, Hongdong Li5,6 and Ruigang Yang1,2

1Baidu Research
China

3University of California, San Diego

2National Engineering Laboratory of Deep Learning Technology and Application,
4 Northwestern Polytechnical University, Xi’an, China

5 Australian National University, Australia

6Australian Centre for Robotic Vision, Australia

{songxibin,wangpeng54,zhoudingfu,guanchenye,yangruigang}@baidu.com,

{rzhu,haosu}@eng.ucsd.edu, daiyuchao@gmail.com and hongdong.li@anu.edu.au

Abstract

Autonomous driving has attracted remarkable attention
from both industry and academia. An important task is to
estimate 3D properties (e.g. translation, rotation and shape)
of a moving or parked vehicle on the road. This task, while
critical, is still under-researched in the computer vision
community – partially owing to the lack of large scale and
fully-annotated 3D car database suitable for autonomous
driving research. In this paper, we contribute the ﬁrst large-
scale database suitable for 3D car instance understanding
– ApolloCar3D. The dataset contains 5,277 driving im-
ages and over 60K car instances, where each car is ﬁtted
with an industry-grade 3D CAD model with absolute model
size and semantically labelled keypoints. This dataset is
above 20× larger than PASCAL3D+ [65] and KITTI [21],
the current state-of-the-art. To enable efﬁcient labelling
in 3D, we build a pipeline by considering 2D-3D keypoint
correspondences for a single instance and 3D relationship
among multiple instances. Equipped with such dataset, we
build various baseline algorithms with the state-of-the-art
deep convolutional neural networks. Speciﬁcally, we ﬁrst
segment each car with a pre-trained Mask R-CNN [22],
and then regress towards its 3D pose and shape based on
a deformable 3D car model with or without using semantic
keypoints. We show that using keypoints signiﬁcantly im-
proves ﬁtting performance. Finally, we develop a new 3D
metric jointly considering 3D pose and 3D shape, allowing
for comprehensive evaluation and ablation study.

1. Introduction

Understanding 3D properties of objects from an image,
i.e. to recover objects’ 3D pose and shape, is an important
task of computer vision, as illustrated in Fig. 1. This task

(a)

(b)

(c)

Figure 1: An example of our dataset, where (a) is the input color
image, (b) illustrates the labeled 2D keypoints, (c) shows the 3D
model ﬁtting results with labeled 2D keypoints.

is also called “inverse-graphics” [27], solving which would
enable a wide range of applications in vision and robotics,
such as robot navigation [30], visual recognition [15], and
human-robot interaction [2]. Among them, autonomous
driving (AD) is a prominent topic which holds great poten-
tial in practical applications. Yet, in the context of AD the
current leading technologies for 3D object understanding
mostly rely on high-resolution LiDAR sensor [34], rather
than regular camera or image sensors.

However, we argue that there are multitude drawbacks
in using LiDAR, hindering its further up-taking. The most

5452

Dataset
3DObject [52]
EPFL Car [47]
PASCAL3D+ [65]
ObjectNet3D [64]
KITTI [21]
ApolloCar3D

Image source

Control
Control
Natural
Natural

3D property Car keypoints (#) Image (#) Average cars/image Maximum cars/image Car models # Stereo
complete 3D
complete 3D
complete 3D
complete 3D

No
No
No

Yes (14)

1
1

1
1
14
2
14
37

10
20
10
10
16
79

No
No
No
No
Yes
Yes

350
2000
6704
7345
7481
5277

1.19
1.75
4.8
11.7

Self-driving 3D bbox & ori.
Self-driving
industrial 3D

No

Yes (66)

Table 1: Comparison between our dataset and existing datasets with 3D car labels. “complete 3D” means ﬁtting with 3D car model.

severe one is that the recorded 3D LiDAR points are at best
a sparse coverage of the scene from front view [21], espe-
cially for distant and absorbing regions. Since it is crucial
for a self-driving car to maintain a safe breaking distance,
3D understanding from a regular camera remains a promis-
ing and viable approach attracting signiﬁcant amount of re-
search from the vision community [6, 56].

The recent tremendous success of deep convolutional
network [22] in solving various computer vision tasks
is built upon the availability of massive carefully an-
notated training datasets, such as ImageNet [11] and
MSCOCO [36]. However, acquiring large-scale training
datasets is an extremely laborious and expensive endeav-
our, and the community is especially lacking of fully an-
notated datasets of 3D nature. For example, for the task
of 3D car understanding for autonomous driving, the avail-
ability of datasets is severely limited. Take KITTI [21] for
instance. Despite being the most popular dataset for self-
driving, it has only about 200 labelled 3D cars yet in the
form of bounding box only, without detailed 3D shape in-
formation ﬂow [41]. Deep learning methods are generally
hungry for massive labelled training data, yet the sizes of
currently available 3D car datasets are far from adequate
to capture various appearance variations, e.g. occlusion,
truncation, and lighting. For other datasets such as PAS-
CAL3D+ [65] and ObjectNet3D [64], while they contain
more images, the car instances therein are mostly isolated,
imaged in a controlled lab setting, thus are unsuitable for
autonomous driving.

To rectify this situation, we propose a large-scale 3D in-
stance car dataset built from real images and videos cap-
tured in complex real-world driving scenes in multiple
cities. Our new dataset, called ApolloCar3D, is built
upon the publicly available ApolloScape dataset [23] and
targets at 3D car understanding research in self-driving sce-
narios. Speciﬁcally, we select 5, 277 images from around
200K released images in the semantic segmentation task of
ApolloScape, following several principles such as (1) con-
taining sufﬁcient amount of cars driving on the street, (2)
exhibiting large appearance variations, (3) covering multi-
ple driving cases at highway, local, and intersections.
In
addition, for each image, we provide a stereo pair for ob-
taining stereo disparity; and for each car, we provide 3D
keypoints such as corner of doors and headlights, as well as

realistic 3D CAD models with an absolute scale. An exam-
ple is shown in Fig. 1(b). We will provide details about how
we deﬁne those keypoints and label the dataset in Sec. 2.

Equipped with ApolloCar3D, we are able to di-
rectly apply supervised learning to train a 3D car under-
standing system from images, instead of making unnec-
essary compromises falling back to weak-supervision or
semi-supervision like most previous works do, e.g. 3D-
RCNN [28] or single object 3D recovery [60].
based

our
ApolloCar3D dataset, we also develop two 3D car
understanding algorithms, to be used as new baselines in
order to benchmark future contributed algorithms. Details
of our baseline algorithms will be described in following
sections.

facilitate

research

future

To

on

Another important contribution of this paper is that we
propose a new evaluation metric for this task, in order to to
jointly measure the quality of both 3D pose estimation and
shape recovery. We referred to our new metric as “Average
3D precision (A3DP)”, as it is inspired by the AVP metric
(average viewpoint precision) for PASCAL3D+ [65] which
however only considers 3D pose.
In addition, we supply
multiple true positive thresholds similar to MS COCO [36].

The contributions of this paper are summarized as:

• A large-scale and growing 3D car understanding
dataset for autonomous driving, i.e. ApolloCar3D,
which complements existing public 3D object datasets.

• A novel evaluation metric, i.e. A3DP, which jointly
considers both 3D shape and 3D pose thus is more ap-
propriate for the task of 3D instance understanding.

• Two baseline algorithms for 3D car understanding,
which outperform several state-of-the-art 3D object re-
covery methods.

• Human performance study, which points out promis-

ing future research directions.

2. ApolloCar3D Dataset

Existing datasets with 3D object instances. Previous
datasets for 3D object understanding are often very limited
in scale, or with partial 3D properties only, or contain few
objects per image [29, 55, 52, 44, 47, 37]. For instance,

5453

(c) Models

(e) Objects

(a) Location

(b) Orientation

(d) Occlusion

Figure 2: Car occurrence and object geometry statistics in ApolloCar3D. (a) and (b) illustrate the translation and orientation distribution
of all the vehicles. (c) - (e) describe the distribution of vehicle type, occlusion ratio, and number of vehicles per image. Speciﬁcally, the
Y-axis in all the ﬁgures represents the occurrences of vehicles.

3DObject [52] has only 10 instances of cars. The EPFL
Car [47] has 20 cars under different viewpoints but was cap-
tured in a controlled turntable rather than in real scenes.

To handle more realistic cases from non-controlled
scenes, datasets [35] with natural images collected from
Flickr [40] or indoor scenes [10] with Kinect are extended
to 3D objects [51]. The IKEA dataset [35] labelled a few
hundreds indoor images with 3D furniture models. PAS-
CAL3D+ [65] labelled the 12 rigid categories in PAS-
CAL VOC 2012 [16] images with CAD models. Object-
Net3D [64] proposed a much larger 3D object dataset with
images from ImageNet [11] with 100 categories. These
datasets, while useful, are not designed for autonomous
driving scenarios. To the best of our knowledge, the only
real-world dataset that partially meets our requirement is the
KITTI dataset [21]. Nonetheless, KITTI only labels each
car by a rectangular bounding box, and lacks ﬁne-grained
semantic keypoint labels (e.g. window, headlight). One ex-
ception is the work of
[42], yet it falls short in the num-
ber of 200 labelled images, and their car parameters are not
publicly available.

In this paper, as illustrated in Fig. 1, we offer to the
community the ﬁrst large-scale and fully 3D shape labelled
dataset with 60K+ car instances, from 5,277 real-world
images, based on 34 industry-grade 3D CAD car models.
Moreover, we also provide the corresponding stereo images
and accurate 2D keypoint annotations. Tab. 1 gives a com-
parison of key properties of our dataset versus existing ones
for 3D object instance understanding.

2.1. Data Acquisition

We acquire images from the ApolloScape dataset [23]
due to its high resolution (3384 × 2710),
large scale
(≥140K semantically labelled images), and complex driv-
ing conditions. From the dataset, we carefully select images
satisfying our requirements as stated in Sec. 1. Speciﬁcally,

we select images from their labelled videos of 4 different
cites satisfying (1) relatively complex environment, (2) in-
terval between selected images ≥ 10 frames. After picking
images from the whole dataset using their semantic labels,
in order to have more diversity, we prune all images man-
ually, and further select ones which contain better variation
of car scales, shapes, orientations, and mutual occlusion be-
tween instances, yielding 5,277 images for us to label.

For 3D car models, we look for highly accurate shape
models, i.e. the offset between the boundary of re-projected
model and manually labelled mask is less than 3px on av-
erage. However, 3D car meshes in ShapeNet [4] are still
not accurate enough for us, and it is too costly to ﬁt each
3D model in the presence of heavy occlusion, as shown
in Fig. 1. Therefore, to ensure the quality (accuracy) of
3D models, we hired online model makers to manually
build corresponding 3D models given parameters of abso-
lute shape and scale of certain car type. Overall, we build
34 real models including sedan, coupe, minivan, SUV, and
MPV, which has covered the majority of car models and
types in the market.

2.2. Data Statistics

In Fig. 2, we provide statistics for the labelled cars w.r.t.
translation, orientation, occlusion, and model shape. Com-
pared with KITTI [21], ApolloCar3D contains signiﬁ-
cantly larger amount of cars that are at long distance, under
heavy occlusions, and these cars are distributed diversely
in space. From Fig. 2(b), the orientation follows a similar
distribution, where the majority of cars on road are driving
towards or backwards the data acquisition car. In Fig. 2(c),
we show distribution w.r.t. car types, where sedans have the
most frequent occurrences. The object distribution per im-
age in Fig. 2(e) shows that most of the images contain more
than 10 labeled objects.

5454

Figure 3: 3D keypoints deﬁnition for car models. 66 keypoints are
deﬁned for each model.

3. Context-aware 3D Keypoint Annotation

Thanks to the high quality 3D models that we created,
we develop an efﬁcient machine-aided semi-automatic key-
point annotation process. Speciﬁcally, we only ask hu-
man annotators to click on a set of pre-deﬁned keypoints
on the object of interest in each image. Afterwards, the
EPnP algorithm [31] is employed to automatically recover
the pose and model of the 3D car instance by minimizing
re-projection error. RANSAC [19] is used handle outliers
or wrong annotations. While only a handful of keypoints
can be sufﬁcient solve the EPnP problem, we deﬁne 66 se-
mantic keypoints in our dataset, as shown in Fig. 3, which
has much higher density than most previous car datasets
[57, 43]. The redundancy enables more accurate and robust
shape-and-pose registration.

Context-aware annotation.
In the presence of severe
occlusions, for which RANSAC also fails, we develop a
context-aware annotation process by enforcing co-planar
constraints between one car and its neighboring cars. By
doing this, we are able to propagate information among
neighboring cars, so that we jointly solve for their poses
with context-aware constraints.

Formally, the objective for a single car pose estimation

is

EP nP (p, S) = (cid:2)

vk(cid:3)π(K, p, x3

k) − xk(cid:3)2,

(1)

[x

3

k,k]∈S

where p = [α, β, γ, x, y, z] ∈ SE(3), S

∈
{S1, · · · , Sm} indicate the pose and shape of a car instance
respectively. v is a vector indicating whether the kth key-
point of the car has been labelled or not. xk is the labelled
2D keypoint coordinate on the image. π(p, x3
k) is a per-
spective projection function projecting the correspondent
3D keypoint x3
k on the car model given p and camera in-
trinsic K.

Our context-aware co-planarity constraint is formulated

as:

EN (p, S, pn, Sn) = [(αp − αpn )2 + (βp − βpn )2
+ ((yp − hS ) − (ypn − hSn ))2],

(2)

where n is a spatial neighbor car, αp and βp are roll and
pitch component of p, and hS is the height of the car given
its shape S.

The total energy to be minimized for ﬁnding car pose and

shape in image I is deﬁned as:

EI =

C

(cid:2)

c=1

{EP nP (pc, Sc)+

B(Kc) (cid:2)

n∈Nc

EN (pc, Sc, pn, Sn)},

(3)

where c is the index of cars in the image, B(Kc) is a binary
function indicating whether car c needs to borrow pose in-
formation from neighbor cars, and K = {x2
k} is the set of
labelled 2D keypoints of the car. Nc = N (c, M, κ) is the
set of rich annotated neighboring cars of c using instance
mask M, and κ is the maximum number of neighbors we
use. We list the deﬁnition details of function B(Kc) and
N (c, M, κ) in Supplementary Materials due to space limit.
As illustrated in Fig. 4, to minimize Eq. (3), we ﬁrst solve
for those cars with dense keypoint annotations, by exhaust-
ing all car types. To guarantee the precision, we labeled
the ground points of each car and use the corresponding
depth map in ApolloScape dataset to get the accurate dis-
tance of each car. We require that the average re-projection
error must be below 5 pixels and the obtained pose is with
the minimum distance errors with the corresponding ground
points. We then solve for the cars with fewer keypoint an-
notations, by using its context information provided by its
neighboring cars, and the precision setting is the same with
those cars with dense keypoint annotations. After most cars
are aligned, we ask human annotators to visually verify and
adjust the result before committing to the database.

4. Two Baseline Algorithms

Based on ApolloCar3D, we aim to develop strong base-
line algorithms to facilitate benchmarking and future re-
search. We ﬁrst review the most recent literature and then
implement two possibly strongest baseline algorithms.

Existing work on 3D instance recovery from images.
3D objects are usually recovered from multiple frames, 3D
range sensors [26], or learning-based methods [67, 13].
Nevertheless, addressing 3D instance understanding from
a single image in an uncontrolled environment is ill-posed
and challenging, thus attracting growing attention. With the
development of deep CNNs, researchers are able to achieve

5455

Figure 4: The pipeline for ground truth pose label generation based on annotated 2D and 3D keypoints.

impressive results with supervised [18, 69, 43, 46, 57, 54,
63, 70, 6, 32, 49, 38, 3, 66] or weakly supervised strate-
gies [28, 48, 24]. Existing works consider to represent an
object as a parameterized 3D bounding box [18, 54, 57, 49],
coarse wire-frame skeletons [14, 32, 62, 69, 68], vox-
els [9], one-hot selection from a small set of exemplar mod-
els [3, 45, 1], and point clouds [17]. Category-speciﬁc de-
formable model has also been used for shapes of simple ge-
ometry [25, 24].

For handling cases of multiple instance, 3D-RCNN [28]
and DeepMANTA [3] are possibly the state-of-the-art tech-
niques by combining 3D shape model with Faster R-
CNN [50] detection. However, due to the lack of high qual-
ity dataset, these methods have to rely on 2D masks or wire-
frames that are coarse information for supervision. Back
on ApolloCar3D, in this paper, we adapt their algorithms
and conduct supervised training to obtain strong results for
benchmarks. Speciﬁcally, 3D-RCNN does not consider the
car keypoints, which we referred to as direct approach,
while DeepMANTA considers keypoints for training and
inference, which we call keypoint-based approach. Nev-
ertheless, both algorithms are not open-sourced yet. There-
fore, we have to develop our in-house implementation of
their methods, serving as baselines in this paper. In addi-
tion, we also propose new ideas to improve the baselines, as
illustrated in Fig. 5, which we will elaborate later.

Speciﬁcally, similar to 3D-RCNN [28], we assume pre-
dicted 2D car masks are given, e.g. learned through Mask-
RCNN [22], and we primarily focus on 3D shape and pose
recovery.

4.1. A Direct Approach

When only car pose and shape are provided, following
direct supervision strategy as mentioned in 3D-RCNN [28],
we crop out corresponding features for every car instance
from a fully convolutional feature extractor with RoI pool-
ing, and build independent fully connected layers to regress
towards its 2D amodal center, allocentric rotation, and
PCA-based shape parameters. Following the same strat-
egy, the regression output spaces of rotation and shape are
discretized. Nevertheless, for estimating depth, instead of
using amodal box and enumerating depth such that the pro-
jected mask best ﬁts the box as mentioned in [28], we use
ground truth depths as supervision. Therefore, for our im-

plementation, we replace amodal box regression to depth
regression using similar depth discretizing policy as pro-
posed in [20], which provides state-of-the-art depth estima-
tion from a single image.

Targeting at detailed shape understanding, we further
make two improvements over the original pipeline, as
shown in Fig. 5(a). First, as mentioned in [28], estimat-
ing object 3D shape and pose are distortion-sensitive, and
RoI pooling is equivalent to making perspective distortion
of an instance in the image, which negatively impact the es-
timation. 3D-RCNN [28] induces inﬁnity homography to
handle the problem. In our case, we replace RoI pooling
to a fully convolutional architecture, and perform per-pixel
regression towards our pose and shape targets, which is sim-
pler yet more effective. Then we aggregate all the predic-
tions inside the given instance mask with a “self-attention”
policy as commonly used for feature selection [59]. For-
mally, let X ∈ Rh×w×c be the feature map, and the output
for car instance i is computed as,

oi = (cid:2)

Mi

x(κo ∗ X + bo)xAx

(4)

x

where oi is the logits of discretized 3D representation, x
is a pixel in the image, Mi is a binary mask of object i,
κo ∈ Rkl×k×c×b is the kernels used for predicting outputs,
and A ∈ Rh×w×1 is the attention map. b is the number of
bins for discretization following [28]. We call feature aggre-
gation as mask pooling since it selects the most important
information within each object mask.

Secondly, as shown in our pipeline, for estimating car
translation, i.e. its amodal center ca = [cx, cy] and depth
dc, instead of using the same target for every pixel in a car
mask, we propose to output a 3D offset at each pixel w.r.t.
the 3D car center, which provides stronger supervision and
helps learn more robust networks. Previously, inducing rel-
ative position of object instances has also been shown to be
effective in instance segmentation [58, 33]. Formally, let
c = [dc(cx − ux)/fx, dc(cy − uy)/fy, dc] be the 3D car
center, and our 3D offset for a pixel x = [x, y] is deﬁned as
f 3 = x3 − c, where x3 = [d(x − ux)/fx, d(y − uy)/fy, d],
and d is the estimated depth at x. In principle, 3D offset
estimation is equivalent to jointly computing per-pixel 2D
offset respect to the amodal center, i.e. x − ca = [u, v]T
and a relative depth to the center depth, i.e. d − dc. We

5456

Figure 5: Training pipeline for 3D car understanding. Upper (a): direct approach. Bottom (b): key point based approach.

adopt such a factorized representation for model center es-
timation, and the 3D model center can then be recovered
by

ca = (cid:2)

Ax(x + f 3

x,y), dc = (cid:2)

Ax(dx + f 3
d )

(5)

x

x

where veAx is the attention at x, which is used for output
aggregation in Eq. (4).
In our experiments in Sec. 5, we
show that the two strategies provide improvements over the
original baseline results.

4.2. A Keypoint-based Approach

When sufﬁcient 2D keypoints from each car are avail-
able (e.g.as in Fig. 5(b)), we develop a simple baseline al-
gorithm, inspired by DeepMANTA [3], to align 3D car pose
via 2D-3D matching.

Different from [3], our 3D car models have much more
geometric details and come with the absolute scale, and
our 2d keypoints have more precise annotations. Here, we
adopt the CPM [61] – a state-of-the-art 2d keypoint detector
despite the algorithm was originally developed for human
pose estimation. We extend it to 2d car keypoint detection
and ﬁnd it works well.

One advantage of using 2d keypoint prediction over our
baseline-1 i.e.the “direct approach” in Sec. 4.1, is that, we
do not have to regress the global depth or scale – the esti-
mation of which by networks is in general not very reliable.
Instead of feeding the full image into the network, we crop
out each car region in the image for 2d keypoint detection.
This is especially useful for images in ApolloScape [23],
which have a large number of cars of small size.

Borrowing the context-aware constraints from our anno-
tation process, once we have enough detected keypoints, we
ﬁrst solve the easy cases where a car is less occluded using
EPnP[31], then we propagate the information to neighbor-
ing cars until all car pose and shapes are found to be con-
sistent with each other w.r.t. the co-planar constraints via
optimizing Eq. (3). We referred our car pose solver with
co-planar constraints as context-aware solver.

5. Experiments

This section provides implementation details, our newly
proposed evaluation metric, and experiment results. In total,
we have experimented on 5,277 images, split to 4,036 for
training, 200 for validation, and 1,041 for testing.

Implementation details. Due to the lacking of publicly
available source codes, we re-implemented 3D-RCNN [28]
for 3D car understanding without using keypoints, and
DeepMANTA [3] which requires key points annotation.
For training Mask-RCNN, we downloaded the code from
GitHub implemented by an autonomous driving com-
pany 1. We adopted the fully convolutional features from
DeepLabv3 [5] with Xception65 [8] network and follow the
same training policy. For DeepMANTA, we used the key
point prediction methods from CPM [7]. With 4,036 train-
ing images, we obtained about 40,000 labeled vehicles with
2D keypoints, used to train a CPM [7] (with 5 stages of
CPM, and VGG-16 initialization).

Evaluation metrics. The average precision (AP) [16] is
usually used for evaluating 3D object understanding. And,
the similarity is measured using 3D bounding box IoU [21]
with orientation (average orientation similarity (AOS) [21])
or 2D bounding box with viewpoint (average viewpoint pre-
cision (AVP) [65]). Those metrics only measure coarse
3D properties, without considering the inﬂuence of object
shape.

Mesh distance [53] and voxel IoU [12] are usually used
to evaluate 3D shape reconstruction.
In our case, a car
model is mostly compact, thus we consider comparing pro-
jection masks of two models following the idea of visual
hull representation [39]. Speciﬁcally, we sample 100 orien-
tations at yaw angular direction and project each view of the
model to an image with a resolution of 1280×1280. We use
the mean IoU over all views as the car shape similarity met-
ric. For evaluating rotation and translation, we follow the
metrics commonly used for camera pose estimation [21]. In

1https://github.com/TuSimple/mx-maskrcnn

5457

Methods

Mask

wKP

A3DP-Abs

A3DP-Rel

3D-RCNN∗ [28]
+ MP
+ MP + OF
+ MP + OF
DeepMANTA∗ [3]
+ CA-solver
+ CA-solver
Human

gt
gt
gt

pred.

gt
gt

pred.

gt

-
-
-
-
(cid:2)
(cid:2)
(cid:2)

(cid:2)

mean
16.44
16.73
17.52
15.15
20.10
21
57
20.40
38.22

.

c-l

29.70
29.70
30.69
28.71
30.69
32
62
31.68
56.44

.

c-s

19.80
18.81
20.79
17.82
23.76
26
73
24.75
49.50

.

mean
10.79
10.10
13.66
11.49
16.04
17
52
16.53
33.27

.

c-l

17.82
18.81
19.80
17.82
23.76
26
73
24.75
51.49

.

c-s
11.88
11.88
13.86
11.88
19.80
20
79
19.80
41.58

.

Time(s)

0.29s
0.32s
0.34s
0.34s
3.38s
7.41s
8.5s

607.41s

Table 2: Comparison among baseline algorithms. ∗ means in-house implementation. “Mask” means the provided mask for 3D under-
standing (“gt” means ground truth mask and “pred.” means Mask-RCNN mask). “wKP” means using keypoint predictions. “c-l” indicates
results from loose criterion, and “c-s” indicates results from strict criterion. “MP” stands for mask pooling and “OF” stands for offset ﬂow.
“CA-solver” stands for context-aware 3D pose solver. “Times(s)” indicates the average inference times cost for processing each image.

summary, the criteria for judging a true positive given a set
of thresholds is deﬁned as

cshape =

1
|V | (cid:2)v∈V

IoU (P(si), P(s∗

i ))v ≥ δs,

ctrans = |ti − t∗

i |2 ≤ δt,

crot = arccos(|q(ri) · q(r∗

i )|) ≤ δr,

(6)

where s, t, r are the shape ID, translation, and rotation

of a predicted 3D car instance.

In addition, a single set of true positive thresholds used
by AOS or AVP, e.g. IoU ≥ 0.5, and rotation ≤ π/6, is not
sufﬁcient to evaluate detected results thoroughly [21]. Here,
following the metric of MS COCO [36], we propose to use
multiple sets of thresholds from loose to strict for evalua-
tion. Speciﬁcally, the thresholds used in our results for all
levels of difﬁculty are {δs} = [0.5 : 0.05 : 0.95], {δt} =
[2.8 : 0.3 : 0.1], {δr} = [π/6 : π/60 : π/60], where [a :
i : b] indicates a set of discrete thresholds sampled in a line
space from a to b with an interval of i. Similar to MSCOCO,
we select one loose criterion c − l = [0.5, 2.8, π/6] and one
strict criterion c − l = [0.75, 1.4, π/12] to diagnose the per-
formance of different algorithms. Note that in our metrics,
we only evaluate instances with depth less than 100m as
we would like to focus on cars that are more immediately
relevant to our autonomous driving task.

Finally, in self-driving scenarios that are safety critical,
we commonly care nearby cars rather than those far away.
Therefore, we further propose to use a relative error met-
ric for evaluating translation following the “AbsRel” com-
monly used in depth evaluation [21]. Formally, we change
the criteria of ctrans to |ti −t∗
t , and set the thresh-
olds to {δ∗
t } = [0.10 : 0.01 : 0.01]. We call our evaluation
metric with absolute translation thresholds as “A3DP-Abs”,
and the one with relative translation thresholds as “A3DP-
Rel”.

i ≤ δ∗

i |/t∗

5.1. Quantitative Results

In this section, we compare against our baseline algo-
rithms with the method presented in Sec. 4 by progres-
sively adding our proposed components and losses. Tab. 2

shows the comparison results. For direct regression ap-
proach, our baseline algorithm “3D-RCNN” provides re-
gression towards translation, allocentric rotation, and car
shape parameters. We further extend the baseline method
by adding mask pooling (MP) and offset ﬂow (OF). We ob-
serve from the table that, swapping RoI pooling for mask
pooling moderately improves the results while offset ﬂow
brings signiﬁcant boost. They together help avoiding geo-
metric distortions from regular RoI pooling and bring atten-
tion mechanism to focus on relevant regions.

For the keypoint-based method, “DeepMANTA” shows
the results by using our detected key points and solving with
PnP for each car individually, yielding reasonable perfor-
mance. “+CA-solver” means for cars without sufﬁcient de-
tected key points, we employ our context-aware solver for
inference, which provides around 1.5% improvement. For
both methods, switching ground truth mask to segmenta-
tion from Mask R-CNN gives little drop of the performance,
demonstrating the high quality of Mask R-CNN results.

Finally, we train a new group of labellers, and ask them
to re-label the keypoints on our validation set, which are
passed through our context-aware 3D solver. We denote
these results as “human” performance. We can see there is a
clear gap (∼ 10%) between algorithms with human. How-
ever, even the accuracy for humans is still not satisfying.
After checking the results, we found that this is primarily
because humans cannot accurately memorize the semantic
meaning of all the 66 keypoints, yielding wrongly solved
poses. We conjecture this could be ﬁxed by rechecking and
reﬁnement, possibly leading to improved performance.

5.2. Qualitative Results

Some qualitative results are visualized in Fig. 7. From
the two examples, we can ﬁnd that the additional key point
predictions provide more accurate 3D estimation than di-
rect method due to the use of geometric constraints and
inter-car relationship constraints. In particular, for the di-
rect method, most errors occur in depth prediction. It can be
explained by the nature of the method that the method pre-
dicts the global 3D property of depth purely based on object

5458

Absolute Error Measurement

Relative Error Measurement

3D-RCNN + gtMaks
+MP + gtMaks
MP + OF + gtMaks
MP + OF + preMaks
DeepMANTA + gtMaks
CA-solver + gtMaks
CA-solver + preMaks
Human

P
A
 
n
a
e
M

0.7

0.6

0.5

0.4

0.3

0.2

0.1

0

(a)

<10 m

10 - 15 m

15 - 20 m

>20 m

Distance range [m]

 

P
A
n
a
e
M

0.7

0.6

0.5

0.4

0.3

0.2

0.1

0

3D-RCNN + gtMaks
+MP + gtMaks
MP + OF + gtMaks
MP + OF + preMaks
DeepMANTA + gtMaks
CA-solver + gtMaks
CA-solver + preMaks
Human

0.7

0.6

0.5

 

P
A
n
a
e
M

0.4

0.3

0.2

0.1

(c)

(b)

<10 m

10 - 15 m

15 - 20 m

>20 m

Distance range [m]

0

<0.49

Absolute Error Measurement

3D-RCNN + gtMaks
+MP + gtMaks
MP + OF + gtMaks
MP + OF + preMaks
DeepMANTA + gtMaks
CA-solver + gtMaks
CA-solver + preMaks
Human

 

P
A
n
a
e
M

0.7

0.6

0.5

0.4

0.3

0.2

0.1

0

(d)

Relative Error Measurement

3D-RCNN + gtMaks
+MP + gtMaks
MP + OF + gtMaks
MP + OF + preMaks
DeepMANTA + gtMaks
CA-solver + gtMaks
CA-solver + preMaks
Human

0.49 - 0.66 0.66 - 0.78

0.78 - 0.88

Visible ratio

<0.75

>0.75

Visible ratio

Figure 6: 3D understanding results of various algorithms w.r.t. different factors causing false estimation. (a) A3DP-Abs v.s distance, (b)
A3DP-Rel v.s distance, (c) A3DP-Abs v.s occlusion, (d) A3DP-Abs v.s occlusion.

(a)
(a)

(b)

(c)

(d)

Figure 7: Visualization results of different approaches, in which (a) the input image, (b) and (c) are the results with direct regression method
and key points-based method with context constraint. (d) gives the ground truth results.

appearance in 2D, which is ill-posed and error-prone. How-
ever, thanks to the use of reliable masks, the method discov-
ers more cars than the keypoint-based counterpart. For the
keypoint-based approach, we are able to show that correctly
detected keypoints are extremely successful at constraining
car poses, while failed or missing keypoint estimation, es-
pecially for cars of unusual appearance, will lead to missing
detection of cars or wrong solution for poses.

5.3. Result Analysis

To analyze the performance of different approaches, we
evaluate them separately on various distances and occlu-
sion ratios. Detailed results are shown in Fig. 6. Check-
ing Fig. 6(a, b), as expected, we can ﬁnd that the estimation
accuracy decreases with farther distances, and the gap be-
tween human and algorithm narrows in the distance. In ad-
dition, after checking Fig. 6(c, d) for occlusion, we discover
that the performance also drops with increasing the occlu-
sion ratio. However, we observe that the performance on
non-occluded cars is the worst on average among all occlu-
sion patterns. This is because most cars which experience
little occlusion are from large distance and of small scale,
while cars close-by are more often occluded.

upon industrial-grade high-precision 3D car models ﬁtted
to car instances captured in real world scenarios. Comple-
menting existing related datasets e.g.
[21], we hope this
new dataset could serve as a long-standing benchmark fa-
cilitating future research on 3D pose and shape recovery.

In order to efﬁciently annotate complete 3D object prop-
erties, we have developed a context-aware 3D annotation
pipeline, as well as two baseline algorithms for evaluation.
We have also conducted carefully designed human perfor-
mance study, which reveals that there is still a visible gap
between machine performance and that of human’s, moti-
vating and suggesting promising future directions. More
importantly, built upon the publicly available ApolloScape
dataset [23], our ApolloCar3D dataset contains multi-
tude of data sources including stereo, camera pose, seman-
tic instance label, per-pixel depth ground truth, and moving
videos. Working with our data enables training and evalua-
tion of a wide range of other vision tasks, e.g. stereo vision,
model-free depth estimation, and optical ﬂow etc., under
real scenes.

7. Acknowledgement

6. Conclusion

This paper presents by far the largest and growing dataset
(namely ApolloCar3D) for instance-level 3D car under-
standing in the context of autonomous driving. It is built

The authors gratefully acknowledge He Jiang from
Baidu Research for his help in car visualization, Xinyu
Huang from Baidu Research for his help in keypoints deﬁni-
tion, Shichao Zhao from Baidu for his help in 2d keypoints
detection.

5459

References

[1] M. Aubry, D. Maturana, A. A. Efros, B. C. Russell, and
J. Sivic. Seeing 3d chairs: exemplar part-based 2d-3d align-
ment using a large dataset of cad models. In Proceedings of
the IEEE conference on computer vision and pattern recog-
nition, pages 3762–3769, 2014.

[2] G. Canal, S. Escalera, and C. Angulo. A real-time human-
robot interaction system based on gestures for assistive sce-
narios. Computer Vision and Image Understanding, 149:65–
77, 2016.

[3] F. Chabot, M. Chaouch, J. Rabarisoa, C. Teuli`ere, and
T. Chateau. Deep manta: A coarse-to-ﬁne many-task net-
work for joint 2d and 3d vehicle analysis from monocular
image. In Proc. IEEE Conf. Comp. Vis. Patt. Recogn., pages
2040–2049, 2017.

[4] A. X. Chang, T. Funkhouser, L. Guibas, P. Hanrahan,
Q. Huang, Z. Li, S. Savarese, M. Savva, S. Song, H. Su,
et al. Shapenet: An information-rich 3d model repository.
arXiv preprint arXiv:1512.03012, 2015.

[5] L.-C. Chen, G. Papandreou, I. Kokkinos, K. Murphy, and
A. L. Yuille. Deeplab: Semantic image segmentation with
deep convolutional nets, atrous convolution, and fully con-
nected crfs. IEEE transactions on pattern analysis and ma-
chine intelligence, 40(4):834–848, 2018.

[6] X. Chen, K. Kundu, Z. Zhang, H. Ma, S. Fidler, and R. Urta-
sun. Monocular 3d object detection for autonomous driving.
In Proceedings of the IEEE Conference on Computer Vision
and Pattern Recognition, pages 2147–2156, 2016.

[7] Y. Chen, Z. Wang, Y. Peng, Z. Zhang, and G. Y. J. Sun. Cas-

caded pyramid network for multi-person pose estimation.

[8] F. Chollet. Xception: Deep learning with depthwise separa-
ble convolutions. arXiv preprint, pages 1610–02357, 2017.
[9] C. B. Choy, D. Xu, J. Gwak, K. Chen, and S. Savarese. 3d-
r2n2: A uniﬁed approach for single and multi-view 3d object
reconstruction. In Proc. Eur. Conf. Comp. Vis., 2016.

[10] A. Dai, A. X. Chang, M. Savva, M. Halber, T. A.
Funkhouser, and M. Nießner. Scannet: Richly-annotated 3d
reconstructions of indoor scenes. In Proc. IEEE Conf. Comp.
Vis. Patt. Recogn.

[11] J. Deng, W. Dong, R. Socher, L.-J. Li, K. Li, and L. Fei-
Fei. Imagenet: A large-scale hierarchical image database. In
Proc. IEEE Conf. Comp. Vis. Patt. Recogn., pages 248–255.
Ieee, 2009.

[12] X. Di and P. Yu.

from a single view silhouette image.
arXiv:1701.04752, 2017.

3d reconstruction of simple objects
arXiv preprint

[13] N. Dinesh Reddy, M. Vo, and S. G. Narasimhan. Carfusion:
Combining point tracking and part detection for dynamic 3d
reconstruction of vehicles. In Proc. IEEE Conf. Comp. Vis.
Patt. Recogn., June 2018.

[14] W. Ding, S. Li, G. Zhang, X. Lei, H. Qian, and Y. Xu. Ve-
hicle pose and shape estimation through multiple monocular
vision.

[15] F. Engelmann, J. St¨uckler, and B. Leibe. Joint object pose
estimation and shape reconstruction in urban street scenes
using 3d shape priors.
In German Conference on Pattern
Recognition, pages 219–230. Springer, 2016.

[16] M. Everingham, L. Van Gool, C. K. I. Williams, J. Winn,
and A. Zisserman. The PASCAL Visual Object Classes
Challenge 2012 (VOC2012) Results.
http://www.pascal-
network.org/challenges/VOC/voc2012/workshop/index.html.
[17] H. Fan, H. Su, and L. J. Guibas. A point set generation net-
In

work for 3d object reconstruction from a single image.
Proc. IEEE Conf. Comp. Vis. Patt. Recogn.

[18] S. Fidler, S. Dickinson, and R. Urtasun. 3d object detec-
tion and viewpoint estimation with a deformable 3d cuboid
model. In Proc. Adv. Neural Inf. Process. Syst., pages 611–
619, 2012.

[19] M. A. Fischler and R. C. Bolles. Random sample consen-
sus: a paradigm for model ﬁtting with applications to image
analysis and automated cartography. Communications of the
ACM, 24(6):381–395, 1981.

[20] H. Fu, M. Gong, C. Wang, K. Batmanghelich, and D. Tao.
Deep ordinal regression network for monocular depth esti-
mation. In Proceedings of the IEEE Conference on Computer
Vision and Pattern Recognition, pages 2002–2011, 2018.

[21] A. Geiger, P. Lenz, and R. Urtasun. Are we ready for au-
In
tonomous driving?
Proc. IEEE Conf. Comp. Vis. Patt. Recogn., pages 3354–
3361. IEEE, 2012.

the kitti vision benchmark suite.

[22] K. He, G. Gkioxari, P. Doll´ar, and R. Girshick. Mask r-
cnn. In Proc. IEEE Int. Conf. Comp. Vis., pages 2980–2988.
IEEE, 2017.

[23] X. Huang, X. Cheng, Q. Geng, B. Cao, D. Zhou, P. Wang,
Y. Lin, and R. Yang. The apolloscape dataset for autonomous
driving.
In Proceedings of the IEEE Conference on Com-
puter Vision and Pattern Recognition Workshops, pages 954–
960, 2018.

[24] A. Kanazawa, S. Tulsiani, A. A. Efros, and J. Malik. Learn-
ing category-speciﬁc mesh reconstruction from image col-
lections. In Proc. Eur. Conf. Comp. Vis., 2018.

[25] A. Kar, S. Tulsiani, J. Carreira, and J. Malik. Category-
speciﬁc object reconstruction from a single image. In Proc.
IEEE Conf. Comp. Vis. Patt. Recogn., pages 1966–1974,
2015.

[26] W. Kehl, F. Milletari, F. Tombari, S. Ilic, and N. Navab. Deep
learning of local rgb-d patches for 3d object detection and 6d
pose estimation. In Proc. Eur. Conf. Comp. Vis., pages 205–
220. Springer, 2016.

[27] T. D. Kulkarni, W. F. Whitney, P. Kohli, and J. Tenenbaum.
Deep convolutional inverse graphics network. In Proc. Adv.
Neural Inf. Process. Syst., pages 2539–2547, 2015.

[28] A. Kundu, Y. Li, and J. M. Rehg. 3d-rcnn: Instance-level 3d
object reconstruction via render-and-compare. In Proc. IEEE
Conf. Comp. Vis. Patt. Recogn., pages 3559–3568, 2018.

[29] B. Leibe and B. Schiele. Analyzing appearance and contour
based methods for object categorization. In Proc. IEEE Conf.
Comp. Vis. Patt. Recogn., volume 2, pages II–409, 2003.

[30] J. J. Leonard and H. F. Durrant-Whyte. Directed sonar sens-
ing for mobile robot navigation, volume 175. Springer Sci-
ence & Business Media, 2012.

[31] V. Lepetit, F. Moreno-Noguer, and P. Fua. Epnp: An accu-
Int. J. Comp. Vis.,

rate o (n) solution to the pnp problem.
81(2):155, 2009.

5460

[32] C. Li, M. Z. Zia, Q.-H. Tran, X. Yu, G. D. Hager, and
M. Chandraker. Deep supervision with shape concepts
for occlusion-aware 3d object parsing.
arXiv preprint
arXiv:1612.02699, 2016.

[33] Y. Li, H. Qi, J. Dai, X. Ji, and Y. Wei. Fully convolu-
tional instance-aware semantic segmentation. arXiv preprint
arXiv:1611.07709, 2016.

[49] P. Poirson, P. Ammirato, C.-Y. Fu, W. Liu, J. Kosecka, and
A. C. Berg. Fast single shot detection and pose estimation.
In 3dv, pages 676–684. IEEE, 2016.

[50] S. Ren, K. He, R. Girshick, and J. Sun. Faster r-cnn: Towards
real-time object detection with region proposal networks. In
Advances in neural information processing systems, pages
91–99, 2015.

[34] M. Liang, B. Yang, S. Wang, and R. Urtasun. Deep continu-
ous fusion for multi-sensor 3d object detection. In Proc. Eur.
Conf. Comp. Vis., pages 641–656, 2018.

[51] B. C. Russell and A. Torralba. Building a database of 3d
scenes from user annotations. In Proc. IEEE Conf. Comp.
Vis. Patt. Recogn., pages 2711–2718. IEEE, 2009.

[35] J. J. Lim, H. Pirsiavash, and A. Torralba. Parsing ikea ob-
jects: Fine pose estimation. In Proc. IEEE Int. Conf. Comp.
Vis., pages 2992–2999, 2013.

[52] S. Savarese and L. Fei-Fei. 3d generic object categorization,
localization and pose estimation. In Proc. IEEE Conf. Comp.
Vis. Patt. Recogn., pages 1–8, Oct 2007.

[36] T.-Y. Lin, M. Maire, S. Belongie, J. Hays, P. Perona, D. Ra-
manan, P. Doll´ar, and C. L. Zitnick. Microsoft coco: Com-
mon objects in context. In Proc. Eur. Conf. Comp. Vis., pages
740–755. Springer, 2014.

[37] R. Lopez-Sastre, C. Redondo-Cabrera, P. Gil-Jimenez, and
S. Maldonado-Bascon. Icaro: image collection of annotated
real-world objects, 2010.

[38] F. Massa, R. Marlet, and M. Aubry. Crafting a multi-task cnn
for viewpoint estimation. arXiv preprint arXiv:1609.03894,
2016.

[39] W. Matusik, C. Buehler, R. Raskar, S. J. Gortler, and
L. McMillan. Image-based visual hulls. In Proceedings of
the 27th annual conference on Computer graphics and in-
teractive techniques, pages 369–374. ACM Press/Addison-
Wesley Publishing Co., 2000.

[40] J. McAuley and J. Leskovec. Image labeling on a network:
In
using social-network metadata for image classiﬁcation.
Proc. Eur. Conf. Comp. Vis., pages 828–841. Springer, 2012.
[41] M. Menze and A. Geiger. Object scene ﬂow for autonomous
In Proc. IEEE Conf. Comp. Vis. Patt. Recogn.,

vehicles.
pages 3061–3070, 2015.

[42] M. Menze, C. Heipke, and A. Geiger. Joint 3d estimation
In ISPRS Workshop on Image

of vehicles and scene ﬂow.
Sequence Analysis (ISA), 2015.

[43] Y. Miao, X. Tao, and J. Lu. Robust 3d car shape estimation
from landmarks in monocular image. In Proc. Brit. Mach.
Vis. Conf., 2016.

[53] D. Stutz and A. Geiger. Learning 3d shape completion from
laser scan data with weak supervision. In IEEE Conference
on Computer Vision and Pattern Recognition (CVPR). IEEE
Computer Society, 2018.

[54] H. Su, C. R. Qi, Y. Li, and L. J. Guibas. Render for cnn:
Viewpoint estimation in images using cnns trained with ren-
dered 3d model views. In Proc. IEEE Int. Conf. Comp. Vis.,
pages 2686–2694, 2015.

[55] A. Thomas, V. Ferrar, B. Leibe, T. Tuytelaars, B. Schiel, and
L. V. Gool. Towards multi-view object class detection. In
Proc. IEEE Conf. Comp. Vis. Patt. Recogn., volume 2, pages
1589–1596, June 2006.

[56] D. Tran, L. Bourdev, R. Fergus, L. Torresani, and M. Paluri.
Learning spatiotemporal features with 3d convolutional net-
works.
In Proc. IEEE Int. Conf. Comp. Vis., pages 4489–
4497, 2015.

[57] S. Tulsiani and J. Malik. Viewpoints and keypoints.

In
Proc. IEEE Conf. Comp. Vis. Patt. Recogn., pages 1510–
1519, 2015.

[58] J. Uhrig, E. Rehder, B. Fr¨ohlich, U. Franke, and T. Brox.
Box2pix: Single-shot instance segmentation by assigning
pixels to object boxes.
In IEEE Intelligent Vehicles Sym-
posium (IV), 2018.

[59] A. Vaswani, N. Shazeer, N. Parmar, J. Uszkoreit, L. Jones,
A. N. Gomez, Ł. Kaiser, and I. Polosukhin. Attention is all
you need.
In Advances in Neural Information Processing
Systems, pages 5998–6008, 2017.

[44] P. Moreels and P. Perona. Evaluation of features detectors
Int. J. Comp. Vis.,

and descriptors based on 3d objects.
73(3):263–284, 2007.

[60] Y. Wang, X. Tan, Y. Yang, X. Liu, E. Ding, F. Zhou, and L. S.
Davis. 3d pose estimation for ﬁne-grained object categories.
arXiv preprint arXiv:1806.04314, 2018.

[45] R. Mottaghi, Y. Xiang, and S. Savarese. A coarse-to-ﬁne
model for 3d pose estimation and sub-category recognition.
In Proc. IEEE Conf. Comp. Vis. Patt. Recogn., pages 418–
426, 2015.

[46] A. Mousavian, D. Anguelov, J. Flynn, and J. Koˇseck´a. 3d
bounding box estimation using deep learning and geometry.
In Proc. IEEE Conf. Comp. Vis. Patt. Recogn., pages 5632–
5640. IEEE, 2017.

[47] M. Ozuysal, V. Lepetit, and P. Fua. Pose estimation for cat-
egory speciﬁc multiview object localization. In Proc. IEEE
Conf. Comp. Vis. Patt. Recogn., pages 778–785. IEEE, 2009.
[48] G. Pavlakos, L. Zhu, X. Zhou, and K. Daniilidis. Learning to
estimate 3d human pose and shape from a single color image.
In Proc. IEEE Conf. Comp. Vis. Patt. Recogn., June 2018.

[61] S.-E. Wei, V. Ramakrishna, T. Kanade, and Y. Sheikh. Con-
volutional pose machines. In Proceedings of the IEEE Con-
ference on Computer Vision and Pattern Recognition, pages
4724–4732, 2016.

[62] J. Wu, T. Xue, J. J. Lim, Y. Tian, J. B. Tenenbaum, A. Tor-
ralba, and W. T. Freeman. Single image 3d interpreter net-
work. In ECCV, pages 365–382. Springer, 2016.

[63] Y. Xiang, W. Choi, Y. Lin, and S. Savarese. Data-driven 3d
voxel patterns for object category recognition. In Proc. IEEE
Conf. Comp. Vis. Patt. Recogn., pages 1903–1911, 2015.

[64] Y. Xiang, W. Kim, W. Chen, J. Ji, C. Choy, H. Su, R. Mot-
taghi, L. Guibas, and S. Savarese. Objectnet3d: A large scale
database for 3d object recognition. In Proc. Eur. Conf. Comp.
Vis., pages 160–176. Springer, 2016.

5461

[65] Y. Xiang, R. Mottaghi, and S. Savarese. Beyond pascal: A
benchmark for 3d object detection in the wild. pages 75–82.
IEEE, 2014.

[66] G. Yang, Y. Cui, S. Belongie, and B. Hariharan. Learning
single-view 3d reconstruction with limited pose supervision.
In Proc. Eur. Conf. Comp. Vis., September 2018.

[67] T. Yu, J. Meng, and J. Yuan. Multi-view harmonized bilin-
ear network for 3d object recognition. In Proc. IEEE Conf.
Comp. Vis. Patt. Recogn., June 2018.

[68] M. Zeeshan Zia, M. Stark, and K. Schindler. Are cars just 3d
boxes?-jointly estimating the 3d shape of multiple objects.
In Proceedings of the IEEE Conference on Computer Vision
and Pattern Recognition, pages 3678–3685, 2014.

[69] M. Z. Zia, M. Stark, B. Schiele, and K. Schindler. De-
tailed 3d representations for object recognition and model-
ing. IEEE Trans. Pattern Anal. Mach. Intell., 35(11):2608–
2623, 2013.

[70] M. Z. Zia, M. Stark, and K. Schindler. Towards scene un-
derstanding with detailed 3d object representations. Int. J.
Comp. Vis., 112(2):188–203, 2015.

5462

