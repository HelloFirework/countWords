Recurrent Back-Projection Network for Video Super-Resolution

Muhammad Haris1, Greg Shakhnarovich2, and Norimichi Ukita1

1Toyota Technological Institute, Japan 2Toyota Technological Institute at Chicago, United States

{mharis, ukita}@toyota-ti.ac.jp, greg@ttic.edu

Abstract

We proposed a novel architecture for the problem of
video super-resolution. We integrate spatial and temporal
contexts from continuous video frames using a recurrent
encoder-decoder module, that fuses multi-frame informa-
tion with the more traditional, single frame super-resolution
path for the target frame. In contrast to most prior work
where frames are pooled together by stacking or warping,
our model, the Recurrent Back-Projection Network (RBPN)
treats each context frame as a separate source of informa-
tion. These sources are combined in an iterative reﬁne-
ment framework inspired by the idea of back-projection in
multiple-image super-resolution. This is aided by explic-
itly representing estimated inter-frame motion with respect
to the target, rather than explicitly aligning frames. We
propose a new video super-resolution benchmark, allowing
evaluation at a larger scale and considering videos in dif-
ferent motion regimes. Experimental results demonstrate
that our RBPN is superior to existing methods on several
datasets.

1. Introduction

The goal of super-resolution (SR) is to enhance a low-
resolution (LR) image to higher resolution (HR) by ﬁlling
missing ﬁne details in the LR image. This ﬁeld can be di-
vided into Single-Image SR (SISR) [4, 8, 9, 19, 21, 29],
Multi-Image SR (MISR) [5, 6], and Video SR (VSR) [2,
30, 27, 16, 13, 25], the focus of this paper.

a

of

Consider

sequence

LR video

frames
It−n, . . . , It, . . . , It+n, where we super-resolve a target
frame, It. While It can be super-resolved independently
of other frames as SISR, this is wasteful of missing details
available from the other frames.
In MISR, the missing
details available from the other frames are fused for
super-resolving It. For extracting these missing details, all
frames must be spatially aligned explicitly or implicitly.
By separating differences between the aligned frames from
missing details observed only in one or some of the frames,
the missing details are extracted. This alignment is required

to be very precise (e.g., sub-pixel accuracy) for SR. In
MISR, however, the frames are aligned independently with
no cue given by temporal smoothness, resulting in difﬁculty
in the precise alignment. Yet another approach is to align
the frames in temporal smooth order as VSR.

In recent VSR methods using convolutional networks,
the frames are concatenated [22, 16] or fed into recurrent
networks (RNNs) [13]) in temporal order; no explicit align-
ment is performed. The frames can be also aligned ex-
plicitly, using motion cues between temporal frames with
the alignment modules [25, 2, 30, 27]. These latter meth-
ods generally produce results superior to those with no ex-
plicit spatial alignment [22, 13]. Nonetheless, these VSR
methods suffer from a number of problems. In the frame-
concatenation approach [2, 16, 25], many frames are pro-
cessed simultaneously in the network, resulting in difﬁculty
in training the network. In RNNs [30, 27, 13], it is not easy
to jointly model subtle and signiﬁcant changes (e.g., slow
and quick motions of foreground objects) observed in all
frames of a video even by those designed for maintaining
long-term temporal dependencies such as LSTMs [7].

Our method proposed in this paper is inspired by “back-
projection” originally introduced in [14, 15] for MISR.
Back-projection iteratively calculates residual images as re-
construction error between a target image and a set of its
corresponding images. The residuals are back-projected to
the target image for improving its resolution. The multi-
ple residuals can represent subtle and signiﬁcant differences
between the target frame and other frames independently.
Recently, Deep Back-Projection Networks (DBPN) [8] ex-
tended back-projection to Deep SISR under the assumption
that only one LR image is given for the target image. In that
scenario, DBPN produces a high-resolution feature map, it-
eratively reﬁned through multiple up- and down-sampling
layers. Our method, Recurrent Back-Projection Networks
(RBPN), integrates the beneﬁts of the original, MISR back
projection and DBPN, for VSR. Here we use other video
frames as corresponding LR images for the original MISR
back-projection. In addition, we use the idea of iteratively
reﬁning HR feature maps representing missing details by
up- and down-sampling processes to further improve the

13897

(a) Temporal concatenation

(b) Temporal aggregation

(c) RNNs

(d) Our RBPN

Figure 1. Comparison of Deep VSRs. (a) Input frames are concatenated to preserve temporal information [18, 2, 16, 22]. (b) Temporal
aggregation improves (a) to preserve multiple motion regimes [25]. (c) RNNs take a sequence of input frames to produce one SR image at
a target frame, It [13, 30, 27]. (d) Our recurrent back-projection network accepts It, which is enclosed by a blue dashed line, as well as
a set of residual features computed from a pairing It with other frames (i.e., It−k for k ∈ {1, · · · , n}), as enclosed by a red dotted line,
while previous approaches using RNNs shown in (c) feed all temporal frames one by one along a single path. Residual features computed
from the pairs of (It, It−k) (MISR path - the vertical red arrows) are fused with features extracted from variants of It (SISR path - the
horizontal blue arrows) through RNN.

quality of SR.

Our contributions include the following key innovations.
Integrating SISR and MISR in a uniﬁed VSR frame-
work: SISR and MISR extract missing details from differ-
ent sources. Iterative SISR [8] extracts various feature maps
representing the details of a target frame. MISR provides
multiple sets of feature maps from other frames. These
different sources are iteratively updated in temporal order
through RNN for VSR.
Back-projection modules for RBPN: We develop a re-
current encoder-decoder mechanism for incorporating de-
tails extracted in SISR and MISR paths through the back-
projection. While the SISR path accepts only It, the MISR
path also accepts It−k where k ∈ [n]. A gap between It
and It−k is larger than the one in other VSRs using RNN
(i.e., gap only between It and It−1). Here, the network is
able to understand this large gap since each context is cal-
culated separately, rather than jointly as in previous work,
this separate context plays an important role in RBPN.
Extended evaluation protocol: We report extensive exper-
iments to evaluate VSR. In addition to previously-standard
datasets, Vid4 [24] and SPMCS [30],
that lack signiﬁ-
cant motions, a dataset containing various types of motion
(Vimeo-90k [34]) is used in our evaluation. This allows
us to conduct a more detailed evaluation of strengths and
weaknesses of VSR methods, depending on the type of the
input video.

2. Related Work

While SR has an extensive history, our discussion in this
section focuses on deep SR – SR methods that involve deep
neural network components, trained end-to-end.

2.1. Deep Image Super resolution

Deep SISR is ﬁrst introduced by SRCNN [4] that re-
Further im-

quires a predeﬁned upsampling operator.

provements include better up-sampling layers [28], residual
learning [19, 29], back-projection [8], recursive layers [20],
and progressive upsampling [21]. See NTIRE2018 [31] and
PIRM2018 [1] for comprehensive comparison.

2.2. Recurrent Networks

Recurrent neural networks (RNNs) deal with sequential
inputs and/or outputs, and have been employed for video
captioning [17, 26, 35], video summarization [3, 32], and
VSR [30, 13, 27]. Two types of RNN have been used for
VSR. A many-to-one architecture is used in [30, 13] where
a sequence of frames is mapped to a single target HR frame.
A synchronous many-to-many RNN has recently been used
in VSR by [27], to map a sequence of LR frames to a se-
quence of HR frames.

2.3. Deep Video Super resolution

Deep VSR can be primarily divided into three types
based on the approach to preserving temporal information
as shown in Fig. 1 (a), (b), and (c).
(a) Temporal Concatenation. The most popular approach
to retain temporal information in VSR is by concatenating
the frames as in [18, 2, 16, 22]. This approach can be seen as
an extension of SISR to accept multiple input images. VSR-
DUF [16] proposed a mechanism to construct up-sampling
ﬁlters and residual images. However, this approach fails to
represent the multiple motion regimes on a sequence be-
cause input frames are concatenated together.
(b) Temporal Aggregation. To address the dynamic mo-
tion problem in VSR, [25] proposed multiple SR inferences
which work on different motion regimes. The ﬁnal layer ag-
gregates the outputs of all branches to construct SR frame.
However, this approach basically still concatenates many
input frames, resulting in difﬁculty in global optimization.
(c) RNNs. This approach is ﬁrst proposed by [13] using
bidirectional RNNs. However, the network has a small net-

3898

Figure 2. Overview of RBPN. The network has two approaches. The horizontal blue line enlarges It using SISR. The vertical red line is
based on MISR to compute the residual features from a pair of It to neighbor frames (It−1, ..., It−n) and the precomputed dense motion
ﬂow maps (Ft−1, ..., Ft−n). Each step is connected to add the temporal connection. On each projection step, RBPN observes the missing
details on It and extract the residual features from each neighbor frame to recover the missing details.

work capacity and has no frame alignment step. Further
improvement is proposed by [30] using a motion compen-
sation module and a convLSTM layer [33]. Recently, [27]
proposed an efﬁcient many-to-many RNN that uses the pre-
vious HR estimate to super-resolve the next frames. While
recurrent feedback connections utilize temporal smoothness
between neighbor frames in a video for improving the per-
formance, it is not easy to jointly model subtle and signiﬁ-
cant changes observed in all frames.

3. Recurrent Back-Projection Networks

3.1. Network Architecture

Our proposed network is illustrated in Fig. 2. Let I be
LR frame with size of (M l × N l). The input is sequence
of n + 1 LR frames {It−n, . . . , It−1, It} where It is the
target frame. The goal of VSR is to output HR version of It,
denoted by SRt with size of (M h × N h) where M l < M h
and N l < N h. The operation of RBPN can be divided into
three stages: initial feature extraction, multiple projections,
and reconstruction. Note that we train the entire network
jointly, end-to-end.
Initial feature extraction. Before entering projection mod-
ules, It is mapped to LR feature tensor Lt. For each neigh-
bor frame among It−k, k ∈ [n], we concatenate the pre-
computed dense motion ﬂow map Ft−k (describing a 2D
vector per pixel) between It−k and It with the target frame
It and It−k. The motion ﬂow map encourages the projec-
tion module to extract missing details between a pair of It
and It−k. This stacked 8-channel “image” is mapped to a
neighbor feature tensor Mt−k .
Multiple Projections. Here, we extract the missing details
in the target frame by integrating SISR and MISR paths,
then produce reﬁned HR feature tensor. This stage receives
Lt−k−1 and Mt−k, and outputs HR feature tensor Ht−k.
Reconstruction.
by feeding concatenated HR feature maps

is obtained
for all

The ﬁnal SR output

frames into a reconstruction module, similarly to [8]:
SRt = frec([Ht−1, Ht−2, ..., Ht−n]). In our experiments,
frec is a single convolutional layer.

3.2. Multiple Projection

The multiple projection stage of RBPN uses a re-
current chain of encoder-decoder modules, as shown in
Fig. 3.
The projection module, shared across time
frames, takes two inputs: Lt−n−1 ∈ RM l
and
Mt−n ∈ RM l
, then produces two outputs: Lt−n
and Ht−n ∈ RM h
×ch
where cl, cm, ch are the number
of channels for particular map accordingly.

×N h

×cm

×N l

×N l

×cl

The encoder produces a hidden state of estimated HR
features from the projection to a particular neighbor frame.
The decoder deciphers the respective hidden state as the
next input for the encoder module as shown in Fig. 4 which
are deﬁned as follows:

Encoder: Ht−n = NetE(Lt−n−1, Mt−n; θE)

Decoder:

Lt−n = NetD(Ht−n; θD)

The encoder module NetE is deﬁned as follows:

t−n−1 = Netsisr(Lt−n−1; θsisr)
t−n = Netmisr(Mt−n; θmisr)

SISR upscale: H l
MISR upscale: H m
Residual: et−n = Netres(H l
Output: Ht−n = H l

t−n−1 + et−n

t−n−1 − H m

t−n; θres)

(1)

(2)

(3)

(4)

(5)

(6)

3.3. Interpretation

Figure 5 illustrates the RBPN pipeline, for a 3-frame
video. In the encoder, we can see RBPN as the combina-
tion of SISR and MISR networks. First, target frame is en-
larged by Netsisr to produce H l
t−k−1. Then, for each com-
bination of concatenation from neighbor frames and target
frame, Netmisr performs implicit frame alignment and ab-
sorbs the motion from neighbor frames to produce warping

3899

Figure 3. The proposed projection module. The target features
(Lt−n−1) is projected to neighbor features (Mt−n) to construct
better HR features (Ht−n) and produce next LR features (Lt−n)
for the next step.

(a) Encoder (the back-projection)

(b) Decoder

Figure 4. Detailed illustration of encoder and decoder. The en-
coder performs back-projection from Lt−n−1 to Mt−n to produce
the residual et−n.

t−k are fused back to H l

t−k which may capture missing details in the tar-

features H m
get frame. Finally, the residual features et−k from H l
t−k−1
and H m
t−k−1 to reﬁne the HR fea-
tures and produce hidden state Ht−k. The decoder “deci-
phers” the hidden state Ht−k to be the next input for the
encoder Lt−k. This process is repeated iteratively until the
target frame is projected to all neighbor frames.

The optimal scenario for this architecture is when each
frame can contribute to ﬁlling in some missing details in the
target frame. Then Ht−k generated in each step k produce
unique features. In the generate case when n = 0 (no other
frames) or the video is completely static (identical frames)
RBPN will effectively ignore the Netmisr module, and fall
back to a recurrent SISR operation.

4. Experimental Results

In all our experiments, we focus on 4× SR factor.

4.1. Implementation and training details

We use DBPN [8] for Netsisr, and Resnet [10] for
Netmisr, Netres, and NetD. For Netsisr, we construct
three stages using 8 × 8 kernel with stride = 4 and pad by 2
pixels. For Netmisr, Netres, and NetD, we construct ﬁve

Bicubic
1 Frame

DBPN
1 Frame

DBPN-MISR

RBPN-MISR

5 Frames

5 Frames

RBPN

5 Frames

27.13/0.749

29.85/0.837

30.64/0.859

30.89/0.866

31.40/0.877

Table 1. Baseline comparison on SPMCS-32. Red here and in the
other tables indicates the best performance (PSNR/SSIM).

blocks where each block consists of two convolutional lay-
ers with 3 × 3 kernel with stride = 1 and pad by 1 pixel. The
up-sampling layer in Netmisr and down-sampling layer in
NetD use 8 × 8 kernel with stride = 4 and pad by 2 pixels.
Our ﬁnal network uses cl = 256, cm = 256, and ch = 64.

We trained our networks using Vimeo-90k [34], with a
training set of 64,612 7-frame sequences, with ﬁxed resolu-
tion 448 × 256. Furthermore, we also apply augmentation,
such as rotation, ﬂipping, and random cropping. To produce
LR images, we downscale the HR images 4× with bicubic
interpolation.

All modules are trained end-to-end using per-pixel L1
loss per-pixel between the predicted frame and the ground
truth HR frame. We use batch size of 8 with size 64 × 64
which is cropped randomly from 112 × 64 LR image. The
learning rate is initialized to 1e − 4 for all layers and de-
crease by a factor of 10 for half of total 150 epochs. We
initialize the weights based on [11]. For optimization, we
used Adam with momentum to 0.9. All experiments were
conducted using Python 3.5.2 and PyTorch 1.0 on NVIDIA
TITAN X GPUs. Following the evaluation from previous
approaches [2, 30, 27], we crop 8 pixels near image bound-
ary and remove ﬁrst six frames and last three frames. All
measurements use only the luminance channel (Y).

4.2. Ablation studies

Baselines We consider three baselines, that retain some
components of RBPN while removing others. First, we re-
move all components by Netsisr (DBPN); this ignores the
video context. Second, we use DBPN with temporal con-
catenation (DBPN-MISR). Third, we remove the decoder,
thus severing temporal connections, so that our model is
reduced to applying back-projection Netmisr with each
neighboring frame, and concatenating the results; we call
this baseline RBPN-MISR. The results are shown in Ta-
ble 1. Our intuition suggests, and the results conﬁrm, that
such an approach would be weaker than RBPN, since it does
not have the ability to separately handle changes of different
magnitude that RBPN has. As expected, SISR suffers from
ignoring extra information in other frames. RBPN-MISR
and DBPN-MISR does manage to leverage multiple frames
to improve performance, but the best results are obtained by
the full RBPN model.
Network setup. The modular design of our approach al-
lows easy replacement of modules; in particular we con-
sider choices of DBPN or ResNet for Netsisr, Netmisr, or
both. In Table 2, we evaluate three combinations: RBPN

3900

Figure 5. The illustration of each operation in RBPN (n + 1 = 3). Zoom in to see better visualization.

DBPN

RESNET

Netsisr =DBPN, Netmisr =RESNET

30.54/0.856

30.74/0.862

30.96/0.866

Table 2. Network analysis using RBPN/2 on SPMCS-32.

Figure 6. Effect of context (past) length, 4× SR on SPMCS-32.
RBPN/hki: RBPN trained/tested with k past frames. Note: DBPN
is equivalent to RBPN/0.

with DBPN, RBPN with Resnet, and RBPN with the com-
bination of DBPN as Netsisr and Resnet as Netmisr. The
latter produces the best results, but the difference are minor,
showing stability of RBPN w.r.t. choice of components.
Context length We evaluated RBPN with different lengths
of video context, i.e., different number of past frames n ∈
{2, . . . , 6}. Figure 6 shows that performance (measured on
(on SPMCS-32 test set) improves with longer context. The
performance of RBPN/3 is even better than VSR-DUF as
one of state-of-the-art VSR which uses six neighbor frames.
It also shows that by adding more frames, the performance
of RBPN increase by roughly 0.2 dB.

Fig. 7 provides an illustration of the underlying perfor-
mance gains. Here, VSR-DUF fails to reconstruct the brick
pattern, while RBPN/3 reconstructs it well, even with fewer
frames in the context; increasing context length leads to fur-
ther improvements.

RBPN/2

RBPN

Last

PSNR/SSIM 30.96/0.866

30.89/0.864

RBPN/6

w/ LSTM
31.46/0.880

RBPN

31.64/0.883

Table 3. Comparison of
SPMCS-32.

temporal

integration strategies on

Temporal integration Once the initial feature extraction
and the projection modules have produced a sequence of
HR feature maps Ht−k, k = 1, . . . , n, we can use these
maps in multiple ways to reconstruct the HR target. The
proposed DBPN concatenates the maps; We also consider
an alternative where only the Ht−n is fed to Netrec (re-
ferred to as Last). Furthermore, instead of concatenating
the maps, we can feed them to a convolutional LSTM [33],
the output of which is then fed to Netrec. The results are
shown in Table 3. Dropping the concatenation and only us-
ing last feature map harms the performance (albeit moder-
ately). Replacing concatenation with an LSTM also reduces
the performance (while increasing computational cost). We
conclude that the RBPN design depicted in Fig. 2 is better
than the alternatives.
Temporal order When selecting frames to serve as context
for a target frame t, we have a choice of how to choose and
order it: use only past frames (P; for instance, with n = 6,
this means It, It−1, . . . , It−6), use both past and future (PF,
It−3, . . . , It, . . . , It+3), or consider the past frames in ran-
dom order (PR; we can do this since the motion ﬂow is
computed independently for each context frame w.r.t.
the
target). Table 4 shows that PF is better than P by 0.1 dB;
presumably this is due to the increased, more symmetric
representation of motion occurring in frame t.
Interest-
ingly, when the network is trained on PF, then tested on
P (PF → P), the performance is decreased (-0.17dB), but
when RBPN is trained on P then tested on PF (P → PF),
the performance remains almost the same.

The results of comparing order P to random ordering PR
are shown in Table 5. Interestingly, RBPN performance is

3901

(a) VSR-DUF/6 [16]

(b) RBPN/2

(c) RBPN/3

(d) RBPN/4

(e) RBPN/5

(f) RBPN/6

(g) GT

Figure 7. Visual results on different frame length (SPMCS-32). Zoom in to see better visualization.

PSNR/SSIM 31.64/0.883

31.74/0.884

31.66/0.884

31.57/0.881

P

PF

P → PF

PF → P

Table 4. Effect of temporal order of context, RBPN/6 on SPMCS-
32.

PSNR/SSIM 31.40/0.877

31.39/0.876

31.39/0.877

31.35/0.875

P

PR

P → PR

PR → P

Table 5. Effect of temporal order (RBPN/4) on SPMCS-32.

RBPN/5

w/

w/o

PSNR/SSIM 31.54/0.881

31.36/0.878

Table 6. Optical ﬂow (OF) importance on SPMCS-32.

not signiﬁcantly affected by the choice of order. We at-
tribute this robustness to the decision to associate each con-
text frame with the choice of order.
Optical ﬂow Finally, we can remove the optical ﬂow com-
ponent of Mt−k, feeding the projection modules only the
concatenated frame pairs. As Table 6 shows, explicit opti-
cal ﬂow representation is somewhat, but not substantially,
beneﬁcial. We compute the ﬂow using an implementation
of [23].

4.3. Comparison with the state of the arts

We compare our network with eight state-of-the-art SR
algorithms: DBPN [8], BRCN [13], VESPCN [2], B123 +
T [25], VSR-TOFLOW [34], DRDVSR [30], FRVSR [27],
and VSR-DUF [16]. Note: only VSR-DUF and DBPN pro-
vide full testing code without restrictions, and most of the
previous methods use different training sets. Other methods
provide only the estimated SR frames. For RBPN, we use
n = 6 with PF (past+future) order, which achieves the best
results, denoted as RBPN/6-PF.

We carry out extensive experiments using three datasets:
Vid4 [24], SPMCS [30], and Vimeo-90k [34]. Each dataset
has different characteristics. We found that evaluating on
Vid4, commonly reported in literature, has limited ability
to assess relative merits of competing approaches; the se-
quences in this set have visual artifacts, very little inter-
frame variation, and fairly limited motion. Most notably, it
only consists of four video sequences. SPMCS data exhibit
more variation, but still lack signiﬁcant motion. Therefore,
in addition to the aforementioned data sets, we consider
Vimeo-90k, a much larger and diverse data set, with high-

quality frames, and a range of motion types. We stratify the
Vimeo-90k sequences according to estimated motion veloc-
ities into slow, medium and fast “tiers”, as shown in Fig. 8,
and report results for these tiers separately.

Table 7 shows the results on Vid4 test set. We also pro-
vide the average ﬂow magnitude (pixel/frame) on Vid4. It
shows that Vid4 does not contain signiﬁcant motion. The
results also show that RBPN/6-PF is better than the previ-
ous methods, except for VSR-DUF. Figure 9 shows some
qualitative results on Vid4.
(on “Calendar”). The “MA-
REE” text reconstructed with RBPN/6-PF has sharper im-
ages than previous methods. However, here we see that the
ground truth (GT) itself suffers from artifacts and aliasing,
perhaps due to JPEG compression. This apparently leads in
some cases to penalizing sharper SR predictions, like those
made by our network, as illustrated in Fig. 9.

Table 8 shows the detailed results on SPMCS-11.
RBPN/6-PF has better performance of 0.68 dB and 1.28
dB than VSR-DUF and DRDVSR, respectively. Even with
fewer frames in the context, RBPN/4-P has better average
performance than VSR-DUF and DRDVSR by 0.33 dB and
0.93 dB, respectively. Qualitative results on SPMCS are
shown in Fig. 10. In the ﬁrst row, we see that RBPN repro-
duces a well-deﬁned pattern, especially on the stairs area.
In the second row, RBPN recovers sharper details and pro-
duces better brown lines from the building pattern.

It is interesting to see that VSR-DUF tends to do better
on SSIM than on PSNR. It has been suggested that PSNR is
more sensitive to Gaussian noise, while SSIM is more sen-
sitive to compression artifacts [12]. VSR-DUF generates
up-sampling ﬁlter to enlarge the target frame. The use of
up-sampling ﬁlter can keep overall structure of target frame
which tends to have higher SSIM. However, since the resid-
ual image produced by VSR-DUF fails to generate the miss-
ing details, PSNR tends to be lower. In contrast with VSR-
DUF, our focus is to fuse the missing details to the target
frame. However, if in some cases we generate sharper pat-
tern than GT, this causes lower SSIM. This phenomenon
mainly can be observed in the Vid4 test set.

Table 9 shows the results on Vimeo-90k. RBPN/6-PF
outperforms VSR-DUF by a large margin. RBPN/6-PF gets
higher PSNR by 1.22 dB, 1.44 dB, and 2.54 dB than VSR-
DUF on, respectively, slow, medium, and fast motion. It
can be seen that RBPN is able to preserve different temporal
scale. RBPN achieves the highest gap relative to prior work

3902

Figure 8. Examples from Vimeo-90k [34]. Top row: fast camera motion; new object appears in the third frame. Middle row: medium
motion, little camer movement but some scene movement (e.g., person’s arm in the foreground). Bottom row: slow motion only.

Flow

Bicubic

Clip Name Magnitude
Calendar
City
Foliage
Walk
Average

1.14
1.63
1.48
1.44
1.42

19.82/0.554
24.93/0.586
23.42/0.575
26.03/0.802
23.53/0.629

DBPN

[8]

22.19/0.714
26.01/0.684
24.67/0.662
28.61/0.870
25.37/0.737

BRCN

[13]

-
-
-
-

VESPCN

B123 + T

DRDVSR

[2]
-
-
-
-

[25]

21.66/0.704
26.45/0.720
24.98/0.698
28.26/0.859
25.34/0.745

[30]

22.18/0.746
26.98/0.755
25.42/0.720
28.92/0.875
25.88/0.774

FRVSR

[27]

-
-
-
-

26.69/0.822

VSR-DUF

[16]

(24.09/0.813*)
(28.26/0.833*)
(26.38/0.771*)
(30.50/0.912*)
(27.31/0.832*)

RBPN/6-PF

23.99/0.807 (23.93/0.803*)
27.73/0.803 (27.64/0.802*)
26.22/0.757 (26.27/0.757*)
30.70/0.909 (30.65/0.911*)
27.12/0.818 (27.16/0.819*)

24.43/0.662

25.35/0.756

Table 7. Quantitative evaluation of state-of-the-art SR algorithms on Vid4 for 4×. Red indicates the best and blue indicates the second
best performance (PSNR/SSIM). The calculation is computed without crop any pixels border and remove ﬁrst and last two frames. For
B123 + T and DRDVSR, we use results provided by the authors on their webpage. For BRCN, VESPCN, and FRVSR, the values taken
from their publications. *The output is cropped 8-pixels near image boundary.

Clip Name
car05 001
hdclub 003 001
hitachi isee5 001
hk004 001
HKVTG 004
jvc 009 001
NYVTG 006
PRVTG 012
RMVTG 011
veni3 011
veni5 015
Average

Flow

Magnitude

Bicubic

DBPN [8]
(1 Frame)

DRDVSR [30]

VSR-DUF [16]

(7 Frames)

(7 Frames)

RBPN/4-P
(5 Frames)

RBPN/6-P
(7 Frames)

RBPN/6-PF
(7 Frames)

6.21
0.70
3.01
0.49
0.11
1.24
0.10
0.12
0.18
0.36
0.36
1.17

27.62
19.38
19.59
28.46
27.37
25.31
28.46
25.54
24.00
29.32
27.30

29.58
20.22
23.47
31.59
28.67
27.89
30.13
26.36
25.77
34.54
30.89

32.07
21.03
23.83
32.14
28.71
28.15
31.46
26.95
26.49
34.66
31.51

30.77
22.07
25.73
32.96
29.15
29.26
32.29
27.47
27.63
34.51
31.75

31.51
21.62
25.80
32.99
29.28
29.81
32.83
27.33
27.33
36.28
32.45

31.65
21.91
26.14
33.25
29.39
30.17
33.09
27.52
27.64
36.14
32.66

31.92
21.88
26.40
33.31
29.43
30.26
33.25
27.60
27.69
36.53
32.82

25.67/0.726

28.10/0.820

28.82/0.841

29.42/0.867

29.75/0.866

29.96/0.873

30.10/0.874

Table 8. Quantitative evaluation of state-of-the-art SR algorithms on SPMCS-11 for 4×. Red indicates the best and blue indicates the
second best performance (PSNR/SSIM).

Algorithm
Bicubic
DBPN [8]

TOFLOW [34]
VSR-DUF/6 [16]
RBPN/3-P
RBPN/6-PF
# of clips
Avg. Flow Mag.

Slow

29.33/0.829
32.98/0.901

32.16/0.889
32.96/0.909
33.73/0.914
34.18/0.920

1,616

0.6

Vimeo-90k

Medium

31.28/0.867
35.39/0.925

35.02/0.925
35.84/0.943
36.66/0.941
37.28/0.947

4,983

2.5

Fast

34.05/0.902
37.46/0.944

37.64/0.942
37.49/0.949
39.49/0.955
40.03/0.960

1,225

8.3

Table 9. Quantitative evaluation of state-of-the-art SR algorithms
on Vimeo-90k [34] for 4×.

on fast motion. Even with reduced amount of temporal con-
text available, RBPN/3-P (using only 3 extra frames) does
better than previous methods like VSR-DUF using the full
6-extra frame context. RBPN/3-P get higher PSNR by 0.77

dB, 0.82 dB, and 2 dB than VSR-DUF on slow, medium,
and fast motion, respectively.

Figure 11 shows qualitative results on Vimeo-90k.
RBPN/6-PF obtains reconstruction that appears most sim-
ilar to the GT, more pleasing and sharper than reconstruc-
tions with other methods. We have highlighted regions in
which this is particularly notable.

5. Conclusion

We have proposed a novel approach to video super-
resolution (VSR) called Recurrent Back-Projection Net-
work (RBPN). It’s a modular architecture, in which tempo-
ral and spatial information is collected from video frames
surrounding the target frame, combining ideas from single-
and multiple-frame super resolution. Temporal context
is organized by a recurrent process using the idea of
(back)projection, yielding gradual reﬁnement of the high-

3903

“Calendar”

(a) Bicubic

(b) DBPN [8]

(c) VSR [18]

(d) VESPCN [2]

(e) B123 + T [25]

(f) DRDVSR [30]

(g) FRVSR [27]

(h) VSR-DUF [16]

(i) RBPN/6-PF

(j) GT

Figure 9. Visual results on Vid4 for 4× scaling factor. Zoom in to see better visualization.

(d) RBPN/6-PF
Figure 10. Visual results on SPMCS for 4× scaling factor. Zoom in to see better visualization.

(c) VSR-DUF [16]

(b) DRDVSR [30]

(a) DBPN [8]

(e) GT

(a) Bicubic

(b) TOFlow [34]

(c) VSR-DUF [16]

(d) RBPN/3-P

(e) RBPN/6-PF

(f) GT

Figure 11. Visual results on Vimeo-90k for 4× scaling factor. Zoom in to see better visualization.

resolution features used, eventually, to reconstruct the high-
resolution target frame. In addition to our technical innova-
tions, we propose a new evaluation protocol for video SR.
This protocol allows to differentiate performance of video
SR based on magnitude of motion in the input videos. In

extensive experiments, we assess the role played by various
design choices in the ultimate performance of our approach,
and demonstrate that, on a vast majority of thousands of test
video sequences, RBPN obtains signiﬁcantly better perfor-
mance than existing VSR methods.

3904

References

[1] Yochai Blau, Roey Mechrez, Radu Timofte, Tomer Michaeli,
and Lihi Zelnik-Manor. 2018 pirm challenge on perceptual
image super-resolution. arXiv preprint arXiv:1809.07517,
2018. 2

[2] Jose Caballero, Christian Ledig, Andrew P Aitken, Alejan-
dro Acosta, Johannes Totz, Zehan Wang, and Wenzhe Shi.
Real-time video super-resolution with spatio-temporal net-
works and motion compensation. In Proceedings of the IEEE
Conference on Computer Vision and Pattern Recognition,
2017. 1, 2, 4, 6, 7, 8

[3] Jeffrey Donahue, Lisa Anne Hendricks, Sergio Guadarrama,
Marcus Rohrbach, Subhashini Venugopalan, Kate Saenko,
and Trevor Darrell. Long-term recurrent convolutional net-
works for visual recognition and description.
In Proceed-
ings of the IEEE conference on computer vision and pattern
recognition, pages 2625–2634, 2015. 2

[4] Chao Dong, Chen Change Loy, Kaiming He, and Xiaoou
Tang. Image super-resolution using deep convolutional net-
works. IEEE transactions on pattern analysis and machine
intelligence, 38(2):295–307, 2016. 1, 2

[5] Esmaeil Faramarzi, Dinesh Rajan, and Marc P Christensen.
Uniﬁed blind method for multi-image super-resolution and
single/multi-image blur deconvolution.
IEEE Transactions
on Image Processing, 22(6):2101–2114, 2013. 1

[6] Diogo C Garcia, Camilo Dorea, and Ricardo L de Queiroz.
Super resolution for multiview images using depth informa-
tion. IEEE Transactions on Circuits and Systems for Video
Technology, 22(9):1249–1256, 2012. 1

[7] Felix A Gers, J¨urgen Schmidhuber, and Fred Cummins.
Learning to forget: Continual prediction with lstm. Neural
Computation, 12(10):2451–2471, 2000. 1

[8] Muhammad Haris, Greg Shakhnarovich, and Norimichi
Ukita. Deep back-projection networks for super-resolution.
In Proceedings of the IEEE Conference on Computer Vision
and Pattern Recognition, 2018. 1, 2, 3, 4, 6, 7, 8

[9] Muhammad Haris, M. Rahmat Widyanto, and Hajime
Nobuhara. Inception learning super-resolution. Appl. Opt.,
56(22):6043–6048, Aug 2017. 1

[10] Kaiming He, Xiangyu Zhang, Shaoqing Ren, and Jian Sun.
Deep residual learning for image recognition. arXiv preprint
arXiv:1512.03385, 2015. 4

[11] Kaiming He, Xiangyu Zhang, Shaoqing Ren, and Jian Sun.
Delving deep into rectiﬁers: Surpassing human-level per-
formance on imagenet classiﬁcation. In Proceedings of the
IEEE International Conference on Computer Vision, pages
1026–1034, 2015. 4

[12] Alain Hore and Djemel Ziou. Image quality metrics: Psnr vs.
ssim. In Pattern recognition (icpr), 2010 20th international
conference on, pages 2366–2369. IEEE, 2010. 6

[13] Yan Huang, Wei Wang, and Liang Wang. Bidirectional
recurrent convolutional networks for multi-frame super-
resolution.
In Advances in Neural Information Processing
Systems, pages 235–243, 2015. 1, 2, 6, 7

[15] Michal Irani and Shmuel Peleg. Motion analysis for im-
age enhancement: Resolution, occlusion, and transparency.
Journal of Visual Communication and Image Representation,
4(4):324–335, 1993. 1

[16] Younghyun Jo, Seoung Wug Oh, Jaeyeon Kang, and
Seon Joo Kim. Deep video super-resolution network using
dynamic upsampling ﬁlters without explicit motion compen-
sation. In Proceedings of the IEEE Conference on Computer
Vision and Pattern Recognition, pages 3224–3232, 2018. 1,
2, 6, 7, 8

[17] Justin Johnson, Andrej Karpathy, and Li Fei-Fei. Densecap:
Fully convolutional localization networks for dense caption-
ing. In Proceedings of the IEEE Conference on Computer
Vision and Pattern Recognition, pages 4565–4574, 2016. 2

[18] Armin Kappeler, Seunghwan Yoo, Qiqin Dai, and Aggelos K
Katsaggelos. Video super-resolution with convolutional neu-
ral networks. IEEE Transactions on Computational Imaging,
2(2):109–122, 2016. 2, 8

[19] Jiwon Kim, Jung Kwon Lee, and Kyoung Mu Lee. Accurate
image super-resolution using very deep convolutional net-
works.
In Proceedings of the IEEE Conference on Com-
puter Vision and Pattern Recognition, pages 1646–1654,
June 2016. 1, 2

[20] Jiwon Kim, Jung Kwon Lee, and Kyoung Mu Lee. Deeply-
recursive convolutional network for image super-resolution.
In Proceedings of the IEEE Conference on Computer Vision
and Pattern Recognition, pages 1637–1645, 2016. 2

[21] Wei-Sheng Lai, Jia-Bin Huang, Narendra Ahuja, and Ming-
Hsuan Yang. Deep laplacian pyramid networks for fast and
accurate super-resolution. In IEEE Conferene on Computer
Vision and Pattern Recognition, 2017. 1, 2

[22] Renjie Liao, Xin Tao, Ruiyu Li, Ziyang Ma, and Jiaya Jia.
Video super-resolution via deep draft-ensemble learning. In
Proceedings of the IEEE International Conference on Com-
puter Vision, pages 531–539, 2015. 1, 2

[23] Ce Liu et al. Beyond pixels: exploring new representa-
tions and applications for motion analysis. PhD thesis, Mas-
sachusetts Institute of Technology, 2009. 6

[24] Ce Liu and Deqing Sun. A bayesian approach to adap-
tive video super resolution. In Computer Vision and Pattern
Recognition (CVPR), 2011 IEEE Conference on, pages 209–
216. IEEE, 2011. 2, 6

[25] Ding Liu, Zhaowen Wang, Yuchen Fan, Xianming Liu,
Zhangyang Wang, Shiyu Chang, and Thomas Huang. Ro-
bust video super-resolution with learned temporal dynamics.
In Computer Vision (ICCV), 2017 IEEE International Con-
ference on, pages 2526–2534. IEEE, 2017. 1, 2, 6, 7, 8

[26] Junhua Mao, Wei Xu, Yi Yang, Jiang Wang, Zhiheng Huang,
and Alan Yuille. Deep captioning with multimodal recurrent
neural networks (m-rnn). In ICLR, 2015. 2

[27] Mehdi SM Sajjadi, Raviteja Vemulapalli, and Matthew
Brown. Frame-recurrent video super-resolution. In Proceed-
ings of the IEEE Conference on Computer Vision and Pattern
Recognition, pages 6626–6634, 2018. 1, 2, 3, 4, 6, 7, 8

[14] Michal Irani and Shmuel Peleg.

Improving resolution by
image registration. CVGIP: Graphical models and image
processing, 53(3):231–239, 1991. 1

[28] Wenzhe Shi, Jose Caballero, Ferenc Husz´ar, Johannes Totz,
Andrew P Aitken, Rob Bishop, Daniel Rueckert, and Zehan
Wang. Real-time single image and video super-resolution

3905

using an efﬁcient sub-pixel convolutional neural network. In
Proceedings of the IEEE Conference on Computer Vision
and Pattern Recognition, pages 1874–1883, 2016. 2

[29] Ying Tai, Jian Yang, and Xiaoming Liu.

Image super-
resolution via deep recursive residual network. In Proceed-
ings of the IEEE Conference on Computer Vision and Pattern
Recognition, 2017. 1, 2

[30] Xin Tao, Hongyun Gao, Renjie Liao, Jue Wang, and Jiaya
Jia. Detail-revealing deep video super-resolution.
In Pro-
ceedings of the IEEE International Conference on Computer
Vision, Venice, Italy, pages 22–29, 2017. 1, 2, 3, 4, 6, 7, 8

[31] Radu Timofte, Shuhang Gu, Jiqing Wu, Luc Van Gool,
Lei Zhang, Ming-Hsuan Yang, Muhammad Haris, Greg
Shakhnarovich, Norimichi Ukita, et al. Ntire 2018 chal-
lenge on single image super-resolution: Methods and re-
sults.
In Computer Vision and Pattern Recognition Work-
shops (CVPRW), 2018 IEEE Conference on, 2018. 2

[32] Subhashini Venugopalan, Huijuan Xu, Jeff Donahue, Mar-
cus Rohrbach, Raymond Mooney, and Kate Saenko. Trans-
lating videos to natural language using deep recurrent neural
networks. arXiv preprint arXiv:1412.4729, 2014. 2

[33] SHI Xingjian, Zhourong Chen, Hao Wang, Dit-Yan Yeung,
Wai-Kin Wong, and Wang-chun Woo. Convolutional lstm
network: A machine learning approach for precipitation
nowcasting. In Advances in neural information processing
systems, pages 802–810, 2015. 3, 5

[34] Tianfan Xue, Baian Chen, Jiajun Wu, Donglai Wei, and
William T Freeman. Video enhancement with task-oriented
ﬂow. arXiv preprint arXiv:1711.09078, 2017. 2, 4, 6, 7, 8

[35] Haonan Yu, Jiang Wang, Zhiheng Huang, Yi Yang, and Wei
Xu. Video paragraph captioning using hierarchical recurrent
neural networks. In Proceedings of the IEEE conference on
computer vision and pattern recognition, pages 4584–4593,
2016. 2

3906

