SoDeep: a Sorting Deep net to learn ranking loss surrogates

Martin Engilberge1,2, Louis Chevallier2, Patrick P´erez3, Matthieu Cord1,3

1Sorbonne Universit´e, Paris, France, 2Technicolor, Cesson S´evign´e, France, 3Valeo.ai, Paris, France

{martin.engilberge, matthieu.cord}@lip6.fr patrick.perez@valeo.com louis.chevallier@technicolor.com

Abstract

Several tasks in machine learning are evaluated us-
ing non-differentiable metrics such as mean average pre-
cision or Spearman correlation. However,
their non-
differentiability prevents from using them as objective func-
tions in a learning framework. Surrogate and relaxation
methods exist but tend to be speciﬁc to a given metric.

In the present work, we introduce a new method to learn
approximations of such non-differentiable objective func-
tions. Our approach is based on a deep architecture that
approximates the sorting of arbitrary sets of scores. It is
trained virtually for free using synthetic data. This sorting
deep (SoDeep) net can then be combined in a plug-and-play
manner with existing deep architectures. We demonstrate
the interest of our approach in three different tasks that
require ranking: Cross-modal text-image retrieval, multi-
label image classiﬁcation and visual memorability ranking.
Our approach yields very competitive results on these three
tasks, which validates the merit and the ﬂexibility of SoDeep
as a proxy for sorting operation in ranking-based losses.

1. Introduction

Deep learning approaches have gained enormous re-
search interest for many Computer Vision tasks in the recent
years. Deep convolutional networks are now commonly
used to learn state-of-the-art models for visual recognition,
including image classiﬁcation [26, 18, 35] and visual se-
mantic embedding [25, 22, 37]. One of the strengths of
these deep approaches is the ability to train them in an end-
to-end manner removing the need for handcrafted features
[29]. In such a paradigm, the network starts with the raw
inputs, and handles feature extraction (low level and high-
level features) and prediction internally. The main require-
ment is to deﬁne a trainable scheme. For deep architec-
tures, stochastic gradient descent with back-propagation is
usually performed to minimize an objective function. This
loss function depends on the target task but has to be at least

Figure 1: Overview of SoDeep, the proposed end-to-
end trainable deep architecture to approximate non-
differentiable ranking metrics. A pre-trained differen-
tiable sorter (deep neural net [DNN] ΘB) is used to con-
vert into ranks the raw scores given by the model (DNN
ΘA) being trained to a collection of inputs. A loss is then
applied to the predicted rank and the error can be back-
propagated through the differentiable sorter and used to up-
date the weights ΘA.

differentiable.

Machine learning tasks are often evaluated and com-
pared using metrics which differ from the objective func-
tion used during training. The choice of an evaluation met-
ric is intimately related to the deﬁnition of the task at hand,
even sometimes to the benchmark itself. For example, ac-
curacy seems to be the natural choice to evaluate classiﬁca-
tion methods, whereas the choice of the objective function
is also inﬂuenced by the mathematical properties that allow
a proper optimization of the model. For classiﬁcation, one
would typically choose the cross entropy loss – a differen-
tiable function – over the non-differentiable accuracy. Ide-
ally, the objective function used during training would be
identical to the evaluation metric. However, standard evalu-
ation metrics are often not suitable as training objectives for
lack of differentiability to start with. This results in the use
of surrogate loss functions that are better behaved (smooth,
possibly convex). Unfortunately, coming up with good sur-
rogate functions is not an easy task.

110792

In this paper, we focus on the non-differentiability of the
evaluation metrics used in ranking-based tasks such as re-
call, mean average precision and Spearman correlation. De-
parting from prior art on building surrogates losses for such
tasks, we adopt a simple, yet effective, learning approach:
Our main idea is to approximate the non-differentiable part
of such ranking-based metrics by an all-purpose learnable
deep neural network. In effect, this architecture is designed
and trained to mimic sorting operations. We call it SoDeep.
SoDeep can be added in a plug-and-play manner on top of
any deep network trained for tasks whose ﬁnal evaluation
metric is rank-based, hence not differentiable. The resulting
combined architecture is end-to-end learnable with a loss
that relates closely to the ﬁnal metric.

Our contributions are as follows:

• We propose a deep neural net that acts as a differentiable
proxy for ranking, allowing one to rewrite different eval-
uation metrics as functions of this sorter, hence making
them differentiable and suitable as training loss.

• We explore two types of architectures for this trainable

sorting function: convolutional and recurrent.

• We combine the proposed differentiable sorting module
with standard deep CNNs, train them end-to-end on three
challenging tasks, and demonstrate the merit of this novel
approach through extensive evaluations of the resulting
models.

The rest of the paper is organized as follows. We discuss in
Section 2 the related works on direct and indirect optimiza-
tion of ranking-based metrics, and position our work ac-
cordingly. Section 3 is dedicated to the presentation of our
approach. We show in particular how a “universal” sorting
proxy sufﬁces to tackle standard rank-based metrics, and
present different architectures to this end. More details on
the system and its training are reported in Section 4, along
with various experiments. We ﬁrst establish new state-of-
the-art performance on cross-modal retrieval, then we show
the beneﬁts of our learned loss function compared to stan-
dard methods on memorability prediction and multi-label
image classiﬁcation.

2. Related works

Many data processing systems rely on sorting opera-
tions at some stage of their pipeline. It is the case also in
machine learning, where handling such non-differentiable,
non-local operations can be a real challenge [32]. For ex-
ample, retrieval systems require to rank a set of database
items according to their relevance to a query. For sake of
training, simple loss functions that are decomposable over
each training sample have been proposed as for instance
in [19] for the area under the ROC curve. Recently, some
more complex non-decomposable losses (such as the Aver-
age Precision (AP), Spearman coefﬁcient, and normalized

discounted cumulative gain (nDCG) [3]) that present hard
computational challenges have been proposed [31].

Mean average precision optimization Our work shares
the high level goal of using ranking metrics as training ob-
jective function with many works before us. Several works
studied the problem of optimizing average precision with
support vector machines [21, 40] and other works extended
these approaches to neural networks [1, 31, 8]. To learn
rank, the seminal work [21] relies on a structured hinge up-
per bound to the loss. Further works reduce the computa-
tional complexity [31] or rely on asymptotic methods [36].
The focus of these works is mainly on the relaxation of the
mean average precision, while our focus is on learning a
surrogate for the ranking operation itself such that it can
be combined with multiple ranking metrics. In contrast to
most ranking-based techniques, which have to face the high
computational complexity of the loss augmented inference
[21, 36, 31], we propose a fast, generic, deep sorting ar-
chitecture that can be used in gradient-based training for
rank-based tasks.

Application of ranking based metrics Ranking is com-
monly used in evaluation metrics. On retrieval tasks such
as cross-modal retrieval [25, 22, 15, 12, 30], recall is the
Image classiﬁcation [11, 9] and ob-
standard evaluation.
ject recognition are evaluated with mean average precision
in the multi-label case. Ordinal regression [5] is evaluated
using Spearman correlation.

Existing surrogate functions Multiple surrogates for
ranking exist. Using metric learning to do retrieval is one
of them. This popular approach avoids the use of the rank-
ing function altogether. Instead, pairwise [39], triplet-wise
[38, 4] and list-wise [13, 2] losses are used to optimize dis-
tances in a latent space. The cross-entropy loss is typically
used for multi-label and multi-class classiﬁcation tasks.

3. SoDeep approach

Rank-based metrics such as recall, Spearman correlation
and mean average precision can be expressed as a function
of the rank of the output scores. The computation of the
rank being the only non-differentiable part of these metrics,
we propose to learn a surrogate network that approximates
directly this sorting operation.

3.1. Learning a sorting proxy

Let y ∈ Rd be a vector of d real values and rk the rank-
ing function so that rk(y) ∈ {1 · · · d}d is the vector con-
taining the rank for each variable in y, i.e. rk(y)i is the
rank of yi among the yj ’s. We want to design a deep archi-
tecture fΘB that is able to mimic this sorting operator. The
training procedure of this DNN is summarized in Fig. 2.
The aim is to learn its parameters, ΘB, so that the output of

10793

the network is as close as possible to the output of the exact
sorting.

Before discussing possible architectures, let’s consider
the training of this network, independent of its future use.
We ﬁrst generate a training set by randomly sampling N
input vectors y(n) and we compute through exact sorting
the associated ground-truth rank vectors r(n) = rk(y(n)).
We then classically learn the DNN fΘB by minimizing a L1
loss between the predicted ranking vector ˆr = fΘB (y) and
the ground-truth rank r over the training set:

of the network contains as many channels as the length of
the input sequence. Convolutions are used for their local
property: indeed, sorting algorithms such as bubble sort
[14] only rely on a sequence of local operations. The in-
tuition is that a deep enough convolutional network, with
its cascaded local operations, should be able to mimic re-
cursive sorting algorithms and thus to provide an efﬁcient
approximation of ranks.

We will further discuss the interest of both types of SoDeep
block architectures in the experiments.

N

min
ΘB

Xn=1(cid:13)(cid:13)(cid:13)

rk(y(n)) − fΘB (y(n))(cid:13)(cid:13)(cid:13)1

We explore in the following different network architectures
and we explain how the training data is generated.

.

(1)

3.1.2 Training data

SoDeep module can be easily (pre)trained with supervision
on synthetic data. Indeed, while being non-differentiable,
the ranking function rk can be computed with classic sort-
ing algorithms. The training data consists of vectors of ran-
domly generated scalars, associated with their ground-truth
rank vectors. In our experiments, the numbers are sampled
from different types of distributions:

• Uniform distribution over [−1, 1];

• Normal distribution with µ = 0 and σ = 1;

• Sequence of evenly spaced numbers in a uniformly drawn

random sub-range of [−1, 1];

• Random mixtures of the previous distributions.

While the differentiable sorter can be trained ahead of
time on a variety of input distributions, as explained above,
there might be a shift with the actual score distribution that
the main network fΘA will output for the task at hand. This
shift can reduce naturally during training, or an alignment
can be explicitly enforced. For example, fΘA can be de-
signed to output data in the interval used to learn the sorter,
with the help of bounded functions such as cosine similarity.

3.2. Using SoDeep for training with rank based loss

Rank-based metrics are used for evaluating and compar-
ing learned models in a number of tasks. Recall is a stan-
dard metric for image and information retrieval, mean Av-
erage Prediction (mAP) for classiﬁcation and recognition,
and Spearman correlation for ordinal prediction. This type
of rank-based metrics are non-differentiable because they
require to transition from the continuous domain (score) to-
ward the discrete domain (rank).

As presented in Fig 1, we propose to insert a pre-trained
SoDeep proxy block fΘB between the deep scoring func-
tion fΘA and the chosen rank-based loss. We show in the
following how mAP, Spearman correlation and recall can
be expressed as functions of the rank and combined with
SoDeep accordingly.

In the following we assume a training set of annotated
i=1 for the task at hand. A group B of

pairs {(xi, y∗

i )}M

10794

Figure 2: Training a differentiable sorter. Given a score
vector y we learn the parameters ΘB of a DNN such that
its output ˆr approximates the true rank vector rk(y). The
model is trained using gradient descent and an L1 loss.
Once trained, fΘB can be used as a differentiable surrogate
of the ranking function.

3.1.1 Sorter architectures

We investigate two types of architectures for our differen-
tiable sorter fΘB . One is a recurrent network and the other
one a convolutional network, each capturing interesting as-
pects of standard sorting algorithms:

• The recurrent architecture in Fig. 3a consists of a bi-
directional LSTM [34] followed by a linear projection.
The bi-directional recurrent network creates a connection
between the output of the network and every input, which
is critical for ranking computation. Knowledge about the
whole sequence is needed to compute the true rank of any
element.

• The convolutional architecture in Fig. 3b consists of 8
convolutional blocks, each of these blocks being a one-
dimensional convolution followed by a batch normaliza-
tion layer [20] and a ReLU activation function. The sizes
of the convolutional ﬁlters are chosen such that the output

(a) Architecture of LSTM sorter.

(b) Architecture of CNN sorter.

Figure 3: SoDeep architecture. The sorter takes a vector of raw score y ∈ Rd as input and outputs a vector ˆr ∈ Rd. Two
architectures are explored, one recurrent (a), the other one, convolutional (b). Both architectures present a last afﬁne layer to
get a ﬁnal projection to a vector ˆr in Rd. Note that even if it is not explicitly enforced, ˆr will try to mimic as close as possible
the vector of the ranks of the y variables.

d training examples among them yields a prediction vec-
tor y(ΘA) = [fΘA (xi)]i∈B and an associated ground-truth
score vector y∗ = [y∗

i ]i∈B (Fig. 1).

of the datasets. For class c, denoting y∗
c the d-dimensional
ground-truth binary vector and yc the vector of scores for
this class, the average precision (AP) for the class is deﬁned
as [40] :

3.2.1 Spearman correlation

For two vectors y and y′ of size d, corresponding to two sets
of d observations, the Spearman correlation [7] is deﬁned
as:

rs = 1 −

6krk(y) − rk(y′)k2
2

d(d2 − 1)

.

(2)

Maximizing w.r.t. parameters ΘA the sum of Spearman
correlations (2) between ground truth and predicted score
vectors over N subsets of training examples amounts to
solving the minimization problem:

N

min
ΘA

Xn=1(cid:13)(cid:13)(cid:13)

rk(y(n)) − rk(y∗(n))(cid:13)(cid:13)(cid:13)

with the loss not being differentiable.

2

2

,

(3)

Using now our differentiable proxy instead of the rank
function, we can deﬁne the new Spearman loss for a group
B:

N

LSP R(ΘA, B) =

Xn=1(cid:13)(cid:13)(cid:13)

fΘB (y(ΘA)(n)) − rk(y∗(n))(cid:13)(cid:13)(cid:13)

(4)
Training will typically minimize it over a large set of
groups. Note that here the optimization is done over ΘA,
knowing that SoDepp block fΘB has been trained indepen-
dently on speciﬁc synthetic training data. Optionally, the
block can be ﬁne-tuned along the way, hence minimizing
w.r.t. ΘB as well.

3.2.2 Mean Average Precision (mAP)

AP (yc, y∗

c ) =

1

rel Xj:y∗

c (j)=1

P rec(j),

(5)

where rel = |j : y∗
for class c and precision for element j is deﬁned as:

c (j) = 1| is the number of positive items

P rec(j) =

|{s ∈ S : y∗

c (s) = 1}|

rk(yc)j

,

(6)

with S the set of indices of the elements of yc larger than
yc(j).

Minimizing rk(y)j for all j from class c (i.e., those ver-
c (j) = 1) will be used as a surrogate of the maxi-

ifying y∗
mization of the AP over predictor’s parameters ΘA.

The mAP is obtained by averaging AP over the C
classes. Replacing the rank function by its differentiable
proxy, the proposed mAP-based loss reads:

LmAP (ΘA, B) =

hfΘB (yc), y∗

c i.

(7)

C

Xc=1

Recall at rank k is often used to evaluate retrieval tasks. In
the following we assume a training set {xi}M
i=1 for the task
at hand. A group B of d training examples among them
yields a d × d prediction matrix Y(ΘA) = [fΘA (xi)]i∈B
representing the scores of all pairwise combinations of
In other words, the i-th column
training examples in B.
of this matrix, Y[i] = fΘA (xi), provides the relevance of
other vectors in the group w.r.t. to query xi.

This matrix being given, recall at K is deﬁned as:

2

2

.

3.2.3 Recall at K

Multilabel image classiﬁcation is often evaluated using
mAP, a metric from information retrieval. To deﬁne it, each
of the C classes is considered as a query over the d elements

R@K(Y) =

1
d

10795

d

Xi=1(1,

0,

if rk(Y[i])p < K
otherwise,

(8)

with p the index of the unique positive entry in Y[i], a single
relevant item being assumed for query xi.

Once again, our sorter enables a differentiable imple-
mentation of this measure. However, we could not obtain
conclusive results yet, possibly due to the batch size lim-
iting the range of the summation. We found, however, an
alternative way to leverage our sorting network. It is based
on the use of the “triplet loss”, a popular surrogate for re-
call. We propose to apply this loss on ranks instead of sim-
ilarity scores, making it only dependent on the ordering of
the retrieved elements. The triplet loss on the rank can be
expressed as follows:

loss(Y[i], p, c) = max(cid:8)0, α+fΘB (Y[i])p−fΘB (Y[i])c(cid:9),

(9)
where p is deﬁned as above (the positive example in the
triplet, given anchor query xi) and c is the index of a nega-
tive (irrelevant) example for this query. The goal is to mini-
mize the rank of the positive pair with score Y[i]p such that
its rank is lower than the rank of the negative pair with score
Y[i]c by a margin of α.

The complete loss is then expressed over all the elements

of B in its hard negative version as:

LREC(ΘA, B) =

1

dXi∈B

max

c6=p,c6=i

loss(Y[i], p, c).

(10)

In equations (2), (5) and (8), the metrics are expressed in
function of the non-differentiable rank function rk. Lever-
aging our differentiable surrogate allows us to design a dif-
ferentiable loss function for each of these metrics, respec-
tively (4), (7) and (10).

4. Experiments

We present in this section several experiments to evaluate
our approach. We ﬁrst detail the way we train our differen-
tiable sorter deep block using only synthetic data. We also
present a comparison between the different models based
on CNNs and on LSTM recurrent nets and with our baseline
inspired from pairwise comparisons. We then evaluate the
SoDeep combined with deep scoring functions fΘB . The
loss functions expressed in (4), (7) and (10) are applied to
three different tasks: memorability prediction, cross-modal
retrieval, and object recognition.

4.1. SoDeep Training and Analysis

4.1.1 Training

Sorter model
Handcrafted sorter
CNN sorter
LSTM sorter loss

L1 loss
0.0350
0.0120
0.0033

Table 1: Performance of the sorters on synthetic data.
Ranking performance of the sorter on the synthetic dataset.
Among the learned sorters the LSTM one is the most efﬁ-
cient.

[24] with a learning rate of 0.001 which is halved every 100
epochs. Mini-batches of size 512 are used. The model is
trained until the loss values stop decreasing and are stable.

4.1.2 A handcrafted sorting baseline

We add to our trainable SoDeep blocks a baseline that does
not require any training.

Inspired by the representation of the ranking problem as
a matrix of pairwise ordering in [40], we build a handcrafted
differentiable sorter fh using pairwise comparisons.

A sigmoid function parametrized with λ scalar is used as
a binary comparison function between two scalars a and b
as:

σcomp(a, b) =

.

(11)

1

1 + e−λ(b−a)

Indeed, if a and b are separated by a sufﬁcient margin,
σcomp(a, b) will be either 0 or 1. The parameter λ is used
to control the precision of the comparator.

This function may be used to approximate the rela-
tive rank of two components yi and yj in a vector y:
σcomp(yi, yj) will be close to 1 if yi is (signiﬁcantly)
smaller than yj , 0 otherwise. By summing up the result of
the comparison between yi and all the other elements of the
vector y, we form our ranking function fh. More precisely,
the rank fh(y, i) for the i-est element of y is expressed as
follow:

fh(y, i) = Xj:j6=i

σcomp(yi, yj).

(12)

The overall precision of the handcrafted sorter can be
controlled by the hyper parameter λ. The value of lambda
is a trade off between the precision of the predicted rank and
the efﬁciency when back-propagating through the sorter.
Further experiments will use λ = 10.

The proposed SoDeep models based on BI-LSTM and
CNNs are trained on synthetic pairs of scores and ranks
generated on the ﬂy according to the distributions deﬁned
in Section 3.1.2.

For convenience we call an epoch as going through 100
000 pairs. The training is done using the Adam optimizer

4.1.3 Results

Table 1 contains the loss values of the two different trained
sorters and the handcrafted one on a generated test set of 10
000 samples. The LSTM based sorter is the most efﬁcient,
outperforming the CNN and the handcrafted sorters.

10796

The performance of the CNN sorter slightly below the
LSTM-based one can be explained by local behaviour of
the CNNs, requiring a more complex structure to be able to
rank elements.

In Figure 4 we compare CNN sorters with respect to their
number of layers. From these results, we choose to use 8
layers in our CNN sorter since the performance seems to
saturate once this depth has been reached. A possible ex-
planation of this saturation is that the relation between the
depth of the network and the input dimension (d = 100
here) is logarithmic.

Figure 4: Performance of the CNN sorter with respect
to the depth of the CNN. Value of the cost function during
the training of multiple CNN sorters with a number of layers
varying from 2 to 10. The model performances saturate for
models with 8 layers or more.

4.1.4 Further analysis

The ranking function being non-continuous
is non-
differentiable, the rank value is jumping from one discrete
value to another. We design an experiment to visualize how
the different types of sorter behave at these discontinuities.
Starting from a uniformly sampled vector y′ ∈ R100 of raw
scores in the range [−1, 1], we compute the ground truth
rank rk(y′)1 and the predicted rank fΘB (y′)1 of the ﬁrst
element y′
1 from -1 to 1 in
increments of 0.001. The plot of the predicted ranks can be
found in Fig. 5. The blue curve corresponds to the ground-
truth rank where non-continuous steps are visible, whereas
the curves for the learned sorters (orange and green) are a
smooth approximation of the ground-truth curve.

1 while varying this element y′

In Fig. 6 we compare our SoDeep against previous ap-
proaches optimizing structured hinge upper bound to the
mAP loss. We followed the protocol described in [36] for
their synthetic data experiments. Our sorters using the loss

Figure 5: Sorter behaviour analysis. Given a synthetic
vector y′ of raw scores in the range [−1, 1] of size 100 we
plot the rank of its ﬁrst element y′
1 when the said value is
linearly interpolated between -1 and 1. The x-axis represent
the value y′

1, and the y-axis is it corresponding rank.

LmAP deﬁned in (7) are compared to a re-implementation
of the Hinge-AP loss proposed in [21]. The results in Fig. 6
show that our approach with the LSTM sorter (blue curve)
gets mAP scores similar to [21] (purple curve) while being
generic and less complex.

Figure 6: Synthetic experiment on mAP optimization.
Comparison against the proposed sorter and the previous
approaches.

From the learned sorters, the LSTM architecture is the one
performing best on synthetic data (Tab. 1). In addition, its
simple design and small number of hyper-parameters make
it straightforward to train. The CNN architecture while not
being as efﬁcient, uses a smaller number of weights and
is 1.7 time faster. Further experiments will use the LSTM
sorter unless speciﬁed otherwise.

10797

4.2. Differentiable Sorter based loss functions

Our method is benchmarked on three tasks. Each one of
these tasks focuses on a different rank based loss function.
Cross-modal retrieval will be used to test recall evaluation
metrics, memorability prediction will be used for Spearman
correlation and image classiﬁcation will be used for mean
average precision.

As explained in Section 3.1.2, a shift in distribution
might appear when using sorter-based loss. To prevent this,
a parallel loss can be used to help domain alignment. This
loss can be used only to stabilize the initialization or kept
for the whole training.

4.2.1 Spearman Correlation: Predicting Media Mem-

orability

The media memorability prediction task [5] is used to test
the differentiable sorter with respect to the Spearman cor-
relation metrics. Examples of elements of the dataset can
be found in Fig. 7. Given a 7 seconds video the task con-
sists in predicting the short term memorability score. The
memorability score reﬂects the probability of a video being
remembered.

Figure 7: Media memorability dataset. Frames with
low and high memorability scores coming from 4 different
videos of the memorability dataset [5]. The memorability
scores are overlayed on top of the images.

The task is originally on video memorability. However
the model used here are pretrained on images, therefore 7
frames are extracted from each video and are associated
with the memorability score of the source video. The train-
ing is done on pairs of frame and memorability score. Dur-
ing testing the predicted score of the 7 frames of a video are
averaged to obtain the score per video. The dataset contains
8000 videos (56000 frames) for training and 2000 videos
for testing. This training set is completed using LaMem
dataset [23] adding 60 000 (image, memorability) pairs to
the training data.

Single model
Baseline [6]
Image only [17]
R34 + MSE loss
R34 + SoDeep loss
Sem-Emb + MSE loss
Sem-Emb + SoDeep loss

Spear. cor. test

46.0
48.8
44.2
46.6
48.6
49.4

Table 2: Media Memorability prediction results. Our
proposed loss function and architecture outperform the
state-of-the-art system [17] by 0.6 pt.

Architectures and training The regression model con-
sists of a feature extractor combined with a two layers MLP
[33] regressing features to a single memorability score. We
use two pretrained nets to extract features: the Resnet-34
[18] and the semantic embedding model of [10] (as in the
next section).

We use the loss LSP R deﬁned in (4) to learn the memo-
rability model. The training is done in two steps. First, for
15 epochs only the MLP layers are trained while the weights
of the feature extractor are kept frozen. Second, the whole
model is ﬁnetuned. The Adam optimizer [24] is used with
a learning rate of 0.001 which is halved every 3 epochs. To
help with domain adaptation, our loss is combined with an
L1 loss for the ﬁrst epoch.

Results
In Tab. 2, we compare the impact of the learned
loss over two architectures. For both models we deﬁned a
baseline using a L2 loss. On both architectures the proposed
loss function achieves higher Spearman correlation by 2.4
points on the Resnet model and 0.8 points on the semantic
embedding model. These are state of the arts result on the
task with an absolute gain of 0.6 pt. The model is almost
on par (-0.3 pt) with an ensemble method proposed by [17]
that is using additional textual data.

Sorter comparison The memorability prediction is also
used to compare the different types of sorters presented so
far. Fixing the model and the hyper parameters, 4 models
are trained with 4 different types of loss. The losses based
on the LSTM sorter, the CNN sorter and the handcrafted
sorter obtained respectively a Spearman correlation of 49.4,
46.6, 45.7, and the L1 loss gives a correlation of 46.2. These
results are consistent with the result on synthetic data, with
the LSTM sorter performing the best, followed by the CNN
and handcrafted ones.

4.2.2 Mean Average precision: Image classiﬁcation

The VOC 2007 [11] object recognition challenge is used to
evaluate our sorter on a task using the mean average preci-
sion metric. We use an off-the-shelf model [9]. This model

10798

caption retrieval

image retrieval

model
Emb. network [37]
DSVE-Loc [10]
GXN (i2t+t2i) [16]
DSVE-Loc + SoDeep loss

84.0
91.9

R@1 R@5 R@10 Med. r
54.9
69.8
68.5
71.5

92.2
96.6
97.9
97.1

-
1
1
1

92.8

-

76.4
86.9

R@1 R@5 R@10 Med. r
43.3
55.9
56.6
56.2

87.5
94.0
94.5
94.3

-
1
1
1

87.0

-

Table 3: Cross-modal retrieval results on MS-COCO. Using the proposed rank based loss function outperforms the hard
negative triplet margin loss, achieving state-of-the-art results on the caption retrieval task.

Loss
VGG 16 [35]
WILDCAT [9]
WILDCAT*
WILDCAT* + SoDeep loss

mAP
89.3
95.0
93.2
94.0

Table 4: Object recognition results. Model marked by
(*) are obtained with code available online: https://
github.com/durandtibo/wildcat.pytorch

is a fully convolutional network, combining a Resnet-101
[18] with advanced spatial aggregation mechanisms.

To evaluate the loss LmAP deﬁned in (7) two versions
of the model are trained: A baseline using only multi-label
soft margin loss, and another model trained using the multi-
label soft margin loss combined with LmAP .

Rows 3 and 4 of Tab. 4 show the results obtained by the
two previously described models. Both models are below
the state-of-the-art, however the use of the rank loss is ben-
eﬁcial and improves the mAP by 0.8 pt compared to the
model using only the soft margin loss.

4.2.3 Recall@K: Cross-modal Retrieval

The last benchmark used to evaluate the differentiable sorter
is the cross-modal retrieval. Starting from images annotated
with text, we train a model producing rich features for both
image and text that live in the same embedding space. Sim-
ilarity in the embedding space is then used to evaluate the
quality of the model on the cross-modal retrieval task.

Our approach is evaluated on the MS-COCO dataset [28]
using the rVal split proposed in [22]. The dataset contains
110k images for training, 5k for validation and 5k for test-
ing. Each image is annotated with 5 captions.

Given a query image (resp. a caption), the aim is to
image). Since
retrieve the corresponding captions (resp.
recall at r
MS-COCO contains 5 captions per image,
(“R@r”) for caption retrieval is computed based on whether
at least one of the correct captions is among the ﬁrst r re-
trieved ones. The task is performed 5 times on 1000-image
subsets of the test set and the results are averaged.

We use an off-the-shelf model [10].

It is a two-paths
multimodal embedding approach that leverages the latest
neural network architecture. The visual pipeline is based
on a Resnet-152 and is fully convolutional. The textual
pipeline is trained from scratch and uses a Simple Recur-
rent Unit (SRU) [27] to encode sentences. The model is
trained using the loss LREC deﬁned in (10) instead of the
triplet based loss.

Cross-modal retrieval results can be found in Tab. 3. The
model trained using the proposed loss function (DSVE-
Loc + SoDeep loss) outperforms the similar architecture
DSVE-Loc trained with the triplet margin based loss by
(1.7%,0.9%,0.5%) on (R@1,R@5,R@10) in absolute for
caption retrieval, and by (0.3%,0.1%,0.3%) for image re-
trieval.
It obtains state-of-the-art performance on caption
retrieval and is very competitive on image retrieval being
almost on par with the GXN [16] model, which has a much
more complex architecture. It is important to note that the
loss function proposed could be beneﬁcial for any type of
architecture.

5. Conclusion

We have presented SoDeep, a novel method that lever-
ages the expressivity of recent architectures to learn differ-
entiable surrogate functions. Based on a direct deep net-
work modeling of the sorting operation, such a surrogate
allows us to train, in an end-to-end manner, models on a
diversity of tasks that are traditionally evaluated with rank-
based metrics. Remarkably, this deep proxy to estimate the
rank comes at virtually no cost since it is easily trained on
purely synthetic data.

Our experiments show that

the proposed approach
achieves very good performance on cross-modal retrieval
tasks as well as on media memorability prediction and
multi-label image classiﬁcation. These experiments demon-
strate the potential and the versatility of SoDeep. This ap-
proach allows the design of training losses that are closer
than before to metrics of interest, which opens up a wide
range of other applications in the future.

10799

References

[1] Chris Burges, Tal Shaked, Erin Renshaw, Ari Lazier, Matt
Deeds, Nicole Hamilton, and Greg Hullender. Learning to
rank using gradient descent. In ICML, 2005. 2

[2] Zhe Cao, Tao Qin, Tie-Yan Liu, Ming-Feng Tsai, and Hang
Li. Learning to rank: From pairwise approach to listwise
approach. In ICML, 2007. 2

[3] Soumen Chakrabarti, Rajiv Khanna, Uma Sawant, and Chiru
Bhattacharyya. Structured learning for non-smooth ranking
losses. In ACM SIGKDD, 2008. 2

[4] Gal Chechik, Varun Sharma, Uri Shalit, and Samy Bengio.
Large scale online learning of image similarity through rank-
ing. J. Machine Learning Research, 11:1109–1135, 2010. 2
[5] Romain Cohendet, Claire-H´el`ene Demarty, Ngoc Duong,
Mats Sj¨oberg, Bogdan Ionescu, and Thanh-Toan Do. Me-
diaeval 2018: Predicting media memorability task. arXiv
preprint arXiv:1807.01052, 2018. 2, 7

[6] Romain Cohendet, Claire-H´el`ene Demarty, and Ngoc Q. K.
Duong. Transfer learning for video memorability prediction.
In MediaEval Workshop, 2018. 7

[7] Yadolah Dodge.

The concise encyclopedia of statistics.

Springer Science & Business Media, 2008. 4

[8] Abhimanyu Dubey, Nikhil Naik, Devi Parikh, Ramesh
Raskar, and C´esar A Hidalgo. Deep learning the city: Quan-
tifying urban perception at a global scale. In ECCV, 2016.
2

[9] Thibaut Durand, Taylor Mordan, Nicolas Thome, and
Matthieu Cord. Wildcat: Weakly supervised learning of deep
convnets for image classiﬁcation, pointwise localization and
segmentation. In CVPR, 2017. 2, 7, 8

[10] Martin Engilberge, Louis Chevallier, Patrick P´erez, and
Matthieu Cord. Finding beans in burgers: Deep semantic-
visual embedding with localization. In CVPR, 2018. 7, 8

[11] Mark Everingham and J Winn. The PASCAL visual object
classes challenge 2007 development kit. Technical report,
2007. 2, 7

[12] Fartash Faghri, David Fleet, Jamie Ryan Kiros, and Sanja Fi-
dler. VSE++: Improved visual-semantic embeddings. arXiv
preprint arXiv:1707.05612, 2017. 2

[13] Basura Fernando, Efstratios Gavves, Damien Muselet, and
Tinne Tuytelaars. Learning to rank based on subsequences.
In ICCV, 2015. 2

[14] Edward H Friend. Sorting on electronic computer systems.

JACM, 1956. 3

[15] Andrea Frome, Greg Corrado, Jon Shlens, Samy Bengio, Jeff
Dean, and Tomas Mikolov. DeViSE: A deep visual-semantic
embedding model. In NIPS, 2013. 2

[16] Jiuxiang Gu, Jianfei Cai, Shaﬁq Joty, Li Niu, and Gang
Wang. Look, imagine and match: Improving textual-visual
cross-modal retrieval with generative models.
In CVPR,
2018. 8

[17] Rohit Gupta and Kush Motwani. Linear models for video
memorability prediction using visual and semantic features.
In MediaEval Workshop, 2018. 7

[19] Alan Herschtal and Bhavani Raskutti. Optimising area under

the roc curve using gradient descent. In ICML, 2004. 2

[20] Sergey Ioffe and Christian Szegedy. Batch normalization:
Accelerating deep network training by reducing internal co-
variate shift. arXiv preprint arXiv:1502.03167, 2015. 3

[21] Thorsten Joachims. Optimizing search engines using click-

through data. In ACM SIGKDD, 2002. 2, 6

[22] Andrej Karpathy and Li Fei-Fei. Deep visual-semantic align-
ments for generating image descriptions. In CVPR, 2015. 1,
2, 8

[23] Aditya Khosla, Akhil S. Raju, Antonio Torralba, and Aude
Oliva. Understanding and predicting image memorability at
a large scale. In ICCV, 2015. 7

[24] D Kinga and J Ba Adam. A method for stochastic optimiza-

tion. In ICLR, 2015. 5, 7

[25] Ryan Kiros, Ruslan Salakhutdinov, and Richard Zemel. Uni-
fying visual-semantic embeddings with multimodal neural
language models. arXiv preprint arXiv:1411.2539, 2014. 1,
2

[26] Alex Krizhevsky, Ilya Sutskever, and Geoffrey E Hinton.
Imagenet classiﬁcation with deep convolutional neural net-
works. In NIPS, 2012. 1

[27] Tao Lei and Yu Zhang. Training RNNs as fast as CNNs.

arXiv preprint arXiv:1709.02755, 2017. 8

[28] Tsung-Yi Lin, Michael Maire, Serge Belongie, James Hays,
Pietro Perona, Deva Ramanan, Piotr Doll´ar, and C Lawrence
Zitnick. Microsoft COCO: Common objects in context. In
ECCV, 2014. 8

[29] David Lowe. Object recognition from local scale-invariant

features. In ICCV, 1999. 1

[30] Lin Ma, Zhengdong Lu, Lifeng Shang, and Hang Li. Mul-
timodal convolutional neural networks for matching image
and sentence. In ICCV, 2015. 2

[31] Pritish Mohapatra, Michal Rolinek, CV Jawahar, Vladimir
Kolmogorov, and M Kumar. Efﬁcient optimization for rank-
based loss functions. In CVPR, 2018. 2

[32] Mehryrar Mohri, Afshin Rostamizadeh, and Ameet Tal-
walkar. Foundations of Machine Learning. MIT Press, 2012.
2

[33] Frank Rosenblatt. The perceptron: A probabilistic model for
information storage and organization in the brain. Psycho-
logical review, 1958. 7

[34] Mike Schuster and Kuldip K Paliwal. Bidirectional recurrent

neural networks. IEEE Trans. Signal Processing, 1997. 3

[35] Karen Simonyan and Andrew Zisserman. Very deep convo-
lutional networks for large-scale image recognition. arXiv
preprint arXiv:1409.1556, 2014. 1, 8

[36] Yang Song, Alexander Schwing, and Raquel Urtasun. Train-
In

ing deep neural networks via direct loss minimization.
ICML, 2016. 2, 6

[37] Liwei Wang, Yin Li, Jing Huang, and Svetlana Lazebnik.
Learning two-branch neural networks for image-text match-
ing tasks.
IEEE Trans. Pattern Recognition and Machine
Intell., 41(2):394–407, 2018. 1, 8

[18] Kaiming He, Xiangyu Zhang, Shaoqing Ren, and Jian Sun.
In CVPR,

Deep residual learning for image recognition.
2016. 1, 7, 8

[38] Kilian Q Weinberger and Lawrence K Saul. Distance metric
learning for large margin nearest neighbor classiﬁcation. J.
Machine Learning Research, 2009. 2

10800

[39] Eric P Xing, Michael I Jordan, Stuart J Russell, and An-
drew Y Ng. Distance metric learning with application to
clustering with side-information. In NIPS, 2003. 2

[40] Yisong Yue, Thomas Finley, Filip Radlinski, and Thorsten
Joachims. A support vector method for optimizing average
precision. In ACM SIGIR, 2007. 2, 4, 5

10801

