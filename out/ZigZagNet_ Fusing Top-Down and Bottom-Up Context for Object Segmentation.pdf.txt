ZigZagNet: Fusing Top-Down and Bottom-Up Context for Object Segmentation

Di Lin1

Dingguo Shen1

Siting Shen1

Daniel Cohen-Or1

Yuanfeng Ji1
Hui Huang1 ∗

Dani Lischinski2

1Shenzhen University

2The Hebrew University of Jerusalem

Abstract

Multi-scale context information has proven to be essen-
tial for object segmentation tasks. Recent works construct
the multi-scale context by aggregating convolutional feature
maps extracted by different levels of a deep neural network.
This is typically done by propagating and fusing features in
a one-directional, top-down and bottom-up, manner. In this
work, we introduce ZigZagNet, which aggregates a richer
multi-context feature map by using not only dense top-down
and bottom-up propagation, but also by introducing path-
ways crossing between different levels of the top-down and
the bottom-up hierarchies, in a zig-zag fashion. Further-
more, the context information is exchanged and aggregated
over multiple stages, where the fused feature maps from
one stage are fed into the next one, yielding a more com-
prehensive context for improved segmentation performance.
Our extensive evaluation on the public benchmarks demon-
strates that ZigZagNet surpasses the state-of-the-art accu-
racy for both semantic segmentation and instance segmen-
tation tasks.

1. Introduction

Object segmentation is a long standing challenging prob-
lem in computer vision. It encompasses a variety of tasks
including semantic and instance segmentation. Recent ad-
vanced segmentation methods have signiﬁcantly improved
the accuracy of object segmentation, leveraging the power
of deep convolutional neural networks (CNNs) to learn
from large-scale datasets.

One of the difﬁculties in localizing instances of objects
stems from the fact that objects in natural images may ap-
pear at a diversity of scales. Since CNNs [18, 38, 16, 40, 6]
consist of convolutional feature maps at various spatial reso-
lutions, recent object segmentation methods [25, 2, 10] have
used convolutional feature maps from different CNN levels
to represent content at different scales.

Different convolutional feature maps have correlated in-

∗Hui Huang is the corresponding author of this paper.

formation, forming a multi-scale context for object segmen-
tation. Thus, most recent approaches further utilize top-
down networks [35, 37, 21, 19, 31, 32, 22, 33, 30, 5] (see
Figure 1(a)), dense top-down networks [1, 42] (see Fig-
ure 1(b)) and successive top-down/bottom-up networks [29,
20, 24] (see Figure 1(c)) to communicate between different
levels. The motivation underlying such top-down/bottom-
up networks is to propagate multi-scale context across dif-
ferent scales, thereby augmenting the feature maps at dif-
ferent levels. State-of-the art methods [29, 22, 30, 24, 42],
however, propagate context information only along a single
direction.

In this paper, we advocate the idea of exchanging and
combining top-down and bottom-up context to enrich the
context information encoded by each feature map. In this
scheme, the top-down network propagates high-level large
scale semantic information down to shallow network lay-
ers, while the bottom-up network encodes the smaller scale
visual details into deeper network layers. Unlike one-
directional network architectures [29, 25, 2, 10, 37, 22, 33,
30, 24, 1, 42], our approach iteratively fuses feature maps
between the top-down and bottom-up networks, gradually
reﬁning the aggregated multi-scale context information.

More speciﬁcally, we introduce ZigZagNet, a new
scheme for fusing multi-scale context information, illus-
trated in Figure 1(d). The backbone network (left) extracts a
progression of convolutional feature maps for the top-down
network (middle), where each pair of feature maps is con-
nected with a top-down pathway. Here, each feature map
is sensitive to the context information of all higher-level
feature maps. The top-down network produces a new set
of feature maps, which are fed into the bottom-up network
(right). Similarly to the top-down pathways, the bottom-
up pathways enhance each feature map with all lower-level
feature maps. The feature maps produced by the top-down
and bottom-up networks are exchanged in a zig-zag fash-
ion, and fused to aggregate the context information from all
levels. The resulting feature maps are then used by a new
round of top-down and bottom-up context propagation. Fi-
nally, the fused feature maps at the last stage are used for
the segmentation task.

17490

Figure 1. Different approaches for propagating multi-scale context information. The top-down networks (a) and (b) use the deeper layers
to augment the shallower ones. The feature maps produced by the top-down network are further passed to the bottom-up network (c). In
contrast to (a)-(c), ZigZagNet (d) exchanges feature maps between the top-down and bottom-up networks to achieve a richer encoding of
multi-scale context. The orange blocks on the left represent the feature maps of backbone networks. The blue and green blocks represent
the feature maps produced at different stages. For conceptual illustration, we omit some overlapping pathways and only show a subset of
the dense pathways between feature maps in (d). Figure 2 depicts the ZigZagNet architecture in more detail.

In addition to exchanging information between the top-
down and the bottom-up networks, each of the two networks
employs a novel Region Context Encoding (RCE) scheme,
which captures context information of multi-scale subre-
gions of the feature maps. We subdivide each feature map
into regions, which propagate information to each other. By
using different subdivisions of the feature map to compute
contextual features, we achieve a richer encoding of the
context in multi-scale subregions. The encoded context is
propagated via dense pathways, modeling relationships be-
tween subregions of different feature maps.

Our ZigZagNet architecture is applicable to an array of
object segmentation tasks. We show its effectiveness by
evaluating it on the public benchmarks for semantic seg-
mentation (e.g., PASCAL Context dataset [28] and PAS-
CAL VOC 2012 dataset [9]) and also for instance segmen-
tation (e.g., COCO dataset [23]). We surpass state-of-the-
art performance on the PASCAL Context dataset [28] and
PASCAL VOC 2012 validation set [9]. On the PASCAL
VOC 2012 test set, our performance is competitive with
that reported by Chen et al. [5], who use a private JFT
dataset [17, 6, 39] to pre-train the backbone network. On
the challenging COCO dataset [23], our approach is applied
with different backbone networks and detectors, yielding
consistent improvement of the segmentation accuracy. We
compare our single model to the previous methods individu-
ally, and we achieve the state-of-the-art result on the COCO

test-dev set. Our code package and models will be publicly
available.

2. Related Work

The literature on image segmentation is vast [26, 3, 43,
21, 1, 42, 20, 22, 15, 24]. In the following, we will mainly
survey semantic segmentation [9, 28] and instance segmen-
tation [14, 23] techniques, which are closely related to our
work in the sense that they combine convolutional feature
maps from different levels in order to aggregate multi-scale
context information.

Semantic Segmentation Semantic segmentation meth-
ods aim to provide pixel-wise labels for objects. Fully con-
volutional networks (FCNs) [26] have been used for seman-
tic segmentation and achieved tremendous progress. Due
to the down-sampling operations, the convolutional feature
maps have progressively coarser resolutions. Thus, using
high-level feature maps [3, 43, 4] for semantic segmentation
inevitably loses spatial context of objects. To resolve this
problem, dilated convolution (also known as atrous convo-
lution) has been used to preserve the resolutions of feature
maps in more detail. However, atrous convolution produces
many high-resolution feature maps that require an overly
large budget of GPU memory. To save GPU memory and
improve the segmentation accuracy, the backbone FCN is

7491

(a) top-down network(b) dense top-down network(c) successive top-down and bottom-up networks(d) ZigZag networkfollowed by the top-down network [35, 21, 31, 32, 5] (a.k.a.,
the encoder-decoder network), which is used to propagate
the high-level semantic information and combine it with the
spatial details of low-level feature maps, yielding a high-
resolution feature map with multi-scale context informa-
tion. Rather than communicating only between adjacent
feature maps, dense pathways [1, 42] are used to propagate
top-down context between all pairs of feature maps. Still,
the high-level feature maps do not have any lower-level con-
text information to enrich their own expressive power.

Unlike the above semantic segmentation methods, we
use dense pathways in both top-down and bottom-up direc-
tions, affecting the feature maps with all levels of context
information. In the most recent work, Lin et al. [20] also ex-
changes top-down and bottom-up context; however, the fea-
ture trafﬁc takes place between adjacent feature maps only.
Thus, it requires multiple stages to propagate the context
beyond adjacent feature maps, which may decay important
information. In contrast, our dense pathways directly com-
municate all feature maps at each stage of context propaga-
tion, enabling a direct, effective augmentation of the feature
maps at all levels.

Our dense pathways employ region context encoding to
capture the context of subregions in different feature maps.
Instead of constructing the context of various subregion as a
global representation [27, 24], we compute context informa-
tion of multi-scale subregions by examining multiple subdi-
visions of each feature map. Note that our method is differ-
ent from the traditional spatial pyramid pooling [3, 43, 4],
which uses adjacent subregions to produce the context fea-
ture. We propagate information between all subregions,
providing more effective context for segmentation tasks.

Instance Segmentation In addition to pixel-wise labels,
instance segmentation further aims to differentiate individ-
ual objects. Similar to the encoder-decoder network used
for semantic segmentation, the top-down network [37, 19,
22, 33, 30] has been applied with the FCN backbone for in-
stance segmentation. Unlike semantic segmentation meth-
ods [26, 21, 31, 5, 1, 42, 20] that produce a high-resolution
feature map for predicting pixel-wise labels, instance seg-
mentation methods [37, 19, 22, 33, 30, 29, 24] use all levels
of feature maps to better capture object instances with dif-
ferent scales.
Recently,

successive top-down and bottom-up net-
works [29, 24] have been used to learn more powerful
feature maps at different levels. Speciﬁcally, the path-
aggregation network [24] appends a bottom-up network
following the top-down network, building a shortcut for
the information propagation between the top-most and the
bottom-most feature maps. The hourglass network [29] re-
peats top-down and bottom-up feature propagation to distill
multi-scale context information. Nonetheless, in this net-

work, at each iteration, the feature maps only receive infor-
mation of the highest-resolution feature map from the pre-
vious iteration, inevitably ignoring the context information
of lower-resolution feature maps. In our work, we fuse the
feature maps produced by the top-down and the bottom-up
networks at all levels, employing all of them in all itera-
tions. This implies that during all stages of top-down and
bottom-up context exchange, the entire context information
is available for learning effective features.

3. ZigZag Network

Feature maps at all levels can beneﬁt from context in-
formation that has been aggregated from all scales. How-
ever, recent methods only establish one-way connections
between the top-down and bottom-up networks (see Fig-
ure 1(a) and (c)), where feature maps from adjacent levels
propagate context to affect each other. Even though the lat-
est works [1, 42] use dense pathways (see Figure 1(b)) to
strengthen context propagation between multi-scale feature
maps, only the highest-resolution feature map perceives the
entire context.

Here, we propose the ZigZagNet architecture, where
each feature map is directly enhanced by multi-scale con-
text extracted from all the other maps. More speciﬁcally,
ZigZagNet consists of two networks, a top-down network,
and a bottom-up network, as illustrated in Figure 2. Each
network has dense connections between its layers, with each
such connection carrying a feature map augmented by its
multi-scale context using region context encoding (RCE),
as described in more detail in Section 4. In addition to these
dense pathways, there are also pathways that exchange in-
formation between the two networks, by connecting be-
tween feature maps of the same level of the top-down and
the bottom-up pyramids (the red arrows in Figure 2). The
propagation of context within each network and between
the networks is iterated over several stages.

t

t

and F i,u

More formally, let t denote the stage (0 ≤ t < T ), and
F i,d
denote the t-th stage feature maps at the i-th
level of the top-down and the bottom-up networks, respec-
tively. At each iteration, we fuse feature maps F i,d
and
F i,u
to yield F j,u
t+1.
As a result, context information is propagated between the
two networks in a zig-zag fashion. Figure 2 illustrates this
process, by showing each feature map in two consecutive
stages: stage t in blue and stage t + 1 in green.

t+1, and maps F j,d

t+1 and F j,u

to yield F i,d

t

t

t

Speciﬁcally, in stage t + 1, the top-down network com-

putes the feature map F i,d

t+1 ∈ RH×W ×C as:

F i,d
t+1 = P i,d

t+1 +

L

Yj=i+1

Rj,d

t+1,

(1)

where t = 0, . . . , T − 1. The total number of stages T is
set to 3 in our experiments. We model the feature map F i,d
t+1

7492

Figure 2. Top-down and bottom-up context propagation in ZigZagNet. The gray arrows of the top-down network (a) and bottom-up network
(b) represent the dense pathways between different levels of feature maps. The red arrows iteratively exchange the context information
between the top-down and bottom-up networks, which generate all levels of feature maps over multiple iterations. Here, we show only two
different levels of feature maps to simplify the illustration. The blue and green blocks represent feature maps computed in two successive
iterations.

by summing the product of the set of context feature maps
from higher levels {Rj,d
t+1|j > i} with a fused feature map
P i,d
t+1 ∈ RH×W ×C , deﬁned as:

P i,d

t+1 =(Bi

σ(W i,d

t+1 ∗ (F i,d

t + F i,u

t

t = 0,
otherwise.

))

(2)

t

t

1 . In the following iterations, we fuse F i,d

Above, W i,d
t+1 is a convolution kernel and σ denotes the
ReLU activation function. Initially (i.e., t = 0), we use Bi,
the feature map computed by the backbone FCN to con-
struct F i,d
and
F i,u
, which are produced by the top-down and bottom-up
networks in the previous iteration, by convolving and acti-
vating their sum. Thus, differently from the one-way con-
text propagation in previous works, our top-down network
receives the previous iteration of top-down as well as the
bottom-up context to reﬁne the new feature map F i,d
t+1. Fur-
thermore, we use region context encoding (RCE) to gener-
ate the context feature map Rj,d
t+1 based on the subregions of
F j,d
t+1. As described in Section 4, RCE encodes the relation-
ship of subregions into the context feature maps. By using
various scales of subregions, we provide F i,d
t+1 with richer
context.

Similarly, we use the bottom-up network to compute the

feature map F j,u

t+1 ∈ RH×W ×C as:

F j,u
t+1 = P j,u

t+1 +

Ri,u

t+1,

j−1

Yi=1

where

P j,u

t+1 =(F j,d

t+1

σ(W j,u

t+1 ∗ (F j,d

t+1 + F j,u

t

t = 0,
otherwise,

))

(3)

(4)

Note that here instead of fusing two feature maps from stage
t, as done in Eq. (2), we fuse the maps F j,d
. This
is done, since at this point in the process F j,d
t+1 is already
available, and contains more reﬁned information than F j,d
.
Finally, the maps {F i,d
T } are fused using Eq. (2)
to yield the maps {P i,d

T } and {F i,u
T +1} for segmentation.

t+1 and F j,u

t

t

Below, we focus on the dense top-down and bottom-up
pathways equipped with the RCE to produce context feature
maps Rj,d
. For clarity, we omit the notations d, u
and t from this point onward.

and Rj,u

t

t

4. Region Context Encoding

In this section, we elaborate on the region context en-
coding (RCE) mechanism that connects all subregions of
the input feature map, enabling each subregion to diffuse its
information ﬂexibly. As illustrated in Figure 3, this is done
using multiple parallel branches. We input the feature map
produced by the top-down/bottom-up network to each RCE
branch. In each branch, we partition the feature map into
regular subregions. Next, we perform a weighted sum to
aggregate all subregions into a global representation, which
is then distributed to all subregions. This allows each sub-
region to pass information to all subregions of the new fea-
ture map. Each branch performs a different subdivision of
the feature map, generating subregions at different scales.
Finally, we add the feature maps produced by all branches
to the input feature, which is propagated as the context fea-
ture map Ri to feature maps at other levels. Thus, thanks
to the RCE mechanism, subregions of various scales can
consequently affect any position of other feature maps.

In more detail, given the feature map F i ∈ RH×W ×C

7493

(a) top-down network(b) bottom-up network......Fj,dtFj,dt+1Fi,dtFi,dt+1Fj,utFj,ut+1Fi,utFi,ut+1Rj,dt+1Ri,utRi,ut+1Rj,dtproduced by the top-down/bottom-up network, we convolve
and partition it into K × K subregions. By summing the
neurons within each subregion, we produce a feature map
M i

K×K ∈ RK×K×C as:

M i

K×K(x, y, c) = X(h,w)∈S(x,y)

F i(h, w, c),

x = 1, ..., K, y = 1, ..., K,

(5)

K×K . Thus M i

where (x, y) indicates the location of M i
K×K . We use
S(x, y) to denote a subregion that includes a set of neu-
rons in M i
K×K(x, y) is the feature of the
subregion S(x, y). We sum all subregion features by adapt-
ing to their importance, yielding a global representation
for connecting all subregions. For this purpose, we can
simply apply a learnable K × K convolution with ReLU
activation to M i
K×K without padding. This results in a
C-dimensional feature vector (see Figure 3(c)). Another
learnable K × K kernel is used to deconvolve this C-
dimensional vector without padding, yielding a new fea-
ture map Qi
K×K maps from all
branches are then added to the input feature map F i to yield
the feature map Ri ∈ RH×W ×C :

K×K ∈ RK×K×C . The Qi

Ri(h, w) = F i(h, w) + XK∈{3,5,7}

(h, w) ∈ S(x, y).

Qi

K×K(x, y),

(6)

In Eq. (6), we empirically use the 3 different subdivisions
of F i (i.e., 3 × 3, 5 × 5 or 7 × 7 subregions) to compute the
set of feature maps {Qi
K×K}. By dividing the feature maps
into more subregions, we dramatically increase the number
of parameters to learn, but achieve negligible improvement.

5. Implementation Details

The ZigZagNet network was implemented using the
Detectron platform1. We use ResNet-101 pre-trained on
the ImageNet dataset [8] as the backbone network. The
layers res2, res3, res4 and res5 are used as the initial
{B1, B2, B3, B4} feature maps in Eq. (2). Three stages of
fusing and exchanging context information are performed
(T = 3). The fused feature maps {P 1,d
, P 4,d
4 }
are used for the object segmentation tasks. We optimize the
network with the SGD solver. We evaluate our method on
the semantic segmentation and instance segmentation tasks.

, P 2,d

, P 3,d

4

4

4

Figure 3. Region context encoding. We use separate convolutional
layers to process the input feature map (a), and the results are used
to compute features of subregions (b). In each branch, we produce
a global representation (c) to connect all subregions. This global
representation is used to propagate information between all subre-
gions (d). We use different subdivisions of the input feature map
in separate branches. Finally, we add results of all branches to the
input feature map, yielding the context feature map (e).

We employ image ﬂipping, cropping, scaling and rota-
tion to prepare the mini-batches for the network’s training.
Each mini-batch contains 16 images, and each image has
the uniform resolution of 473 × 473. We ﬁrst use 60K mini-
batches with a learning rate of 1e−3, and then decay the
learning rate to 1e−4 for additional 60K mini-batches. Dur-
ing testing, we resize each image using four factors (i.e.,
{0.6, 0.8, 1.0, 1.2, 1.4}). The ﬁve resulting images are fed
to the trained model to compute predictions separately. The
predictions are averaged to obtain the ﬁnal result.

4

4

4

, P 3,d

, P 2,d

, P 4,d

Instance Segmentation Network We use all of the fused
feature maps (i.e., {P 1,d
4 }) to compute the
mask for each object [34, 22]. According to the size of the
object’s bounding box [22], we select one of the feature
maps for extracting the ROI feature [12, 15] as the object
representation. We use three loss functions, i.e., softmax
loss for classiﬁcation, smooth L1 loss for bounding-box re-
gression and pixel-wise softmax loss for mask regression.

Semantic Segmentation Network Following the training
strategy described in [43, 21, 4, 5], we adapt images of the
COCO dataset [23] to ﬁne-tune the network at the begin-
ning. The feature map P 1,u
, which has the highest spatial
resolution is used to regress the pixel-wise categories. We
use the softmax loss to penalize the pixel-wise errors.

4

1https://github.com/facebookresearch/Detectron

We rescale the image’s shorter edge to 800, keeping the
aspect ratio of the image for training and testing the net-
work. Each mini-batch has 8 images. We use the warmup
strategy [13] at the beginning of ﬁne-tuning the network.
During training, we decay the learning rate by using 0.01,
0.001 and 0.0001, along with 200K, 60K and 40K mini-
batches. We use the NMS with a threshold of 0.5 to reduce
overlapping segmentation results.

7494

G(a) input feature map(e) context feature mapGG(c) global representation(b) subdivisionsof feature maps(d) communication between subregionscontext exchange

feature fusion dense pathways mIoU

X

X

X

X

X

X

X

X

X

82.5

83.6

84.2

84.9

86.0

Table 1. Ablation experiments on the PASCAL VOC 2012 valida-
tion set. Segmentation accuracy is measured by mIoU (%).

6. Experiments

We evaluate our method on three public benchmarks,
i.e., PASCAL VOC 2012 [9], PASCAL Context [28] and
COCO [23] datasets. We use the PASCAL VOC 2012 [9]
and PASCAL Context [28] datasets to evaluate the semantic
segmentation accuracy in terms of mean Intersection-over-
Union (mIoU). For the instance segmentation task, we eval-
uate our method on COCO dataset [23]. We show the mask
average precision (mask AP), which is the standard COCO
metric computed over different mask IoU thresholds.

6.1. Results on PASCAL VOC 2012 and Context

Datasets

The PASCAL VOC 2012 dataset contains 10,582 train-
ing images associated with 20 object categories and back-
ground. The PASCAL Context dataset contains 4,998 train-
ing images with 59 categories and background. We mainly
use the PASCAL VOC 2012 validation set (1,449 images)
to evaluate the effectiveness of our approach. We also re-
port segmentation accuracies on the PASCAL VOC 2012
test set (1,456 images) and the PASCAL Context valida-
tion set (5,105 images) for comparisons with state-of-the-art
methods.

Ablation Study of ZigZagNet Our ZigZagNet models
the bidirectional
interaction between the top-down and
bottom-up networks, iteratively reﬁning different levels of
feature maps. The network has dense pathways equipped
with the RCE to enrich the context information. We conduct
an ablation study by removing the critical components, and
examine the effect on the segmentation accuracy. We sum-
marize the results in Table 1.

We fuse the feature maps to achieve the multi-scale
context, exchanging the context information between top-
down and bottom-up networks. By removing the additional
bottom-up network and the dense pathways, we disable the
context exchange and feature fusion. Thus the system de-
grades to the encoder-decoder architecture [5] and obtains
the segmentation score of 82.5, signiﬁcantly lower than the
score of 86.0 achieved by our full model.

global context

spatial pyramid pooling

multi-scale region context

method

mIoU

Mostajabi et al. [27]

82.7

Liu et al. [24]

Peng et al. [31]

Zhao et al. [43]

Chen et al. [4]

SCF

ours

83.0

83.4

84.1

84.7

85.2

86.0

Table 2. Comparisons with various approaches that use context in-
formation. “SCF” means summing context feature maps at differ-
ent levels. Performance is evaluated on the PASCAL VOC 2012
validation set. We report the segmentation accuracy in terms of
mIoU (%).

Next, we examine the impact of the feature map fu-
sion on the segmentation accuracy. In ZigZagNet, the top-
down and bottom-up networks produce feature maps that
are fused to aggregate context at all levels. Without fusing
feature maps, the network has only one pass of top-down
and bottom-up context propagation. In this case, the feature
maps of top-down network learn from higher-level context,
but lacking of lower-level context for further reﬁning them-
selves. It subsequently makes a negative impact on feature
maps of the bottom-up network, and obtains the segmen-
tation score of 83.6, once more a signiﬁcant drop of per-
formance compared to our full approach. By removing the
context exchange only, we degrade ZigZagNet to one pass
of top-down and bottom-up context propagation.
In this
case, the feature fusion helps achieve 84.2 IoU, which is
better than the one pass of propagation without feature fu-
sion (see the second case in Table 1 that achieves 83.6 IoU).
But it still lags far behind our full model (86.0 IoU).

Finally, we study the importance of the dense pathways.
The dense pathways employ the RCE to extract multi-scale
region context of different levels of feature maps, which are
merged to effectively augment the top-down and bottom-up
context. With dense pathways removed, we disallow re-
gions beyond adjacent feature maps to form useful context
information. This reduces the score to 84.9.

Approaches for Using Region Context We design the
RCE to model the relationship between multi-scale subre-
gions. There are other approaches for using context infor-
mation [27, 24, 31, 43, 4] to enhance the features of subre-
gions. For fair comparisons, we employ these approaches
in the ZigZagNet, in place of the RCE. The results are com-
pared in Table 2.

First, we report the results of encoding global context
into subregions. Mostajabi et al. [27] and Liu et al. [24] pro-

7495

VOC12 val set

VOC12 test set

Context val set

method

mIoU

method

mIoU

method

mIoU

top-down propagation

Fu et al. [11]

Chen et al. [5]

successive propagation

bidirectional propagation

Zhang et al. [42]

Shah et al. [36]

Fu et al. [11]

Lin et al. [20]

ours

84.6

84.8

85.8

79.0

84.8

85.1

86.0

Chen et al. [4]

Zhang et al. [42]

Chen et al. [5]

Shah et al. [36]

Fu et al. [11]

Lin et al. [20]

ours

86.9

87.9

89.0

84.3

86.6

88.0

88.7

Chen et al. [3]

Lin et al. [21]

Zhang et al. [41]

Liu et al. [24]

Shah et al. [36]

Lin et al. [20]

ours

45.7

47.3

51.7

50.1

50.8

50.3

52.1

Table 3. Comparisons with other state-of-the-art methods. The performances are evaluated on the PASCAL VOC 2012 validation set, test
set and the PASCAL Context validation set. Segmentation accuracy is reported in terms of mIoU (%).

pose to use fully-connected layers to combine all subregions
of the feature map as global context. By using different sets
of parameters, the fully-connected layer learn global con-
text information that is adaptive to each subregion. Rather
than using the fully-connected operation, Peng et al. [31]
employ convolutional layers with large kernels to produce
global context, which is more transformation-aware. Com-
pared to the above methods, which focus on the global scale
of the image, our network leverages the multi-scale subre-
gions to construct richer context, obtaining a higher seg-
mentation score.

Next, we compare our network to approaches that use
spatial pyramid pooling to construct context of subregions.
Zhao et al. [43] apply spatial pyramid pooling to extract fea-
tures within multi-scale subregions. Chen et al. [4] use dif-
ferent atrous convolution kernels to achieve learnable pyra-
mid pooling, while saving computation compared to con-
volving with larger kernels. Note that spatial pyramid pool-
ing [43, 4] computes context of adjacent subregions. Com-
parably, our method enables the information exchange be-
tween all subregions, which generally leads to 1.3 – 1.9 im-
provement of the segmentation score.

Instead of multiplying different levels of context feature
maps in Eqs. (1) and (3), we experiment with the common
way of adding different context feature maps to the feature
map produced by top-down/bottom-up network. With this
change, we observe a performance drop of 0.8 score com-
pared to our full model. A similar observation is made by
Zhang et al. [42]. We believe that the multiplication manner
better models the interaction between context feature maps
at different levels.

Comparisons with State-of-the-Art Methods
In addi-
tion to the PASCAL VOC 2012 validation set, we report
the results of our approach on the PASCAL VOC 2012 test
set and the PASCAL Context validation set in Table 3. We
compare our network to state-of-the-art approaches, which
can be divided into three groups. The ﬁrst group uses the

(dense) top-down network to propagate context informa-
tion. In the second group, successive top-down and bottom-
up networks are used with one-way propagation of con-
text information. Our approach and the context intertwin-
ing proposed by Lin et al. [20] belong to the third group,
where bidirectional propagation of context is performed. It
is noteworthy that ZigZagNet outperforms other methods
on the PASCAL VOC 2012 validation set and the PASCAL
Context validation set. On the PASCAL VOC 2012 test set,
we achieve the score of 88.7 (see per-category accuracies
on the PASCAL VOC leaderboard2). Our approach is com-
petitive to the network proposed in [5], which uses a private
JFT dataset [17, 6, 39] as additional data for training the
backbone network. We show several semantic segmenta-
tion results of our method in Figure 4.

6.2. Results on COCO Dataset

We test our method on the COCO dataset [23] for in-
stance segmentation. The COCO dataset contains about
120K training images with mask annotations for 80 object
categories. We report our results on the COCO validation
and test-dev sets, which have about 5K and 20K images re-
spectively.

We use ZigZagNet to output multi-scale feature maps,
which are then used by object detectors to extract features
for regressing instance masks. Here, we experiment with
three widely-used detectors, i.e., FCIS [19], Deformable
RCNN [7] and Mask RCNN [15]. These detectors mainly
contribute to champions of the COCO instance segmenta-
tion challenge from 2016 to 2018. We also evaluate the
performance by using different backbone networks, i.e.,
ResNet-101 and ResNet-152. All results are reported in
Table 4. Compared to different baseline models, our net-
work improves the performance by 1 – 3 points. It demon-
strates that our ZigZagNet is general to different detectors
for achieving the performance gain on instance segmenta-

2http://host.robots.ox.ac.uk:8080/anonymous/

N1OUN0.html

7496

Li et al. [19] Dai et al. [7] He et al. [15] Liu et al. [24] ours

29.6

35.7

37.1

40.0

42.0

Table 5. Comparisons with state-of-the-art single-model methods.
Performance is evaluated on the COCO test-dev set. Accuracies
are reported in terms of mask AP (%).

image

ground-truth

ours

Figure 4. Six semantic segmentation results produced by our
method. The ﬁrst three rows are from the PASCAL VOC 2012
validation set, and the last three rows are from the PASCAL Con-
text validation set.

FCIS

Deformable RCNN

Mask RCNN

backbone

mask AP w/ ZZNet

ResNet-101

29.2 → 32.2

ResNet-152

31.7 → 33.4

ResNet-101

36.1 → 38.2

ResNet-152

37.9 → 39.8

ResNet-101

37.5 → 39.5

ResNet-152

39.7 → 40.8

Table 4. Comparisons with popular detectors for instance segmen-
tation. Performance is evaluated on the COCO validation set. Ac-
curacies are reported in terms of mask AP (%).

tion. We show several instance segmentation results of our
method in Figure 5.

In Table 5, we compare our method with state-of-the-art
models on test-dev set. Without the ensemble of different
models and the multi-scale training/testing, all results are
achieved by single models based on the ResNet-101 back-
bone for a fair comparison. Our result is better than others.

7. Conclusions

The latest progress in object segmentation beneﬁts from
deep neural networks trained on large-scale datasets and
context information provided by multi-scale convolutional

Figure 5. Several instance segmentation results produced by our
method. The images are taken from the COCO validation set.

feature maps.
In this paper, we have proposed ZigZag-
Net, where we establish bidirectional connections between
the top-down and bottom-up networks. Our network has
dense pathways to smooth the information propagation at
all levels, encoding richer multi-scale context into the fea-
ture maps. The bidirectional connections are critical for
fusing and exchanging context, progressively learning how
to reﬁne the feature maps with useful information. Our
method outperforms the state-of-the-art on several public
datasets, showing its effectiveness for object segmentation.
In future work, we plan to explore bidirectional con-
text propagation in 3D segmentation tasks, which exhibit
more complex relationship between objects. Additionally,
we plan to design more efﬁcient network architectures ca-
pable of computing context information at a lower compu-
tational cost.

Acknowledgments

We thank the anonymous reviewers for their constructive
comments. This work was supported in parts by 973 Pro-
gram (2015CB352501), NSFC (61702338, 61761146002,
61861130365), Guangdong Science and Technology Pro-
gram (2015A030312015), Shenzhen Innovation Program
(KQJSCX20170727101233642), LHTD (20170003), ISF-
NSFC Joint Program (2472/17), and National Engineering
Laboratory for Big Data System Computing Technology.

7497

zebrazebrazebrapersonpersonfrisbeefrisbeepersonpersonpersonpersontennis racketsportsballpersonpersonpersonbaseball batbaseball glovepersonsports ballpersonpersonsports ballpersonpersonpersonsheepsheeppersonpersonmotorcyclebicyclebicyclepersonpersonpersonpersontraffic lighttraffic lightbuscarcartruckcarReferences

[1] P. Bilinski and V. Prisacariu. Dense decoder shortcut con-
In CVPR,

nections for single-pass semantic segmentation.
2018.

[2] Z. Cai, Q. Fan, R. S. Feris, and N. Vasconcelos. A uniﬁed
multi-scale deep convolutional neural network for fast object
detection. In ECCV, 2016.

[3] L.-C. Chen, G. Papandreou, I. Kokkinos, K. Murphy, and
A. L. Yuille. Deeplab: Semantic image segmentation with
deep convolutional nets, atrous convolution, and fully con-
nected crfs. arXiv, 2016.

[4] L.-C. Chen, G. Papandreou, F. Schroff, and H. Adam. Re-
thinking atrous convolution for semantic image segmenta-
tion. arXiv, 2017.

[5] L.-C. Chen, Y. Zhu, G. Papandreou, F. Schroff, and H. Adam.
Encoder-decoder with atrous separable convolution for se-
mantic image segmentation. arXiv, 2018.

[6] F. Chollet. Xception: Deep learning with depthwise separa-

ble convolutions. In CVPR, 2017.

[7] J. Dai, H. Qi, Y. Xiong, Y. Li, G. Zhang, H. Hu, and Y. Wei.

Deformable convolutional networks. In ICCV, 2017.

[8] J. Deng, W. Dong, R. Socher, L.-J. Li, K. Li, and L. Fei-
Fei. Imagenet: A large-scale hierarchical image database. In
CVPR, 2009.

[9] M. Everingham, L. Van Gool, C. K. Williams, J. Winn, and
A. Zisserman. The pascal visual object classes (voc) chal-
lenge. IJCV, 2010.

[10] C.-Y. Fu, W. Liu, A. Ranga, A. Tyagi, and A. C. Berg. Dssd:

Deconvolutional single shot detector. arXiv, 2017.

[11] J. Fu, J. Liu, Y. Wang, and H. Lu. Stacked deconvolutional

network for semantic segmentation. arXiv, 2017.

[12] R. Girshick. Fast r-cnn. In ICCV, 2015.

[13] P. Goyal,

P. Doll´ar, R. Girshick,

P. Noordhuis,
L. Wesolowski, A. Kyrola, A. Tulloch, Y. Jia, and K. He.
Accurate, large minibatch sgd: training imagenet in 1 hour.
arXiv, 2017.

[14] B. Hariharan, P. Arbel´aez, R. Girshick, and J. Malik. Simul-

taneous detection and segmentation. In ECCV, 2014.

[15] K. He, G. Gkioxari, P. Doll´ar, and R. Girshick. Mask r-cnn.

In ICCV, 2017.

[16] K. He, X. Zhang, S. Ren, and J. Sun. Deep residual learning

for image recognition. In CVPR, 2016.

[17] G. Hinton, O. Vinyals, and J. Dean. Distilling the knowledge

in a neural network. In NIPS, 2014.

[18] A. Krizhevsky, I. Sutskever, and G. E. Hinton.

classiﬁcation with deep convolutional neural networks.
NIPS, 2012.

Imagenet
In

[19] Y. Li, H. Qi, J. Dai, X. Ji, and Y. Wei. Fully convolutional

instance-aware semantic segmentation. In CVPR, 2017.

[22] T.-Y. Lin, P. Doll´ar, R. B. Girshick, K. He, B. Hariharan, and
S. J. Belongie. Feature pyramid networks for object detec-
tion. In CVPR, 2017.

[23] T.-Y. Lin, M. Maire, S. Belongie, J. Hays, P. Perona, D. Ra-
manan, P. Doll´ar, and C. L. Zitnick. Microsoft coco: Com-
mon objects in context. In ECCV, 2014.

[24] S. Liu, L. Qi, H. Qin, J. Shi, and J. Jia. Path aggregation

network for instance segmentation. In CVPR, 2018.

[25] W. Liu, D. Anguelov, D. Erhan, C. Szegedy, S. Reed, C.-Y.
Fu, and A. C. Berg. Ssd: Single shot multibox detector. In
ECCV, 2016.

[26] J. Long, E. Shelhamer, and T. Darrell. Fully convolutional

networks for semantic segmentation. In CVPR, 2015.

[27] M. Mostajabi, P. Yadollahpour, and G. Shakhnarovich. Feed-
forward semantic segmentation with zoom-out features. In
CVPR, 2015.

[28] R. Mottaghi, X. Chen, X. Liu, N.-G. Cho, S.-W. Lee, S. Fi-
dler, R. Urtasun, and A. Yuille. The role of context for object
detection and semantic segmentation in the wild. In CVPR,
2014.

[29] A. Newell, K. Yang, and J. Deng. Stacked hourglass net-

works for human pose estimation. In ECCV, 2016.

[30] C. Peng, T. Xiao, Z. Li, Y. Jiang, X. Zhang, K. Jia, G. Yu,
and J. Sun. Megdet: A large mini-batch object detector. In
CVPR, 2018.

[31] C. Peng, X. Zhang, G. Yu, G. Luo, and J. Sun. Large kernel
matters–improve semantic segmentation by global convolu-
tional network. In CVPR, 2017.

[32] T. Pohlen, A. Hermans, M. Mathias, and B. Leibe. Full-
resolution residual networks for semantic segmentation in
street scenes. In CVPR, 2017.

[33] J. Redmon and A. Farhadi. Yolov3: An incremental improve-

ment. arXiv, 2018.

[34] S. Ren, K. He, R. Girshick, and J. Sun. Faster r-cnn: Towards
real-time object detection with region proposal networks. In
NIPS, 2015.

[35] O. Ronneberger, P. Fischer, and T. Brox. U-Net: convolu-
tional networks for biomedical image segmentation. In MIC-
CAI, 2015.

[36] S. Shah, P. Ghosh, L. S. Davis, and T. Goldstein. Stacked
u-nets: a no-frills approach to natural image segmentation.
arXiv, 2018.

[37] A. Shrivastava, R. Sukthankar, J. Malik, and A. Gupta. Be-
yond skip connections: Top-down modulation for object de-
tection. arXiv, 2016.

[38] K. Simonyan and A. Zisserman. Very deep convolutional

networks for large-scale image recognition. arXiv, 2014.

[39] C. Sun, A. Shrivastava, S. Singh, and A. Gupta. Revisiting
unreasonable effectiveness of data in deep learning era. In
ICCV, 2017.

[20] D. Lin, Y. Ji, D. Lischinski, D. Cohen-Or, and H. Huang.
Multi-scale context intertwining for semantic segmentation.
In ECCV, 2018.

[40] S. Xie, R. Girshick, P. Doll´ar, Z. Tu, and K. He. Aggregated
residual transformations for deep neural networks. In CVPR,
2017.

[21] G. Lin, A. Milan, C. Shen, and I. Reid. Reﬁnenet: Multi-
path reﬁnement networks with identity mappings for high-
resolution semantic segmentation. arXiv, 2016.

[41] H. Zhang, K. Dana, J. Shi, Z. Zhang, X. Wang, A. Tyagi, and
A. Agrawal. Context encoding for semantic segmentation.
In CVPR, 2018.

7498

[42] Z. Zhang, X. Zhang, C. Peng, D. Cheng, and J. Sun. Exfuse:
Enhancing feature fusion for semantic segmentation. arXiv,
2018.

[43] H. Zhao, J. Shi, X. Qi, X. Wang, and J. Jia. Pyramid scene

parsing network. arXiv, 2016.

7499

