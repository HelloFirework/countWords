MS-TCN: Multi-Stage Temporal Convolutional Network for Action

Segmentation

Yazan Abu Farha and Juergen Gall

University of Bonn, Germany

{abufarha,gall}@iai.uni-bonn.de

Abstract

Predict: Y

Stage N

LN

L1

Stage 1

Temporally locating and classifying action segments in
long untrimmed videos is of particular interest to many ap-
plications like surveillance and robotics. While traditional
approaches follow a two-step pipeline, by generating frame-
wise probabilities and then feeding them to high-level tem-
poral models, recent approaches use temporal convolutions
to directly classify the video frames. In this paper, we in-
troduce a multi-stage architecture for the temporal action
segmentation task. Each stage features a set of dilated tem-
poral convolutions to generate an initial prediction that is
reﬁned by the next one. This architecture is trained using a
combination of a classiﬁcation loss and a proposed smooth-
ing loss that penalizes over-segmentation errors. Extensive
evaluation shows the effectiveness of the proposed model in
capturing long-range dependencies and recognizing action
segments. Our model achieves state-of-the-art results on
three challenging datasets: 50Salads, Georgia Tech Ego-
centric Activities (GTEA), and the Breakfast dataset.

1. Introduction

Analyzing activities in videos is of signiﬁcant impor-
tance for many applications ranging from video indexing to
surveillance. While methods for classifying short trimmed
videos have been very successful [3, 9], detecting and tem-
porally locating action segments in long untrimmed videos
is still challenging.

Earlier approaches for action segmentation can be
grouped into two categories:
sliding window ap-
proaches [22, 11, 19], that use temporal windows of differ-
ent scales to detect action segments, and hybrid approaches
that apply a coarse temporal modeling using Markov mod-
els on top of frame-wise classiﬁers [13, 16, 21]. While these
approaches achieve good results, they are very slow as they
require solving a maximization problem over very long se-
quences.

Motivated by the advances in speech synthesis, recent

Input: x

Figure 1. Overview of the multi-stage temporal convolutional net-
work. Each stage generates an initial prediction that is reﬁned by
the next stage. At each stage, several dilated 1D convolutions are
applied on the activations of the previous layer. A loss layer is
added after each stage.

approaches rely on temporal convolutions to capture long
range dependencies between the video frames [15, 17, 5]. In
these models, a series of temporal convolutions and pooling
layers are adapted in an encoder-decoder architecture for
the temporal action segmentation. Despite the success of
such temporal models, these approaches operate on a very
low temporal resolution of a few frames per second.

In this paper, we propose a new model that also uses
temporal convolutions which we call Multi-Stage Temporal
Convolutional Network (MS-TCN). In contrast to previous
approaches, the proposed model operates on the full tempo-
ral resolution of the videos and thus achieves better results.
Our model consists of multiple stages where each stage out-

13575

puts an initial prediction that is reﬁned by the next one. In
each stage, we apply a series of dilated 1D convolutions,
which enables the model to have a large temporal recep-
tive ﬁeld with less parameters. Figure 1 shows an overview
of the proposed multi-stage model. While this architec-
ture already performs well, we further employ a smooth-
ing loss during training which penalizes over-segmentation
errors in the predictions. Extensive evaluation on three
datasets shows the effectiveness of our model in captur-
ing long range dependencies between action classes and
producing high quality predictions. Our contribution is
thus two folded: First, we propose a multi-stage tempo-
ral convolutional architecture for the action segmentation
task that operates on the full temporal resolution. Second,
we introduce a smoothing loss to enhance the quality of
the predictions. Our approach achieves state-of-the-art re-
sults on three challenging benchmarks for action segmen-
tation: 50Salads [25], Georgia Tech Egocentric Activities
(GTEA) [8], and the Breakfast dataset [12]. 1

2. Related Work

Detecting actions and temporally segmenting long
untrimmed videos has been studied by many researchers.
While traditional approaches use a sliding window ap-
proach with non-maximum suppression [22, 11], Fathi and
Rehg [7] model actions based on the change in the state of
objects and materials. In [6], actions are represented based
on the interactions between hands and objects. These repre-
sentations are used to learn sets of temporally-consistent ac-
tions. Bhattacharya et al. [1] use a vector time series repre-
sentation of videos to model the temporal dynamics of com-
plex actions using methods from linear dynamical systems
theory. The representation is based on the output of pre-
trained concept detectors applied on overlapping temporal
windows. Cheng et al. [4] represent videos as a sequence
of visual words, and model the temporal dependency by
employing a Bayesian non-parametric model of discrete se-
quences to jointly classify and segment video sequences.

Other approaches employ high level temporal modeling
over frame-wise classiﬁers. Kuehne et al. [13] represent the
frames of a video using Fisher vectors of improved dense
trajectories, and then each action is modeled with a hid-
den Markov model (HMM). These HMMs are combined
with a context-free grammar for recognition to determine
the most probable sequence of actions. A hidden Markov
model is also used in [26] to model both transitions be-
tween states and their durations. Vo and Bobick [28] use
a Bayes network to segment activities. They represent com-
positions of actions using a stochastic context-free grammar
with AND-OR operations. [20] propose a model for tempo-
ral action detection that consists of three components: an

1The source code for our model is publicly available at https://

github.com/yabufarha/ms-tcn.

action model that maps features extracted from the video
frames into action probabilities, a language model that de-
scribes the probability of actions at sequence level, and ﬁ-
nally a length model that models the length of different
action segments. To get the video segmentation, they use
dynamic programming to ﬁnd the solution that maximizes
the joint probability of the three models. Singh et al. [23]
use a two-stream network to learn representations of short
video chunks. These representations are then passed to a bi-
directional LSTM to capture dependencies between differ-
ent chunks. However, their approach is very slow due to the
sequential prediction. In [24], a three-stream architecture
that operates on spatial, temporal and egocentric streams is
introduced to learn egocentric-speciﬁc features. These fea-
tures are then classiﬁed using a multi-class SVM.

Inspired by the success of temporal convolution in
speech synthesis [27], researchers have tried to use simi-
lar ideas for the temporal action segmentation task. Lea et
al. [15] propose a temporal convolutional network for ac-
tion segmentation and detection. Their approach follows an
encoder-decoder architecture with a temporal convolution
and pooling in the encoder, and upsampling followed by de-
convolution in the decoder. While using temporal pooling
enables the model to capture long-range dependencies, it
might result in a loss of ﬁne-grained information that is nec-
essary for ﬁne-grained recognition. Lei and Todorovic [17]
build on top of [15] and use deformable convolutions in-
stead of the normal convolution and add a residual stream
to the encoder-decoder model. Both approaches in [15, 17]
operate on downsampled videos with a temporal resolution
of 1-3 frames per second. In contrast to these approaches,
we operate on the full temporal resolution and use dilated
convolutions to capture long-range dependencies.

There is a huge line of research that addresses the action
segmentation task in a weakly supervised setup [2, 10, 14,
21, 5]. Kuehne et al. [14] train a model for action segmen-
tation from video transcripts. In their approach, an HMM
is learned for each action and a Gaussian mixture model
(GMM) is used to model observations. However, since
frame-wise classiﬁers do not capture enough context to de-
tect action classes, Richard et al. [21] use a GRU instead
of the GMM that is used in [14], and they further divide
each action into multiple sub-actions to better detect com-
plex actions. Both of these models are trained in an itera-
tive procedure starting from a linear alignment based on the
video transcript. Similarly, Ding and Xu [5] train a tem-
poral convolutional feature pyramid network in an iterative
manner starting from a linear alignment. Instead of using
hard labels, they introduce a soft labeling mechanism at the
boundaries, which results in a better convergence. In con-
trast to these approaches, we address the temporal action
segmentation task in a fully supervised setup and the weakly
supervised case is beyond the scope of this paper.

3576

3. Temporal Action Segmentation

We introduce a multi-stage temporal convolutional net-
work for the temporal action segmentation task. Given the
frames of a video x1:T = (x1, . . . , xT ), our goal is to infer
the class label for each frame c1:T = (c1, . . . , cT ), where
T is the video length. First, we describe the single-stage
approach in Section 3.1, then we discuss the multi-stage
model in Section 3.2. Finally, we describe the proposed
loss function in Section 3.3.

3.1. Single Stage TCN

Our single stage model consists of only temporal con-
volutional layers. We do not use pooling layers, which
reduce the temporal resolution, or fully connected layers,
which force the model to operate on inputs of ﬁxed size
and massively increase the number of parameters. We call
this model a single-stage temporal convolutional network
(SS-TCN). The ﬁrst layer of a single-stage TCN is a 1 × 1
convolutional layer, that adjusts the dimension of the in-
put features to match the number of feature maps in the
network. Then, this layer is followed by several layers of
dilated 1D convolution.
Inspired by the wavenet [27] ar-
chitecture, we use a dilation factor that is doubled at each
layer, i.e. 1, 2, 4, ...., 512. All these layers have the same
number of convolutional ﬁlters. However, instead of the
causal convolution that is used in wavenet, we use acausal
convolutions with kernel size 3. Each layer applies a dilated
convolution with ReLU activation to the output of the previ-
ous layer. We further use residual connections to facilitate
gradients ﬂow. The set of operations at each layer can be
formally described as follows

ˆHl = ReLU (W1 ∗ Hl−1 + b1),
Hl = Hl−1 + W2 ∗ ˆHl + b2,

(1)

(2)

where Hl is the output of layer l, ∗ denotes the convolu-
tion operator, W1 ∈ R3×D×D are the weights of the dilated
convolution ﬁlters with kernel size 3 and D is the number of
convolutional ﬁlters, W2 ∈ R1×D×D are the weights of a
1 × 1 convolution, and b1, b2 ∈ RD are bias vectors. These
operations are illustrated in Figure 2. Using dilated convo-
lution increases the receptive ﬁeld without the need to in-
crease the number of parameters by increasing the number
of layers or the kernel size. Since the receptive ﬁeld grows
exponentially with the number of layers, we can achieve
a very large receptive ﬁeld with a few layers, which helps
in preventing the model from over-ﬁtting the training data.
The receptive ﬁeld at each layer is determined using this
formula

ReceptiveF ield(l) = 2l+1 − 1,

(3)

where l ∈ [1, L] is the layer number. Note that this formula
is only valid for a kernel of size 3. To get the probabilities

+
1 x 1

ReLU

Dilated Conv

Figure 2. Overview of the dilated residual layer.

for the output class, we apply a 1 × 1 convolution over the
output of the last dilated convolution layer followed by a
softmax activation, i.e.

Yt = Sof tmax(W hL,t + b),

(4)

where Yt contains the class probabilities at time t, hL,t is
the output of the last dilated convolution layer at time t,
W ∈ RC×D and b ∈ RC are the weights and bias for the
1 × 1 convolution layer, where C is the number of classes
and D is the number of convolutional ﬁlters.

3.2. Multi Stage TCN

Stacking several predictors sequentially has shown sig-
niﬁcant improvements in many tasks like human pose es-
timation [29, 18]. The idea of these stacked or multi-stage
architectures is composing several models sequentially such
that each model operates directly on the output of the previ-
ous one. The effect of such composition is an incremental
reﬁnement of the predictions from the previous stages.

Motivated by the success of such architectures, we in-
troduce a multi-stage temporal convolutional network for
the temporal action segmentation task. In this multi-stage
model, each stage takes an initial prediction from the pre-
vious stage and reﬁnes it. The input of the ﬁrst stage is the
frame-wise features of the video as follows

Y 0 = x1:T ,
Y s = F(Y s−1),

(5)

(6)

where Y s is the output at stage s and F is the single-stage
TCN discussed in Section 3.1. Using such a multi-stage
architecture helps in providing more context to predict the
class label at each frame. Furthermore, since the output of
each stage is an initial prediction, the network is able to cap-
ture dependencies between action classes and learn plau-
sible action sequences, which helps in reducing the over-
segmentation errors.

3577

Note that the input to the next stage is just the frame-wise
probabilities without any additional features. We will show
in the experiments how adding features to the input of next
stages affects the quality of the predictions.

3.3. Loss Function

As a loss function, we use a combination of a classiﬁca-
tion loss and a smoothing loss. For the classiﬁcation loss,
we use a cross entropy loss

3.4. Implementation Details

We use a multi-stage architecture with four stages, each
stage contains ten dilated convolution layers, where the di-
lation factor is doubled at each layer and dropout is used
after each layer. We set the number of ﬁlters to 64 in all
the layers of the model and the ﬁlter size is 3. For the loss
function, we set τ = 4 and λ = 0.15. In all experiments,
we use Adam optimizer with a learning rate of 0.0005.

Lcls =

1

T Xt

−log(yt,c),

(7)

4. Experiments

where yt,c is the the predicted probability for the ground
truth label at time t.

While the cross entropy loss already performs well, we
found that the predictions for some of the videos contain a
few over-segmentation errors. To further improve the qual-
ity of the predictions, we use an additional smoothing loss
to reduce such over-segmentation errors. For this loss, we
use a truncated mean squared error over the frame-wise log-
probabilities

LT −M SE =

˜∆t,c =(∆t,c

τ

˜∆2

t,c,

1

T C Xt,c

: ∆t,c ≤ τ
: otherwise

,

(8)

(9)

∆t,c = |log yt,c − log yt−1,c| ,

(10)

where T is the video length, C is the number of classes, and
yt,c is the probability of class c at time t.

Note that the gradients are only computed with respect
to yt,c, whereas yt−1,c is not considered as a function of the
model’s parameters. This loss is similar to the Kullback-
Leibler (KL) divergence loss where

LKL =

1

T Xt,c

yt−1,c(log yt−1,c − log yt,c).

(11)

However, we found that the truncated mean squared error
(LT −M SE) (8) reduces the over-segmentation errors more.
We will compare the KL loss and the proposed loss in the
experiments.

The ﬁnal loss function for a single stage is a combination

of the above mentioned losses

Ls = Lcls + λLT −M SE,

(12)

where λ is a model hyper-parameter to determine the contri-
bution of the different losses. Finally to train the complete
model, we minimize the sum of the losses over all stages

Ls.

L =Xs

(13)

Datasets. We evaluate the proposed model on three chal-
lenging datasets: 50Salads [25], Georgia Tech Egocentric
Activities (GTEA) [8], and the Breakfast dataset [12].

The 50Salads dataset contains 50 videos with 17 action
classes. On average, each video contains 20 action instances
and is 6.4 minutes long. As the name of the dataset indi-
cates, the videos depict salad preparation activities. These
activities were performed by 25 actors where each actor pre-
pared two different salads. For evaluation, we use ﬁve-fold
cross-validation and report the average as in [25].

The GTEA dataset contains 28 videos corresponding to
7 different activities, like preparing coffee or cheese sand-
wich, performed by 4 subjects. All the videos were recorded
by a camera that is mounted on the actor’s head. The frames
of the videos are annotated with 11 action classes includ-
ing background. On average, each video has 20 action in-
stances. We use cross-validation for evaluation by leaving
one subject out.

The Breakfast dataset is the largest among the three
datasets with 1, 712 videos. The videos were recorded in
18 different kitchens showing breakfast preparation related
activities. Overall, there are 48 different actions where each
video contains 6 action instances on average. For evalua-
tion, we use the standard 4 splits as proposed in [12] and
report the average.

For all datasets, we extract I3D [3] features for the video
frames and use these features as input to our model. For
GTEA and Breakfast datasets we use the videos temporal
resolution at 15 fps, while for 50Salads we downsampled
the features from 30 fps to 15 fps to be consistent with the
other datasets.

Evaluation Metrics. For evaluation, we report the frame-
wise accuracy (Acc), segmental edit distance and the seg-
mental F1 score at overlapping thresholds 10%, 25%
and 50%, denoted by F 1@{10, 25, 50}. The overlapping
threshold is determined based on the intersection over union
(IoU) ratio. While the frame-wise accuracy is the most
commonly used metric for action segmentation, long action
classes have a higher impact than short action classes on
this metric and over-segmentation errors have a very low

3578

F1@{10,25,50}

SS-TCN
MS-TCN (2 stages)
MS-TCN (3 stages)
MS-TCN (4 stages)
MS-TCN (5 stages)

27.0
55.5
71.5
76.3
76.4

25.3
52.9
68.6
74.0
73.4

21.5
47.3
61.1
64.5
63.6

Edit Acc
20.5
78.2
79.8
47.9
78.6
64.0
80.7
67.9
69.2
79.5

Table 1. Effect of the number of stages on the 50Salads dataset.

F1@{10,25,50}

SS-TCN (48 layers)
MS-TCN

49.0
76.3

46.4
74.0

40.2
64.5

Edit Acc
40.7
78.0
80.7
67.9

Table 2. Comparing a multi-stage TCN with a deep single-stage
TCN on the 50Salads dataset.

Lcls
Lcls + λLKL
Lcls + λLT −M SE

F1@{10,25,50}

71.3
71.9
76.3

69.7
69.3
74.0

60.7
60.1
64.5

Edit Acc
79.9
64.2
80.2
64.6
67.9
80.7

Table 3. Comparing different loss functions on the 50Salads
dataset.

Figure 3. Qualitative result from the 50Salads dataset for compar-
ing different number of stages.

impact. For that reason, we use the segmental F1 score as a
measure of the quality of the prediction as proposed by [15].

4.1. Effect of the Number of Stages

We start our evaluation by showing the effect of using
a multi-stage architecture. Table 1 shows the results of a
single-stage model compared to multi-stage models with
different number of stages. As shown in the table, all of
these models achieve a comparable frame-wise accuracy.
Nevertheless, the quality of the predictions is very differ-
ent. Looking at the segmental edit distance and F1 scores
of these models, we can see that the single-stage model pro-
duces a lot of over-segmentation errors, as indicated by the
low F1 score. On the other hand, using a multi-stage archi-
tecture reduces these errors and increases the F1 score. This
effect is clearly visible when we use two or three stages,
which gives a huge boost to the accuracy. Adding the fourth
stage still improves the results but not as signiﬁcant as the
previous stages. However, by adding the ﬁfth stage, we can
see that the performance starts to degrade. This might be
an over-ﬁtting problem as a result of increasing the num-
ber of parameters. The effect of the multi-stage architecture
can also be seen in the qualitative results shown in Figure 3.
Adding more stages results in an incremental reﬁnement of
the predictions. For the rest of the experiments we use a
multi-stage TCN with four stages.

4.2. Multi Stage TCN vs. Deeper Single Stage TCN

In the previous section, we have seen that our multi-stage
architecture is better than a single-stage one. However, that
comparison does not show whether the improvement is be-
cause of the multi-stage architecture or due to the increase
in the number of parameters when adding more stages. For
a fair comparison, we train a single-stage model that has the
same number of parameters as the multi-stage one. As each

Figure 4. Qualitative result from the 50Salads dataset for compar-
ing different loss functions.

stage in our MS-TCN contains 12 layers (ten dilated convo-
lutional layers, one 1 × 1 convolutional layer and a softmax
layer), we train a single-stage TCN with 48 layers, which
is the number of layers in a MS-TCN with four stages. For
the dilated convolutions, we use similar dilation factors as
in our MS-TCN. I.e. we start with a dilation factor of 1 and
double it at every layer up to a factor of 512, and then we
start again from 1. As shown in Table 2, our multi-stage
architecture outperforms its single-stage counterpart with a
large margin of up to 27%. This highlights the impact of
the proposed architecture in improving the quality of the
predictions.

4.3. Comparing Different Loss Functions

As a loss function, we use a combination of a cross-
entropy loss, which is common practice for classiﬁcation
tasks, and a truncated mean squared loss over the frame-
wise log-probabilities to ensure smooth predictions. While
the smoothing loss slightly improves the frame-wise accu-
racy compared to the cross entropy loss alone, we found
that this loss produces much less over-segmentation errors.
Table 3 and Figure 4 show a comparison of these losses.
As shown in Table 3, the proposed loss achieves better F1
and edit scores with an absolute improvement of 5%. This
indicates that our loss produces less over-segmentation er-
rors compared to cross entropy since it forces consecutive
frames to have similar class probabilities, which results in a
smoother output.

Penalizing the difference in log-probabilities is similar to
the Kullback-Leibler (KL) divergence loss, which measures
the difference between two probability distributions. How-
ever, the results show that the proposed loss produces better
results than the KL loss as shown in Table 3 and Figure 4.

3579

Impact of λ
MS-TCN (λ = 0.05, τ = 4)
MS-TCN (λ = 0.15, τ = 4)
MS-TCN (λ = 0.25, τ = 4)
Impact of τ
MS-TCN (λ = 0.15, τ = 3)
MS-TCN (λ = 0.15, τ = 4)
MS-TCN (λ = 0.15, τ = 5)

F1@{10,25,50}

74.1
76.3
74.7

71.7
74.0
72.4

62.4
64.5
63.7

F1@{10,25,50}

74.2
76.3
66.6

72.1
74.0
63.7

62.2
64.5
54.7

Edit Acc
66.6
80.0
80.7
67.9
68.1
78.9

Edit Acc
79.4
67.1
80.7
67.9
60.0
74.0

Table 4. Impact of λ and τ on the 50Salads dataset.

Probabilities and features
Probabilities only

56.2
76.3

53.7
74.0

45.8
64.5

F1@{10,25,50}

Edit Acc
76.8
47.6
67.9
80.7

Table 5. Effect of passing features to higher stages on the 50Salads
dataset.

Figure 6. Qualitative results for two videos from the 50Salads
dataset for showing the effect of passing features to higher stages.

4.5. Effect of Passing Features to Higher Stages

In the proposed multi-stage TCN, the input to higher
stages are the frame-wise probabilities only. However, in
the multi-stage architectures that are used for human pose
estimation, additional features are usually concatenated to
the output heat-maps of the previous stage. In this exper-
iment, we therefore analyze the effect of combining addi-
tional features to the input probabilities of higher stages. To
this end, we trained two multi-stage TCNs: one with only
the predicted frame-wise probabilities as input to the next
stage, and for the second model, we concatenated the out-
put of the last dilated convolutional layer in each stage to
the input probabilities of the next stage. As shown in Ta-
ble 5, concatenating the features to the input probabilities
results in a huge drop of the F1 score and the segmental
edit distance (around 20%). We argue that the reason be-
hind this degradation in performance is that a lot of action
classes share similar appearance and motion. By adding the
features of such classes at each stage, the model is confused
and produces small separated falsely detected action seg-
ments that correspond to an over-segmentation effect. Pass-
ing only the probabilities forces the model to focus on the
context of neighboring labels, which are explicitly repre-
sented by the probabilities. This effect can also be seen in
the qualitative results shown in Figure 6.

4.6. Impact of Temporal Resolution

Previous temporal models operate on a low temporal res-
olution of 1-3 frames per second [15, 17, 5]. On the con-

3580

Figure 5. Loss surface for the Kullback-Leibler (KL) diver-
gence loss (LKL) and the proposed truncated mean squared loss
(LT −M SE ) for the case of two classes. yt,c is the predicted proba-
bility for class c and yt−1,c is the target probability corresponding
to that class.

The reason behind this is the fact that the KL divergence
loss does not penalize cases where the difference between
the target probability and the predicted probability is very
small. Whereas the proposed loss penalizes small differ-
ences as well. Note that, in contrast to the KL loss, the
proposed loss is symmetric. Figure 5 shows the surface for
both the KL loss and the proposed truncated mean squared
loss for the case of two classes. We also tried a symmet-
ric version of the KL loss but it performed worse than the
proposed loss.

4.4. Impact of λ and τ

The effect of the proposed smoothing loss is controlled
by two hyper-parameters: λ and τ . In this section, we study
the impact of these parameters and see how they affect the
performance of the proposed model.
Impact of λ: In all experiments, we set λ = 0.15. To an-
alyze the effect of this parameter, we train different models
with different values of λ. As shown in Table 4, the impact
of λ is very small on the performance. Reducing λ to 0.05
still improves the performance but not as good as the de-
fault value of λ = 0.15. Increasing its value to λ = 0.25
also causes a degradation in performance. This drop in per-
formance is due to the fact that the smoothing loss penalizes
heavily changes in frame-wise labels, which affects the de-
tected boundaries between action segments.
Impact of τ : This hyper-parameter deﬁnes the threshold to
truncate the smoothing loss. Our default value is τ = 4.
While reducing the value to τ = 3 still gives an improve-
ment over the cross entropy baseline, setting τ = 5 results
in a huge drop in performance. This is mainly because when
τ is too high, the smoothing loss penalizes cases where the
model is very conﬁdent that the consecutive frames belong
to two different classes, which indeed reduces the capabil-
ity of the model in detecting the true boundaries between
action segments.

(a)

(b)

(c)

Figure 7. Qualitative results for the temporal action segmentation task on (a) 50Salads (b) GTEA, and (c) Breakfast dataset.

F1@{10,25,50}

MS-TCN (1 fps)
MS-TCN (15 fps)

77.8
76.3

74.9
74.0

64.0
64.5

Edit Acc
70.7
78.6
80.7
67.9

Table 6. Impact of temporal resolution on the 50Salads dataset.

trary, our approach is able to handle higher resolution of
15 fps. In this experiment, we evaluate our model in a low
temporal resolution of 1 fps. As shown in Table 6, the pro-
posed model is able to handle both low and high temporal
resolutions. While reducing the temporal resolution results
in a better edit distance and segmental F1 score, using high
resolution gives better frame-wise accuracy. Operating on a
low temporal resolution makes the model less prune to the
over-segmentation problem, which is reﬂected in the better
edit and F1 scores. Nevertheless, this comes with the cost of
losing the precise location of the boundaries between action
segments, or even missing small action segments.

F1@{10,25,50}

53.2
66.4
76.3
77.8

48.3
63.7
74.0
75.2

39.0
52.8
64.5
66.9

Edit Acc
63.7
46.2
73.9
60.1
80.7
67.9
69.6
80.5

L = 6
L = 8
L = 10
L = 12

Table 7. Effect of the number of layers (L) in each stage on the
50Salads dataset.

4.7. Impact of the Number of Layers

In our experiments, we ﬁx the number of layers (L) in
each stage to 10 Layers. Table 7 shows the impact of this
parameter on the 50Salads dataset. Increasing L form 6 to
10 signiﬁcantly improves the performance. This is mainly
due to the increase in the receptive ﬁeld. Using more than
10 layers (L = 12) does not improve the frame-wise accu-
racy but slightly increases the F1 scores.

To study the impact of the large receptive ﬁeld on short
videos, we evaluate our model on three groups of videos

3581

Duration
< 1 min
1 − 1.5 min
≥ 1.5 min

F1@{10,25,50}

89.6
85.9
81.2

87.9
84.3
76.5

77.0
71.9
58.4

Edit Acc
82.5
76.6
76.4
80.7
71.8
75.9

Table 8. Evaluation of three groups of videos based on their dura-
tions on the GTEA dataset.

based on their durations. For this evaluation, we use the
GTEA dataset since it contains shorter videos compared to
the others. As shown in Table 8, our model performs well
on both short and long videos. Nevertheless, the perfor-
mance is slightly worse on longer videos due to the limited
receptive ﬁeld.

4.8. Impact of Fine tuning the Features

In our experiments, we use the I3D features without ﬁne-
tuning. Table 9 shows the effect of ﬁne-tuning on the GTEA
dataset. Our multi-stage architecture signiﬁcantly outper-
forms the single stage architecture - with and without ﬁne-
tuning. Fine-tuning improves the results, but the effect of
ﬁne-tuning for action segmentation is lower than for action
recognition. This is expected since the temporal model is by
far more important for segmentation than for recognition.

w/o FT

F1@{10,25,50}

SS-TCN
MS-TCN (4 stages)

Edit Acc
73.3
55.0
76.3
79.0
75.3
61.1
81.4
79.2
Table 9. Effect of ﬁne-tuning on the GTEA dataset.

62.8
85.8
69.5
87.5

48.1
69.8
55.8
74.6

60.0
83.4
64.9
85.4

MS-TCN (4 stages)

with FT SS-TCN

4.9. Comparison with the State of the Art

In this section, we compare the proposed model to
the state-of-the-art methods on three datasets: 50Salads,
Georgia Tech Egocentric Activities (GTEA), and Breakfast
datasets. The results are presented in Table 10. As shown in
the table, our model outperforms the state-of-the-art meth-
ods on the three datasets and with respect to three evaluation
metrics: F1 score, segmental edit distance, and frame-wise
accuracy (Acc) with a large margin (up to 12.6% for the
frame-wise accuracy on the 50Salads dataset). Qualitative
results on the three datasets are shown in Figure 7. Note that
all the reported results are obtained using the I3D features.
To analyze the effect of using a different type of features,
we evaluated our model on the Breakfast dataset using the
improved dense trajectories (IDT) features, which are the
standard used features for the Breakfast dataset. As shown
in Table 10, the impact of the features is very small. While
the frame-wise accuracy and edit distance are slightly bet-
ter using the I3D features, the model achieves a better F1
score when using the IDT features compared to I3D. This is
mainly because I3D features encode both motion and ap-
pearance, whereas the IDT features encode only motion.
For datasets like Breakfast, using appearance information
does not help the performance since the appearance does

50Salads
IDT+LM [20]
Bi-LSTM [23]
ED-TCN [15]
TDRN [17]
MS-TCN

GTEA
Bi-LSTM [23]
ED-TCN [15]
TDRN [17]
MS-TCN
MS-TCN (FT)

Breakfast
ED-TCN [15]*
HTK [14]
TCFPN [5]
HTK(64) [13]
GRU [21]*
MS-TCN (IDT)
MS-TCN (I3D)

F1@{10,25,50}

44.4
62.6
68.0
72.9
76.3

38.9
58.3
63.9
68.5
74.0

27.8
47.0
52.6
57.2
64.5

F1@{10,25,50}

66.5
72.2
79.2
85.8
87.5

59.0
69.3
74.4
83.4
85.4

43.6
56.0
62.7
69.8
74.6

F1@{10,25,50}
-
-
-
-
-
-
-
-
-
-

-
-
-
-
-

58.2
52.6

52.9
48.1

40.8
37.9

Edit Acc
45.8
48.7
55.7
55.6
64.7
59.8
68.1
66.0
67.9
80.7

-
-

Edit Acc
55.5
64.0
70.1
76.3
79.2

74.1
79.0
81.4

-
-
-
-
-

Edit Acc
43.3
50.7
52.0
56.3
60.6
65.1
66.3

61.4
61.7

Table 10. Comparison with the state-of-the-art on 50Salads,
GTEA, and the Breakfast dataset. (* obtained from [5]).

not give a strong evidence about the action that is carried
out. This can be seen in the qualitative results shown in
Figure 7. The video frames share a very similar appear-
ance. Additional appearance features therefore do not help
in recognizing the activity.

As our model does not use any recurrent layers, it is very
fast both during training and testing. Training our four-
stages MS-TCN for 50 epochs on the 50Salads dataset is
four times faster than training a single cell of Bi-LSTM
with a 64-dimensional hidden state on a single GTX 1080 Ti
GPU. This is due to the sequential prediction of the LSTM,
where the activations at any time step depend on the activa-
tions from the previous steps. For the MS-TCN, activations
at all time steps are computed in parallel.

5. Conclusion

We presented a multi-stage architecture for the tempo-
ral action segmentation task. Instead of the commonly used
temporal pooling, we used dilated convolutions to increase
the temporal receptive ﬁeld. The experimental evaluation
demonstrated the capability of our architecture in capturing
temporal dependencies between action classes and reducing
over-segmentation errors. We further introduced a smooth-
ing loss that gives an additional improvement of the pre-
dictions quality. Our model outperforms the state-of-the-art
methods on three challenging datasets with a large margin.
Since our model is fully convolutional, it is very efﬁcient
and fast both during training and testing.

Acknowledgements: The work has been funded by
the Deutsche Forschungsgemeinschaft (DFG, German Re-
search Foundation) GA 1927/4-1 (FOR 2535 Anticipat-
ing Human Behavior) and the ERC Starting Grant ARCA
(677650).

3582

References

[1] Subhabrata Bhattacharya, Mahdi M Kalayeh, Rahul Suk-
thankar, and Mubarak Shah. Recognition of complex events:
Exploiting temporal dynamics between underlying concepts.
In IEEE Conference on Computer Vision and Pattern Recog-
nition (CVPR), pages 2243–2250, 2014.

[2] Piotr Bojanowski, R´emi Lajugie, Francis Bach, Ivan Laptev,
Jean Ponce, Cordelia Schmid, and Josef Sivic. Weakly su-
pervised action labeling in videos under ordering constraints.
In European Conference on Computer Vision (ECCV), pages
628–643. Springer, 2014.

[3] Joao Carreira and Andrew Zisserman. Quo vadis, action
recognition? A new model and the kinetics dataset.
In
IEEE Conference on Computer Vision and Pattern Recog-
nition (CVPR), pages 4724–4733, 2017.

[4] Yu Cheng, Quanfu Fan, Sharath Pankanti, and Alok Choud-
hary. Temporal sequence modeling for video event detection.
In IEEE Conference on Computer Vision and Pattern Recog-
nition (CVPR), pages 2227–2234, 2014.

[5] Li Ding and Chenliang Xu. Weakly-supervised action seg-
mentation with iterative soft boundary assignment. In IEEE
Conference on Computer Vision and Pattern Recognition
(CVPR), pages 6508–6516, 2018.

[6] Alireza Fathi, Ali Farhadi, and James M Rehg. Understand-
ing egocentric activities. In IEEE International Conference
on Computer Vision (ICCV), pages 407–414, 2011.

[7] Alireza Fathi and James M Rehg. Modeling actions through
state changes. In IEEE Conference on Computer Vision and
Pattern Recognition (CVPR), pages 2579–2586, 2013.

[8] Alireza Fathi, Xiaofeng Ren, and James M Rehg. Learning
to recognize objects in egocentric activities. In IEEE Confer-
ence on Computer Vision and Pattern Recognition (CVPR),
pages 3281–3288, 2011.

[9] Christoph Feichtenhofer, Axel Pinz, and Richard Wildes.
Spatiotemporal residual networks for video action recogni-
tion. In Advances in Neural Information Processing Systems
(NIPS), pages 3468–3476, 2016.

[10] De-An Huang, Li Fei-Fei, and Juan Carlos Niebles. Con-
nectionist temporal modeling for weakly supervised action
labeling.
In European Conference on Computer Vision
(ECCV), pages 137–153. Springer, 2016.

[11] Svebor Karaman,

Lorenzo Seidenari,

and Alberto
Fast saliency based pooling of ﬁsher en-
In European Conference on

Del Bimbo.
coded dense trajectories.
Computer Vision (ECCV), THUMOS Workshop, 2014.

[12] Hilde Kuehne, Ali Arslan, and Thomas Serre. The language
of actions: Recovering the syntax and semantics of goal-
directed human activities.
In IEEE Conference on Com-
puter Vision and Pattern Recognition (CVPR), pages 780–
787, 2014.

[13] Hilde Kuehne, Juergen Gall, and Thomas Serre. An end-to-
end generative framework for video segmentation and recog-
nition. In IEEE Winter Conference on Applications of Com-
puter Vision (WACV), 2016.

[14] Hilde Kuehne, Alexander Richard, and Juergen Gall. Weakly
supervised learning of actions from transcripts. Computer
Vision and Image Understanding, 163:78–89, 2017.

[15] Colin Lea, Michael D. Flynn, Rene Vidal, Austin Reiter, and
Gregory D. Hager. Temporal convolutional networks for ac-
tion segmentation and detection.
In IEEE Conference on
Computer Vision and Pattern Recognition (CVPR), 2017.

[16] Colin Lea, Austin Reiter, Ren´e Vidal, and Gregory D Hager.
Segmental spatiotemporal CNNs for ﬁne-grained action seg-
mentation.
In European Conference on Computer Vision
(ECCV), pages 36–52. Springer, 2016.

[17] Peng Lei and Sinisa Todorovic. Temporal deformable resid-
In IEEE
ual networks for action segmentation in videos.
Conference on Computer Vision and Pattern Recognition
(CVPR), pages 6742–6751, 2018.

[18] Alejandro Newell, Kaiyu Yang, and Jia Deng. Stacked hour-
glass networks for human pose estimation.
In European
Conference on Computer Vision (ECCV), pages 483–499.
Springer, 2016.

[19] Dan Oneata, Jakob Verbeek, and Cordelia Schmid. The lear

submission at THUMOS 2014. 2014.

[20] Alexander Richard and Juergen Gall. Temporal action detec-
tion using a statistical language model. In IEEE Conference
on Computer Vision and Pattern Recognition (CVPR), pages
3131–3140, 2016.

[21] Alexander Richard, Hilde Kuehne, and Juergen Gall. Weakly
supervised action learning with RNN based ﬁne-to-coarse
modeling. In IEEE Conference on Computer Vision and Pat-
tern Recognition (CVPR), 2017.

[22] Marcus Rohrbach, Sikandar Amin, Mykhaylo Andriluka,
and Bernt Schiele. A database for ﬁne grained activity detec-
tion of cooking activities. In IEEE Conference on Computer
Vision and Pattern Recognition (CVPR), pages 1194–1201,
2012.

[23] Bharat Singh, Tim K Marks, Michael Jones, Oncel Tuzel,
and Ming Shao. A multi-stream bi-directional recurrent
neural network for ﬁne-grained action detection.
In IEEE
Conference on Computer Vision and Pattern Recognition
(CVPR), pages 1961–1970, 2016.

[24] Suriya Singh, Chetan Arora, and C. V. Jawahar. First per-
son action recognition using deep learned descriptors.
In
IEEE Conference on Computer Vision and Pattern Recog-
nition (CVPR), pages 2620–2628, 2016.

[25] Sebastian Stein and Stephen J McKenna. Combining em-
bedded accelerometers with computer vision for recogniz-
ing food preparation activities. In ACM International Joint
Conference on Pervasive and Ubiquitous Computing, pages
729–738, 2013.

[26] Kevin Tang, Li Fei-Fei, and Daphne Koller. Learning la-
tent temporal structure for complex event detection. In IEEE
Conference on Computer Vision and Pattern Recognition
(CVPR), pages 1250–1257, 2012.

[27] A¨aron Van Den Oord, Sander Dieleman, Heiga Zen, Karen
Simonyan, Oriol Vinyals, Alex Graves, Nal Kalchbrenner,
Andrew W Senior, and Koray Kavukcuoglu. Wavenet: A
generative model for raw audio. In ISCA Speech Synthesis
Workshop (SSW), 2016.

[28] Nam N Vo and Aaron F Bobick. From stochastic grammar
to bayes network: Probabilistic parsing of complex activity.
In IEEE Conference on Computer Vision and Pattern Recog-
nition (CVPR), pages 2641–2648, 2014.

3583

[29] Shih-En Wei, Varun Ramakrishna, Takeo Kanade, and Yaser
Sheikh. Convolutional pose machines. In IEEE Conference
on Computer Vision and Pattern Recognition (CVPR), pages
4724–4732, 2016.

3584

