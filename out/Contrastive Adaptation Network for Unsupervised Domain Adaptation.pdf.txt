Contrastive Adaptation Network for Unsupervised Domain Adaptation

Guoliang Kang1, Lu Jiang2, Yi Yang1

,

3 ∗, Alexander G. Hauptmann4

1CAI, University of Technology Sydney, 2Google AI, 3Baidu Research, 4Carnegie Mellon University

kgl.prml@gmail.com, lujiang@google.com, Yi.Yang@uts.edu.au, alex@cs.cmu.edu

Abstract

Before Adaptation

Previous Methods

Proposed Method

Unsupervised Domain Adaptation (UDA) makes predic-
tions for the target domain data while manual annotations
are only available in the source domain. Previous methods
minimize the domain discrepancy neglecting the class infor-
mation, which may lead to misalignment and poor general-
ization performance. To address this issue, this paper pro-
poses Contrastive Adaptation Network (CAN) optimizing a
new metric which explicitly models the intra-class domain
discrepancy and the inter-class domain discrepancy. We de-
sign an alternating update strategy for training CAN in an
end-to-end manner. Experiments on two real-world bench-
marks Ofﬁce-31 and VisDA-2017 demonstrate that CAN
performs favorably against the state-of-the-art methods and
produces more discriminative features.

1. Introduction

Recent advancements in deep neural networks have suc-
cessfully improved a variety of learning problems [40, 8,
26, 19, 20]. For supervised learning, however, massive la-
beled training data is still the key to learning an accurate
deep model. Although abundant labels may be available for
a few pre-speciﬁed domains, such as ImageNet [7], manual
labels often turn out to be difﬁcult or expensive to obtain
for every ad-hoc target domain or task. The absence of in-
domain labeled data hinders the application of data-ﬁtting
models in many real-world problems.

In the absence of labeled data from the target domain,
Unsupervised Domain Adaptation (UDA) methods have
emerged to mitigate the domain shift in data distributions
[2, 1, 5, 37, 30, 18, 3, 17]. It relates to unsupervised learn-
ing as it requires manual labels only from the source domain
and zero labels from the target domain. Among the recent
work on UDA, a seminal line of work proposed by Long
et al. [22, 25] aims at minimizing the discrepancy between
the source and target domain in the deep neural network,
where the domain discrepancy is measured by Maximum

∗Corresponding author. Part of this work was done when Yi Yang was

visiting Baidu Research during his Professional Experience Program.

Source:

Target: 

Approaching: 

Splitting:

Comparison between previous domain-discrepancy
Figure 1.
minimization methods and ours. Left: The domain shift exists be-
tween the source and target data before adaptation. Middle: Class-
agnostic adaptation aligns source and target data at the domain-
level, neglecting the class label of the sample, and hence may lead
to sub-optimal solutions. Consequently, the target samples of one
label may be misaligned with source samples of a different la-
bel. Right: Our method performs class-aware alignment across
domains. To avoid the misalignment, only the intra-class domain
discrepancy is minimized. The inter-class domain discrepancy is
maximized to enhance the model’s generalization ability.

Mean Discrepancy (MMD) [22] and Joint MMD (JMMD)
[25]. MMD and JMMD have proven effective in many com-
puter vision problems and demonstrated the state-of-the-art
results on several UDA benchmarks [22, 25].

Despite the success of previous methods based on MMD
and JMMD, most of them measure the domain discrep-
ancy at the domain level, neglecting the class from which
the samples are drawn. These class-agnostic approaches,
hence, do not discriminate whether samples from two do-
mains should be aligned according to their class labels
(Fig. 1). This can impair the adaptation performance due
to the following reasons. First, samples of different classes
may be aligned incorrectly, e.g. both MMD and JMMD
can be minimized even when the target-domain samples are
misaligned with the source-domain samples of a different
class. Second, the learned decision boundary may gener-
alize poorly for the target domain. There exist many sub-
optimal solutions near the decision boundary. These solu-
tions may overﬁt the source data well but are less discrimi-
native for the target.

14893

To address the above issues, we introduce a new Con-
trastive Domain Discrepancy (CDD) objective to enable
class-aware UDA. We propose to minimize the intra-class
discrepancy, i.e. the domain discrepancy within the same
class, and maximize the inter-class margin, i.e. the domain
discrepancy between different classes. Considering the toy
example in Fig. 1, CDD will draw closer the source and tar-
get samples of the same underlying class (e.g. the blue and
red triangles), while pushing apart the samples from differ-
ent classes (e.g. the blue triangle and the red star).

Unfortunately, to estimate and optimize with CDD, we
may not train a deep network out-of-the-box as we need
to overcome the following two technical issues. First, we
need labels from both domains to compute CDD, however,
target labels are unknown in UDA. A straightforward way,
of course, is to estimate the target labels by the network out-
puts during training. However, because the estimation can
be noisy, we ﬁnd it can harm the adaptation performance
(see Section 4.3). Second, during the mini-batch training,
for a class C, the mini-batch may only contain samples from
one domain (source or target), rendering it infeasible to es-
timate the intra-class domain discrepancy of C. This can
result in a less efﬁcient adaptation. The above issues require
special design of the network and the training paradigm.

In this paper, we propose Contrastive Adaptation Net-
work (CAN) to facilitate the optimization with CDD. Dur-
ing training, in addition to minimizing the cross-entropy
loss on labeled source data, CAN alternatively estimates
the underlying label hypothesis of target samples through
clustering, and adapts the feature representations according
to the CDD metric. After clustering, the ambiguous target
data (i.e. far from the cluster centers) and ambiguous classes
(i.e. containing few target samples around the cluster cen-
ters) are zeroed out in estimating the CDD. Empirically we
ﬁnd that during training, an increasing amount of samples
will be taken into account. Such progressive learning can
help CAN capture more accurate statistics of data distri-
butions. Moreover, to facilitate the mini-batch training of
CAN, we employ the class-aware sampling for both source
and target domains, i.e. at each iteration, we sample data
from both domains for each class within a randomly sam-
pled class subset. Class-aware sampling can improve the
training efﬁciency and the adaptation performance.

We validate our method on two public UDA bench-
marks: Ofﬁce-31 [30] and VisDA-2017 [29]. The ex-
perimental results show that our method performs favor-
ably against the state-of-the-art UDA approaches, i.e. we
achieve the best-published result on the Ofﬁce-31 bench-
mark and very competitive result on the challenging VisDA-
2017 benchmark. Ablation studies are presented to verify
the contribution of each key component in our framework.

In a nutshell, our contributions are as follows,

• We introduce a new discrepancy metric Contrastive

Domain Discrepancy (CDD) to perform class-aware
alignment for unsupervised domain adaptation.

• We propose a network Contrastive Adaptation Net-

work to facilitate the end-to-end training with CDD.

• Our method achieves the best-published result on
the Ofﬁce-31 benchmark [30] and competitive perfor-
mance compared to the state-of-the-art on the chal-
lenging VisDA-2017 benchmark [29].

2. Related Work

Class-agnostic domain alignment. A common practice for
UDA is to minimize the discrepancy between domains to
obtain domain-invariant features [10, 4, 25, 22, 24, 36, 21].
For example, Tzeng et al. [38] proposed a kind of do-
main confusion loss to encourage the network to learn both
semantically meaningful and domain invariant representa-
tions. Long et al. proposed DAN [22] and JAN [25] to mini-
mize the MMD and Joint MMD distance across domains re-
spectively, over the domain-speciﬁc layers. Ganin et al. [10]
enabled the network to learn domain invariant representa-
tions in adversarial way by back-propagating the reverse
gradients of the domain classiﬁer. Unlike these domain-
discrepancy minimization methods, our method performs
class-aware domain alignment.
Discriminative domain-invariant feature learning. Some
previous works pay efforts to learn more disciminative fea-
tures while performing domain alignment [35, 13, 31, 32,
28, 39]. Adversarial Dropout Regularization (ADR) [31]
and Maximum Classiﬁer Discrepancy (MCD) [32] were
proposed to train a deep neural network in adversarial way
to avoid generating non-discriminative features lying in the
region near the decision boundary. Similar to us, Long et
al. [23] and Pei et al. [28] take the class information into
account while measuring the domain discrepancy. How-
ever, our method differs from theirs mainly in two aspects.
Firstly, we explicitly model two types of domain discrep-
ancy, i.e. the intra-class domain discrepancy and the inter-
class domain discrepancy. The inter-class domain discrep-
ancy, which has been ignored by most previous methods,
is proved to be beneﬁcial for enhancing the model adapta-
tion performance. Secondly, in the context of deep neural
networks, we treat the training process as an alternative op-
timization over target label hypothesis and features.
Intra-class compactness and inter-class separability
modeling. This paper is also related to the work that explic-
itly models the intra-class compactness and the inter-class
separability, e.g. the contrastive loss [12] and the triplet loss
[33]. These methods have been used in various applications,
e.g. face recognition [6], person re-identiﬁcation [16], etc.
Different from these methods designed for a single domain,
our work focuses on adaptation across domains.

4894

3. Methodology

Unsupervised Domain Adaptation (UDA) aims at im-
proving the model’s generalization performance on target
domain by mitigating the domain shift in data distribution
of the source and target domain. Formally, given a set of
1, ys
source domain samples S = {(xs
Ns )},
Nt }, xs, xt
and target domain samples T = {xt
represent the input data, and ys ∈ {0, 1, · · · , M − 1} de-
note the source data label of M classes. The target data
label yt ∈ {0, 1, · · · , M − 1} is unknown. Thus, in UDA,
we are interested in training a network using labeled source
domain data S and unlabeled target domain data T to make
accurate predictions {ˆyt} on T .

1), · · · , (xs
1, · · · , xt

Ns , ys

We discuss our method in the context of deep neural net-
works. In deep neural networks, a sample owns hierarchical
features/representations denoted by the activations of each
layer l ∈ L. In the following, we use φl(x) to denote the
outputs of layer l in a deep neural network Φθ for the in-
put x, where φ(·) denotes the mapping deﬁned by the deep
neural network from the input to a speciﬁc layer.

In the rest of this section, we start our discussions by
brieﬂy reviewing the relevant concepts in MMD in Section
3.1. Section 3.2 introduces a new domain discrepancy met-
ric. Finally, Section 3.3 and Section 3.4 discuss the objec-
tive and the training procedure of proposed deep network.

3.1. Maximum Mean Discrepancy Revisit

In Maximum Mean Discrepancy (MMD), {xs
i} are i.i.d.

i } and
{xt
sampled from the marginal distributions
P (X s) and Q(X t) respectively. Based on the observed
samples, MMD [34] performs a kernel two-sample test to
determine whether to accept the null hypothesis P = Q or
not. MMD is motivated by the fact that if two distributions
are identical, all of their statistics should be the same. For-
mally, MMD deﬁnes the difference between two distribu-
tions with their mean embeddings in the reproducing kernel
Hilbert space (RKHS), i.e.

DH(P, Q) , sup
f ∼H

(EX s [f (X s)] − EX t [f (X t)])H,

(1)

where xs ∈ S ′ ⊂ S, xt ∈ T ′ ⊂ T , ns = |S ′|, nt = |T ′|.
The S ′ and T ′ represent the mini-batch source and target
data sampled from S and T respectively. And kl denotes
the kernel selected for the l-th layer of deep neural network.

3.2. Contrastive Domain Discrepancy

We propose to explicitly take the class information into
account and measure the intra-class and inter-class discrep-
ancy across domains. The intra-class domain discrepancy
is minimized to compact the feature representations of sam-
ples within a class, whereas the inter-class domain discrep-
ancy is maximized to push the representations of each other
further away from the decision boundary. The intra-class
and inter-class discrepancies are jointly optimized to im-
prove the adaptation performance.

The proposed Contrastive Domain Discrepancy (CDD)
is established on the difference between conditional data
distributions across domains. Without any constraint on
the type (e.g. marginal or conditional) of data distribu-
tions, MMD is convenient to measure such difference be-
tween P (φ(X s)|Y s) and Q(φ(X t)|Y t), i.e. DH(P, Q) ,
supf ∼H (EX s [f (φ(X s)|Y s)] − EX t [f (φ(X t)|Y t)])H.
Supposing µcc′ (y, y′) = (cid:26) 1 if y = c, y′ = c′;

otherwise.

, for

0

two classes c1, c2 (which can be same or different), the ker-
nel mean embedding estimation for squared DH(P, Q) is

ˆDc1c2 (ˆyt

1, ˆyt

2, · · · , ˆyt

nt , φ) = e1 + e2 − 2e3

(3)

where

e1 =

e2 =

j )k(φ(xs
j=1 µc1c1 (ys

i ), φ(xs
j))
i , ys
j )

j)k(φ(xt
j=1 µc2c2 (ˆyt

i), φ(xt
j))
i , ˆyt
j)

ns

ns

nt

nt

Xj=1
Xi=1
Xi=1
Xj=1
Xi=1
Xj=1

ns

nt

µc1c1 (ys

i , ys

µc2c2 (ˆyt

i , ˆyt

Pns
i=1Pns
Pnt
i=1Pnt
Pns
i=1Pnt

i , ˆyt

µc1c2 (ys

j)k(φ(xs
j=1 µc1c2 (ys

i ), φ(xt
j))
i , ˆyt
j)

.

(4)

where H is class of functions.

In practice, for a layer l, the squared value of MMD is

estimated with the empirical kernel mean embeddings

e3 =

ˆDmmd

l

=

+

−

1
n2
s

1
n2
t

2

ns

ns

nt

nt

Xj=1
Xi=1
Xi=1
Xj=1
Xj=1
Xi=1

ns

nt

nsnt

kl(φl(xs

i ), φl(xs

j))

kl(φl(xt

i), φl(xt

j))

kl(φl(xs

i ), φl(xt

j)),

Note that Eq. (3) deﬁnes two kinds of class-aware domain
discrepancy, 1) when c1 = c2 = c, it measures intra-
class domain discrepancy; 2) when c1 6= c2, it becomes
the inter-class domain discrepancy. To compute the mask
µc2c2 (ˆyt
j), we need to estimate target
labels {ˆyt

i , ˆyt
i }, which will be discussed in Section 3.4.

j) and µc1c2 (ys

i , ˆyt

(2)

Based on the above deﬁnitions, the CDD is calculated as

(The ˆyt

1, ˆyt

2, · · · , ˆyt

nt is abbreviated as ˆyt

1:nt )

4895

1
M

|

M

Xc=1

1

ˆDcdd =

−

M (M − 1)

ˆDcc(ˆyt

1:nt , φ)

intra

{z

M

Xc=1

M

}
Xc′=1
{z

c′6=c

inter

|

ˆDcc′

(ˆyt

1:nt , φ)

,

(5)

}

where the intra- and inter-class domain discrepancies will
be optimized in the opposite direction.

Note although the estimation of the labels {ˆyt

i } can be
noisy, the CDD (which is established on MMD) in itself
is robust the the noise to an extent. Because MMD is de-
termined by the mean embeddings of distributions in the
RKHS, the sufﬁcient statistics is less likely to be severely
affected by the label noise, especially when the amount of
data is large. We will discuss and verify this in Section 4.3.

3.3. Contrastive Adaptation Network

Deep convolutional neural networks (CNNs) is able
to learn more transferable features than shallow methods.
However, the discrepancy still exists for domain-speciﬁc
layers. Speciﬁcally,
the convolutional layers extracting
general features are more transferable, while the fully-
connected (FC) layers which exhibit abstract and domain-
speciﬁc features should be adapted [22, 25].

In this paper, we start from ImageNet [7] pretrained
networks, e.g. ResNet [14, 15], and replace the last FC
layer with task-speciﬁc ones. We follow the general prac-
tice that minimizes the domain discrepancy of last FC lay-
ers and ﬁne-tunes the convolutional layers through back-
propagation. Then our proposed CDD can be readily incor-
porated into the objective as an adaptation module over the
activations of FC layers. We name our network Contrastive
Adaptation Network (CAN).

The overall objective. In a deep CNN, we need to min-

imize CDD over multiple FC layers, i.e. minimizing

ˆDcdd

L =

L

Xl=1

ˆDcdd

l

.

(6)

Besides, we train the network with labeled source data

through minimizing the cross-entropy loss,

ℓce = −

1
n′

s

n′

s

Xi′=1

log Pθ(ys

i′ |xs
i′ )

(7)

where ys ∈ {0, 1, · · · , M − 1} is the ground-truth label
of sample xs. Pθ(y|x) denotes the predicted probability of
label y with the network parameterized by θ, given input x.

Therefore, the overall objective can be formulated as

ℓ = ℓce + β ˆDcdd

L

min

θ

(8)

where β is the weight of the discrepancy penalty term.
Through minimizing ˆDcdd
L , the intra-class domain discrep-
ancy is minimized and the inter-class domain discrepancy
is maximized to perform class-aware domain alignment.

Note that we independently sample the labeled source
data to minimize the cross-entropy loss ℓce and those to esti-
mate the CDD ˆDcdd
L . In this way, we are able to design more
efﬁcient sampling strategy (see Section 3.4) to facilitate
the mini-batch stochastic optimization with CDD, while not
disturbing the conventional optimization with cross-entropy
loss on labeled source data.

3.4. Optimizing CAN

The framework of CAN is illustrated in Fig. 2. In this
section, we mainly focus on discussing how to minimize
CDD loss in CAN.

Alternative optimization (AO). As shown in Eq. (5),

we need to jointly optimize the target label hypothesis ˆyt
1:nt
and the feature representations φ1:L. We adopt alternative
steps to perform such optimization. In detail, at each loop,
given current feature representations, i.e. ﬁxing θ, we up-
date target labels through clustering. Then, based on the
updated target labels ˆyt, we estimate and minimize CDD to
adapt the features, i.e. update θ through back-propagation.
We employ the input activations φ1(·) of the ﬁrst task-
in
speciﬁc layer to represent a sample.
ResNet, each sample can be represented as the outputs of
the global average pooling layer, which are also the inputs
of the following task-speciﬁc layer. Then the spherical K-
means is adopted to perform the clustering of target sam-
ples and attach corresponding labels. The number of clus-
ters is the same as the number of underlying classes M .
For each class, the target cluster center Otc is initialized
as the source cluster center Osc, i.e. Otc ← Osc, where

For example,

1ys

i =c

φ1(xs
i )
i )k , 1ys
kφ1(xs

i =c(cid:26) 1 if ys

i = c
0 otherwise

and

Osc = PNs

i=1

c = {0, 1, · · · , M − 1}. For the metric measuring the dis-
tance between points a and b in the feature space, we apply
the cosine dissimilarity, i.e. dist(a, b) = 1

Then the clustering process
each target

taching labels
for
argminc dist(φ1(xt

is

kakkbk ).

2 (1 − ha,bi
iteratively 1) at-
ˆyt
i ←
i), Otc), and 2) updating the clus-
φ1(xt
i)
i)k , till convergence
kφ1(xt

samples:

i =c

i=1

ˆyt

1

ter centers: Otc ← PNt

or reaching the maximum clustering steps.

After clustering, each target sample xt
i

is assigned
a label ˆyt
i same as its afﬁliated clusters. Moreover,
ambiguous data, which is far from its afﬁliated clus-
i.e. we select a subset ˜T =
ter center,
{(xt, ˆyt)|dist(φ1(xt), Ot(ˆyt)) < D0, xt ∈ T }, where
D0 ∈ [0, 1] is a constant.

is discarded,

Moreover, to give a more accurate estimation of the dis-
tribution statistics, we assume that the minimum number
of samples in ˜T assigned to each class, should be guaran-

4896

Figure 2. The training process of CAN. To minimize CDD, we perform alternative optimization between updating the target label
hypothesis through clustering and adapting feature representations through back-propagation. For the clustering, we apply spherical K-
means clustering of target samples based on their current feature representations. The number of clusters equal to that of underlying classes
and the initial center of each class cluster is set to the center of source data within the same class. Then ambiguous data (i.e. far from the
afﬁliated cluster centers) and ambiguous classes (i.e. containing few target samples around afﬁliated cluster centers) are discarded. For
the feature adaptation, the labeled target samples provided by the clustering stage , together with the labeled source samples, pass through
the network to achieve their multi-layer feature representations. The features of domain-speciﬁc FC layers are adopted to estimate CDD
(Eq. (5)). Besides, we apply cross-entropy loss on independently sampled source data. Back-propagating with minimizing CDD and
cross-entropy loss (Eq. (8)) adapts the features and provides class-aware alignment. Detailed descriptions can be found in Section 3.4.

teed. The class which doesn’t satisfy such condition will
not be considered in current loop, i.e. at loop Te, the se-
i =c > N0, c ∈
ˆyt
{0, 1, · · · , M − 1}}, where N0 is a constant.

lected subset of classes CTe = {c|P| ˜T |

1

i

At the start of training, due to the domain shift, it is more
likely to exclude partial classes. However, as training pro-
ceeds, more and more classes are included. The reason is
two folds: 1) as training proceeds, the model becomes more
accurate and 2) beneﬁting from the CDD penalty, the intra-
class domain discrepancy becomes smaller, and the inter-
class domain discrepancy becomes larger, so that the hard
(i.e. ambiguous) classes are able to be taken into account.

Class-aware Sampling (CAS). In the conventional
training of deep neural networks, a mini-batch of data is
usually sampled at each iteration without being differenti-
ated by their classes. However, it will be less efﬁcient for
computing the CDD. For example, for class C, there may
only exist samples from one domain (source or target) in
the mini-batch, thus the intra-class discrepancy could not
be estimated.

We propose to use class-aware sampling strategy to en-
able the efﬁcient update of network with CDD. It is easy
to implement. We randomly select a subset of classes C
Te
from CTe , and then sample source data and target data for
each class in C
Te . Consequently, in each mini-batch of data
during training, we are able to estimate the intra-class dis-

′

′

crepancy for each selected class.

Algorithm. Algorithm 1 shows one loop of the AO pro-
cedure, i.e. alternating between a clustering phase (Step 1-
4), and a K-step network update phase (Step 5-11). The
loop of AO is repeated multiple times in our experiments.
Because the feature adapting process is relatively slower,
we asynchronously update the target labels and the network
parameters to make the training more stable and efﬁcient.

Algorithm 1: Optimization of CAN at loop Te.

Input:
source data: S = {(xs
target data: T = {xt
Procedure:

1), · · · , (xs

Ns , ys

Ns )},

1, ys
1, · · · , xt

Nt }

1 Forward S and compute the M cluster centers Osc ;
2 Initialize Otc: Otc ← Osc ;
3 Cluster target samples T using spherical K-means;
4 Filter the ambiguous target samples and classes;
5 for (k ← 1; k ≤ K; k ← k + 1) do

6

7

8

9

10

′

Te , ˜T , and S;

L using Eq. (6);

Class-aware sampling based on C
Compute ˆDcdd
Sample from S and compute ℓce using Eq. (7);
Back-propagate with the objective ℓ (Eq.(8));
Update network parameters θ.

11 end

4897

4 x  3 xCE lossCDD (intra)Feature Extractor (conv. layers of ResNet, VGG, etc.)N>N0=2N>N0=2N>N0=2NoYesYesDeprecatedClusteringK-step update Feature AdaptationCDD  4 x  3 x2 xSamplingSource/Target CentersSource/Target Data ContainerOuter Circle: cluster boundary Inner Circle: confidence rangeSumMinusRepresentation://        CDD (intra)    CDD (inter)    CDD (inter)    the network parameters are shared between the source do-
main and target domain data other than those of the batch
normalization layers which are domain-speciﬁc. The hyper-
parameters are selected following the same protocol as de-
scribed in [22], i.e. we train a domain classiﬁer and perform
selection on a validation set (of labeled source samples and
unlabeled target samples) by jointly evaluating the test er-
rors of the source classiﬁer and the domain classiﬁer.

We use mini-batch stochastic gradient descent (SGD)
with momentum of 0.9 to train the network. We follow the
same learning rate schedule as described in [10, 22, 25], i.e.
the learning rate ηp is adjusted following ηp =
(1+ap)b ,
where p linearly increases from 0 to 1. The η0 is the initial
learning rate, i.e. 0.001 for the convolutional layers and 0.01
for the task-speciﬁc FC layer. For Ofﬁce-31, a = 10 and
b = 0.75, while for VisDA-2017, a = 10 and b = 2.25. The
β selected is 0.3. The thresholds (D0, N0) are set to (0.05,
3) for Ofﬁce-31 tasks A→W and A→D. And we don’t ﬁlter
target samples and classes for other tasks during training.

η0

4.2. Comparison with the state of the art

Table 1 shows the classiﬁcation accuracy on six tasks
of Ofﬁce-31. All domain adaptation methods yield notable
improvement over the ResNet model (ﬁrst row) which is
ﬁne-tuned on labeled source data only. CAN outperforms
other baseline methods across all tasks, achieving the state-
of-the-art performance. On average, it boosts the accuracy
of JAN by a absolute 6.3% and that of MADA by 5.4%.

We visualize the distribution of learned features by t-
SNE [27]. Fig. 4 illustrates a representative task W → A.
Compared to JAN, as expected, the target data representa-
tions learned by CAN demonstrate higher intra-class com-
pactness and much larger inter-class margin. This suggests
that our CDD produces more discriminative features for the
target domain and substantiates our improvement in Table 1.
Table 2 lists the accuracy over 12 classes on VisDA-2017
with the validation set as the target domain. Our method
outperforms the other baseline methods. The mean accu-
racy of our model (87.2%) outperforms the self-ensembling
(SE) method [9] (84.3%) which wins the ﬁrst place in the
VisDA-2017 competition, by 2.9%. It is worth noting that
SE mainly deals with UDA by ensemble and data augmen-
tation, which is orthogonal to the topic of this paper and thus
can be easily combined to boost the performance further.

Moreover, we also perform adaptation on the VisDA-
2017 test set (as the target domain), and submit our pre-
dictions to ofﬁcial evaluation server. Our goal is to evalu-
ate the effectiveness of our proposed technique based on a
vanilla backbone (ResNet-101). We choose not to use en-
semble or additional data augmentation which is commonly
used to boost the performance in the competition. Anyhow,
our single model achieves a very competitive accuracy of
87.4%, which is comparable to the method which ranks at

4898

Figure 3. The gallery of Ofﬁce-31 and VisDA-2017 datasets.

4. Experiments

4.1. Setups

Datasets: We validate our method on two public bench-
marks. Ofﬁce-31 [30] is a common dataset for real-world
domain adaptation tasks.
It consists of 4,110 images be-
longing to 31 classes. This dataset contains three distinct
domains, i.e., images which are collected from the 1) Ama-
zon website (Amazon domain), 2) web camera (Webcam
domain), and 3) digital SLR camera (DSLR domain) under
different settings, respectively. The dataset is imbalanced
across domains, with 2,817 images in A domain, 795 im-
ages in W domain, and 498 images in D domain.
VisDA-2017 [29] is a challenging testbed for UDA with the
domain shift from synthetic data to real imagery.
In this
paper, we validate our method on its classiﬁcation task. In
total there are ∼280k images from 12 categories. The im-
ages are split into three sets, i.e. a training set with 152,397
synthetic images, a validation set with 55,388 real-world
images, and a test set with 72,372 real-world images. The
gallery of two datasets is shown in Fig. 3
Baselines: We compare our method with class-agnostic dis-
crepancy minimization methods: RevGrad [10, 11], DAN
[22], and JAN [25]. Moreover, we compare our method
with the ones which explicitly or implicitly take the class in-
formation or decision boundary into consideration to learn
more discriminative features: MADA [28], MCD [32],
and ADR [31].The descriptions of these methods can be
found in Section 2. We implement DAN and JAN us-
ing the released code 1. For a comparison under opti-
mal parameter setting, we cite the performance of MADA,
RevGrad, MCD and ADR reported in their corresponding
papers [28, 31, 32, 10].
Implementation details: We use ResNet-50 and ResNet-
101 [14, 15] pretrained on ImageNet [7] as our backbone
networks. We replace the last FC layer with the task-
speciﬁc FC layer, and ﬁnetune the model with labeled
source domain data and unlabeled target domain data. All

1https://github.com/thuml/Xlearn

AmazonDslrWebcamSyntheticRealOffice-31VisDA-2017Method

A → W

D → W

W → D

A → D

D → A

W → A Average

Source-ﬁnetune
68.4 ± 0.2 96.7 ± 0.1 99.3 ± 0.1 68.9 ± 0.2 62.5 ± 0.3 60.7 ± 0.3
RevGrad [10, 11] 82.0 ± 0.4 96.9 ± 0.2 99.1 ± 0.1 79.7 ± 0.4 68.2 ± 0.4 67.4 ± 0.5
DAN [22]
80.5 ± 0.4 97.1 ± 0.2 99.6 ± 0.1 78.6 ± 0.2 63.6 ± 0.3 62.8 ± 0.2
85.4 ± 0.3 97.4 ± 0.2 99.8 ± 0.2 84.7 ± 0.3 68.6 ± 0.3 70.0 ± 0.4
JAN [25]
MADA [28]
90.0 ± 0.2 97.4 ± 0.1 99.6 ± 0.1 87.8 ± 0.2 70.3 ± 0.3 66.4 ± 0.3

Ours (intra only)
Ours (CAN)

93.2 ± 0.2 98.4 ± 0.2 99.8 ± 0.2 92.9 ± 0.2 76.5 ± 0.3 76.0 ± 0.3
94.5 ± 0.3 99.1 ± 0.2 99.8 ± 0.2 95.0 ± 0.3 78.0 ± 0.3 77.0 ± 0.3

76.1
82.2
80.4
84.3
85.2

89.5
90.6

Table 1. Classiﬁcation accuracy (%) for all the six tasks of Ofﬁce-31 dataset based on ResNet-50 [14, 15]. Our methods named “intra only”
and “CAN” are trained with intra-class domain discrepancy and contrastive domain discrepancy, respectively.

e
n
a
l
p
r
i
a

e
l
c
y
c
i
b

s
u
b

r
a
c

e
s
r
o
h

e
f
i
n
k

e
l
c
y
c
r
o
t
o
m

n
o
s
r
e
p

t
n
a
l
p

d
r
a
o
b
e
t
a
k
s

n
i
a
r
t

k
c
u
r
t

Average

Method

7.9

6.1

72.3

63.4 91.7 52.7

Source-ﬁnetune
RevGrad [10, 11] 81.9 77.7 82.8 44.3 81.2 29.5 65.1 28.6 51.9 54.6 82.8
DAN [22]
JAN [25]
MCD [32]
ADR [31]
SE [9]

90.1 18.5 78.1 25.9
7.8
68.1 15.4 76.5 87.0 71.1 48.9 82.3 51.5 88.7 33.2 88.9 42.2
75.7 18.7 82.3 86.3 70.2 56.9 80.5 53.8 92.5 32.2 84.5 54.5
87.0 60.9 83.7 64.0 88.9 79.6 84.7 76.9 88.6 40.3 83.0 25.8
87.8 79.5 83.7 65.3 92.3 61.8 88.9 73.2 87.8 60.0 85.5 32.3
95.9 87.4 85.2 58.6 96.2 95.7 90.6 80.0 94.8 90.8 88.4 47.9

80.1

5.6

Ours (intra only)
Ours (CAN)

96.5 72.1 80.9 70.8 94.6 98.0 91.7 84.2 90.3 89.8 89.4 47.9
97.0 87.2 82.5 74.3 97.8 96.2 90.8 80.7 96.6 96.3 87.5 59.9

49.4
57.4
62.8
65.7
71.9
74.8
84.3

83.9
87.2

Table 2. Classiﬁcation accuracy (%) on the VisDA-2017 validation set based on ResNet-101 [14, 15]. Our methods named “intra only” and
“CAN” are trained with intra-class domain discrepancy and contrastive domain discrepancy, respectively.

Figure 4. Visualization with t-SNE for different adaptation meth-
ods (bested viewed in color). Left: t-SNE of JAN. Right: CAN.
The input activations of the last FC layer are used for the compu-
tation of t-SNE. The results are on Ofﬁce-31 task W → A.

the second place on the leaderboard (87.7%).

From Table 1 and 2, we have two observations: 1)
Taking class information/decision boundary into account is
beneﬁcial for the adaptation. It can be seen that MADA,
MCD, ADR and our method achieve better performance
than class-agnostic methods, e.g. RevGrad, DAN, JAN, etc.
2) Our way of exploiting class information is more effec-
tive. We achieve better accuracy than MADA (+5.4%),
ADR (+12.4%), and MCD (+15.3%).

4.3. Ablation studies

Effect of inter-class domain discrepancy. We compare
our method (“CAN”) with that trained using intra-class dis-
crepancy only (“intra only”), to verify the merits of intro-

ducing inter-class domain discrepancy measure. The results
are shown in the last two rows in Table 1 and 2. It can be
seen that introducing the inter-class domain discrepancy im-
proves the adaptation performance. We believe the reason is
that it is impossible to completely eliminate the intra-class
domain discrepancy, maximizing the inter-class domain dis-
crepancy may alleviate the possibility of the model overﬁt-
ting to the source data and beneﬁts the adaptation.

Effect of alternative optimization and class-aware
sampling.
Table 3 examines two key components of
CAN, i.e. alternative optimization (or “AO”), and class-
aware sampling (or “CAS”). We perform ablation study by
leaving-one-component-out of our framework at a time. In
Table 3, the method “w/o. AO” directly employs the outputs
of the network at each iteration as pseudo target labels to
estimate CDD and back-propagates to update the network.
It can be regarded as updating the feature representations
and pseudo target labels simultaneously. The method “w/o.
CAS” uses conventional class-agnostic sampling instead of
CAS. The comparisons to these two special cases verify the
contributions of AO and CAS in our method.

Interestingly, even without alternative optimization, the
method “w/o. AO” improves over class-agnostic methods,
e.g. DAN, JAN, etc. This suggests our proposed CDD in
itself is robust to the label noise to some extent, and MMD
is a suitable metric to establish CDD (see Section 3.2).

4899

(a)

(b)

(c)

(d)

(a-b) The curve of CDD and accuracy during training on task A → D of the Ofﬁce-31 dataset. The “CDD-G” denotes the
Figure 5.
contrastive domain discrepancy computed with ground-truth target labels. (c-d) The sensitivity of accuracy of CAN to β. The results for
A → D (Left) and D → A (Right) are illustrated as examples. The trends for other tasks are similar.

Dataset

w/o. AO w/o. CAS CAN

Ofﬁce-31
VisDA-2017

88.1
77.5

89.1
81.6

90.6
87.2

Table 3. The effect of alternative optimization (AO) and CAS. The
mean accuracy over six tasks on Ofﬁce-31 and the mean accuracy
over 12 classes on VisDA-2017 validation set are reported.

Method A → W A → D

D → A W → A Average

85.8

pseudo0
pseudo1 90.2 ± 1.6 92.5 ± 0.4 75.7 ± 0.2 75.3 ± 0.6
CAN
94.5 ± 0.3 95.0 ± 0.3 78.0 ± 0.3 77.0 ± 0.3

86.3

74.9

72.3

79.8
83.4
86.1

Table 4. Comparison with different ways of utilizing pseudo tar-
get labels.The “pseudo0” means training with pseudo target labels
(achieved by our initial clustering) directly. The “pseudo1” is to
alternatively update target labels through clustering and minimize
the cross-entropy loss on pseudo labeled target data. In “pseudo1”,
the cross-entropy loss on source data is also minimized.

Ways of using pseudo target labels. The estimates for
the target labels can be achieved through clustering, which
enables various ways to train a model. In Table 4, we com-
pare our method with two different ways of training with
pseudo target labels achieved by the clustering. One way
(“pseudo0”) is to ﬁx these pseudo labels to train a model
directly. The other (“pseudo1”) is to update the pseudo tar-
get labels during training, which is the same as CAN, but to
train the model based on the cross-entropy loss over pseudo
labeled target data rather than estimating the CDD.

As shown in Table 4, “pseudo0” leads to a model whose
accuracy exactly matches with that of the initial cluster-
ing, due to the large capacity of deep neural networks.
The “pseudo1” achieves signiﬁcantly better results than
“pseudo0”, but is still worse than our CAN, which veriﬁes
that our way of explicitly modeling the class-aware domain
discrepancy makes the model better adapted and less likely
to be affected by the label noise.

CDD value during training. In our training, we gen-
erate target label hypothesis to estimate CDD. We expect
that the underlying metric computed with the ground-truth
target labels would decrease steadily during training until

convergence. To do so, during training, we evaluate the
ground-truth CDD (denoted by CDD-G) for JAN and CAN
with the ground-truth target labels. The trend of CDD and
the test accuracy during training are plotted in Fig. 5.

As we see, for JAN (the blue curve), the ground-truth
CDD rapidly becomes stable at a high level after a short
decrease. This indicates that JAN cannot minimize the con-
trastive domain discrepancy effectively. For CAN (the red
curve), although we can only estimate the CDD using in-
accurate target label hypothesis, its CDD value steadily de-
creases along training. The result illustrates our estimation
works as a good proxy of ground-truth contrastive domain
discrepancy. And from the accuracy curve illustrated in Fig.
5, we see that minimizing CDD leads to notable accuracy
improvement of CAN, compared to JAN.

Hyper-parameter sensitivity. We study the sensitivity
of CAN to the important balance weight β on two example
tasks A → D and D → A in Fig. 5. Generally, our model
is less sensitive to the change of β.
In a vast range, the
performance of CAN outperforms the baseline method with
a large margin (the blue dashed curve). As the β gets larger,
the accuracy steadily increases before decreasing. The bell-
shaped curve illustrates the regularization effect of CDD.

5. Conclusion

In this paper, we proposed Contrastive Adaptation Net-
work to perform class-aware alignment for UDA. The intra-
class and inter-class domain discrepancy are explicitly mod-
eled and optimized through end-to-end mini-batch training.
Experiments on real-world benchmarks demonstrate the su-
periority of our model compared with the strong baselines.
Acknowledgement. This work was supported in part by
the Intelligence Advanced Research Projects Activity (IARPA) via
Department of Interior/Interior Business Center (DOI/IBC) con-
tract number D17PC00340. The U.S. Government is authorized to
reproduce and distribute reprints for Governmental purposes not
withstanding any copyright annotation/herein. Disclaimer: The
views and conclusions contained herein are those of the authors
and should not be interpreted as necessarily representing the of-
ﬁcial policies or endorsements, either expressed or implied, of
IARPA, DOI/IBC, or the U.S.Government.

4900

References

[1] S. Ben-David, J. Blitzer, K. Crammer, A. Kulesza, F. Pereira,
and J. W. Vaughan. A theory of learning from different do-
mains. Machine learning, 79(1-2):151–175, 2010. 1

[2] S. Ben-David, J. Blitzer, K. Crammer, and F. Pereira. Anal-
ysis of representations for domain adaptation. In Advances
in neural information processing systems, pages 137–144,
2007. 1

[3] K. Bousmalis, N. Silberman, D. Dohan, D. Erhan, and D. Kr-
ishnan. Unsupervised pixel-level domain adaptation with
generative adversarial networks.
In The IEEE Conference
on Computer Vision and Pattern Recognition (CVPR), vol-
ume 1, page 7, 2017. 1

[4] K. Bousmalis, G. Trigeorgis, N. Silberman, D. Krishnan, and
D. Erhan. Domain separation networks. In Advances in Neu-
ral Information Processing Systems, pages 343–351, 2016. 2
[5] L. Bruzzone and M. Marconcini. Domain adaptation prob-
lems: A dasvm classiﬁcation technique and a circular vali-
dation strategy. IEEE transactions on pattern analysis and
machine intelligence, 32(5):770–787, 2010. 1

[6] D. Cheng, Y. Gong, S. Zhou, J. Wang, and N. Zheng. Person
re-identiﬁcation by multi-channel parts-based cnn with im-
proved triplet loss function. In Proceedings of the IEEE Con-
ference on Computer Vision and Pattern Recognition, pages
1335–1344, 2016. 2

[7] J. Deng, W. Dong, R. Socher, L.-J. Li, K. Li, and L. Fei-
Fei. Imagenet: A large-scale hierarchical image database. In
CVPR, 2009. 1, 4, 6

[8] X. Dong and Y. Yang. Searching for a robust neural architec-
ture in four gpu hours. In Proceedings of the IEEE Confer-
ence on Computer Vision and Pattern Recognition (CVPR),
2019. 1

[9] G. French, M. Mackiewicz, and M. Fisher. Self-ensembling

for domain adaptation. ICLR, 2018. 6, 7

[10] Y. Ganin and V. Lempitsky. Unsupervised domain adaptation

by backpropagation. ICML, 2015. 2, 6, 7

[11] Y. Ganin, E. Ustinova, H. Ajakan, P. Germain, H. Larochelle,
F. Laviolette, M. Marchand, and V. Lempitsky. Domain-
adversarial training of neural networks. The Journal of Ma-
chine Learning Research, 17(1):2096–2030, 2016. 6, 7

[12] R. Hadsell, S. Chopra, and Y. LeCun. Dimensionality reduc-
tion by learning an invariant mapping. In Computer vision
and pattern recognition, 2006 IEEE computer society con-
ference on, volume 2, pages 1735–1742. IEEE, 2006. 2

[13] P. Haeusser, T. Frerix, A. Mordvintsev, and D. Cremers. As-
sociative domain adaptation. In International Conference on
Computer Vision (ICCV), volume 2, page 6, 2017. 2

[14] K. He, X. Zhang, S. Ren, and J. Sun. Deep residual learn-
ing for image recognition. In Proceedings of the IEEE con-
ference on computer vision and pattern recognition, pages
770–778, 2016. 4, 6, 7

[15] K. He, X. Zhang, S. Ren, and J. Sun. Identity mappings in
deep residual networks. In European Conference on Com-
puter Vision, pages 630–645. Springer, 2016. 4, 6, 7

[17] J. Hoffman, E. Tzeng, T. Park, J.-Y. Zhu, P. Isola, K. Saenko,
A. A. Efros, and T. Darrell. Cycada: Cycle-consistent adver-
sarial domain adaptation. arXiv preprint arXiv:1711.03213,
2017. 1

[18] J. Hoffman, D. Wang, F. Yu, and T. Darrell. Fcns in the
wild: Pixel-level adversarial and constraint-based adapta-
tion. arXiv preprint arXiv:1612.02649, 2016. 1

[19] L. Jiang, D. Meng, T. Mitamura, and A. G. Hauptmann. Easy
samples ﬁrst: Self-paced reranking for zero-example multi-
media search. In Proceedings of the 22nd ACM international
conference on Multimedia, pages 547–556. ACM, 2014. 1

[20] G. Kang, J. Li, and D. Tao. Shakeout: A new approach to
regularized deep neural network training. IEEE transactions
on pattern analysis and machine intelligence, 40(5):1245–
1258, 2018. 1

[21] G. Kang, L. Zheng, Y. Yan, and Y. Yang. Deep adversarial
attention alignment for unsupervised domain adaptation: the
beneﬁt of target expectation maximization. In Proceedings
of the European Conference on Computer Vision (ECCV),
pages 401–416, 2018. 2

[22] M. Long, Y. Cao, J. Wang, and M. I. Jordan. Learning
transferable features with deep adaptation networks. arXiv
preprint arXiv:1502.02791, 2015. 1, 2, 4, 6, 7

[23] M. Long, J. Wang, G. Ding, J. Sun, and S. Y. Philip. Transfer
feature learning with joint distribution adaptation. In Com-
puter Vision (ICCV), 2013 IEEE International Conference
on, pages 2200–2207. IEEE, 2013. 2

[24] M. Long, H. Zhu, J. Wang, and M. I. Jordan. Unsuper-
vised domain adaptation with residual transfer networks. In
Advances in Neural Information Processing Systems, pages
136–144, 2016. 2

[25] M. Long, H. Zhu, J. Wang, and M. I. Jordan. Deep transfer
learning with joint adaptation networks. ICML, 2017. 1, 2,
4, 6, 7

[26] Y. Luo, L. Zheng, T. Guan, J. Yu, and Y. Yang. Taking
a closer look at domain shift: Category-level adversaries
for semantics consistent domain adaptation.
In The IEEE
Conference on Computer Vision and Pattern Recognition
(CVPR), 2019. 1

[27] L. v. d. Maaten and G. Hinton. Visualizing data using t-sne.
Journal of machine learning research, 9(Nov):2579–2605,
2008. 6

[28] Z. Pei, Z. Cao, M. Long, and J. Wang. Multi-adversarial
domain adaptation. In AAAI Conference on Artiﬁcial Intelli-
gence, 2018. 2, 6, 7

[29] X. Peng, B. Usman, N. Kaushik, J. Hoffman, D. Wang, and
K. Saenko. Visda: The visual domain adaptation challenge.
arXiv preprint arXiv:1710.06924, 2017. 2, 6

[30] K. Saenko, B. Kulis, M. Fritz, and T. Darrell. Adapting vi-
sual category models to new domains. In European confer-
ence on computer vision, pages 213–226. Springer, 2010. 1,
2, 6

[31] K. Saito, Y. Ushiku, T. Harada, and K. Saenko. Adversarial

dropout regularization. ICLR, 2018. 2, 6, 7

[16] A. Hermans, L. Beyer, and B. Leibe.

loss for person re-identiﬁcation.

triplet
arXiv:1703.07737, 2017. 2

In defense of the
arXiv preprint

[32] K. Saito, K. Watanabe, Y. Ushiku, and T. Harada. Maximum
classiﬁer discrepancy for unsupervised domain adaptation.
CVPR, 2018. 2, 6, 7

4901

[33] F. Schroff, D. Kalenichenko, and J. Philbin. Facenet: A
uniﬁed embedding for face recognition and clustering.
In
Proceedings of the IEEE conference on computer vision and
pattern recognition, pages 815–823, 2015. 2

[34] D. Sejdinovic, B. Sriperumbudur, A. Gretton, and K. Fuku-
mizu. Equivalence of distance-based and rkhs-based statis-
tics in hypothesis testing. The Annals of Statistics, pages
2263–2291, 2013. 3

[35] O. Sener, H. O. Song, A. Saxena, and S. Savarese. Learning
transferrable representations for unsupervised domain adap-
tation. In Advances in Neural Information Processing Sys-
tems, pages 2110–2118, 2016. 2

[36] B. Sun and K. Saenko. Deep coral: Correlation alignment for
deep domain adaptation. In European Conference on Com-
puter Vision, pages 443–450. Springer, 2016. 2

[37] E. Tzeng, J. Hoffman, K. Saenko, and T. Darrell. Adversarial
discriminative domain adaptation. In Computer Vision and
Pattern Recognition (CVPR), volume 1, page 4, 2017. 1

[38] E. Tzeng, J. Hoffman, N. Zhang, K. Saenko, and T. Darrell.
Deep domain confusion: Maximizing for domain invariance.
arXiv preprint arXiv:1412.3474, 2014. 2

[39] J. Wang, W. Feng, Y. Chen, H. Yu, M. Huang, and P. S. Yu.
Visual domain adaptation with manifold embedded distribu-
tion alignment.
In 2018 ACM Multimedia Conference on
Multimedia Conference, pages 402–410. ACM, 2018. 2

[40] L. Zhu, Z. Xu, and Y. Yang. Bidirectional multirate recon-
struction for temporal modeling in videos. In Proceedings
of the IEEE Conference on Computer Vision and Pattern
Recognition, pages 2653–2662, 2017. 1

4902

