Domain Generalization by Solving Jigsaw Puzzles

Fabio M. Carlucci1 ∗

Antonio D’Innocente2

3

,

Silvia Bucci3

Barbara Caputo3

4

,

Tatiana Tommasi4

1Huawei, London

2University of Rome Sapienza, Italy

3Italian Institute of Technology

4Politecnico di Torino, Italy

fabio.maria.carlucci@huawei.com

{antonio.dinnocente, silvia.bucci}@iit.it

{barbara.caputo, tatiana.tommasi}@polito.it

Abstract

Human adaptability relies crucially on the ability to
learn and merge knowledge both from supervised and un-
supervised learning: the parents point out few important
concepts, but then the children ﬁll in the gaps on their own.
This is particularly effective, because supervised learning
can never be exhaustive and thus learning autonomously
allows to discover invariances and regularities that help
to generalize. In this paper we propose to apply a similar
approach to the task of object recognition across domains:
our model learns the semantic labels in a supervised fash-
ion, and broadens its understanding of the data by learning
from self-supervised signals how to solve a jigsaw puzzle on
the same images. This secondary task helps the network to
learn the concepts of spatial correlation while acting as a
regularizer for the classiﬁcation task. Multiple experiments
on the PACS, VLCS, Ofﬁce-Home and digits datasets con-
ﬁrm our intuition and show that this simple method outper-
forms previous domain generalization and adaptation solu-
tions. An ablation study further illustrates the inner work-
ings of our approach.

1. Introduction

In the current gold rush towards artiﬁcial intelligent sys-
tems it is becoming more and more evident that there is
little intelligence without the ability to transfer knowledge
and generalize across tasks, domains and categories [11].
A large portion of computer vision research is dedicated
to supervised methods that show remarkable results with
convolutional neural networks in well deﬁned settings, but
still struggle when attempting these types of generaliza-
tions. Focusing on the ability to generalize across domains,

∗This work was done while at University of Rome Sapienza, Italy

What is  
this object?

...

And this
one?

Can you
recompose
these
images?

...

And
these
ones?

horse!

Figure 1. Recognizing objects across visual domains is a challeng-
ing task that requires high generalization abilities. Other tasks,
based on intrinsic self-supervisory image signals, allow to capture
natural invariances and regularities that can help to bridge across
large style gaps. With JiGen we learn jointly to classify objects and
solve jigsaw puzzles, showing that this supports generalization to
new domains.

the community has attacked this issue so far mainly by su-
pervised learning processes that search for semantic spaces
able to capture basic data knowledge regardless of the spe-
ciﬁc appearance of input images. Existing methods range
from decoupling image style from the shared object con-
tent [3], to pulling data of different domains together and
imposing adversarial conditions [27, 28], up to generating
new samples to better cover the space spanned by any future
target [39, 46]. With the analogous aim of getting general
purpose feature embeddings, an alternative research direc-
tion has been recently pursued in the area of unsupervised
learning. The main techniques are based on the deﬁnition of
tasks useful to learn visual invariances and regularities cap-
tured by spatial co-location of patches [35, 10, 37], counting
primitives [36], image coloring [49], video frame ordering
[32, 47] and other self-supervised signals.

Since unlabeled data are largely available and by their
very nature are less prone to bias (no labeling bias issue

2229

[44]), they seem the perfect candidate to provide visual in-
formation independent from speciﬁc domain styles. Despite
their large potential, the existing unsupervised approaches
often come with tailored architectures that need dedicated
ﬁnetuning strategies to re-engineer the acquired knowledge
and make it usable as input for a standard supervised train-
ing process [37]. Moreover, this knowledge is generally ap-
plied on real-world photos and has not been challenged be-
fore across large domain gaps with images of other nature
like paintings or sketches.

This clear separation between learning intrinsic regulari-
ties from images and robust classiﬁcation across domains is
in contrast with the visual learning strategies of biological
systems, and in particular of the human visual system. In-
deed, numerous studies highlight that infants and toddlers
learn both to categorize objects and about regularities at the
same time [2]. For instance, popular toys for infants teach
to recognize different categories by ﬁtting them into shape
sorters; jigsaw puzzles of animals or vehicles to encour-
age learning of object parts’ spatial relations are equally
widespread among 12-18 months old. This type of joint
learning is certainly a key ingredient in the ability of hu-
mans to reach sophisticated visual generalization abilities
at an early age [16].

Inspired by this, we propose the ﬁrst end-to-end archi-
tecture that learns simultaneously how to generalize across
domains and about spatial co-location of image parts (Fig-
ure 1, 2). In this work we focus on the unsupervised task
of recovering an original image from its shufﬂed parts, also
known as solving jigsaw puzzles. We show how this popular
game can be re-purposed as a side objective to be optimized
jointly with object classiﬁcation over different source do-
mains and improve generalization with a simple multi-task
process [7]. We name our Jigsaw puzzle based Generaliza-
tion method JiGen. Differently from previous approaches
that deal with separate image patches and recombine their
features towards the end of the learning process [35, 10, 37],
we move the patch re-assembly at the image level and we
formalize the jigsaw task as a classiﬁcation problem over
recomposed images with the same dimension of the origi-
nal one. In this way object recognition and patch reordering
can share the same network backbone and we can seam-
lessly leverage over any convolutional learning structure as
well as several pretrained models without the need of spe-
ciﬁc architectural changes.

We demonstrate that JiGen allows to better capture the
shared knowledge among multiple sources and acts as a reg-
ularization tool for a single source. In the case unlabeled
samples of the target data are available at training time, run-
ning the unsupervised jigsaw task on them contributes to
the feature adaptation process and shows competing results
with respect to state of the art unsupervised domain adapta-
tion methods.

2. Related Work

Solving Jigsaw Puzzles The task of recovering an orig-
inal image from its shufﬂed parts is a basic pattern recog-
nition problem that is commonly identiﬁed with the jigsaw
puzzle game.
In the area of computer science and artiﬁ-
cial intelligence it was ﬁrst introduced by [17], which pro-
posed a 9-piece puzzle solver based only on shape informa-
tion and ignoring the image content. Later, [22] started to
make use of both shape and appearance information. The
problem has been mainly cast as predicting the permuta-
tions of a set of squared patches with all the challenges re-
lated to number and dimension of the patches, their com-
pleteness (if all tiles are/aren’t available) and homogeneity
(presence/absence of extra tiles from other images). The
application ﬁeld for algorithms solving jigsaw puzzles is
wide, from computer graphics and image editing [8, 40]
to re-compose relics in archaeology [4, 38], from model-
ing in biology [31] to unsupervised learning of visual repre-
sentations [15, 35, 10]. Existing assembly strategies can be
broadly classiﬁed into two main categories: greedy methods
and global methods. The ﬁrst ones are based on sequential
pairwise matches, while the second ones search for solu-
tions that directly minimize a global compatibility measure
over all the patches. Among the greedy methods, [18] pro-
posed a minimum spanning tree algorithm which progres-
sively merges components while respecting the geometric
consistent constraint. To eliminate matching outliers, [41]
introduced loop constraints among the patches. The prob-
lem can be also formulated as a classiﬁcation task to predict
the relative position of a patch with respect to another as
in [15]. Recently, [38] expressed the patch reordering as
the shortest path problem on a graph whose structure de-
pends on the puzzle completeness and homogeneity. The
global methods consider all the patches together and use
Markov Random Field formulations [9], or exploit genetic
algorithms [40]. A condition on the consensus agreement
among neighbors is used in [42], while [35] focuses on a
subset of possible permutations involving all the image tiles
and solves a classiﬁcation problem. The whole set of per-
mutations is instead considered in [10] by approximating
the permutation matrix and solving a bi-level optimization
problem to recover the right ordering.

Regardless of the speciﬁc approach and application, all
the most recent deep-learning jigsaw-puzzle solvers tackle
the problem by dealing with the separate tiles and then ﬁnd-
ing a way to recombine them. This implies designing tile-
dedicated network architectures then followed by some spe-
ciﬁc process to transfer the collected knowledge in more
standard settings that manage whole image samples.

Domain Generalization and Adaptation The goal of
domain generalization (DG) is that of learning a system that
can perform uniformly well across multiple data distribu-

2230

 

index: p = 1 
permutation:
1,2,3,4,5,6,7,8,9

 

index p = 2 
permutation:
9,2,3,4,5,6,7,8,1

...

 

index p = P 
permutation:
1,9,5,6,3,2,8,4,7

 
 

Ordered
Images

Shufﬂed
Images

...

Convnet

Object Classiﬁer
(object label) 

Jigsaw Classiﬁer
(permutation index)

Figure 2. Illustration of the proposed method JiGen. We start from images of multiple domains and use a 3 × 3 grid to decompose them
in 9 patches which are then randomly shufﬂed and used to form images of the same dimension of the original ones. By using the maximal
Hamming distance algorithm in [35] we deﬁne a set of P patch permutations and assign an index to each of them. Both the original ordered
and the shufﬂed images are fed to a convolutional network that is optimized to satisfy two objectives: object classiﬁcation on the ordered
images and jigsaw classiﬁcation, meaning permutation index recognition, on the shufﬂed images.

tions. The main challenge is being able to distill the most
useful and transferrable general knowledge from samples
belonging to a limited number of population sources. Sev-
eral works have reduced the problem to the domain adap-
tation (DA) setting where a fully labeled source dataset and
an unlabeled set of examples from a different target domain
are available [11]. In this case the provided target data is
used to guide the source training procedure, that however
has to run again when changing the application target. To
get closer to real world conditions, recent work has started
to focus on cases where the source data are drawn from
multiple distributions [30, 48] and the target covers only a
part of the source classes [5, 1]. For the more challenging
DG setting with no target data available at training time, a
large part of the previous literature presented model-based
strategies to neglect domain speciﬁc signatures from multi-
ple sources. They are both shallow and deep learning meth-
ods that build over multi-task learning [21], low-rank net-
work parameter decomposition [26] or domain speciﬁc ag-
gregation layers [14]. Alternative solutions are based on
source model weighting [29], or on minimizing a validation
measure on virtual tests deﬁned from the available sources
[25]. Other feature-level approaches search for a data rep-
resentation able to capture information shared among mul-
tiple domains. This was formalized with the use of deep
learning autoencoders in [20, 27], while [33] proposed to
learn an embedding space where images of same classes but
different sources are projected nearby. The recent work of
[28] adversarially exploits class-speciﬁc domain classiﬁca-
tion modules to cover the cases where the covariate shift
assumption does not hold and the sources have different
class conditional distributions. Data-level methods propose
to augment the source domain cardinality with the aim of
covering a larger part of the data space and possibly get
closer to the target. This solution was at ﬁrst presented with

the name of domain randomization [43] for samples from
simulated environments whose variety was extended with
random renderings.
In [39] the augmentation is obtained
with domain-guided perturbations of the original source in-
stances. Even when dealing with a single source domain,
[46] showed that it is still possible to add adversarially
perturbed samples by deﬁning ﬁctitious target distributions
within a certain Wasserstein distance from the source.

Our work stands in this DG framework, but proposes an
orthogonal solution with respect to previous literature by in-
vestigating the importance of jointly exploiting supervised
and unsupervised inherent signals from the images.

3. The JiGen Approach

j, yi

j)}Ni

j indicates the j-th image and yi

Starting from the samples of multiple source domains,
we wish to learn a model that can perform well on any
new target data population covering the same set of cate-
gories. Let us assume to observe S domains, with the i-
th domain containing Ni labeled instances {(xi
j=1,
where xi
j ∈ {1, . . . , C}
is its class label. The ﬁrst basic objective of JiGen is to
minimize the loss Lc(h(x|θf , θc), y) that measures the er-
ror between the true label y and the label predicted by the
deep model function h, parametrized by θf and θc. These
parameters deﬁne the feature embedding space and the ﬁ-
nal classiﬁer, respectively for the convolutional and fully
connected parts of the network. Together with this objec-
tive, we ask the network to satisfy a second condition re-
lated to solving jigsaw puzzles. We start by decomposing
the source images using a regular n × n grid of patches,
which are then shufﬂed and re-assigned to one of the n2
grid positions. Out of the n2! possible permutations we se-
lect a set of P elements by following the Hamming distance
based algorithm in [35], and we assign an index to each en-

2231

k=1, where zi

try. In this way we deﬁne a second classiﬁcation task on
k)}Ki
k, pi
Ki labeled instances {(zi
k indicates the
recomposed samples and pi
k ∈ {1, . . . , P } the related per-
mutation index, for which we need to minimize the jigsaw
loss Lp(h(z|θf , θp), p). Here the deep model function h has
the same structure used for object classiﬁcation and shares
with that the parameters θf . The ﬁnal fully connected layer
dedicated to permutation recognition is parametrized by θp.
Overall we train the network to obtain the optimal model
through

S

Ni

argmin
θf ,θc,θp

X

X

i=1

j=1

Ki

X

k=1

Lc(h(xi

j|θf , θc), yi

j)+

αLp(h(zi

k|θf , θp), pi
k)

(1)

where both Lc and Lp are standard cross-entropy losses. We
underline that the jigsaw loss is also calculated on the or-
dered images. Indeed, the correct patch sorting corresponds
to one of the possible permutations and we always include
it in the considered subset P . On the other way round, the
classiﬁcation loss is not inﬂuenced by the shufﬂed images,
since this would make object recognition tougher. At test
time we use only the object classiﬁer to predict on the new
target images.

target domain when available at

Extension
to Unsupervised Domain Adaptation
Thanks to the unsupervised nature of the jigsaw puz-
zle task, we can always extend JiGen to the unlabeled
samples of
training
time. This allows us to exploit the jigsaw task for un-
supervised domain adaptation.
In this setting, for the
target ordered images we minimize the classiﬁer pre-
diction uncertainty through the empirical entropy loss
LE(xt) = Py∈Y h(xt|θf , θc)log{h(xt|θf , θc)}, while for
the shufﬂed target images we keep optimizing the jigsaw
loss Lp(h(zt|θf , θp), pt).
Implementation Details Overall JiGen1 has two param-
eters related to how we deﬁne the jigsaw task, and three re-
lated to the learning process. The ﬁrst two are respectively
the grid size n × n used to deﬁne the image patches and the
cardinality of the patch permutation subset P . As we will
detail in the following section, JiGen is robust to these val-
ues and for all our experiments we kept them ﬁxed, using
3 × 3 patch grids and P = 30. The remaining parameters
are the weights α of the jigsaw loss, and η assigned to the
entropy loss when included in the optimization process for
unsupervised domain adaptation. The ﬁnal third parameter
regulates the data input process: the shufﬂed images enter
the network together with the original ordered ones, hence
each image batch contains both of them. We deﬁne a data
bias parameter β to specify their relative ratio. For instance

1Code available at https://github.com/fmcarlucci/JigenDG

β = 0.6 means that for each batch, 60% of the images are
ordered, while the remaining 40% are shufﬂed. These last
three parameters were chosen by cross validation on a 10%
subset of the source images for each experimental setting.

We designed the JiGen network making it able to lever-
age over many possible convolutional deep architectures.
Indeed it is sufﬁcient to remove the existing last fully con-
nected layer of a network and substitute it with the new ob-
ject and jigsaw classiﬁcation layers. JiGen is trained with
SGD solver, 30 epochs, batch size 128, learning rate set to
0.001 and stepped down to 0.0001 after 80% of the training
epochs. We used a simple data augmentation protocol by
randomly cropping the images to retain between 80 − 100%
and randomly applied horizontal ﬂipping. Following [37]
we randomly (10% probability) convert an image tile to
grayscale.

4. Experiments

Datasets To evaluate the performance of JiGen when
training over multiple sources we considered three domain
generalization datasets. PACS [26] covers 7 object cate-
gories and 4 domains (Photo, Art Paintings, Cartoon and
Sketches). We followed the experimental protocol in [26]
and trained our model considering three domains as source
datasets and the remaining one as target. VLCS [44] aggre-
gates images of 5 object categories shared by the PASCAL
VOC 2007, LabelMe, Caltech and Sun datasets which are
considered as 4 separated domains. We followed the stan-
dard protocol of [20] dividing each domain into a training
set (70%) and a test set (30%) by random selection from
the overall dataset. The Ofﬁce-Home dataset [45] contains
65 categories of daily objects from 4 domains: Art, Clipart,
Product and Real-World. In particular Product images are
from vendor websites and show a white background, while
Real-World represents object images collected with a regu-
lar camera. For this dataset we used the same experimental
protocol of [14]. Note that Ofﬁce-Home and PACS are re-
lated in terms of domain types and it is useful to consider
both as test-beds to check if JiGen scales when the number
of categories changes from 7 to 65. Instead VLCS offers
different challenges because it combines object categories
from Caltech with scene images of the other domains.

To understand if solving jigsaw puzzles supports gener-
alization even when dealing with a single source, we ex-
tended our analysis to digit classiﬁcation as in [46]. We
trained a model on 10k digit samples of the MNIST dataset
[24] and evaluated on the respective test sets of MNIST-
M [19] and SVHN [34]. To work with comparable datasets,
all the images were resized to 32 × 32 treated as RGB.

Patch-Based Convolutional Models for Jigsaw Puzzles
We start our experimental analysis by evaluating the ap-
plication of existing jigsaw related patch-based convolu-

2232

PACS

art paint. cartoon sketches photo

Avg.

CFN - Alexnet

J-CFN-Finetune

47.23
J-CFN-Finetune++ 51.14
59.69
C-CFN-Deep All
60.68

C-CFN-JiGen

[26]

[28]

[25]

[14]

Deep All

TF

Deep All
DeepC
CIDDG
Deep All
MLDG
Deep All
D-SAM
Deep All

JiGen

63.30
62.86
57.55
62.30
62.70
64.91
66.23
64.44
63.87
66.68
67.63

62.18
58.83
59.88
60.55
Alexnet
63.13
66.97
67.04
69.58
69.73
64.28
66.88
72.07
70.70
69.41
71.71

Resnet-18

58.03
54.85
45.66
55.66

54.07
57.51
58.52
64.45
64.45
53.08
58.96
58.07
64.66
60.02
65.18

70.18
73.44
85.42
82.68

87.70
89.50
77.98
80.72
78.65
86.67
88.00
87.50
85.55
89.98
89.00

59.41
59.57
62.66
64.89

67.05
69.21
65.27
69.26
68.88
67.24
70.01
70.52
71.20
71.52
73.38

[14]

JiGen

77.87
77.33
77.85
79.42

75.89
72.43
74.86
75.25

95.19
95.30
95.73
96.03

69.27
77.83
67.74
71.35

Deep All
D-SAM
Deep All

79.55
80.72
79.05
80.51
Table 1. Domain Generalization results on PACS. The results of
JiGen are average over three repetitions of each run. Each column
title indicates the name of the domain used as target. We use the
bold font to highlight the best results of the generalization meth-
ods, while we underline a result when it is higher than all the others
despite produced by the na¨ıve Deep All baseline. Top: comparison
with previous methods that use the jigsaw task as a pretext to learn
transferable features using a context-free siamese-ennead network
(CFN). Center and Bottom: comparison of JiGen with several do-
main generalization methods when using respectively Alexnet and
Resnet-18 architectures.

Figure 3. Confusion matrices on Alexnet-PACS DG setting, when
sketches is used as target domain.

tional architectures and models to the domain generaliza-
tion task. We considered two recent works that proposed
a jigsaw puzzle solver for 9 shufﬂed patches from images

decomposed by a regular 3 × 3 grid. Both [35] and [37]
use a Context-Free Network (CFN) with 9 siamese branches
that extract features separately from each image patch and
then recompose them before entering the ﬁnal classiﬁca-
tion layer. Speciﬁcally, each CFN branch is an Alexnet
[23] up to the ﬁrst fully connected layer (f c6) and all the
branches share their weights. Finally, the branches’ outputs
are concatenated and given as input to the following fully
connected layer (f c7). The jigsaw puzzle task is formal-
ized as a classiﬁcation problem on a subset of patch per-
mutations and, once the network is trained on a shufﬂed
version of Imagenet [12], the learned weights can be used
to initialize the conv layers of a standard Alexnet while the
rest of the network is trained from scratch for a new target
task. Indeed, according to the original works, the learned
representation is able to capture semantically relevant con-
tent from the images regardless of the object labels. We
followed the instructions in [35] and started from the pre-
trained Jigsaw CFN (J-CFN) model provided by the authors
to run ﬁnetuning for classiﬁcation on the PACS dataset with
all the source domain samples aggregated together. In the
top part of Table 1 we indicate with J-CFN-Finetune the
results of this experiment using the jigsaw model proposed
in [35], while with J-CFN-Finetune++ the results from the
advanced model proposed in [37]. In both cases the average
classiﬁcation accuracy on the domains is lower than what
can be obtained with a standard Alexnet model pre-trained
for object classiﬁcation on Imagenet and ﬁnetuned on all the
source data aggregated together. We indicate this baseline
approach with Deep All and we can use as reference the cor-
responding values in the following central part of Table 1.
We can conclude that, despite its power as an unsupervised
pretext task, completely disregarding the object labels when
solving jigsaw puzzles induces a loss of semantic informa-
tion that may be crucial for generalization across domains.

To demonstrate the potentialities of the CFN architec-
ture, the authors of [35] used it also to train a supervised ob-
ject Classiﬁcation model on Imagenet (C-CFN) and demon-
strated that it can produce results analogous to the standard
Alexnet. With the aim of further testing this network to
understand if and how much its peculiar siamese-ennead
structure can be useful to distill shared knowledge across
domains, we considered it as the main convolutional back-
bone for JiGen. Starting from the C-CFN model provided
by the authors, we ran the obtained C-CFN-JiGen on PACS
data, as well as its plain object classiﬁcation version with
the jigsaw loss disabled (α = 0) that we indicate as C-CFN-
Deep All. From the obtained recognition accuracy we can
state that combining the jigsaw puzzle with the classiﬁca-
tion task provides an average improvement in performance,
which is the ﬁrst result to conﬁrm our intuition. However,
C-CFN-Deep All is still lower than the reference results ob-
tained with standard Alexnet.

2233

For all the following experiments we consider the con-
volutional architecture of JiGen built with the same main
structure of Alexnet or Resnet, using always the image as
a whole (ordered or shufﬂed) instead of relying on separate
patch-based network branches. A detailed comparison of
per-class results on the challenging sketches domain for J-
CFN-Finetune++ and JiGen based on Alexnet reveals that
for four out of seven categories, J-CFN-Finetune++ is actu-
ally doing a good job, better than Deep All. With JiGen we
improve over Deep All for the same categories by solving
jigsaw puzzles at image level and we keep the advantage of
Deep All for the remaining categories.

Multi-Source Domain Generalization We compare the
performance of JiGen against several recent domain gener-
alization methods. TF is the low-rank parametrized net-
work that was presented together with the dataset PACS
in [26]. CIDDG is the conditional invariant deep domain
generalization method presented in [28] that trains for im-
age classiﬁcation with two adversarial constraints: one that
maximizes the overall domain confusion following [19] and
a second one that does the same per-class. In the DeepC
variant, only this second condition is enabled. MLDG
[25] is a meta-learning approach that simulates train/test do-
main shift during training and exploit them to optimize the
learning model. CCSA [33] learns an embedding subspace
where mapped visual domains are semantically aligned
and yet maximally separated. MMD-AAE [27] is a deep
method based on adversarial autoencoders that learns an in-
variant feature representation by aligning the data distribu-
tions to an arbitrary prior through the Maximum Mean Dis-
crepancy (MMD). SLRC [13] is based on a single domain
invariant network and multiple domain speciﬁc ones and it
applies a low rank constraint among them. D-SAM [14] is
a method based on the use of domain-speciﬁc aggregation
modules combined to improve model generalization: it pro-
vides the current sota results on PACS and Ofﬁce-Home.
For each of these methods, the Deep All baseline indicates
the performance of the corresponding network when all the
introduced domain adaptive conditions are disabled.

The central and bottom parts of Table 1 show the re-
sults of JiGen on the dataset PACS when using as back-
bone architecture Alexnet and Resnet-182. On average Ji-
Gen produces the best result when using Alexnet and it is
just slightly worse than the D-SAM reference for Resnet-18.
Note however, that in this last case, JiGen outperforms D-
SAM in three out of four target cases and the average advan-
tage of D-SAM originate only from its result on sketches.
On average, JiGen outperforms also the competing methods
on the VLCS and on the Ofﬁce-Home datasets (see respec-
tively Table 2 and 3). In particular we remark that VLCS
is a tough setting where the most recent works have only

2With Resnet18, to put JiGen on equal footing with D-SAM we follow

the same data augmentation protocol in [14] and enabled color jittering.

VLCS

Caltech Labelme Pascal Sun

Avg.

[28]

[33]

[13]

[26]

Deep All
DeepC
CIDDG
Deep All

CCSA

Deep All

SLRC

Deep All

TF

[27] MMD-AAE

[14]

Deep All
D-SAM
Deep All

JiGen

Alexnet
61.28
62.60
63.06
55.60
62.10
58.20
62.34
62.11
63.49
62.60
57.45
56.95
59.18
60.90

85.73
87.47
88.83
86.10
92.30
86.67
92.76
93.40
93.63
94.40
94.95
91.75
96.93
96.93

62.71 59.33
63.97 61.51
64.38 62.10
59.10 54.60
67.10 59.10
59.10 57.86
65.25 63.54
68.41 64.16
69.99 61.32
67.70 64.40
66.06 65.87
58.59 60.84
71.96 62.57
70.62 64.30

67.26
68.89
69.59
63.85
70.15
65.46
70.97
72.02
72.11
72.28
71.08
67.03
72.66
73.19

Table 2. Domain Generalization results on VLCS. For de-
tails about number of runs, meaning of columns and use of
bold/underline fonts, see Table 1.

Ofﬁce-Home Art Clipart Product Real-World Avg.

Resnet-18

[14]

Deep All 55.59 42.42
D-SAM 58.03 44.37
Deep All 52.15 45.86
53.04 47.51

JiGen

70.34
69.22
70.86
71.47

70.86
71.45
73.15
72.79

59.81
60.77
60.51
61.20

Table 3. Domain Generalization results on Ofﬁce-Home. For
details about number of runs, meaning of columns and use of
bold/underline fonts, see Table 1.

presented small gain in accuracy with respect to the cor-
responding Deep All baseline (e.g. TF). Since [14] did not
present the results of D-SAM on the VLCS dataset, we used
the code provided by the authors to run these experiments.
The obtained results show that, although generally able to
close large domain gaps across images of different styles
as in PACS and Ofﬁce-Home, when dealing with domains
all coming from real-world images, the use of aggregative
modules does not support generalization.

Ablation We focus on the Alexnet-PACS DG setting for
an ablation analysis on the respective roles of the jigsaw
and of the object classiﬁcation task in the learning model.
For these experiments we kept the jigsaw hyperparameters
ﬁxed with a 3 × 3 patch grid and P = 30 jigsaw classes.
{α = 0, β = 1} means that the jigsaw task is off, and the
data batches contain only original ordered images, which
corresponds to Deep All. The value assigned to the data
bias β drives the overall training: it moves the focus from
jigsaw when using low values (β < 0.5) to object clas-
siﬁcation when using high values (β ≥ 0.5). By setting
the data bias to β = 0.6 we feed the network with more
ordered than shufﬂed images, thus keeping the classiﬁca-
tion as the primary goal of the network. In this case, when
changing the jigsaw loss weight α in {0.1, 1}, we observe
results which are always either statistically equal or better
than the Deep All baseline as shown in the ﬁrst plot of Fig-

2234

Figure 4. Ablation results on the Alexnet-PACS DG setting. The reported accuracy is the global average over all the target domains with
three repetitions for each run. The red line represents our Deep All average from Table 1.

Figure 5. Analysis of the behaviour of the jigsaw classiﬁer on the
Alexnet-PACS DG setting. For the plot on the left each axes refers
to the color matching curve in the graph.

ure 4. The second plot indicates that, for high values of
α, tuning β has a signiﬁcant effect on the overall perfor-
mance. Indeed {α ∼ 1, β = 1} means that jigsaw task is
on and highly relevant in the learning process, but we are
feeding the network only with ordered images: in this case
the jigsaw task is trivial and forces the network to recognize
always the same permutation class which, instead of regu-
larizing the learning process, may increase the risk of data
memorization and overﬁtting. Further experiments conﬁrm
that, for β = 1 but lower α values, JiGen and Deep All
perform equally well. Setting β = 0 means feeding the net-
work only with shufﬂed images. For each image we have
P variants, only one of which has the patches in the correct
order and is allowed to enter the object classiﬁer, resulting
in a drastic reduction of the real batch size. In this condi-
tion the object classiﬁer is unable to converge, regardless
of whether the jigsaw classiﬁer is active (α > 0) or not
(α = 0). In those cases the accuracy is very low (< 20%),
so we do not show it in the plots to ease the visualization.

Jigsaw hyperparameter tuning By using the same ex-
perimental setting of the previous paragraph, the third plot
in Figure 4 shows the change in performance when the num-
ber of jigsaw classes P varies between 5 and 1000. We
started from a low number, with the same order of mag-
nitude of the number of object classes in PACS, and we
grew till 1000 which is the number used for the experiments
in [35]. We observe an overall variation of 1.5 percentage
points in the accuracy which still remains (almost always)
higher than the Deep All baseline. Finally, we ran a test to
check the accuracy when changing the grid size and conse-
quently the patch number. Even in this case, the range of

variation is limited when passing from a 2 × 2 to a 4 × 4
grid, conﬁrming the conclusions of robustness already ob-
tained for this parameter in [35] and [10]. Moreover all the
results are better than the Deep All reference.

It is also interesting to check whether the jigsaw clas-
siﬁer is producing meaningful results per-se, besides sup-
porting generalization for the object classiﬁer. We show its
recognition accuracy when testing on the same images used
to evaluate the object classiﬁer but with shufﬂed patches. In
Figure 5, the ﬁrst plot shows the accuracy over the learn-
ing epochs for the object and jigsaw classiﬁers indicating
that both grows simultaneously (on different scales). The
second plot shows the jigsaw recognition accuracy when
changing the number of permutation classes P : of course
the performance decreases when the task becomes more
difﬁcult, but overall the obtained results indicate that the
jigsaw model is always effective in reordering the shufﬂed
patches.

Single Source Domain Generalization The generaliza-
tion ability of a model depends both on the chosen learning
process and on the used training data. To investigate the for-
mer and better evaluate the regularization effect provided by
the jigsaw task, we consider the case of training data from
a single source domain. For these experiments we com-
pare against the generalization method based on adversar-
ial data augmentation (Adv.DA) recently presented in [46].
This work proposes an iterative procedure that perturbs the
samples to make them hard to recognize under the current
model and then combine them with the original ones while
solving the classiﬁcation task. We reproduced the experi-
mental setting used in [46] and adopt a similar result display
style with bar plots for experiments on the MNIST-M and
SVHN target datasets when training on MNIST. In Figure
6 we show the performance of JiGen when varying the data
bias β and the jigsaw weight α. With the red background
shadow we indicate the overall range covered by Adv.DA
results when changing its parameters3, while the horizon-
tal line is the reference Adv.DA results around which the
authors of [46] ran their parameter ablation analysis. The
ﬁgure indicates that, although Adv.DA can reach high peak

3The whole set of results is provided as supplementary material of [46].

2235

0.10.20.30.40.50.60.70.80.91jigsaw loss weight 707172737475accuracy=0.6, P=30Deep AllJiGen0102030epochs686970717273accuracy60708090100=0.6, =0.9, P=30Object ClassificationJigsaw Classification571030501003005001000jigsaw classes P60708090100accuracy=0.6, =0.9Jigsaw ClassificationFigure 6. Single Source Domain Generalization experiments. We analyze the performance of JiGen in comparison with the method
Adv.DA [46]. The shaded background area covers the overall range of results of Adv.DA obtained when changing the hyper-parameters
of the method. The reference result of Adv.DA (γ = 1, K = 2) together with its standard deviation is indicated here by the horizontal red
line. The blue histogram bars show the performance of JiGen when changing the jigsaw weight α and data bias β.

PACS-DA

art paint. cartoon sketches photo Avg.

[30]

Dial

Deep All

Deep All

DDiscovery

Resnet-18
72.40
85.50
86.90
74.86
81.07
82.18
81.28
82.58
80.56

60.10
66.80
69.60
67.74
79.05
78.61
81.50
78.34
79.93

74.70
87.30
87.70
77.85
JiGen αs=αt=0.7 84.88
85.58
85.08
85.73
85.32

75.03
84.15
85.30
79.05
85.74
86.15
86.46
86.19
85.86
Table 4. Multi-source Domain Adaptation results on PACS ob-
tained as average over three repetitions for each run. Besides con-
sidering the same jigsaw loss weight for source and target samples
αs = αt, we also tuned the target jigsaw loss weight while keep-
ing αs = 0.7 showing that we can get even higher results.

92.90
97.00
97.00
95.73
97.96
98.26
97.96
98.10
97.63

JiGen αt=0.1
JiGen αt=0.3
JiGen αt=0.5
JiGen αt=0.9

values, it is also very sensitive to the chosen hyperparame-
ters. On the other hand, JiGen is much more stable and it
is always better than the lower accuracy value of Adv.DA
with a single exception for SVHN and data bias 0.5, but we
know from the ablation analysis, that this corresponds to a
limit case for the proper combination of object and jigsaw
classiﬁcation. Moreover, JiGen gets close to Adv.DA ref-
erence results for MNIST-M and signiﬁcantly outperform it
for SVHN.

Unsupervised Domain Adaptation When unlabeled tar-
get samples are available at training time we can let the
jigsaw puzzle task involve these data.
Indeed patch re-
ordering does not need image labels and running the jig-
saw optimization process on both source and target data
may positively inﬂuence the source classiﬁcation model for
adaptation. To verify this intuition we considered again
the PACS dataset and used it in the same unsupervised do-
main adaptation setting of [30]. This previous work pro-
posed a method to ﬁrst discover the existence of multiple
latent domains in the source data and then differently adapt
their knowledge to the target depending on their respective
similarity.
It has been shown that this domain discovery
(DDiscovery) technique outperforms other powerful adap-
tive approaches as Dial [6] when the source actually in-
cludes multiple domains. Both these methods exploit the

minimization of the entropy loss as an extra domain align-
ment condition: in this way the source model when predict-
ing on the target samples is encouraged to assign maximum
prediction probability to a single label rather than distribut-
ing it over multiple class options. For a fair comparison
we also turned on the entropy loss for JiGen with weight
η = 0.1. Moreover, we considered two cases for the jig-
saw loss: either keeping the weight α already used for the
PACS-Resnet-18 DG experiments for both the source and
target data (α = αs = αt = 0.7), or treating the domain
separately with a dedicated weight for the jigsaw target loss
(αs = 0.7, αt = [0.1, 0.3, 0.5, 0.9]). The results for this
setting are summarized in Table 4. The obtained accuracy
indicates that JiGen outperforms the competing methods on
average and in particular on the difﬁcult task of recognizing
sketches. Furthermore, the advantage remains true regard-
less of the speciﬁc choice of the target jigsaw loss weight.

5. Conclusions

In this paper we showed for the ﬁrst time that general-
ization across visual domains can be achieved effectively
by learning to classify and learning intrinsic image invari-
ances at the same time. We focused on learning spatial co-
location of image parts, and proposed a simple yet powerful
framework that can accommodate a wide spectrum of pre-
trained convolutional architectures. Our method JiGen can
be seamlessly and effectively used for domain adaptation
and generalization as shown by the experimental results.

We see this paper as opening the door to a new research
thread in domain adaptation and generalization. While here
we focused on a speciﬁc type of invariance, several other
regularities could be learned possibly leading to an even
stronger beneﬁt. Also, the simplicity of our approach calls
for testing its effectiveness in applications different from
object categorization, like semantic segmentation and per-
son re-identiﬁcation, where the domain shift effect strongly
impact the deployment of methods in the wild.

Acknowledgments This work was supported by the ERC
grant 637076 RoboExNovo and a NVIDIA Academic Hard-
ware Grant.

2236

MNIST-Mjigsaw weight =0.90.00.50.60.70.80.9data bias 54565860accuracyAdv.DAJiGenAdv.DA =1, K=2MNIST-Mdata bias =0.90.00.10.30.50.70.9jigsaw weight 54565860accuracyAdv.DAJiGenAdv.DA =1, K=2SVHNjigsaw weight =0.90.00.50.60.70.80.9data bias 28303234accuracyAdv.DAJiGenAdv.DA =1, K=2SVHNdata bias =0.90.00.10.30.50.70.9jigsaw weight 28303234accuracyAdv.DAJiGenAdv.DA =1, K=2References

[1] Gabriele Angeletti, Barbara Caputo, and Tatiana Tommasi.
Adaptive deep learning through visual domain localization.
In International Conference on Robotic Automation (ICRA),
2018.

[2] Jeffrey Bisanz, Gay L. Bisanz, and Robert Kail, editors.
Learning in Children: Progress in Cognitive Development
Research. Springer-Verlag, 1983.

[3] Konstantinos Bousmalis, George Trigeorgis, Nathan Silber-
man, Dilip Krishnan, and Dumitru Erhan. Domain Separa-
tion Networks.
In Neural Information Processing Systems
(NIPS), 2016.

[4] Benedict J. Brown, Corey Toler-Franklin, Diego Nehab,
Michael Burns, David Dobkin, Andreas Vlachopoulos,
Christos Doumas, Szymon Rusinkiewicz, and Tim Weyrich.
A system for high-volume acquisition and matching of fresco
fragments: Reassembling Theran wall paintings.
ACM
Transactions on Graphics (Proc. SIGGRAPH), 27(3), Aug.
2008.

[5] Zhangjie Cao, Lijia Ma, Mingsheng Long, and Jianmin
Wang. Partial adversarial domain adaptation. In Europeran
Conference on Computer Vision (ECCV), 2018.

[6] Fabio Maria Carlucci, Lorenzo Porzi, Barbara Caputo, Elisa
Ricci, and Samuel Rota Bul`o.
Just dial: domain align-
ment layers for unsupervised domain adaptation.
In In-
ternational Conference on Image Analysis and Processing
(ICIAP), 2017.

[7] Rich Caruana. Multitask learning. Mach. Learn., 28(1):41–

75, 1997.

[8] Taeg Sang Cho, Shai Avidan, and William T. Freeman. The
patch transform. IEEE Transactions on Pattern Analysis &
Machine Intelligence, 32:1489–1501, 2009.

[9] Taeg Sang Cho, Shai Avidan, and William T. Freeman. A
probabilistic image jigsaw puzzle solver. In Computer Vision
and Pattern Recognition (CVPR), 2010.

[10] Rodrigo Santa Cruz, Basura Fernando, Anoop Cherian, and
Stephen Gould. Visual permutation learning. In Computer
Vision and Pattern Recognition (CVPR), 2017.

[11] Gabriela Csurka, editor. Domain Adaptation in Computer Vi-
sion Applications. Advances in Computer Vision and Pattern
Recognition. Springer, 2017.

[12] Jia Deng, Wei Dong, Richard Socher, Li jia Li, Kai Li,
and Li Fei-Fei. Imagenet: A large-scale hierarchical image
database.
In Conference on Computer Vision and Pattern
Recognition (CVPR), 2009.

[13] Zhengming Ding and Yun Fu. Deep domain generalization
with structured low-rank constraint. IEEE Transactions on
Image Processing, 27:304–313, 2017.

[14] Antonio D’Innocente and Barbara Caputo. Domain gen-
In
eralization with domain-speciﬁc aggregation modules.
German Conference on Pattern Recognition (GCPR), 2018.
Code available at https://github.com/VeloDC/
D-SAM_public.

[15] Carl Doersch, Abhinav Gupta, and Alexei A. Efros. Unsu-
pervised visual representation learning by context prediction.
In International Conference on Computer Vision (ICCV),
2015.

[16] Brock Ferguson, Steven L. Franconeri, and Sandra R. Wax-
man. Very young infants learn abstract rules in the visual
modality. PLOS ONE, 13(1):1–14, 01 2018.

[17] Herbert Freeman and L. Garder. Apictorial jigsaw puzzles:
The computer solution of a problem in pattern recognition.
IEEE Trans. Electronic Computers, 13(2):118–127, 1964.

[18] Andrew C. Gallagher.

Jigsaw puzzles with pieces of un-
known orientation. In Computer Vision and Pattern Recog-
nition (CVPR), 2012.

[19] Yaroslav Ganin, Evgeniya Ustinova, Hana Ajakan, Pas-
cal Germain, Hugo Larochelle, Franc¸ois Laviolette, Mario
Marchand, and Victor Lempitsky. Domain-adversarial train-
ing of neural networks. J. Mach. Learn. Res., 17(1):2096–
2030, 2016.

[20] Muhammad Ghifary, W. Bastiaan Kleijn, Mengjie Zhang,
and David Balduzzi. Domain generalization for object recog-
nition with multi-task autoencoders. In International Confer-
ence on Computer Vision, (ICCV), 2015.

[21] Aditya Khosla, Tinghui Zhou, Tomasz Malisiewicz, Alexei
Efros, and Antonio Torralba. Undoing the damage of dataset
bias. In European Conference on Computer Vision (ECCV),
2012.

[22] David A. Kosiba, Pierre M. Devaux, Sanjay Balasubrama-
nian, Tarak Gandhi, and Rangachar Kasturi. An automatic
jigsaw puzzle solver. In International Conference on Pattern
Recognition (ICPR), 1994.

[23] Alex Krizhevsky, Ilya Sutskever, and Geoffrey E Hinton.
Imagenet classiﬁcation with deep convolutional neural net-
works. In Advances in Neural Information Processing Sys-
tems (NIPS), 2012.

[24] Yann LeCun, L´eon Bottou, Yoshua Bengio, and Patrick
Haffner. Gradient-based learning applied to document recog-
nition. Proceedings of the IEEE, 86(11):2278–2324, 1998.

[25] Da Li, Yongxin Yang, Yi-Zhe Song, and Timothy M.
Hospedales. Learning to generalize: Meta-learning for do-
main generalization. In Conference of the Association for the
Advancement of Artiﬁcial Intelligence (AAAI), 2018.

[26] Da Li, Yongxin Yang, Yi-Zhe Song, and Timothy M.
Hospedales. Deeper, broader and artier domain general-
ization.
In International Conference on Computer Vision
(ICCV), 2017.

[27] Haoliang Li, Sinno Jialin Pan, Shiqi Wang, and Alex C. Kot.
Domain generalization with adversarial feature learning. In
Computer Vision and Pattern Recognition (CVPR), 2018.

[28] Ya Li, Xinmei Tian, Mingming Gong, Yajing Liu, Tongliang
Liu, Kun Zhang, and Dacheng Tao. Deep domain general-
ization via conditional invariant adversarial networks. In The
European Conference on Computer Vision (ECCV), Septem-
ber 2018.

[29] Massimiliano Mancini, Samuel Rota Bulo, Barbara Caputo,
and Elisa Ricci. Robust place categorization with deep do-
main generalization. IEEE Robotics and Automation Letters,
2018.

[30] Massimilano Mancini, Lorenzo Porzi, Samuel Rota Bul`o,
Barbara Caputo, and Elisa Ricci. Boosting domain adapta-
tion by discovering latent domains. In Computer Vision and
Pattern Recognition (CVPR), 2018.

2237

[46] Riccardo Volpi, Hongseok Namkoong, Ozan Sener, John
Duchi, Vittorio Murino, and Silvio Savarese. Generalizing to
unseen domains via adversarial data augmentation. In Neural
Information Processing Systems (NIPS), 2018.

[47] Xiaolong Wang and Abhinav Gupta. Unsupervised learning
of visual representations using videos. In International Con-
ference on Computer Vision (ICCV), 2015.

[48] Ruijia Xu, Ziliang Chen, Wangmeng Zuo, Junjie Yan, and
Liang Lin. Deep cocktail network: Multi-source unsuper-
vised domain adaptation with category shift.
In Computer
Vision and Pattern Recognition (CVPR), 2018.

[49] Richard Zhang, Phillip Isola, and Alexei A Efros. Colorful
image colorization. In European Conference on Computer
Vision (ECCV), 2016.

[31] William Marande and Gertraud Burger. Mitochondrial dna
as a genomic jigsaw puzzle. Science, 318(5849):415–415,
2007.

[32] Ishan Misra, C. Lawrence Zitnick, and Martial Hebert. Shuf-
ﬂe and Learn: Unsupervised Learning using Temporal Order
Veriﬁcation.
In European Conference on Computer Vision
(ECCV), 2016.

[33] Saeid Motiian, Marco Piccirilli, Donald A. Adjeroh, and Gi-
anfranco Doretto. Uniﬁed deep supervised domain adap-
tation and generalization.
In International Conference on
Computer Vision (ICCV), 2017.

[34] Yuval Netzer, Tao Wang, Adam Coates, Alessandro Bis-
sacco, Bo Wu, and Andrew Y. Ng. Reading digits in natural
images with unsupervised feature learning. In NIPS work-
shop on deep learning and unsupervised feature learning,
2011.

[35] Mehdi Noroozi and Paolo Favaro. Unsupervised learning of
In Euro-

visual representations by solving jigsaw puzzles.
pean Conference on Computer Vision (ECCV), 2016.

[36] Mehdi Noroozi, Hamed Pirsiavash, and Paolo Favaro. Rep-
In International

resentation learning by learning to count.
Conference on Computer Vision (ICCV), 2017.

[37] Mehdi Noroozi, Ananth Vinjimoor, Paolo Favaro, and
Hamed Pirsiavash. Boosting self-supervised learning via
knowledge transfer. In Conference on Computer Vision and
Pattern Recognition (CVPR), 2018.

[38] Marie-Morgane Paumard, David Picard, and Hedi Tabia. Im-
age reassembly combining deep learning and shortest path
problem.
In European Conference on Computer Vision
(ECCV), 2018.

[39] Shiv Shankar, Vihari Piratla, Soumen Chakrabarti, Sid-
dhartha Chaudhuri, Preethi Jyothi, and Sunita Sarawagi.
Generalizing across domains via cross-gradient
training.
In International Conference on Learning Representations
(ICLR), 2018.

[40] Dror Sholomon, Omid E. David, and Nathan S. Netanyahu.
A generalized genetic algorithm-based solver for very large
jigsaw puzzles of complex types. In Conference on Artiﬁcial
Intelligence (AAAI), 2014.

[41] Kilho Son, James Hays, and David B. Cooper. Solving
In European

square jigsaw puzzles with loop constraints.
Conference on Computer Vision (ECCV), 2014.

[42] Kilho Son, Daniel Moreno, James Hays, and David B.
Cooper. Solving small-piece jigsaw puzzles by growing
consensus.
In Computer Vision and Pattern Recognition
(CVPR), 2016.

[43] Joshua Tobin, Rachel Fong, Alex Ray, Jonas Schneider, Wo-
jciech Zaremba, and Pieter Abbeel. Domain randomization
for transferring deep neural networks from simulation to the
real world. In International Conference on Intelligent Robots
and Systems (IROS), 2017.

[44] Antonio Torralba and Alexei A. Efros. Unbiased look at
dataset bias. In Conference on Computer Vision and Pattern
Recognition (CVPR), 2011.

[45] Hemanth Venkateswara, Jose Eusebio, Shayok Chakraborty,
and Sethuraman Panchanathan. Deep hashing network for
unsupervised domain adaptation.
In Conference on Com-
puter Vision and Pattern Recognition (CVPR), 2017.

2238

