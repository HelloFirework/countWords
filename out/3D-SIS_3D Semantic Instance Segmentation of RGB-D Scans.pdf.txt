3D-SIS: 3D Semantic Instance Segmentation of RGB-D Scans

Ji Hou

Angela Dai

Matthias Nießner

Technical University of Munich

Figure 1: 3D-SIS performs 3D instance segmentation on RGB-D scan data, learning to jointly fuse both 2D RGB input
features with 3D scan geometry features. In combination with a fully-convolutional approach enabling inference on full 3D
scans at test time, we achieve accurate inference for object bounding boxes, class labels, and instance masks.

Abstract

1. Introduction

We introduce 3D-SIS, a novel neural network architec-
ture for 3D semantic instance segmentation in commodity
RGB-D scans. The core idea of our method is to jointly
learn from both geometric and color signal, thus enabling
accurate instance predictions. Rather than operate solely
on 2D frames, we observe that most computer vision appli-
cations have multi-view RGB-D input available, which we
leverage to construct an approach for 3D instance segmen-
tation that effectively fuses together these multi-modal in-
puts. Our network leverages high-resolution RGB input by
associating 2D images with the volumetric grid based on
the pose alignment of the 3D reconstruction. For each im-
age, we ﬁrst extract 2D features for each pixel with a series
of 2D convolutions; we then backproject the resulting fea-
ture vector to the associated voxel in the 3D grid. This com-
bination of 2D and 3D feature learning allows signiﬁcantly
higher accuracy object detection and instance segmentation
than state-of-the-art alternatives. We show results on both
synthetic and real-world public benchmarks, achieving an
improvement in mAP of over 13 on real-world data.

Semantic scene understanding is critical to many real-
world computer vision applications. It is fundamental to-
wards enabling interactivity, which is core to robotics in
both indoor and outdoor settings, such as autonomous cars,
drones, and assistive robotics, as well as upcoming scenar-
ios using mobile and AR/VR devices. In all these applica-
tions, we would not only want semantic inference of single
images, but importantly, also require understanding of spa-
tial relationships and layouts of objects in 3D environments.

With recent breakthroughs in deep learning and the in-
creasing prominence of convolutional neural networks, the
computer vision community has made tremendous progress
on analyzing images in the recent years. Speciﬁcally, we are
seeing rapid progress in the tasks of semantic segmentation
[19, 13, 21], object detection [11, 26], and semantic instance
segmentation [12]. The primary focus of these impressive
works lies in the analysis of visual input from a single im-
age; however, in many real-world computer vision scenar-
ios, we rarely ﬁnd ourselves in such a single-image setting.
Instead, we typically record video streams of RGB input
sequences, or as in many robotics and AR/VR applications,
we have 3D sensors such as LIDAR or RGB-D cameras.

4421

In particular, in the context of semantic instance seg-
mentation, it is quite disadvantageous to run methods in-
dependently on single images given that instance associa-
tions must be found across a sequence of RGB input frames.
Instead, we aim to infer spatial relationships of objects as
part of a semantic 3D map, learning prediction of spatially-
consistent semantic labels and the underlying 3D layouts
jointly from all input views and sensor data. This goal can
also be seen as similar to traditional sensor fusion but for
deep learning from multiple inputs.

We believe that robustly-aligned and tracked RGB
frames, and even depth data, from SLAM and visual odom-
etry provide a unique opportunity in this regard. Here, we
can leverage the given mapping between input frames, and
thus learn features jointly from all input modalities. In this
work, we speciﬁcally focus on predicting 3D semantic in-
stances in RGB-D scans, where we capture a series of RGB-
D input frames (e.g., from a Kinect Sensor), compute 6DoF
rigid poses, and reconstruct 3D models. The core of our
method learns semantic features in the 3D domain from
both color features, projected into 3D, and geometry fea-
tures from the signed distance ﬁeld of the 3D scan. This is
realized by a series of 3D convolutions and ResNet blocks.
From these semantic features, we obtain anchor bounding
box proposals. We process these proposals with a new 3D
region proposal network (3D-RPN) and 3D region of inter-
est pooling layer (3D-RoI) to infer object bounding box lo-
cations, class labels, and per-voxel instance masks. In order
to jointly learn from RGB frames, we leverage their pose
alignments with respect to the volumetric grid. We ﬁrst run
a series of 2D convolutions, and then backproject the result-
ing features into the 3D grid. In 3D, we then join the 2D and
3D features in end-to-end training constrained by bounding
box regression, object classiﬁcation, and semantic instance
mask losses.

Our architecture is fully-convolutional, enabling us to ef-
ﬁciently infer predictions on large 3D environments in a sin-
gle shot. In comparison to state-of-the-art approaches that
operate on individual RGB images, such as Mask R-CNN
[12], our approach achieves signiﬁcantly higher accuracy
due to the joint feature learning.

To sum up, our contributions are the following:

• We present the ﬁrst approach leveraging joint 2D-
3D end-to-end feature learning on both geometry and
RGB input for 3D object bounding box detection and
semantic instance segmentation on 3D scans.

• We leverage a fully-convolutional 3D architecture for
instance segmentation trained on scene parts, but with
single-shot inference on large 3D environments.

• We outperform state-of-the-art by a signiﬁcant margin,

increasing the mAP by 13.5 on real-world data.

2. Related Work

2.1. Object Detection and Instance Segmentation

With the success of convolutional neural network archi-
tectures, we have now seen impressive progress on object
detection and semantic instance segmentation in 2D im-
ages [11, 27, 18, 26, 16, 12, 17]. Notably, Ren et al. [27]
introduced an anchor mechanism to predict objectness in
a region and regress associated 2D bounding boxes while
jointly classifying the object type. Mask R-CNN [12] ex-
panded this work to semantic instance segmentation by pre-
dicting a per-pixel object instance masks. An alternative
direction for detection is the popular Yolo work [26], which
also deﬁnes anchors on grid cells of an image.

This progress in 2D object detection and instance seg-
mentation has inspired work on object detection and seg-
mentation in the 3D domain, as we see more and more
video and RGB-D data become available. Song et al. pro-
posed Sliding Shapes to predict 3D object bounding boxes
from single RGB-D frame input with handcrafted feature
design [30], and then expanded the approach to operate
on learned features [31]. The latter direction leverages the
RGB frame input to improve classiﬁcation accuracy of de-
tected objects; in contrast to our approach, there is no ex-
plicit spatial mapping between RGB and geometry for joint
feature learning. An alternative approach is taken by Frus-
tum PointNet [22], where detection is performed a 2D frame
and then back-projected into 3D from which ﬁnal bound-
ing box predictions are reﬁned. Wang et al. [35] base their
SGPN approach on semantic segmentation from a Point-
Net++ variation. They formulate instance segmentation as
a clustering problem upon a semantically segmented point
cloud by introducing a similarity matrix prediction similar
to the idea behind panoptic segmentation [15]. In contrast to
these approaches, we explicitly map both multi-view RGB
input with 3D geometry in order to jointly infer 3D instance
segmentation in an end-to-end fashion.

2.2. 3D Deep Learning

In the recent years, we have seen impressive progress
in developments on 3D deep learning. Analogous to the
2D domain, one can deﬁne convolution operators on vol-
umetric grids, which for instance embed a surface repre-
sentation as an implicit signed distance ﬁeld [4]. With the
availability of 3D shape databases [36, 3, 32] and anno-
tated RGB-D datasets [29, 1, 5, 2], these network archi-
tectures are now being used for 3D object classiﬁcation
[36, 20, 24, 28], semantic segmentation [5, 34, 6], and ob-
ject or scene completion [8, 32, 9]. An alternative represen-
tation to volumetric grids are the popular point-based archi-
tectures, such as PointNet [23] or PointNet++ [25], which
leverage a more efﬁcient, although less structured, repre-
sentation of 3D surfaces. Multi-view approaches have also

4422

been proposed to leverage RGB or RGB-D video informa-
tion. Su et al. proposed one of the ﬁrst multi-view archi-
tectures for object classiﬁcation by view-pooling over 2D
predictions [33], and Kalogerakis et al. recently proposed
an approach for shape segmentation by projecting predicted
2D conﬁdence maps onto the 3D shape, which are then ag-
gregated through a CRF [14]. Our approach joins together
many of these ideas, leveraging the power of a holistic 3D
representation along with features from 2D information by
combining them through their explicit spatial mapping.

3. Method Overview

Our approach infers 3D object bounding box locations,
class labels, and semantic instance masks on a per-voxel
basis in an end-to-end fashion. To this end, we propose a
neural network that jointly learns features from both geom-
etry and RGB input. In the following, we refer to bounding
box regression and object classiﬁcation as object detection,
and semantic instance mask segmentation for each object as
mask prediction.

In Sec. 4, we ﬁrst introduce the data representation and
training data that is used by our approach. Here, we con-
sider synthetic ground truth data from SUNCG [32], as well
as manually-annotated real-world data from ScanNetV2 [5].
In Sec. 5, we present the neural network architecture of our
3D-SIS approach. Our architecture is composed of several
parts; on the one hand, we have a series of 3D convolu-
tions that operate in voxel grid space of the scanned 3D
data. On the other hand, we learn 2D features that we back-
project into the voxel grid where we join the features and
thus jointly learn from both geometry and RGB data. These
features are used to detect object instances; that is, associ-
ated bounding boxes are regressed through a 3D-RPN and
class labels are predicted for each object following a 3D-
ROI pooling layer. For each detected object, features from
both the 2D color and 3D geometry are forwarded into a
per-voxel instance mask network. Detection and per-voxel
instance mask prediction are trained in an end-to-end fash-
ion. In Sec. 6, we describe the training and implementation
details of our approach, and in Sec. 7, we evaluate our ap-
proach.

4. Training Data

Data Representation We use a truncated sign distance
ﬁeld (TSDF) representation to encode the reconstructed ge-
ometry of the 3D scan inputs. The TSDF is stored in a reg-
ular volumetric grid with truncation of 3 voxels. In addi-
tion to this 3D geometry, we also input spatially associated
RGB images. This is feasible since we know the mapping
between each image pixel with voxels in the 3D scene grid
based on the 6 degree-of-freedom (DoF) poses from the re-
spective 3D reconstruction algorithm.

For the training data, we subdivide each 3D scan into
chunks of 4.5m × 4.5m × 2.25m, and use a resolution of
96 × 96 × 48 voxels per chunk (each voxel stores a TSDF
value); i.e., our effective voxel size is ≈ 4.69cm3. In our
experiments, for training, we associate 5 RGB images at a
resolution of 328x256 pixels in every chunk, with training
images selected based on the average voxel-to-pixel cover-
age of the instances within the region.

Our architecture is fully-convolutional (see Sec. 5),
which allows us to run our method over entire scenes in
a single shot for inference. Here, the xy-voxel resolution
is derived from a given test scene’s spatial extent. The z
(height) of the voxel grid is ﬁxed to 48 voxels (approxi-
mately the height of a room), with the voxel size also ﬁxed
at 4.69cm3. Additionally, at test time, we use all RGB im-
ages available for inference. In order to evaluate our algo-
rithm, we use training, validation, test data from synthetic
and real-world RGB-D scanning datasets.

Synthetic Data For synthetic training and evaluation,
we use the SUNCG [32] dataset. We follow the public
train/val/test split, using 5519 train, 40 validation, and 86
test scenes (test scenes are selected to have total volume
< 600m3). From the train and validation scenes, we extract
97, 918 train chunks and 625 validation chunk. Each chunk
contains an average of ≈ 4.3 object instances. At test time,
we take the full scan data of the 86 test scenes.

In order to generate partial scan data from these synthetic
scenes, we virtually render them, storing both RGB and
depth frames. Trajectories are generated following the vir-
tual scanning approach of [9], but adapted to provide denser
camera trajectories to better simulate real-world scanning
scenarios. Based on these trajectories, we then generate
partial scans as TSDFs through volumetric fusion [4], and
deﬁne the training data RGB-to-voxel grid image associa-
tions based on the camera poses. We use 23 class categories
for instance segmentation, deﬁned by their NYU40 class
labels; these categories are selected for the most frequently-
appearing object types, ignoring the wall and ﬂoor cate-
gories which do not have well-deﬁned instances.

Real-world Data For training and evaluating our algo-
rithm on real-world scenes, we use the ScanNetV2 [5]
dataset. This dataset contains RGB-D scans of 1513 scenes,
comprising ≈2.5 million RGB-D frames. The scans have
been reconstructed using BundleFusion [7]; both 6 DoF
pose alignments and reconstructed models are available.
Additionally, each scan contains manually-annotated object
instance segmentation masks on the 3D mesh. From this
data, we derive 3D bounding boxes which we use as con-
straints for our 3D region proposal.

We follow the public train/val/test split originally pro-
posed by ScanNet of 1045 (train), 156 (val), 312 (test)

4423

Figure 2: 3D-SIS network architecture. Our architecture is composed of a 3D detection and a 3D mask pipeline. Both 3D
geometry and 2D color images are taken as input and used to jointly learn semantic features for object detection and instance
segmentation. From the 3D detection backbone, color and geometry features are used to propose the object bounding boxes
and their class labels through a 3D-RPN and a 3D-RoI layer. The mask backbone also uses color and geometry features, in
addition to the 3D detection results, to predict per-voxel instance masks inside the 3D bounding box.

scenes, respectively. From the train scenes, we extract
108241 chunks, and from the validation scenes, we extract
995 chunks. Note that due to the smaller number of train
scans available in the ScanNet dataset, we augment the train
scans to have 4 rotations each. We adopt the same 18-class
label set for instance segmentation as proposed by the Scan-
Net benchmark.

Note that our method is agnostic to the respective dataset

as long as semantic RGB-D instance labels are available.

5. Network Architecture

Our network architecture is shown in Fig. 2. It is com-
posed of two main components, one for detection, and
one for per-voxel instance mask prediction; each of these
pipelines has its own feature extraction backbone. Both
backbones are composed of a series of 3D convolutions,
taking the 3D scan geometry along with the back-projected
RGB color features as input. We detail the RGB feature
learning in Sec. 5.1 and the feature backbones in Sec. 5.2.
The learned 3D features of the detection and mask back-
bones are then fed into the classiﬁcation and the voxel-
instance mask prediction heads, respectively.

The object detection component of the network com-
prises the detection backbone, a 3D region proposal net-
work (3D-RPN) to predict bounding box locations, and a
3D-region of interest (3D-RoI) pooling layer followed by
classiﬁcation head. The detection backbone outputs fea-
tures which are input to the 3D-RPN and 3D-RoI to pre-
dict bounding box locations and object class labels, respec-
tively. The 3D-RPN is trained by associating predeﬁned
anchors with ground-truth object annotations; here, a per-
anchor loss deﬁnes whether an object exists for a given an-
chor. If it does, a second loss regresses the 3D object bound-
ing box; if not, no additional loss is considered. In addi-
tion, we classify the the object class of each 3D bounding

box. For the per-voxel instance mask prediction network
(see Sec. 5.4), we use both the input color and geometry as
well as the predicted bounding box location and class label.
The cropped feature channels are used to create a mask pre-
diction which has n channels for the n semantic class labels,
and the ﬁnal mask prediction is selected from these channels
using the previously predicted class label. We optimize for
the instance mask prediction using a binary cross entropy
loss. Note that we jointly train the backbones, bounding
box regression, classiﬁcation, and per-voxel mask predic-
tions end-to-end; see Sec. 6 for more detail. In the follow-
ing, we describe the main components of our architecture
design, for more detail regarding exact ﬁlter sizes, etc., we
refer to the supplemental material.

5.1. Back projection Layer for RGB Features

In order to jointly learn from RGB and geometric fea-
tures, one could simply assign a single RGB value to each
voxel. However, in practice, RGB image resolutions are sig-
niﬁcantly higher than the available 3D voxel resolution due
to memory constraints. This 2D-3D resolution mismatch
would make learning from a per-voxel color rather inefﬁ-
cient. Inspired by the semantic segmentation work of Dai
et al. [6], we instead leverage a series of 2D convolutions
to summarize RGB signal in image space. We then deﬁne a
back-projection layer and map these features on top of the
associated voxel grid, which are then used for both object
detection and instance segmentation.

To this end, we ﬁrst pre-train a 2D semantic segmen-
tation network based on the ENet architecture [21]. The
2D architecture takes single 256 × 328 RGB images as in-
put, and is trained on a semantic classiﬁcation loss using
the NYUv2 40 label set. From this pre-trained network, we
extract a feature encoding of dimension 32 × 41 with 128
channels from the encoder. Using the corresponding depth

4424

image, camera intrinsics, and 6DoF poses, we then back-
project each of these features back to the voxel grid (still
128 channels); the projection is from 2D pixels to 3D vox-
els. In order to combine features from multiple views, we
perform view pooling through an element-wise max pool-
ing over all RGB images available.

For training, the voxel volume is ﬁxed to 96 × 96 × 48
voxels, resulting in a 128 × 96 × 96 × 48 back-projected
RGB feature grid in 3D; here, we use 5 RGB images for
each training chunk (with image selection based on average
3D instance coverage). At test time, the voxel grid resolu-
tion is dynamic, given by the spatial extent of the environ-
ment; here, we use all available RGB images. The grid of
projected features is processed by a set of 3D convolutions
and is subsequently merged with the geometric features.

In ScanNet [5], the camera poses and intrinsics are pro-
vided; we use them directly for our back-projection layer.
For SUNCG [32], extrinsics and intrinsics are given by the
virtual scanning path. Note that our method is agnostic to
the used 2D network architecture.

5.2. 3D Feature Backbones

For jointly learning geometric and RGB features for both
instance detection and segmentation, we propose two 3D
feature learning backbones. The ﬁrst backbone generates
features for detection, and takes as input the 3D geometry
and back-projected 2D features (see Sec. 5.1).

Both the geometric input and RGB features are pro-
cessed symmetrically with a 3D ResNet block before join-
ing them together through concatenation. We then apply a
3D convolutional layer to reduce the spatial dimension by a
factor of 4, followed by a 3D ResNet block (e.g., for an in-
put train chunk of 96 × 96 × 48, we obtain a features of size
24×24×12). We then apply another 3D convolutional layer,
maintaining the same spatial dimensions, to provide fea-
tures maps with larger receptive ﬁelds. We deﬁne anchors
on these two feature maps, splitting the anchors into ‘small’
and ‘large’ anchors (small anchors < 1m3), with small an-
chors associated with the ﬁrst feature map of smaller re-
ceptive ﬁeld and large anchors associated with the second
feature map of larger receptive ﬁeld. For selecting anchors,
we apply k-means algorithm (k=14) on the ground-truth 3D
bounding boxes in ﬁrst 10k chunks. These two levels of
features maps are then used for the ﬁnal steps of object de-
tection: 3D bounding box regression and classiﬁcation.

The instance segmentation backbone also takes the 3D
geometry and the back-projected 2D CNN features as in-
put. The geometry and color features are ﬁrst processed
independently with two 3D convolutions, and then concate-
nated channel-wise and processed with another two 3D con-
volutions to produce a mask feature map prediction. Note
that for the mask backbone, we maintain the same spatial
resolution through all convolutions, which we found to be

critical for obtaining high accuracy for the voxel instance
predictions. The mask feature map prediction is used as in-
put to predict the ﬁnal instance mask segmentation.

In contrast to single backbone, we found that this two-
backbone structure both converged more easily and pro-
duced signiﬁcantly better instance segmentation perfor-
mance (see Sec. 6 for more details about the training scheme
for the backbones).

5.3. 3D Region Proposals and 3D RoI Pooling for

Detection

Our 3D region proposal network (3D-RPN) takes input
features from the detection backbone to predict and regress
3D object bounding boxes. From the detection backbone
we obtain two feature maps for small and large anchors,
which are separately processed by the 3D-RPN. For each
feature map, the 3D-RPN uses a 1 × 1 × 1 convolutional
layer to reduce the channel dimension to 2 × Nanchors, where
Nanchors = (3, 11) for small and large anchors, respectively.
These represent the positive and negative scores of object-
ness of each anchor. We apply a non-maximum suppression
on these region proposals based on their objectness scores.
The 3D-RPN then uses another 1×1×1 convolutional layer
to predict feature maps of 6 × Nanchors, which represent the
3D bounding box locations as (∆x, ∆y, ∆z, ∆w, ∆h, ∆l),
deﬁned in Eq. 1.

In order to determine the ground truth objectiveness
and associated 3D bounding box locations of each anchor
during training, we perform anchor association. Anchors
are associated with ground truth bounding boxes by their
IoU: if the IoU > 0.35, we consider an anchor to be
positive (and it will be regressed to the associated box),
and if the IoU < 0.15, we consider an anchor to be
negative (and it will not be regressed to any box). We
use a two-class cross entropy loss to measure the objec-
tiveness, and for the bounding box regression we use a
Huber loss on the prediction (∆x, ∆y, ∆z, ∆w, ∆h, ∆l)
against the log ratios of the ground truth box and anchors
(∆gt

x , ∆gt

y , ∆gt

w , ∆gt

l ), where

h , ∆gt

z , ∆gt

∆x =

µ − µanchor

φanchor

∆w = ln(

φ

φanchor

)

(1)

where µ is the box center point and φ is the box width.

Using the predicted bounding box locations, we can then
crop out the respective features from the global feature map.
We then unify these cropped features to the same dimen-
sionality using our 3D Region of Interest (3D-RoI) pooling
layer. This 3D-RoI pooling layer pools the cropped feature
maps into 4 × 4 × 4 blocks through max pooling operations.
These feature blocks are then linearized for input to object
classiﬁcation, which is performed with an MLP.

4425

cab bed chair sofa tabl door wind bkshf cntr desk shlf curt drsr mirr
16.8 16.2 15.6 11.8 14.5 10.0 11.7 27.2 20.0 25.7 10.0 0.0 15.0 0.0 20.0 27.8 39.5 22.9 10.7 38.9 10.4

Seg-Cluster
0.0
Mask R-CNN [12] 14.9 19.0 19.5 13.5 12.2 11.7 14.2 35.0 15.7 18.3 13.7 0.0 24.4 23.1 26.0 28.8 51.2 28.1 14.7 32.2 11.4 10.7
18.6 39.2 28.5 46.5 26.7 21.8 15.9
24.9 23.9 16.3 20.8 15.1 10.7 0.0 17.7 35.1 37.0 22.9 34.2 17.7 31.5
SGPN [35]
0.0
23.2 78.6 47.7 63.3 37.0 19.6
21.3 34.4 16.8 0.0 16.7 0.0 10.0 22.8 59.7 49.2 10.0 77.2 10.0
0.0
Ours(geo only)
0.0
0.0
63.9 25.8 32.2 17.8 0.0 25.3 0.0
0.0 14.7 37.0 55.5 20.5 58.2 18.0 20.0
22.2 70.8 48.5 66.6 44.4 10.0
0.0
Ours(geo+1view)
Ours(geo+3views) 26.5 78.4 48.2 59.5 42.8 26.1
30.0 22.7 39.4 17.3 0.0 36.2 0.0 10.0 10.0 37.0 50.8 16.8 59.3 10.0 36.4
0.0
30.0 32.3 33.5 21.0 0.0 34.2 0.0 10.0 20.0 56.7 56.2 17.6 56.2 10.0 35.5
Ours(geo+5views) 20.5 69.4 56.2 64.5 43.8 17.8
0.0

sink lamp bath ostr ofurn oprop
12.3
19.5
13.9
19.3
17.9
17.8
17.8

nigh toil

tv

avg
16.4
19.9
22.5
26.8
29.1
29.4
30.6

Table 1: 3D instance segmentation on synthetic scans from SUNCG [32]. We evaluate the mean average precision with IoU
threshold of 0.25 over 23 classes. Our joint color-geometry feature learning enables us to achieve more accurate instance
segmentation performance.

5.4. Per Voxel 3D Instance Segmentation

We perform instance mask segmentation using a separate
mask backbone, which similarly as the detection backbone,
takes as input the 3D geometry and projected RGB features.
However, for mask prediction, the 3D convolutions main-
tain the same spatial resolutions, in order to maintain spa-
tial correspondence with the raw inputs, which we found
to signiﬁcantly improve performance. We then use the pre-
dicted bounding box location from the 3D-RPN to crop out
the associated mask features from the mask backbone, and
compute a ﬁnal mask prediction with a 3D convolution to
reduce the feature dimensionality to n for n semantic class
labels; the ﬁnal mask prediction is the cth channel for pre-
dicted object class c. During training, since predictions
from the detection pipeline can be wrong, we only train on
predictions whose predicted bounding box overlaps with the
ground truth bounding box with at least 0.5 IoU. The mask
targets are deﬁned as the ground-truth mask in the overlap-
ping region of the ground truth box and proposed box.

6. Training

To train our model, we ﬁrst train the detection backbone
and 3D-RPN. After pre-training these parts, we add the 3D-
RoI pooling layer and object classiﬁcation head, and train
these end-to-end. Then, we add the per-voxel instance mask
segmentation network along with the associated backbone.
In all training steps, we always keep the previous losses (us-
ing 1:1 ratio between all losses), and train everything end-
to-end. We found that a sequential training process resulted
in more stable convergence and higher accuracy.

We use an SGD optimizer with learning rate 0.001, mo-
mentum 0.9 and batch size 64 for 3D-RPN, 16 for classiﬁ-

cation, 16 for mask prediction. The learning rate is divided
by 10 every 100k steps. We use a non-maximum suppres-
sion for proposed boxes with threshold of 0.7 for training
and 0.3 for test. Our network is implemented with PyTorch
and runs on a single Nvidia GTX1080Ti GPU. The object
detection components of the network are trained end-to-end
for 10 epochs (≈ 24 hours). After adding in the mask back-
bone, we train for an additional 5 epochs (≈ 16 hours). For
mask training, we also use ground truth bounding boxes to
augment the learning procedure.

7. Results

We evaluate our approach on both 3D detection and in-
stance segmentation predictions, comparing to several state-
of-the-art approaches, on synthetic scans of SUNCG [32]
data and real-world scans from the ScanNetV2 dataset [5].
To compare to previous approaches that operate on single
RGB or RGB-D frames (Mask R-CNN [12], Deep Sliding
Shapes [31], Frustum PointNet [22]), we ﬁrst obtain predic-
tions on each individual frame, and then merge all predic-
tions together in the 3D space of the scene, merging predic-
tions if the predicted class labels match and the IoU > 0.5.
We further compare to SGPN [35] which performs instance
segmentation on 3D point clouds. For both detection and in-
stance segmentation tasks, we project all results into a voxel
space of 4.69cm voxels and evaluate them with a mean aver-
age precision metric. We additionally show several variants
of our approach for learning from both color and geome-
try features, varying the number of color views used during
training. We consistently ﬁnd that training on more color
views improves both the detection and instance segmenta-
tion performance.

cab bed chair sofa tabl door wind bkshf pic cntr desk curt
2.1
6.9

0.2 10.7 2.0

0.2

Mask R-CNN [12] 5.3
SGPN [35]
MTML
3D-BEVIS [10]
R-PointNet [37]
3D-SIS (Ours)

0.6
0.0
4.5
13.8 16.9
6.5 39.0 27.5 35.1 16.8 8.7
33.7
2.7 61.4 39.0 50.0 10.5 10.0
0.3
3.5 56.6 39.4 60.4 18.1 9.9
17.1
7.6
34.8 40.5 58.9 39.6 27.5 28.3 24.5 31.1
13.4 55.4 58.7 72.8 22.4 30.7 18.1 31.9

sink bath ofurn
toil
fridg showr
23.8 0.2
2.4
0.0
2.0
1.4 33.3
0.0
6.5
4.3
0.0
43.8 11.2 20.8
0.0
2.7
1.4
2.9
0.1 11.8 16.7
2.8
14.3 57.0 4.6 66.7
0.0
0.0
37.5 85.4 12.6 66.7
3.0
2.7
2.5
9.8
9.8
5.4 12.6 6.8 21.9
21.4 82.1 33.1 50.0 29.0
2.8
0.0 12.1 0.0 54.1 100.0 88.9 4.5 66.7 21.0
0.6

3.5

avg
5.8
14.3
21.2
24.8
30.6
36.2

Table 2: Instance segmentation results on the ofﬁcial ScanNetV2 3D semantic instance benchmark (hidden test set). Our
ﬁnal model (geo+5views) signiﬁcantly outperforms previous (Mask R-CNN, SGPN) and concurrent (MTML, 3D-BEVIS,
R-PointNet) state-of-the-art methods in mAP@0.5. ScanNetV2 benchmark data accessed on 12/17/2018.

4426

Figure 3: Qualitative comparison of 3D object detection and instance segmentation on ScanNetV2 [5] (full scans above;
close-ups below). Our joint color-geometry feature learning combined with our fully-convolutional approach to inference
on full test scans at once enables more accurate and semantically coherent predictions. Note that different colors represent
different instances, and the same instances in the ground truth and predictions are not necessarily the same color.

4427

cab bed chair sofa tabl door wind bkshf pic
11.8 13.5 18.9 14.6 13.8 11.1 11.5 11.7

Seg-Cluster
0.0 13.7 12.2 12.4 11.2
Mask R-CNN [12] 15.7 15.4 16.4 16.2 14.9 12.5 11.6 11.8 19.5 13.7 14.4 14.7 21.6
20.7 31.5 31.6 40.6 31.9 16.6 15.3 13.6
SGPN [35]
0.0 17.4 14.1 22.2 0.0
0.0 20.7 17.4 13.9 23.6
22.1 48.2 64.4 52.2 16.0 13.4
17.2
Ours(geo only)
25.4 60.3 66.2 52.1 31.7 27.6 10.1 16.9
0.0 21.4 30.9 18.4 22.6
Ours(geo+1view)
0.0 20.3 36.3 20.1 28.1
Ours(geo+3views) 28.3 52.3 65.0 66.5 31.4 27.9 10.1 17.9
Ours(geo+5views) 32.0 66.3 65.3 56.4 29.4 26.7 10.1 16.9
0.0 22.1 35.1 22.6 28.6

0.0

toil

72.9 52.4 0.0

sink bath ofurn
18.0 19.5 18.9 16.4 12.2
18.5 25.0 24.5 24.5 16.9
0.0
18.6
33.0 45.2 47.7 61.3 14.6
16.0 70.5 44.5 37.5 20.0
31.0 68.6 41 66.8 24.0
37.2 74.9 39.6 57.6 21.1

avg
13.4
17.1
22.2
28.3
31.8
35.3
35.7

cntr desk curt

fridg showr

Table 3: 3D instance segmentation on ScanNetV2 [5] with mAP@0.25 on 18 classes. Our explicit leveraging of spatial
mapping between 3D geometry and color features extracted through 2D CNNs enables signiﬁcantly improved performance.

7.1. 3D Instance Analysis on Synthetic Scans

mAP@0.25 mAP@0.5

We evaluate 3D detection and instance segmentation on
virtual scans taken from the synthetic SUNCG dataset [32],
using 23 class categories. Table 4 shows 3D detection per-
formance compared to state-of-the-art approaches which
operate on single frames. Table 1 shows a quantitative eval-
uation of our approach, the SGPN for point cloud instance
segmentation [35], their proposed Seg-Cluster baseline, and
Mask R-CNN [12] projected into 3D. For both tasks, our
joint color-geometry approach along with a global view of
the 3D scenes at test time enables us to achieve signiﬁcantly
improved detection and segmentation results.

mAP@0.25 mAP@0.5

Deep Sliding Shapes [30]
Mask R-CNN 2D-3D [12]
Frustum PointNet [22]
Ours – 3D-SIS (geo only)
Ours – 3D-SIS (geo+1view)
Ours – 3D-SIS (geo+3views)
Ours – 3D-SIS (geo+5views)

12.8
20.4
24.9
27.8
30.9
31.3
32.2

6.2
10.5
10.8
21.9
23.8
24.2
24.7

Table 4: 3D detection in SUNCG [32], using mAP over 23
classes. Our holistic approach and the combination of color
and geometric features result in signiﬁcantly improved de-
tection results over previous approaches which operate on
individual input frames.

7.2. 3D Instance Analysis on Real World Scans

We further evaluate our approach on ScanNet dataset [5],
which contains 1513 real-world scans. For training and
evaluation, we use ScanNetV2 annotated ground truth as
well as the proposed 18-class instance benchmark. We show
qualitative results in Figure 3.
In Table 5, we quantita-
tively evaluate our object detection against Deep Sliding
Shapes and Frustum PointNet, which operate on RGB-D
frame, as well as Mask R-CNN [12] projected to 3D. Our
fully-convolutional approach enabling inference on full test
scenes achieves signiﬁcantly better detection performance.
Table 3 shows our 3D instance segmentation in comparison
to SGPN instance segmentation [35], their proposed Seg-
Cluster baseline, and Mask R-CNN [12] projected into 3D.
Our formulation for learning from both color and geometry
features brings notable improvement over state of the art.

Deep Sliding Shapes [30]
Mask R-CNN 2D-3D [12]
Frustum PointNet [22]
Ours – 3D-SIS (geo only)
Ours – 3D-SIS (geo+1view)
Ours – 3D-SIS (geo+3views)
Ours – 3D-SIS (geo+5views)

15.2
17.3
19.8
27.6
35.1
36.6
40.2

6.8
10.5
10.8
16.0
18.7
19.0
22.5

Table 5: 3D detection on ScanNetV2 [5], using mAP over
18 classes. In contrast to previous approaches operating on
individual frames, our approach achieves signiﬁcantly im-
proved performance.

Finally, we evaluate our model on the ScanNetV2 3D in-
stance segmentation benchmark on the hidden test set; see
Table 2. Our ﬁnal model (geo+5views) signiﬁcantly outper-
forms previous (Mask R-CNN [12], SGPN [35]) and con-
current (MTML, 3D-BEVIS [10], R-PointNet [37]) state-
of-the-art methods in mAP@0.5. ScanNetV2 benchmark
data was accessed on 12/17/2018.

8. Conclusion

In this work, we introduce 3D-SIS, a new approach for
3D semantic instance segmentation of RGB-D scans, which
is trained in an end-to-end fashion to detect object instances
and infer a per-voxel 3D semantic instance segmentation.
The core of our method is to jointly learn features from
RGB and geometry data using multi-view RGB-D input
recorded with commodity RGB-D sensors. The network
is fully-convolutional, and thus can run efﬁciently in a sin-
gle shot on large 3D environments. In comparison to exist-
ing state-of-the-art methods that typically operate on single
RGB frame, we achieve signiﬁcantly better 3D detection
and instance segmentation results, improving on mAP by
over 13. We believe that this is an important insight to a
wide range of computer vision applications given that many
of them now capture multi-view RGB and depth streams;
e.g., autonomous cars, AR/VR applications, etc..

Acknowledgments

This work was supported by a Google Research Grant,
an Nvidia Professor Partnership, a TUM Foundation Fel-
lowship, a TUM-IAS Rudolf M¨oßbauer Fellowship, and the
ERC Starting Grant Scan2CAD (804724).

4428

References

[1] Iro Armeni, Sasha Sax, Amir R Zamir, and Silvio Savarese.
Joint 2d-3d-semantic data for indoor scene understanding.
arXiv preprint arXiv:1702.01105, 2017. 2

[2] Angel Chang, Angela Dai, Thomas Funkhouser, Maciej Hal-
ber, Matthias Niessner, Manolis Savva, Shuran Song, Andy
Zeng, and Yinda Zhang. Matterport3D: Learning from RGB-
D data in indoor environments. International Conference on
3D Vision (3DV), 2017. 2

[3] Angel X Chang, Thomas Funkhouser, Leonidas Guibas,
Pat Hanrahan, Qixing Huang, Zimo Li, Silvio Savarese,
Manolis Savva, Shuran Song, Hao Su, et al. Shapenet:
An information-rich 3d model repository. arXiv preprint
arXiv:1512.03012, 2015. 2

[4] Brian Curless and Marc Levoy. A volumetric method for
building complex models from range images. In Proceedings
of the 23rd annual conference on Computer graphics and
interactive techniques, pages 303–312. ACM, 1996. 2, 3

[5] Angela Dai, Angel X. Chang, Manolis Savva, Maciej Hal-
ber, Thomas Funkhouser, and Matthias Nießner. Scannet:
Richly-annotated 3d reconstructions of indoor scenes.
In
Proc. Computer Vision and Pattern Recognition (CVPR),
IEEE, 2017. 2, 3, 5, 6, 7, 8

[6] Angela Dai and Matthias Nießner. 3dmv: Joint 3d-multi-
view prediction for 3d semantic scene segmentation. arXiv
preprint arXiv:1803.10409, 2018. 2, 4

[7] Angela Dai, Matthias Nießner, Michael Zollh¨ofer, Shahram
Izadi, and Christian Theobalt. Bundlefusion: Real-time
globally consistent 3d reconstruction using on-the-ﬂy sur-
face reintegration. ACM Transactions on Graphics (TOG),
36(3):24, 2017. 3

[8] Angela Dai, Charles Ruizhongtai Qi, and Matthias Nießner.
Shape completion using 3d-encoder-predictor cnns and
shape synthesis.
In Proc. IEEE Conf. on Computer Vision
and Pattern Recognition (CVPR), volume 3, 2017. 2

[9] Angela Dai, Daniel Ritchie, Martin Bokeloh, Scott Reed,
J¨urgen Sturm, and Matthias Nießner. Scancomplete: Large-
scale scene completion and semantic segmentation for 3d
scans. arXiv preprint arXiv:1712.10215, 2018. 2, 3

[10] Cathrin Elich, Francis Engelmann, Jonas Schult, Theodora
Kontogianni, and Bastian Leibe. 3D-BEVIS: Birds-Eye-
View Instance Segmentation. CoRR, abs/1904.02199, 2019.
6, 8

[11] Ross Girshick. Fast r-cnn. In Proceedings of the IEEE inter-
national conference on computer vision, pages 1440–1448,
2015. 1, 2

[12] Kaiming He, Georgia Gkioxari, Piotr Doll´ar, and Ross Gir-
shick. Mask r-cnn. In Computer Vision (ICCV), 2017 IEEE
International Conference on, pages 2980–2988. IEEE, 2017.
1, 2, 6, 8

[13] Forrest Iandola, Matt Moskewicz, Sergey Karayev, Ross Gir-
Im-
arXiv

shick, Trevor Darrell, and Kurt Keutzer. Densenet:
plementing efﬁcient convnet descriptor pyramids.
preprint arXiv:1404.1869, 2014. 1

[14] Evangelos Kalogerakis, Melinos Averkiou, Subhransu Maji,
and Siddhartha Chaudhuri. 3d shape segmentation with pro-

jective convolutional networks. Proc. CVPR, IEEE, 2, 2017.
3

[15] Alexander Kirillov, Kaiming He, Ross Girshick, Carsten
Rother, and Piotr Doll´ar. Panoptic segmentation. arXiv
preprint arXiv:1801.00868, 2018. 2

[16] Tsung-Yi Lin, Piotr Doll´ar, Ross B Girshick, Kaiming He,
Bharath Hariharan, and Serge J Belongie. Feature pyramid
networks for object detection. In CVPR, volume 1, page 4,
2017. 2

[17] Tsung-Yi Lin, Priyal Goyal, Ross Girshick, Kaiming He, and
Piotr Doll´ar. Focal loss for dense object detection.
IEEE
transactions on pattern analysis and machine intelligence,
2018. 2

[18] Wei Liu, Dragomir Anguelov, Dumitru Erhan, Christian
Szegedy, Scott Reed, Cheng-Yang Fu, and Alexander C
Berg. Ssd: Single shot multibox detector. In European con-
ference on computer vision, pages 21–37. Springer, 2016. 2
[19] Jonathan Long, Evan Shelhamer, and Trevor Darrell. Fully
convolutional networks for semantic segmentation. In Pro-
ceedings of the IEEE conference on computer vision and pat-
tern recognition, pages 3431–3440, 2015. 1

[20] Daniel Maturana and Sebastian Scherer. Voxnet: A 3d con-
volutional neural network for real-time object recognition.
In Intelligent Robots and Systems (IROS), 2015 IEEE/RSJ
International Conference on, pages 922–928. IEEE, 2015. 2
[21] Adam Paszke, Abhishek Chaurasia, Sangpil Kim, and Eu-
genio Culurciello. Enet: A deep neural network architec-
ture for real-time semantic segmentation. arXiv preprint
arXiv:1606.02147, 2016. 1, 4

[22] Charles R Qi, Wei Liu, Chenxia Wu, Hao Su, and Leonidas J
Guibas. Frustum pointnets for 3d object detection from rgb-d
data. arXiv preprint arXiv:1711.08488, 2017. 2, 6, 8

[23] Charles R Qi, Hao Su, Kaichun Mo, and Leonidas J Guibas.
Pointnet: Deep learning on point sets for 3d classiﬁca-
tion and segmentation. Proc. Computer Vision and Pattern
Recognition (CVPR), IEEE, 1(2):4, 2017. 2

[24] Charles Ruizhongtai Qi, Hao Su, Matthias Nießner, Angela
Dai, Mengyuan Yan, and Leonidas Guibas. Volumetric and
multi-view cnns for object classiﬁcation on 3d data. In Proc.
Computer Vision and Pattern Recognition (CVPR), IEEE,
2016. 2

[25] Charles Ruizhongtai Qi, Li Yi, Hao Su, and Leonidas J
Guibas. Pointnet++: Deep hierarchical feature learning on
point sets in a metric space. In Advances in Neural Informa-
tion Processing Systems, pages 5105–5114, 2017. 2

[26] Joseph Redmon, Santosh Divvala, Ross Girshick, and Ali
Farhadi. You only look once: Uniﬁed, real-time object de-
tection. In Proceedings of the IEEE conference on computer
vision and pattern recognition, pages 779–788, 2016. 1, 2

[27] Shaoqing Ren, Kaiming He, Ross Girshick, and Jian Sun.
Faster r-cnn: Towards real-time object detection with region
proposal networks. In Advances in neural information pro-
cessing systems, pages 91–99, 2015. 2

[28] Gernot Riegler, Ali Osman Ulusoy, and Andreas Geiger.
Octnet: Learning deep 3d representations at high resolutions.
In Proceedings of the IEEE Conference on Computer Vision
and Pattern Recognition, 2017. 2

4429

[29] Shuran Song, Samuel P Lichtenberg, and Jianxiong Xiao.
Sun rgb-d: A rgb-d scene understanding benchmark suite. In
Proceedings of the IEEE conference on computer vision and
pattern recognition, pages 567–576, 2015. 2

[30] Shuran Song and Jianxiong Xiao. Sliding shapes for 3d ob-
ject detection in depth images. In European conference on
computer vision, pages 634–651. Springer, 2014. 2, 8

[31] Shuran Song and Jianxiong Xiao. Deep sliding shapes for
amodal 3d object detection in rgb-d images. arXiv preprint
arXiv:1511.02300, 2015. 2, 6

[32] Shuran Song, Fisher Yu, Andy Zeng, Angel X Chang, Mano-
lis Savva, and Thomas Funkhouser. Semantic scene comple-
tion from a single depth image. Proceedings of 30th IEEE
Conference on Computer Vision and Pattern Recognition,
2017. 2, 3, 5, 6, 8

[33] Hang Su, Subhransu Maji, Evangelos Kalogerakis, and Erik
Learned-Miller. Multi-view convolutional neural networks
for 3d shape recognition.
In Proceedings of the IEEE In-
ternational Conference on Computer Vision, pages 945–953,
2015. 3

[34] Maxim Tatarchenko, Jaesik Park, Vladlen Koltun, and Qian-
Yi Zhou. Tangent convolutions for dense prediction in 3d.
In Proceedings of the IEEE Conference on Computer Vision
and Pattern Recognition, pages 3887–3896, 2018. 2

[35] Weiyue Wang, Ronald Yu, Qiangui Huang, and Ulrich Neu-
mann. Sgpn: Similarity group proposal network for 3d point
cloud instance segmentation.
In Proceedings of the IEEE
Conference on Computer Vision and Pattern Recognition,
pages 2569–2578, 2018. 2, 6, 8

[36] Zhirong Wu, Shuran Song, Aditya Khosla, Fisher Yu, Lin-
guang Zhang, Xiaoou Tang, and Jianxiong Xiao.
3d
shapenets: A deep representation for volumetric shapes. In
Proceedings of the IEEE Conference on Computer Vision
and Pattern Recognition, pages 1912–1920, 2015. 2

[37] Li Yi, Wang Zhao, He Wang, Minhyuk Sung, and Leonidas
Guibas. Gspn: Generative shape proposal network for
3d instance segmentation in point cloud.
arXiv preprint
arXiv:1812.03320, 2018. 6, 8

4430

