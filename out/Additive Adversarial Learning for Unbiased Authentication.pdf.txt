Additive Adversarial Learning for Unbiased Authentication

Jian Liang1∗, Yuren Cao1

,

2 ∗, Chenbin Zhang1

,

2, Shiyu Chang3, Kun Bai1, Zenglin Xu2

1Cloud and Smart Industries Group, Tencent, China

2University of Electronic Science and Technology of China

3MIT-IBM Watson AI Lab, IBM Research, USA
{joshualiang,laurenyrcao,kunbai}@tencent.com

ChenbinZhang@std.uestc.edu.cn, shiyu.chang@ibm.com, zenglin@gmail.com

Abstract

Authentication is a task aiming to conﬁrm the truth be-
tween data instances and personal identities. Typical au-
thentication applications include face recognition, person
re-identiﬁcation, authentication based on mobile devices
and so on. The recently-emerging data-driven authenti-
cation process may encounter undesired biases, i.e., the
models are often trained in one domain (e.g., for people
wearing spring outﬁts) while required to apply in other
domains (e.g.,
they change the clothes to summer out-
ﬁts). To address this issue, we propose a novel two-stage
method that disentangles the class/identity from domain-
differences, and we consider multiple types of domain-
difference.
In the ﬁrst stage, we learn disentangled
representations by a one-versus-rest disentangle learning
(OVRDL) mechanism. In the second stage, we improve the
disentanglement by an additive adversarial learning (AAL)
mechanism. Moreover, we discuss the necessity to avoid
a learning dilemma due to disentangling causally related
types of domain-difference. Comprehensive evaluation re-
sults demonstrate the effectiveness and superiority of the
proposed method.

1. Introduction

Authentication considers the problem of whether the
data instances match personal identities. There is a vari-
ety of authentication applications including biometric au-
thentication [4, 22] (e.g. face recognition [41] and ﬁnger-
print veriﬁcation [37]) and person re-identiﬁcation [2, 43].
However, data-driven authentication process often suffers
from undesired biases, i.e., domain-difference, which refers
to the problem that a model is trained in one domain, but
tested and veriﬁed in other domains. For example, in the
ﬁeld of person re-identiﬁcation [2], the prediction may be

∗Equal contribution from both authors.

Class Group 1

Class Group 2

Class Group 3

Domain 1
Domain 2
Domain 3

Train
Test
Test

Test
Test
Train

Test
Train
Test

Table 1. An example of the assumptions of our problem.

compromised due to the seasonal outﬁts changing or the an-
gle variation between a camera and a pedestrian.

Faced with the domain-difference problem between
training and testing data, simply applying data-driven mod-
els may lead to undesired solutions that focus on the bi-
ases of domains, even if the training data is sufﬁcient. To
alleviate the aforementioned problem, this paper addresses
the task of learning for unbiased authentication. For sim-
plicity, we treat authentication as a recognition problem so
that each identity corresponds to a class. We consider that
there are multiple domains and multiple types of domain-
difference, where a speciﬁc type of domain-difference may
include multiple domains. For example, for person re-
identiﬁcation, season and shooting angle are two types of
domain-difference, where season includes four domains:
spring, summer, autumn, and winter, and shooting
angle includes domains such as front, back, side, etc.

To better understand our problem, we present a toy ex-
ample with only one type of domain difference in Table 1.
In the training phase, for each group of classes, we have
In other words, different
their data on only one domain.
domains do not share classes.
In the testing phase, we
need to do a recognition on data which corresponds to un-
seen hclass, domaini combinations. Mathematically, the
problem we attempt to tackle is related to domain adapta-
tion [25, 8, 28, 32], but different from it, because domain
adaptation allows source and target domains to share classes
but provides no label on target domains. Domain adap-
tation has been extensively studied in the ﬁeld of transfer
learning [24, 33, 32, 19]. Our problem can be transformed

111428

x

f

c

f

1

D

11

G

D

1

12

D

13

f

2

D

21

P

G

D

2

22

D

23

Attribute 1

Hidden 
vectors  

...

Attribute 2

Hidden 
vectors  

...

Attribute 3

~

f

1

~

f

2

 

~

f

s

1

T

R

1

1

s

u

2

T

R

2

2

s

D

3

f

3

31

G

3

D

32

D

33

Hidden 
vectors  

...

3

 

T

R

3

3

One­versus­rest disentangle learning

Random combinations

Additive adversarial learning

Stage 1

Stage 2

Figure 1. The architecture of our framework. Intuitively, our framework is constructed in a multi-task learning ﬂavor. The output of
each task is regarded as an attribute to learn. The attribute-disentanglement pipeline of our work consists of two stages. Stage 1 consists
of multiple branches of networks, and each branch learns by a one-versus-rest disentangling mechanism. Stage 2 aims to make further
improvements, and the key ideas are illustrated in Fig. 3. Best viewed in color.

into a domain adaptation problem if the data of testing do-
mains are allowed to train without class labels. Thus, we
refer to our problem as a generalized cross-domain recogni-
tion (GCDR) problem. Similar problems have also been in-
vestigated in the ﬁeld of fairness-oriented machine learning
(FML) approaches [7] which concern biases against demo-
graphic groups, such as racial minorities or women. FML
approaches in this setting usually apply transfer learning
methods as solutions as well. In this paper, we also apply
transfer learning methods to learn unbiased representations.
Speciﬁcally, to focus on the main issue, we simply apply
symmetric transfer learning methods (see the deﬁnition de-
scribed by Weiss et al. [33]).

In this paper, we propose a novel recognition method
that learns disentangled representations to handle domain-
difference to achieve an unbiased recognition. As shown in
Table 1, for a speciﬁc group of classes, the classes are dif-
ferent, but the domain is the same. Therefore, it is feasible
to learn an unbiased model that can classify classes while
neglecting the effects imposed by domain-differences. We
also assume that although we have the labels of domains and
domain-difference types, how the domain-differences affect
the data is unknown. For a data instance, its class and do-
main values are treated as its attributes. Our method learns
unbiased representations by disentangling these attributes.
The framework of our method is illustrated in Fig. 1, which
consists of two stages. In stage 1, we propose a one-versus-
rest disentangle learning (OVRDL) mechanism to map each
instance into multiple hidden spaces. In each hidden space,
we disentangle one attribute from others. In stage 2, since
limited combinations of attribute values are included in the
training data, we conduct a data augmentation to randomly

combine attribute labels and concatenate their associated
hidden feature vectors as new data samples. An additive
adversarial learning (AAL) mechanism based on random
concatenations of hidden features is proposed to further im-
prove the disentanglement of stage 1. Intuitively, biases are
removed by minimizing negative side-effects. We extend
the discussion on how to avoid a learning dilemma due to
disentangle causally related attributes. The experimental re-
sults on benchmark and real-world data sets demonstrate the
effectiveness and superiority of our method. We also con-
duct ablation experiments to show the contribution of each
component of our proposed framework.

2. Related Work

To learn unbiased representations from unknown fea-
tures of domain-difference, there are three thrusts of meth-
ods to leverage existing transfer learning methods, which
are also the typical solutions for representation-learning
based FML. In this section, we review them as well as some
other related work, and differentiate them from our work.

Eliminating the marginal-distribution differences The
ﬁrst family eliminates marginal-distribution differences be-
tween domains. This family of methods includes Transfer
Component Analysis (TCA) [23], Deep Adaptation Net-
work (DAN) [17], Reversing Gradient (RevGrad) [9], Ad-
versarial Discriminative Domain Adaptation (ADDA) [29],
among others. FML methods proposed by Goel et al. [10]
and Zhang et al. [39] also fall into this category. Many
FML methods adopt RevGrad, such as those proposed by
Wadsworth et al. [31] and Beutel et al. [3].

Generating data with unseen hclass, domaini combi-

11429

nations The second family generates data samples as-
sociated with unseen hclass, domaini combinations, such
as ELEGANT [35], DNA-GAN [34], Multi-Level Varia-
tional Autoencoder (ML-VAE) [5], CausalGAN [14], Res-
GAN [27], SaGAN [40], among others. FML methods Fair-
ness GAN [26] and FairGAN [36] also fall into this cate-
gory. These methods generate synthetic data, then ordinary
models can be trained on both real and the generated data.

Hybrid methods
The third family performs both
marginal-distribution-difference elimination and synthetic-
data generation, such as Cross-Domain Representation Dis-
entangler (CDRD) [15], Synthesized Examples for Gener-
alized Zero-Shot Learning (SE-GZSL) [30], Disentangled
Synthesis for Domain Adaptation (DiDA) [6], Attribute-
Based Synthetic Network (ABS-Net) [18], among others.
Madras et al. [20] proposed such a FML framework.

Other related work
Such a phenomenon of grouped
classes was also discussed by Bouchacourt et al. [5] and
Zhao [42]. However, they did not provide learning meth-
ods to eliminate domain-differences. It was also discussed
by Heinze-Deml and Meinshausen [12]. However, they as-
sumed classes with various domains are already included in
the training data. Yu et al. [38] also discussed the setting
that classes were not necessarily shared by multiple source
domains. However, their method assumes that all the hclass,
domaini combinations are included in the training data set.

Differences between the existing works and our pro-
posed method Despite the achievements, existing ap-
proaches either do not handle the GCDR problem or can-
not avoid the learning dilemma due to disentangling corre-
lated types of domain-difference. In addition, most of the
generative methods generate samples in the original data
space. However, if an appropriate model-structure is cap-
tured, generating data in the original data space is not nec-
essary, and it may cause additional errors during both data
generation and learning on the generated data. The afore-
mentioned concerns are addressed by our proposed method.

3. Methodology

This section details our proposed network. We ﬁrst de-
ﬁne notations and problem settings. Consider a data set
D = {(xi, yi, hi)}n
i=1 consisting of n independent sam-
ples. For the ith sample, xi ∈ Rd is a feature vector with
d dimensions, yi ∈ Z+ is a categorical class label of the
recognition task, and hi ∈ Zm
+ is a vector consisting of m
categorical domain attributes. For example, in the colored
MNIST (C-MNIST) recognition (see the image examples in
the Fig. 6 of Lu et al. [18]), xi can be a colored image of
digits with the size of 28 × 28, the class label denoted by yi
is a value in {0, 1, . . . , 9}, the background color (denoted
by hi
2) of the image

1) and foreground color (denoted by hi

(a) Training

(b) Testing

Figure 2. An experiment setting of C-MNIST with the background
color as the domain-difference. Best viewed in color.

are the two types of attributes. The different combinations
of background colors and foreground colors can form mul-
tiple domains. For the convenience of the presentation, we
denote ai = (yi, hi) ∈ Z
as the generalized attribute
vector of the sample i. We denote ai
j as the jth element
of ai, and ai
j ∈ {1, 2, . . . , kj}, where kj is the size of the
set. Throughout the paper, we denote [k] as the index set
{1, 2, . . . , k}.

(m+1)
+

In practice, samples of the data set D are usually incom-
plete. For the example shown in Fig. 2, one can observe
images of digit 5 with the red background, and digit 2 with
green background, while one wants to make predictions on
images of 5 with the green background. Formally, we deﬁne
the GCDR problem as follows.

Problem 1.
(Generalized Cross-Domain Recognition
(GCDR)) Given a data set D = {(xi, ai)}n
i=1, let DΩ be
the partially observed training set. The goal of our learn-
ing problem is to train a model over examples with partially
observed combinations of attribute values, and then gener-
alize this model to the testing set D ¯Ω with missing combi-
nations of attribute values.

(m+1)]

Denote the sets of combinations of attribute values for
1, . . . , ai
the training and testing sets as CΩ = {[ai
(m+1)] :
i ∈ ¯Ω}, re-
i ∈ Ω} and C ¯Ω = {[ai
1, . . . , ai
:
spectively. We have the constraint that the two sets have
no intersection, i.e., CΩT C ¯Ω = ∅.
In addition, for the
training set, for each jth type of domain-difference, de-
note the class group corresponding to its rth domain as
Gr
j = {yi : hi
j = r, r ∈ [kj], i ∈ Ω}. We have the con-
straint that different domains do not share classes, i.e., for
each jth type of domain-difference, Gr
j = ∅ for all
r, r′ ∈ [kj] and r 6= r′.

j T Gr′

The structure of our framework is based on the ABS-
Net [18], and further novelly extends with these contri-
butions: (1) a one-versus-rest disentangle learning mech-
anism, (2) an AAL mechanism to further improve disentan-
gle performances, (3) an extended strategy to cease some
disentangling processes to avoid a learning dilemma due to
disentangling causally related attributes, which will be in-
troduced in the following.

11430

3.1. One Versus Rest Disentangle Learning

Our chief goal is to disentangle the class from all the
types of domain-difference. Moreover, as an auxiliary, we
also aim to disentangle each type of domain-difference from
the class and other types of domain-difference. As men-
tioned previously, if we regard the class and all the types
of domain-difference as attributes, we aim to disentangle
each attribute from others. Therefore, we can develop a
one-versus-rest strategy for each attribute to achieve two
purposes: (1) to learn each attribute itself, and (2) to dis-
entangle it from others.

Speciﬁcally, for each attribute j ∈ [m + 1], we learn the
mapping from the raw-data space to a hidden space: x → fj
(here we omit the indices of sample order). In the hidden
space, the two purposes above can be externalized as fol-
lows. (1) Samples associated with different categorical val-
ues of attribute j can be well separated, i.e., P (aj | fj) = 1.
(2) The distribution of samples is independent with that of
any other attribute j′, i.e., P (aj ′ | fj) = P (aj ′ ), which can
be achieved by an adversarial learning process.

As shown in Fig. 1, in stage 1, we construct a network
to achieve the aforementioned purposes. For the feature
vector x of a raw instance, it is transformed by an input-
feature transformation network P into a hidden feature
vector fc which is further transformed by attribute-feature
learning networks G1, . . . , Gm+1 into attribute feature vec-
tors f1, . . . , fm+1, respectively. For each attribute j, we ex-
pect the hidden space associated with the attribute feature
vector fj to achieve the two purposes above.

To achieve the aforementioned purposes, we develop a
one-versus-rest disentangle learning (OVRDL) mechanism
for each attribute. For each attribute j, we construct (m+1)
discriminative networks, Dj1, . . . , Dj(m+1). Each discrim-
inative network is trying to discriminate between different
categorical values of the associated attribute. We expect
that the “diagonal network” Djj learns directly and can
correctly predict aj , while the “non-diagonal” networks,
{Djj ′}j ′6=j , learn adversarially and cannot correctly pre-
dict aj ′ . Following the adversarial learning mechanism
proposed by Alexia [13], a brief version of the adversarial
learning for the “non-diagonal” networks can be regarded
as the following two alternative steps [13].
Step 1: ﬁx Gj , and for each j′ 6= j, optimize Djj ′ to let the
outputs approximate ˜aj ′ which is the one-hot-coded vector
of the target aj ′ ;
Step 2: ﬁx Djj ′ s for all j′ 6= j, and optimize Gj to let the
outputs approximate (1 − ˜aj ′ ).

Finally, we establish the OVRDL mechanism in stage 1.

For learning each attribute, we optimize by

min

G0,{Gj },{Djj }

X

i∈Ω

wjLat(Djj(Gj(G0(xi))), ˜ai

j),

(1)

where Lat is the loss function for the attribute learning, ˜ai
j

is the one-hot encoded vector of ai
j , and wj is the weight for
the jth attribute, j ∈ [m + 1]. For discriminating domains
for each type of domain-difference, we optimize by

min
{Djj′ }

X

i∈Ω

X
j′6=j

˜wjj′ Lad(Djj′ (Gj(G0(xi))), ˜ai

j′ ),

(2)

where Lad is the loss function for the adversarial learning,
and ˜wjj ′ is the weight for the (j, j′) pair, j, j′ ∈ [m + 1]. To
re-enforce attribute learning during the adversarial learning,
we optimize by

min
G0

X

i∈Ω

˜wjjLad(Djj(Gj(G0(xi))), ˜ai

j).

(3)

Finally, for eliminating all types of domain-difference, we
optimize by

min

G0,{Gj }

X

i∈Ω

X
j′6=j

˜wjj′ Lad(Djj′ (Gj(G0(xi))), ˜z

i
j′ ),

(4)

where ˜z

i
j ′ = 1 − ˜yi

j ′ .

The activation function chosen for the last layer of the
discriminative networks is a softmax function. We choose
the cross-entropy loss as Lat, and the mean square error as
Lad (referring to LSGAN [21]). Eq. (1), (2), (3) and (4)
are alternatively optimized. For each mini-batch, Eq. (1)
and (2) run one step, while Eq. (3) and (4) run ﬁve steps.

For inference by only stage 1, we stack P, G1 and D11
to predict the class label yi for each sample i. Although dis-
entangling the class from all the types of domain-difference
can be accomplished only by the ﬁrst branch of the network,
i.e., the networks directly connected to G1, we think that
such a modeling strategy does not leverage sufﬁcient super-
vised information to improve the representation ability of
P . Later on in Section 4 we demonstrate that this results in
a drastic decrease of accuracy by our ablation study.

We show that our optimization scheme can improve
Equality of Odds, which is a fairness measure deﬁned by
Hardt et al. [11]. It means that a predictor ˆY and a domain
variable Z are conditionally independent given the true la-
bel Y , i.e., P ( ˆY | Z, Y ) = P ( ˆY | Y ).

Theorem 1. For the GCDR problem and the deﬁned model,
our optimization scheme deﬁned by Eq. (1) ∼ Eq. (4) can
improve the equality of odds deﬁned by Hardt et al. [11].

Proof. The proof is in the supplementary material.

3.2. Additive Adversarial Learning

To further improve the disentangle performance, we pro-
pose an additive adversarial learning (AAL) mechanism
taking advantage of the attribute-combinations that are not
seen in the training data. The attribute-combinations are
generated by a data-augmentation procedure. We expect the
AAL mechanism to have the following property: when the

11431

module “sees” the unseen hclass, domaini combinations, bi-
ases are removed by minimizing negative side-effects.

j = f l

1, . . . , ˜ai

1, . . . , ˜f i

First, we describe the data-augmentation procedure. For
each ith generated data instance, the feature vector is a com-
bination of (m + 1) feature vectors, ˜f i
(m+1), and the
associated attribute vector is [˜ai
(m+1)]. For each at-
tribute j ∈ [m + 1], ˜f i
j and
al
j are the lth attribute feature vector and attribute value for
attribute j, respectively, and l ∈ Z+ is a random index of
training instances. For different attributes, the random in-
dices can be different. For example, assuming m = 1,
for two samples, ([f 1
1 , f 2
2]),
a generated data sample can be ([f 1
2 ], [a1
2]). The
screening strategy of Lu et al. [18] is applied.

2 ], [a2
1, a2

2]) and ([f 2

j , where f l

j and ˜ai

j = al

2 ], [a1

1 , f 1

1 , f 2

1, a1

1, a2

1, . . . , ˜ai

1, . . . , ˜ai

Next, we derive the AAL mechanism. The nr generated
data samples are separated into two collections: Ωs = {i ∈
[nr]: the attribute-value combination [˜ai
(m+1)] has
been seen in the training data}, and Ωu = {i ∈ [nr]: the
attribute-value combination [˜ai
(m+1)] has not been
seen in the training data}. Based on these two collections,
we illustrate our key idea of AAL by Fig. 3. Assume there
are only two attributes: digit and background color, which
are for the learning of two branches of the network, respec-
tively. We assume that the disentanglement of stage 1 is
already close to the optimum. Then for the seen attribute-
value combinations, for each attribute j, we learn a trans-
formation network Tj to predict ˜aj only. We assume that
this learning process let the networks ﬁt the data of seen
combinations, e.g., a digit ﬁve with red background can
be precisely recognized as “5” for digit and “red” for the
background. Then for an unseen combination, a digit ﬁve
and green background, we let the network to output “5” for
digit and “green” for the background. Under the assumption
above, if the output color is not “green”, we believe the error
is from the red information of the ﬁrst branch. Therefore we
back-propagate the loss from the second output to the ﬁrst
branch to eliminate the background information within. Fi-
nally, the bias in the ﬁrst branch can be removed.

1, . . . , ˜f i

As shown in the second part of stage 2 in Fig. 1, for each
generated data sample, the feature vectors, ˜f i
(m+1),
are transformed into additive feature vectors s1, . . . , s(m+1)
by additive space transformation networks T1, . . . , T(m+1),
respectively. The additive feature vectors s1, . . . , s(m+1)
are added as a summative feature vector u which is sent to
recognition networks R1, . . . , R(m+1). For attribute-value
combinations seen in the training data, for each attribute
j ∈ [m + 1], the loss from Rj is back propagated only to
Tj , i.e., we optimize the following problem:

min
Rj ,Tj

X
i∈Ωs

w′

jLr(cid:18)Rj(cid:18) m
X
j′=1

Tj′ (˜f i

j′ )(cid:19), ˜ai
j(cid:19),

(5)

where Lr is the recognition loss function, and w′

j is the

Figure 3. Key ideas of our AAL mechanism. Dotted lines represent
the directions of backpropagation. Best viewed in color.

weight for the attribute j ∈ [m + 1]. On the other hand,
for attribute-value combinations unseen in the training data,
for each attribute j ∈ [m + 1], the loss from Rj is back
propagated to TSj , where Sj = {j′ ∈ [m + 1] : j′ 6= j}:

min
Rj ,TSj

X
i∈Ωu

w′

jLr(cid:18)Rj(cid:18) m
X
j′=1

Tj′ (˜f i

j′ )(cid:19), ˜ai
j(cid:19).

(6)

The additive learning mechanism holds two good prop-
erties: (1) the discriminative information in each dimension
can be expressed in an additive form which is decompos-
able, and (2) each dimension of sj for all j ∈ [m + 1] has
the same meaning, which allows us to incorporate sparse
penalties to let each group of dimensions of the additive
feature vectors correspond to a single attribute.

Same as in stage 1, we choose softmax activation func-
tions and cross-entropy loss for the last layers. For infer-
ence, we stack P, G1, T1 and R1 to predict the class label.

3.3. Discussion on Causal Extension

We further consider alleviating a dilemma of disentan-
gling when some attributes are correlated. For the most ex-
treme case, if two attributes are identical, it is not possible
that we cannot recognize one attribute based on a feature
vector but can recognize another. Therefore, intuitively, we
should not disentangle correlated attributes. However, “cor-
relation” is a broad, imprecise concept. If we do not dis-
entangle for all the correlated attributes, we may encounter
insufﬁcient disentanglement. We consider a speciﬁc type of
correlation: causal relationships. We theoretically demon-
strate in Theorem 2 that for any attribute j, if another at-
tribute j′ causes it, then learning a feature vector fj to rec-
ognize attribute j while disentangling it from attribute j′
may hurt the recognition for attribute j. This is because if
fj is independent with attribute j′, since attribute j′ causes
attribute j, the correlation between fj and attribute j is lim-

11432

ited. Therefore, if the prior information of causal relation-
ships between attributes is given, we should cease some dis-
entangling processes to avoid the learning dilemma.

Speciﬁcally, for stage 1, we can use a prior matrix Λ ∈
{0, 1}(m+1)×(m+1) to handle causalities between attributes.
For all j, j′ ∈ [m + 1] and j′ 6= j, we multiply the weight
˜wjj ′ in Eq. (2) and Eq. (4) by Λjj ′ . Based on Theorem 2,
we set Λjj ′ = 0 if attribute j′ causes attribute j, and set
Λjj ′ = 1 otherwise. For stage 2, for the indices collection
Sj in Eq. (6), we can delete the indices of attributes that are
caused by attribute j, for each j ∈ [m + 1].

Theorem 2. For all attribute j ∈ [m + 1], for an arbitrary
feature vector fj , denote the true label of fj as aj ∈ Z+.
Then for attributes j, j′ ∈ [m + 1] and j 6= j′, if attribute j′
causes attribute j, we cannot reach both the learning goals
P (aj | fj) = 1 and P (aj ′ | fj) = P (aj ′ ) perfectly. How-
ever, if attribute j causes attribute j′, it is possible to reach
both the learning goals perfectly. The proof can be found in
the supplementary material.

Proof. The proof is in the supplementary material.

4. Experiments

Our

In this section, we evaluate the proposed method.
Both synthetic and real-world data sets are used for
evaluations.
implementation uses Keras with
Tensorﬂow [1] backends, which can be found at
https://github.com/langlrsw/AAL-unbiased-authentication.
We consider a recognition task in the presence of sev-
eral types of domain-difference. For each type of domain-
difference, different domains do not share classes in the
training set, and the training and testing sets do not share
combinations of hclass, domaini. Comprehensive evalua-
tions are conducted on three data sets: (1) the C-MNIST
data set [18] with 10 classes and m = 2 types of domain-
difference, (2) the re-organized CelebA data set [16] with
211 classes and m = 1 type of domain-difference, and (3)
our developed authentication data set based on mobile sen-
sors with 29 classes and m = 1 type of domain-difference.
For each data set, the re-organization will be described in
detail in the corresponding section, and 10% data of the
testing set were randomly selected for validation. The eval-
uations follow the GCDR setting deﬁned in Problem 1.

Methods for Comparison As discussed in Section 2,
there are three thrusts of methods to leverage existing trans-
fer learning methods to handle domain-difference. For the
ﬁrst thrust that eliminates the marginal distribution differ-
ences, we chose RevGrad [9], which also serves as the so-
lution of the FML methods of Beutel et al. [3]. For the sec-
ond thrust that generates data with unseen hclass, domaini
combinations, we chose ELEGANT [35] which only uses
domain labels and ML-VAE [5] which only uses class la-
bels. For the third thrust that uses hybrid solutions, we

chose ABS-Net [18] which is the base method of ours with-
out an adversarial mechanism, and CDRD [15] and SE-
GZSL [30], which can be treated as advanced instantiated
algorithms under the FML framework of Madras et al. [20].
Finally, we compare the direct learning strategy that stacks
P, G1, and D11 as the whole network.

Evaluation Metrics We investigate prediction perfor-
mances for both multi-label and multi-class types of recog-
nition. Therefore, for the multi-label type, we use aver-
age AUC (aAUC) which is deﬁned as the mean value of
the area under the ROC curve for each class, the average
false acceptance rate (aFAR), and the average false rejec-
tion rate (aFRR). Because the number of negative samples
is far greater than that of positive samples for each class, we
report aAUC and (aFAR + aFRR)/2. For the multi-class
type, we report top-1 accuracy (ACC@1).

Implementation Details For all experiments, G1, . . . , Gm
and {Tj} are built by a single hidden layer with hyper-
bolic tangent as the activation function, respectively. Hid-
den units are ﬂattened before being fed into attribute-feature
learning networks. {Djj ′} and {Rj} are built by general-
ized linear layers. A Convolutional Neural Network (CNN)
with two convolutional layers is used as the input feature
transformation network P for image data sets. A fully-
connected neural network with one hidden layer P is used
for vector based data sets. The weights {wj}, { ˜wjj ′}, and
{w′
1 = 1 and ˜wj1 = 1
for each j ∈ [m + 1]. Other weights are equally set to 0.1.

j} are set as follows. We set w1 = w′

4.1. Handwritten Digital Experiments

We re-construct the C-MNIST data set originally built
by Lu et al. [18] for performance evaluation. For origi-
nal gray images of MNIST, 10 different colors are added
as background colors (b-colors) and other 10 different col-
ors are added as foreground colors (f-colors), which results
in a new C-MNIST that consists of 70k colored RGB digi-
tal images with resolution of 28 × 28 (60k for training and
10k for testing) from 1k possible combinations (10 digits ×
10 b-colors × 10 f-colors). Examples from C-MNIST are
shown in Fig. 6 of Lu et al. [18].

In this paper, we set the digit recognition as the primary
learning task. The background and foreground colors can
be treated as two types of domain-difference. It is evident
that the background colors are independent with the digits.
However, they have server inﬂuence on the prediction accu-
racy because they occupy most of the image area. There-
fore, we use the background color as the domain-difference
that groups the digits. As shown in Fig. 2, in the training
data, digits 0 ∼ 4 are associated with a green b-color, while
5 ∼ 9 are associated with a pink b-color, other data are
dropped. The data with h0 ∼ 4, pink b-colori and h5 ∼ 9,
green b-colori combinations are for testing. The foreground

11433

Methods

aAUC (aFAR + aFRR)/2 ACC@1

Methods

aAUC (aFAR + aFRR)/2 ACC@1

78.35
Direct
RevGrad [9, 3]
80.71
CDRD [15, 20]
84.83
SE-GZSL [30, 20] 99.79
ELEGANT [35]
79.94
ML-VAE [5]
77.26
77.69
ABS-Net [18]
Ours
98.42

26.70
24.45
35.79
2.72
24.61
28.06
27.41
6.14

20.96
21.68
33.49
94.83
10.68
18.73
15.92
84.27

78.54
Direct
RevGrad [9, 3]
80.12
CDRD [15, 20]
80.20
SE-GZSL [30, 20] 84.96
ELEGANT [35]
75.88
ML-VAE [5]
75.29
75.80
ABS-Net [18]
87.07
Ours

42.10
31.18
39.90
26.62
32.02
36.07
34.90
22.19

11.07
10.96
16.47
12.76
10.05
7.97
8.09
14.99

Table 2. Performances (%) comparison on the C-MNIST data set.
“Direct” means stacking P, G1, and D11 as the whole network.

Table 3. Performances (%) comparison on the CelebA data set.

attribute is also used to disentangle, but we allowed it share
digits in the training data. We have 5970 training instances
and 1003 testing instances in total.

Table 2 summarizes the performance comparisons on C-
MNIST. The results send a clear message that our method
signiﬁcantly outperforms the direct learning method, which
shows the effectiveness of our method.
Furthermore,
our method outperforms other baseline methods signiﬁ-
cantly, except for the SE-GZSL method. We conjecture
that C-MNIST is easy for SE-GZSL because the domain-
difference is the background color which is simple and sta-
ble. However, in real applications, these properties barely
hold, which on the succeeding two real-world data sets we
will show that its performance drops.

We extended the experiments for other background col-
ors and the foreground colors. Please ﬁnd more details in
the supplementary material.

4.2. Face Recognition

We use aligned, and cropped version of the CelebA data
set [16] and scale all images to 64 × 64. We chose the Eye-
glasses attribute as the domain-difference. We select indi-
viduals who have at least 20 images and #(Eyeglasses =
0)/#(Eyeglasses = 1) ∈ [3/7, 7/3], resulting in 211
individuals. Half of the individuals wear glasses during
training and without glasses during testing. The other
half wear no glasses during training and wear glasses dur-
ing testing. Table 3 shows the comparisons conducted on
CelebA. Our method signiﬁcantly outperforms other meth-
ods in aAUC and (aFAR + aFRR)/2—the multi-label type
of metrics. The SE-GZSL method underperforms, which
suggests its insufﬁcient inconsistency. The result demon-
strates that complex and variable domain-difference types
on real-world data sets are difﬁcult for SE-GZSL to learn.
The CDRD method underperforms in aAUC and (aFAR +
aFRR)/2, but outperforms in ACC@1, because the posi-
tive samples of the majority of individuals have lower pre-
diction scores, but the positive samples of more individuals
have high prediction scores, which shows less satisfactory
authentication performance for the majority of individuals.

No. 1-6 No. 7-12 No. 13-15 No. 16-29

IOS

Train
Android Test

Test
Train

×

Train

Train

×

Table 4. The authentication problem on mobile devices. The num-
bers in the ﬁrst row indicate groups of subjects. “×” means there
are no data for this condition.

Methods

aAUC (aFAR + aFRR)/2 ACC@1

76.90
Direct
75.88
RevGrad [9, 3]
CDRD [15, 20]
89.17
SE-GZSL [30, 20] 78.83
77.16
ML-VAE [5]
ABS-Net [18]
76.58
93.40
Ours

28.21
32.38
20.26
26.12
27.18
28.09
13.59

3.56
0.38
46.05
20.54
4.68
5.13
46.37

Table 5. Performances (%) comparison on the Mobile data set.

4.3. Authentication on Mobile Devices

We also build a data set containing sensor information of
smart-phones from 29 subjects, which records two-second
time-series data from multiple sensors, such as accelerom-
eter, gyroscope, gravimeter, etc. Statistical features from
both time and spectrum domains are extracted with 191 di-
mensions for all the 5144 data instances. The OS types
(IOS/Android) are considered to be the domain-difference.
We select 12 subjects that have used both types of the phone
system and then construct a biased learning task as shown
in Table 4. The ELEGANT method is not suitable for non-
image data and therefore is removed. The results are re-
ported in Table 5, in which our method signiﬁcantly outper-
forms other methods in aAUC and (aFAR + aFRR)/2. The
SE-GZSL method also underperforms for this difﬁcult type
of domain-difference as well. The CDRD method still un-
derperforms in the multi-label type of metrics, especially in
(aFAR + aFRR)/2.

4.4. Ablative Study

We conduct a series of ablation experiments on the C-
MNIST data set in the aforementioned setting to demon-

11434

Methods

aAUC (aFAR + aFRR)/2 ACC@1

98.42
Stage 1+2
95.91
Stage 1
78.87
Single-Branch
Shared-Ds
87.27
No-Adv-Stage-1 92.47
No-Adv-At-All
77.69
Direct
78.35

6.14
10.20
26.70
18.72
14.81
27.41
26.70

84.27
70.56
24.47
46.75
46.97
15.92
20.96

Table 6. Results of the ablation study.

strate how the OVRDL (stage 1) and AAL (stage 2) mecha-
nisms contribute to the performance. Speciﬁcally, we com-
pare the performance of the following four model variants.
Single-Branch. Only the ﬁrst branch of networks in stage
1 is left. Stage 2 is therefore removed because it works with
a multi-branch stage 1.

Shared-Ds. D1j = . . . = Dmj , for all j ∈ [m + 1].
No-Adv-Stage-1. The networks {Djj ′}j6=j ′ in stage 1 are

removed.

No-Adv-At-All. Based on No-Adv-Stage-1, in stage 2,
losses are back-propagated to all the networks as normal. It
is the ABS-Net [18] method.

The results are presented in Table 6. It is notable that
Single-Branch’s performances drastically decrease compar-
ing with other methods containing adversarial learning. The
performances of Single-Branch are similar to those of the
related approaches listed in Table 2. Such phenomenon sug-
gests that building a single-branch model to handle domain-
differences is not sufﬁcient and that it is worthwhile to build
a multi-branch model to learn all the attributes to improve
the representation ability of P . Such a multi-branch struc-
ture is the main difference between our method and the re-
lated approaches, which we believe is of the main structural
contributions of our framework. Besides, Shared-Ds’ per-
formances also decrease considerably. It is worth mention-
ing that, for Shared-Ds, the performances of both stages
are nearly the same. These phenomena demonstrate that
restricting the attribute vectors in the same space harms
their learning of independent representations. Comparing
No-Adv-Stage-1 with Shared-Ds, no adversarial learning
in stage 1 is better than “shared” adversarial learning, which
also demonstrates the importance of independent represen-
tations. These phenomena demonstrate the high effective-
ness of our proposed OVRDL mechanism.

On the other hand, compared stage 1+2 with stage 2, the
improvement gained from stage 2 is signiﬁcant. For No-
Adv-Stage-1, it is worth mentioning that it can only achieve
aAUC of 75% without stage 2. Moreover, No-Adv-At-All
signiﬁcantly underperforms compared with No-Adv-Stage-
1 by only changing the back-propagation mechanism of
stage 2. These phenomena demonstrate the high effective-
ness of our proposed AAL mechanism in stage 2.

Figure 4. Improvements of the AAL mechanism in stage 2 during
different training phases of stage 1.

We further investigate the effectiveness of the AAL
mechanism during different training phases of stage 1.
Fig. 4 shows that the AAL mechanism can contribute 25%
absolute performances at the beginning of the training. At
the middle and later phases of training, the improvements
are limited, because AAL aims to eliminate biased factors
in the features further, but such factors are nearly cleansed
to the optimum by stage 1.

5. Conclusion

In this paper, we investigate data biases and a general-
ized cross-domain recognition problem in the ﬁeld of au-
thentication where domains do not share classes. We recog-
nize the class for unseen hclass, domaini combinations of
data. We propose a two-stage disentangle learning method
to tackle the problem. The stage 1 builds a one-versus-rest
disentangle learning mechanism to disentangle the class and
each type of domain-difference. The stage 2 conducts a
data augmentation and uses a proposed additive adversarial
learning to improve the disentanglement of stage 1 further.
We also discuss how to avoid the dilemma due to disentan-
gling causally related types of domain-difference. The ex-
periments demonstrate that our method signiﬁcantly outper-
forms existing state-of-the-art methods. We also conduct an
ablation study to demonstrate the effectiveness of the crit-
ical components of our method. Some interesting future
directions of research include developing transfer learning
algorithms ﬂexible to train to increase the number of types
of domain-difference.

Acknowledgment

We would like to thank the TuringShield team of Tencent
for supporting our research, Lu et al. [18] for sharing their
codes of ABS-Net and C-MNIST data set, and Dr. Bing Bai
from the Cloud and Smart Industries Group at Tencent for
his insightful suggestions.

11435

References

[1] M. Abadi, P. Barham, J. Chen, Z. Chen, A. Davis, J. Dean,
M. Devin, S. Ghemawat, G. Irving, M. Isard, et al. Tensor-
ﬂow: a system for large-scale machine learning. In OSDI,
volume 16, pages 265–283, 2016. 6

[2] A. Bedagkar-Gala and S. K. Shah. A survey of approaches
Image and Vision

and trends in person re-identiﬁcation.
Computing, 32(4):270–286, 2014. 1

[3] A. Beutel, J. Chen, Z. Zhao, and E. H. Chi. Data decisions
and theoretical implications when adversarially learning fair
representations. arXiv preprint arXiv:1707.00075, 2017. 2,
6, 7

[4] D. Bhattacharyya, R. Ranjan, F. Alisherov, M. Choi, et al.
Biometric authentication: A review. International Journal of
u-and e-Service, Science and Technology, 2(3):13–28, 2009.
1

[5] D. Bouchacourt, R. Tomioka, and S. Nowozin. Multi-
level variational autoencoder: Learning disentangled rep-
resentations from grouped observations.
arXiv preprint
arXiv:1705.08841, 2017. 3, 6, 7

[6] J. Cao, O. Katzir, P. Jiang, D. Lischinski, D. Cohen-Or,
C. Tu, and Y. Li. Dida: Disentangled synthesis for domain
adaptation. arXiv preprint arXiv:1805.08019, 2018. 3

[7] A. Chouldechova and A. Roth. The frontiers of fairness in
machine learning. arXiv preprint arXiv:1810.08810, 2018.
2

[8] G. Csurka. Domain adaptation for visual applications: A
comprehensive survey. arXiv preprint arXiv:1702.05374,
2017. 1

[9] Y. Ganin and V. Lempitsky. Unsupervised domain adaptation
by backpropagation. arXiv preprint arXiv:1409.7495, 2014.
2, 6, 7

[10] N. Goel, M. Yaghini, and B. Faltings. Non-discriminatory
machine learning through convex fairness criteria. In Pro-
ceedings of the Thirty-Second AAAI Conference on Artiﬁcial
Intelligence, New Orleans, Louisiana, USA, 2018. 2

[11] M. Hardt, E. Price, N. Srebro, et al. Equality of opportunity
In Advances in neural information

in supervised learning.
processing systems, pages 3315–3323, 2016. 4

[12] C. Heinze-Deml and N. Meinshausen. Grouping-by-id:

Guarding against adversarial domain shifts. 2018. 3

[13] A. Jolicoeur-Martineau. The relativistic discriminator: a
arXiv preprint

key element missing from standard gan.
arXiv:1807.00734, 2018. 4

[14] M. Kocaoglu, C. Snyder, A. G. Dimakis, and S. Vishwanath.
Causalgan: Learning causal implicit generative models with
adversarial training. arXiv preprint arXiv:1709.02023, 2017.
3

[15] Y.-C. Liu, Y.-Y. Yeh, T.-C. Fu, S.-D. Wang, W.-C. Chiu,
and Y.-C. F. Wang. Detach and adapt: Learning cross-
domain disentangled deep representation.
arXiv preprint
arXiv:1705.01314, 2017. 3, 6, 7

[16] Z. Liu, P. Luo, X. Wang, and X. Tang. Deep learning face at-
tributes in the wild. In Proceedings of the IEEE International
Conference on Computer Vision, pages 3730–3738, 2015. 6,
7

[17] M. Long, Y. Cao, J. Wang, and M. I. Jordan. Learning
transferable features with deep adaptation networks. arXiv
preprint arXiv:1502.02791, 2015. 2

[18] J. Lu, J. Li, Z. Yan, F. Mei, and C. Zhang. Attribute-based
synthetic network (abs-net): Learning more from pseudo
feature representations. Pattern Recognition, 80:129–142,
2018. 3, 5, 6, 7, 8

[19] Y. Luo, Y. Wen, L. Duan, and D. Tao. Transfer metric learn-
ing: Algorithms, applications and outlooks. arXiv preprint
arXiv:1810.03944, 2018. 1

[20] D. Madras, E. Creager, T. Pitassi, and R. Zemel. Learn-
ing adversarially fair and transferable representations. arXiv
preprint arXiv:1802.06309, 2018. 3, 6, 7

[21] X. Mao, Q. Li, H. Xie, R. Y. Lau, Z. Wang, and S. P. Smol-
ley. Least squares generative adversarial networks. In Com-
puter Vision (ICCV), 2017 IEEE International Conference
on, pages 2813–2821. IEEE, 2017. 4

[22] A. Mir, S. Rubab, and Z. Jhat. Biometrics veriﬁcation: a
International Journal of Computing and

literature survey.
ICT Research, 5(2):67–80, 2011. 1

[23] S. J. Pan, I. W. Tsang, J. T. Kwok, and Q. Yang. Domain
adaptation via transfer component analysis. IEEE Transac-
tions on Neural Networks, 22(2):199–210, 2011. 2

[24] S. J. Pan, Q. Yang, et al. A survey on transfer learn-
ing. IEEE Transactions on knowledge and data engineering,
22(10):1345–1359, 2010. 1

[25] V. M. Patel, R. Gopalan, R. Li, and R. Chellappa. Visual do-
main adaptation: A survey of recent advances. IEEE signal
processing magazine, 32(3):53–69, 2015. 1

[26] P. Sattigeri, S. C. Hoffman, V. Chenthamarakshan, and K. R.
Varshney. Fairness gan. arXiv preprint arXiv:1805.09910,
2018. 3

[27] W. Shen and R. Liu. Learning residual images for face at-
tribute manipulation. In 2017 IEEE Conference on Computer
Vision and Pattern Recognition (CVPR), pages 1225–1233.
IEEE, 2017. 3

[28] S. Sun, H. Shi, and Y. Wu. A survey of multi-source domain

adaptation. Information Fusion, 24:84–92, 2015. 1

[29] E. Tzeng, J. Hoffman, K. Saenko, and T. Darrell. Adversarial
discriminative domain adaptation. In Computer Vision and
Pattern Recognition (CVPR), volume 1, page 4, 2017. 2

[30] V. K. Verma, G. Arora, A. Mishra, and P. Rai. General-
ized zero-shot learning via synthesized examples.
In The
IEEE Conference on Computer Vision and Pattern Recogni-
tion (CVPR), 2018. 3, 6, 7

[31] C. Wadsworth, F. Vera, and C. Piech. Achieving fairness
through adversarial learning: an application to recidivism
prediction. arXiv preprint arXiv:1807.00199, 2018. 2

[32] M. Wang and W. Deng. Deep visual domain adaptation: A

survey. Neurocomputing, 312:135–153, 2018. 1

[33] K. Weiss, T. M. Khoshgoftaar, and D. Wang. A survey of

transfer learning. Journal of Big Data, 3(1):9, 2016. 1, 2

[34] T. Xiao, J. Hong, and J. Ma. Dna-gan: Learning disentangled
representations from multi-attribute images. arXiv preprint
arXiv:1711.05415, 2017. 3

[35] T. Xiao, J. Hong, and J. Ma. Elegant: Exchanging latent
encodings with gan for transferring multiple face attributes.

11436

In The European Conference on Computer Vision (ECCV),
September 2018. 3, 6, 7

[36] D. Xu, S. Yuan, L. Zhang, and X. Wu. Fairgan: Fairness-
arXiv preprint

aware generative adversarial networks.
arXiv:1805.11202, 2018. 3

[37] N. Yager and A. Amin. Fingerprint veriﬁcation based on
minutiae features: a review. Pattern Analysis and Applica-
tions, 7(1):94–113, 2004. 1

[38] H. Yu, M. Hu, and S. Chen. Multi-target unsupervised do-
main adaptation without exactly shared categories. arXiv
preprint arXiv:1809.00852, 2018. 3

[39] B. H. Zhang, B. Lemoine, and M. Mitchell. Mitigating
unwanted biases with adversarial learning. arXiv preprint
arXiv:1801.07593, 2018. 2

[40] G. Zhang, M. Kan, S. Shan, and X. Chen. Generative adver-
sarial network with spatial attention for face attribute editing.
In Proceedings of the European Conference on Computer Vi-
sion (ECCV), pages 417–432, 2018. 3

[41] W. Zhao, R. Chellappa, P. J. Phillips, and A. Rosenfeld. Face
recognition: A literature survey. ACM computing surveys
(CSUR), 35(4):399–458, 2003. 1

[42] Y. Zhao.

Network inference from temporal-dependent
arXiv preprint arXiv:1808.08478,

grouped observations.
2018. 3

[43] L. Zheng, Y. Yang, and A. G. Hauptmann.

identiﬁcation: Past, present and future.
arXiv:1610.02984, 2016. 1

Person re-
arXiv preprint

11437

