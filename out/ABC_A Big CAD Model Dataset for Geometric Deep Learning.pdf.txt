ABC: A Big CAD Model Dataset For Geometric Deep Learning

Sebastian Koch

TU Berlin

Albert Matveev
Skoltech, IITP

Zhongshi Jiang

New York University

s.koch@tu-berlin.de

albert.matveev@skoltech.ru

jiangzs@nyu.edu

Francis Williams

New York University

Alexey Artemov

Skoltech

Evgeny Burnaev

Skoltech

francis.williams@nyu.edu

a.artemov@skoltech.ru

e.burnaev@skoltech.ru

Marc Alexa
TU Berlin

marc.alexa@tu-berlin.de

Denis Zorin

New York University
dzorin@cs.nyu.edu

Daniele Panozzo

New York University

panozzo@nyu.edu

Abstract

1. Introduction

We introduce ABC-Dataset, a collection of one million
Computer-Aided Design (CAD) models for research of ge-
ometric deep learning methods and applications. Each
model is a collection of explicitly parametrized curves and
surfaces, providing ground truth for differential quantities,
patch segmentation, geometric feature detection, and shape
reconstruction. Sampling the parametric descriptions of
surfaces and curves allows generating data in different for-
mats and resolutions, enabling fair comparisons for a wide
range of geometric learning algorithms. As a use case for
our dataset, we perform a large-scale benchmark for esti-
mation of surface normals, comparing existing data driven
methods and evaluating their performance against both the
ground truth and traditional normal estimation methods.

The combination of large data collections and deep
learning algorithms is transforming many areas of computer
science. Large data collections are an essential part of this
transformation. Creating these collections for many types
of data (image, video, and audio) has been boosted by the
ubiquity of acquisition devices and mass sharing of these
types of data on social media. In all these cases, the data
representation is based on regular discretization in space
and time providing structured and uniform input for deep
learning algorithms.

The situation is different for three-dimensional geomet-
ric models. Acquiring or creating high-quality models of
this type is still difﬁcult, despite growing availability of 3D
sensors, and improvements in 3D design tools. Inherent ir-

Figure 1: Random CAD models from the ABC-Dataset: https://deep-geometry.github.io/abc-dataset

9601

regularity of the surface data, and still-signiﬁcant level of
skill needed for creating high-quality 3D shapes contributes
to the limited availability of geometric datasets. Irregularity
of geometric data is reﬂected in commonly used geometric
formats, which differ in fundamental ways from formats for
images, video, and audio. Existing datasets often lack reli-
able ground truth annotations. We further discuss currently
available geometric datasets in Section 2.

Common shape analysis and geometry processing tasks
that can beneﬁt from geometric deep learning include esti-
mation of differential surface properties (Section 5.1), fea-
ture detection, and shape reconstruction. Ground truth for
some of these tasks is hard to generate, as marking features
by hand is a laborious task and differential properties can
only be approximated for sampled surfaces.

In this work, we make the following contributions:

Dataset. We introduce a dataset for geometric deep learn-
ing consisting of over 1 million individual (and high quality)
geometric models, each deﬁned by parametric surfaces and
associated with accurate ground truth information on the de-
composition into patches, sharp feature annotations, and an-
alytic differential properties. We gather the models through
a publicly available interface hosted by Onshape [5]. Simi-
lar to vector graphics for images, this representation allows
resampling the surface data at arbitrary resolutions, with or
without connectivity information (i.e. into a point cloud or
a mesh).

Benchmark. We demonstrate the use of the dataset by
building a benchmark for the estimation of surface normals.
This benchmark is targeting methods that compute normals
(1) locally on small regions of a surface, and (2) globally
over the entire surface simultaneously. We have chosen
this problem for two reasons: most existing geometric deep
learning methods were tested on this task, and very precise
ground truth can be readily obtained for shapes in our data
set. We run the benchmark on 7 existing deep learning algo-
rithms, studying how they scale as the dataset size increases,
and comparing them with 5 traditional geometry processing
algorithms to establish an objective baseline for future al-
gorithms. Results are presented in Section 5.1.

Processing Pipeline. We develop an open-source geom-
etry processing pipeline that processes the CAD models to
directly feed deep learning algorithms. Details are provided
in Section 3. We will continually update the dataset and
benchmark as more models are added to the public collec-
tion of models by Onshape. Our contribution adds a new
resource for the development of geometric deep learning,
targeting applications focusing on human-created, mechan-
ical shapes.
It will allow researchers to compare against
existing techniques on a large and realistic dataset of man-
made objects.

Dataset

#Models

s
e
l
i
F
D
A
C

s
e
v
r
u
C

s
e
h
c
t
a
P

s
c
i
t
n
a
m
e
S

s
e
i
r
o
g
e
t
a
C

ABC
ShapeNet* [22]
ShapeNetCore
ShapeNetSem
ModelNet [58]
Thingi10K [62]
PrincetonSB[9]
NIST [4]

1,000,000+ X X X –
3,000,000+ –
–
51,300
–
12,000
151,128
–
–
10,000
–
6670
≤ 30
X X X –

–
– X X
– X X
– X X
– X X
– X
–
– X
–
–

–
–
–
–
–
–

Table 1: Overview of existing datasets and their capabili-
ties. *: The full ShapeNet dataset is not yet publicly avail-
able, only the subsets ShapeNetCore and ShapeNetSem.

2. Related Work

We review existing datasets for data-driven processing
of geometrical data, and then review both data-driven and
analytical approaches to estimate differential qualities on
smooth surfaces.

3D Deep Learning Datasets. The community has seen
a growth in the availability of 3D models and datasets.
Segmentation and classiﬁcation algorithms have beneﬁted
greatly from the most prominent ones [22, 58, 62, 9]. Fur-
ther datasets are available for large scenes [51, 23], mesh
registration [14] and 2D/3D alignment [12]. The dataset
proposed in this paper has the unique property of containing
the analytic representation of surfaces and curves, which is
ideal for a quantitative evaluation of data-driven methods.
Table 1 gives an overview of the most comparable datasets
and their characteristics and capabilities.

Point Cloud Networks. Neural networks for point clouds
are particularly popular, as they make minimal assumptions
on input data. One of the earliest examples is PointNet [46]
and its extension PointNet++ [47], which ensure that the
network output is invariant with respect to point permuta-
tions. PCPNet [29] is a variation of PointNet tailored for
estimating local shape properties: it extracts local patches
from the point cloud, and estimates local shape properties at
the central points of these patches. PointCNN [38] explores
the idea of learning a transformation from the initial point
cloud, which provides the weights for input points and as-
sociated features, and produces a permutation of the points
into a latent order.

Point Convolutional Neural Networks by Extension Op-
erators [11] is a fundamentally different way to process
point clouds through mapping point cloud functions to vol-
umetric functions and vice versa through extension and re-

9602

striction operators. A similar volumetric approach has been
proposed in Pointwise Convolutional Neural Networks [32]
for learning pointwise features from point clouds.

PointNet-based techniques, however, do not attempt to
use local neighborhood information explicitly. Dynamic
Graph CNNs [55] uses an operation called EdgeConv,
which exploits local geometric structures of the point set
by generating a local neighborhood graph based on proxim-
ity in the feature space and applying convolution-like op-
eration on the edges of this graph.
In a similar fashion,
FeaStNet [54] proposes a convolution operator for general
graphs, which applies ﬁlter kernels in a data-driven manner
to the local irregular neighborhoods.

Networks on Graphs and Manifolds. Neural networks
for graphs have been introduced in [48], and extended in
[39, 52]. A wide class of convolutional neural networks
with spectral ﬁlters on graphs was introduced in [20] and
developed further in [30, 24, 36]. Graph convolutional neu-
ral networks were applied to non-rigid shape analysis in
[15, 60]. Surface Networks [37] further proposes the use
of the differential geometry operators to extend GNNs to
exploit properties of the surface. For a number of problems
where quantities of interest are localized, spatial ﬁlters are
more suitable than spectral ﬁlters. A special CNN model for
meshes which uses intrinsic patch representations was pre-
sented in [41], and further generalized in [16, 42]. In con-
trast to these intrinsic models, Euclidean models [59, 57]
need to learn the underlying invariance of the surface em-
bedding, hence they have higher sample complexity. More
recently, [40] presented a surface CNN based on the canon-
ical representation of planar ﬂat-torus. We refer to [19] for
an extensive overview of geometric deep learning methods.

Analytic Normal Estimation Approaches. The simplest
methods are based on ﬁtting tangent planes. For a point set,
these methods estimate normals in the points as directions
of smallest co-variance (i.e., the tangent plane is the total
least squares ﬁt to the points in the neighborhood). For a
triangle mesh, normals of the triangles adjacent to a vertex
can be used to compute a vertex normal as a weighted aver-
age. We consider uniform, area, and angle weighting [34].
One can also ﬁt higher order surfaces to the discrete sur-
face data. These methods ﬁrst estimate a tangent plane, and
then ﬁt a polynomial over the tangent plane that interpo-
lates the point for which we want to estimate the normal
(a so-called osculating jet [21]). A more accurate normal
can then be recomputed from the tangents of the polyno-
mial surface approximation at the point. The difference for
triangle meshes and point sets is only in collecting the sam-
ples in the neighborhood. In addition, one can use robust
statistics to weight the points in the neighborhood [35].

For the weighted triangle normals we use the implemen-
tation of libigl [33], for computation of co-variance normals

and osculating jets we use the functions in CGAL [45, 10].
For the robust estimation the authors have provided source
code. There are many other techniques for estimating sur-
face normals (e.g. [43]), however we only focus on a se-
lected subset in the current work.

One important generalization is the detection of sharp
edges and corners, where more than one normal can be as-
signed to a point [44, 17]. However, as we only train the ma-
chine learning methods to report a single normal per point,
we leave an analysis of these extensions for future work.

3. Dataset

We identify six crucial properties that are desirable for
an ”ideal” dataset for geometric deep learning: (1) large
size: since deep networks require large amounts of data,
we want to have enough models to ﬁnd statistically signiﬁ-
cant patterns; (2) ground truth signals: in this way, we can
quantitatively evaluate the performance of learning on dif-
ferent tasks; (3) parametric representation: so that we can
resample the signal at the desired resolution without intro-
ducing errors; (4) expandable: it should be easy to make the
collection grow over time, to keep the dataset challenging
as progress in learning algorithms is made; (5) variation:
containing a good sampling of diverse shapes in different
categories; (6) balanced: each type of objects should have a
sufﬁcient number of samples.

Since existing datasets are composed of acquired or syn-
thesized point clouds or meshes, they do not satisfy prop-
erty 2 or 3. We thus propose a new dataset of CAD models,
which is complementary: it satisﬁes properties 1-4; it is re-
stricted to a speciﬁc type of models (property 6), but has
a considerable variation inside this class. While restriction
to CAD models can be viewed as a downside, it strikes a
good balance between having a sufﬁcient number of similar
samples and diversity of represented shapes, in addition to
having high-quality ground truth for a number of quantities.

Acquisition. Onshape has a massive online collection of
CAD models, which are freely usable for research purposes.
By collecting them over a period of 4 months we obtained
a collection of over 1 million models (see Figure 2).

Ground Truth Signals and Vector Representation. The
data is encoded in a vectorial format that enables to resam-
ple it at arbitrary resolution and to compute analytically a
large set of signals of interest (Section 4), which can be used
as a ground truth.

Challenge. However, the data representation is not suit-
able for most learning methods, and the conversion of CAD
models to discrete formats is a difﬁcult task. This paper
presents a robust pipeline to process, and use CAD models
as an ideal data source for geometry processing algorithms.

9603

Figure 2: Random examples from the dataset. Most models are mechanical parts with sharp edges and well deﬁned surfaces.

3.1. CAD Models and Boundary Representations

In the following, we will use the term CAD model to re-
fer to a geometric shape deﬁned by a boundary representa-
tion (B-Rep). The boundary representation describes mod-
els by their topology (faces, edges, and vertices) as well as
their geometry (surfaces, curves, and points). The topol-
ogy description is organized in a hierarchical way: Solids
are bound by a set of oriented faces which are called shells;
Faces are bound by wires which are ordered lists of edges
(the order deﬁnes the face orientation); Edges are the ori-
ented connections between 2 vertices; Vertices are the basic
entities, corresponding to points in space.

Each of these entities has a geometric description, which
allows us to embed the model in 3D space. In our dataset,
each surface can represent a plane, cone, cylinder, sphere,
torus, surface of revolution or extrusion or NURBS patch
[26].
Similarly, curves can be lines, circles, ellipses,
parabolas, hyperbolas or NURBS curves [26]. Each vertex
has coordinates in 3D space. An additional complexity is
added by trimmed patches (see [26] for a full description).

3.2. Processing Pipeline

Assembling a dataset of such a large size is a time-
consuming task where many design decisions have to be
made beforehand: as an example, it requires around 2 CPU
years to extract triangle meshes for 1 million CAD models.
To encourage active community participation and easy
adoption, we use accessible, well-supported open-source
tools, instead of relying on commercial CAD software. It
allows the community to use and expand our dataset in the
future. Our pipeline is designed to run in parallel on large
computing clusters.

The Onshape public collection is not curated.

It con-
tains all the public models created by their users, without
any additional ﬁltering. Despite the fact that all models
have been manually created, there is a small percentage of
imperfect models with broken boundaries, self-intersecting
faces or edges, as well as duplicate vertices. In addition to
that, there are many duplicate models, and especially mod-
els that are just made of single primitives such as a plane,

box or cylinder, probably created by novice users that were
learning how to use Onshape.

Given the massive size of the dataset, we developed a set
of geometric and topological criteria to ﬁlter low quality of
defective models, which we describe in the supplementary
material, and we leave a semantic, crowd-sourced ﬁltering
and annotation as a direction for future work.

Step 1: B-Rep Loading and Translation. The STEP ﬁles
[8] we obtain from Onshape contain the boundary repre-
sentation of the CAD model, which we load and query
using the open-source software Open Cascade [6]. The
translation process generates for each surface patch and
curve segment an explicit parameterization, which can be
sampled at arbitrary resolution.

Step 2: Meshing/Discretization. The parameterizations
of the patches are then sampled and triangulated using
the open-source software Gmsh [28]. We offer an option
here to select between uniform (respecting a maximal edge
length) and curvature adaptive sampling.

Step 3: Topology Tree Traversal/Data Extraction. The
sampling of B-Rep allows to track correspondences be-
tween the continuous and discrete representations. As they
can be differentiated at arbitrary locations, it is possible to
calculate ground truth differential quantities for all sam-
ples of the discrete model. Another advantage is the ex-
plicit topology representation in B-Rep models, which can
be transferred to the mesh in the form of labels. These la-
bels deﬁne for each triangle of the discrete mesh to which
surface patch it belongs. The same applies also for the
curves, we can label edges in the discrete mesh as sharp
feature edges. While CAD kernels provide this informa-
tion, it is difﬁcult to extract it in a format suitable for learn-
ing tasks. Our pipeline exports this information in yaml
ﬁles with a simple structure (see supplementary material).

Step 4: Post-processing. We provide tools to ﬁlter our
meshes depending on quality or number of patches, to
compute mesh statistics, and to resample the generated
surfaces to match a desired number of vertices [27].

9604

Surface Vectorization. The B-rep of a CAD models is
the counterpart of a vector representation for images, that
can be resampled at any desired resolution. The conversion
of a surface triangle mesh into a B-rep is an interesting and
challenging research direction, for which data driven meth-
ods are still at their infancy [49, 50, 25].

Estimation of Differential Quantities. Our models have
ground truth normals and curvature values making them an
ideal, objective benchmark for evaluating algorithms to pre-
dict these quantities on point clouds or triangle meshes of
artiﬁcial origin.

Sharp Feature Detection. Sharp features are explicitly
encoded in the topological description of our models, and
it is thus possible to obtain ground truth data for predicting
sharp features on point clouds [56] and meshes.

Shape Reconstruction. Since the ground truth geometry
is known for B-rep models, they can be used to simulate a
scanning setup and quantitatively evaluate the reconstruc-
tion errors of both reconstruction [13, 53] and point cloud
upsampling [61] techniques.

Image Based Learning Tasks. Together with the dataset,
we provide a rendering module (based on Blender [2]) to
generate image datasets.
It supports rendering of models
posed in physically static orientations on a ﬂat plane, differ-
ent lighting situations, materials, camera placements (half-
dome, random) as well as different rendering modes (depth,
color, contour). Note that all these images can be consid-
ered ground truth, since there is no geometric approxima-
tion error.

Robustness of Geometry Processing Algorithms. Be-
sides data-driven tasks, the dataset can also be employed
for evaluating the robustness of geometry processing algo-
rithms. Even a simple task like normal estimation is prob-
lematic on such a large dataset. Most of the methods we
evaluated in Section 5.1 fail (i.e. produce invalid normals
with length zero or which contain NANs) on at least one
model: our dataset is ideal for studying and solving these
challenging robustness issues.

5. Normal Estimation Benchmarks

Figure 3: Each model in our dataset is composed of mul-
tiple patches and feature curves. The two images show the
distribution of types of patches (left) and curves (right) over
the current dataset (≈ 1M models).

Figure 4: Histograms over the number of patches and curves
per CAD model. This shows that there are many simpler
models which consist of less than 30 patches/100 curves as
well as more complex ones. Both histograms are truncated
at the right side.

3.3. Analysis and Statistics

We show an overview of the models in the dataset in Fig-
ures 1 and 2. In Figure 3 and 4 we show the distribution of
surface and edge types and the histogram of patch and edge
numbers, to give an impression of the complexity and va-
riety of the dataset. Updated statistics about the growing
dataset are available on our dataset website [1].

4. Supported Applications

We brieﬂy overview a set of applications that may beneﬁt
from our dataset, that can be used as either training data or
as a benchmark.

Patch Decomposition. Each object in our collection is
naturally divided into surface regions, separated by feature
lines. The decomposition is deﬁned by the author when a
shape is constructed, and is likely to be semantically mean-
ingful. It is also constrained by a strong geometric criteria:
each region should be representable by a (possibly trimmed)
NURBS patch.

We now introduce a set of large scale benchmarks to
evaluate algorithms to compute surface normals, exploiting
the availability of ground truth normals on the B-rep mod-
els. To the best of our knowledge, this is the ﬁrst large scale
study of this kind, and the insights that it will provide will
be useful for the development of both data-driven and ana-
lytic methods.

9605

Figure 5: Samples from the different categories in our normal estimation benchmark. From left to right: local patches of
growing size and complexity (512, 1024, 2048 vertices), and full models at different densities (512, 1024, 2048 vertices).

Construction. To fairly compare a large variety of both
data-driven and analytic methods, some targeting local esti-
mation and some one-shot prediction of all normals of a 3D
model, we build a series of datasets by randomly sampling
points on our meshed B-reps, and growing patches of dif-
ferent sizes, ranging from 512 vertices to the entire model
(Figure 5). For each patch size, we generate 4 benchmarks
with an increasing number of patches, from 10k to 250k, to
study how the data-driven algorithms behave when they are
trained on a larger input set.

Split. All benchmark datasets are randomly split into
training and test set with a distribution of 80% training data
and 20% test data. The split will be provided to make the
results reproducible.

5.1. Evaluation

Algorithms. We select 12 representative algorithms from
the literature, and 5 of them are traditional ones, Robust Sta-
tistical Estimation on Discrete Surfaces (RoSt) [35] operat-
ing on point clouds (PC), and meshes (M), Osculating Jets
(Jets) [21], also on point clouds and meshes, and Uniform
weighting of adjacent face normals (Uniform) [34]. No-
tice that we replace K-ring neighborhoods with K-nearest
neighbors for RoSt and Jets to support point cloud input.
Also, 7 machine learning methods are selected, including
PointNet++ (PN++) [47], Dynamic Graph CNN (DGCNN)
[55], Pointwise CNN (PwCNN) [32], PointCNN (PCNN)
[38], Laplacian Surface Network (Laplace) [37], PCP-Net
(PCPN) [29] and Point Convolutional Neural Networks
by Extension Operators (ExtOp) [11]. Of these methods,
Laplace operates on triangle mesh input and the rest on
point cloud input. Most of their output is one normal per
vertex, except for PCPN and ExtOp the output is one nor-
mal for the center of the patch. We provide a detailed ex-
planation of the (hyper-)parameters and modiﬁcations we
did for each method in the supplementary material. For the
statistics, we used only the valid normals reported by each
method, and we ﬁltered out all the degenerate ones.

Protocol. We compare the methods above on the bench-
marks, using the following protocol: (1) for each method,
we obtained the original implementation from the authors

(or a reimplementation in popular libraries); (2) we used the
recommended or default values for all (hyper-)parameters
of the learning approaches (if these were not provided, we
ﬁne-tuned them on a case by case basis); (3) if the imple-
mentation does not directly support normal estimation, we
modiﬁed their code following the corresponding descrip-
tion in the original paper (4) we used the same loss func-
tion 1 − (cid:0)nT ˆn(cid:1)2
, with n as the estimated normal and ˆn as
the ground truth normal, for all methods. Note that this loss
function does not penalize normals that are inverted (ﬂipped
by 180◦), which is an orthogonal problem usually ﬁxed as
in a postprocessing step [31].

Results. A listing of the statistical results for all meth-
ods is given in Table 2. Our experiments show that neu-
ral networks for normal estimation are stable across several
runs; standard deviation of the losses is of the order of 10−3.
For the 10k dataset, most of the networks converge within
24 hours on a NVIDIA GeForce GTX 1080 Ti GPU. We
capped the training time of all methods to 72 hours.

Comparison of Data-Driven Methods. We observe, as
expected, that the error is reduced as we increase the num-
ber of samples in the training set, this is consistent for all
methods on both patches and full models. However, the im-
provement is modest (Figures 6 and 7).

Sampling Resolution on Full Models. We also explore
how data-driven methods behave when sampling resolution
is growing. DGCNN, PCNN, and PwCNN clearly beneﬁt
from sampling resolution, while PN++ does not show clear
improvements. This phenomenon is likely linked to the spa-
tial subsampling mechanism that is used to ensure sublinear
time in training, but prevents this method from leveraging
the extra resolution. In case of Laplace surface network, it
is difﬁcult to understand the effect since it did not converge
after 3 days of training on the highest resolution.

Comparison of Analytic Methods. Analytic methods are
remarkably consistent across dataset sizes and improve as
the mesh sampling resolution is increased. The methods
based on surface connectivity heavily outperform those re-
lying on K-nearest neighbour estimation, demonstrating
that connectivity is a valuable information for this task.

9606

6. Conclusion

We introduced a new large dataset of CAD models, and
a set of tools to convert them into the representations used
by deep learning algorithms. The dataset will continue to
grow as more models are added to the Onshape public col-
lection. Large scale learning benchmarks can be created us-
ing the ground truth signals that we extract from the CAD
data, as we demonstrate for the estimation of differential
surface quantities.

The result of our comparison will be of guidance to the
development of new geometric deep learning methods. Our
surprising conclusion is that, while deep learning meth-
ods which use only 3D points are superior to analytical
methods, this is not the case when connectivity informa-
tion is available. This suggests that existing graph architec-
tures struggle at exploiting the connectivity efﬁciently and
are considerably worse than the simplest analytical method
(uniform), which simply averages the normals of neigh-
bouring faces. It would be interesting to run a similar study
by extending these algorithms to correctly identify and pre-
dict multiple normals on sharp features and compare them
with specialized methods for this task [18].

Another surprising discovery is that even the uniform al-
gorithm fails to produce valid normals on roughly 100 mod-
els in our dataset due to ﬂoating point errors. These kinds
of problems are extremely challenging to identify, and we
believe that the size and complexity of our dataset are an
ideal stress test for robust geometry processing algorithms.

7. Distribution

The dataset and all information is available at:

https://deep-geometry.github.io/abc-dataset
It is distributed under the MIT license and split into chunks
of 10k models for each data type. The copyright owners
of the models are the respective creators (listed in the meta
information). The geometry processing pipeline is made
available under the GPL license in form of a containerized
software solution (Docker [3] and Singularity [7]) that can
be run on every suitable machine.

Acknowledgements

Figure 6: Plot of angle deviation error for the lower resolu-
tion patches (512 points) benchmark, using different sample
size (top to bottom: 10k, 50k, and 100k).

Figure 7: Plot of angle deviation error for the high-
resolution (2048 points) full model benchmark, using dif-
ferent sample size (top to bottom: 10k, 50k, and 100k).

Data-Driven vs. Analytic Methods. Almost all data-
driven methods perform well against analytic methods for
point clouds, especially if the model resolution is low. How-
ever, if the analytic methods are allowed to use connectiv-
ity information, they outperform all learning methods by a
large margin, even those also using connectivity informa-
tion. To further support this conclusion, we run a similar
experiment on a simpler, synthetic dataset composed of 10k
and 50k random NURBS patches and observe similar re-
sults, which are available in the supplementary material.

We are grateful to Onshape for providing the CAD models
and support. This work was supported in part through the NYU
IT High Performance Computing resources, services, and staff
expertise. Funding provided by NSF award MRI-1229185. We
thank the Skoltech CDISE HPC Zhores cluster staff for comput-
ing cluster provision. This work was supported in part by NSF
CAREER award 1652515, the NSF grants IIS-1320635, DMS-
1436591, and 1835712, the Russian Science Foundation under
Grant 19-41-04109, and gifts from Adobe Research, nTopology
Inc, and NVIDIA.

9607

020406080PN++DGCNNPwCNNPCNNLaplaceRoSt PCJets PCRoSt MJets MUniform020406080PN++DGCNNPwCNNPCNNLaplaceRoSt PCJets PCRoSt MJets MUniformMethod/
Vertices

+ 512
+
1024
N
P
2048

N 512
N
1024
C
G
2048
D

N 512
N
1024
C
w
2048
P

N 512
N
1024
C
P
2048

e 512
1024
2048

c
a
l
p
a
L

t 512
e
N
1024
P
C
2048
P

p 512
O
1024
t
x
E
2048

t

C 512
P
1024
2048

S
o
R

C 512
P
1024
s
t
e
2048
J

t

M 512
1024
2048

S
o
R

M 512
1024
2048

s
t
e
J

m 512
r
o
1024
f
i
n
2048
U

Full Models

Patches

Loss

Angle Deviation [◦]

Loss

Angle Deviation [◦]

50k

100k

10k

50k

100k

0.168
0.180
0.171

0.177
0.126
0.090

0.273
0.217
0.188

0.146
0.104
0.065

0.282
0.211
0.197

–
–
–

–
–
–

0.298
0.220
0.164

0.260
0.183
0.129

0.082
0.053
0.047

0.175
0.118
0.078

0.024
0.013
0.009

0.155
0.163
0.156

0.167
0.104
0.070

0.142
0.160
0.149

0.144
0.099
0.068

0.260
0.218
0.176*

0.252
0.198
0.168*

0.153
0.099
0.070

0.139
0.103
0.067

0.203
0.138
0.148*

0.133
0.146*
0.158*

–
–
–

–
–
–

0.300
0.223
0.166

0.261
0.186
0.132

0.084
0.055
0.048

0.176
0.118
0.079

0.025
0.013
0.010

–
–
–

–
–
–

–
–
–

–
–
–

0.084
0.056
0.050

0.175
0.117
0.079

0.024
0.013
0.009

10k

7.83
7.49
6.75

9.61
5.91
4.54

18.73
12.78
11.34

6.47
3.56
2.05

20.01
34.24
9.99

–
–
–

–
–
–

21.32
14.47
9.96

17.84
12.19
8.41

2.15
0.25
0.08

7.26
0.10
0.01

0.26
0.00
0.00

50k

100k

10k

50k

100k

7.32
6.06
5.47

8.32
4.59
2.80

6.43
6.17
5.08

7.13
4.34
2.77

17.27
13.10
10.54*

16.36
11.38
10.05*

6.96
3.46
2.44

11.94
9.43
9.95*

6.15
3.69
2.22

8.47
9.85*
10.57*

–
–
–

–
–
–

21.36
14.63
10.18

17.97
12.39
8.63

2.17
0.29
0.08

7.29
0.10
0.02

0.29
0.00
0.00

–
–
–

–
–
–

–
–
–

–
–
–

2.18
0.29
0.08

7.29
0.11
0.02

0.28
0.00
0.00

0.034
0.056
0.081

0.054
0.048
0.045

0.092
0.107
0.107

0.037
0.025
0.023

0.041
0.030
0.031

0.098†
0.123†
0.142†

0.074†
0.095†
0.091†

0.083
0.078
0.073

0.050
0.048
0.045

0.108
0.107
0.112

0.036
0.033
0.029

0.007
0.005
0.004

0.032
0.052
0.071

0.049
0.036
0.035

0.069
0.110
0.120*

0.043
0.030
0.025

0.047
0.027
0.040

0.081†
0.097†
0.200†

0.073†
0.096†
–

0.082
0.077
0.072

0.050
0.048
0.044

0.103
0.105
0.108

0.036
0.033
0.031

0.007
0.005
0.005

0.025
0.048
0.063

0.025
0.024
0.023

0.067
0.089
0.094

0.028
0.025
0.023*

0.022
0.029*
0.040*

–
–
–

–
–
–

–
–
–

–
–
–

0.102
0.105
0.107

0.036
0.033
0.031

0.007
0.005
0.004

10k

1.70
2.11
2.48

3.20
2.98
2.66

4.71
5.50
5.98

1.84
0.94
0.88

1.93
1.65
1.60

1.42
1.57
1.77

3.00
2.15
1.95

3.45
6.11
6.36*

1.84
1.37
1.01

3.13
1.36
1.67

9.95†
13.89†
16.24†

9.28†
9.55†
16.45†

2.42†
3.32†
3.00†

2.05†
2.50†
–

0.82
0.74
0.59

0.05
0.05
0.04

0.06
0.06
0.06

0.00
0.00
0.00

0.00
0.00
0.00

0.79
0.72
0.62

0.05
0.05
0.04

0.06
0.06
0.06

0.00
0.00
0.00

0.00
0.00
0.00

1.10
1.51
1.44

1.12
1.13
0.98

3.43
4.58
4.83

1.42
0.92
0.83*

1.12
1.46*
1.81*

–
–
–

–
–
–

–
–
–

–
–
–

0.06
0.06
0.06

0.00
0.00
0.00

0.00
0.00
0.00

and the angle deviation is calculated as the angle in degrees ∠(n

Table 2: Statistical results for all evaluated methods for the full model and patch benchmarks. The loss is calculated as
1 − (cid:0)nT ˆn(cid:1)2
ˆn) between ground truth normal and estimated
normal. For the loss we report the mean over all models, for the angle deviation we report the median of all models in the
according datasets. Osculating Jets and Robust Statistical Estimation are evaluated both on point cloud inputs (PC sufﬁx;
comparable to the learning methods) as well as mesh inputs (M sufﬁx). †: PCPNet and ExtOp were not run on full models
since they compute only 1 normal per patch (and their loss, differently from all other rows, is computed only on the vertex in
the center of the patch). *: the training was not completed before the time limit is reached, and the partial result is used for
inference.

,

9608

References

[1] ABC-Dataset.

https://deep-geometry.
github.io/abc-dataset. Accessed: 2019-03-
20.

[2] Blender. https://www.blender.org/. Ac-

cessed: 2018-11-14.

[3] Docker.

https://www.docker.com/. Ac-

cessed: 2018-11-11.

[4] NIST CAD Models and STEP Files with PMI.

https://catalog.data.gov/dataset/
nist-cad-models-and-step-files-
with-pmi. Accessed: 2018-11-11.

[5] Onshape. https://www.onshape.com/. Ac-

cessed: 2018-11-14.

[6] Open CASCADE Technology OCCT. https://
www.opencascade.com/. Accessed: 2018-11-
11.

[7] Singularity.

https://singularity.lbl.

gov/. Accessed: 2018-11-11.

[8] STEP File Format. https://en.wikipedia.
org/wiki/ISO_10303-21. Accessed: 2018-11-
11.

[9] The princeton shape benchmark. In Proceedings of the
Shape Modeling International 2004, SMI ’04, pages
167–178, Washington, DC, USA, 2004. IEEE Com-
puter Society.

[10] P. Alliez, S. Giraudot, C.

Jamin, F. Lafarge,
Q. M´erigot, J. Meyron, L. Saboret, N. Salman, and
S. Wu. Point set processing. In CGAL User and Ref-
erence Manual. CGAL Editorial Board, 4.13 edition,
2018.

[11] M. Atzmon, H. Maron, and Y. Lipman. Point convo-
lutional neural networks by extension operators. ACM
Trans. Graph., 37(4):71:1–71:12, July 2018.

[12] M. Aubry, D. Maturana, A. Efros, B. Russell, and
J. Sivic. Seeing 3d chairs: exemplar part-based 2d-
3d alignment using a large dataset of cad models. In
CVPR, 2014.

[13] M. Berger, J. A. Levine, L. G. Nonato, G. Taubin,
and C. T. Silva. A benchmark for surface reconstruc-
tion. ACM Transactions on Graphics (TOG), 32(2):20,
2013.

[14] F. Bogo, J. Romero, G. Pons-Moll, and M. J. Black.
Dynamic FAUST: Registering human bodies in mo-
tion. In IEEE Conf. on Computer Vision and Pattern
Recognition (CVPR), July 2017.

[15] D. Boscaini, J. Masci, S. Melzi, M. M. Bronstein,
U. Castellani, and P. Vandergheynst. Learning class-
speciﬁc descriptors for deformable shapes using lo-
calized spectral convolutional networks. In Computer

Graphics Forum, volume 34, pages 13–23. Wiley On-
line Library, 2015.

[16] D. Boscaini, J. Masci, E. Rodol`a, and M. Bronstein.
Learning shape correspondence with anisotropic con-
volutional neural networks.
In Advances in Neural
Information Processing Systems, pages 3189–3197,
2016.

[17] A. Boulch and R. Marlet. Fast and robust normal esti-
mation for point clouds with sharp features. Comput.
Graph. Forum, 31(5):1765–1774, Aug. 2012.

[18] A. Boulch and R. Marlet. Deep learning for robust
normal estimation in unstructured point clouds.
In
Proceedings of the Symposium on Geometry Process-
ing, SGP ’16, pages 281–290, Goslar Germany, Ger-
many, 2016. Eurographics Association.

[19] M. M. Bronstein, J. Bruna, Y. LeCun, A. Szlam, and
P. Vandergheynst. Geometric deep learning: going be-
yond euclidean data. IEEE Signal Processing Maga-
zine, 34(4):18–42, 2017.

[20] J. Bruna, W. Zaremba, A. Szlam, and Y. LeCun.
Spectral networks and locally connected networks on
graphs. arXiv preprint arXiv:1312.6203, 2013.

[21] F. Cazals and M. Pouget. Estimating differential quan-
tities using polynomial ﬁtting of osculating jets. Com-
puter Aided Geometric Design, 22(2):121 – 146, 2005.

[22] A. X. Chang, T. Funkhouser, L. Guibas, P. Hanrahan,
Q. Huang, Z. Li, S. Savarese, M. Savva, S. Song,
H. Su, J. Xiao, L. Yi, and F. Yu. ShapeNet: An
Information-Rich 3D Model Repository. Technical
Report arXiv:1512.03012 [cs.GR], Stanford Univer-
sity — Princeton University — Toyota Technological
Institute at Chicago, 2015.

[23] A. Dai, A. X. Chang, M. Savva, M. Halber,
T. Funkhouser, and M. Nießner. Scannet: Richly-
annotated 3d reconstructions of indoor scenes.
In
Proc. Computer Vision and Pattern Recognition
(CVPR), IEEE, 2017.

[24] M. Defferrard, X. Bresson, and P. Vandergheynst.
Convolutional neural networks on graphs with fast lo-
calized spectral ﬁltering. In Advances in Neural Infor-
mation Processing Systems, pages 3844–3852, 2016.

[25] T. Du, J. P. Inala, Y. Pu, A. Spielberg, A. Schulz,
D. Rus, A. Solar-Lezama, and W. Matusik.
Inver-
secsg: Automatic conversion of 3d models to csg
trees. ACM Trans. Graph, 37(6):213, 2018.

[26] G. Farin. Curves and Surfaces for CAGD: A Practical
Guide. Morgan Kaufmann Publishers Inc., San Fran-
cisco, CA, USA, 5th edition, 2002.

[27] M. Garland and P. S. Heckbert. Surface simpliﬁcation
using quadric error metrics. In Proceedings of the 24th

9609

Annual Conference on Computer Graphics and Inter-
active Techniques, SIGGRAPH ’97, pages 209–216,
New York, NY, USA, 1997. ACM Press/Addison-
Wesley Publishing Co.

[28] C. Geuzaine and J. F. Remacle. Gmsh: a three-
dimensional ﬁnite element mesh generator with built-
in pre- and post-processing facilities.
International
Journal for Numerical Methods in Engineering, 2009.

[29] P. Guerrero, Y. Kleiman, M. Ovsjanikov, and N. J. Mi-
tra. PCPNet: Learning local shape properties from raw
point clouds. Computer Graphics Forum, 37(2):75–
85, 2018.

[30] M. Henaff, J. Bruna, and Y. LeCun. Deep convo-
arXiv

lutional networks on graph-structured data.
preprint arXiv:1506.05163, 2015.

[31] H. Hoppe, T. DeRose, T. Duchamp, J. McDonald, and
W. Stuetzle. Surface reconstruction from unorganized
points, volume 26. ACM, 1992.

[32] B.-S. Hua, M.-K. Tran, and S.-K. Yeung.

Point-
wise convolutional neural networks, 2017.
cite
arxiv:1712.05245Comment: 10 pages, 6 ﬁgures, 10
tables. Paper accepted to CVPR 2018.

[33] A. Jacobson, D. Panozzo, et al.

libigl: A
simple C++ geometry processing library, 2018.
http://libigl.github.io/libigl/.

[34] S. Jin, R. R. Lewis, and D. West. A comparison of
algorithms for vertex normal computation. Vis. Com-
put., 21(1-2):71–82, Feb. 2005.

[35] E. Kalogerakis, P. Simari, D. Nowrouzezahrai, and
K. Singh. Robust statistical estimation of curvature on
discretized surfaces. In Proceedings of the Fifth Eu-
rographics Symposium on Geometry Processing, SGP
’07, pages 13–22, Aire-la-Ville, Switzerland, Switzer-
land, 2007. Eurographics Association.

[36] T. N. Kipf and M. Welling. Semi-supervised clas-
siﬁcation with graph convolutional networks. arXiv
preprint arXiv:1609.02907, 2016.

[37] I. Kostrikov, Z. Jiang, D. Panozzo, D. Zorin, and
B. Joan. Surface networks.
In IEEE Conference
on Computer Vision and Pattern Recognition, CVPR,
2018.

[38] Y. Li, R. Bu, M. Sun, and B. Chen. Pointcnn. CoRR,

abs/1801.07791, 2018.

[39] Y. Li, D. Tarlow, M. Brockschmidt, and R. Zemel.
Gated graph sequence neural networks. arXiv preprint
arXiv:1511.05493, 2015.

[41] J. Masci, D. Boscaini, M. Bronstein, and P. Van-
dergheynst. Geodesic convolutional neural networks
on riemannian manifolds. In Proceedings of the IEEE
international conference on computer vision work-
shops, pages 37–45, 2015.

[42] F. Monti, D. Boscaini, J. Masci, E. Rodola, J. Svo-
boda, and M. M. Bronstein. Geometric deep learning
on graphs and manifolds using mixture model cnns. In
Proc. CVPR, volume 1, page 3, 2017.

[43] C. Mura, G. Wyss, and R. Pajarola. Robust normal
estimation in unstructured 3d point clouds by selective
normal space exploration. Vis. Comput., 34(6-8):961–
971, June 2018.

[44] Y. Ohtake, A. Belyaev, M. Alexa, G. Turk, and H.-P.
Seidel. Multi-level partition of unity implicits. ACM
Trans. Graph., 22(3):463–470, July 2003.

[45] M. Pouget and F. Cazals. Estimation of local differ-
ential properties of point-sampled surfaces. In CGAL
User and Reference Manual. CGAL Editorial Board,
4.13 edition, 2018.

[46] C. R. Qi, H. Su, K. Mo, and L. J. Guibas. Point-
net: Deep learning on point sets for 3d classiﬁcation
and segmentation. Proc. Computer Vision and Pattern
Recognition (CVPR), IEEE, 1(2):4, 2017.

[47] C. R. Qi, L. Yi, H. Su, and L. J. Guibas. Pointnet++:
Deep hierarchical feature learning on point sets in a
metric space. In I. Guyon, U. V. Luxburg, S. Bengio,
H. Wallach, R. Fergus, S. Vishwanathan, and R. Gar-
nett, editors, Advances in Neural Information Process-
ing Systems 30, pages 5099–5108. Curran Associates,
Inc., 2017.

[48] F. Scarselli, M. Gori, A. C. Tsoi, M. Hagenbuchner,
and G. Monfardini. The graph neural network model.
IEEE Transactions on Neural Networks, 20(1):61–80,
2009.

[49] V. Shapiro and D. L. Vossler. Construction and opti-
mization of csg representations. Comput. Aided Des.,
23(1):4–20, Feb. 1991.

[50] G. Sharma, R. Goyal, D. Liu, E. Kalogerakis, and
S. Maji. Csgnet: Neural shape parser for constructive
solid geometry. In The IEEE Conference on Computer
Vision and Pattern Recognition (CVPR), June 2018.

[51] S. Song, S. P. Lichtenberg, and J. Xiao. Sun rgb-d:
A rgb-d scene understanding benchmark suite. 2015
IEEE Conference on Computer Vision and Pattern
Recognition (CVPR), pages 567–576, 2015.

[40] H. Maron, M. Galun, N. Aigerman, M. Trope,
N. Dym, E. Yumer, V. G. Kim, and Y. Lipman. Convo-
lutional neural networks on surfaces via seamless toric
covers. ACM Trans. Graph, 36(4):71, 2017.

[52] S. Sukhbaatar, R. Fergus, et al. Learning multiagent
communication with backpropagation. In Advances in
Neural Information Processing Systems, pages 2244–
2252, 2016.

9610

[53] X. Sun, P. L. Rosin, R. R. Martin, and F. C. Langbein.
Noise analysis and synthesis for 3d laser depth scan-
ners. Graphical Models, 71(2):34 – 48, 2009. IEEE
International Conference on Shape Modeling and Ap-
plications 2008.

[54] N. Verma, E. Boyer, and J. J. Verbeek. Feastnet:
Feature-steered graph convolutions for 3d shape anal-
ysis. 2018 IEEE/CVF Conference on Computer Vision
and Pattern Recognition, pages 2598–2606, 2018.

[55] Y. Wang, Y. Sun, Z. Liu, S. E. Sarma, M. M. Bron-
stein, and J. M. Solomon. Dynamic graph cnn for
learning on point clouds. CoRR, abs/1801.07829,
2018.

[56] C. Weber, S. Hahmann, and H. Hagen. Sharp feature
detection in point clouds. In Proceedings of the 2010
Shape Modeling International Conference, SMI ’10,
pages 175–186, Washington, DC, USA, 2010. IEEE
Computer Society.

[57] L. Wei, Q. Huang, D. Ceylan, E. Vouga, and H. Li.
Dense human body correspondences using convolu-
tional networks.
In Proceedings of the IEEE Con-
ference on Computer Vision and Pattern Recognition,
pages 1544–1553, 2016.

[58] Z. Wu, S. Song, A. Khosla, F. Yu, L. Zhang, X. Tang,
and J. Xiao. 3d shapenets: A deep representation for
volumetric shapes. In 2015 IEEE Conference on Com-
puter Vision and Pattern Recognition (CVPR), pages
1912–1920, June 2015.

[59] Z. Wu, S. Song, A. Khosla, F. Yu, L. Zhang, X. Tang,
and J. Xiao. 3d shapenets: A deep representation for
volumetric shapes. In Proceedings of the IEEE con-
ference on computer vision and pattern recognition,
pages 1912–1920, 2015.

[60] L. Yi, H. Su, X. Guo, and L. J. Guibas. Syncspeccnn:
Synchronized spectral cnn for 3d shape segmentation.
In CVPR, pages 6584–6592, 2017.

[61] L. Yu, X. Li, C.-W. Fu, D. Cohen-Or, and P.-A. Heng.
Pu-net: Point cloud upsampling network. In Proceed-
ings of IEEE Conference on Computer Vision and Pat-
tern Recognition (CVPR), 2018.

[62] Q. Zhou and A. Jacobson. Thingi10k: A dataset
arXiv preprint

of 10,000 3d-printing models.
arXiv:1605.04797, 2016.

9611

