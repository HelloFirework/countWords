Memory In Memory: A Predictive Neural Network for Learning Higher-Order

Non-Stationarity from Spatiotemporal Dynamics

Yunbo Wang∗, Jianjin Zhang∗, Hongyu Zhu, Mingsheng Long (B), Jianmin Wang, and Philip S. Yu

KLiss, MOE; BNRist; School of Software, Tsinghua University, China

Research Center for Big Data, Tsinghua University, China

Beijing Key Laboratory for Industrial Big Data System and Application

{wangyb15,zhang-jj16}@mails.tsinghua.edu.cn, {mingsheng,jimwang}@tsinghua.edu.cn

Abstract

Natural spatiotemporal processes can be highly non-
stationary in many ways, e.g. the low-level non-stationarity
such as spatial correlations or temporal dependencies of
local pixel values; and the high-level variations such as the
accumulation, deformation or dissipation of radar echoes
in precipitation forecasting. From Cram´er’s Decomposition
[4], any non-stationary process can be decomposed into
deterministic, time-variant polynomials, plus a zero-mean
stochastic term. By applying differencing operations appro-
priately, we may turn time-variant polynomials into a con-
stant, making the deterministic component predictable.

However, most previous recurrent neural networks for
spatiotemporal prediction do not use the differential signals
effectively, and their relatively simple state transition func-
tions prevent them from learning too complicated variations
in spacetime. We propose the Memory In Memory (MIM)
networks and corresponding recurrent blocks for this pur-
pose. The MIM blocks exploit the differential signals between
adjacent recurrent states to model the non-stationary and ap-
proximately stationary properties in spatiotemporal dynam-
ics with two cascaded, self-renewed memory modules. By
stacking multiple MIM blocks, we could potentially handle
higher-order non-stationarity. The MIM networks achieve
the state-of-the-art results on four spatiotemporal prediction
tasks across both synthetic and real-world datasets. We be-
lieve that the general idea of this work can be potentially
applied to other time-series forecasting tasks.

Figure 1: An example of 20 consecutive radar maps to illustrate the
complicated non-stationarity in precipitation forecasting. First row:
radar maps, in which the whiter pixels show higher precipitation
probability. Second, third, last row: pixel values’ distributions,
means and standard deviations for corresponding local regions
that are identiﬁed by bounding boxes of different colors. Note
that different regions have different variation trends, making the
spatiotemporal prediction problem extremely challenging.

1. Introduction

Natural spatiotemporal processes exhibit complex non-
stationarity in both space and time, where neighboring pixels
exhibit local dependencies, and their joint distributions are

∗Equal contribution, in alphabetical order

changing over time. Learning higher-order properties un-
derlying the spatiotemporal non-stationarity is particularly
signiﬁcant for many video prediction tasks. Examples in-
clude modeling highly complicated real-world systems such
as trafﬁc ﬂows [37, 35] and weather conditions [24, 32]. A
well-performed predictive model is expected to learn the
intrinsic variations in consecutive spatiotemporal context,

9154

t=1t=10t=20MeanStd010203040010203040501234567891011121314151617181920DistributionsFrameswhich can be seen as a combination of the stationary compo-
nent and the deterministic non-stationary component.

A great challenge in non-stationary spatiotemporal predic-
tion is how to effectively capture higher-order trends regard-
ing each pixel and its local area. For example, when making
precipitation forecasting, one should carefully consider the
complicated and diverse local trends on the evolving radar
maps, shown as Figure 1. But this problem is extremely dif-
ﬁcult due to the complicated non-stationarity in both space
and time. Most prior work handles trend-like non-stationarity
with recursions of CNNs [37, 35] or relatively simple state
transitions in RNNs [24, 32]. The lack of non-stationary
modeling capability prevents reasoning about uncertainties
in spatiotemporal dynamics and partially leads to the blurry
effect of the predicted frames.

We attempt to resolve this problem by proposing a generic
RNNs architecture that is more effective in non-stationarity
modeling. We ﬁnd that though the forget gates in the re-
current predictive models could deliver, select, and discard
information in the process of memory state transitions, they
are too simple to capture higher-order non-stationary trends
in high-dimensional time series. In particular, the forget
gates in the recent PredRNN model [32] does not work ap-
propriately on precipitation forecasting: about 80% of them
are saturated over all timestamps, implying almost time-
invariant memory state transitions. In other words, future
frames are predicted by approximately linear extrapolations.

In this paper, we focus on improving the memory transi-
tion functions of RNNs. Most statistical forecasting methods
in classic time series analysis assume that the non-stationary
trends can be rendered approximately stationary by perform-
ing suitable transformations such as differencing. We intro-
duce this idea to RNNs and propose a new RNNs building
block named Memory In Memory (MIM), which leverages
the differential information between neighboring hidden
states in the recurrent paths. MIM can be viewed as an im-
proved version of LSTM [11], whose forget gate is replaced
by another two embedded long short-term memories.

MIM has the following characteristics: (1) It creates uni-
ﬁed modeling for the spatiotemporal non-stationarity by
differencing neighboring hidden states rather than raw im-
ages. (2) By stacking multiple MIM blocks, our model has a
chance to gradually stationarize the spatiotemporal process
and make it more predictable. (3) Note that over-differencing
is no good for time series prediction, as it may inevitably lead
to a loss of information. This is another reason that we apply
differencing in memory transitions rather than all recurrent
signals, e.g. the input gate and the input modulation gate. (4)
MIM has one memory cell adopted from LSTMs as well as
two additional recurrent modules with their own memories
embedded in the transition path of the ﬁrst memory. We
use these modules to respectively model the higher-order
non-stationary and approximately stationary components of

the spatiotemporal dynamics. The proposed MIM networks
achieve the state-of-the-art results on multiple prediction
tasks, including a widely used synthetic dataset and three
real-world datasets.

2. Related Work

2.1. ARIMA Models for Time Series Forecasting

Our model is inspired by the Autoregressive Integrated
Moving Average (ARIMA) models. A time-series random
variable whose power spectrum remains constant over time
can be viewed as a combination of signal and noise. An
ARIMA model aims to separate the signal from the noise.
The obtained signal is then extrapolated into the future. In
theory, it tackles time series forecasting by transforming the
non-stationary process to stationary through differencing [3].

2.2. Deterministic Spatiotemporal Prediction

Spatiotemporal non-stationary processes are more com-
plicated, as the joint distribution of neighboring pixel values
is varying in both space and time. Like low-dimensional
time series, they can also be decomposed into deterministic
and stochastic components. Recent work in neural networks
explored spatiotemporal prediction from these two aspects.
CNNs [17] and RNNs [27] have been widely used for
learning the deterministic spatial correlations and temporal
dependencies from videos. Ranzato et al. [23] deﬁned a re-
current model predicting frames in a discrete space of patch
clusters. Srivastava et al. [26] introduced the sequence to
sequence LSTM network from language modeling to video
prediction. But this model can only capture temporal varia-
tions. To learn spatial and temporal variations in a uniﬁed
network structure, Shi et al. [24] integrated the convolution
operator into recurrent state transition functions, and pro-
posed the Convolutional LSTM. Finn et al. [9] developed
an action-conditioned video prediction model that can be
further used in robotics planning when combined with the
model predictive control methods. Villegas et al. [29] and
Patraucean et al. [21] presented recurrent models based on
the convolutional LSTM that leverage optical ﬂow guided
features. Kalchbrenner et al. [14] proposed the Video Pixel
Network (VPN) that encodes the time, space, color struc-
tures of videos as a four-dimensional dependency chain. It
achieves sharp prediction results but suffers from a high
computational complexity. Wang et al. [32, 31] extended
the convolutional LSTM with zigzag memory ﬂows, which
provides a great modeling capability for short-term video
dynamics. Adversarial learning [10, 7] has been increasingly
used in video generation or prediction [19, 30, 8, 28, 34],
as it aims to solve the multi-modal training difﬁculty of the
future prediction and helps generate less blurry frames.

However, the high-order non-stationarity of video dynam-
ics has not been thoroughly considered by the above work,

9155

Figure 2: The ST-LSTM block [32] (detailed in the supplementary materials) in the left plot and the proposed Memory In Memory (MIM)
block in the right plot. MIM is designed to introduce two recurrent modules (yellow squares) to replace the forget gate (dashed box) in
ST-LSTM. MIM-N is the non-stationary module and MIM-S is the stationary module. Note that the MIM block cannot be used in the ﬁrst
layer so the input Xt is replaced by Hl−1

.

t

whose temporal transition methods are relatively simple,
either controlled by the recurrent gate structures or imple-
mented by the recursion of the feed-forward network. By
contrast, our model is characterized by exploiting high-order
differencing to mitigate the non-stationary learning difﬁculty.

2.3. Stochastic Spatiotemporal Prediction

Some recent methods [36, 6, 18] attempted to model the
stochastic component of video dynamics using Variational
Autoencoder [16]. These methods increase the prediction
diversity but are difﬁcult to evaluate and require to run a
great number of times for a satisfactory result. In this pa-
per, we focus on the deterministic part of spatiotemporal
non-stationarity. More speciﬁcally, this work attempts to sta-
tionarize the complicated spatiotemporal processes and make
their deterministic components in the future more predictable
by proposing new RNNs architecture for non-stationarity.

3. Methods

As mentioned above, the spatiotemporal non-stationarity
remains under-explored and its differential features have
not been fully exploited by previous methods using neural
networks. In this section, we ﬁrst present the Memory In
Memory (MIM) blocks for learning about the higher-order
non-stationarity from RNNs memory transitions. We then
discuss a new RNN architecture, which interlinks multiple
MIM blocks with diagonal state connections, for modeling
the differential information in the spatiotemporal predic-
tion. By stacking multiple MIM blocks, we could potentially
learn higher-order non-stationarity from spatiotemporal dy-
namics. The proposed MIM state transition approach can
be integrated into all LSTM-like units. We choose the Spa-
tiotemporal LSTM (ST-LSTM) [32] as our base network
for a trade-off between prediction accuracy and computa-
tion simplicity. ST-LSTM is characterized by a dual-memory

t and Ml

structure, C l
t, as shown in Figure 2 (left). The corre-
sponding zigzag memory ﬂow of Ml
t, as illustrated by the
black arrows in Figure 4, strengthens its short-term modeling
capability by increasing the recurrent transition depth.

3.1. Memory In Memory Blocks

We observe that the complex dynamics in spatiotemporal
sequences can be handled more effectively as a combination
of stationary variations and non-stationary variations. Sup-
pose we have a video sequence showing a person walking
at a constant speed. The velocity can be seen as a stationary
variable and the swing of the legs should be considered as a
non-stationary process, which is apparently more difﬁcult to
predict. Unfortunately, the forget gate in previous LSTM-like
models is a simple gating structure that struggles to capture
the non-stationary variations in spacetime. In preliminary
experiments, we ﬁnd that the majority of forget gates in the
recent PredRNN model [32] are saturated, implying that the
units always remember stationary variations.

The Memory In Memory (MIM) block is enlightened
by the idea of modeling the non-stationary variations us-
ing a series of cascaded memory transitions instead of the
simple, saturation-prone forget gate in ST-LSTM. As com-
pared in Figure 2 (the smaller dashed boxes), two cascaded
temporal memory recurrent modules are designed to re-
place the temporal forget gate ft in ST-LSTM. The ﬁrst
module additionally taking Hl−1
t−1 as input is used to cap-
ture the non-stationary variations based on the differencing
(Hl−1
t−1) between two consecutive hidden represen-
tations. So we name it the non-stationary module (shown
as MIM-N in Figure 3). It generates differential features
Dl
t based on the difference-stationary assumption [22]. The
other recurrent module takes as inputs the output Dl
t of the
MIM-N module and the outer temporal memory C l
t−1 to
capture the approximately stationary variations in spatiotem-

t − Hl−1

9156

itgtCtotMti’tg’tf’tMtNHtlll-1litgtCtotMti’tg’tf’tMtCt-1XtHt-1Htllll-1llftCt-1lHt-1lHt-1l-1Htl-1MIM-NMIM-SSllFigure 3: The non-stationary module (MIM-N) and the stationary
module (MIM-S), which are interlinked in a cascaded structure in
the MIM block. Non-stationarity is modeled by differencing.

poral sequences. So we call it the stationary module (shown
as MIM-S in Figure 3). By replacing the forget gate with the
ﬁnal output T l
t of the cascaded non-stationary and stationary
modules (as shown in Figure 2), the non-stationary dynamics
can be captured more effectively. Key calculations inside a
MIM block can be shown as follows:

t + Whg ∗ Hl

t−1 + bg)

t−1 + bi)

t + Whi ∗ Hl
t−1, N l

t

t−1)

, Hl−1
t−1, S l

t−1)

gt = tanh(Wxg ∗ Hl−1
it = σ(Wxi ∗ Hl−1
Dl
t = MIM-N(Hl−1
T l
t = MIM-S(Dl
t, Cl
Cl
t = T l
g′
t = tanh(W ′

xg ∗ Hl−1

t + it ⊙ gt

t = σ(W ′
i′

t + Wmg ∗ Ml−1
t + b′
i)
t + b′

t + Wmi ∗ Ml−1
t + Wmf ∗ Ml−1

xi ∗ Hl−1
xf ∗ Hl−1

f )

t + b′

g)

t = f ′

t ⊙ Ml−1

f ′
t = σ(W ′
Ml
ot = σ(Wxo ∗ Hl−1
Hl

t = ot ⊙ tanh(W1×1 ∗ [Cl

t + Who ∗ Hl
t, Ml

t]),

t + i′

t ⊙ g′
t

t−1 + Wco ∗ Cl

t + Wmo ∗ Ml

t + bo)

(1)

where S and N denote the horizontally-transited memory
cells in the non-stationary module (MIM-N) and stationary
module (MIM-S) respectively; D is the differential features
learned by MIM-N and fed into MIM-S; T is the memory
passing the virtual “forget gate”; and ∗ denotes convolution.
The cascaded structure enables end-to-end modeling of
different orders of non-stationary dynamics. It is based on
the difference-stationary assumption that differencing a non-
stationary process repeatedly will likely lead to a stationary
one [22]. A schematic of MIM-N and MIM-S is presented
in Figure 3. We present the detailed calculations of MIM-N
as follows:

t − Hl−1

t−1) + Wng ∗ N l

t−1 + bg)

t − Hl−1
t − Hl−1

t−1) + Wni ∗ N l
t−1) + Wnf ∗ N l

t−1 + bi)

t−1 + bf )

gt = tanh(Wxg ∗ (Hl−1
it = σ(Wxi ∗ (Hl−1
ft = σ(Wxf ∗ (Hl−1
N l
ot = σ(Wxo ∗ (Hl−1
Dl
t = MIM-N(Hl−1

t = ft ⊙ N l

t

t−1 + it ⊙ gt

t − Hl−1
t−1, N l

, Hl−1

t−1) + Wno ∗ N l

t + bo)

t−1) = ot ⊙ tanh(N l

t ),

where all gates gt, it, ft and ot are updated by incorporating
the frame difference (Hl−1
t−1), which highlights the
non-stationary variations in the spatiotemporal sequence.
The detailed calculations of MIM-S are shown as follows:

t − Hl−1

t + Wcg ∗ Cl

t−1 + bg)

t + Wci ∗ Cl
t + Wcf ∗ Cl

t−1 + bi)

t−1 + bf )

gt = tanh(Wdg ∗ Dl
it = σ(Wdi ∗ Dl
ft = σ(Wdf ∗ Dl
t = ft ⊙ S l
S l
ot = σ(Wdo ∗ Dl
t = MIM-S(Dl
T l

t−1 + it ⊙ gt

t + Wco ∗ Cl
t, Cl

t−1, S l

t−1 + Wso ∗ S l

t + bo)

t−1) = ot ⊙ tanh(S l

t),

(3)

which takes the memory cells C l
t−1 and the differential fea-
tures Dl
t generated by MIM-N as input. As can be validated,
the stationary module provides a gating mechanism to adap-
tively decide whether to trust the original memory C l
t−1 or
the differential features Dl
t. If the differential features vanish,
indicating that the non-stationary dynamics is not prominent,
then MIM-S will mainly reuse the original memory. Other-
wise, if the differential features are prominent, then MIM-S
will overwrite the original memory and focus more on the
non-stationary dynamics.

3.2. Memory In Memory Networks

t

t−1 and Hl−1

Stacking multiple MIM blocks, our model has a chance
to capture higher orders of non-stationarity, gradually sta-
tionarizes the spatiotemporal process and makes the future
sequence more predictable. The key idea of this architecture
is to deliver necessary hidden states for generating differen-
tial features and best facilitating non-stationarity modeling.
A schematic of our proposed diagonal recurrent archi-
tecture is shown in Figure 4. We deliver the hidden states
Hl−1
to the Memory In Memory (MIM) block
at timestamp t 6= 1 and layer l 6= 1 to generate the differ-
enced features for further use. These connections are shown
as diagonal arrows in Figure 4. As the ﬁrst layer does not
have any previous layer, we simply use the Spatiotemporal
LSTM (ST-LSTM) [32] to generate its hidden presentations.
Note that, the temporal differencing is performed by subtract-
ing hidden state Hl−1
t−1 in MIM.
Compared to differencing neighboring raw images directly,
differencing temporally adjacent hidden states can reveal
the non-stationarity more evidently, as the spatiotemporal
variations in local areas have been encoded into the hidden
representations through the bottom ST-LSTM layer.

from the hidden state Hl−1

t

(2)

Another distinctive feature of the MIM networks resides
in the horizontal state transition paths. As the MIM blocks
have two cascaded temporal memory modules to capture
the non-stationary and stationary dynamics respectively, we
further deliver the two temporal memories (denoted by N
for the non-stationary memory and by S for the stationary
memory) along the blue arrows in Figure 4.

9157

itgtftNtotlCt-1itSt-1gtftStotllHt-1l-1Htl-1Nt-1lMIM-S (Stationary)MIM-N (Non-stationary)lDtlTtlFigure 4: A MIM network with three MIMs and one ST-LSTM.
Red arrows: the diagonal state transition paths of H for differ-
ential modeling. Blue arrows: the horizontal transition paths of
the memory cells C, N and S. Black arrows: the zigzag state
transition paths of M. Input: the input can be either the ground
truth frame for input sequence, or the generated frame at previous
timestamp. Output: one frame is generated at each timestamp.

The MIM networks generate one frame at one timestamp.
Calculations of the entire model with one ST-LSTM and
(L − 1) MIMs can be presented as follows (for 2 ≤ l ≤ L).
Note that there is no MIM block that is marked as MIM1.

H1
t, Cl

t , C 1
t, Ml

t , M1
t, N l

t = ST-LSTM1(Xt, H1
t , S l

t = MIMl(Hl−1

Hl

t−1, ML

t−1)

t−1, Cl

t−1, Ml−1

t

,

(4)

t−1, C 1
, Hl
t−1, S l

t−1).

t
N l

We formulate high-order non-stationarity as high-order
polynomials based on Cram´er’s Decomposition [4]. In the
space-time contexts, it refers to the varying trends of statis-
tics of pixel values. The order of non-stationary polynomials
can be reduced by a couple of differencing operations. We
blend this idea from time-series analysis with deep learning:
stacking MIMs with differential inputs layer by layer.

4. Experiments

In this section, we evaluate the proposed MIM model
using four datasets for spatiotemporal prediction: a synthetic
dataset with moving digits, a real trafﬁc ﬂow dataset, a real
radar echo dataset, and a human action dataset. Here are
some common settings all over these datasets. Our model
has four layers in all experiments, including one ST-LSTM

Figure 5: Prediction examples on the standard Moving MNIST. All
models predict 10 frames into the future by observing 10 previous
frames. The output frames are shown at two frames intervals.

layer as the ﬁrst layer and three MIMs. The number of feature
channels in each MIM block is 64, as a trade-off of prediction
accuracy and memory efﬁciency. All models are trained with
the ℓ2 loss, using the ADAM optimizer [15] with a learning
rate of 0.001. The mini-batch size is set to 8. We apply the
layer normalization [1] to the compared models in order to
reduce the covariate shift problem [12]. Besides, we apply
the scheduled sampling [2] to all models to stitch the discrep-
ancy between training and inference. Code and models are
available at https://github.com/Yunbo426/MIM.

4.1. Moving MNIST

The standard Moving MNIST is a synthetic dataset with
grayscale image sequences of ﬂying digits. We follow exactly
the experimental settings in PredRNN [32].

We visualize a sequence of predicted frames on the stan-
dard Moving MNIST test set in Figure 5. This example
is challenging, as severe occlusions exist near the junction
of the input sequence and the output sequence. The occlu-
sions can be viewed as information bottleneck, in which
the mean and variance of the spatiotemporal process meet
drastic changes, indicating the presence of a high-order non-
stationarity. The generated images of MIM are more satis-
factory, less blurry than those of other models. Actually, we
cannot even tell the digits in the last frames generated by
other models. We may conclude that MIM shows more capa-
bility in capturing complicated non-stationary variations.

We use the per-frame structural similarity index measure
(SSIM) [33], the mean square error (MSE) and the mean
absolute error (MAE) to evaluate our models. A lower MSE
or MAE, or a higher SSIM indicates a better prediction. As

9158

Xt-1/Xt-1Xt/XtXt+1/Xt+1ST-LSTMMIMMIMMIMMIMST-LSTMST-LSTMMIMMIMXtXt+1Xt+2MIMMIMMIMHt-1^^^Ht-1Ht-1^^^Ht11Ht22Ht33PredRNNCausal LSTMFRNNInput sequencet=2Ground truth and predictionst=6t=10t=12t=14t=16t=18t=20MIMMIM*work. When MIM-N and MIM-S are interlinked, the entire
MIM model achieves the best performance.

Model

SSIM MSE MAE

MIM (without MIM-N)
MIM (without MIM-S)
MIM

0.858
0.853
0.874

54.4
55.7
52.0

124.8
125.5
116.5

Table 3: Ablation study with respect to the MIM block.

We study the sensitivity of our model to the number of
MIM blocks. As stacking 2–4 recurrent layers is a common
practice, we evaluate models with 2/3/4 MIMs on Moving
MNIST. The proposed model with 3 MIMs performs best. It
is a trade-off: applying too few MIMs leads to inadequate
non-stationary modeling capability while the excessively
deep recurrent model leads to training difﬁculty.

# MIM blocks

SSIM MSE

2
3
4

0.870
0.874
0.859

54.6
52.0
53.7

Table 4: The sensitivity of our model to the number of MIM blocks.

The forget gates are easily saturated in PredRNN as
well as other LSTM-based spatiotemporal prediction models
such as ConvLSTM [24]. As shown in Figure 6, a great por-
tion of forget gates of these models are close to 0, indicating
that the long short-term memories do not work properly. As
the non-stationary signals within short-term variations are
hard to be captured, these models have to refresh the mem-
ory states to convey these short-term hidden representations.
Our model mitigates this problem and makes better use of
long-term variations through the proposed MIM block. As
MIM-N mainly reduces the non-stationarity, short-term ten-
dencies become easier to be captured and more neurons in
MIM-S can be used for handling long-term variations.

Model

SSIM MSE MAE

FC-LSTM [26]
ConvLSTM [24]
TrajGRU [25]
CDNA [9]
DFN [5]
FRNN [20]
VPN baseline [14]
PredRNN [32]
Causal LSTM [31]
MIM
MIM*

0.690
0.707
0.713
0.721
0.726
0.813
0.870
0.867
0.898
0.874
0.910

118.3
103.3
106.9
97.4
89.0
69.7
64.1
56.8
46.5
52.0
44.2

209.4
182.9
190.1
175.3
172.8
150.3
131.0
126.1
106.8
116.5
101.1

Table 1: A comparison for predicting 10 frames on Moving MNIST
dataset. All models have comparable numbers of parameters.
MIM* is network using Causal LSTM [31] as the ﬁrst layer, and
integrating the cascaded MIM-N and MIM-S modules into the
Causal LSTM memory cells. This result shows that MIM is a
generic mechanism for improving recurrent memory transitions.

shown in Table 1, our proposed MIM model approaches
the state-of-the-art results on the standard Moving MNIST
dataset. In particular, we construct another model named
MIM* by using Causal LSTM [31] as the ﬁrst layer, and
integrating the cascaded MIM-N and MIM-S modules into
the Causal LSTM memory cells, using them to replace the
temporal forget gates in Causal LSTMs. This result shows
that the memory in memory mechanism is not speciﬁcally de-
signed for the ST-LSTM; instead, it is a generic mechanism
for improving RNNs memory transitions. Though in other
parts of this paper, we use ST-LSTM as our base structure for
a trade-off between prediction accuracy and computational
complexity, we can see that MIM performs better than its
ST-LSTM (PredRNN) baseline, while MIM* also performs
better than its Causal LSTM baseline. We also adopt the
gradient-based sharpness metric from [19] to measure the
sharpness of the generated images. As shown in Table 2,
MIM rises the sharpness score by 16% over PredRNN.

Model

Gradient-Based Sharpness

FRNN [20]
PredRNN [32]
MIM

24.99
23.29
27.05

Table 2: Sharpness evaluation on Moving MNIST.

We further testify the necessity of cascading inner re-
current modules by respectively removing the stationary
modules or non-stationary modules. As illustrated in Table
3, the MIM network without MIM-N works slightly better
than that without MIM-S. Also, either of them has signiﬁ-
cant improvements over the PredRNN model in MSE/MAE,
showing the necessity of cascading them in a uniﬁed net-

Figure 6: The saturated rate of forget gates that corresponds to
|Tt/Ct−1| < 0.1 for MIM, and ft < 0.1 for other models.

4.2. TaxiBJ Trafﬁc Flow

Trafﬁc ﬂows are collected from the chaotic real-world
environment. They will not vary uniformly over time, and

9159

there are strong temporal dependencies between the trafﬁc
conditions at neighboring timestamps. Each frame in TaxiBJ
is a 32 × 32 × 2 grid of image. Two channels represent the
trafﬁc ﬂow entering and leaving the same district. We nor-
malize the data to [0, 1] and follow the experimental settings
of ST-ResNet [37], which yields the previous state-of-the-art
results on this dataset. Each sequence contains 8 consecu-
tive frames, 4 for the inputs and 4 for the predictions. We
show the quantitative results in Table 5 and the qualitative
results in Figure 7. To make the comparisons conspicuous,
we also visualize the difference between the predictions and
the ground truth images. Obviously, MIM shows the best
performance in all predicted frames among all compared
models, with the lowest difference intensities.

Model

Frame 1 Frame 2 Frame 3 Frame 4

ST-ResNet [37]
VPN [14]
FRNN [20]
PredRNN [32]
Causal LSTM [31]
MIM

0.460
0.427
0.331
0.318
0.319
0.309

0.571
0.548
0.416
0.427
0.399
0.390

0.670
0.645
0.518
0.516
0.500
0.475

0.762
0.721
0.619
0.595
0.573
0.542

Table 5: Per-frame MSE calculated with data in the range of [0, 1]
on the TaxiBJ dataset. All compared models take 4 historical trafﬁc
ﬂow images as inputs, and predict the next 4 images (trafﬁc ﬂows
for the next two hours).

4.3. Radar Echo

The radar echo dataset contains evolving radar maps that
were collected every 6 minutes, from May 1st, 2014 to June
30th, 2014. Each frame is a 64 × 64 × 1 grid of image, cov-
ering 64 × 64 square kilometers. We predict 10 timestamps
into the future at a time interval of 6 minutes, covering the
next hour. We visualize the generated radar maps in Figure
8. We can see that the evolution of radar echoes is a highly
non-stationary process. The accumulation, deformation, and
dissipation of the radar echoes are happening at every mo-
ment. In this showcase, the echoes in the bottom left corner
aggregate while those in the upper right corner dissipate.
Only MIM captures the movement of the echoes correctly.

Model

MSE CSI-30 CSI-40 CSI-50

FRNN [20]
PredRNN [32]
Causal LSTM [31]
MIM

52.5
31.8
29.8
27.8

0.254
0.401
0.362
0.429

0.203
0.378
0.331
0.399

0.163
0.306
0.251
0.317

Table 6: A comparison for predicting 10 frames on the subsets of
the radar dataset. All of the models are also trained with 10 target
frames and made to predict 10 future frames at test time.

We evaluate the generated radar echoes by MSE in Table
6, and then convert pixel values to radar echo intensities in

Figure 7: Prediction examples on TaxiBJ dataset. For ease of com-
parison, we also visualize the difference between the ground truth
frames (GT) and predicted frames (P).

Figure 8: Examples of the next-hour predictions of radar echoes,
where higher pixel values indicate higher precipitation probabilities.

hits

dBZ. We respectively choose 30 dBZ, 40 dBZ and 50 dBZ as
thresholds to calculate the Critical Success Index (CSI). CSI
is deﬁned as CSI =
hits+misses+falsealarms , where hits corre-
sponds to true positive, misses corresponds to false positive,
and false alarms corresponds to false negative. A higher CSI
denotes a better prediction result. MIM consistently outper-
forms other models in both MSE and CSI. Figure 9 shows
the frame-wise MSE/CSI. CSI-40 and CSI-50 indicate the

9160

PredRNNCausal LSTMFRNNInput sequenceGround truth and predictionst=1t=2t=3t=4t=5t=6t=7t=8Predicted FramesPredicted Frames|GT-P|Predicted Frames|GT-P|Predicted Frames|GT-P|MIM|GT-P|PredRNNCausal LSTMInput sequencet=2Ground truth and predictionst=6t=10t=12t=14t=16t=18t=20MIM(a) MSE

(b) CSI-30

(c) CSI-40

(d) CSI-50

Figure 9: Frame-wise comparisons of the next 10 generated radar
maps. Lower MSE curves or higher CSI curves indicate better
forecasting results. The MIM network is the most high-performing
method over all timestamps in the forecasting horizon.

probabilities of severe weather conditions. MIM performs
best though predicting severe weather is non-trivial due to
the long tail distributions of the pixel values.

4.4. Human3.6M

The Human3.6M dataset [13] contains human actions of
17 scenarios, including 3.6 million poses and corresponding
images. We train the models using only the “Walking” sce-
nario. The RGB images in Human3.6M dataset are originally
1000 × 1000 × 3, and resized to 128 × 128 × 3 in our ex-
periments. We generate 4 future frames given the previous 4
RGB frames. We use subjects S1, S5, S6, S7, S8 for training,
and S9, S11 for testing.

As shown in Table 7 and Figure 10, the MIM network
outperforms the previous state-of-the-art models in both nu-
merical metrics and visual effects. The generated frames by
MIM are more accurate in motion positions, as indicated by
the orange boxes (versus the green boxes). We notice that
some work performs well on human-body datasets by model-
ing the structures of human joints, while the MIM network is
designed for non-structural, general-purpose spacetime data
such as RGB videos. The structural and non-structural meth-
ods can be integrated and jointly used in a complementary
manner, which is left for future work.

Model

SSIM MSE MAE

FRNN [20]
PredRNN [32]
MIM

0.771
0.781
0.790

497.7
484.1
429.9

1901.1
1895.2
1782.8

Table 7: Quantitative results on the Human3.6M dataset.

t=5

t=6

t=7

t=8

t=5

t=6

t=7

t=8

t=5

t=6

t=7

t=8

h
t
u
r
T
 
d
n
u
o
r
G

N
N
R
F

N
N
R
d
e
r
P

I

M
M

t=5

t=6

t=7

t=8

Figure 10: Examples of the generated images on the Human3.6M
dataset. We zoom in to show the details of images.

are powerful in modeling difference-stationary sequences,
whose capability for modeling high-order non-stationary
process is limited by their relatively weak forget gates. This
paper proposes a new recurrent neural network to enable non-
stationary modeling in the spacetime contexts. We formulate
high-order non-stationarity as high-order polynomials with
respect to the statistically varying trends of pixel intensities.
The order of non-stationary polynomials can be reduced by
a couple of differencing operations. We leverage this idea
from time-series analysis: stacking MIMs with differential
inputs layer by layer. The Memory In Memory (MIM) block
is derived to model the complicated variations, which uses
two cascaded recurrent modules to handle the non-stationary
and approximately stationary components in the spatiotem-
poral dynamics. MIM achieves the state-of-the-art prediction
performance on four datasets: a synthetic dataset of ﬂying
digits, a trafﬁc ﬂow prediction dataset, a weather forecasting
dataset, and a human pose video dataset.

5. Conclusions

We investigate the underlying non-stationarity that forms
one of the main obstacles in spatiotemporal prediction. Ex-
isting LSTM-based models for spatiotemporal prediction

Acknowledgements

This work is supported by National Natural Science Foun-
dation of China (No. 61772299, 71690231, and 61672313).

9161

123456789101020304050MSEMIMPredRNNCausal LSTM123456789100.300.350.400.450.500.550.600.65CSIMIMPredRNNCausal LSTM123456789100.250.300.350.400.450.500.550.600.65CSIMIMPredRNNCausal LSTM123456789100.10.20.30.40.5CSIMIMPredRNNCausal LSTMReferences

[1] Jimmy Lei Ba, Jamie Ryan Kiros, and Geoffrey E Hinton.
Layer normalization. arXiv preprint arXiv:1607.06450, 2016.
[2] Samy Bengio, Oriol Vinyals, Navdeep Jaitly, and Noam
Shazeer. Scheduled sampling for sequence prediction with
recurrent neural networks. In NeurIPS, pages 1171–1179,
2015.

[3] George EP Box, Gwilym M Jenkins, Gregory C Reinsel, and
Greta M Ljung. Time series analysis: forecasting and control.
John Wiley & Sons, 2015.

[4] Harald Cram´er. On some classes of nonstationary stochastic
processes. In Berkeley Symposium on Mathematical Statistics
and Probability, volume 2, pages 57–78. University of Los
Angeles Press Berkeley and Los Angeles, 1961.

[5] Bert De Brabandere, Xu Jia, Tinne Tuytelaars, and Luc

Van Gool. Dynamic ﬁlter networks. In NeurIPS, 2016.

[6] Emily Denton and Rob Fergus. Stochastic video generation

with a learned prior. In ICML, pages 1174–1183, 2018.

[7] Emily L Denton, Soumith Chintala, Rob Fergus, et al. Deep
generative image models using a laplacian pyramid of adver-
sarial networks. In NeurIPS, pages 1486–1494, 2015.

[8] Emily L Denton et al. Unsupervised learning of disentangled

representations from video. In NeurIPS, 2017.

[9] Chelsea Finn, Ian Goodfellow, and Sergey Levine. Unsuper-
vised learning for physical interaction through video predic-
tion. In NeurIPS, 2016.

[10] Ian J. Goodfellow, Jean Pougetabadie, Mehdi Mirza, Bing
Xu, David Wardefarley, Sherjil Ozair, Aaron Courville, and
Yoshua Bengio. Generative adversarial networks. In NeurIPS,
volume 3, pages 2672–2680, 2014.

[11] Sepp Hochreiter and J¨urgen Schmidhuber. Long short-term

memory. Neural computation, 9(8):1735–1780, 1997.

[12] Sergey Ioffe and Christian Szegedy. Batch normalization:
Accelerating deep network training by reducing internal co-
variate shift. In ICML, 2015.

[13] Catalin Ionescu, Dragos Papava, Vlad Olaru, and Cristian
Sminchisescu. Human3.6m: Large scale datasets and predic-
tive methods for 3d human sensing in natural environments.
IEEE Transactions on Pattern Analysis and Machine Intelli-
gence, 36(7):1325–1339, jul 2014.

[14] Nal Kalchbrenner, Aaron van den Oord, Karen Simonyan,
Ivo Danihelka, Oriol Vinyals, Alex Graves, and Koray
Kavukcuoglu. Video pixel networks. In ICML, 2017.

[15] Diederik Kingma and Jimmy Ba. Adam: A method for

stochastic optimization. In ICLR, 2015.

[16] Diederik P Kingma and Max Welling. Auto-encoding varia-

tional bayes. arXiv preprint arXiv:1312.6114, 2013.

[17] Alex Krizhevsky, Ilya Sutskever, and Geoffrey E Hinton. Im-
agenet classiﬁcation with deep convolutional neural networks.
In NeurIPS, pages 1097–1105, 2012.

[18] Alex X Lee, Richard Zhang, Frederik Ebert, Pieter Abbeel,
Chelsea Finn, and Sergey Levine. Stochastic adversarial video
prediction. arXiv preprint arXiv:1804.01523, 2018.

[19] Michael Mathieu, Camille Couprie, and Yann LeCun. Deep
multi-scale video prediction beyond mean square error. In
ICLR, 2016.

[20] Marc Oliu, Javier Selva, and Sergio Escalera. Folded recurrent
neural networks for future video prediction. In ECCV, 2018.
[21] Viorica Patraucean, Ankur Handa, and Roberto Cipolla.

Spatio-temporal video autoencoder with differentiable mem-
ory. In ICLR Workshop, 2016.

[22] Donald B. Percival and Andrew T. Walden. Spectral Analysis
for Physical Applications. Cambridge University Press, 1993.
[23] MarcAurelio Ranzato, Arthur Szlam, Joan Bruna, Michael
Mathieu, Ronan Collobert, and Sumit Chopra. Video (lan-
guage) modeling: a baseline for generative models of natural
videos. arXiv preprint arXiv:1412.6604, 2014.

[24] Xingjian Shi, Zhourong Chen, Hao Wang, Dit-Yan Yeung,
Wai-Kin Wong, and Wang-chun Woo. Convolutional lstm
network: A machine learning approach for precipitation now-
casting. In NeurIPS, 2015.

[25] Xingjian Shi, Zhihan Gao, Leonard Lausen, Hao Wang, Dit-
Yan Yeung, Wai-kin Wong, and Wang-chun Woo. Deep learn-
ing for precipitation nowcasting: A benchmark and a new
model. In NeurIPS, 2017.

[26] Nitish Srivastava, Elman Mansimov, and Ruslan Salakhutdi-
nov. Unsupervised learning of video representations using
lstms. In ICML, 2015.

[27] Ilya Sutskever, Oriol Vinyals, and Quoc V. Le. Sequence to
sequence learning with neural networks. In NeurIPS, 2014.
[28] Sergey Tulyakov, Ming-Yu Liu, Xiaodong Yang, and Jan
Kautz. Mocogan: Decomposing motion and content for video
generation. In CVPR, 2018.

[29] Ruben Villegas, Jimei Yang, Seunghoon Hong, Xunyu Lin,
and Honglak Lee. Decomposing motion and content for
natural video sequence prediction. In ICLR, 2017.

[30] Carl Vondrick, Hamed Pirsiavash, and Antonio Torralba. Gen-

erating videos with scene dynamics. In NeurIPS, 2016.

[31] Yunbo Wang, Zhifeng Gao, Mingsheng Long, Jianmin Wang,
and Philip S Yu. PredRNN++: Towards a resolution of the
deep-in-time dilemma in spatiotemporal predictive learning.
In ICML, pages 5123–5132, 2018.

[32] Yunbo Wang, Mingsheng Long, Jianmin Wang, Zhifeng Gao,
and S Yu Philip. Predrnn: Recurrent neural networks for
predictive learning using spatiotemporal lstms. In NeurIPS,
2017.

[33] Zhou Wang, A. C Bovik, H. R Sheikh, and E. P Simon-
celli. Image quality assessment: from error visibility to struc-
tural similarity.
IEEE Transactions on Image Processing,
13(4):600, 2004.

[34] Nevan Wichers, Ruben Villegas, Dumitru Erhan, and Honglak
Lee. Hierarchical long-term video prediction without super-
vision. In ICML, 2018.

[35] Ziru Xu, Yunbo Wang, Mingsheng Long, Jianmin Wang, and
MOE KLiss. Predcnn: Predictive learning with cascade con-
volutions. In IJCAI, 2018.

[36] Tianfan Xue, Jiajun Wu, Katherine Bouman, and Bill Free-
man. Visual dynamics: Probabilistic future frame synthesis
via cross convolutional networks. In NeurIPS, pages 91–99,
2016.

[37] Junbo Zhang, Yu Zheng, and Dekang Qi. Deep spatio-
temporal residual networks for citywide crowd ﬂows pre-
diction. In AAAI, 2017.

9162

