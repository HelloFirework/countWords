Feature Selective Anchor-Free Module for Single-Shot Object Detection

Chenchen Zhu

Yihui He

Marios Savvides

Carnegie Mellon University

{chenchez, he2, marioss}@andrew.cmu.edu

a: RetinaNet (anchor-based, ResNeXt-101)

b: Ours (anchor-based + FSAF, ResNet-50)

Figure 1: Qualitative results of the anchor-based RetinaNet [22] using powerful ResNeXt-101 (left) and our detector with
additional FSAF module using just ResNet-50 (right) under the same training and testing scale. Our FSAF module helps
detecting hard objects like tiny person and ﬂat skis with a less powerful backbone network. See Figure 7 for more examples.

Abstract

We motivate and present feature selective anchor-free
(FSAF) module, a simple and effective building block for
single-shot object detectors. It can be plugged into single-
shot detectors with feature pyramid structure. The FSAF
module addresses two limitations brought up by the con-
ventional anchor-based detection: 1) heuristic-guided fea-
ture selection; 2) overlap-based anchor sampling. The
general concept of the FSAF module is online feature se-
lection applied to the training of multi-level anchor-free
branches. Speciﬁcally, an anchor-free branch is attached
to each level of the feature pyramid, allowing box encod-
ing and decoding in the anchor-free manner at an arbi-
trary level. During training, we dynamically assign each
instance to the most suitable feature level. At the time of in-
ference, the FSAF module can work independently or jointly
with anchor-based branches. We instantiate this concept
with simple implementations of anchor-free branches and
online feature selection strategy. Experimental results on

the COCO detection track show that our FSAF module per-
forms better than anchor-based counterparts while being
faster. When working jointly with anchor-based branches,
the FSAF module robustly improves the baseline RetinaNet
by a large margin under various settings, while introduc-
ing nearly free inference overhead. And the resulting best
model can achieve a state-of-the-art 44.6% mAP, outper-
forming all existing single-shot detectors on COCO.

1. Introduction

Object detection is an important task in the computer
vision community.
It serves as a prerequisite for vari-
ous downstream vision applications such as instance seg-
mentation [12], facial analysis [1, 39], autonomous driv-
ing cars [6, 20], and video analysis [25, 33]. The perfor-
mance of object detectors has been dramatically improved
thanks to the advance of deep convolutional neural net-
works [16, 29, 13, 34] and well-annotated datasets [7, 23].
One long-standing problem for object detection is scale

840

person 0.90person 0.83person 0.90person 0.69person 0.68person 0.57person 0.69skis 0.59person 0.53person 0.53above two limitations simultaneously. Our motivation is to
let each instance select the best level of feature freely to op-
timize the network, so there should be no anchor boxes to
constrain the feature selection in our module. Instead, we
encode the instances in an anchor-free manner to learn the
parameters for classiﬁcation and regression. The general
concept is presented in Figure 3. An anchor-free branch
is built per level of feature pyramid, independent to the
anchor-based branch. Similar to the anchor-based branch,
it consists of a classiﬁcation subnet and a regression sub-
net (not shown in ﬁgure). An instance can be assigned to
arbitrary level of the anchor-free branch. During training,
we dynamically select the most suitable level of feature for
each instance based on the instance content instead of just
the size of instance box. The selected level of feature then
learns to detect the assigned instances. At inference, the
FSAF module can run independently or jointly with anchor-
based branches. Our FSAF module is agnostic to the back-
bone network and can be applied to single-shot detectors
with a structure of feature pyramid. Additionally, the in-
stantiation of anchor-free branches and online feature se-
lection can be various. In this work, we keep the implemen-
tation of our FSAF module simple so that its computational
cost is marginal compared to the whole network.

Extensive experiments on the COCO [23] object detec-
tion benchmark conﬁrm the effectiveness of our method.
The FSAF module by itself outperforms anchor-based
counterparts as well as runs faster. When working jointly
with anchor-based branches, the FSAF module can consis-
tently improve the strong baselines by large margins across
various backbone networks, while at the same time intro-
ducing the minimum cost of computation. Especially, we
improve RetinaNet using ResNeXt-101 [34] by 1.8% with
only 6ms additional inference latency. Additionally, our ﬁ-
nal detector achieves a state-of-the-art 44.6% mAP when
multi-scale testing are employed, outperforming all exist-
ing single-shot detectors on COCO.

2. Related Work

Recent object detectors often use feature pyramid or
multi-level feature tower as a common structure. SSD [24]
ﬁrst proposed to predict class scores and bounding boxes
from multiple feature scales. FPN [21] and DSSD [8] pro-
posed to enhance low-level features with high-level seman-
tic feature maps at all scales. RetinaNet [22] addressed class
imbalance issue of multi-level dense detectors with focal
loss. DetNet [19] designed a novel backbone network to
maintain high spatial resolution in upper pyramid levels.
However, they all use pre-deﬁned anchor boxes to encode
and decode object instances. Other works address the scale
variation differently. Zhu et al [41] enhanced the anchor de-
sign for small objects. He et al [14] modeled the bounding
box as Gaussian distribution for improved localization.

841

Figure 2: Selected feature level in anchor-based branches
may not be optimal.

variation. To achieve scale invariability, state-of-the-art
detectors construct feature pyramids or multi-level feature
towers [24, 8, 21, 22, 19, 38]. And multiple scale levels of
feature maps are generating predictions in parallel. Besides,
anchor boxes can further handle scale variation [24, 28].
Anchor boxes are designed for discretizing the continuous
space of all possible instance boxes into a ﬁnite number
of boxes with predeﬁned locations, scales and aspect ra-
tios. And instance boxes are matched to anchor boxes based
on the Intersection-over-Union (IoU) overlap. When inte-
grated with feature pyramids, large anchor boxes are typi-
cally associated with upper feature maps, and small anchor
boxes are associated with lower feature maps, see Figure 2.
This is based on the heuristic that upper feature maps have
more semantic information suitable for detecting big in-
stances whereas lower feature maps have more ﬁne-grained
details suitable for detecting small instances [11]. The
design of feature pyramids integrated with anchor boxes
has achieved good performance on object detection bench-
marks [7, 23, 9].

However, this design has two limitations: 1) heuristic-
guided feature selection; 2) overlap-based anchor sampling.
During training, each instance is always matched to the
closest anchor box(es) according to IoU overlap. And an-
chor boxes are associated with a certain level of feature map
by human-deﬁned rules, such as box size. Therefore, the se-
lected feature level for each instance is purely based on ad-
hoc heuristics. For example, a car instance with size 50×50
pixels and another similar car instance with size 60×60 pix-
els may be assigned to two different feature levels, whereas
another 40 × 40 car instance may be assigned to the same
level as the 50 × 50 instance, as illustrated in Figure 2. In
other words, the anchor matching mechanism is inherently
heuristic-guided. This leads to a major ﬂaw that the selected
feature level to train each instance may not be optimal.

We propose a simple and effective approach named fea-
ture selective anchor-free (FSAF) module to address the

Figure 3: The general concept of our FSAF module plugged into conventional anchor-based detection methods. During
training, each instance is assigned to a pyramid level via online feature selection for setting up supervision signals.

The idea of anchor-free detection is not new. Dense-
Box [15] ﬁrst proposed a uniﬁed end-to-end fully convo-
lutional framework that directly predicted bounding boxes.
UnitBox [36] proposed an Intersection over Union (IoU)
loss function for better box regression. Zhong et al [40]
proposed anchor-free region proposal network to ﬁnd text
in various scales, aspect ratios, and orientations. Recently
CornerNet [17] proposed to detect an object bounding box
as a pair of corners, leading to the best single-shot detector.
SFace [32] proposed to integrate the anchor-based method
and anchor-free method. However, they still adopt heuristic
feature selection strategies.

3. Feature Selective Anchor-Free Module

In this section we instantiate our feature selective anchor-
free (FSAF) module by showing how to apply it
to
the single-shot detectors with feature pyramids, such as
SSD [24], DSSD [8] and RetinaNet [22]. Without lose of
generality, we apply the FSAF module to the state-of-the-
art RetinaNet [22] and demonstrate our design from the fol-
lowing aspects: 1) how to create the anchor-free branches
in the network (3.1); 2) how to generate supervision signals
for anchor-free branches (3.2); 3) how to dynamically select
feature level for each instance (3.3); 4) how to jointly train
and test anchor-free and anchor-based branches (3.4).

3.1. Network Architecture

From the network’s perspective, our FSAF module is
surprisingly simple. Figure 4 illustrates the architecture of
the RetinaNet [22] with the FSAF module. In brief, Reti-
naNet is composed of a backbone network (not shown in the
ﬁgure) and two task-speciﬁc subnets. The feature pyramid
is constructed from the backbone network with levels from
P3 through P7, where l is the pyramid level and Pl has 1/2l
resolution of the input image. Only three levels are shown
for simplicity. Each level of the pyramid is used for detect-
ing objects at a different scale. To do this, a classiﬁcation
subnet and a regression subnet are attached to Pl. They are

both small fully convolutional networks. The classiﬁcation
subnet predicts the probability of objects at each spatial lo-
cation for each of the A anchors and K object classes. The
regression subnet predicts the 4-dimensional class-agnostic
offset from each of the A anchors to a nearby instance if
exists.

On top of the RetinaNet, our FSAF module introduces
only two additional conv layers per pyramid level, shown
as the dashed feature maps in Figure 4. These two layers
are responsible for the classiﬁcation and regression predic-
tions in the anchor-free branch respectively. To be more
speciﬁc, a 3 × 3 conv layer with K ﬁlters is attached to
the feature map in the classiﬁcation subnet followed by the
sigmoid function, in parallel with the one from the anchor-
based branch. It predicts the probability of objects at each
spatial location for K object classes. Similarly, a 3× 3 conv
layer with four ﬁlters is attached to the feature map in the
regression subnet followed by the ReLU [26] function. It
is responsible for predicting the box offsets encoded in an
anchor-free manner. To this end the anchor-free and anchor-
based branches work jointly in a multi-task style, sharing
the features in every pyramid level.

3.2. Ground truth and Loss

p, yl

p, wl

Given an object instance, we know its class label k and
bounding box coordinates b = [x, y, w, h], where (x, y) is
the center of the box, and w, h are box width and height
respectively. The instance can be assigned to arbitrary fea-
ture level Pl during training. We deﬁne the projected box
bl
p = [xl
p, hl
p] as the projection of b onto the fea-
bl
p = b/2l. We also deﬁne the
ture pyramid Pl, i.e.
effective box bl
e, yl
e, wl
e] and the ignoring box
bl
i, wl
i = [xl
p con-
trolled by constant scale factors ǫe and ǫi respectively, i.e.
e = xl
xl
i =
yl
p, wl
p. We set ǫe = 0.2 and ǫi = 0.5.
An example of ground-truth generation for a car instance is
illustrated in Figure 5.

i] as proportional regions of bl

p, wl
i = ǫihl

e = [xl
i, hl

e = yl
p, hl

e = ǫewl

i = ǫiwl

e = ǫehl

i = xl

p, xl

p, hl

e, hl

p, yl

p, yl

i, yl

842

Figure 4: Network architecture of RetinaNet with our FSAF module. The FSAF module only introduces two additional conv
layers (dashed feature maps) per pyramid level, keeping the architecture fully convolutional.

i − bl

Classiﬁcation Output: The ground-truth for the classiﬁca-
tion output is K maps, with each map corresponding to one
class. The instance affects kth ground-truth map in three
ways. First, the effective box bl
e region is the positive re-
gion ﬁlled by ones shown as the white box in “car” class
map, indicating the existence of the instance. Second, the
ignoring box excluding the effective box (bl
e) is the ig-
noring region shown as the grey area, which means that the
gradients in this area are not propagated back to the net-
work. Third, the ignoring boxes in adjacent feature levels
(bl−1
) are also ignoring regions if exists. Note that if
the effective boxes of two instances overlap in one level,
the smaller instance has higher priority. The rest region
of the ground-truth map is the negative (black) area ﬁlled
by zeros, indicating the absence of objects. Focal loss [22]
is applied for supervision with hyperparameters α = 0.25
and γ = 2.0. The total classiﬁcation loss of anchor-free
branches for an image is the summation of the focal loss
over all non-ignoring regions, normalized by the total num-
ber of pixels inside all effective box regions.

, bl+1

i

i

li,j

bi,j

, dl

, dl

l, dl

t, dl

b, dl

ti,j , dl

ri,j ], where dl

location (i, j) inside bl

p as a 4-dimensional vector dl

Box Regression Output: The ground-truth for the regres-
sion output are 4 offset maps agnostic to classes. The
instance only affects the bl
e region on the offset maps.
For each pixel
e, we represent
the projected box bl
i,j =
[dl
r are the distances
between the current pixel location (i, j) and the top, left,
bottom, and right boundaries of bl
p, respectively. Then the
4-dimensional vector at (i, j) location across 4 offset maps
is set to dl
i,j/S with each map corresponding to one dimen-
sion. S is a normalization constant and we choose S = 4.0
in this work empirically. Locations outside the effective box
are the grey area where gradients are ignored. IoU loss [36]
is adopted for optimization. The total regression loss of
anchor-free branches for an image is the average of the IoU
loss over all effective box regions.

During inference, it is straightforward to decode the pre-

Figure 5: Supervision signals for an instance in one fea-
ture level of the anchor-free branches. We use focal loss for
classiﬁcation and IoU loss for box regression.

dicted boxes from the classiﬁcation and regression outputs.
At each pixel location (i, j), suppose the predicted offsets
are [ˆoti,j , ˆoli,j , ˆobi,j , ˆori,j ]. Then the predicted distances are
[S ˆoti,j , S ˆoli,j , S ˆobi,j , S ˆori,j ]. And the top-left corner and
the bottom-right corner of the predicted projected box are
(i − S ˆoti,j , j − S ˆoli,j ) and (i + S ˆobi,j , j + S ˆori,j ]) respec-
tively. We further scale up the projected box by 2l to get the
ﬁnal box in the image plane. The conﬁdence score and class
for the box can be decided by the maximum score and the
corresponding class of the K-dimensional vector at location
(i, j) on the classiﬁcation output maps.

3.3. Online Feature Selection

The design of the anchor-free branches allows us to learn
each instance using the feature of an arbitrary pyramid level
Pl. To ﬁnd the optimal feature level, our FSAF module
selects the best Pl based on the instance content, instead of
the size of instance box as in anchor-based methods.

Given an instance I, we deﬁne its classiﬁcation loss and
IoU (l), respec-

box regression loss on Pl as LI

F L(l) and LI

843

Figure 6: Online feature selection mechanism. Each instance is passing through all levels of anchor-free branches to com-
pute the averaged classiﬁcation (focal) loss and regression (IoU) loss over effective regions. Then the level with minimal
summation of two losses is selected to set up the supervision signals for that instance.

tively. They are computed by averaging the focal loss and
the IoU loss over the effective box region bl

e, i.e.

LI

F L(l) =

LI

IoU (l) =

1
N (bl

e) X

i,j∈bl
e

1
N (bl

e) X

i,j∈bl
e

F L(l, i, j)

IoU (l, i, j)

(1)

e) is the number of pixels inside bl

where N (bl
e region, and
F L(l, i, j), IoU (l, i, j) are the focal loss [22] and IoU
loss [36] at location (i, j) on Pl respectively.

Figure 6 shows our online feature selection process. First
the instance I is forwarded through all levels of feature
pyramid. Then the summation of LI
IoU (l) is
computed in all anchor-free branches using Eqn. (1). Fi-
nally, the best pyramid level Pl∗ yielding the minimal sum-
mation of losses is selected to learn the instance, i.e.

F L(l) and LI

l∗ = arg min

l

LI

F L(l) + LI

IoU (l)

(2)

For a training batch, features are updated for their corre-
spondingly assigned instances. The intuition is that the se-
lected feature is currently the best to model the instance. Its
loss forms a lower bound in the feature space. And by train-
ing, we further pull down this lower bound. At the time of
inference, we do not need to select the feature because the
most suitable level of feature pyramid will naturally output
high conﬁdence scores.

In order to verify the importance of our online feature se-
lection, we also conduct a heuristic feature selection process
for comparison in the ablation studies (4.1). The heuristic
feature selection depends purely on box sizes. We borrow
the idea from the FPN detector [21]. An instance I is as-
signed to the level Pl′ of the feature pyramid by:

l′ = ⌊l0 + log2(√wh/224)⌋

(3)

Here 224 is the canonical ImageNet pre-training size, and l0
is the target level on which an instance with w × h = 2242

In this work we choose l0 = 5
should be mapped into.
because ResNet [13] uses the feature map from 5th convo-
lution group to do the ﬁnal classiﬁcation.

3.4. Joint Inference and Training

When plugged into RetinaNet [22], our FSAF module
can work jointly with the anchor-based branches (Figure 4).
We keep the anchor-based branches as original, with all hy-
perparameters unchanged in both training and inference.
Inference: The FSAF module just adds a few convolution
layers to the fully-convolutional RetinaNet, so the inference
is still as simple as forwarding an image through the net-
work. For anchor-free branches, we only decode box pre-
dictions from at most 1k top-scoring locations in each pyra-
mid level, after thresholding the conﬁdence scores by 0.05.
These top predictions from all levels are merged with the
box predictions from anchor-based branches, followed by
non-maximum suppression with a threshold of 0.5, yielding
the ﬁnal detections.
Initialization: The backbone networks are pre-trained on
ImageNet1k [5]. We initialize the layers in RetinaNet as
in [22]. For conv layers in our FSAF module, we initialize
the classiﬁcation layers with bias − log((1 − π)/π) and a
Gaussian weight ﬁlled with σ = 0.01, where π speciﬁes
that at the beginning of training every pixel location outputs
objectness scores around π. We set π = 0.01 following
[22]. All the box regression layers are initialized with bias
b, and a Gaussian weight ﬁlled with σ = 0.01. We use
b = 0.1 in all experiments. The initialization helps stabilize
the network learning in the early iterations by preventing
large losses.
Optimization: The loss for the whole network is combined
losses from the anchor-free and anchor-based branches. Let
Lab be the total loss of the original anchor-based RetinaNet.
And let Laf
reg be the total classiﬁcation and regres-
sion losses of anchor-free branches, respectively. Then total
optimization loss is L = Lab+λ(Laf
reg), where λ con-
trols the weight of the anchor-free branches. We set λ = 0.5
in all experiments, although results are robust to the exact

cls and Laf

cls+Laf

844

Anchor-

based

branches

X

X

X

RetinaNet

Ours

Anchor-free branches

Heuristic feature
selection Eqn. (3)

Online feature

AP AP50 AP75 APS APM APL

selection Eqn. (2)

X

X

35.7
34.7
35.9
36.1
37.2

54.7
54.0
55.0
55.6
57.2

38.5
36.4
37.9
38.7
39.4

19.5
19.0
19.8
19.8
21.0

39.9
39.0
39.6
39.7
41.2

47.5
45.8
48.2
48.9
49.7

X

X

Table 1: Ablative experiments for the FSAF module on the COCO minival. ResNet-50 is the backbone network for all
experiments in this table. We study the effect of anchor-free branches, heuristic feature selection, and online feature selection.

Backbone

Method

AP AP50

Runtime
(ms/im)

cluding anchor-free branches, online feature selection, and
backbone networks. Results are reported in Table 1 and 2.

R-50

R-101

X-101

RetinaNet

Ours(FSAF)

Ours(AB+FSAF)

RetinaNet

Ours(FSAF)

Ours(AB+FSAF)

RetinaNet

Ours(FSAF)

Ours(AB+FSAF)

35.7
35.9
37.2
37.7
37.9
39.3
39.8
41.0
41.6

54.7
55.0
57.2
57.2
58.0
59.2
59.5
61.5
62.4

131
107
138
172
148
180
356
288
362

Table 2: Detection accuracy and inference latency with dif-
ferent backbone networks on the COCO minival. AB:
Anchor-based branches. R: ResNet. X: ResNeXt.

value. The entire network is trained with stochastic gradient
descent (SGD) on 8 GPUs with 2 images per GPU. Unless
otherwise noted, all models are trained for 90k iterations
with an initial learning rate of 0.01, which is divided by 10
at 60k and again at 80k iterations. Horizontal image ﬂip-
ping is the only applied data augmentation unless otherwise
speciﬁed. Weight decay is 0.0001 and momentum is 0.9.

4. Experiments

We conduct experiments on the detection track of the
The training data is the COCO
COCO dataset [23].
trainval35k split,
including all 80k images from
train and a random 35k subset of images from the 40k
val split. We analyze our method by ablation studies on the
minival split containing the remaining 5k images from
val. When comparing to the state-of-the-art methods, we
report COCO AP on the test-dev split, which has no
public labels and requires the use of the evaluation server.

4.1. Ablation Studies

For all ablation studies, we use an image scale of 800
pixels for both training and testing. We evaluate the con-
tribution of several important elements to our detector, in-

Anchor-free branches are necessary. We ﬁrst train
two detectors with only anchor-free branches, using two
feature selection methods respectively (Table 1 2nd and
3rd rows).
It turns out anchor-free branches only can al-
ready achieve decent results. When jointly optimized with
anchor-based branches, anchor-free branches help learning
instances which are hard to be modeled by anchor-based
branches, leading to improved AP scores (Table 1 5th row).
Especially the AP50, APS and APL scores increase by
2.5%, 1.5%, and 2.2% respectively with online feature se-
lection. To ﬁnd out what kinds of objects the FSAF module
can detect, we show some qualitative results of the head-to-
head comparison between RetinaNet and ours in Figure 7.
Clearly, our FSAF module is better at ﬁnding challenging
instances, such as tiny and very thin objects which are not
well covered by anchor boxes.

Online feature selection is essential. As stated in Sec-
tion 3.3, we can select features in anchor-free branches ei-
ther based on heuristics just like the anchor-based branches,
or based on instance content.
It turns out selecting the
right feature to learn plays a fundamental role in detection.
Experiments show that anchor-free branches with heuris-
tic feature selection (Eqn. (3)) only are not able to compete
with anchor-based counterparts due to less learnable param-
eters. But with our online feature selection (Eqn. (2)), the
AP is improved by 1.2% (Table 1 3rd row vs 2nd row),
which overcomes the parameter disadvantage. Additionally,
Table 1 4th row and 5th row further conﬁrm that our on-
line feature selection is essential for anchor-free and anchor-
based branches to work well together.

How is optimal feature selected? In order to under-
stand the optimal pyramid level selected for instances, we
visualize some qualitative detection results from only the
anchor-free branches in Figure 8. The number before the
class name indicates the feature level that detects the ob-
ject. It turns out the online feature selection actually fol-
lows the rule that upper levels select larger instances, and
lower levels are responsible for smaller instances, which

845

t
e
N
a
n
i
t
e
R

s
r
u
O

Figure 7: More qualitative comparison examples between anchor-based RetinaNet (top, Table 1 1st entry) and our detector
with additional FSAF module (bottom, Table 1 5th entry). Both are using ResNet-50 as backbone. Our FSAF module helps
ﬁnding more challenging objects, such as thin objects (skis, frisbee, handbag, surfboard) and small objects (baseball).

Figure 8: Visualization of online feature selection from anchor-free branches. The number before the class name is the
pyramid level that detects the instance. We compare this level with the level to which as if this instance is assigned in the
anchor-based branches, and use red to indicate the disagreement and green for agreement.

is the same principle in anchor-based branches. However,
there are quite a few exceptions, i.e. online feature selec-
tion chooses pyramid levels different from the choices of
anchor-based branches. We label these exceptions as red
boxes in Figure 8. Green boxes indicate agreement between
the FSAF module and anchor-based branches. By capturing
these exceptions, our FSAF module can use better features

to detect challenging objects.

FSAF module is robust and efﬁcient. We also evalu-
ate the effect of backbone networks to our FSAF module in
terms of accuracy and speed. Three backbone networks in-
clude ResNet-50, ResNet-101 [13], and ResNeXt-101 [34].
Detectors run on a single Titan X GPU with CUDA 9 and
CUDNN 7 using a batch size of 1. Results are reported in

846

person 0.99person 0.65person 0.95dog 0.89person 0.97person 0.59person 0.86person 0.97person 0.77person 0.74baseball glove 0.57person 0.99skis 0.56person 0.63frisbee 0.58person 0.93handbag 0.71dog 0.92person 0.99surfboard 0.83person 0.90person 0.95person 0.89person 0.80baseball bat 0.52baseball glove 0.58sports ball 0.736:person 0.946:person 0.936:person 0.954:baseball bat 0.595:person 0.684:person 0.754:person 0.724:person 0.684:person 0.594:baseball glove 0.745:giraffe 0.716:giraffe 0.896:person 0.925:surfboard 0.727:dining table 0.775:fork 0.565:bottle 0.844:cup 0.804:bottle 0.584:knife 0.747:dining table 0.786:person 0.617:person 0.826:person 0.745:cup 0.655:cake 0.664:clock 0.844:fork 0.607:person 0.816:person 0.655:tennis racket 0.886:person 0.885:snowboard 0.594:person 0.874:person 0.944:skis 0.666:cat 0.826:laptop 0.884:cell phone 0.544:cup 0.526:person 0.666:laptop 0.664:mouse 0.526:person 0.946:person 0.625:person 0.955:person 0.955:person 0.934:skateboard 0.544:skateboard 0.624:skateboard 0.664:skateboard 0.647:elephant 0.906:person 0.905:person 0.735:person 0.925:person 0.864:person 0.713:skateboard 0.643:skateboard 0.636:person 0.875:tennis racket 0.953:sports ball 0.96Method

Backbone

AP AP50 AP75 APS APM APL

Multi-shot detectors

CoupleNet [42]

Faster R-CNN+++ [28]

Faster R-CNN w/ FPN [21]

Regionlets [35]

Fitness NMS [31]

Cascade R-CNN [3]

Deformable R-FCN [4]

Soft-NMS [2]

ResNet-101

Aligned-Inception-ResNet

Deformable R-FCN + SNIP [30]

DPN-98

Single-shot detectors

YOLOv2 [27]
SSD513 [24]
DSSD513 [8]

ReﬁneDet512 [37] (single-scale)

ReﬁneDet [37] (multi-scale)

RetinaNet800 [22]

GHM800 [18]

Ours800 (single-scale)

Ours (multi-scale)

CornerNet511 [17] (single-scale)

CornerNet [17] (multi-scale)

GHM800 [18]

Ours800 (single-scale)

Ours (multi-scale)

DarkNet-19

ResNet-101

Hourglass-104

ResNeXt-101

34.4
34.9
36.2
39.3
41.8
42.8
37.5
40.9
45.7

21.6
31.2
33.2
36.4
41.8
39.1
39.9
40.9
42.8
40.5
42.1
41.6
42.9
44.6

54.8
55.7
59.1
59.8
60.9
62.1
58.0
62.8
67.3

44.0
50.4
53.3
57.5
62.9
59.1
60.8
61.5
63.1
56.5
57.8
62.8
63.8
65.2

37.2
37.4
39.0
n/a
44.9
46.3
n/a
n/a
51.1

19.2
33.3
35.2
39.5
45.7
42.3
42.5
44.0
46.5
43.1
45.3
44.2
46.3
48.6

13.4
15.6
18.2
21.7
21.5
23.7
19.4
23.3
29.3

5.0
10.2
13.0
16.6
25.6
21.8
20.3
24.0
27.8
19.4
20.8
22.3
26.6
29.7

38.1
38.7
39.0
43.7
45.0
45.5
40.1
43.6
48.8

22.4
34.5
35.4
39.9
45.1
42.7
43.6
44.2
45.5
42.7
44.8
45.1
46.2
47.1

50.8
50.9
48.2
50.9
57.5
55.2
52.5
53.3
57.1

35.5
49.8
51.1
51.4
54.1
50.2
54.1
51.3
53.2
53.9
56.7
55.3
52.7
54.6

Table 3: Object detection results of our best single model with the FSAF module vs. state-of-the-art single-shot and multi-
shot detectors on the COCO test-dev.

Table 2. We ﬁnd that our FSAF module is robust to vari-
ous backbone networks. The FSAF module by itself is al-
ready better and faster than anchor-based RetinaNet. On
ResNeXt-101, the FSAF module outperforms anchor-based
counterparts by 1.2% AP while being 68ms faster. When
applied jointly with anchor-based branches, our FSAF mod-
ule consistently offers considerable improvements. This
also suggests that anchor-based branches are not utilizing
the full power of backbone networks. Meanwhile, our FSAF
module introduces marginal computation cost to the whole
network, leading to negligible loss of inference speed. Es-
pecially, we improve RetinaNet by 1.8% AP on ResNeXt-
101 with only 6ms additional inference latency.

where single-scale testing uses an image scale of 800 pix-
els and multi-scale testing applies test time augmentations.
Test time augmentations are testing over scales {400, 500,
600, 700, 900, 1000, 1100, 1200} and horizontal ﬂipping
on each scale, following Detectron [10]. All of our results
are from single models without ensemble.

Table 3 presents the comparison. With ResNet-101,
our detector is able to achieve competitive performance in
both single-scale and multi-scale scenarios. Plugging in
ResNeXt-101-64x4d further improves AP to 44.6% , which
outperforms previous state-of-the-art single-shot detectors
by a large margin.

4.2. Comparison to State of the Art

5. Conclusion

We evaluate our ﬁnal detector on the COCO test-dev
split to compare with recent state-of-the-art methods. Our
ﬁnal model is RetinaNet with the FSAF module, i.e. anchor-
based branches plus the FSAF module. The model is trained
using scale jitter over scales {640, 672, 704, 736, 768, 800}
and for 1.5× longer than the models in Section 4.1. The
evaluation includes single-scale and multi-scale versions,

This work identiﬁes heuristic feature selection as the pri-
mary limitation for anchor-based single-shot detectors with
feature pyramids. To address this, we propose FSAF mod-
ule which applies online feature selection to train anchor-
free branches in the feature pyramid.
It signiﬁcantly im-
proves strong baselines with tiny inference overhead and
outperforms recent state-of-the-art single-shot detectors.

847

References

[1] Chandrasekhar Bhagavatula, Chenchen Zhu, Khoa Luu, and
Marios Savvides. Faster than real-time facial alignment: A
3d spatial transformer network approach in unconstrained
poses. In The IEEE International Conference on Computer
Vision (ICCV), Oct 2017. 1

[2] Navaneeth Bodla, Bharat Singh, Rama Chellappa, and
Larry S Davis. Soft-nmsimproving object detection with one
line of code. In Computer Vision (ICCV), 2017 IEEE Inter-
national Conference on, pages 5562–5570. IEEE, 2017. 8

[3] Zhaowei Cai and Nuno Vasconcelos. Cascade r-cnn: Delv-
arXiv preprint

ing into high quality object detection.
arXiv:1712.00726, 2017. 8

[4] Jifeng Dai, Haozhi Qi, Yuwen Xiong, Yi Li, Guodong
Zhang, Han Hu, and Yichen Wei. Deformable convolutional
networks. In Computer Vision (ICCV), 2017 IEEE Interna-
tional Conference on, pages 764–773. IEEE, 2017. 8

[5] Jia Deng, Wei Dong, Richard Socher, Li-Jia Li, Kai Li,
and Li Fei-Fei.
Imagenet: A large-scale hierarchical im-
age database. In Computer Vision and Pattern Recognition,
2009. CVPR 2009. IEEE Conference on, pages 248–255.
IEEE, 2009. 5

[6] Piotr Doll´ar, Christian Wojek, Bernt Schiele, and Pietro Per-
ona. Pedestrian detection: A benchmark. In Computer Vision
and Pattern Recognition, 2009. CVPR 2009. IEEE Confer-
ence on, pages 304–311. IEEE, 2009. 1

[7] M. Everingham, L. Van Gool, C. K. I. Williams, J. Winn,
and A. Zisserman. The PASCAL Visual Object Classes
Challenge 2007 (VOC2007) Results.
http://www.pascal-
network.org/challenges/VOC/voc2007/workshop/index.html.
1, 2

[8] Cheng-Yang Fu, Wei Liu, Ananth Ranga, Ambrish Tyagi,
and Alexander C Berg. Dssd: Deconvolutional single shot
detector. arXiv preprint arXiv:1701.06659, 2017. 2, 3, 8

[9] Andreas Geiger, Philip Lenz, and Raquel Urtasun. Are we
ready for autonomous driving? the kitti vision benchmark
suite. In Conference on Computer Vision and Pattern Recog-
nition (CVPR), 2012. 2

[10] Ross Girshick, Ilija Radosavovic, Georgia Gkioxari, Piotr
Doll´ar, and Kaiming He. Detectron. https://github.
com/facebookresearch/detectron, 2018. 8

[11] Bharath Hariharan, Pablo Arbel´aez, Ross Girshick, and Ji-
tendra Malik. Hypercolumns for object segmentation and
ﬁne-grained localization. In Proceedings of the IEEE con-
ference on computer vision and pattern recognition, pages
447–456, 2015. 2

[12] Kaiming He, Georgia Gkioxari, Piotr Doll´ar, and Ross Gir-
shick. Mask r-cnn. In Computer Vision (ICCV), 2017 IEEE
International Conference on, pages 2980–2988. IEEE, 2017.
1

[13] Kaiming He, Xiangyu Zhang, Shaoqing Ren, and Jian Sun.
Deep residual learning for image recognition. In Proceed-
ings of the IEEE Conference on Computer Vision and Pattern
Recognition, pages 770–778, 2016. 1, 5, 7

[14] Yihui He, Chenchen Zhu, Jianren Wang, Marios Savvides,
and Xiangyu Zhang. Bounding box regression with un-

certainty for accurate object detection.
arXiv:1809.08545, 2018. 2

arXiv preprint

[15] Lichao Huang, Yi Yang, Yafeng Deng, and Yinan Yu. Dense-
box: Unifying landmark localization with end to end object
detection. arXiv preprint arXiv:1509.04874, 2015. 3

[16] Alex Krizhevsky, Ilya Sutskever, and Geoffrey E Hinton.
Imagenet classiﬁcation with deep convolutional neural net-
works.
In Advances in neural information processing sys-
tems, pages 1097–1105, 2012. 1

[17] Hei Law and Jia Deng. Cornernet: Detecting objects as
paired keypoints. In Proceedings of the European Confer-
ence on Computer Vision (ECCV), pages 734–750, 2018. 3,
8

[18] Buyu Li, Yu Liu, and Xiaogang Wang. Gradient harmonized
In Thirty-Third AAAI Conference on

single-stage detector.
Artiﬁcial Intelligence, 2019. 8

[19] Zeming Li, Chao Peng, Gang Yu, Xiangyu Zhang, Yangdong
Deng, and Jian Sun. Detnet: A backbone network for object
detection. arXiv preprint arXiv:1804.06215, 2018. 2

[20] Xiaodan Liang, Tairui Wang, Luona Yang, and Eric Xing.
Cirl: Controllable imitative reinforcement
learning for
vision-based self-driving. arXiv preprint arXiv:1807.03776,
2018. 1

[21] Tsung-Yi Lin, Piotr Doll´ar, Ross B Girshick, Kaiming He,
Bharath Hariharan, and Serge J Belongie. Feature pyramid
networks for object detection. In CVPR, page 3, 2017. 2, 5,
8

[22] Tsung-Yi Lin, Priyal Goyal, Ross Girshick, Kaiming He, and
Piotr Doll´ar. Focal loss for dense object detection.
IEEE
transactions on pattern analysis and machine intelligence,
2018. 1, 2, 3, 4, 5, 8

[23] Tsung-Yi Lin, Michael Maire, Serge Belongie, James Hays,
Pietro Perona, Deva Ramanan, Piotr Doll´ar, and C Lawrence
Zitnick. Microsoft coco: Common objects in context.
In
European conference on computer vision, pages 740–755.
Springer, Cham, 2014. 1, 2, 6

[24] Wei Liu, Dragomir Anguelov, Dumitru Erhan, Christian
Szegedy, Scott Reed, Cheng-Yang Fu, and Alexander C
Berg. Ssd: Single shot multibox detector. In European con-
ference on computer vision, pages 21–37. Springer, 2016. 2,
3, 8

[25] Xiaobo Ma, Yihui He, Xiapu Luo, Jianfeng Li, Mengchen
Zhao, Bo An, and Xiaohong Guan. Vehicle trafﬁc driven
camera placement for better metropolis security surveillance.
IEEE Intelligent Systems, 2018. 1

[26] Vinod Nair and Geoffrey E Hinton. Rectiﬁed linear units im-
prove restricted boltzmann machines. In Proceedings of the
27th international conference on machine learning (ICML-
10), pages 807–814, 2010. 3

[27] Joseph Redmon and Ali Farhadi. Yolo9000: Better, faster,
stronger. In 2017 IEEE Conference on Computer Vision and
Pattern Recognition (CVPR), pages 6517–6525. IEEE, 2017.
8

[28] Shaoqing Ren, Kaiming He, Ross Girshick, and Jian Sun.
Faster r-cnn: Towards real-time object detection with region
proposal networks. In Advances in neural information pro-
cessing systems, pages 91–99, 2015. 2, 8

848

[29] Karen Simonyan and Andrew Zisserman. Very deep convo-
lutional networks for large-scale image recognition. arXiv
preprint arXiv:1409.1556, 2014. 1

[30] Bharat Singh and Larry S Davis. An analysis of scale invari-
ance in object detection–snip. In Proceedings of the IEEE
Conference on Computer Vision and Pattern Recognition,
pages 3578–3587, 2018. 8

[31] Lachlan Tychsen-Smith and Lars Petersson. Improving ob-
ject localization with ﬁtness nms and bounded iou loss.
In The IEEE Conference on Computer Vision and Pattern
Recognition (CVPR), June 2018. 8

[32] Jianfeng Wang, Ye Yuan, Gang Yu, and Sun Jian. Sface: An
efﬁcient network for face detection in large scale variations.
arXiv preprint arXiv:1804.06559, 2018. 3

[33] Xiaolong Wang and Abhinav Gupta. Videos as space-time
In The European Conference on Computer

region graphs.
Vision (ECCV), September 2018. 1

[34] Saining Xie, Ross Girshick, Piotr Doll´ar, Zhuowen Tu, and
Kaiming He. Aggregated residual transformations for deep
neural networks. In Computer Vision and Pattern Recogni-
tion (CVPR), 2017 IEEE Conference on, pages 5987–5995.
IEEE, 2017. 1, 2, 7

[35] Hongyu Xu, Xutao Lv, Xiaoyu Wang, Zhou Ren, and Rama
arXiv

Chellappa. Deep regionlets for object detection.
preprint arXiv:1712.02408, 2017. 8

[36] Jiahui Yu, Yuning Jiang, Zhangyang Wang, Zhimin Cao, and
Thomas Huang. Unitbox: An advanced object detection net-
work. In Proceedings of the 2016 ACM on Multimedia Con-
ference, pages 516–520. ACM, 2016. 3, 4, 5

[37] Shifeng Zhang, Longyin Wen, Xiao Bian, Zhen Lei, and
Stan Z. Li. Single-shot reﬁnement neural network for ob-
ject detection. In The IEEE Conference on Computer Vision
and Pattern Recognition (CVPR), June 2018. 8

[38] Qijie Zhao, Tao Sheng, Yongtao Wang, Zhi Tang, Ying
Chen, Ling Cai, and Haibin Ling. M2det: A single-shot ob-
ject detector based on multi-level feature pyramid network.
In Thirty-Third AAAI Conference on Artiﬁcial Intelligence,
2019. 2

[39] Yutong Zheng, Dipan K Pal, and Marios Savvides. Ring loss:
Convex feature normalization for face recognition. In Pro-
ceedings of the IEEE Conference on Computer Vision and
Pattern Recognition, pages 5089–5097, 2018. 1

[40] Zhuoyao Zhong, Lei Sun, and Qiang Huo. An anchor-free
region proposal network for faster r-cnn based text detection
approaches. arXiv preprint arXiv:1804.09003, 2018. 3

[41] Chenchen Zhu, Ran Tao, Khoa Luu, and Marios Savvides.
Seeing small faces from robust anchor’s perspective. In The
IEEE Conference on Computer Vision and Pattern Recogni-
tion (CVPR), June 2018. 2

[42] Yousong Zhu, Chaoyang Zhao, Jinqiao Wang, Xu Zhao, Yi
Wu, Hanqing Lu, et al. Couplenet: Coupling global structure
with local parts for object detection. In Proc. of Intl Conf. on
Computer Vision (ICCV), volume 2, 2017. 8

849

