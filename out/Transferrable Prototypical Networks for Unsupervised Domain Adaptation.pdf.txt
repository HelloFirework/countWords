Transferrable Prototypical Networks for Unsupervised Domain Adaptation

Yingwei Pan †, Ting Yao †, Yehao Li ‡, Yu Wang †, Chong-Wah Ngo §, and Tao Mei †

† JD AI Research, Beijing, China

‡ Sun Yat-sen University, Guangzhou, China

§ City University of Hong Kong, Kowloon, Hong Kong

{panyw.ustc, tingyao.ustc, yehaoli.sysu, feather1014}@gmail.com, cscwngo@cityu.edu.hk, tmei@live.com

Abstract

In this paper, we introduce a new idea for unsupervised
domain adaptation via a remold of Prototypical Networks,
which learn an embedding space and perform classiﬁca-
tion via a remold of the distances to the prototype of each
class. Speciﬁcally, we present Transferrable Prototypical
Networks (TPN) for adaptation such that the prototypes for
each class in source and target domains are close in the
embedding space and the score distributions predicted by
prototypes separately on source and target data are simi-
lar. Technically, TPN initially matches each target exam-
ple to the nearest prototype in the source domain and as-
signs an example a “pseudo” label. The prototype of each
class could then be computed on source-only, target-only
and source-target data, respectively. The optimization of
TPN is end-to-end trained by jointly minimizing the dis-
tance across the prototypes on three types of data and KL-
divergence of score distributions output by each pair of the
prototypes. Extensive experiments are conducted on the
transfers across MNIST, USPS and SVHN datasets, and su-
perior results are reported when comparing to state-of-the-
art approaches. More remarkably, we obtain an accuracy
of 80.4% of single model on VisDA 2017 dataset.

1. Introduction

The recent advances in deep neural networks have con-
vincingly demonstrated high capability in learning vision
models on large datasets. For instance, an ensemble of
residual nets [7] achieves 3.57% top-5 error on the Ima-
geNet test set, which is even lower than 5.1% of the reported
human-level performance. The achievements rely heavily
on the requirement to have large quantities of annotated da-
ta for deep model learning. However, performing intensive
manual labeling on a new dataset is expensive and time-
consuming. A valid question is why not recycling off-the-
shelf learnt knowledge/models in source domain for new
domain(s). The difﬁculty originates from the domain gap

[33] that may adversely affect the performance especially
when the source and target data distributions are very dif-
ferent. An appealing way to address this challenge would
be unsupervised domain adaptation, which aims to utilize
labeled examples or learnt models in the source domain and
the large number of unlabeled examples in the target domain
to generalize a target model.

A common practice in unsupervised domain adaptation
is to align data distributions between source and target do-
mains or build invariance across domains by minimizing do-
main shift through measures such as correlation distances
[27, 34] or maximum mean discrepancy [31]. In this pa-
per, we explore general-purpose and task-speciﬁc domain
adaptations under the framework of Prototypical Networks
[26]. The design of prototypical networks assumes the ex-
istence of an embedding space in which the projections of
samples in each class cluster around a single prototype (or
centroid). The classiﬁcation is then performed by comput-
ing the distances to prototype representations of each class
in the embedding space. In this way, the general-purpose
adaptation is to represent each class distribution by a pro-
totype and match the prototypes of each class in the em-
bedding space learnt on the data from different domains.
The inspiration of task-speciﬁc adaptation is from the ratio-
nale that the target data should be classiﬁed correctly by the
task-speciﬁc model when the source and target distribution-
s are well aligned. In the context of prototypical networks,
task-speciﬁc adaptation is equivalent to adapting the score
distributions produced by prototypes in different domains.

By consolidating the idea of general-purpose adapta-
tion and task-speciﬁc adaptation into unsupervised domain
adaptation, we present a novel Transferrable Prototypical
Networks (TPN) architecture.
Ideally, TPN is to learn a
non-linear mapping (a neural network) of the input exam-
ples into an embedding space, in which the representation-
s are invariant across domains. Speciﬁcally, TPN takes a
batch of labeled source and unlabeled target examples, com-
pares each target example to each of the prototypes com-
puted on source data, and assigns the label of the nearest

2239

prototype as a “pseudo” label to each target example. As
such, the general-purpose adaptation is then formulated to
minimize the distances between the prototypes measured on
source data, target data with pseudo labels, and source plus
target data. That is to alleviate domain discrepancy on class
level. In task-speciﬁc adaptation, we utilize a softmax over
distances of the embedding of each example to the proto-
types as the classiﬁer. The KL-divergence is exploited to
model the mismatch of score distribution by classiﬁers on
prototypes computed in each domain or their combination.
In this case, domain discrepancy is amended on sample lev-
el. The whole TPN is end-to-end trained by minimizing the
classiﬁcation loss on labeled source data plus the two adap-
tation terms, and switching the learning from batch to batch.
At inference stage, each prototype is computed as a priori.
A test target example is projected into the embedding space
to compare to each prototype and the outputs of softmax are
taken as predictions.

2. Related Work

Inspired by the recent advances in image representation
using deep convolutional neural networks (DCNNs), a few
deep architecture based methods have been proposed for
unsupervised domain adaptation.
In particular, one com-
mon deep solution for unsupervised domain adaptation is to
guide the feature learning in DCNNs by minimizing the do-
main discrepancy with Maximum Mean Discrepancy (M-
MD) [6]. MMD is an effective non-parametric metric for
the comparisons between the distributions of source and tar-
get domains. [31] is one of early works that incorporates
MMD into DCNNs with regular supervised classiﬁcation
loss on source domain to learn both semantically meaning-
ful and domain invariant representation. Later in [15], Long
et al. simultaneously exploit transferability of features from
multiple layers via the multiple kernel variant of MMD. The
work is further extended by adapting classiﬁers through a
residual transfer module in [17]. Most recently, [16] ex-
plores domain shift reduction in joint distributions of the
network activation of multiple task-speciﬁc layers.

Another branch of unsupervised domain adaptation in D-
CNNs is to exploit the domain confusion by learning a do-
main discriminator [4, 14, 29, 30, 35]. Here the domain dis-
criminator is designed to predict the domain (source/target)
of each input sample and is trained in an adversarial fashion,
similar to GANs [5], for learning domain invariant represen-
tation. For example, [29] devises a domain confusion loss
measured in domain discriminator for enforcing the learn-
t representation to be domain invariant. Similar in spirit,
Ganin et al. explore such domain confusion problem as a bi-
nary classiﬁcation task and optimize the domain discrimina-
tor via a gradient reversal algorithm in [4]. Coupled GANs
[13] directly applies GANs into domain adaptation problem
to explicitly reduce the domain shifts by learning a joint

distribution of multi-domain images. Recently, [30] com-
bines adversarial learning with discriminative feature learn-
ing for unsupervised domain adaptation. Most recently, [32]
extends domain discriminator by learning domain-invariant
feature extractor and performing feature augmentation.

In summary, our approach belongs to domain discrepan-
cy based methods. Similar to previous approaches [16, 31],
our TPN leverages additional unlabeled target data for
learning task-speciﬁc classiﬁers. The novelty is on the ex-
ploitation of multi-granular domain discrepancy in Proto-
typical Networks, at class-level and sample-level, that has
not been fully explored in the literature. Class-level do-
main discrepancy is reduced by learning similar prototypes
of each class in different domains, while sample-level dis-
crepancy is by enforcing similar score distributions across
prototypes of different domains.

3. Unsupervised Domain Adaptation

Our Transferrable Prototypical Networks (TPN) is to re-
mould Prototypical Networks towards the scenario of un-
supervised domain adaptation by jointly bridging the do-
main gap via minimizing multi-granular domain discrepan-
cies, and constructing classiﬁers with unlabeled target da-
ta and labeled source data. The classiﬁers in Prototypical
Networks are typically achieved by measuring distances be-
tween the example and prototype of each class, which can
be ﬂexibly adapted across domains by only updating pro-
totypes in a speciﬁc domain. To learn transferrable repre-
sentations in Prototypical Networks, TPN ﬁrstly utilizes the
classiﬁers learnt on source-only data to directly predict the
pseudo labels of unlabeled target data and thus produces an-
other two kinds of prototype-based classiﬁers constructed in
target-only and source-target data. The training of TPN is
then performed simultaneously by classifying each source
sample as correct class and reducing multi-granular domain
discrepancy at class level & sample level. The class-level
domain discrepancy is reduced via matching the prototypes
of each class, and the sample-level domain discrepancy is
minimized by enforcing the score distributions over classes
of each sample synchronized, across different domains. We
alternate the above two steps in each training iteration and
optimize the whole TPN in an end-to-end fashion.

3.1. Preliminary—Prototypical Networks

Prototypical Networks is preliminarily proposed in [26]
to construct an embedding space in which points clus-
ter around a single prototype representation of each class.
In particular, given a set with N labeled samples S =
{(xi, yi)}N
i=1 belonging to C categories, where yi ∈
{1, 2, ..., C} is the class label of sample xi. The objective
is to learn an embedding function f (xi; θ) : xi → Rm for
transforming each input sample into a m-dimensional em-
bedding space through a deep architecture of Prototypical

2240

Embedding 
Space

Source Domain

Target Domain

Unsupervised Domain Adaptation: Before.

s(cid:80)
1

st(cid:80)
1

t(cid:80)
1

s(cid:80)
2

st(cid:80)
2

t(cid:80)
2

s(cid:80)
1
st(cid:80)
1

t(cid:80)
1

s(cid:80)
2

st(cid:80)
2

t(cid:80)
2

Assign pseudo Labels for target samples;

Obtain prototypes on source, target and source-target data.

General-purpose Domain Adaptation.

xi

s(cid:80)
1
st(cid:80)
1

t(cid:80)
1

s(cid:80)
2

st(cid:80)
2

t(cid:80)
2

Task-specific Domain Adaptation.

Unsupervised Domain Adaptation with TPN: After.

Transferrable Prototypical Networks

Unsupervised Domain Adaptation with 

MMD/domain Discriminator: After.

Existing works

Figure 1. The intuition behind existing unsupervised domain adaptation models with MMD [15] or domain discriminator [29] and our
Transferrable Prototypical Networks (TPN) (better viewed in color). Most of the existing models aim to reduce the domain shift by
measuring the holistic domain discrepancy/domain confusion over source and target data, while leaving the domain discrepancy of each
class or the relations between samples and classiﬁers unexploited. In contrast, our TPN tackles this problem from the viewpoint of both
general-purpose and task-speciﬁc adaptation to measure the multi-granular domain discrepancy at class level and sample level, respectively.
In particular, TPN initially matches each unlabeled target sample to the nearest prototype in the source domain and assigns each target
example a “pseudo” label. Next, the prototype of each class is computed on source-only, target-only and source-target data. The general-
purpose adaptation is then performed to push the prototype of each class computed in each domain to be close in the embedding space.
Meanwhile, we perform the task-speciﬁc adaptation to align the score distributions produced by prototypes obtained in different domains
for each sample. The whole TPN is trained by minimizing the supervised classiﬁcation loss on labeled source data plus the general-purpose
and task-speciﬁc adaptation terms in an end-to-end manner.

Networks, where θ represents the learnable parameters. To
convey the high-level description of the class as meta-data,
the prototype of each class is deﬁned by taking the average
of all embedded samples belonging to that class:

µc =

1

|Sc| X

xi∈Sc

f (xi; θ),

(1)

where Sc denotes the set of samples from class c. Given
a query sample xi, Prototypical Networks directly produce
its score distribution Pi ∈ RC over C classes via a softmax
function on distances to the prototypes, whose c-th element
is the probability of xi belonging to class c:

Pic = p (yi = c|xi) =

e−d(f (xi;θ),µc)

Pc′ e−d(f (xi;θ),µc′ )

,

(2)

where d (·) is the distance function (e.g., Euclidean distance
as in [26]) between query sample and the prototype. The
training of Prototypical Networks is performed by minimiz-
ing the negative log-likelihood probability of assigning cor-
rect class label c to this sample:

LS (xi) = − log p (yi = c|xi) .

(3)

3.2. Problem Formulation

In unsupervised domain adaptation, we are given Ns la-
beled samples S s = {(xs
i=1 in the source domain
and Nt unlabeled samples S t = {xt
i=1 in the target do-
main. Based on the widely adopted assumption of the ex-

i )}Ns

i}Nt

i , ys

istence of a shared feature space for source and target do-
mains in [16, 20, 29], the ultimate goal of this task is to
design an embedding function f (xi; θ) which formally re-
duces domain shifts in the shared feature space and enables
learning of both transferrable representations and classiﬁers
depending on S s and S t. Different from the existing trans-
fer techniques [16, 17] which are typically composed of
two cascaded networks for learning domain-invariant fea-
tures and target-discriminative classiﬁers respectively, we
consider unsupervised domain adaptation in the framework
of Prototypical Networks. Such framework naturally uni-
ﬁes the learning of features and classiﬁers into one network
by constructing classiﬁers purely on the prototype of each
class. This design reﬂects a very simple inductive bias that
is beneﬁcial in domain adaptation regime. Speciﬁcally, to
make Prototypical Networks transferrable across domains,
two adaptation mechanisms are devised to align distribu-
tions of source and target domains through reducing multi-
granular (i.e., class-level and sample-level) domain discrep-
ancies. In between, the general-purpose adaptation matches
the prototypes of each class and the task-speciﬁc adapta-
tion enforces similar score distributions over classes of each
sample, across different domains, as shown in Figure 1.

3.3. General purpose Domain Adaptation

Most existing works resolve unsupervised domain adap-
tation by minimizing the domain discrepancy between
source and target data distributions with MMD [31], or

2241

maximizing the domain confusion across domains via a do-
main discriminator [29]. Both of the domain discrepan-
cy and domain confusion terms are measured over the en-
tire source and target data, irrespective of the speciﬁc class
of each sample. Moreover, the domain discrepancy has
been seldom exploited across domains for each class, possi-
bly because measuring such class-level domain discrepancy
needs the labels of both source and target samples, while in
typical unsupervised domain adaptation settings, no label is
provided for target samples.

Inspired from self-labeling [11, 24] for domain adap-
tation, we directly utilize prototype-based classiﬁer learnt
on labeled source data for matching each target sample to
the nearest prototype in the source domain, and then assign
the target sample a “pseudo” label. As such, all the target
samples ˆS t = {(xt
i=1 are with pseudo labels. After
obtaining the real/pseudo labels of source/target data, three
kinds of classiﬁers (i.e., prototypes (cid:8)µs
c (cid:9))
could be calculated on source-only data (S s), target-only
data ( ˆS t) and source-target data (S s ∪ ˆS t), respectively:

c(cid:9) and (cid:8)µst

c(cid:9), (cid:8)µt

i )}Nt

i, ˆyt

µs

c = 1
|S s

c | Pxs

i ∈S s

c

µst

c =

1

|S s

c |+| ˆS t
c|

f (xs

i ; θ), µt

i ∈ ˆS t

c

c = 1
| ˆS t

c| Pxt
i ; θ) + Pxt

i ∈ ˆS t

c

f (cid:0)xt
i; θ(cid:1),
i; θ(cid:1)
f (cid:0)xt
 ,

f (xs


 Pxs

i ∈S s

c

(4)

c and ˆS t

where S s
from the same class c.

c denote the sets of source/target samples

To measure the class-level domain discrepancy across
domains, we take the inspiration from MMD-based transfer
techniques [16, 17] and compute pairwise reproducing ker-
nel Hilbert space (RKHS) distance between the prototypes
of the same class from different domains. The basic idea
is that if the data distributions of source and target domain-
s are identical, the prototypes of the same class achieved
on different domains are the same. Formally, we deﬁne the
following class-level discrepancy loss as

C

C

H

(5)

+ 1
C

LG(cid:0){µs

CPc=1(cid:13)(cid:13)eµs
c(cid:13)(cid:13)2
c − eµt
CPc=1(cid:13)(cid:13)eµt
c (cid:13)(cid:13)2
c − eµst

c } ,(cid:8)µt
c(cid:9) ,(cid:8)µst
c (cid:9)(cid:1) ∆= 1
CPc=1(cid:13)(cid:13)eµs
c (cid:13)(cid:13)2
H + 1
c − eµst
c(cid:9), (cid:8)eµt
c(cid:9) and (cid:8)eµst
c (cid:9) denote the corresponding
prototypes in reproducing kernel Hilbert space H. By min-
imizing this term, the prototype of each class computed in
each domain will be enforced to be in close proximity in the
embedding space, leading to invariant representation distri-
bution across domains in general.

where (cid:8)eµs

H

,

MMD is computed by

φ (xs

i ), µt = 1

|St| Pxt

i ∈St

φ(cid:0)xt
i(cid:1),

(6)

µs = 1

|Ss| Pxs

i ∈Ss

LMM D = (cid:13)(cid:13)µs − µt(cid:13)(cid:13)2

H

,

where φ (·) is the mapping to RKHS H. Taking a close
look on the objective of MMD and our class-level discrep-
ancy loss in Eq.(5), we can observe some interesting con-
nections. Concretely, the means of source and target data
(i.e., µs and µt) measured in MMD can be interpreted as the
holistic prototype of each domain in RKHS. MMD is then
expressed as the RKHS distance between the holistic proto-
types across domains. Our class-level domain discrepancy,
different from MMD, is computed as the RKHS distance
across the prototypes of each class from different domains.
In other words, a ﬁne-grained alignment of source and tar-
get data distributions is performed on class level, instead of
simply minimizing the distance between holistic prototypes
across domains.

3.4. Task speciﬁc Domain Adaptation

The general-purpose domain adaptation only enforces
similarity in feature distributions, while leaving the rela-
tions between samples and task-speciﬁc classiﬁers (i.e., pro-
totypes) unexploited. Furthermore, we devise a new adap-
tation mechanism, i.e., task-speciﬁc adaptation, to reduce
sample-level domain discrepancy by aligning the score dis-
tributions of different classiﬁers (i.e., prototypes) across do-
mains for each sample. The rationale of sample-level do-
main discrepancy is that each source/target sample should
be classiﬁed correctly by the task-speciﬁc classiﬁers when
source and target distributions are well aligned, leading to
consistent decisions of classiﬁers across domains.

In particular, given each source/target sample xi, three
i ) are obtained via three
c (cid:9))

score distributions (Ps
kinds of classiﬁers (i.e., prototypes (cid:8)µs

c(cid:9) and (cid:8)µst

c(cid:9), (cid:8)µt

i and Pst

i , Pt

learnt on source-only, target-only and source-target data, re-
spectively. To measure the sample-level domain discrepan-
cy, we utilize KL-divergence to evaluate the pairwise dis-
tance between the score distributions from different do-
mains. The sample-level discrepancy loss over the source
and target samples are deﬁned as

LT (cid:0){Ps

i } ,(cid:8)Pt

DKL (cid:0)Ps
dKL (cid:0)Ps

i , Pt

i ||Pt

1

1

+

=

i (cid:9)(cid:1) ∆

i(cid:9) ,(cid:8)Pst

|Ss |+| ˆSt| Pxi
|Ss |+| ˆSt| Pxi
|Ss |+| ˆSt| Pxi
2 (cid:0)dKL (cid:0)Ps
i ||Pt
i(cid:1) = 1
ic log(cid:18) P
i(cid:1) =
Pc=1

Ps

Pt

+

C

1

i(cid:1) + dKL (cid:0)Pt
ic (cid:19),

s
ic

DKL (cid:0)Ps
DKL (cid:0)Ps
DKL (cid:0)Pt

i||Ps

i , Pt
i(cid:1)
i , Pst
i (cid:1)
i , Pst
i (cid:1),
i(cid:1)(cid:1) ,

(7)

Connections with MMD. MMD [6] is a kernel two-
sample test which measures the distribution difference be-
tween source and target data by mapping them into a repro-
ducing kernel Hilbert space. The empirical estimation of

where dKL (·) is the KL-divergence factor and DKL (·) is
the symmetric pairwise KL-divergence.

Please note that different from general-purpose domain
adaptation which independently matches the prototypes of

2242

each class across different domains, task-speciﬁc adaptation
simultaneously adapts the prototypes of all classes, pursu-
ing similar score distributions over classes of each sample.

3.5. Optimization

The overall training objective of our TPN integrates the
supervised classiﬁcation loss in Eq.(3) and multi-granular
discrepancy losses (i.e., class-level discrepancy loss in E-
q.(5) and sample-level discrepancy loss in Eq.(7)). Hence
we obtain the following optimization problem:

min

θ

1

|S s| Pxs

i ∈S s

LS (xs

i ) + αLG(cid:0){µs
i } ,(cid:8)Pt

c } ,(cid:8)µt
i(cid:9) ,(cid:8)Pst

c (cid:9)(cid:1)
c(cid:9) ,(cid:8)µst
i (cid:9)(cid:1) ,

+ βLT (cid:0){Ps

(8)

where α and β are tradeoff parameters. With this overall
loss objective, the crucial goal of the optimization is to learn
the deep embedding function f (xi; θ), in which the output
representations are invariant across domains.

Training Procedure. To address the optimization prob-
lem in Eq.(8), we split the training process into two steps: 1)

calculate classiﬁer (i.e., prototypes (cid:8)µs
calculate classiﬁers (i.e., prototypes (cid:8)µt

c(cid:9)) on source domain
c (cid:9)) on

c(cid:9) and (cid:8)µst

and perform it to assign pseudo labels to target samples; 2)

target-only and source-target data, and update θ with re-
spect to the gradient descent of overall objective function.
We alternate the two steps in each training iteration and stop
the procedure until a convergence criterion is met. Note that
to remedy the error of self-labeling, we only assign pseudo
labels to the target examples whose maximized scores are
over 0.6 and resample the target examples for labeling in
each training iteration to avoid overﬁtting of pseudo labels.
Furthermore, the training process of our TPN is also resis-
tant to the noise of pseudo labels since we iteratively utilize
both labeled source examples and pseudo-labeled target ex-
amples for learning the embedding function. This proce-
dure not only ensures the accuracy in source domain, but
also effectively minimizes class-level and sample-level dis-
crepancy. Such cycle will gradually improve the accuracy
in target domain.

Inference. After training TPN, we can obtain the deep
embedding function f (xi; θ). With this, all the three sets
of prototypes ((cid:8)µs
c (cid:9)) are calculated over

c(cid:9) and (cid:8)µst

c(cid:9), (cid:8)µt

the whole training set in advance and stored in memory.
Any one of the three prototype sets can be utilized as the
ﬁnal classiﬁer for classifying test target sample at the test-
ing stage. We empirically veriﬁed that the performance is
not sensitive to the selection of prototypes1, which implic-
itly reveals the domain invariant characteristic of the learnt
feature representation. Hence, given a test target sample,
we compute its embedding representation via f (xi; θ) and
compare the distances to prototypes of each class to output
the ﬁnal prediction scores.

1The accuracy constantly ﬂuctuates within 0.002 when using d-
ifferent set of prototypes for four domain shifts in our experiments.

3.6. Theoretical Analysis

We formalize the error bound of TPN by an extension of
the theory in [1]. As TPN performs training on a mixture
of labeled source examples and target samples with pseudo
labels, the classiﬁcation error is naturally considered as the
linear weighted sum of errors in source and target domain.
Denote ys and ˆyt as the ground truth labels of source exam-
ples and the pseudo labels of target samples, respectively,
and h as a hypothesis. The error is then formally written as

ǫγ(h) = γǫt(h, ˆyt) + (1 − γ)ǫs(h, ys) ,

(9)

where γ is the tradeoff parameter. The term ǫt(h, ˆyt) =
Ex∼Dt [|h(x) − ˆyt|] and ǫs(h, ys) = Ex∼Ds [|h(x) − ys|]
represents the expected error over the sample distribution
of target domain Dt and source domain Ds with respect to
pseudo labels and ground truth labels, respectively.

Next, a valid question is how close the error ǫγ(h) is to
an oracle error ǫt(h, yt) that evaluates the classiﬁer learnt on
the ground truth labels yt of the target examples. The closer
the two losses are, the more desirable the domain adaptation
performs. The following Lemma proves that the difference
between the two losses could be bounded for our TPN.

Lemma 1. Let h be a hypothesis in class H. Then

dH∆H (Ds, Dt) + λ) + γρ,

(cid:12)(cid:12)ǫγ(h) − ǫt(h, yt)(cid:12)(cid:12) ≤ (1 − γ)(

1
2

(10)
where dH∆H (Ds, Dt) = 2 suph,h′∈H |ǫt(h, h′) − ǫs(h, h′)|
measures the domain discrepancy in the hypothesis space
H. ρ denotes the ratio of target examples with false pseudo
labels. λ = ǫs(h∗, ys) + ǫt(h∗, yt) is the combined error in
two domains of the joint ideal hypothesis h∗, which is the
optimal hypothesis by minimizing the combined error:

h∗ = arg min ǫs(h, ys) + ǫt(h, yt).

(11)

Lemma 1 decomposes the bound into three terms: do-
main discrepancy dH∆H (Ds, Dt) measured by the dis-
agreement of hypothesis in the space H, the error λ of the
ideal joint hypothesis and the ratio ρ of the noise in pseu-
do labels. In TPN, the ﬁrst term is assessed through quan-
tifying class-level discrepancy of prototypes and sample-
level discrepancy over score distributions across different
domains. As stated in [1], when the combined error λ of the
joint ideal hypothesis is large, there is no classiﬁer that per-
forms well on both domains. Instead, in the most relevant
cases for domain adaptation, λ is usually considered to be
negligibly small and thus the second term can be disregard-
ed. Furthermore, in each iteration, TPN searches for the
optimal hypothesis and improves the accuracy of pseudo-
label prediction on target examples. The increase of correct
pseudo labels in turn beneﬁts the reduction of domain dis-
crepancy. We will empirically verify that the third term ρ of
the noise in pseudo labels is iteratively decreased in Section
4.3. As such, TPN constantly tightens the bound in Eq.(10).

2243

4. Experiments

We conduct extensive evaluations of TPN for unsuper-
vised domain adaptation from four domain shifts, including
three Digits image transfer across three Digits datasets (i.e.,
MNIST [10], USPS [3] and SVHN [19]) and one synthetic-
to-real image transfer on VisDA 2017 dataset [21].

4.1. Datasets and Experimental Settings

Datasets. The MNIST (M) and USPS (U) image dataset-
s are both handwritten Digits datasets containing 10 class-
es of digits. The MNIST dataset consists of 70k images
and the USPS dataset includes 9.3k images. Unlike the t-
wo, the SVHN (S) dataset is a real-world Digits dataset of
house numbers in Google street view images and contains
100k cropped Digits images. The VisDA 2017 dataset is
the largest synthetic-to-real object classiﬁcation dataset to
date with over 280k images in the training, validation and
testing splits (domains). All the three domains share the
same 12 object categories. The training domain consists of
152k synthetic images which are generated by rendering 3D
models of the same object categories from different angles
and under different lighting conditions. The validation do-
main includes 55k images by cropping object in real images
from COCO [12]. The testing domain contains 72k images
cropped from video frames in YT-BB [22].

Digits Image Transfer. Following [30], we consider
three directions: M → U, U → M and S → M, for unsu-
pervised domain adaptation among Digits datasets. For the
transfer between MNIST and USPS, we sample 2k images
from MNIST and 1.8k images from USPS as in [30]. For S
→ M, the two training sets are fully utilized. In addition, the
CNN architecture for the three Digits image transfer tasks
is a simple modiﬁed version of [10] (2 conv-layer LeNet),
which is also exploited in [30].

Synthetic-to-Real Image Transfer. The second experi-
ment was conducted over the most challenging synthetic-to-
real image transfer task in VisDA 2017. As the annotations
of the testing data in VisDA are not publicly available, we
take the training data (i.e., synthetic images) as source do-
main and the validation data (i.e., cropped COCO images)
as target domain. Moreover, we adopt 50-layer ResNet [7]
pre-trained on ImageNet [23] as our basic CNN structure.

Implementation Details. The two tradeoff parameters
α and β in Eq.(8) are simply set as 1. A common practice
in unsupervised domain adaption is the lack of annotations
in target domain, making the parameters unable to be well
estimated. As such, we directly ﬁx the tradeoff parameter-
s in all the experiments. We strictly follow [2, 30] and set
the embedding size m as 10/512 for Digits/synthetic-to-real
image transfer. We mainly implement TPN based on Caffe
[8]. Speciﬁcally, the network weights are trained by ADAM
[9] with 0.0005 weight decay and 0.9/0.999 momentum for
Digits/synthetic-to-real image transfer. The learning rate

and mini-batch size are set as 0.0002/0.00001 and 128/60
for Digits/synthetic-to-real image transfer. The maximum
training iteration is set as 70k for all the experiments. More-
over, following [30], we pre-train TPN on labeled source
data. For Digits image transfer tasks, we adopt the clas-
siﬁcation accuracy on target domain as evaluation metric.
For synthetic-to-real image transfer, we measure the per-
category classiﬁcation accuracy on target domain. The ﬁnal
metric is the average of accuracy over all categories.

Compared Methods. To empirically verify the mer-
it of our TPN, we compare the following approaches:
(1) Source-only directly exploits the classiﬁcation model
trained on source domain to classify target samples.
(2)
RevGrad [4] treats domain confusion as a binary classiﬁ-
cation task and trains the domain discriminator via gradient
(3) DC [29] explores a Domain Confusion loss
reversal.
measured in domain discriminator for unsupervised domain
adaptation. (4) DAN [15] utilizes multiple kernel variant of
MMD to align feature representations from multiple layers.
(5) RTN [17] extends DAN by adapting classiﬁers through
a residual transfer module. (6) ADDA [30] designs an u-
niﬁed unsupervised domain adaptation model based on ad-
versarial learning objectives. (7) JAN [16] learns a transfer
model by aligning joint distributions of the network activa-
tion of multiple layers across domains. (8) MCD [25] align-
s distributions of source and target domains by utilizing the
task-speciﬁc decision boundaries. (9) S-En [2] explores the
mean teacher variant of temporal ensembling [28] for un-
supervised domain adaptation. (10) TPN is the proposal in
this paper. Moreover, two slightly different settings of TPN
are named as TPNgen and TPNtask which are trained with
only general-purpose and task-speciﬁc adaptation, respec-
tively. (11) Train-on-target is an oracle run that trains the
classiﬁer on all labeled target samples.

4.2. Performance Comparison

Digits Image Transfer. Table 1(a) shows the perfor-
mance comparisons on three transfer directions among Dig-
its datasets. Overall, the results across three adaptations
consistently indicate that our proposed TPN achieves supe-
rior performances against other state-of-the-art techniques
including MMD based models (DAN, RTN, JAN) and do-
main discriminator based approaches (RevGrad, DC, AD-
DA, MCD). In particular, the accuracy of TPN can achieve
92.1% and 94.1% on the adaptation of M → U and U →
M, making the absolute improvement over the best com-
petitor ADDA by 2.7% and 4%, respectively, which is gen-
erally considered as a signiﬁcant progress on the adapta-
tion between MNIST and USPS. It is noteworthy that com-
pared to JAN, our TPN also promotes the classiﬁcation ac-
curacy evidently on the harder transfer S → M, where the
source and target domains are substantially different. The
results in general highlight the key importance of exploring

2244

Table 1. Classiﬁcation accuracy (%) of different methods for (a) Digits image transfer across MNIST (M), USPS (U) and SVHN (S), and
(b) Synthetic-to-real image transfer on VisDA 2017 dataset. For digits image transfer, ∗ indicates the results are directly drawn from [30].
For synthetic-to-real image transfer, † indicates the results are directly drawn from [25] and [2], respectively.

(a) Digits image transfer.

(b) Synthetic-to-real image transfer.

M → UU → MS → M

Method
Source-only∗
75.2
RevGrad [4]∗
77.1
DC [29]∗
79.1
DAN [15]
80.3
82.0
RTN [17]
ADDA [30]∗
89.4
JAN [16]
84.4
90.0
MCD [25]
91.3
TPNgen
88.1
TPNtask
92.1
TPN
Train-on-target 92.3

57.1
73.0
66.5
77.8
81.2
90.1
83.4
88.5
93.5
88.0
94.1
96.8

60.1
73.9
68.1
73.5
75.3
76.0
78.4
83.3
90.2
88.8
93.0
96.8

Method

plane bcycl bus car horse knife mcycl person plant sktbrd train truck mean

70.6 51.8 55.8 68.9 77.9 7.6
93.3
Source-only
75.9 70.5 65.3 17.3 72.8 38.6 58.0
RevGrad [4]
63.6 38.4 71.2 61.4 71.4 10.9 86.6
DC [29]
DAN [15]
61.7 54.8 77.7 32.2 75.0 80.8 78.3
79.5 59.6 78.0 47.4 82.7 82.0 84.7
RTN [17]
92.1 66.4 81.4 39.6 72.5 70.5 81.5
JAN [16]
MCD [25]†
87.0 60.9 83.7 64.0 88.9 79.6 84.7
94.5 86.8 76.8 49.7 92.1 12.5 84.7
TPNgen
89.2 62.8 71.7 83.5 90.6 24.6 88.8
TPNtask
93.7 85.1 69.2 81.6 93.5 61.9 89.3
TPN
S-En+Mini-aug [2]† 92.9 84.9 71.6 41.2 88.8 92.4 67.5
S-En+Test-aug [2]† 96.3 87.9 84.7 55.7 95.9 95.2 88.6
Train-on-target
99.5 91.9 97.3 96.8 98.3 98.5 94.1

34.5 81.1 27.9 88.6 5.6 55.3
77.2 72.5 40.4 70.4 44.7 58.6
43.5 70.2 47.7 79.8 21.6 55.5
46.9 66.9 34.5 79.6 29.1 59.8
54.7 81.6 34.5 74.2 6.6 63.8
70.5 79.7 44.6 74.2 24.6 66.5
76.9 88.6 40.3 83.0 25.8 71.9
75.2 92.1 86.8 84.1 47.4 73.6
91.1 89.8 74.7 69.1 36.1 72.7
81.4 93.5 81.6 84.5 49.9 80.4
63.5 84.5 71.8 83.2 48.1 74.2
77.4 93.3 92.8 87.5 38.2 82.8
96.2 99.0 98.2 97.9 82.3 95.8

both class-level and sample-level domain discrepancy vi-
a general-purpose and task-speciﬁc adaptation in unsuper-
vised domain adaptation, leading to more domain-invariant
feature representations.

The performances of Source-only which trains the clas-
siﬁer only on labeled source data could be regarded as a
lower bound without domain adaptation. By additionally
incorporating the domain adaptation term (MMD/domain
discriminator), RevGrad, DC, DAN, RTN, ADDA, JAN
and MCD lead to a large performance boost over Source-
only, which basically indicates the advantage of measuring
the domain discrepancy/domain confusion over the source
and target data. Furthermore, the performances of them on
harder transfer S → M are much lower than our TPNgen
and TPNtask which exploits the class-level/sample-level
domain discrepancy in Prototypical Networks by matching
the prototypes across domains for each class and score dis-
tributions of different classiﬁers (i.e., prototypes) for each
sample, respectively. This conﬁrms the effectiveness of
leveraging class-level and sample-level domain discrepancy
in general-purpose and task-speciﬁc adaptation, especially
between more distinct domains. For the two easy trans-
fer tasks between MNIST and USPS, TPNtask is inferior
to ADDA, MCD and TPNgen, which indicates that sole-
ly matching score distributions of each sample might inject
noise more easier than domain discriminator/class-level do-
main discrepancy on transfer task across similar domain-
s.
In addition, by simultaneously utilizing both general-
purpose and task-speciﬁc adaptation, our TPN consistent-
ly boosts up the performances on all the three Digits im-
age transfer tasks. The results demonstrate the advantage
of jointly leveraging multi-granular domain discrepancy at
class level and sample level for unsupervised domain adap-
tation. Note that we exclude the published results of S-En
in this comparison as S-En is originally built with deeper

CNNs (i.e., 9 conv layers) on Digits image datasets and our
TPN is based on 2 conv-layer LeNet. When equipped with
the same CNNs in S-En, the accuracy of our TPN is boosted
up to 98.6% on M → U which is higher than 98.3% of S-En.
Synthetic-to-Real Image Transfer. The performance
comparisons for synthetic-to-real image transfer task on
VisDA 2017 dataset are summarized in Table 1(b). Here
the results of S-En are all reported on the setting with mul-
tiple data augmentations (DA). Our TPN performs consis-
tently better than other runs without any DA involved. In
particular, the mean accuracy across all the 12 categories
can reach 80.4%, making the absolute improvement over
JAN by 13.9%. Similar to the observations on the hard
Digits image transfer S → M, TPNgen and TPNtask ex-
hibit better performance than JAN by taking class-level and
sample-level domain discrepancy into account for unsuper-
vised domain adaptation.
In addition, TPNgen performs
better than TPNtask and a larger degree of improvemen-
t is attained when exploiting both general-purpose and task-
speciﬁc adaptation by TPN. Please note that the highest ac-
curacy 82.8% of S-En is equipped with the test-time aug-
mentation (Test-aug), i.e., averaged predictions of 16 differ-
ent augmentations of each image, while the accuracy 80.4%
of our TPN is on single model without any DA. When re-
lying on one kind of DA (Mini-aug), S-En only achieves
74.2% which is still lower than ours.

4.3. Experimental Analysis

Feature Visualization. Figure 2(a)-(b) depict the t-SNE
[18] visualizations of features learnt by Source-only and our
TPN on VisDA 2017 dataset (10k samples in each domain).
We can see that the distribution of target sample is far from
that of source samples for Source-only run without domain
adaptation. Through domain adaptation by TPN, the two
distributions are brought closer, making the target distribu-

2245

Figure 2. (a)-(b): The t-SNE visualization of features generated by Source-only and TPN (gray: source, blue: target). (c)-(f): The Confusion
Matrix (CM) visualization for Source-only, JAN, TPN and Train-on-target.

SSource
Source
Source

TTTarget
Target
Target

Source
SSource

Target
TTTarget
Target

Source
SSource

Target
TTTargetg

Source
SSource

(a) Iteration: 0
(a) Iteration: 0
Target
TTargetg

Source
SSource

(b) Iteration: 2k
(b) Iteration: 2k
Target
TTargetg

Source
SSource

(c) Iteration: 5k
(c) Iteration: 5k
Target
TTargetg

Source
SSSource

(d) Iteration: 10k
(d) Iteration: 10k
(d) Iteration: 10k
(d) Iteration: 10k
Target
TTargetg

Source
SSSource

(e) Iteration: 15k
(e) Iteration: 15k
(e) Iteration: 15k
(e) Iteration: 15k
Target
TTargetg

(g) Iteration: 30k

(h) Iteration: 50k
(h) Iteration: 50k
(h) It
50k

ti

3

2

1

0

0

5

10

15

20

25

(f) Iteration: 20k

Class-level domain discrepancy loss
Sample-level domain discrepancy loss
Accuracy

0.8
0.75
0.7
0.65
0.6
0.55

35

30

50
Number of Iterations (       )
1k(cid:117)

40

45

(i) Accuracy & Losses vs. Iterations

55

60

65

70

Figure 3. (a)-(h): The t-SNE visualizations of features generated by TPN with the increase of the iteration on VisDA. (i): Accuracy &
Class-level and sample-level domain discrepancy losses with the increase of the iteration on VisDA (better viewed in color).

tion indistinguishable from the source one.

Confusion Matrix Visualization. Figure 2(c)-(f) show
the visualizations of confusion matrix for the classiﬁer
learnt by Source-only, JAN, our TPN and Train-on-target
on VisDA. Examining the confusion matrix of Source-only
reveals that the domain shift is relatively large and the ma-
jority of the confusion are observed between objects with
similar 3D structures, e.g., knife & skateboard (sktbrd) and
truck & car. Through domain adaptation by JAN and TPN,
the confusion is reduced for most classes. In particular, a-
mong all the 12 categories, TPN achieves higher accuracies
than JAN for 10 categories, demonstrating that the features
learnt by our TPN are more discriminative on target domain.
Convergence Analysis. To illustrate the convergence of
our TPN, we visualize the evolution of the embedded repre-
sentation of a subset on VisDA 2017 dataset (10k samples
for each domain) with t-SNE during training. Figure 3(a)-
(h) illustrate that the target classes are becoming increas-
ingly well discriminated by TPN source classiﬁer. Figure
3(i) further depicts that the accuracy constantly increases
(i.e., the noise of the pseudo labels ρ decreases) and the t-
wo adaptation losses decrease when iterating more steps.
Speciﬁcally, at the initial time, the ratio ρ of target exam-
ples with false pseudo labels is 44.7%, i.e., only 55.3% of
target samples are assigned with the correct labels. With

the increase of training iterations of our TPN, such noise of
pseudo labels ρ is gradually decreased and the ﬁnal accu-
racy will be boosted up to 80.4% after model convergence.
This again veriﬁes that minimizing class-level and sample-
level domain discrepancy will lead to better adaptation.

5. Conclusions

We have presented Transferrable Prototypical Networks
(TPN), which explores domain adaptation in an unsuper-
vised manner. Particularly, we study the problem from the
viewpoint of both general-purpose and task-speciﬁc adap-
tation. To verify our claim, we have devised the measure of
each adaptation in the framework of prototypical network-
s. The general-purpose adaptation is to push the prototype
of each class computed in each domain to be close in the
embedding space, resulting in invariant representation dis-
tribution across domains in general. The task-speciﬁc adap-
tation further takes the decisions of classiﬁers into account
when aligning feature distributions, which ideally leads to
domain-invariant representations. Experiments conducted
on the transfers across MNIST, USPS and SVHN dataset-
s validate our proposal and analysis. More remarkably, we
achieve new state-of-the-art performance of single model on
synthetic-to-real image transfer in VisDA 2017 challenge.

2246

(a) t-SNE: Source-only(b) t-SNE: TPN(c)  CM: Source-only(d) CM: JAN(e) CM: TPN(f) CM: Train-on-targetReferences

[1] Shai Ben-David,

John Blitzer, Koby Crammer, Alex
Kulesza, Fernando Pereira, and Jennifer Wortman Vaughan.
A theory of learning from different domains. Machine learn-
ing, 2010.

[2] Geoffrey French, Michal Mackiewicz, and Mark Fisher.

Self-ensembling for domain adaptation. In ICLR, 2018.

[3] Jerome Friedman, Trevor Hastie, and Robert Tibshirani. The
elements of statistical learning. Springer series in statistics
New York, 2001.

[4] Yaroslav Ganin and Victor Lempitsky. Unsupervised domain

adaptation by backpropagation. In ICML, 2015.

[5] Ian Goodfellow, Jean Pouget-Abadie, Mehdi Mirza, Bing X-
u, David Warde-Farley, Sherjil Ozair, Aaron Courville, and
Yoshua Bengio. Generative adversarial nets. In NIPS, 2014.
[6] Arthur Gretton, Karsten M Borgwardt, Malte J Rasch, Bern-
hard Sch¨olkopf, and Alexander Smola. A kernel two-sample
test. Journal of Machine Learning Research, 2012.

[7] Kaiming He, Xiangyu Zhang, Shaoqing Ren, and Jian Sun.
In CVPR,

Deep residual learning for image recognition.
2016.

[8] Yangqing Jia, Evan Shelhamer, Jeff Donahue, Sergey
Karayev, Jonathan Long, Ross Girshick, Sergio Guadarra-
ma, and Trevor Darrell. Caffe: Convolutional architecture
for fast feature embedding. In ACM MM, 2014.

[9] Diederik Kingma and Jimmy Ba. Adam: A method for s-

tochastic optimization. In ICLR, 2015.

[10] Yann LeCun, L´eon Bottou, Yoshua Bengio, and Patrick
Haffner. Gradient-based learning applied to document recog-
nition. Proceedings of the IEEE, 1998.

[11] Dong-Hyun Lee. Pseudo-label: The simple and efﬁcient
semi-supervised learning method for deep neural network-
s. In Workshop on Challenges in Representation Learning,
ICML, 2013.

[12] Tsung-Yi Lin, Michael Maire, Serge Belongie, James Hays,
Pietro Perona, Deva Ramanan, Piotr Doll´ar, and C Lawrence
Zitnick. Microsoft COCO: Common objects in context. In
ECCV, 2014.

[13] Ming-Yu Liu and Oncel Tuzel. Coupled generative adversar-

ial networks. In NIPS, 2016.

[14] Fuchen Long, Ting Yao, Qi Dai, Xinmei Tian, Jiebo Luo, and
Tao Mei. Deep domain adaptation hashing with adversarial
learning. In SIGIR, 2018.

[15] Mingsheng Long, Yue Cao, Jianmin Wang, and Michael Jor-
dan. Learning transferable features with deep adaptation net-
works. In ICML, 2015.

[16] Mingsheng Long, Jianmin Wang, and Michael I Jordan.
In

Deep transfer learning with joint adaptation networks.
ICML, 2017.

[17] Mingsheng Long, Han Zhu, Jianmin Wang, and Michael I
Jordan. Unsupervised domain adaptation with residual trans-
fer networks. In NIPS, 2016.

[18] Laurens Van Der Maaten and Geoffrey Hinton. Visualizing

data using t-SNE. JMLR, 2008.

[19] Yuval Netzer, Tao Wang, Adam Coates, Alessandro Bissac-
co, Bo Wu, and Andrew Y Ng. Reading digits in natural

images with unsupervised feature learning. In Workshop on
Deep Learning and Unsupervised Feature Learning, NIPS,
2011.

[20] Sinno Jialin Pan, James T Kwok, and Qiang Yang. Transfer

learning via dimensionality reduction. In AAAI, 2008.

[21] Xingchao Peng, Ben Usman, Neela Kaushik, Judy Hoffman,
Dequan Wang, and Kate Saenko. VisDA: The visual domain
adaptation challenge.
arXiv preprint arXiv:1710.06924,
2017.

[22] Esteban Real, Jonathon Shlens, Stefano Mazzocchi, Xin Pan,
and Vincent Vanhoucke. Youtube-boundingboxes: A large
high-precision human-annotated data set for object detection
in video. In CVPR, 2017.

[23] Olga Russakovsky, Jia Deng, Hao Su, Jonathan Krause, San-
jeev Satheesh, Sean Ma, Zhiheng Huang, Andrej Karpathy,
Aditya Khosla, Michael Bernstein, Alexander C. Berg, and
Li Fei-Fei. ImageNet Large Scale Visual Recognition Chal-
lenge. IJCV, 2015.

[24] Kuniaki Saito, Yoshitaka Ushiku, and Tatsuya Harada.
Asymmetric tri-training for unsupervised domain adaptation.
In ICML, 2017.

[25] Kuniaki Saito, Kohei Watanabe, Yoshitaka Ushiku, and Tat-
suya Harada. Maximum classiﬁer discrepancy for unsuper-
vised domain adaptation. In CVPR, 2018.

[26] Jake Snell, Kevin Swersky, and Richard Zemel. Prototypical

networks for few-shot learning. In NIPS, 2017.

[27] Baochen Sun, Jiashi Feng, and Kate Saenko. Return of frus-

tratingly easy domain adaptation. In AAAI, 2016.

[28] Antti Tarvainen and Harri Valpola. Mean teachers are better
role models: Weight-averaged consistency targets improve
semi-supervised deep learning results. In NIPS, 2017.

[29] Eric Tzeng, Judy Hoffman, Trevor Darrell, and Kate Saenko.
Simultaneous deep transfer across domains and tasks. In IC-
CV, 2015.

[30] Eric Tzeng, Judy Hoffman, Kate Saenko, and Trevor Darrel-
l. Adversarial discriminative domain adaptation. In CVPR,
2017.

[31] Eric Tzeng, Judy Hoffman, Ning Zhang, Kate Saenko, and
Trevor Darrell. Deep domain confusion: Maximizing for
domain invariance. arXiv preprint arXiv:1412.3474, 2014.

[32] Riccardo Volpi, Pietro Morerio, Silvio Savarese, and Vittorio
Murino. Adversarial feature augmentation for unsupervised
domain adaptation. In CVPR, 2018.

[33] Ting Yao, Chong-Wah Ngo, and Shiai Zhu. Predicting do-

main adaptivity: redo or recycle? In ACM MM, 2012.

[34] Ting Yao, Yingwei Pan, Chong-Wah Ngo, Houqiang Li, and
Tao Mei. Semi-supervised domain adaptation with subspace
learning for visual recognition. In CVPR, 2015.

[35] Yiheng Zhang, Zhaofan Qiu, Ting Yao, Dong Liu, and Tao
Mei. Fully convolutional adaptation networks for semantic
segmentation. In CVPR, 2018.

2247

