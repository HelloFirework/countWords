Deformable ConvNets v2: More Deformable, Better Results

Xizhou Zhu1

,

2 ∗ Han Hu2

Stephen Lin2

Jifeng Dai2

1University of Science and Technology of China

2Microsoft Research Asia
ezra0408@mail.ustc.edu.cn

{hanhu,stevelin,jifdai}@microsoft.com

Abstract

The superior performance of Deformable Convolutional
Networks arises from its ability to adapt to the geomet-
ric variations of objects. Through an examination of its
adaptive behavior, we observe that while the spatial sup-
port for its neural features conforms more closely than reg-
ular ConvNets to object structure, this support may never-
theless extend well beyond the region of interest, causing
features to be inﬂuenced by irrelevant image content. To
address this problem, we present a reformulation of De-
formable ConvNets that improves its ability to focus on per-
tinent image regions, through increased modeling power
and stronger training. The modeling power is enhanced
through a more comprehensive integration of deformable
convolution within the network, and by introducing a mod-
ulation mechanism that expands the scope of deformation
modeling. To effectively harness this enriched modeling ca-
pability, we guide network training via a proposed feature
mimicking scheme that helps the network to learn features
that reﬂect the object focus and classiﬁcation power of R-
CNN features. With the proposed contributions, this new
version of Deformable ConvNets yields signiﬁcant perfor-
mance gains over the original model and produces leading
results on the COCO benchmark for object detection and
instance segmentation.

1. Introduction

Geometric variations due to scale, pose, viewpoint and
part deformation present a major challenge in object recog-
nition and detection. The current state-of-the-art method
for addressing this issue is Deformable Convolutional Net-
works (DCNv1) [7], which introduces two modules that
aid CNNs in modeling such variations. One of these mod-
ules is deformable convolution, in which the grid sampling

∗This work is done when Xizhou Zhu is an intern at Microsoft Research

Asia.

locations of standard convolution are each offset by dis-
placements learned with respect to the preceding feature
maps. The other is deformable RoIpooling, where offsets
are learned for the bin positions in RoIpooling [15]. The
incorporation of these modules into a neural network gives
it the ability to adapt its feature representation to the conﬁg-
uration of an object, speciﬁcally by deforming its sampling
and pooling patterns to ﬁt the object’s structure. With this
approach, large improvements in object detection accuracy
are obtained.

Towards understanding Deformable ConvNets, the au-
thors visualized the induced changes in receptive ﬁeld, via
the arrangement of offset sampling positions in PASCAL
VOC images [10].
It is found that samples for an acti-
vation unit tend to cluster around the object on which it
lies. However, the coverage over an object is inexact, ex-
hibiting a spread of samples beyond the area of interest.
In a deeper analysis of spatial support using images from
the more challenging COCO dataset [28], we observe that
such behavior becomes more pronounced. These ﬁndings
suggest that greater potential exists for learning deformable
convolutions.

In this paper, we present a new version of Deformable
ConvNets, called Deformable ConvNets v2 (DCNv2), with
enhanced modeling power for learning deformable convo-
lutions. This increase in modeling capability comes in two
complementary forms. The ﬁrst is the expanded use of de-
formable convolution layers within the network. Equipping
more convolutional layers with offset learning capacity al-
lows DCNv2 to control sampling over a broader range of
feature levels. The second is a modulation mechanism in
the deformable convolution modules, where each sample
not only undergoes a learned offset, but is also modulated
by a learned feature amplitude. The network module is thus
given the ability to vary both the spatial distribution and the
relative inﬂuence of its samples.

To fully exploit the increased modeling capacity of
DCNv2, effective training is needed. Inspired by work on

19308

knowledge distillation in neural networks [1, 21], we make
use of a teacher network for this purpose, where the teacher
provides guidance during training. We speciﬁcally utilize
R-CNN [16] as the teacher. Since it is a network trained for
classiﬁcation on cropped image content, R-CNN learns fea-
tures unaffected by irrelevant information outside the region
of interest. To emulate this property, DCNv2 incorporates a
feature mimicking loss into its training, which favors learn-
ing of features consistent to those of R-CNN. In this way,
DCNv2 is given a strong training signal for its enhanced
deformable sampling.

With the proposed changes, the deformable modules re-
main lightweight and can easily be incorporated into ex-
isting network architectures. Speciﬁcally, we incorporate
DCNv2 into the Faster R-CNN [32] and Mask R-CNN [19]
systems, with a variety of backbone networks. Extensive
experiments on the COCO benchmark demonstrate the sig-
niﬁcant improvement of DCNv2 over DCNv1 for object de-
tection and instance segmentation. The code for DCNv2
will be released.

2. Analysis of Deformable ConvNet Behavior

2.1. Spatial Support Visualization

To better understand the behavior of Deformable Con-
vNets, we visualize the spatial support of network nodes by
their effective receptive ﬁelds [30], effective sampling lo-
cations, and error-bounded saliency regions. These three
modalities provide different and complementary perspec-
tives on the underlying image regions that contribute to a
node’s response.

Effective receptive ﬁelds Not all pixels within the receptive
ﬁeld of a network node contribute equally to its response.
The differences in these contributions are represented by an
effective receptive ﬁeld, whose values are calculated as the
gradient of the node response with respect to intensity per-
turbations of each image pixel [30]. We utilize the effective
receptive ﬁeld to examine the relative inﬂuence of individ-
ual pixels on a network node, but note that this measure does
not reﬂect the structured inﬂuence of full image regions.

Effective sampling / bin locations In [7], the sampling lo-
cations of (stacked) convolutional layers and the sampling
bins in RoIpooling layers are visualized for understanding
the behavior of Deformable ConvNets. However, the rela-
tive contributions of these sampling locations to the network
node are not revealed. We instead visualize effective sam-
pling locations that incorporate this information, computed
as the gradient of the network node with respect to the sam-
pling / bin locations, so as to understand their contribution
strength.

Error-bounded saliency regions The response of a net-
work node will not change if we remove image regions

that do not inﬂuence it, as demonstrated in recent research
on image saliency [40, 41, 12, 6]. Based on this property,
we can determine a node’s support region as the smallest
image region giving the same response as the full image,
within a small error bound. We refer to this as the error-
bounded saliency region, which can be found by progres-
sively masking parts of the image and computing the result-
ing node response, as described in more detail in the Ap-
pendix. The error-bounded saliency region facilitates com-
parison of support regions from different networks.

2.2. Spatial Support of Deformable ConvNets

We analyze the visual support regions of Deformable
ConvNets in object detection. The regular ConvNet we em-
ploy as a baseline consists of a Faster R-CNN + ResNet-
50 [20] object detector with aligned RoIpooling1 [19]. All
the convolutional layers in ResNet-50 are applied on the
whole input image. The effective stride in the conv5 stage is
reduced from 32 to 16 pixels to increase feature map reso-
lution. The RPN [32] head is added on top of the conv4 fea-
tures of ResNet-101. On top of the conv5 features we add
the Fast R-CNN head [15], which is composed of aligned
RoIpooling and two fully-connected (fc) layers, followed
by the classiﬁcation and bounding box regression branches.
We follow the procedure in [7] to turn the object detector
into its deformable counterpart. The three layers of 3 × 3
convolutions in the conv5 stage are replaced by deformable
convolution layers. Also, the aligned RoIpooling layer is
replaced by deformable RoIPooling. Both networks are
trained and visualized on the COCO benchmark. It is worth
mentioning that when the offset learning rate is set to zero,
the Deformable Faster R-CNN detector degenerates to reg-
ular Faster R-CNN with aligned RoIpooling.

Using the three visualization modalities, we examine the
spatial support of nodes in the last layer of the conv5 stage
in Figure 1 (a)∼(b). The sampling locations analyzed in [7]
are also shown. From these visualizations, we make the
following observations:

1. Regular ConvNets can model geometric variations to
some extent, as evidenced by the changes in spatial support
with respect to image content. Thanks to the strong repre-
sentation power of deep ConvNets, the network weights are
learned to accommodate some degree of geometric transfor-
mation.

2. By introducing deformable convolution, the network’s
ability to model geometric transformation is considerably
enhanced, even on the challenging COCO benchmark. The
spatial support adapts much more to image content, with
nodes on the foreground having support that covers the
whole object, while nodes on the background have ex-

1Aligned RoIpooling is called RoIAlign in [19]. We use the term
“aligned RoIpooling” in this paper to more clearly describe it in the context
of other related terms.

9309

high

low

high

low

(a) regular conv

(b) deformable conv@conv5 stage (DCNv1)

(c) modulated deformable conv@conv3∼5 stages (DCNv2)

Figure 1. Spatial support of nodes in the last layer of the conv5
stage in a regular ConvNet, DCNv1 and DCNv2. The regular
ConvNet baseline is Faster R-CNN + ResNet-50.
In each sub-
ﬁgure, the effective sampling locations, effective receptive ﬁeld,
and error-bounded saliency regions are shown from the top to the
bottom rows. Effective sampling locations are omitted in (c) as
they are similar to those in (b), providing limited additional infor-
mation. The visualized nodes (green points) are on a small object
(left), a large object (middle), and the background (right).

panded support that encompasses greater context. However,
the range of spatial support may be inexact, with the effec-
tive receptive ﬁeld and error-bounded saliency region of a
foreground node including background areas irrelevant for
detection.

3. The three presented types of spatial support visual-
izations are more informative than the sampling locations
used in [7]. This can be seen, for example, with regu-
lar ConvNets, which have ﬁxed sampling locations along a
grid, but actually adapt its effective spatial support via net-
work weights. The same is true for Deformable ConvNets,
whose predictions are jointly affected by learned offsets and
network weights. Examining sampling locations alone, as
done in [7], can result in misleading conclusions about De-
formable ConvNets.

Figure 2 (a)∼(b) display the spatial support of the 2fc
node in the per-RoI detection head, which is directly fol-
lowed by the classiﬁcation and the bounding box regres-
sion branches. The visualization of effective bin locations
suggests that bins on the object foreground generally re-
ceive larger gradients from the classiﬁcation branch, and
thus exert greater inﬂuence on prediction. This observa-
tion holds for both aligned RoIpooling and Deformable
RoIpooling. In Deformable RoIpooling, a much larger pro-
portion of bins cover the object foreground than in aligned
RoIpooling, thanks to the introduction of learnable bin off-
sets. Thus, more information from relevant bins is avail-
able for the downstream Fast R-CNN head. Meanwhile, the
error-bounded saliency regions in both aligned RoIpooling
and Deformable RoIpooling are not fully focused on the ob-
ject foreground, which suggests that image content outside
of the RoI affects the prediction result. According to a re-
cent study [5], such feature interference could be harmful
for detection.

While it is evident that Deformable ConvNets have
markedly improved ability to adapt to geometric variation
in comparison to regular ConvNets, it can also be seen that
their spatial support may extend beyond the region of inter-
est. We thus seek to upgrade Deformable ConvNets so that
they can better focus on pertinent image content and deliver
greater detection accuracy.

3. More Deformable ConvNets

To improve the network’s ability to adapt to geometric
variations, we present changes to boost its modeling power
and to help it take advantage of this increased capability.

3.1. Stacking More Deformable Conv Layers

Encouraged by the observation that Deformable Con-
vNets can effectively model geometric transformation on
challenging benchmarks, we boldly replace more regular
conv layers by their deformable counterparts. We expect
that by stacking more deformable conv layers, the geomet-
ric transformation modeling capability of the entire network
can be further strengthened.

In this paper, deformable convolutions are applied in all
the 3 × 3 conv layers in stages conv3, conv4, and conv5 in

9310

(a) aligned RoIpooling, with deformable conv@conv5 stage

(b) deformable RoIpooling, with deformable conv@conv5 stage (DCNv1)

(c) modulated deformable RoIpooling, with modulated deformable
conv@conv3∼5 stages

(d) with R-CNN feature mimicking on setting (c) (DCNv2)

Figure 2. Spatial support of the 2fc node in the per-RoI detection
head, directly followed by the classiﬁcation and the bounding box re-
gression branches. Visualization is conducted on a regular ConvNet,
DCNv1 and DCNv2. The regular ConvNet baseline is Faster R-CNN
+ ResNet-50. In each subﬁgure, the effective bin locations, effective
receptive ﬁelds, and error-bounded saliency regions are shown from
the top to the bottom rows, except for (c)∼(e) where the effective bin
locations are omitted as they provide little additional understanding
over those in (a)∼(b). The input RoIs (green boxes) are on a small
object (left), a large object (middle), and the background (right).

(e) with R-CNN feature mimicking in regular ConvNet

ResNet-50. Thus, there are 12 layers of deformable con-
volution in the network.
In contrast, just three layers of
deformable convolution are used in [7], all in the conv5
stage. It is observed in [7] that performance saturates when
stacking more than three layers for the relatively simple and
small-scale PASCAL VOC benchmark. Also, misleading
offset visualizations on COCO may have hindered further
exploration on more challenging benchmarks.
In experi-
ments, we observe that utilizing deformable layers in the
conv3-conv5 stages achieves the best tradeoff between ac-
curacy and efﬁciency for object detection on COCO. See
Section 5.2 for details.

3.2. Modulated Deformable Modules

To further strengthen the capability of Deformable Con-
vNets in manipulating spatial support regions, a modulation
mechanism is introduced. With it, the Deformable Con-

vNets modules can not only adjust offsets in perceiving in-
put features, but also modulate the input feature amplitudes
from different spatial locations / bins. In the extreme case, a
module can decide not to perceive signals from a particular
location / bin by setting its feature amplitude to zero. Con-
sequently, image content from the corresponding spatial lo-
cation will have considerably reduced or no impact on the
module output. Thus, the modulation mechanism provides
the network module another dimension of freedom to adjust
its spatial support regions.

Given a convolutional kernel of K sampling locations,
let wk and pk denote the weight and pre-speciﬁed offset for
the k-th location, respectively. For example, K = 9 and
pk ∈ {(−1, −1), (−1, 0), . . . , (1, 1)} deﬁnes a 3 × 3 con-
volutional kernel of dilation 1. Let x(p) and y(p) denote the
features at location p from the input feature maps x and out-
put feature maps y, respectively. The modulated deformable

9311

highlowhighlowconvolution can then be expressed as

y(p) =

K

X

k=1

wk · x(p + pk + ∆pk) · ∆mk,

(1)

where ∆pk and ∆mk are the learnable offset and modula-
tion scalar for the k-th location, respectively. The modu-
lation scalar ∆mk lies in the range [0, 1], while ∆pk is a
real number with unconstrained range. As p + pk + ∆pk is
fractional, bilinear interpolation is applied as in [7] in com-
puting x(p + pk + ∆pk). Both ∆pk and ∆mk are obtained
via a separate convolution layer applied over the same in-
put feature maps x. This convolutional layer is of the same
spatial resolution and dilation as the current convolutional
layer. The output is of 3K channels, where the ﬁrst 2K
channels correspond to the learned offsets {∆pk}K
k=1, and
the remaining K channels are further fed to a sigmoid layer
to obtain the modulation scalars {∆mk}K
k=1. The kernel
weights in this separate convolution layer are initialized to
zero. Thus, the initial values of ∆pk and ∆mk are 0 and
0.5, respectively. The learning rates of the added conv lay-
ers for offset and modulation learning are set to 0.1 times
those of the existing layers.

The design of modulated deformable RoIpooling is simi-
lar. Given an input RoI, RoIpooling divides it into K spatial
bins (e.g. 7 × 7). Within each bin, sampling grids of even
spatial intervals are applied (e.g. 2 × 2). The sampled val-
ues on the grids are averaged to compute the bin output.
Let ∆pk and ∆mk be the learnable offset and modulation
scalar for the k-th bin. The output binning feature y(k) is
computed as

y(k) =

nk

X

j=1

x(pkj + ∆pk) · ∆mk/nk,

(2)

where pkj is the sampling location for the j-th grid cell
in the k-th bin, and nk denotes the number of sampled
grid cells. Bilinear interpolation is applied to obtain fea-
tures x(pkj + ∆pk). The values of ∆pk and ∆mk are
produced by a sibling branch on the input feature maps.
In this branch, RoIpooling generates features on the RoI,
followed by two fc layers with 3K output channels (the
feature dimension between the two fc layers is 1024-D).
The ﬁrst 2K channels are the normalized learnable offsets,
where element-wise multiplications with the RoI’s width
and height are computed to obtain {∆pk}K
k=1. The remain-
ing K channels are normalized by a sigmoid layer to pro-
duce {∆mk}K
k=1. The fc layer weights are also initialized
to zero. The learning rates of the added fc layers for offset
learning are the same as those of the existing layers.

3.3. R CNN Feature Mimicking

As observed in Figure 2, the error-bounded saliency re-
gion of a per-RoI classiﬁcation node can stretch beyond the

RoI for both regular ConvNets and Deformable ConvNets.
Image content outside of the RoI may thus affect the ex-
tracted features and consequently degrade the ﬁnal results
of object detection.

In [5], the authors ﬁnd redundant context to be a plau-
sible source of detection error for Faster R-CNN. Together
with other motivations (e.g., to share fewer features between
the classiﬁcation and bounding box regression branches),
the authors propose to combine the classiﬁcation scores of
Faster R-CNN and R-CNN to obtain the ﬁnal detection
score. Since R-CNN classiﬁcation scores are focused on
cropped image content from the input RoI, incorporating
them would help to alleviate the redundant context problem
and improve detection accuracy. However, the combined
system is slow because both the Faster-RCNN and R-CNN
branches need to be applied in both training and inference.

Meanwhile, Deformable ConvNets are powerful in ad-
justing spatial support regions. For Deformable ConvNets
v2 in particular,
the modulated deformable RoIpooling
module could simply set the modulation scalars of bins in
a way that excludes redundant context. However, our ex-
periments in Section 5.3 show that even with modulated de-
formable modules, such representations cannot be learned
well through the standard Faster R-CNN training procedure.
We suspect that this is because the conventional Faster R-
CNN training loss cannot effectively drive the learning of
such representations. Additional guidance is needed to steer
the training.

Motivated by recent work on feature mimicking [1, 21,
26], we incorporate a feature mimic loss on the per-RoI fea-
tures of Deformable Faster R-CNN to force them to be simi-
lar to R-CNN features extracted from cropped images. This
auxiliary training objective is intended to drive Deformable
Faster R-CNN to learn more “focused” feature representa-
tions like R-CNN. We note that, based on the visualized
spatial support regions in Figure 2, a focused feature repre-
sentation may well not be optimal for negative RoIs on the
image background. For background areas, more context in-
formation may need to be considered so as not to produce
false positive detections. Thus, the feature mimic loss is en-
forced only on positive RoIs that sufﬁciently overlap with
ground-truth objects.

The network architecture for training Deformable Faster
R-CNN is presented in Figure 3. In addition to the Faster
R-CNN network, an additional R-CNN branch is added for
feature mimicking. Given an RoI b for feature mimicking,
the image patch corresponding to it is cropped and resized
to 224 × 224 pixels. In the R-CNN branch, the backbone
network operates on the resized image patch and produces
feature maps of 14 × 14 spatial resolution. A (modulated)
deformable RoIpooling layer is applied on top of the feature
maps, where the input RoI covers the whole resized image
patch (top-left corner at (0, 0), and height and width are 224

9312

pixels). After that, 2 fc layers of 1024-D are applied, pro-
ducing an R-CNN feature representation for the input image
patch, denoted by fRCNN(b). A (C +1)-way Softmax classi-
ﬁer follows for classiﬁcation, where C denotes the number
of foreground categories, plus one for background. The fea-
ture mimic loss is enforced between the R-CNN feature rep-
resentation fRCNN(b) and the counterpart in Faster R-CNN,
fFRCNN(b), which is also 1024-D and is produced by the 2
fc layers in the Fast R-CNN head. The feature mimic loss
is deﬁned on the cosine similarity between fRCNN(b) and
fFRCNN(b), computed as

Lmimic = X

b∈Ω

[1 − cos(fRCNN(b), fFRCNN(b))],

(3)

where Ω denotes the set of RoIs sampled for feature mimic
training.
In the SGD training, given an input image, 32
positive region proposals generated by RPN are randomly
sampled into Ω. A cross-entropy classiﬁcation loss is en-
forced on the R-CNN classiﬁcation head, also computed on
the RoIs in Ω. Network training is driven by the feature
mimic loss and the R-CNN classiﬁcation loss, together with
the original loss terms in Faster R-CNN. The loss weights of
the two newly introduced loss terms are 0.1 times those of
the original Faster R-CNN loss terms. The network parame-
ters between the corresponding modules in the R-CNN and
the Faster R-CNN branches are shared, including the back-
bone network, (modulated) deformable RoIpooling, and the
2 fc heads (the classiﬁcation heads in the two branches are
unshared).
In inference, only the Faster R-CNN network
is applied on the test images, without the auxiliary R-CNN
branch. Thus, no additional computation is introduced by
R-CNN feature mimicking in inference.

4. Related Work

Deformation Modeling is a long-standing problem in com-
puter vision, and there has been tremendous effort in de-
signing translation-invariant features. Prior to the deep
learning era, notable works include scale-invariant fea-
ture transform (SIFT) [29], oriented FAST and rotated
BRIEF (ORB) [33], and deformable part-based models
(DPM) [11]. Such works are limited by the inferior rep-
resentation power of handcrafted features and the con-
strained family of geometric transformations they address
(e.g., afﬁne transformations). Spatial transformer networks
(STN) [24] is the ﬁrst work on learning translation-invariant
features for deep CNNs.
It learns to apply global afﬁne
transformations to warp feature maps, but such transfor-
mations inadequately model the more complex geometric
variations encountered in many vision tasks.
Instead of
performing global parametric transformations and feature
warping, Deformable ConvNets sample feature maps in a
local and dense manner, via learnable offsets in the pro-
posed deformable convolution and deformable RoIpooling

Figure 3. Network training with R-CNN feature mimicking.

modules. Deformable ConvNets is the ﬁrst work to effec-
tively model geometric transformations in complex vision
tasks (e.g., object detection and semantic segmentation) on
challenging benchmarks.

Our work extends Deformable ConvNets by enhancing
its modeling power and facilitating network training. This
new version of Deformable ConvNets yields signiﬁcant per-
formance gains over the original model.

Relation Networks and Attention Modules are ﬁrst pro-
posed in natural language processing [13, 14, 3, 35] and
physical system modeling [2, 37, 22, 34, 9, 31]. An atten-
tion / relation module effects an individual element (e.g., a
word in a sentence) by aggregating features from a set of
elements (e.g., all the words in the sentence), where the ag-
gregation weights are usually deﬁned on feature similarities
among the elements. They are powerful in capturing long-
range dependencies and contextual information in these
tasks. Recently, the concurrent works of [23] and [36] suc-
cessfully extend relation networks and attention modules to
the image domain, for modeling long-range object-object
and pixel-pixel relations, respectively. In [18], a learnable
region feature extractor is proposed, unifying the previous
region feature extraction modules from the pixel-object re-
lation perspective. A common issue with such approaches is
that the aggregation weights and the aggregation operation
need to be computed on the elements in a pairwise fashion,
incurring heavy computation that is quadratic to the number
of elements (e.g., all the pixels in an image). Our developed
approach can be perceived as a special attention mechanism
where only a sparse set of elements have non-zero aggrega-
tion weights (e.g., 3 × 3 pixels from among all the image
pixels). The attended elements are speciﬁed by the learn-

9313

(Modulated) Deformable ConvolutionsRPNRegionProposalsCrop& Resize(Modulated) Deformable RoIpooling(Modulated) Deformable Convolutions(Modulated) Deformable RoIpoolingWholeImage Regions1024-Dfully-connected1024-Dfully-connectedClassificationBounding-Box Regression1024-Dfully-connected1024-Dfully-connectedClassificationFeatureMimicking224x224able offsets, and the aggregation weights are controlled by
the modulation mechanism. The computational overhead is
just linear to the number of elements, which is negligible
compared to that of the entire network (See Table 1).

Spatial Support Manipulation. For atrous convolution,
the spatial support of convolutional layers has been en-
larged by padding zeros in the convolutional kernels [4].
The padding parameters are handpicked and predetermined.
In active convolution [25], which is contemporary with De-
formable ConvNets, convolutional kernel offsets are learned
via back-propagation. But the offsets are static model pa-
rameters ﬁxed after training and shared over different spa-
tial locations.
In a multi-path network for object detec-
tion [39], multiple RoIpooling layers are employed for each
input RoI to better exploit multi-scale and context informa-
tion. The multiple RoIpooling layers are centered at the
input RoI, and are of different spatial scales. A common
issue with these approaches is that the spatial support is
controlled by static parameters and does not adapt to image
content.

Effective Receptive Field and Salient Region. Towards
better interpreting how a deep network functions, signiﬁ-
cant progress has been made in understanding which im-
age regions contribute most to network prediction. Re-
cent works on effective receptive ﬁelds [30] and salient re-
gions [40, 41, 12, 6] reveal that only a small proportion of
pixels in the theoretical receptive ﬁeld contribute signiﬁ-
cantly to the ﬁnal network prediction. The effective support
region is controlled by the joint effect of network weights
and sampling locations. Here we exploit the developed
techniques to better understand the network behavior of De-
formable ConvNets. The resulting observations guide and
motivate us to improve over the original model.

Network Mimicking and Distillation are recently intro-
duced techniques for model acceleration and compression.
Given a large teacher model, a compact student model is
trained by mimicking the teacher model output or feature
responses on training images [1, 21, 26]. The hope is that
the compact model can be better trained by distilling knowl-
edge from the large model. Here we employ a feature mimic
loss to help the network learn features that reﬂect the ob-
ject focus and classiﬁcation power of R-CNN features. Im-
proved accuracy is obtained and the visualized spatial sup-
ports corroborate this approach.

5. Experiments

5.1. Experiment Settings

Our ablation experiments are conducted on models
trained on the 118k images of the COCO 2017 train set.
Evaluation is done on the 5k images of the COCO 2017
validation set. We also evaluate performance on the 20k

images of the COCO 2017 test-dev set, with models trained
on the union of the COCO 2017 train and validation sets.
The standard mean average-precision scores at different box
and mask IoUs are used for measuring object detection and
instance segmentation accuracy, respectively.

Faster R-CNN and Mask R-CNN are chosen as the base-
ImageNet [8] pre-trained ResNet-50 is uti-
line systems.
lized as the backbone. The implementation of Faster R-
CNN is the same as in Section 3.3. For Mask R-CNN, we
follow the implementation in [19], thus FPN [27] is used.
To turn the networks into their deformable counterparts, the
last set of 3 × 3 regular conv layers (close to the output
in the bottom-up computation) are replaced by (modulated)
deformable conv layers. Aligned RoIpooling is replaced by
(modulated) deformable RoIpooling. Specially for Mask
R-CNN, the two aligned RoIpooling layers with 7 × 7 and
14 × 14 bins are replaced by two (modulated) deformable
RoIpooling layers with the same bin numbers. In R-CNN
feature mimicking, the feature mimic loss is enforced on the
RoI head for classiﬁcation only (excluding that for mask es-
timation). For both systems, the choice of hyper-parameters
follows the latest Detectron [17] code base, which is brieﬂy
presented here. In both training and inference, images are
resized so that the shorter side is 800 pixels, and anchors
of 5 scales and 3 aspect ratios are utilized. 2k and 1k re-
gion proposals are generated at a non-maximum suppres-
sion threshold of 0.7 at training and inference respectively.
In SGD training, 256 anchor boxes (of positive-negative ra-
tio 1:1) and 512 region proposals (of positive-negative ratio
1:3) are sampled for backpropagating their gradients.
In
our experiments, the networks are trained on 8 GPUs with 2
images per GPU for 16 epochs. The learning rate is initial-
ized to 0.02 and is divided by 10 at the 10-th and the 14-th
epochs. The weight decay and the momentum parameters
are set to 10−4 and 0.9, respectively.

5.2. Enriched Deformation Modeling

The effects of enriched deformation modeling are exam-
ined from ablations shown in Table 1. The baseline with
regular CNN modules obtains an APbbox score of 35.6% for
Faster R-CNN, and APbbox and APmask scores of 37.8% and
33.4% respectively for Mask R-CNN. This strong baseline
matches the results of the latest implementation in Detec-
tron. To obtain a DCNv1 baseline, we follow the original
Deformable ConvNets paper by replacing the last three lay-
ers of 3 × 3 convolution in the conv5 stage and the aligned
RoIpooling layer by their deformable counterparts. This
DCNv1 baseline achieves an APbbox score of 38.2% for
Faster R-CNN, and APbbox and APmask scores of 40.3% and
35.0% respectively for Mask R-CNN. The deformable mod-
ules considerably improve accuracy as observed in [7].

By replacing more 3 × 3 regular conv layers by their
deformable counterparts, the accuracy of both Faster R-

9314

method

setting

baseline

enriched

deformation

regular (RoIpooling)
regular (aligned RoIpooling)
dconv@c5 + dpool (DCNv1)
dconv@c5
dconv@c4∼c5
dconv@c3∼c5
dconv@c3∼c5 + dpool
mdconv@c3∼c5 + mdpool

S

APbbox APbbox
13.6
32.8
18.2
35.6
19.1
38.2
37.6
19.3
19.9
39.2
21.0
39.5
21.1
40.0
40.8
21.3

L

Faster R-CNN
APbbox
APbbox
M
48.7
37.2
48.7
40.3
54.0
42.2
41.4
52.6
55.5
43.4
55.6
43.5
56.3
44.6
45.0
58.5

Mask R-CNN

-

-

-

-

param FLOP APbbox APmask param FLOP
51.3M 196.8G
51.3M 196.8G 37.8
52.7M 198.9G 40.3
51.5M 197.7G 39.9
51.7M 198.7G 41.2
51.8M 200.0G 41.5
53.0M 201.2G 41.8
65.5M 214.7G 42.7

39.5M 303.5G
40.9M 304.9G
39.8M 303.7G
40.0M 304.7G
40.1M 306.0G
41.3M 307.2G
53.8M 320.3G

33.4
35.0
34.9
36.1
36.4
36.4
37.0

Table 1. Ablation study on enriched deformation modeling. In the setting column, “(m)dconv” and “(m)dpool” stand for (modulated)
deformable convolution and (modulated) deformable RoIpooling, respectively. Also, “dconv@c3∼c5” stands for applying deformable
conv layers at stages conv3∼conv5, for example. Results are reported on the COCO 2017 validation set.

CNN and Mask R-CNN steadily improve, with gains be-
tween 1.5% and 2.0% for APbbox and APmask scores when
the conv layers in conv3-conv5 are replaced. No additional
improvement is observed on the COCO benchmark by fur-
ther replacing the regular conv layers in the conv2 stage.
By upgrading the deformable modules to modulated de-
formable modules, we obtain further gains between 0.6%
and 1.0% in APbbox and APmask scores. In total, enriching
the deformation modeling capability yields a 40.8% APbbox
score on Faster R-CNN, which is 2.6% higher than that of
the DCNv1 baseline. On Mask R-CNN, 42.7% APbbox and
37.0% APmask scores are obtained with the enriched defor-
mation modeling, which are respectively 2.4% and 2.0%
higher than those of the DCNv1 baseline. Note that the
added parameters and FLOPs for enriching the deformation
modeling are minor in relation to the overall networks.

Shown in Figure 1 (b)∼(c), the spatial support of the
enriched deformable modeling exhibits better adaptation to
image content compared to that of DCNv1.

5.3. R CNN Feature Mimicking

Ablations of the design choices in R-CNN feature mim-
icking are shown in Table 2. With the enriched deformation
modeling, R-CNN feature mimicking further improves the
APbbox and APmask scores by about 1% to 1.6% in both the
Faster R-CNN and Mask R-CNN systems. Mimicking fea-
tures of positive boxes on the object foreground is found to
be particularly effective, and the results when mimicking all
the boxes or just negative boxes are much lower. As shown
in Figure 2 (c)∼(d), feature mimicking can help the net-
work features better focus on the object foreground, which
is beneﬁcial for positive boxes. For the negative boxes, the
network tends to exploit more context information (see Fig-
ure 2), where feature mimicking would not be helpful.

We also apply R-CNN feature mimicking to regular Con-
vNets without any deformable layers. Almost no accuracy
gains are observed. The visualized spatial support regions
are shown in Figure 2 (e), which are not focused on the ob-
ject foreground even with the auxiliary mimic loss. This
is likely because it is beyond the representation capability

setting

mdconv3∼5 +

mdpool

regular

None

mimic

regions to

Mask
R-CNN

Faster
R-CNN
APbbox APbbox APmask
37.0
40.8
37.1
FG & BG 41.3
BG Only
41.1
37.1
38.1
42.4
FG Only
33.4
35.6
35.8
33.5

42.7
42.9
42.7
43.9
37.8
37.9

FG Only

None

Table 2. Ablation study on R-CNN feature mimicking. Results are
reported on the COCO 2017 validation set.

backbone

method

ResNet-50

ResNet-101

ResNext-101

regular
DCN v1
DCN v2
regular
DCN v1
DCN v2
regular
DCN v1
DCN v2

Mask
R-CNN

Faster
R-CNN
APbbox APbbox APmask
33.4
36.0
35.2
38.5
38.0
42.4
35.2
39.1
41.1
36.8
39.3
44.0
36.3
40.0
37.4
41.5
44.6
40.1

38.2
40.6
44.1
40.8
42.6
45.4
41.8
43.3
46.3

Table 3. Results of DCNv2, DCNv1 and regular ConvNets on var-
ious backbones on the COCO 2017 test-dev set.

of regular ConvNets to focus features on the object fore-
ground, and thus this cannot be learned.

5.4. Application on Stronger Backbones

Results on stronger backbones, by replacing ResNet-50
with ResNet-101 and ResNext-101 [38], are presented in
Table 3. For the entries of DCNv1, the regular 3 × 3
conv layers in the conv5 stage are replaced by the de-
formable counterpart, and aligned RoIpooling is replaced
by deformable RoIpooling. For the DCNv2 entries, all the
3 × 3 conv layers in the conv3-conv5 stages are of mod-
ulated deformable convolution, and modulated deformable
RoIpooling is used instead, with supervision from the R-
CNN feature mimic loss. DCNv2 is found to outperform
regular ConvNet and DCNv1 considerably on all the net-
work backbones.

9315

References

[1] J. Ba and R. Caruana. Do deep nets really need to be deep?

In NIPS, 2014. 2, 5, 7

[2] P. Battaglia, R. Pascanu, M. Lai, D. J. Rezende, et al.

In-
teraction networks for learning about objects, relations and
physics. In NIPS, 2016. 6

[3] D. Britz, A. Goldie, M.-T. Luong, and Q. Le. Massive
In

exploration of neural machine translation architectures.
EMNLP, 2017. 6

[4] L.-C. Chen, G. Papandreou, I. Kokkinos, K. Murphy, and
A. L. Yuille. DeepLab: Semantic image segmentation with
deep convolutional nets, atrous convolution, and fully con-
nected crfs. TPAMI, 2018. 7

[5] B. Cheng, Y. Wei, H. Shi, R. Feris, J. Xiong, and T. Huang.
Revisiting rcnn: On awakening the classiﬁcation power of
faster rcnn. In ECCV, 2018. 3, 5

[6] P. Dabkowski and Y. Gal. Real time image saliency for black

box classiﬁers. In NIPS, 2017. 2, 7

[7] J. Dai, H. Qi, Y. Xiong, Y. Li, G. Zhang, H. Hu, and Y. Wei.
Deformable convolutional networks. In ICCV, 2017. 1, 2, 3,
4, 5, 7

[8] J. Deng, W. Dong, R. Socher, L.-J. Li, K. Li, and L. Fei-
Fei. ImageNet: A large-scale hierarchical image database.
In CVPR, 2009. 7

[9] M. Denil, S. G. Colmenarejo, S. Cabi, D. Saxton, and
arXiv preprint

Programmable agents.

N. de Freitas.
arXiv:1706.06383, 2017. 6

[21] G. Hinton, O. Vinyals, and J. Dean. Distilling the knowledge

in a neural network. STAT, 2015. 2, 5, 7

[22] Y. Hoshen. Vain: Attentional multi-agent predictive model-

ing. In NIPS, 2017. 6

[23] H. Hu, J. Gu, Z. Zhang, J. Dai, and Y. Wei. Relation networks

for object detection. In CVPR, 2018. 6

[24] M.

Jaderberg, K. Simonyan, A. Zisserman,
transformer networks.

Spatial

and
In

K. Kavukcuoglu.
NIPS, 2015. 6

[25] Y. Jeon and J. Kim. Active convolution: Learning the shape

of convolution for image classiﬁcation. In CVPR, 2017. 7

[26] Q. Li, S. Jin, and J. Yan. Mimicking very efﬁcient network

for object detection. In CVPR, 2017. 5, 7

[27] T.-Y. Lin, P. Doll´ar, R. Girshick, K. He, B. Hariharan, and
S. Belongie. Feature pyramid networks for object detection.
In CVPR, 2017. 7

[28] T.-Y. Lin, M. Maire, S. Belongie, J. Hays, P. Perona, D. Ra-
manan, P. Doll´ar, and C. L. Zitnick. Microsoft coco: Com-
mon objects in context. In European conference on computer
vision, pages 740–755. Springer, 2014. 1

[29] D. G. Lowe. Object recognition from local scale-invariant

features. In ICCV, 1999. 6

[30] W. Luo, Y. Li, R. Urtasun, and R. Zemel. Understanding
the effective receptive ﬁeld in deep convolutional neural net-
works. arXiv preprint arXiv:1701.04128, 2017. 2, 7

[31] D. Raposo, A. Santoro, D. Barrett, R. Pascanu, T. Lillicrap,
and P. Battaglia. Discovering objects and their relations from
entangled scene representations. In ICLR, 2017. 6

[10] M. Everingham, L. Van Gool, C. K. Williams, J. Winn, and
A. Zisserman. The PASCAL Visual Object Classes (VOC)
Challenge. IJCV, 2010. 1

[32] S. Ren, K. He, R. Girshick, and J. Sun. Faster R-CNN: To-
wards real-time object detection with region proposal net-
works. In NIPS, 2015. 2

[11] P. F. Felzenszwalb, R. B. Girshick, D. McAllester, and D. Ra-
manan. Object detection with discriminatively trained part-
based models. TPAMI, 2010. 6

[12] R. C. Fong and A. Vedaldi.

Interpretable explanations of
black boxes by meaningful perturbation. In ICCV, 2017. 2,
7

[13] J. Gehring, M. Auli, D. Grangier, and Y. N. Dauphin. A
convolutional encoder model for neural machine translation.
In ACL, 2017. 6

[14] J. Gehring, M. Auli, D. Grangier, D. Yarats, and Y. N.
Dauphin. Convolutional sequence to sequence learning.
arXiv preprint arXiv:1705.03122, 2017. 6

[15] R. Girshick. Fast R-CNN. In ICCV, 2015. 1, 2

[16] R. Girshick, J. Donahue, T. Darrell, and J. Malik. Rich fea-
ture hierarchies for accurate object detection and semantic
segmentation. In CVPR, 2014. 2

[17] R. Girshick,
and K. He.
facebookresearch/detectron, 2018. 7

I. Radosavovic, G. Gkioxari, P. Doll´ar,
https://github.com/

Detectron.

[18] J. Gu, H. Hu, L. Wang, Y. Wei, and J. Dai. Learning region

features for object detection. In ECCV, 2018. 6

[19] K. He, G. Gkioxari, P. Doll´ar, and R. Girshick. Mask r-cnn.

In ICCV, 2017. 2, 7

[20] K. He, X. Zhang, S. Ren, and J. Sun. Deep residual learning

for image recognition. In CVPR, 2016. 2

[33] E. Rublee, V. Rabaud, K. Konolige, and G. Bradski. Orb: an

efﬁcient alternative to sift or surf. In ICCV, 2011. 6

[34] A. Santoro, D. Raposo, D. G. Barrett, M. Malinowski,
R. Pascanu, P. Battaglia, and T. Lillicrap. A simple neural
network module for relational reasoning. In NIPS, 2017. 6

[35] A. Vaswani, N. Shazeer, N. Parmar, J. Uszkoreit, L. Jones,
A. N. Gomez, Ł. Kaiser, and I. Polosukhin. Attention is all
you need. In NIPS, 2017. 6

[36] X. Wang, R. Girshick, A. Gupta, and K. He. Non-local neural

networks. In CVPR, 2018. 6

[37] N. Watters, D. Zoran, T. Weber, P. Battaglia, R. Pascanu, and
A. Tacchetti. Visual interaction networks. In NIPS, 2017. 6
[38] S. Xie, R. Girshick, P. Doll´ar, Z. Tu, and K. He. Aggregated
residual transformations for deep neural networks. In CVPR,
2017. 8

[39] S. Zagoruyko, A. Lerer, T.-Y. Lin, P. H. Pinheiro, S. Gross,
S. Chintala, and P. Dollar. A multipath network for object
detection. In BMVC, 2016. 7

[40] B. Zhou, A. Khosla, A. Lapedriza, A. Oliva, and A. Tor-
ralba. Learning deep features for discriminative localization.
In CVPR, 2016. 2, 7

[41] L. M. Zintgraf, T. S. Cohen, T. Adel, and M. Welling. Visu-
alizing deep neural network decisions: Prediction difference
analysis. In ICLR, 2017. 2, 7

9316

