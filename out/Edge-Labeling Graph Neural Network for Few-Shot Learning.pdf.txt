Edge-Labeling Graph Neural Network for Few-shot Learning

Jongmin Kim∗1,3, Taesup Kim2,3, Sungwoong Kim3, and Chang D.Yoo1

1Korea Advanced Institute of Science and Technology

2MILA, Universit´e de Montr´eal

3Kakao Brain

Abstract

In this paper, we propose a novel edge-labeling graph
neural network (EGNN), which adapts a deep neural net-
work on the edge-labeling graph, for few-shot learning.
The previous graph neural network (GNN) approaches in
few-shot learning have been based on the node-labeling
framework, which implicitly models the intra-cluster sim-
ilarity and the inter-cluster dissimilarity. In contrast, the
proposed EGNN learns to predict the edge-labels rather
than the node-labels on the graph that enables the evolution
of an explicit clustering by iteratively updating the edge-
labels with direct exploitation of both intra-cluster similar-
ity and the inter-cluster dissimilarity. It is also well suited
for performing on various numbers of classes without re-
training, and can be easily extended to perform a transduc-
tive inference. The parameters of the EGNN are learned
by episodic training with an edge-labeling loss to obtain a
well-generalizable model for unseen low-data problem. On
both of the supervised and semi-supervised few-shot image
classiﬁcation tasks with two benchmark datasets, the pro-
posed EGNN signiﬁcantly improves the performances over
the existing GNNs.

1. Introduction

A lot of interest

in meta-learning [1] has been re-
cently arisen in various areas including especially task-
generalization problems such as few-shot learning [2, 3, 4,
5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], learn-to-learn [16, 17,
18], non-stationary reinforcement learning[19, 20, 21], and
continual learning [22, 23]. Among these meta-learning
problems, few-shot leaning aims to automatically and ef-
ﬁciently solve new tasks with few labeled data based on
knowledge obtained from previous experiences. This is in

∗Work done during an internship at Kakao Brain. Correspondence to

kimjm0309@gmail.com

Figure 1: Alternative node and edge feature update in
EGNN with edge-labeling for few-shot learning

contrast to traditional (deep) learning methods that highly
rely on large amounts of labeled data and cumbersome man-
ual tuning to solve a single task.

Recently, there has also been growing interest in graph
neural networks (GNNs) to handle rich relational structures
on data with deep neural networks [24, 25, 26, 27, 28,
29, 30, 31, 32, 33, 34]. GNNs iteratively perform a fea-
ture aggregation from neighbors by message passing, and
therefore can express complex interactions among data in-
stances. Since few-shot learning algorithms have shown
to require full exploitation of the relationships between a
support set and a query [2, 3, 5, 10, 11], the use of GNNs
can naturally have the great potential to solve the few-shot
learning problem. A few approaches that have explored
GNNs for few-shot learning have been recently proposed
[6, 12]. Speciﬁcally, given a new task with its few-shot sup-
port set, Garcia and Bruna [6] proposed to ﬁrst construct a
graph where all examples of the support set and a query are
densely connected. Each input node is represented by the
embedding feature (e.g. an output of a convolutional neural
network) and the given label information (e.g. one-hot en-
coded label). Then, it classiﬁes the unlabeled query by iter-
atively updating node features from neighborhood aggrega-
tion. Liu et al. [12] proposed a transductive propagation net-
work (TPN) on the node features obtained from a deep neu-

11

ral network. At test-time, it iteratively propagates one-hot
encoded labels over the entire support and query instances
as a whole with a common graph parameter set. Here, it
is noted that the above previous GNN approaches in few-
shot learning have been mainly based on the node-labeling
framework, which implicitly models the intra-cluster simi-
larity and inter-cluster dissimilarity.

On the contrary, the edge-labeling framework is able to
explicitly perform the clustering with representation learn-
ing and metric learning, and thus it is intuitively a more con-
ducive framework for inferring a query association to an ex-
isting support clusters. Furthermore, it does not require the
pre-speciﬁed number of clusters (e.g. class-cardinality or
ways) while the node-labeling framework has to separately
train the models according to each number of clusters. The
explicit utilization of edge-labeling which indicates whether
the associated two nodes belong to the same cluster (class)
have been previously adapted in the naive (hyper) graphs for
correlation clustering [35] and the GNNs for citation net-
works or dynamical systems [36, 37], but never applied to
a graph for few-shot learning. Therefore, in this paper, we
propose an edge-labeling GNN (EGNN) for few-shot lean-
ing, especially on the task of few-shot classiﬁcation.

The proposed EGNN consists of a number of layers
in which each layer is composed of a node-update block
and an edge-update block. Speciﬁcally, across layers, the
EGNN not only updates the node features but also ex-
plicitly adjusts the edge features, which reﬂect the edge-
labels of the two connected node pairs and directly exploit
both the intra-cluster similarity and inter-cluster dissimilar-
ity. As shown in Figure 1, after a number of alternative
node and edge feature updates, the edge-label prediction
can be obtained from the ﬁnal edge feature. The edge loss
is then computed to update the parameters of EGNN with a
well-known meta-learning strategy, called episodic training
[2, 9]. The EGNN is naturally able to perform a transduc-
tive inference to predict all test (query) samples at once as a
whole, and this has shown more robust predictions in most
cases when a few labeled training samples are provided. In
addition, the edge-labeling framework in the EGNN enables
to handle various numbers of classes without remodeling or
retraining. We will show by means of experimental results
on two benchmark few-shot image classiﬁcation datasets
that the EGNN outperforms other few-shot learning algo-
rithms including the existing GNNs in both supervised and
semi-supervised cases.

Our main contributions can be summarized as follows:

• The EGNN is ﬁrst proposed for few-shot learning with
iteratively updating edge-labels with exploitation of
both intra-cluster similarity and inter-cluster dissimi-
larity. It is also able to be well suited for performing
on various numbers of classes without retraining.

• It consists of a number of layers in which each layer is
composed of a node-update block and an edge-update
block where the corresponding parameters are esti-
mated under the episodic training framework.

• Both of the transductive and non-transductive learning
or inference are investigated with the proposed EGNN.

• On both of the supervised and semi-supervised few-
shot image classiﬁcation tasks with two benchmark
datasets, the proposed EGNN signiﬁcantly improves
the performances over the existing GNNs. Addition-
ally, several ablation experiments show the beneﬁts
from the explicit clustering as well as the separate uti-
lization of intra-cluster similarity and inter-cluster dis-
similarity.

2. Related works

Graph Neural Network Graph neural networks were
ﬁrst proposed to directly process graph structured data with
neural networks as of form of recurrent neural networks
[28, 29]. Li et al. [31] further extended it with gated re-
current units and modern optimization techniques. Graph
neural networks mainly do representation learning with a
neighborhood aggregation framework that the node features
are computed by recursively aggregating and transforming
features of neighboring nodes. Generalized convolution
based propagation rules also have been directly applied to
graphs [34, 38, 39], and Kipf and Welling [30] especially
applied it to semi-supervised learning on graph-structured
data with scalability. A few approaches [6, 12] have ex-
plored GNNs for few-shot learning and are based on the
node-labeling framework.

Edge-Labeling Graph Correlation clustering (CC) is a
graph-partitioning algorithm [40] that infers the edge la-
bels of the graph by simultaneously maximizing intra-
cluster similarity and inter-cluster dissimilarity. Finley and
Joachims [41] considered a framework that uses structured
support vector machine in CC for noun-phrase clustering
and news article clustering. Taskar [42] derived a max-
margin formulation for learning the edge scores in CC for
producing two different segmentations of a single image.
Kim et al. [35] explored a higher-order CC over a hy-
pergraph for task-speciﬁc image segmentation. The atten-
tion mechanism in a graph attention network has recently
extended to incorporate real-valued edge features that are
adaptive to both the local contents and the global layers
for modeling citation networks [36]. Kipf et al. [37] intro-
duced a method to simultaneously infer relational structure
with interpretable edge types while learning the dynamical
model of an interacting system. Johnson [43] introduced the
Gated Graph Transformer Neural Network (GGT-NN) for

12

natural language tasks, where multiple edge types and sev-
eral graph transformation operations including node state
update, propagation and edge update are considered.

Few-Shot Learning One main stream approach for few-
shot image classiﬁcation is based on representation learning
and does prediction by using nearest-neighbor according to
similarity between representations. The similarity can be a
simple distance function such as cosine or Euclidean dis-
tance. A Siamese network [44] works in a pairwise man-
ner using trainable weighted L1 distance. A matching net-
work [2] further uses an attention mechanism to derive an
differentiable nearest-neighbor classiﬁer and a prototypical
network [3] extends it with deﬁning prototypes as the mean
of embedded support examples for each class. DEML [45]
has introduced a concept learner to extract high-level con-
cept by using a large-scale auxiliary labeled dataset show-
ing that a good representation is an important component to
improve the performance of few-shot image classiﬁcation.
A meta-learner that learns to optimize model parameters
extract some transferable knowledge between tasks to lever-
age in the context of few-shot learning. Meta-LSTM [8]
uses LSTM as a model updater and treats the model param-
eters as its hidden states. This allows to learn the initial
values of parameters and update the parameters by read-
ing few-shot examples. MAML [4] learns only the initial
values of parameters and simply uses SGD. It is a model
agnostic approach, applicable to both supervised and rein-
forcement learning tasks. Reptile [46] is similar to MAML
but using only ﬁrst-order gradients. Another generic meta-
learner, SNAIL [10], is with a novel combination of tempo-
ral convolutions and soft attention to learn an optimal learn-
ing strategy.

3. Method

In this section, the deﬁnition of few-shot classiﬁcation
task is introduced, and the proposed algorithm is described
in detail.

3.1. Problem deﬁnition: Few shot classiﬁcation

The few-shot classiﬁcation aims to learn a classiﬁer
when only a few training samples per each class are given.
Therefore, each few-shot classiﬁcation task T contains a
support set S, a labeled set of input-label pairs, and a query
set Q, an unlabeled set on which the learned classiﬁer is
evaluated. If the support set S contains K labeled samples
for each of N unique classes, the problem is called N -way
K-shot classiﬁcation problem.

Recently, meta-learning has become a standard method-
ology to tackle few-shot classiﬁcation. In principle, we can
train a classiﬁer to assign a class label to each query sam-
ple with only the compact support set of the task. How-
ever, a small number of labeled support samples for each

task are not sufﬁcient to train a model fully reﬂecting the
inter- and intra-class variations, which often leads to un-
satisfactory classiﬁcation performance. Meta-learning on
explicit training set resolves this issue by extracting trans-
ferable knowledge that allows us to perform better few-shot
learning on the support set, and thus classify the query set
more successfully.

As an efﬁcient way of meta-learning, we adopt episodic
training [2, 9] which is commonly employed in various lit-
eratures [3, 4, 5]. Given a relatively large labeled training
dataset, the idea of episodic training is to sample training
tasks (episodes) that mimic the few-shot learning setting of
test tasks. Here, since the distribution of training tasks is as-
sumed to be similar to that of test tasks, the performances of
the test tasks can be improved by learning a model to work
well on the training tasks.

i=1

follows: T = S S Q where S = {(xi, yi)}N ×K

More concretely, in episodic training, both training and
test tasks of the N -way K-shot problem are formed as
and
Q = {(xi, yi)}N ×K+T
i=N ×K+1. Here, T is the number of query
samples, and xi and yi ∈ {C1, · · · CN } = CT ⊂ C are the
ith input data and its label, respectively. C is the set of all
classes of either training or test dataset. Although both the
training and test tasks are sampled from the common task
distribution, the label spaces are mutually exclusive, i.e.
Ctrain ∩ Ctest = ∅. The support set S in each episode serves
as the labeled training set on which the model is trained to
minimize the loss of its predictions over the query set Q.
This training procedure is iteratively carried out episode by
episode until convergence.

Finally, if some of N ×K support samples are unlabeled,
the problem is referred to as semi-supervised few-shot clas-
siﬁcation. In Section 4, the effectiveness of our algorithm
on semi-supervised setting will be presented.

3.2. Model

This section describes the proposed EGNN for few-shot
classiﬁcation, as illustrated in Figure 2. Given the feature
representations (extracted from a jointly trained convolu-
tional neural network) of all samples of the target task, a
fully-connected graph is initially constructed where each
node represents each sample, and each edge represents the
types of relationship between the two connected nodes;
Let G = (V, E; T ) be the graph constructed with samples
from the task T , where V := {Vi}i=1,...,|T | and E :=
{Eij}i,j=1,...,|T | denote the set of nodes and edges of the
graph, respectively. Let vi and eij be the node feature of Vi
and the edge feature of Eij , respectively. |T | = N × K + T
is the total number of samples in the task T . Each ground-
truth edge-label yij is deﬁned by the ground-truth node la-
bels as:

yij = (cid:26) 1,

0,

if yi = yj,
otherwise.

(1)

13

Figure 2: The overall framework of the proposed EGNN model. In this illustration, a 2-way 2-shot problem is presented as
an example. Blue and green circles represent two different classes. Nodes with solid line represent labeled support samples,
while a node with dashed line represents the unlabeled query sample. The strength of edge feature is represented by the color
in the square. Note that although each edge has a 2-dimensional feature, only the ﬁrst dimension is depicted for simplicity.
The detailed process is described in Section 3.2.

Each edge feature eij = {eijd}2

d=1 ∈ [0, 1]2 is a 2-
dimensional vector representing the (normalized) strengths
of the intra- and inter-class relations of the two connected
nodes. This allows to separately exploit the intra-cluster
similarity and the inter-cluster dissimilairity.

Node features are initialized by the output of the convo-
lutional embedding network v0
i = femb(xi; θemb), where
θemb is the corresponding parameter set (see Figure 3.(a)).
Edge features are initialized by edge labels as follows:

[1||0],
[0||1],

if yij = 1 and i, j ≤ N × K,
if yij = 0 and i, j ≤ N × K,

(2)

[0.5||0.5],

otherwise,

e

0

ij = 


where || is the concatenation operation.

The EGNN consists of L layers to process the graph,
and the forward propagation of EGNN for inference is an
alternative update of node feature and edge feature through
layers.

ℓ−1
ij

ℓ−1
i

and e

In detail, given v

from the layer ℓ − 1, node
feature update is ﬁrstly conducted by a neighborhood ag-
gregation procedure. The feature node vℓ
i at the layer ℓ
is updated by ﬁrst aggregating the features of other nodes
proportional to their edge features, and then performing the
feature transformation; the edge feature e
at the layer
ℓ − 1 is used as a degree of contribution of the correspond-

ℓ−1
ij

ing neighbor node like an attention mechanism as follows:

ℓ

v

(3)

v),

]; θℓ

ℓ−1
j

ℓ−1
j

Pk eikd

i = f ℓ

˜eℓ−1
ij1 v

˜eℓ−1
ij2 v

, and f ℓ

||Xj

v([Xj
where ˜eijd = eijd
v is the feature (node) trans-
formation network, as shown in Figure 3.(b), with the pa-
rameter set θℓ
It should be noted that besides the con-
v.
ventional intra-class aggregation, we additionally consider
inter-class aggregation. While the intra-class aggregation
provides the target node the information of “similar neigh-
bors”, the inter-class aggregation provides the information
of “dissimilar neighbors”.

Then, edge feature update is done based on the newly
updated node features. The (dis)similarities between every
pair of nodes are re-obtained, and the feature of each edge is
updated by combining the previous edge feature value and
the updated (dis)similarities such that

¯eℓ
ij1 =

¯eℓ
ij2 =

e

ℓ
ij = ¯e

i , vℓ
k; θℓ

f ℓ
e (vℓ
e (vℓ
i , vℓ
(1 − f ℓ
e (vℓ

Pk f ℓ
Pk(1 − f ℓ

ℓ
ij/k¯e

ℓ
ijk1,

e (vℓ
i , vℓ

,

ik1 )

j; θℓ
e)eℓ−1
i , vℓ
k; θℓ

e)eℓ−1
ij1
ik1 /(Pk eℓ−1
e))eℓ−1
j; θℓ
ij2
ik2 /(Pk eℓ−1
e))eℓ−1

ik2 )

(4)

, (5)

(6)

where f ℓ
scores with the parameter set θℓ

e is the metric network that computes similarity
e (see Figure 3.(c)). In spe-

14

Algorithm 1: The process of EGNN for inference

1 Input: G = (V, E; T ), where T = S S Q,
S = {(xi, yi)}N ×K

, Q = {xi}N ×K+T

i=N ×K+1

i=1

v, θℓ

e}L

ℓ=1

2 Parameters: θemb ∪ {θℓ
3 Output: {ˆyi}N ×K+T
4 Initialize: v0
5 for ℓ = 1, · · · , L do

i=N ×K+1
i = femb(xi; θemb), e0

ij, ∀i, j

/* Node feature update
for i = 1, · · · , |V | do

vℓ

i ← NodeUpdate({v

ℓ−1
i

}, {e

ℓ−1
ij }; θℓ
v)

end
/* Edge feature update
for (i, j) = 1, · · · , |E| do

eℓ
ij ← EdgeUpdate({vℓ

i }, {e

ℓ−1
ij }; θℓ
e)

*/

*/

end

6

7

8

9

10

11

12 end

/* Query node label prediction
i=N ×K+1 ← Edge2NodePred({yi}N ×K

13 {ˆyi}N ×K+T

i=1

*/
ij})

, {eL

EGNN inference at test-time is summarized in Algorithm 1.
The non-transductive inference means the number of query
samples T = 1 or it performs the query inference one-by-
one, separately, while the transductive inference classiﬁes
all query samples at once in a single graph.

3.3. Training

Given M training tasks {T train

}M
m=1 at a certain itera-
tion during the episodic training, the parameters of the pro-
posed EGNN, θemb ∪ {θℓ
ℓ=1, are trained in an end-to-
end fashion by minimizing the following loss function:

v, θℓ

e}L

m

L

M

(8)

L =

m,e),

Xm=1

λℓLe(Ym,e, ˆY ℓ

Xℓ=1
where Ym,e and ˆY ℓ
m,e are the set of all ground-truth query
edge-labels and the set of all (real-valued) query-edge pre-
dictions of the mth task at the ℓth layer, respectively, and the
edge loss Le is deﬁned as binary cross-entropy loss. Since
the edge prediction results can be obtained not only from
the last layer but also from the other layers, the total loss
combines all losses that are computed in all layers in order
to improve the gradient ﬂow in the lower layers.

4. Experiments

We evaluated and compared our EGNN 1 with state-of-
the-art approaches on two few-shot learning benchmarks,
i.e. miniImageNet [2] and tieredImageNet [7].

1The code and models are available on https://github.com/

khy0809/fewshot-egnn.

15

Figure 3: Detailed network architectures used in EGNN.
(a) Embedding network femb. (b) Feature (node) transfor-
mation network f ℓ

v . (c) Metric network f ℓ
e .

ciﬁc, the node feature ﬂows into edges, and each element
of the edge feature vector is updated separately from each
normalized intra-cluster similarity or inter-cluster dissim-
ilarity. Namely, each edge update considers not only the
relation of the corresponding pair of nodes but also the re-
lations of the other pairs of nodes. We can optionally use
two separate metric networks for the computations of each
of similarity or dissimilarity (e.g. separate fe,dsim instead
of (1 − fe,sim)).

After L number of alternative node and edge feature up-
dates, the edge-label prediction can be obtained from the
ﬁnal edge feature, i.e. ˆyij = eL
ij1. Here, ˆyij ∈ [0, 1] can be
considered as a probability that the two nodes Vi and Vj are
from the same class. Therefore, each node Vi can be classi-
ﬁed by simple weighted voting with support set labels and
edge-label prediction results. The prediction probability of
node Vi can be formulated as P (yi = Ck|T ) = p(k)
ˆyijδ(yj = Ck)(cid:17)

i = softmax(cid:16) X{j:j6=i∧(xj ,yj )∈S}

p(k)

(7)

:

i

where δ(yj = Ck) is the Kronecker delta function that is
equal to one when yj = Ck and zero otherwise. Alternative
approach for node classiﬁcation is the use of graph cluster-
ing; the entire graph G can be ﬁrst partitioned into clusters,
using the edge prediction and an optimization for valid par-
titioning via linear programming [35], and then each cluster
can be labeled with the support label it contains the most.
(7) to ob-
However, in this paper, we simply apply Eq.
tain the classiﬁcation results. The overall algorithm for the

4.1. Datasets

(a) miniImageNet

It

is the most popular few-shot

miniImageNet
learn-
ing benchmark proposed by [2] derived from the original
ILSVRC-12 dataset [47]. All images are RGB colored, and
of size 84 × 84 pixels, sampled from 100 different classes
with 600 samples per class. We followed the splits used
in [8] - 64, 16, and 20 classes for training, validation and
testing, respectively.

to miniImageNet

tieredImageNet Similar
dataset,
tieredImageNet [7] is also a subset of ILSVRC-12 [47].
Compared with miniImageNet, it has much larger number
of images (more than 700K) sampled from larger number
of classes (608 classes rather than 100 for miniImageNet).
Importantly, different from miniImageNet, tieredImageNet
adopts hierarchical category structure where each of
608 classes belongs to one of 34 higher-level categories
sampled from the high-level nodes in the Imagenet. Each
higher-level category contains 10 to 20 classes, and divided
into 20 training (351 classes), 6 validation (97 classes) and
8 test (160 classes) categories. The average number of
images in each class is 1281.

4.2. Experimental setup

Network Architecture For feature embedding module,
a convolutional neural network, which consists of four
blocks, was utilized as in most few-shot learning models
[2, 3, 4, 6] without any skip connections 2. More concretely,
each convolutional block consists of 3 × 3 convolutions, a
batch normalization and a LeakyReLU activation. All net-
work architectures used in EGNN are described in details in
Figure 3.

Evaluation For both datasets, we conducted a 5-way 5-
shot experiment which is one of standard few-shot learn-
ing settings. For evaluation, each test episode was formed
by randomly sampling 15 queries for each of 5 classes,
and the performance is averaged over 600 randomly gen-
erated episodes from the test set. Especially, we addition-
ally conducted a more challenging 10-way experiment on
miniImagenet, to demonstrate the ﬂexibility of our EGNN
model when the number of classes are different between
meta-training stage and meta-test stage, which will be pre-
sented in Section 4.5.

Training The proposed model was trained with Adam op-
timizer with an initial learning rate of 5 × 10−4 and weight
decay of 10−6. The task mini-batch sizes for meta-training
were set to be 40 and 20 for 5-way and 10-way experi-
ments, respectively. For miniImageNet, we cut the learn-

2Resnet-based models are excluded for fair comparison.

Model
Matching Networks [2]
Reptile [46]
Prototypical Net [3]
GNN [6]
EGNN
MAML [4]
Reptile + BN [46]
Relation Net [5]
MAML+Transduction [4]
TPN [12]
TPN (Higher K) [12]
EGNN+Transduction

Trans.

5-Way 5-Shot

No
No
No
No
No
BN
BN
BN
Yes
Yes
Yes
Yes

55.30
62.74
65.77
66.41
66.85
63.11
65.99
67.07
66.19
69.43
69.86
76.37

(b) tieredImageNet

Model
Reptile [46]
Prototypical Net [3]
EGNN
MAML [4]
Reptile + BN [46]
Relation Net [5]
MAML+Transduction [4]
TPN [12]
EGNN+Transduction

Trans.

5-Way 5-Shot

No
No
No
BN
BN
BN
Yes
Yes
Yes

66.47
69.57
70.98
70.30
71.03
71.31
70.83
72.58
80.15

1:

Few-shot

Table
on
miniImageNet and tieredImageNet. All results are averaged
over 600 test episodes. Top results are highlighted.

classiﬁcation

accuracies

ing rate in half every 15,000 episodes while for tieredIma-
geNet, the learning rate is halved for every 30,000 because
it is larger dataset and requires more iterations to converge.
All our code was implemented in Pytorch [48] and run with
NVIDIA Tesla P40 GPUs.

4.3. Few shot classiﬁcation

The few-shot classiﬁcation performance of the proposed
EGNN model is compared with several state-of-the-art
models in Table 1a and 1b. Here, as presented in [12],
all models are grouped into three categories with regard
to three different transductive settings; “No” means non-
transductive method, where each query sample is predicted
independently from other queries, “Yes” means transduc-
tive method where all queries are simultaneously processed
and predicted together, and “BN” means that query batch
statistics are used instead of global batch normalization pa-
rameters, which can be considered as a kind of transductive
inference at test-time.

The proposed EGNN was tested with both transduc-
tive and non-transductive settings. As shown in Table 1a,
EGNN shows the best performance in 5-way 5-shot set-

16

ting, on both transductive and non-transductive settings on
miniImagenet. Notably, EGNN performed better than node-
labeling GNN [6], which supports the effectiveness of our
edge-labeling framework for few-shot learning. Moreover,
EGNN with transduction (EGNN + Transduction) outper-
formed the second best method (TPN [12]) on both datasets,
especially by large margin on miniImagenet. Table 1b
shows that the transductive setting on tieredImagenet gave
the best performance as well as large improvement com-
pared to the non-transductive setting. In TPN, only the la-
bels of the support set are propagated to the queries based on
the pairwise node feature afﬁnities using a common Lapla-
cian matrix, so the queries communicate to each other only
via their embedding feature similarities.
In contrast, our
proposed EGNN allows us to consider more complicated
interactions between query samples, by propagating to each
other not only their node features but also edge-label infor-
mation across the graph layers having different parameter
sets. Furthermore, the node features of TPN are ﬁxed and
never changed during label propagation, which allows them
to derive a closed-form, one-step label propagation equa-
tion. On the contrary, in our EGNN, both node and edge
features are dynamically changed and adapted to the given
task gradually with several update steps.

4.4. Semi supervised few shot classiﬁcation

For semi-supervised experiment, we followed the same
setting described in [6] for fair comparison. It is a 5-way
5-shot setting, but the support samples are only partially la-
beled. The labeled samples are balanced among classes so
that all classes have the same amount of labeled and unla-
beled samples. The obtained results on miniImagenet are
presented in Table 2. Here, “LabeledOnly” denotes learn-
ing with only labeled support samples, and “Semi” means
the semi-supervised setting explained above. Different re-
sults are presented according to when 20% and 40%, 60%
of support samples were labeled, and the proposed EGNN
is compared with node-labeling GNN [6]. As shown in Ta-
ble 2, semi-supervised learning increases the performances
in comparison to labeled-only learning on all cases. No-
tably, the EGNN outperformed the previous GNN [6] by a
large margin (61.88% vs 52.45%, when 20% labeled) on
semi-supervised learning, especially when the labeled por-
tion was small. The performance is even more increased
on transductive setting (EGNN-Semi(T)). In a nutshell, our
EGNN is able to extract more useful information from un-
labeled samples compared to node-labeling framework, on
both transductive and non-transductive settings.

4.5. Ablation studies

The proposed edge-labeling GNN has a deep architec-
ture that consists of several node and edge-update layers.
Therefore, as the model gets deeper with more layers, the

Training method
GNN-LabeledOnly [6]
GNN-Semi [6]
EGNN-LabeledOnly
EGNN-Semi
EGNN-LabeledOnly(T)
EGNN-Semi(T)

56.91
58.76

Labeled Ratio (5-way 5-shot)
20% 40% 60% 100%
66.41
50.33
66.41
52.45
52.86
66.85
61.88
66.85
76.37
59.18
63.62
76.37

62.52

63.53

64.32

66.37

-
-
-

-

-

-

Table 2: Semi-supervised few-shot classiﬁcation accuracies
on miniImageNet.

Feature type
Intra & Inter
Intra Only

# of EGNN layers
3
1

2

67.99
67.28

73.19
72.20

76.37
74.04

Table 3: 5-way 5-shot results on miniImagenet with differ-
ent numbers of EGNN layers and different feature types

interactions between task samples should be propagated
more intensively, which may leads to performance improve-
ments. To support this statement, we compared the few-shot
learning performances with different numbers of EGNN
layers, and the results are presented in Table 3. As the num-
ber of EGNN layers increases, the performance gets bet-
ter. There exists a big jump on few-shot accuracy when the
number of layers changes from 1 to 2 (67.99% → 73.19%),
and a little additional gain with three layers (76.37 %).

Another key ingredient of the proposed EGNN is to use
separate exploitation of intra-cluster similarity and inter-
cluster dissimilarity in node/edge updates. To validate
the effectiveness of this, we conducted experiment with
only intra-cluster aggregation and compared the results with
those obtained by using both aggregations. The results are
also presented in Table 3. For all EGNN layers, the use of
separate inter-cluster aggregation clearly improves the per-
formances.

It should also be noted that compared to the previous
node-labeling GNN, the proposed edge-labeling framework
is more conducive in solving the few-shot problem under
arbitrary meta-test setting, especially when the number of
few-shot classes for meta-testing does not match to the one
used for meta-training. To validate this statement, we con-
ducted a cross-way experiment with EGNN, and the result
is presented in Table 4. Here, the model was trained with 5-
way 5-shot setting and tested on 10-way 5-shot setting, and
vice versa. Interestingly, both cross-way results are similar
to those obtained with the matched-way settings. There-
fore, we can observe that the EGNN can be successfully
extended to modiﬁed few-shot setting without re-training
of the model, while the previous node-labeling GNN [6] is

17

Model
Prototypical [3]
Prototypical
Prototypical
Prototypical
GNN [6]
GNN
GNN
GNN
EGNN
EGNN
EGNN
EGNN

Train way Test way Accuracy

5
5
10
10
5
5
10
10
5
5
10
10

5
10
10
5
5
10
10
5
5
10
10
5

65.77
51.93
49.29
66.93
66.41
N/A
51.75
N/A
76.37
56.35
57.61
76.27

Table 4: Cross-way few-shot learning results on miniIma-
genet 5-shot setting.

not even applicable to cross-way setting, since the size of
the model and parameters are dependent on the number of
ways.

Figure 4 shows t-SNE [49] visualizations of node fea-
tures for the previous node-labeling GNN and EGNN. The
GNN tends to show a good clustering among support sam-
ples after the ﬁrst layer-propagation, however, query sam-
ples are heavily clustered together, and according to each la-
bel, query samples and their support samples never get close
together, especially even with more layer-propagations,
which means that the last fully-connect layer of GNN ac-
tually seems to perform most roles in query classiﬁcation.
In contrast, in our EGNN, as the layer-propagation goes on,
both the query and support samples are pulled away if their
labels are different, and at the same time, equally labeled
query and support samples get close together.

For further analysis, Figure 5 shows how edge features
propagate in EGNN. Starting from the initial feature where
all query edges are initialized with 0.5, the edge feature
gradually evolves to resemble ground-truth edge label, as
they are passes through the several EGNN layers.

5. Conclusion

This work addressed the problem of few-shot learning,
especially on the few-shot classiﬁcation task. We proposed
the novel EGNN which aims to iteratively update edge-
labels for inferring a query association to an existing sup-
port clusters. In the process of EGNN, a number of alter-
native node and edge feature updates were performed using
explicit intra-cluster similarity and inter-cluster dissimilar-
ity through the graph layers having different parameter sets,
and the edge-label prediction was obtained from the ﬁnal
edge feature. The edge-labeling loss was used to update
the parameters of the EGNN with episodic training. Ex-

Figure 4: t-SNE visualization of node features. From top to
bottom: GNN [6], EGNN. From left to right: initial embed-
ding, 1st layer, 2nd layer, 3rd layer. ’x’ represents query, ’o’
represents support. Different colors mean different labels.

Figure 5: Visualization of edge feature propagation. From
left to right:
initial edge feature, 1st layer, 2nd layer,
ground-truth edge labels. Red color denotes higher value
(eij1 = 1), while blue color denotes lower value (eij1 = 0).
This illustration shows 5-way 3-shot setting, and 3 queries
for each class, total 30 task-samples. The ﬁrst 15 samples
are support set, and latter 15 are query set.

perimental results showed that the proposed EGNN outper-
formed other few-shot learning algorithms on both of the
supervised and semi-supervised few-shot image classiﬁca-
tion tasks. The proposed framework is applicable to a broad
variety of other meta-clustering tasks. For future work, we
can consider another training loss which is related to the
valid graph clustering such as the cycle loss [35]. Another
promising direction is graph sparsiﬁcation, e.g. construct-
ing K-nearest neighbor graphs [50], that will make our al-
gorithm more scalable to larger number of shots.

Acknowledgement

This work was supported by the National Research
Foundation of Korea (NRF) grant funded by the Ko-
rea government (MSIT)(No. NRF-2017R1A2B2006165)
and Institute for Information communications Technol-
ogy Promotion(IITP) grant funded by the Korea govern-
ment(MSIT) (No.2016-0-00563, Research on Adaptive Ma-
chine Learning Technology Development for Intelligent
Autonomous Digital Companion). Also, we thank the
Kakao Brain Cloud team for supporting to efﬁciently use
GPU clusters for large-scale experiments.

18

References

[1] Christiane Lemke, Marcin Budka, and Bogdan Gabrys. Met-
alearning: a survey of trends and technologies. Artiﬁcial
Intelligence Review, 44(1), 2015. 1

[2] Oriol Vinyals, Charles Blundell, Tim Lillicrap, Daan Wier-
stra, et al. Matching networks for one shot learning. In NIPS,
pages 3630–3638, 2016. 1, 2, 3, 5, 6

[3] Jake Snell, Kevin Swersky, and Richard Zemel. Prototypical
networks for few-shot learning. In NIPS, pages 4077–4087,
2017. 1, 3, 6, 8

[4] Chelsea Finn, Pieter Abbeel, and Sergey Levine. Model-
agnostic meta-learning for fast adaptation of deep networks.
In ICML, 2017. 1, 3, 6

[5] Flood Sung Yongxin Yang, Li Zhang, Tao Xiang, Philip HS
Torr, and Timothy M Hospedales. Learning to compare: Re-
lation network for few-shot learning. In CVPR, 2018. 1, 3,
6

[6] Victor Garcia and Joan Bruna. Few-shot learning with graph

neural networks. In ICLR, 2018. 1, 2, 6, 7, 8

[7] Mengye Ren, Eleni Triantaﬁllou, Sachin Ravi, Jake Snell,
Kevin Swersky, Joshua B Tenenbaum, Hugo Larochelle, and
Richard S Zemel. Meta-learning for semi-supervised few-
shot classiﬁcation. In ICLR, 2018. 1, 5, 6

[8] Sachin Ravi and Hugo Larochelle. Optimization as a model

for few-shot learning. In ICLR, 2017. 1, 3, 6

[9] Adam Santoro, Sergey Bartunov, Matthew Botvinick, Daan
Wierstra, and Timothy Lillicrap. Meta-learning with
memory-augmented neural networks. In ICML, pages 1842–
1850, 2016. 1, 2, 3

[10] Nikhil Mishra, Mostafa Rohaninejad, Xi Chen, and Pieter
In ICLR,

Abbeel. A simple neural attentive meta-learner.
2018. 1, 3

[11] Boris N. Oreshkin, Pau Rodriguez, and Alexandre Lacoste.
Tadam: Task dependent adaptive metric for improved few-
shot learning. In NIPS, 2018. 1

[12] Yanbin Liu, Juho Lee, Minseop Park, Saehoon Kim, and
Yi Yang. Transductive propagation network for few-shot
learning. In ICLR, 2019. 1, 2, 6, 7

[13] Yu-Xiong Wang, Ross B. Girshick, Martial Hebert, and
Bharath Hariharan. Low-shot learning from imaginary data.
In CVPR, 2018. 1

[14] Brenden M Lake, Ruslan Salakhutdinov, and Joshua B tenen-
baum. Human-level concept learning through probabilistic
program induction. Science, 350(6266):1332–1338, 2015. 1

[15] Taesup Kim, Jaesik Yoon, Ousmane Dia, Sungwoong Kim,
Yoshua Bengio, and Sungjin Ahn. Bayesian model-agnostic
meta-learning. In NIPS, 2018. 1

[16] Marcin Andrychowicz, Misha Denil, Sergio Gomez Col-
menarejo, Matthew W. Hoffman, David Pfau, Tom Schaul,
and Nando de Freitas. Learning to learn by gradient descent
by gradient descent. In NIPS, 2016. 1

[17] Irwan Bello, Barret Zoph, Vijay Vasudevan, and Quoc V.
Le. Neural optimizer search with reinforcement learning.
In ICML, 2017. 1

[18] Olga Wichrowska, Niru Maheswaranathan, Matthew W.
Hoffman, Sergio Gomez Colmenarejo, Misha Denil, Nando
de Freitas, and Jascha Sohl-Dickstein. Learned optimizers
that scale and generalize. In ICML, 2017. 1

[19] Maruan Al-Shedivat, Trapit Bansal, Yuri Burda,

Ilya
Sutskever, Igor Mordatch, and Pieter Abbeel. Continuous
adaptation via meta-learning in nonstationary and competi-
tive environments. In ICLR, 2018. 1

[20] Rein Houthooft, Richard Y. Chen, Phillip Isola, Bradly C.
Stadie, Filip Wolski, Jonathan Ho, and Pieter Abbeel.
Evolved policy gradients. In NIPS, 2018. 1

[21] Ignasi Clavera, Anusha Nagabandi, Ronald S. Fearing, Pieter
Abbeel, Sergey Levine, and Chelsea Finn. Learning to
adapt: Meta-learning for model-based control. CoRR,
abs/1803.11347, 2018. URL http://arxiv.org/abs/
1803.11347. 1

[22] Risto Vuorio, Dong-Yeon Cho, Daejoong Kim, and Jiwon
Kim. Meta continual learning. arXiv, 2018. URL https:
//arxiv.org/abs/1806.06928. 1

[23] Ju Xu and Zhanxing Zhu. Reinforced continual learning. In

NIPS, 2018. 1

[24] Peter W. Battaglia et al. Relational inductive biases, deep
learning, and graph networks. arXiv, 2018. URL https:
//arxiv.org/abs/1806.01261. 1

[25] Michael M. Bronstein, Joan Bruna, Yann LeCun, Arthur
Szlam, and Pierre Vandergheynst. Geometric deep learn-
ing: going beyond euclidean data. IEEE Signal Processing
Magazine, 34(4):18–42, 2017. 1

[26] Keyulu Xu, Weihua Hu, Jure Leskovec, and Stefanie Jegelka.
arXiv preprint

How powerful are graph neural networks?
arXiv:1810.00826, 2018. 1

[27] Justin Gilmer, Samuel S. Schoenholz, Patrick F. Riley, Oriol
Vinyals, and George E. Dahl. Neural message passing for
quantum chemistry. CoRR, abs/1704.01212, 2017. URL
http://arxiv.org/abs/1704.01212. 1

[28] M. Gori, G. Monfardini, and F. Scarselli. A new model for

learning in graph domains. In IJCNN, 2005. 1, 2

[29] Franco Scarselli, Marco Gori, Ah Chung Tsoi, Markus Ha-
genbuchner, and Gabriele Monfardini. The graph neural net-
work model. IEEE Transactions on Neural Networks, 20(1):
61–80, 2008. 1, 2

19

[47] Olga Russakovsky, Jia Deng, Hao Su, Jonathan Krause, San-
jeev Satheesh, Sean Ma, Zhiheng Huang, Andrej Karpathy,
Aditya Khosla, Michael Bernstein, et al.
Imagenet large
scale visual recognition challenge. International Journal of
Computer Vision, 115(3):211–252, 2015. 6

[48] Adam Paszke, Sam Gross, Soumith Chintala, Gregory
Chanan, Edward Yang, Zachary DeVito, Zeming Lin, Al-
ban Desmaison, Luca Antiga, and Adam Lerer. Automatic
differentiation in pytorch. In NIPS-W, 2017. 6

[49] L. van der Maaten and G. Hinton. Visualizing data using

t-sne. JMLR, 9:2579–2605, 2008. 8

[50] Xiaojuan Qi, Renjie Liao, Jiaya Jia, Sanja Fidler, and
Raquel Urtasun. 3d graph neural networks for rgbd seman-
tic segmentation. In Proceedings of the IEEE International
Conference on Computer Vision, pages 5199–5208, 2017. 8

[30] Thomas N. Kipf and Max Welling. Semi-supervised classi-
ﬁcation with graph convolutional networks. In ICLR, 2017.
1, 2

[31] Yujia Li, Daniel Tarlow, Marc Brockschmidt, and Richard
In ICLR,

Zemel. Gated graph sequence neural networks.
2016. 1, 2

[32] William L. Hamilton, Rex Ying, and Jure Leskovec. Induc-
tive representation learning on large graphs. In NIPS, 2017.
1

[33] Petar Velickovic, Guillem Cucurull, Arantxa Casanova,
Adriana Romero, Pietro Lio, and Yoshua Bengio. Graph at-
tention networks. In ICLR, 2018. 1

[34] Michael Defferrard, Xavier Bresson, and Pierre Van-
dergheynst. Convolutional neural networks on graphs with
fast localized spectral ﬁltering. In NIPS, 2016. 1, 2

[35] Sungwoong Kim, Sebastian Nowozin, Pushmeet Kohli, and
Chang D Yoo. Higher-order correlation clustering for image
segmentation. In NIPS, pages 1530–1538, 2011. 2, 5, 8

[36] Liyu Gong and Qiang Cheng. Adaptive edge features guided
graph attention networks. arXiv preprint arXiv:1809.02709,
2018. 2

[37] Thomas Kipf, Ethan Fetaya, Kuan-Chieh Wang, Max
Welling, and Richard Zemel. Neural relational inference for
interacting systems. arXiv preprint arXiv:1802.04687, 2018.
2

[38] Joan Bruna, Wojciech Zaremba, Arthur Szlam, and Yann Le-
Cun. Spectral networks and locally connected networks on
graphs. CoRR, abs/1312.6203, 2013. 2

[39] Mikael Henaff, Joan Bruna, and Yann LeCun.

Deep
convolutional networks on graph-structured data. CoRR,
abs/1506.05163, 2015. 2

[40] N. Bansal, A. Blum, and S. Chawla. Correlation clustering.

Machine Learning, 56:89–113, 2004. 2

[41] T. Finley and T. Joachims. Supervised clustering with sup-

port vector machines. In ICML, 2005. 2

[42] B. Taskar. Learning structured prediction models: a large
margin approach. Ph.D. thesis, Stanford University, 2004. 2

[43] Daniel D Johnson. Learning graphical state transitions. In

ICLR, 2016. 2

[44] Gregory Koch, Richard Zemel, and Ruslan Salakhutdinov.
Siamese neural networks for one-shot image recognition.
2015. 3

[45] Fengwei Zhou, Bin Wu, and Zhenguo Li. Deep meta-
learning: Learning to learn in the concept space. CoRR,
abs/1802.03596, 2018. 3

[46] Alex Nichol, Joshua Achiam, and John Schulman. On ﬁrst-
order meta-learning algorithms. CoRR, abs/1803.02999,
2018. 3, 6

20

