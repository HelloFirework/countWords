A neural network based on SPD manifold learning for skeleton-based hand

gesture recognition

Xuan Son Nguyen, Luc Brun, Olivier L´ezoray, S´ebastien Bougleux

Normandie Univ, UNICAEN, ENSICAEN, CNRS, GREYC, 14000 Caen, France

{xsnguyen,luc.brun}@ensicaen.fr,{olivier.lezoray,sebastien.bougleux}@unicaen.fr

Abstract

Pyramid [52].

This paper proposes a new neural network based on SPD
manifold learning for skeleton-based hand gesture recogni-
tion. Given the stream of hand’s joint positions, our ap-
proach combines two aggregation processes on respectively
spatial and temporal domains. The pipeline of our network
architecture consists in three main stages. The ﬁrst stage
is based on a convolutional layer to increase the discrim-
inative power of learned features. The second stage relies
on different architectures for spatial and temporal Gaussian
aggregation of joint features. The third stage learns a ﬁnal
SPD matrix from skeletal data. A new type of layer is pro-
posed for the third stage, based on a variant of stochastic
gradient descent on Stiefel manifolds. The proposed net-
work is validated on two challenging datasets and shows
state-of-the-art accuracies on both datasets.

1. Introduction

Hand gesture recognition is an important research topic
with applications in many ﬁelds, e.g., assisted living,
human-robot interaction or sign language interpretation. A
large family of hand gesture recognition methods is based
on low-level features extracted from images, e.g., spatio-
temporal interest points. However, with the introduction
of affordable depth sensing cameras, e.g., Intel Realsense
or Microsoft Kinect, and the availability of highly accurate
joint tracking algorithms, skeletal data can be obtained ef-
fectively with good precision. Skeletal data provides a rich
and high level description of the hand. This has led to an ex-
tensive development of approaches for skeleton-based hand
gesture recognition in recent years.

Early works on the recognition of hand gestures or hu-
man actions from skeletal data are based on a modeling
of the skeleton’s movement as time series [49, 52]. The
recognition step is thus based on the comparison of se-
quences of features describing skeleton’s movements us-
ing, e.g., Dynamic Time Warping [49] or Fourier Temporal

Such approaches ignore the high correlations existing
between the movement of two adjacent hand joints (e.g.,
two joints of a same ﬁnger) within a hand gesture. Tak-
ing into account this information is a crucial step for hand
gesture recognition and requires the deﬁnition and the ap-
propriate processing of hand joints’ neighborhoods. Re-
cently, graph convolutional networks for action recogni-
tion [27, 56] have shown excellent performance by taking
into account physical connections of body joints deﬁned by
the underlying structure of body skeleton. While the use
of physical connections of skeleton joints are important for
capturing discriminating cues in hand gesture and action
recognition, the identiﬁcation of other connections induced
by the performed gestures and actions are also useful and
can greatly improve recognition accuracy [45].

Motivated by this observation, we model in this work
the hand skeleton as a 2D grid where connections, differ-
ent from the classical physical connections of hand joints,
are added to better capture patterns deﬁned by hand joints’
movements. Figure 1(a) shows the hand joint positions esti-
mated by an Intel Realsense camera. Since the hand skele-
ton has an irregular geometric structure that differs from
grid-shaped structures, the 2D grid is constructed from the
hand skeleton by removing some hand joints and adding
connections between neighboring joints. Figure 1(b) shows
a 2D grid corresponding to the hand skeleton in Fig. 1(a).
This 2D grid integrates adjacency relationships between
hand joints that often have correlated movements. More-
over, this modeling allows us to use a classical convolu-
tional layer instead of a graph convolutional operator on an
arbitrary geometric graph [56].

Our approach relies on SPD matrices to aggregate fea-
tures resulting from the convolutional layer. The SPD ma-
trices considered in this work combine mean and covariance
information which have been shown effective in various vi-
sion tasks [15, 21, 22]. Since SPD matrices are known to lie
on a Riemannian manifold, speciﬁc layers for deep neural
networks of SPD matrices should be designed [19, 60]. Be-
side good performances on action recognition tasks, these

112036

networks do not put a focus on spatial and temporal rela-
tionships of skeleton joints. This motivates us to design
a neural network model for learning a SPD matrix-based
gesture representation from skeletal data with a special at-
tention on those relationships. In our work, the encoding
of spatial and temporal relationships of hand joints is per-
formed using different network architectures. This allows to
capture relevant statistics for individual hand joints as well
as groups of hand joints whose movement is highly corre-
lated with that of other joints in the group. The experimental
evaluation shows that our method signiﬁcantly improves the
state-of-the-art methods on two standard datasets.

2. Related Works

This section presents representative works for skeleton-
based hand gesture recognition (Sec. 2.1) and deep neural
networks for SPD manifold learning (Sec. 2.2).

2.1. Skeleton Based Gesture Recognition

Most of approaches can be categorized as hand-crafted
feature-based approaches or deep learning approaches.
Hand-crafted feature-based approaches describe relation-
ships of hand and body joints in different forms to represent
gestures and actions. The simplest proposed relationships
are relative positions between pairs of joints [35, 46, 57].
More complex relationships were also exploited, e.g., skele-
tal quad [8] or 3D geometric relationships of body parts in
a Lie group [49]. Temporal relationships have also been
taken into account and proven effective [50]. While all
joints are involved in the performed gestures and actions,
only a subset of key joints is important for the recognition
task. These are called informative joints and they can be
automatically identiﬁed using information theory [37]. This
allows to avoid considering non-informative joints that of-
ten bring noise and degrade performance.

Motivated by the success of deep neural networks in var-
ious vision tasks [13, 17, 26], deep learning approaches for
action and gesture recognition have been extensively stud-
ied in recent years. To capture spatial and temporal relation-
ships of hand and body joints, they rely mainly on Convolu-
tional Neural Network (CNN) [4, 25, 32, 33, 36, 53], Recur-
rent Neural Network (RNN) [6, 51] and Long Short-Term
Memory (LSTM) [31, 36, 44]. While hand-crafted feature-
based approaches have used informative joints to improve
recognition accuracy, deep learning approaches were based
on attention mechanism to selectively focus on relevant
parts of skeletal data [30, 55]. Recently, deep learning
on manifolds and graphs has increasingly attracted atten-
tion. Approaches following this line of research have also
been successfully applied to skeleton-based action recogni-
tion [19, 20, 23, 27, 56]. By extending classical operations
like convolutions to manifolds and graphs while respect-
ing the underlying geometric structure of data, they have

22

21

20

19

18

17

16

14

13

12

15

11

7

10

9

8

6

5

4

3

Palm

Wrist

2

1

(a)

22

18

14

10

21

17

13

w3

w4

w5

20

w2

16

12

w6

w1

w9

w7

w8

19

15

11

9

8

7

(b)

6

5

4

3

Figure 1:
(a) Hand joints estimated by a Intel RealSense
camera (b) graph of hand skeleton and the weights asso-
ciated with the neighbors of node 12 in the convolutional
layer.

demonstrated superior performance over other approaches.

2.2. Deep Learning of SPD Matrices

In recent years the deep learning community has shifted
its focus towards developing approaches that deal with data
in a non-Euclidean domain, e.g., Lie groups [20], SPD man-
ifolds [19] or Grassmann manifolds [23]. Among them,
those that deal with SPD manifolds have received partic-
ular attention. This comes from the popular applications of
SPD matrices in many vision problems [1, 14, 16, 58].

Deep neural networks for SPD matrix learning aim at
projecting a high-dimensional SPD matrix into a more dis-
criminative low-dimensional one. Differently from classi-
cal CNNs, their layers are designed so that they preserve
the geometric structure of input SPD matrices, i.e., their
In [5], a 2D fully con-
output are also SPD matrices.
nected layer was proposed for the projection, while in [19]
it was achieved by a Bimap layer. Inspired by ReLU lay-
ers in CNNs, different types of layers that perform non-
linear transformations of SPD matrices were also intro-
duced [5, 7, 19]. To classify the ﬁnal SPD matrix, a layer is
generally required to map it to an Euclidean space. Most of
approaches rely on the two widely used operations in many
machine learning models, i.e., singular value decomposition
(SVD) and eigen value decomposition (EIG) for construct-
ing this type of layers [19, 29, 54]. As gradients involved in
SVD and EIG cannot be computed by traditional backprop-
agation, they exploit the chain rule established by Ionescu
et al. [24] for backpropagation of matrix functions in deep
learning.

3. The Proposed Approach

In this section, we present our network model referred
to as Spatial-Temporal and Temporal-Spatial Hand Gesture
Recognition Network (ST-TS-HGR-NET). An overview of
our network is given in Section 3.1. The different compo-
nents of our network are explained in Sections 3.2, 3.3, 3.4,
and 3.5. In Section 3.6, we show how our network is trained

12037

ST−GA−NET

CONV

SPDC−NET

Figure 2: The architecture of ST-TS-HGR-NET.

TS−GA−NET

for gesture recognition. Finally, Section 3.7 points out the
relations of our approach with previous approaches.

3.1. Overview of The Proposed Network

Our network illustrated in Fig. 2 is made up of three
components. The ﬁrst component, referred to as CONV,
is a convolutional layer applied on the 2D grid encoding the
hand skeletal data (Fig. 1). Filter weights are shared over
all frames of the sequence.

The second component is based on the Gaussian em-
bedding method of [34] and is used to capture ﬁrst- and
second-order statistics. This component is composed of
two different architectures for feature aggregation referred
to as Spatial-Temporal Gaussian Aggregation Sub-Network
(ST-GA-NET) and Temporal-Spatial Gaussian Aggregation
Sub-Network (TS-GA-NET).

The third component, referred to as SPD Matrix Learn-
ing and Classiﬁcation Sub-Network (SPDC-NET), learns a
SPD matrix from a set of SPD matrices and maps the re-
sulting SPD matrix, which lies on a Riemannian manifold,
to an Euclidean space for classiﬁcation.

In the following, we explain in detail each component of
our network. The backpropagation procedures of our net-
work’s layers are given in the supplementary material.

3.2. Convolutional Layer

0,i ∈ R3, i = 1, . . . , NJ , t = 1, . . . , NF ,

The convolutional layer (Fig. 3) used in the ﬁrst place of
our network allows to combine joints with correlated varia-
tions (Section 1). Let NJ and NF be respectively the num-
ber of hand joints and the length of the skeleton sequence.
Let us denote by pt
the 3D coordinates of hand joint i at frame t. We deﬁne
a 2D grid where each node represents a hand joint i at a
frame t (Section 1). The grid has three channels correspond-
ing to the x, y, and z coordinates of hand joints. Fig. 1(b)
shows the 2D grid corresponding to the hand skeleton in
Fig. 1(a), where each node has at most 9 neighbors in-
cluding itself. Let dc
out be the output dimension of the
convolutional layer. Let us denote by pt
out , i =
3, . . . , NJ , t = 1, . . . , NF , the output of the convolutional
layer. The output feature vector at node i is computed as:

i ∈ Rdc

pt

i = Xj∈Ni

Wl(j,i)pt

0,j,

(1)

A hand skeleton sequence

Frame 1

3

22
21
20
19

18
17
16
15

10
14
13 9
12
8
11 7

6
5
4
3

Frame NF

22
21
20
19

18
17
16
15

10
14
13 9
12
8
11 7

6
5
4
3

D
2
v
n
o
C

Frame 1

dc
out

22
21
20
19

18
17
16
15

10
14
13 9
12
8
11 7

6
5
4
3

Frame NF

22
21
20
19

18
17
16
15

10
14
13 9
8
12
11 7

6
5
4
3

Figure 3: Illustration of sub-network CONV.

where Ni is the set of neighbors of node i, Wl(j,i) is the
ﬁlter weight matrix, and l(j, i) is deﬁned as:

j − i
l(j, i)

0
1

4
2

5
3

1 −3 −4 −5 −1
8
4

5

6

7

3
9

(2)

3.3. Spatial Temporal Gaussian Aggregation Sub 

Network

To capture the temporal ordering of a skeleton sequence,
a number of sub-sequences are constructed and then fed to
different branches of ST-GA-NET (see Fig. 4). A branch
of ST-GA-NET is designed to aggregate features for a
sub-sequence of a speciﬁc ﬁnger.
In this paper, we con-
struct six sub-sequences for each skeleton sequence. The
ﬁrst sub-sequence is the original sequence. The next two
sub-sequences are obtained by dividing the sequence into
two sub-sequences of equal length. The last three sub-
sequences are obtained by dividing the sequence into three
sub-sequences of equal length. This results in 30 branches
for ST-GA-NET (6 sub-sequences × 5 ﬁngers).

To aggregate features in a branch associated with sub-
sequence s and ﬁnger f , s = 1, . . . , 6, f = 1, . . . , 5, each
frame of sub-sequence s is processed through 4 layers. Let
Jf be the set of hand joints belonging to ﬁnger f , ts
b, ts
e
be the beginning and ending frames of sub-sequence s, t
be a given frame of sub-sequence s, {pi
s,j|j ∈ Jf , i =
b, . . . , ts
ts
e} be the subset of output feature vectors of the
convolutional layer that are fed to the branch. Let us ﬁnally
consider a sliding window {t − t0, . . . , t + t0} centered on
frame t. Following previous works [28, 43], we assume that
pi
s,j , j ∈ Jf , i = t − t0, . . . , t + t0, are independent and
identically distributed samples from a Gaussian distribution
(hereafter abbreviated as Gaussian for simplicity):

12038

{pi

s, j}i=t−t0,...,t+t0

j∈J f

dc
out

6
5
4
3
t − t0

6
5
4
3

t − t0

10
9
8
7
t − t0

10
9
8
7
t − t0

6
5
4
3
t

6
5
4
3

t

10
9
8
7
t

10
9
8
7
t

6
5
4
3
t + t0

6
5
4
3
t + t0

10
9
8
7
t + t0

10
9
8
7

t + t0



ΣΣΣt

s, f

t

s, f )T

t
s, f (µµµ
+ µµµ
t
s, f )T
(µµµ

µµµ

t
s, f

1 

g
g
A
s
s
u
a
G

g
g
A
s
s
u
a
G

g
g
A
s
s
u
a
G

g
g
A
s
s
u
a
G

g
i
E
e
R

g
i
E
e
R

g
i
E
e
R

g
i
E
e
R

g
i
E
g
o
L

g
i
E
g
o
L

g
i
E
g
o
L

g
i
E
g
o
L

t
a

M

c
e
V

t
a

M

c
e
V

t
a

M

c
e
V

t
a

M

c
e
V

Yt
s,f = hga({pi

s,j}i=t−t0,...,t+t0

j∈Jf

),

(7)

where hga is the mapping of the GaussAgg layer, Yt
the output of the GaussAgg layer.

s,f is

SPD matrix

The next layer ReEig [19] introduces non-linear trans-

formations of SPD matrices via a mapping deﬁned as:

g
g
A
s
s
u
a
G

"ΣΣΣs, f + µµµs, f (µµµs, f )T

(µµµs, f )T

µµµs, f

1 #

SPD matrix

g
g
A
s
s
u
a
G

Yt

s,f = hr(Xt

s,f ) = U max(ǫI, V)UT ,

(8)

where hr is the mapping of the ReEig layer, Xt
s,f = UVUT is
are the input and output SPD matrices, Xt
the eigen-decomposition of Xt
s,f , ǫ is a rectiﬁcation thresh-
old, I is the identity matrix, max(ǫI, V) is a diagonal matrix
whose diagonal elements are deﬁned as:

s,f and Yt

s,f

(max(ǫI, V))(i, i) = (cid:26) V(i, i)

ǫ

if V(i, i) > ǫ
if V(i, i) ≤ ǫ.

(9)

After the ReEig layer, the LogEig layer [19] is used to
map SPD matrices to Euclidean spaces. Formally, the map-
ping of this layer is deﬁned as:

Figure 4: The architecture of ST-GA-NET (two different
branches are shown).

Yt

s,f = hl(Xt

s,f ) = log(Xt

s,f ) = U log(V)UT ,

(10)

where hl is the mapping of the LogEig layer, Xt
are the input and output SPD matrices, as before.

s,f and Yt

s,f

The next layer, referred to as VecMat, vectorizes SPD

matrices by the following mapping [48]:

s,f ) =

s,f , ΣΣΣt
N (p; µµµt
1
|2πΣΣΣt
s,f|

1
2

exp(−

1
2

(p − µµµt

s,f )T (ΣΣΣt

s,f )−1(p − µµµt

s,f )),

(3)

where |.| is the determinant, µµµt
s,f is the mean vector and
ΣΣΣt
s,f is the covariance matrix. The parameters of the Gaus-
sian can be estimated as:

µµµt

s,f =

1

(2t0 + 1)|Jf| Xj∈Jf

t+t0

Xi=t−t0

pi

s,j,

(4)

ΣΣΣt

s,f =

1

(2t0 + 1)|Jf| Xj∈Jf

t+t0

Xi=t−t0

(pi

s,j−µµµt

s,f )(pi

s,j−µµµt

s,f )T .

(5)
Based on the method in [34] that embeds the space of Gaus-
sians in the Riemannian symmetric space, the Gaussian can
be identiﬁed as a SPD matrix given by:

yt
s,f = hvm(Xt
√2Xt
s,f (dc
Xt

s,f (1, dc

out + 1, dc

s,f ) = [Xt
out + 1), Xt

out + 1)]T ,

s,f (1, 1),√2Xt
s,f (2, 2),√2Xt

s,f (1, 2), . . . ,

s,f (2, 3), . . . ,

(11)

where hvm is the mapping of the VecMat layer, Xt
Rdc
Xt
Xt
off-diagonal entries.

s,f ∈
s,f is the output vector,
out + 1, are the diagonal entries of
out + 1, are the

out+1 is the input matrix, yt
s,f (i, i), i = 1, . . . , dc
s,f and Xt

s,f (i, j), i < j, i, j = 1, . . . , dc

We again assume that yt

e, are indepen-
dent and identically distributed samples from a Gaussian
N (y; µµµs,f , ΣΣΣs,f ) whose parameters can be estimated as:

s,f , t = ts

b, . . . , ts

µµµs,f =

1
e − ts
ts
b + 1

ts
e

Xt=ts

b

yt

s,f ,

(12)

Yt

s,f = (cid:20)ΣΣΣt

s,f + µµµt
(µµµt

s,f (µµµt
s,f )T

s,f )T µµµt

s,f

1 (cid:21) .

(6)

ΣΣΣs,f =

The GaussAgg layer is designed to perform the compu-

1
e − ts
ts
b + 1

ts
e

Xt=ts

b

(yt

s,f −µµµs,f )(yt

s,f −µµµs,f )T . (13)

tation of Eq. 6, that is:

The second GaussAgg layer then performs the mapping:

12039

ΣΣΣk

s, j



k

s, j)T

k
s, j(µµµ
+ µµµ
s, j)T
k
(µµµ

µµµ

k
s, j

1 

sub-sequence 1

sub-sequence NS

sub-sequence 1

sub-sequence NS

sub-sequence 1

sub-sequence NS

sub-sequence 1

sub-sequence NS

33

33

33

33

4

4

4

4

5

5

5

5

6

6

6

6

GaussAgg

GaussAgg

GaussAgg

GaussAgg

GaussAgg

GaussAgg

GaussAgg

GaussAgg

dc
out

SPD matrix

ReEig

ReEig

ReEig

ReEig

ReEig

ReEig

ReEig

ReEig

LogEig

LogEig

LogEig

LogEig

LogEig

LogEig

LogEig

LogEig

VecMat

VecMat

VecMat

VecMat

VecMat

VecMat

VecMat

VecMat

"ΣΣΣs, f + µµµs, f (µµµs, f )T

(µµµs, f )T

µµµs, f

1 #

GaussAgg

Figure 5: Illustration of a branch of TS-GA-NET.

Ys,f = hga({yt

b ,...,ts
e )

s,f}t=ts
(µµµs,f )T

= (cid:20)ΣΣΣs,f + µµµs,f (µµµs,f )T µµµs,f
1 (cid:21) .

(14)

The resulting SPD matrix Ys,f describes variations of ﬁn-
ger f along sub-sequence s.

3.4. Temporal Spatial Gaussian Aggregation Sub 

Network

Similarly to ST-GA-NET, TS-GA-NET is composed of
30 branches where each branch aggregates features for a
sub-sequence of a speciﬁc ﬁnger. The sub-sequences are
constructed in exactly the same way as ST-GA-NET. How-
ever, the feature aggregation procedure at the ﬁrst and sec-
ond GaussAgg layers are performed differently. More pre-
cisely, considering the branch associated with sub-sequence
s and ﬁnger f . First, sub-sequence s is further divided
into NS sub-sequences of equal length. Let ts
e,k,
k = 1, . . . , NS, be the beginning and ending frames of
these sub-sequences. Then for a given hand joint j ∈ Jf
and sub-sequence k, the ﬁrst GaussAgg layer computes a
SPD matrix given as:

b,k and ts

GaussAgg layer of TS-GA-NET then performs the follow-
ing mapping:

Ys,f = hga({yk

s,j}k=1,...,NS

j∈Jf

)

= (cid:20)ΣΣΣs,f + µµµs,f (µµµs,f )T µµµs,f
1 (cid:21) ,

(µµµs,f )T

where µµµs,f and ΣΣΣs,f can be estimated as:

µµµs,f =

1

NS|Jf| Xj∈Jf

NS

Xk=1

yk

s,j,

(16)

(17)

ΣΣΣs,f =

1

NS|Jf| Xj∈Jf

NS

Xk=1

(yk

s,j−µµµs,f )(yk

s,j−µµµs,f )T . (18)

3.5. SPD Matrix Learning and Classiﬁcation Sub 

Network

The outputs of sub-networks ST-GA-NET and TS-GA-
NET are sets of SPD matrices. The objective of the classi-
ﬁcation sub-network (see Fig. 6) is to transform those sets
to a new SPD matrix, then map it to an Euclidean space for
classiﬁcation. The mapping hspda of the SPDAgg layer is
deﬁned as:

Yk

s,j = (cid:20)ΣΣΣk

s,j + µµµk
(µµµk

s,j(µµµk
s,j)T

s,j)T µµµk
s,j

1 (cid:21) ,

(15)

Y = hspda((X1, . . . , XN ); W1, . . . , WN )

N

ts
e,k
t=ts

b,k

pt

s,j and ΣΣΣk

s,j =

where µµµk

ts
e,k

1
−ts
Note that Yk

b,k+1 P

s,j =
ts
e,k
t=ts

b,k

ts
e,k

(pt

1
−ts

b,k+1 P
s,j − µµµk

s,j)(pt

s,j − µµµk

s,j)T .

s,j encodes the ﬁrst- and second-order statis-
tics of hand joint j computed within sub-sequence k. This
temporal variation of individual joints is not captured by
the ﬁrst GaussAgg layer of ST-GA-NET. The resulting SPD
matrices are processed through the ReEig, LogEig and Vec-
Mat layers. Let yk
s,j, k = 1, . . . , NS, j ∈ Jf , be the out-
put vectors of the VecMat layer of the branch. The second

(19)

WiXi(Wi)T ,

=

Xi=1
where Xi ∈ Rds
matrices, Wi ∈ Rds
Y ∈ Rds

×ds

out

in

×ds

in , i = 1, . . . , N , are the input SPD
×ds
in are the transformation matrices,

out

out is the output matrix.

To guarantee that the output Y is SPD, we remark that

the right-hand side of Eq. (19) can be rewritten as:

WiXi(Wi)T = ˆW diag(X1, . . . , XN )( ˆW)T , (20)

N

Xi=1

12040

g
g
A
D
P
S

g
i
E
g
o
L

c
F

x
a
M

t
f
o
S

Log

Vectorize

SVM

Gesture labels

Figure 6: The architecture of SPDC-NET.

where ˆW = [W1, . . . , WN ] and diag(X1, . . . , XN ) is
constructed such that its diagonal contains the diagonal en-
tries of X1, . . . , XN :

diag(X1, . . . , XN ) = 


X1 . . . . . . . . .
. . . X2 . . . . . .
. . . . . . . . . XN


 .

(21)

It can be easily seen that diag(X1, . . . , XN ) is a
valid SPD matrix, as for any vector x 6= 0, one has
xT diag(X1, . . . , XN )x = PN
i=1(xi)T Xixi, where x =
[(x1)T , . . . , (xN )T ]T and the vectors xi, i = 1, . . . , N ,
have equal sizes. The right-hand side of the above equation
is strictly positive since (xi)T Xixi ≥ 0,∀i = 1, . . . , N ,
and there must exist i′ ∈ {1, . . . , N} such that xi′ 6= 0 (as
x 6= 0), which implies that (xi′ )T Xi′ xi′ > 0.
Inspired by [19], we assume that the combined matrix
ˆW = [W1, . . . , WN ] is a full row rank matrix. Then opti-
mal solutions of the transformation matrices are achieved by
additionally assuming that ˆW resides on a compact Stiefel
manifold St(ds
in)1. The transformation matrices
Wi are updated by optimizing ˆW and projecting the op-
timal ˆW on its columns. Note that the constraint on the
dimension ds

out, N × ds

out of the output Y is: ds

out ≤ N ds
in.

To map the output SPD matrix of the SPDAgg layer to
an Euclidean space, we use the LogEig layer, followed by a
fully connected (FC) layer and a softmax layer.

3.6. Gesture Recognition

The SPDAgg layer outputs a matrix B∈ Rds

out for each
gesture sequence (see Fig. 6). This matrix is then trans-
formed to its matrix logarithm and ﬁnally vectorized. The
ﬁnal representation of the gesture sequence is v = [b1,1,
√2b1,2,√2b1,3, . . . ,√2b1,ds
out ]T
where bi,i, i = 1, . . . , ds
out, are the diagonal entries
of log(B) and bi,j, i < j, i, j = 1, . . . , ds
out, are the
off-diagonal entries of log(B).

, b2,2,√2b2,3, . . . , bds

out,ds

out

3.7. Relation with Previous Works

Our approach is closely related to [19, 54]. We point
out in the following paragraphs the relations between the
proposed network and those introduced in [19, 54].

1A compact Stiefel manifold St(ds

out, N × ds

in) is the set of ds

out-

dimensional orthonormal matrices of RN ×ds

in .

• Our network considers temporal modeling for hand
gesture recognition, while temporal modeling is not
considered in [54] as they focus on image classiﬁca-
tion tasks. Moreover, in our work, a Gaussian is iden-
tiﬁed as a SPD matrix, while [54] identiﬁes a Gaussian
as the square root of a SPD matrix.

• Our network takes directly 3D coordinates of hand
joints as input, while in [19], covariance matrices must
be computed beforehand as input of their network.

• Our network relies not only on the second-order infor-
mation (covariance) as [19] but also on the ﬁrst-order
information (mean). The ﬁrst-order information has
been proven to be useful in capturing the extra distri-
bution information of low-level features [42]. More-
over, we consider the ﬁrst- and second-order informa-
tion for different subsets of hand joints, while [19] uses
the whole set of joints to compute statistics. Our net-
work is thus based on a ﬁner granularity than [19].

• Our network combines two different and complemen-
tary architectures to better capture relevant statistics
for the recognition task, which makes our network dis-
tinct from those of [19, 54].

4. Experiments

We conducted experiments using the Dynamic Hand
Gesture (DHG) dataset [46, 47] and the First-Person Hand
Action (FPHA) dataset [12]. In all experiments, the dimen-
sion of a output feature vector of the convolutional layer
was set to 9 (dc
out = 9), the dimensions of the transforma-
tion matrices of the SPDAgg layer were set to 200 × 56
in = 56, ds
(ds
out = 200). All sequences of the two datasets
were normalized to have 500 frames (NF = 500)2. The
batch size and the learning rate were set to 30 and 0.01, re-
spectively. The rectiﬁcation threshold ǫ for the ReEig layer
was set to 0.0001 [19]. The network trained at epoch 15 was
used to create the ﬁnal gesture representation. The clas-
siﬁer was learned using the LIBLINEAR library [9] with
L2-regularized L2-loss (dual) where C was set to 1, the tol-
erance of termination criterion was set to 0.1 and no bias
term was added. For FPHA dataset, the non-optimized CPU
implementation of our network on a 3.4GHz machine with
24GB RAM and Matlab R2015b takes about 22 minutes
per epoch and 7 minutes per epoch for training and testing,
respectively. In the following, we provide details on the ex-
perimental settings and results obtained for each dataset.

4.1. Datasets and Experimental Settings

DHG dataset. The DHG dataset contains 14 gestures
performed in two ways: using one ﬁnger and the whole

2We tested with NF = 300, 500, 800 and the difference between ob-

tained results were marginal.

12041

Num. of a hand joint’s neighbors FPHA DHG (14 gestures) DHG (28 gestures)

3
9

91.65

93.22

93.10

94.29

88.33

89.40

Table 1: Recognition accuracy (%) of our network for dif-
ferent settings of hand joint’s neighborhood.

t0
1
2
3

FPHA DHG (14 gestures) DHG (28 gestures)

93.22

93.04

93.04

94.29

94.17

94.29

89.40

89.04

89.40

Table 2: Recognition accuracy (%) of our network for dif-
ferent settings of t0.

hand. Each gesture is executed several times by different
actors. Gestures are subdivided into ﬁne and coarse cate-
gories. The dataset provides the 3D coordinates of 22 hand
joints as illustrated in Fig. 1(a). It has been split into 1960
train sequences (70% of the dataset) and 840 test sequences
(30% of the dataset) [47].

FPHA dataset. This dataset contains 1175 action videos
belonging to 45 different action categories, in 3 different
scenarios, and performed by 6 actors. Action sequences
present high inter-subject and intra-subject variability of
style, speed, scale, and viewpoint. The dataset provides the
3D coordinates of 21 hand joints as DHG dataset except for
the palm joint. We used the 1:1 setting proposed in [12]
with 600 action sequences for training and 575 for testing.

4.2. Ablation Study

In this section, we examine the inﬂuence of different
components of our network on its accuracy. The default
values of t0 and NS are set to 1 and 15, respectively.

Hand modeling. We evaluate the performance of our
network when only physical connections of hand joints are
used for the computations at the convolutional layer, i.e.,
connections between hand joints belonging to neighboring
ﬁngers are removed from the graph in Fig. 1 (b). Each joint
is now connected to at most three joints including itself. Re-
sults shown in Tab. 1 conﬁrm that the use of connections
other than physical connections of hand joints bring perfor-
mance improvement.
Time interval t0.

In this experiment, we vary t0 and
keep other components of our network unchanged. To en-
sure that the computation of covariance matrices is numer-
ically stable, we set t0 > 0. Tab. 2 shows the perfor-
mance of our network with three different settings of t0,
i.e. t0 = 1, 2, 3. Results suggest that using 3 consecutive
frames for the input of the ﬁrst GaussAgg layer of ST-GA-
NET is sufﬁcient to obtain good performance.

Number NS of sub-sequences in a branch. This ex-
periment is performed by varying NS while keeping other
components of our network unchanged. For the same

NS
15
20
25

FPHA DHG (14 gestures) DHG (28 gestures)

93.33

92.87

92.70

94.29

94.05

94.29

89.40

88.93

89.04

Table 3: Recognition accuracy (%) of our network for dif-
ferent settings of NS.

Network

FPHA DHG (14 gestures) DHG (28 gestures)

ST-HGR-NET

TS-HGR-NET

ST-TS-HGR-NET

91.83

90.96

93.22

93.21

93.33

94.29

89.29

88.21

89.40

Table 4: Recognition accuracy (%) of sub-networks ST-
GA-NET and TS-GA-NET.

reason related to the computation of covariance matrices,
NS must be in a certain interval. We tested with NS =
15, 20, 25. Results given in Tab. 3 indicate that our network
is not sensitive to different settings of NS.

Contribution of ST-GA-NET and TS-GA-NET. We
evaluate the performance of two networks, referred to as ST-
HGR-NET and TS-HGR-NET by removing sub-networks
TS-GA-NET and ST-GA-NET from our network, respec-
tively. Results shown in Tab. 4 reveal that none of both ST-
GA-NET and TS-GA-NET always provides the best per-
formances on the datasets. This motivates the need for their
combination using the component SPDC-NET and this con-
tributes to the overall performance of our global network
combining both TS-GA-NET and ST-GA-NET.

In the following, we report results obtained with default

settings of t0 and NS, i.e. t0 = 1 and NS = 15.

4.3. Comparison with State of the Art

DHG dataset. The comparison of our method and state-
of-the-art methods on DHG dataset is given in Tab. 5. The
accuracy of the method of [19] is obtained by using the
implementation provided by the authors with their default
parameter settings. Our method signiﬁcantly outperforms
the competing ones. The network of [19] also learns a
SPD matrix-based representation from skeletal data which
is similar in spirit to our network. However, they concate-
nate the 3D coordinates of joints at each frame to create the
feature vector of that frame, and their network’s input is the
covariance matrix computed from feature vectors over the
whole skeleton sequence. Thus, spatial and temporal re-
lationships of joints are not effectively taken into account.
By exploiting these relationships, our network improves the
recognition accuracy by 19.05% and 19.76% compared to
the results of [19] for experiments with 14 and 28 ges-
tures, respectively. For more comparison of our method
and existing methods, we conducted experiments using the
leave-one-subject-out experimental protocol. Results on
Tabs. 6 (14 gestures) and 7 (28 gestures) demonstrate that

12042

Method

Year Color Depth Pose

Accuracy (%)

14 gestures

28 gestures

Oreifej and Liu [40]

Devanne et al. [3]

Huang et al. [19]

Ohn-Bar and Trivedi [38]

Chen et al. [2]

De Smedt et al. [46]

Devineau et al. [4]

ST-TS-HGR-NET

2013

2015

2017

2013

2017

2016

2018

✗

✗

✗

✗

✗

✗

✗

✗

X

✗

✗

✗

✗

✗

✗

✗

✗

X

X

X

X

X

X

X

78.53

79.61

75.24

83.85

84.68

88.24

91.28

94.29

74.03

62.00

69.64

76.53

80.32

81.90

84.35

89.40

Table 5: Recognition accuracy comparison of our method
and state-of-the-art methods on DHG dataset with 1960 se-
quences for training and 840 sequences for testing. The best
result in each column is marked in bold.

Method

Year Color Depth Pose Accuracy (%)

De Smedt et al., [46]

CNN+LSTM [36]

Weng et al., [55]

ST-TS-HGR-NET

2016

2018

2018

✗

✗

✗

✗

✗

✗

✗

✗

X

X

X

X

83.1

85.6

85.8

87.3

Method

Year Color Depth Pose Accuracy (%)

Two stream-color [10]

Two stream-ﬂow [10]

Two stream-all [10]
HOG2-depth [39]
HOG2-depth+pose [39]
HON4D [40]

Novel View [41]

1-layer LSTM [62]

2-layer LSTM [62]

Moving Pose [59]

Lie Group [49]

HBRNN [6]

Gram Matrix [61]

TF [11]

JOULE-color [18]

JOULE-depth [18]

JOULE-pose [18]

JOULE-all [18]

Huang et al. [19]

Huang et al. [23]

ST-TS-HGR-NET

2016

2016

2016

2013

2013

2013

2016

2016

2016

2013

2014

2015

2016

2017

2015

2015

2015

2015

2017

2018

X

X

X

✗

✗

✗

✗

✗

✗

✗

✗

✗

✗

✗

X

✗

✗

X

✗

✗

✗

✗

✗

✗

X

X

X

X

✗

✗

✗

✗

✗

✗

✗

✗

X

✗

X

✗

✗

✗

✗

✗

✗

✗

X

✗

✗

X

X

X

X

X

X

X

✗

✗

X

X

X

X

X

61.56

69.91

75.30

59.83

66.78

70.61

69.21

78.73

80.14

56.34

82.69

77.40

85.39

80.69

66.78

60.17

74.60

78.78

84.35

77.57

93.22

Table 6: Recognition accuracy comparison of our method
and state-of-the-art methods on DHG dataset using the
leave-one-subject-out experimental protocol with 14 ges-
tures. The best result in each column is marked in bold.

Table 8: Recognition accuracy comparison of our method
and state-of-the-art methods on FPHA dataset. The best re-
sult in each column is marked in bold.

Method

Year Color Depth Pose Accuracy (%)

De Smedt et al., [46]

CNN+LSTM [36]

Weng et al., [55]

ST-TS-HGR-NET

2016

2018

2018

✗

✗

✗

✗

✗

✗

✗

✗

X

X

X

X

80.0

81.1

80.4

83.4

Table 7: Recognition accuracy comparison of our method
and state-of-the-art methods on DHG dataset using the
leave-one-subject-out experimental protocol with 28 ges-
tures. The best result in each column is marked in bold.

our method achieves the best results compared to existing
methods on this protocol. In particular, our method outper-
forms the most recent work [55] by 1.5 and 3 percent points
for experiments with 14 and 28 gestures, respectively.

FPHA dataset. Tab. 8 shows the accuracies of our
method and state-of-the-art methods on FPHA dataset. The
accuracies of the methods of [19] and [23] are obtained
by using the implementations provided by the authors with
their default parameter settings. Despite the simplicity of
our network compared to the competing deep neural net-
works, it is superior to them on this dataset. The best per-
forming method among state-of-the-art methods is Gram
Matrix, which gives 85.39% accuracy, 7.83 percent points
inferior to our method. The remaining methods are out-
performed by our method by more than 10 percent points.
We observe that the method of [19] performs well on this
dataset. However, since this method does not fully exploit
spatial and temporal relationships of skeleton joints, it gives

a signiﬁcantly lower accuracy than our method. Results
again conﬁrm the effectiveness of the proposed network ar-
chitecture for hand gesture recognition.

5. Conclusion

We have presented a new neural network for hand ges-
ture recognition that learns a discriminative SPD matrix en-
coding the ﬁrst-order and second-order statistics. We have
provided the experimental evaluation on two benchmark
datasets showing that our method outperforms state-of-the-
art methods.

Acknowledgments. This material is based upon work
supported by the European Union and the Region Nor-
mandie under the project IGIL. We thank Guillermo Garcia-
Hernando for providing access to FPHA dataset [12].

References

[1] P. Bilinski and F. Bremond. Video Covariance Matrix Log-
arithm for Human Action Recognition in Videos. In IJCAI,
pages 2140–2147, 2015. 2

[2] X. Chen, H. Guo, G. Wang, and L. Zhang. Mo-
tion Feature Augmented Recurrent Neural Network for
Skeleton-based Dynamic Hand Gesture Recognition. CoRR,
abs/1708.03278, 2017. 8

[3] M. Devanne, H. Wannous, S. Berretti, P. Pala, M. Daoudi,
and A. D. Bimbo. 3-D Human Action Recognition by Shape
Analysis of Motion Trajectories on Riemannian Manifold.
IEEE Transactions on Cybernetics, 45(7):1340–1352, 2015.
8

12043

[4] G. Devineau, F. Moutarde, W. Xi, and J. Yang. Deep Learn-
ing for Hand Gesture Recognition on Skeletal Data. In IEEE
International Conference on Automatic Face Gesture Recog-
nition, pages 106–113, May 2018. 2, 8

[5] Z. Dong, S. Jia, C. Zhang, M. Pei, and Y. Wu. Deep Manifold
Learning of Symmetric Positive Deﬁnite Matrices with Ap-
plication to Face Recognition. In AAAI, pages 4009–4015,
2017. 2

[6] Y. Du, W. Wang, and L. Wang. Hierarchical Recurrent Neu-
In

ral Network for Skeleton Based Action Recognition.
CVPR, pages 1110–1118, 2015. 2, 8

[7] M. Engin, L. Wang, L. Zhou, and X. Liu. DeepKSPD:
Learning Kernel-matrix-based SPD Representation for Fine-
grained Image Recognition. CoRR, abs/1711.04047, 2017.
2

[8] G. Evangelidis, G. Singh, and R. Horaud. Skeletal Quads:
In

Human Action Recognition Using Joint Quadruples.
ICPR, pages 4513–4518, 2014. 2

[9] R.-E. Fan, K.-W. Chang, C.-J. Hsieh, X.-R. Wang, and C.-J.
Lin. LIBLINEAR: A Library for Large Linear Classiﬁcation.
Journal of Machine Learning Research, 9:1871–1874, 2008.
6

[10] C. Feichtenhofer, A. P., and A. Zisserman. Convolutional
Two-Stream Network Fusion for Video Action Recognition.
CVPR, pages 1933–1941, 2016. 8

[11] G. Garcia-Hernando and T.-K. Kim. Transition Forests:
Learning Discriminative Temporal Transitions for Action
Recognition. In CVPR, pages 407–415, 2017. 8

[12] G. Garcia-Hernando, S. Yuan, S. Baek, and T.-K. Kim. First-
Person Hand Action Benchmark with RGB-D Videos and 3D
Hand Pose Annotations. In CVPR, 2018. 6, 7, 8

[13] R. Girshick. Fast R-CNN. In ICCV, pages 1440–1448, 2015.

2

[14] K. Guo, P. Ishwar, and J. Konrad. Action Recognition From
Video Using Feature Covariance Matrices. IEEE Transac-
tions on Image Processing, 22(6):2479–2494, 2013. 2

[15] M. Harandi, M. Salzmann, and R. Hartley. Dimensionality
Reduction on SPD Manifolds: The Emergence of Geometry-
Aware Methods. TPAMI, 40:48–62, 2018. 1

[16] M. T. Harandi, C. Sanderson, A. Sanin, and B. C. Lovell.
Spatio-temporal Covariance Descriptors for Action and Ges-
ture Recognition. In WACV, pages 103–110, 2013. 2

[17] K. He, X. Zhang, S. Ren, and J. Sun. Deep Residual Learning
for Image Recognition. In CVPR, pages 770–778, June 2016.
2

[18] J. Hu, W. Zheng, J. Lai, and J. Zhang. Jointly Learning Het-
In

erogeneous Features for RGB-D Activity Recognition.
CVPR, pages 5344–5352, 2015. 8

[19] Z. Huang and L. V. Gool. A Riemannian Network for SPD
Matrix Learning. In AAAI, pages 2036–2042, 2017. 1, 2, 4,
6, 7, 8

[20] Z. Huang, C. Wan, T. Probst, and L. V. Gool. Deep Learning
on Lie Groups for Skeleton-Based Action Recognition. In
CVPR, pages 6099–6108, 2017. 2

Circuits and Systems for Video Technology, 28(10):2513–
2523, 2018. 1

[22] Z. Huang, R. Wang, S. Shan, X. Li, and X. Chen. Log-
euclidean Metric Learning on Symmetric Positive Deﬁnite
Manifold with Application to Image Set Classiﬁcation.
In
ICML, pages 720–729, 2015. 1

[23] Z. Huang, J. Wu, and L. V. Gool. Building Deep Networks

on Grassmann Manifolds. In AAAI, 2018. 2, 8

[24] C. Ionescu, O. Vantzos, and C. Sminchisescu. Matrix Back-
propagation for Deep Networks with Structured Layers. In
ICCV, pages 2965–2973, 2015. 2

[25] Q. Ke, M. Bennamoun, S. An, F. A. Sohel, and F. Boussa¨ıd.
A New Representation of Skeleton Sequences for 3D Action
Recognition. In CVPR, pages 4570–4579, 2017. 2

[26] A. Krizhevsky, I. Sutskever, and G. E. Hinton.

ImageNet
Classiﬁcation with Deep Convolutional Neural Networks. In
NIPS, pages 1097–1105, 2012. 2

[27] C. Li, Z. Cui, W. Zheng, C. Xu, and J. Yang. Spatio-
Temporal Graph Convolution for Skeleton Based Action
Recognition. In AAAI, 2018. 1, 2

[28] P. Li, Q. Wang, H. Zeng, and L. Zhang. Local Log-Euclidean
Multivariate Gaussian Descriptor and Its Application to Im-
age Classiﬁcation. TPAMI, 39(4):803–817, 2017. 3

[29] P. Li, J. Xie, Q. Wang, and W. Zuo. Is Second-order Informa-
tion Helpful for Large-scale Visual Recognition? In ICCV,
pages 2070–2078, 2017. 2

[30] J. Liu, A. Shahroudy, D. Xu, and G. Wang. Spatio-Temporal
LSTM with Trust Gates for 3D Human Action Recognition.
In ECCV, pages 816–833, 2016. 2

[31] J. Liu, G. Wang, P. Hu, L.-Y. Duan, and A. C. Kot. Global
Context-Aware Attention LSTM Networks for 3D Action
Recognition. In CVPR, pages 3671–3680, 2017. 2

[32] M. Liu, H. Liu, and C. Chen. Enhanced Skeleton Visualiza-
tion for View Invariant Human Action Recognition. Pattern
Recognition, 68:346–362, 2017. 2

[33] M. Liu and J. Yuan. Recognizing Human Actions as The

Evolution of Pose Estimation Maps. In CVPR, 2018. 2

[34] M. Lovri´c, M. Min-Oo, and E. A. Ruh. Multivariate Nor-
mal Distributions Parametrized As a Riemannian Symmetric
Space. Journal of Multivariate Analysis, 74(1):36–48, 2000.
3, 4

[35] J. Luo, W. Wang, and H. Qi. Group Sparsity and Geome-
try Constrained Dictionary Learning for Action Recognition
from Depth Maps. In ICCV, pages 1809–1816, Dec 2013. 2
[36] J. C. Nez, R. Cabido, J. J. Pantrigo, A. S. Montemayor,
and J. F. Vlez. Convolutional Neural Networks and Long
Short-Term Memory for Skeleton-based Human Activity and
Hand Gesture Recognition. Pattern Recognition, 76(C):80–
94, 2018. 2, 8

[37] F. Oﬂi, R. Chaudhry, G. Kurillo, R. Vidal, and R. Bajcsy. Se-
quence of The Most Informative Joints (SMIJ): A New Rep-
resentation for Human Skeletal Action Recognition. Jour-
nal of Visual Communication and Image Representation,
25(1):24–38, 2014. 2

[21] Z. Huang, R. Wang, X. Li, W. Liu, S. Shan, L. V. Gool,
and X. Chen. Geometry-Aware Similarity Learning on SPD
Manifolds for Visual Recognition.
IEEE Transactions on

[38] E. Ohn-Bar and M. M. Trivedi. Joint Angles Similarities and
HOG2 for Action Recognition. In CVPRW, pages 465–470,
2013. 8

12044

[57] X. Yang and Y. L. Tian. EigenJoints-based Action Recog-
In CVPRW,

nition Using Naive-Bayes-Nearest-Neighbor.
pages 14–19, 2012. 2

[58] C. Yuan, W. Hu, X. Li, S. Maybank, and G. Luo. Human
Action Recognition Under Log-euclidean Riemannian Met-
ric. In ACCV, pages 343–353, 2010. 2

[59] M. Zanﬁr, M. Leordeanu, and C. Sminchisescu. The Mov-
ing Pose: An Efﬁcient 3D Kinematics Descriptor for Low-
Latency Action Recognition and Detection. In ICCV, pages
2752–2759, 2013. 8

[60] T. Zhang, W. Zheng, Z. Cui, and C. Li. Deep Manifold-to-
Manifold Transforming Network. CoRR, abs/1705.10732,
2017. 1

[61] X. Zhang, Y. Wang, M. Gou, M. Sznaier, and O. Camps.
Efﬁcient Temporal Sequence Comparison and Classiﬁcation
Using Gram Matrix Embeddings on a Riemannian Manifold.
In CVPR, pages 4498–4507, 2016. 8

[62] W. Zhu, C. Lan, J. Xing, W. Zeng, Y. Li, L. Shen, and X. Xie.
Co-occurrence Feature Learning for Skeleton Based Action
Recognition Using Regularized Deep LSTM Networks. In
AAAI, pages 3697–3703, 2016. 8

[39] E. Ohn-Bar and M. M. Trivedi. Hand Gesture Recognition in
Real Time for Automotive Interfaces: A Multimodal Vision-
Based Approach and Evaluations. IEEE Transactions on In-
telligent Transportation Systems, 15(6):2368–2377, 2014. 8

[40] O. Oreifej and Z. Liu. HON4D: Histogram of Oriented 4D
Normals for Activity Recognition from Depth Sequences. In
CVPR, pages 716–723, June 2013. 8

[41] H. Rahmani and A. Mian. 3D Action Recognition from
Novel Viewpoints. In CVPR, pages 1506–1515, June 2016.
8

[42] J. Sanchez, F. Perronnin, T. Mensink, and J. Verbeek. Image
Classiﬁcation with the Fisher Vector: Theory and Practice.
IJCV, 105(3):222–245, 2013. 6

[43] G. Serra, C. Grana, M. Manfredi, and R. Cucchiara. GOLD:
Gaussians of Local Descriptors for Image Representation.
CVIU, 134:22–32, 2015. 3

[44] A. Shahroudy, J. Liu, T. T. Ng, and G. Wang. NTU RGB+D:
A Large Scale Dataset for 3D Human Activity Analysis. In
CVPR, pages 1010–1019, 2016. 2

[45] L. Shi, Y. Zhang, J. Cheng, and H. Lu. Non-Local Graph
Convolutional Networks for Skeleton-Based Action Recog-
nition. CoRR, abs/1805.07694, 2018. 1

[46] Q. D. Smedt, H. Wannous, and J. Vandeborre. Skeleton-
In CVPRW,

Based Dynamic Hand Gesture Recognition.
pages 1206–1214, June 2016. 2, 6, 8

[47] Q. D. Smedt, H. Wannous, J.-P. Vandeborre, J. Guerry, B. L.
Saux, and D. Filliat. 3D Hand Gesture Recognition Using a
Depth and Skeletal Dataset. In Eurographics Workshop on
3D Object Retrieval, pages 33–38, 2017. 6, 7

[48] O. Tuzel, F. Porikli, and P. Meer.

Pedestrian Detec-
tion via Classiﬁcation on Riemannian Manifolds. TPAMI,
30(10):1713–1727, 2008. 4

[49] R. Vemulapalli, F. Arrate, and R. Chellappa. Human Action
Recognition by Representing 3D Skeletons as Points in a Lie
Group. In CVPR, pages 588–595, 2014. 1, 2, 8

[50] C. Wang, Y. Wang, and A. L. Yuille. An Approach to Pose-
Based Action Recognition. In CVPR, pages 915–922, 2013.
2

[51] H. Wang and L. Wang. Modeling Temporal Dynamics and
Spatial Conﬁgurations of Actions Using Two-Stream Recur-
rent Neural Networks. CVPR, pages 3633–3642, 2017. 2

[52] J. Wang, Z. Liu, Y. Wu, and J. Yuan. Mining Actionlet
Ensemble for Action Recognition with Depth Cameras. In
CVPR, pages 1290–1297, 2012. 1

[53] P. Wang, Z. Li, Y. Hou, and W. Li. Action Recognition Based
on Joint Trajectory Maps Using Convolutional Neural Net-
works. In ACM MM, pages 102–106, 2016. 2

[54] Q. Wang, P. Li, and L. Zhang. G2DeNet: Global Gaussian
Distribution Embedding Network and Its Application to Vi-
sual Recognition. In CVPR, pages 2730–2739, 2017. 2, 6

[55] J. Weng, M. Liu, X. Jiang, and J. Yuan. Deformable Pose
Traversal Convolution for 3D Action and Gesture Recogni-
tion. In ECCV, 2018. 2, 8

[56] S. Yan, Y. Xiong, and D. Lin. Spatial Temporal Graph
Convolutional Networks for Skeleton-Based Action Recog-
nition. In AAAI, 2018. 1, 2

12045

