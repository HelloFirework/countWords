Temporal Transformer Networks:

Joint Learning of Invariant and Discriminative Time Warping

Suhas Lohit

Qiao Wang

Pavan Turaga

Geometric Media Lab, Arizona State University

{slohit, qiao.wang, pturaga}@asu.edu

Abstract

Many time-series classiﬁcation problems involve devel-
oping metrics that are invariant to temporal misalignment.
In human activity analysis, temporal misalignment arises
due to various reasons including differing initial phase, sen-
sor sampling rates, and elastic time-warps due to subject-
speciﬁc biomechanics. Past work in this area has only
looked at reducing intra-class variability by elastic tempo-
ral alignment. In this paper, we propose a hybrid model-
based and data-driven approach to learn warping functions
that not just reduce intra-class variability, but also increase
inter-class separation. We call this a temporal transformer
network (TTN). TTN is an interpretable differentiable mod-
ule, which can be easily integrated at the front end of a
classiﬁcation network. The module is capable of reducing
intra-class variance by generating input-dependent warp-
ing functions which lead to rate-robust representations. At
the same time, it increases inter-class variance by learning
warping functions that are more discriminative. We show
improvements over strong baselines in 3D action recogni-
tion on challenging datasets using the proposed framework.
The improvements are especially pronounced when training
sets are smaller.

1. Introduction

Guaranteed invariances of machine learning algorithms
to nuisance parameters is an important design consideration
in critical applications. Classically, invariances can only be
guaranteed under a model-based approach. Learned repre-
sentations however have not been able to guarantee invari-
ances, except by empirical tests [8]. Learning invariant rep-
resentations that build on analytical models of phenomena
may hold the cue to bridge this gap, and can also help lend
explainability to the model.

However, deep learning presents a challenge for learn-
ing explainable invariants, primarily due to incompatibility

* Qiao Wang is now at SRI International.

between the mathematical approaches that underly invari-
ant design, and the architectures prevalent in deep learn-
ing. There have been recent attempts at leveraging model-
based and data-driven approaches to learn invariant repre-
sentations across spatial transforms [16, 14, 38], illumi-
nation [33, 21], and viewpoints [20]. On the other hand,
learning invariant/robust representations to temporal rate-
variations has received signiﬁcantly less attention. If tack-
led well, many applications of human activity modeling will
beneﬁt, including more robust recognition algorithms for
human-robot interaction, richer synthesis of human motion
for computer-generated imagery, and health applications.

Hybrid model- and data-based approach: In this pa-
per, our chosen application is activity classiﬁcation from
RGBD devices, where skeleton data are available. Activ-
ities such as walking can be performed at different rates by
different subjects owing to physiological and biomechani-
cal factors. We would like to design representations that
provide robust classiﬁcation against such nuisance factors.
To do this, we adopt a model-based approach, and constrain
certain layers in deep network using the model. The model
for temporal variability is adopted from past work in elas-
tic temporal alignment which considers temporal variability
as a result of a temporal diffeomorphism acting on a given
time-series [31]. The space of such diffeomorphisms has a
group structure, and can be converted to simpler geometric
constraints by exploiting contemporary square-root forms
to represent the diffeomorphic maps [29].

Compatibility with deep architectures: We design a
novel module, which we refer to as a Temporal Transformer
Network (TTN). The hallmark of this module is that it can
be easily integrated into existing time-series classiﬁers such
as Temporal Convolution Networks (TCNs) [17] and Long
Short-Term Memory (LSTM) networks [9]. TTN is ex-
plainable in the sense that it is designed so as to interact
with the classiﬁcation network in a predeﬁned, predictable
and visualizable manner. TTN is a trainable network added
at the beginning of the classiﬁer and operates on the input
sequence by performing selective temporal warping of the
input sequences. As such, it has the ability to factor out

12426

Figure 1. The Temporal Transformer Network (TTN) is a trainable module that is easily added at the beginning of a time-series classiﬁer.
Its function is to warp the input sequences so as to maximize the classiﬁcation performance, as shown in the ﬁgure for two classes of
waveforms which become more discriminative after passing through the TTN. The sub-modules of the TTN are explained in Section 4.

rate variations, if present in the data, as well as increase the
inter-class separation by learning to align sequences in dis-
similar classes away from each other.

Application impact: Recognition of human activities
from motion capture (mocap) systems such as OptiTrack
or depth sensors like Microsoft Kinect and Intel RealSense
has been gathering a great deal of interest in the recent past.
The cost of these sensors is ever-reducing and the increas-
ing effectiveness of pose estimation algorithms (e.g. [34])
makes 3D skeletons an important sensing modality for ac-
tion recognition. As the problem of action recognition
presents a large amount of variability both inter-class as
well as intra-class, we choose it as the focus of this paper.

Contributions
• We propose the Temporal Transformer Network (TTN),
which performs joint representation learning as well as
class-aware discriminative alignment for time-series clas-
siﬁcation including action trajectories.

• We design the TTN to generate highly expressive non-

parametric, order-preserving diffeomorphisms.

• The TTN exploits the non-uniqueness of the optimal
alignment (between equivalence classes) to generate dis-
criminative warps for improved classiﬁcation.

• The proposed TTN can be easily integrated into existing
time-series classiﬁcation architectures, with just a single
line of code to employ the warping module.

We validate our contributions by demonstrating improved
performance on small and large, and real and synthetic
datasets, for action recognition from 3D pose obtained from
two different modalities – Kinect and mocap. The com-
bined architecture of the TTN and the classiﬁer consis-
tently yields improved classiﬁcation performance compared
to several baseline classiﬁers.

2. Related work

Deep learning of invariant representations: One of the
main inspirations for this work is the paper by Jaderberg et

al. [11] on Spatial Transformer Networks (STNs) where a
smaller network ﬁrst predicts a geometric transform of the
input grid parameterized by afﬁne transforms or thin plate
splines. The transformation is then applied to the input be-
fore feeding it to the classiﬁcation network. A recent work
is that of Detlefsen et al. [4] who improve the performance
of spatial transformers by replacing afﬁne transforms and
thin plate splines with a richer class of parameterized dif-
feomorphic transforms called continuous piecewise-afﬁne
transforms, but at the expense of complex implementation
and considerably longer training times. Both these works
are aimed at building invariances to spatial geometric trans-
forms of images. Capsule networks by Sabour et al. [25]
expand the expressive capacity of CNNs by allowing them
to learn explicit spatial relationships. An interesting recent
work by Tallec and Ollivier [32] show that LSTM networks
have the capability to learn to warp input sequences. Our
experiments show that by integrating LSTMs with the mod-
ule designed in this paper, the performance can be further
increased, as the proposed framework can also lead to more
discriminative representations.

In this paper, we design a module to predict warping
functions in the temporal domain which when applied to the
input sequences lead to higher classiﬁcation performance.
This requires the predicted warping functions to satisfy the
order-preserving property. Moreover, in our case, the pre-
dicted warping functions are non-parameterized, can span
the entire space of rate-modifying transforms and are much
more expressive than earlier related works. The warping is
also elastic, as opposed to rigid deformations which is the
case with STNs. We note that these are important design
requirements in the case of temporally varying signals, that
are different from transforms in the 2D spatial domain.

Alignment of time-series data: The most commonly
used method to align time-series data is Dynamic Time
Warping (DTW) [2, 26]. DTW tries to minimize the L2
distance between two time series after a time warping is

12427

applied to one of them, and is agnostic of class informa-
tion. To address some of DTW’s shortcomings, new meth-
ods have been proposed recently, including the elastic func-
tional data and shape analyses [30, 31] which deﬁned proper
metrics that are invariant to time warping, and soft-DTW
which is a differentiable loss function that may be integrated
into neural networks [3]. There are also several works on
Canonical Time Warping (CTW) for multimodal data where
the time series from different streams are projected to a
common space (similar to canonical correlation analysis)
before aligning them [43]. Deep learning versions of CTW
have also been proposed recently [36, 35, 12].

One of the major differences between our proposed
method and the aforementioned optimization-based time
warping methods is that our approach performs discrimina-
tive warping based on class information and does not need
signal templates. This is further discussed in Section 4.
During the preparation of this document, we came across
the paper by Oh et al. [24] who propose a similar architec-
ture for clinical time series data classiﬁcation but restricted
to the space of linear time scaling and offsets.

3D action recognition using deep learning: As sensing
systems like Microsoft Kinect, Intel RealSense and camera-
based mocap systems are getting more effective at acquir-
ing depth and at human pose estimation with centimeter-
to millimeter-level accuracy, research and commercial in-
terest in employing 3D pose data for action recognition has
understandably increased. Recent experiments suggest that
for small datasets, recognition accuracies are better with 3D
pose information compared to video frames [7]. That sim-
ple landmark-based or skeleton-based action recognition
can be effective is supported by evidence from works in psy-
chology which show that humans are excellent at recogniz-
ing actions only from a few points on the human body [13].

Recurrent neural architectures, especially Long Short-
Term Memory (LSTM) networks have been used to per-
form 3D action recognition e.g. [5, 27]. Song et al. pro-
pose including layers for spatial and temporal attention
(STA-LSTM) [28] which greatly improves the recognition
performance. For majority of the experiments in this pa-
per, we will use the Temporal Convolution Network (TCN)
with residual connections [18] as they are effective, sim-
ple to build and faster to train compared to LSTM-based
networks. Additionally, Kim and Reiter have shown excel-
lent results on using TCNs for 3D action recognition [17].
This network outperforms STA+LSTM [28] for 3D action
recognition. They further show that TCNs can learn both
spatial and temporal attention without the need for special
attention layers. Also, the network ﬁlter activations are in-
terpretable by design because of the residual connections.
We also note that the TCN architecture presented in [17]
incorporates pooling mechanisms inside the network.

We note that more recently, newer architectures have

proposed modiﬁcations to baseline architectures by using
graph convolutions to better take into account the spatial
structure of the joints in the human body [39]. However, it
has a much higher computational load. Other representa-
tions include image-based ones [15, 20], and fusing skele-
ton information with velocity information [19] etc. Our
contributions in this paper are orthogonal to these works,
and the main focus of the paper is to design a specialized
module for learning rate-robust discriminative representa-
tions. As such, for our experiments, we choose two effec-
tive widely used simple-to-implement architectures as our
baselines – TCNs and LSTMs – and demonstrate improve-
ments in recognition performance over these frameworks.

3. Diffeomorphic models for rate variation

A continuous time-series can be represented as a single-
parameter curve, which we denote by α(.), where t ∈ [0, 1]
In our case, t is time and we assume
is the parameter.
α(t) ∈ RN . Another curve β is a resampling of α if
β = α ◦ γ, where ◦ is a function composition, and γ is the
resampling/warping function. We focus on a speciﬁc set Γ
of these warping functions (deﬁned below), and two curves
α1, α2 differing only by a change of rate of execution obey
the equation α1 = α2 ◦ γ, for some γ ∈ Γ. Figure 2 shows

Figure 2. Top-left, Bottom-left:
the trajectories and sampling
points of the same action (“wearing jacket”) before and after a
time warping (Center). The parameterized trajectories are visual-
ized in R3 by using the sums of x, y, z coordinates of all joints.
Notice how the time series of x, y, z, which are the inputs of a
neural network (Top-right and Bottom-right), are quite different
despite the action being the same. Here the action is segmented
and colored to highlight the rate variation.

12428

04080120160Frame index04080120160Frame indexWarping function04080120160Frame index-6-5-4-3-2-101234Valuexyz04080120160Frame index-6-5-4-3-2-101234Valuexyzan example of such time warping, illustrated in R3.

4. Temporal transformers for learning dis-

Given a 1-differentiable function γ deﬁned on the do-
main [0, T ], for γ to be an element of Γ, γ needs to satisfy
the following conditions:

γ(0) = 0, γ(1) = 1, and γ(t1) < γ(t2), if t1 < t2
The above conditions ﬁx the boundary conditions, and
imply that any γ ∈ Γ is a monotonically increasing func-
tion. This property is also called order-preserving which is
important to the current discussion of action recognition as
actions are critically dependent on sequencing/ordering of
poses/frames. It is easy to show that

(1)

• ∀γ1, γ2 ∈ Γ, γ1 ◦ γ2 ∈ Γ,
• γId ∈ Γ,
• ∀γ ∈ Γ, ∃γ−1 ∈ Γ s.t. γ ◦ γ−1 = γId, where γId(t) =

t, the identity warping function.

These properties imply that Γ admits a group structure with
the group action being function composition. We denote by
˙γ, the ﬁrst derivative of γ ∈ Γ, or

γ(t) = Z t

0

˙γ(t)dt,Z 1

0

˙γ(t)dt = γ(1) − γ(0) = 1

(2)

Further, due to the monotonically increasing property of
γ, we have ˙γ > 0. This, in conjunction with (2), implies that
˙γ has the properties of a probability distribution function
(positive, and integrates to 1), and the corresponding γ is
thus equivalent to a cumulative distribution function.

As we work with digitized signals from sensors such as
Kinect and mocap, we represent a discrete time series (ei-
ther signals or features) by X = {x1, x2, . . . , xT }. In this
paper, we will work with time series in RN . Each xt ∈ RN
is called a frame of the sequence X. More clearly, we have
α(t) = xt, t ∈ {1, 2, . . . , T }. The warping function in
the case of a discrete time signal is a discretized version
of γ ∈ Γ, which we represent using γ with a slight abuse
of notation. The derivative ˙γ can be approximated by ﬁrst
order numerical differencing. Thus, (2) now becomes

γ(t) =

t

Xi=1

˙γ(i)

and

1
T

T

Xi=1

˙γ(t) = 1.

(3)

Two sequences α and β are said to be equivalent if there
exists a γ ∈ Γ such that α = β◦γ, and the set {α◦γ |γ ∈ Γ}
is called the equivalence class of α under rate variations
and is denoted by [α]. In classical elastic alignment, given
two signals, a metric between sequences is deﬁned as the
minimal distance between their equivalence classes. This
approach can be used to develop class-speciﬁc templates,
and phase-amplitude separation [23] that reduces intra-class
variance, but does not promote inter-class separation. Once
the equivalence classes are deﬁned, metrics are designed
to compute distances between equivalence classes and de-
velop methods to compute statistical measures such as mean
and variance, which can be used to compute optimal align-
ments [31].

criminative warping functions

The main idea presented in this paper is to use a special-
ized module, which we call a Temporal Transformer Net-
work (TTN) for neural network-based classiﬁcation which,
given an input test sequence X, generates a warping func-
tion γ used to warp the input sequence by computing X ◦ γ
and feed it to the classiﬁcation network. It is important to
note that the warping is carried out using linear interpola-
tion. This makes it possible to train both the TTN and the
classiﬁer jointly end-to-end as the entire pipeline is (sub-)
differentiable. Another notable aspect of this framework is
that the warping functions are predicted without a “class-
template”. Even though this sounds paradoxical, we will
soon show that this allows our framework to jointly learn
features as well as achieve discriminative warps. This capa-
bility makes our framework more powerful than template-
based matching techniques like Dynamic Time Warping
(DTW) and variants [2, 26].

Key Insight: Given two input sequences X1 and X2
such that they differ only by a warping transform,
the
trained TTN would ideally predict γ1 and γ2, correspond-
ing to X1 and X2 respectively such that X1 ◦ γ1 = X2 ◦ γ2.
However, we note that γ1 and γ2 are not unique because
X1 ◦ γ1 ◦ γ = X2 ◦ γ2 ◦ γ, ∀γ ∈ Γ. We believe this to be
an important and often overlooked fact, and is formally re-
ferred to as invariance to group-action. The non-uniqueness
of the warping functions is not fully exploited in the tempo-
ral alignment literature. The goal in past works in alignment
has been to learn a class-speciﬁc template using an iterative
optimization method, which is not unique due to invariance
to group-action. Non-uniqueness here presents an opportu-
nity that can be exploited to develop discriminative warps
for classiﬁcation problems.

The non-uniqueness of the warping functions can be ad-
vantageous as it expands the expressive capacity for classi-
ﬁcation. Minimizing intra-class variations — rate variations
in our case — is only one part of the problem. For classiﬁca-
tion, we would also like to maximize inter-class variations.
For example, if we have four sequences X1, X2, X3 and X4
such that X1, X2 belong to Class A, and X3, X4 belong to
class B, the TTN has the capacity to predict γ1, γ2, γ3 and
γ4 such that
• d(X1 ◦ γ1, X2 ◦ γ2) < d(X1, X2)
• d(X3 ◦ γ3, X4 ◦ γ4) < d(X3, X4)
• d(Xi◦γi, Xj ◦γj) > d(Xi, Xj), i ∈ {1, 2} & j ∈ {3, 4},
where d(.) is the Euclidean distance between sequences.
However, we do not explicitly train the networks to achieve
the above. Both the TTN and the classiﬁer are trained so
as to maximize classiﬁcation performance by minimizing
the cross-entropy loss between the predicted and true distri-
bution over the class labels given the input sequence. The
TTN can be divided into three sub-modules:

12429

Figure 3. Results on synthetic dataset 1. Rows 1 and 2 show waveforms corresponding to classes 1 and 2 respectively. Columns 1 and
2 show the test inputs and the TTN outputs respectively. It is clear by comparing these columns that the TTN outputs are much better
discriminated after warping. The TTN-predicted warping functions also show that the TTN performs class-dependent warping. Column 3
is a better visualization of column 2 after some post-processing making the mean of the generated warping functions γµ = γId (see text).

Trainable layers: As shown in Figure 1, the input to
the TTN trainable layers is an input sequence. The input is
then passed through a few layers of convolutions and fully-
connected layers. The network outputs a vector of length
T , such that the ﬁrst element is set to be zero. T is the
length/number of frames in the input sequence. Let us de-
note this vector by v ∈ RT .

Constraint satisfaction layers: The output v is uncon-
strained, and hence, we need to convert it into a valid warp-
ing function that satisﬁes Equation (1).

To this end, we ﬁrst divide v by its norm to get a unit-
vector, followed by squaring each of its entries. This has the
effect of converting the vector into a point on the probability
simplex. Thus, we use the following mappings:
t

˙γ =

⊙

,

and γ(t) = T ·

˙γ(i),

(4)

v

v

kvk

kvk

Xi=1

where ⊙ is the Hadamard product (element-wise multiplica-
tion). This is treated as the network’s estimate of the deriva-
tive of the warping function, denoted by ˙γ. We compute the
cumulative sum and multiply it by the length of the input se-
quence, T , in order to form the warping function γ as shown
in Equation (4).

Differentiable temporal resampling: The warping
function γ is then applied to the input sequence using lin-
ear interpolation. We assume that the sampling rate of the
signal is high enough in relation to the speed of the activity
that simple linear interpolation of the frames is sufﬁcient
to get intermediate skeletons to look realistic (in practice,
20 frames/sec is plenty for most common action recogni-
tion applications). Warping is performed using the equa-
tion Y (tt) = X(ts) = X(γ(tt)), where X and Y are
the input and output sequences respectively, and ts and

tt are the source and target regular grid indices respec-
tively. The frames of Y are to be deﬁned at regular inter-
vals tt = 1, 2, . . . , T . As the ts corresponding to tt may
not be integers, we use linear interpolation to ﬁnd the val-
ues of X(γ(tt)). This operation is sub-differentiable, as in
the case of STN. Thus, we can write the expressions of the
required gradients as follows (these expressions are adapted
from Jaderberg et al. [11]). If X j is the input sequence of
the jth joint, X j
τ is the value at time index τ for channel j,
Y j is the warped sequence output by the TTN module and
i ∈ {1, 2, . . . , T } is the time index, we have

∂Y j
i
∂X j
τ

∂Y j
i
∂ts
i

= max(0, 1 − |ts

i − τ |) and

=

T

Xτ =1

X j ·


0,
1,
−1,

i − τ | ≥ 1

if |ts
if τ ≥ ts
i
if τ < ts
i

5. Experimental results

(5)

(6)

All networks in this paper are trained and tested using
Tensorﬂow [1]. Due to space constraints, some training and
testing details and results are provided in the supplement.

5.1. Synthetic datasets

(1) Demonstrating discriminative properties of TTN:
We consider a two-class classiﬁcation problem where the
two classes are one-dimensional
time series signals of
length 100. Let us denote each sequence in the dataset
by X ∈ R100. All the signals are Gaussian functions
with varying amplitude. Signals in class 1 are centered at
t = 0.55 while signals in class 2 are centered at t = 0.45.
Further, we corrupt the function with additive Gaussian

12430

Figure 4. Results on synthetic dataset 2. Rows 1 and 2 show waveforms corresponding to classes 1 and 2 respectively. Columns 1, 2 and
3 show the clean waveforms, test inputs (after random warping) and the TTN outputs respectively. It is clear by comparing these columns
that the TTN outputs are much more closely clustered especially for class 2, showing that the TTN outputs are robust to rate-variations.
Column 4 is a better visualization of column 3 after some post-processing making the mean of the generated warping functions γµ = γId.

noise (N (0, 0.2)). Samples of these functions are shown
in Figure 3. We generate 8000 training and 2000 test se-
quences evenly balanced between classes 1 and 2. We use
a simple classiﬁer with a one-layer fully connected layer.
The TTN is a 2-layer network with 1 convolutional layer
producing 1 feature map with a ﬁlter of size 8, and 1 fully-
connected layer. We train the networks for 103 iterations
using Adam optimizer with an initial learning rate of 10−4
for the classiﬁer. The weights of the TTN are updated at
one-tenth the learning rate of the classiﬁer. Figure 3 shows
the test signals, corresponding outputs of the TTN, as well
as the TTN-generated warping functions for every test in-
put. It is clear from the ﬁgures that the TTNs predict class-
speciﬁc warping functions in order to separate the peaks in
the signals which makes them more discriminative. Note
that this behavior arises automatically by minimizing the
cross-entropy loss. In order to visualize the TTN outputs
better, we perform post-processing by warping the TTN
outputs with γ−1
i=1 γi, where N is the size
of the test set. This experiment clearly shows that TTNs are
effective at increasing inter-class variations, as desired.

µ , where γµ = PN

(2) Demonstrating rate-invariance of TTN: Here, we
construct a dataset such that rate variations in the signals are
the major nuisance parameter. In this scenario, intuitively,
minimizing classiﬁcation error should lead to the following:
different signals belonging to the same class, but differing
only by a γ should come closer to each other after passing
through a trained TTN module.
In class 1, we have sig-
nals which are N-waves with random warping applied and
additive Gaussian noise added to them. Signals in class 2
are similar except that they are Gaussian functions. As be-
fore, we generated 8000 training sequences and 2000 test
sequences evenly balanced between classes 1 and 2. These

are shown before (Column 1) and after random warping
(Column 2) in Figure 4. The TTN, classiﬁer, training and
testing protocols are the same as in dataset (1) above. From
column 3 in Figure 4, it is clear the TTN leads to reduction
in intra-class rate variations.
5.2. ICL First Person Hand Action dataset

In this section, we conduct experiments on a recently re-
leased real-world dataset of hand actions [7]. The dataset
contains 3D hand pose sequences with 21 joint locations per
frame of 45 daily hand action categories interacting with
26 objects, such as “pour juice”, “put tea bag” and “read
paper”. These sequences are performed by 6 subjects and
are acquired using an accurate mocap system. For our ex-
periments, we use the training/test splits suggested by the
authors of the dataset [7], with subjects 1,3,4 used for train-
ing and the rest for testing. The training set contains 600
sequences and the test set contains 575 sequences. As the
sequences are of varying lengths, we uniformly sample the
sequences such that all sequences contain 50 samples. If
the sequences are shorter than 50 samples, we use zero-
padding. As there are 21 joints per frame, each input se-
quence is of dimension 50 × 63 (21 × 3 = 63). We nor-
malize the sequences such that the wrist position of the ﬁrst
frame is at the origin. We conduct our experiments with two
different types of classiﬁers widely used for action recogni-
tion: (1) Temporal Convolutional Network (TCN) and (2)
2-layer LSTM, showing that the proposed TTN framework
can yield better results for both the classiﬁer architectures.
The TTN module consists of 3 fully connected layers
with tanh nonlinearity and hidden states of dimensions 16
and 16. The ﬁnal FC layer produces a vector of length 50
(equal to the input sequence length), with the ﬁrst element
set to zero (see Section 4).

12431

The TCN architecture contains 1 temporal convolutional
layer with 16, 32 or 64 feature maps, and 1 FC layer. We
refer to these networks as TCN-16, TCN-32 and TCN-64
respectively. We ran the algorithm 5 times with different
initializations of the TTN and report the mean and standard
deviation in Table 1.

The LSTM architecture is similar to the one proposed
in [7] containing two layers of LSTMs with a state dimen-
sion of 1024 and a dropout probability of 0.2. We use mo-
mentum optimizer with a momentum of 0.9 for training.

The results obtained are shown in Table 1. In addition to
our experiments, we have reported results given in [7] for
other important algorithms used for 3D pose-based action
recognition including JOULE-pose [10], Moving Pose [40],
Hierarchical Recurrent Neural Networks (HBRNN) [5],
Transition Forests (TF) [6], and Lie Groups [37] and the
Gram Matrix method [42], the last two of which also used
DTW for sequence alignment, as well as non-Euclidean
features to help improve performance. Among the base-
line neural networks, TCN-32 led to the best results for this
dataset, and addition of more layers did not yield better per-
formance. We observe that addition of the TTN consistently
improves performance over the baseline networks by 3.8
percentage points (TCN-16), 1.0 point (TCN-32), and 2.2
points (TCN-64). In the case of the LSTM classiﬁer, we
observe an improvement of 2.25 points using TTN + LSTM
over just the LSTM. For the TCN-32 model, we performed
K-means clustering (with #clusters = #classes and av-
eraged over 100 runs) on the features at the output of the
conv.
layer of the classiﬁer for the test set, learned with
and without TTN. Then, we computed cluster purity (CP),
homogeneity (H) and completeness (C). Without the TTN,
CP = 0.519, H = 0.656, C = 0.705. Adding the TTN
module, we get improved scores of CP = 0.530, H =
0.664, C = 0.709.

Introducing distortions in the data: As datasets are
usually collected in lab settings, there are relatively “clean”
and do not contain many rate variations. Now, we introduce
artiﬁcial rate variations in the data in order to better illus-
trate the usefulness of the TTN module. Here, we set the
sequence length to 100 such that the original sequences of
length 50 range from t = 25 to 75, and the rest of the val-
ues are set to zero. Now, we apply random “afﬁne warps”
to the training and test data. By an afﬁne warp, we mean
a warping function of the form γ(t) = at + b, t = 25 to
75, which is a linear time-scaling with an offset. We use
a ∈ [0.75, 1.25] and b ∈ 0, 1, . . . , 49.

We observe that the induced distortion leads to a huge
drop in performance of TCN-32 from 81.74% to 70.43%.
With the TTN, the performance drop is much lower — from
82.75% to 78.26% and TTN+TCN-32 performs about 8 per-
centage points higher than TCN-32. Furthermore, from
Figure 6, which shows the inputs, generated warping func-

Method

Accuracy (%)

Moving Pose [40]
JOULE-pose [10]

HBRNN [5]

TF [6]

Lie Group [37]

Gram Matrix [42]

2-layer LSTM

2-layer LSTM + TTN

TCN-16

TCN-16 + TTN

TCN-64

TCN-64 + TTN

TCN-32

TCN-32 + TTN

56.34
74.60
77.40
80.69
82.69
85.39

76.17
78.43

76.28 ± 0.29
80.14 ± 0.33
79.10 ± 0.76
81.32 ± 0.36
81.74 ± 0.27
82.75 ± 0.31

TCN-32 (afﬁne warp)

TCN-32 + TTN (afﬁne warp)

70.43
78.26

Table 1. Action recognition results on the ICL hand action dataset
showing that LSTM+TTN and TCN+TTN frameworks consis-
tently outperform LSTM and TCN baselines.

Figure 5. t-SNE plots for the test set features for the afﬁne-warped
ICL dataset with and without TTN. When the TTN is employed,
we see a better separation of the clusters. This is also reﬂected in
the accuracy scores.

tions and the TTN outputs, it can be readily observed that
the TTN performs alignment of the sequences which then
makes the classiﬁcation problem much easier. This exper-
iment shows that addition of the TTN enhances the inter-
pretability of the network, and also delivers superior per-
formance when there are larger rate variations in the data.
As before, we performed K-means clustering. Without the
TTN, CP = 0.327, H = 0.487, C = 0.545. Adding the
TTN module, we get improved scores of CP = 0.476, H =
0.611, C = 0.677. We also ran t-SNE [22] to visualize the
features in 2D. More pure and separated clusters are seen
with the addition of TTN, as shown in the Figure 5.

5.3. NTU RGB D dataset

In this section, we conduct experiments on a large-
scale dataset of human actions known as the NTU RGB-D
dataset [27] which contains about 56000 sequences of 3D
skeleton positions acquired by a Microsoft Kinect. 25 joint
locations are provided for each skeleton. The dataset con-
tains actions belonging to 60 human activities performed by
45 subjects, with some actions containing two actors. The

12432

Method

Lie Groups [37]

FTP Dynamic Skeletons [10]

HBRNN [5]

2-layer part-LSTM [27]

STA-LSTM [28]
VA-LSTM [41]
STA-GCN [39]

TCN [17]

TCN + TTN

CS (%) CV (%)
52.76
50.08
65.22
60.23
63.97
59.07
62.93
70.27
81.20
73.40
87.60
79.40
81.50
88.30

76.54
77.55

83.98
84.25

Table 2. Action recognition results on the NTU RGB-D dataset
showing that TCN+TTN frameworks outperforms the TCN.

likely less rate variation in the case of cross-view protocol
compared to cross-subject. The ablation studies for TTN
and TCN are provided in the supplement. As is the case
of the ICL dataset, we performed K-means clustering (with
#clusters = #classes and averaged over 100 runs) on the
features obtained at the penultimate layer of the TCN, and
computed the same clustering metrics. Without the TTN,
CP = 0.466, H = 0.575, C = 0.597. Adding the TTN
module, we get improved scores of CP = 0.493, H =
0.596, C = 0.621. The corresponding t-SNE plots are pro-
vided in the supplement showing improved clusters with the
addition of the TTN module.

6. Discussion and future work

In this work, we have proposed the Temporal Trans-
former Network (TTN) which can be readily integrated into
classiﬁcation pipelines. TTN has the ability to generate
rate-invariant as well as discriminative warping functions
for general time-series classiﬁcation. We have shown im-
proved classiﬁcation results using different types of classi-
ﬁers – TCNs and LSTMs – on challenging 3D action recog-
nition datasets acquired using different modalities – Kinect
and mocap. We have demonstrated the rate-invariant and
discriminative properties of the TTN.

In the future, we would like to apply the ideas presented
in this paper to video action recognition. However, it is
not immediately clear how to perform temporal warping
for videos as the currently widely used features for video
frames may not be well suited for interpolation. One pos-
sible solution is to jointly train the image-level features and
the action classiﬁcation pipeline along with the TTN mod-
ule. Temporal transformers can also be applied in general
time-series classiﬁcation which includes recognition from
wearables, speech, EEG data, etc. Unsupervised pattern
discovery with inbuilt warp-invariant metrics will be an-
other interesting direction for further research.

Acknowledgements: This work was supported in part by
NSF grant 1617999, and ARO grant number W911NF-17-
1-0293

12433

Figure 6. Visualizations of results of TCN-32 + TTN on ICL ac-
tion dataset with induced rate variations. In the left column are
waveforms corresponding to joint 1 of all test sequences. In the
right column, 4 of those sequences are shown for clarity. We see
clearly that the generated warping functions undo the afﬁne-warp
distortion in the test data, and the TTN outputs are nearly perfectly
aligned leading to much better classiﬁcation results.

data are acquired using a Microsoft Kinect. We sample 50
frames per sequence uniformly. We conduct two sets of ex-
periments for this dataset – Cross Subject (CS) and Cross
View (CV) – as per the protocol suggested by the authors
in [27] using the same training and testing splits.

We construct a TTN module with 2 temporal convolu-
tional layers and 3 FC layers with ReLU non-linearity. We
use a ﬁlter size of 8 and 16 output feature maps in each
conv layer. The FC layers produce hidden representations
of sizes 16, 16 and 50 respectively.

We use the Temporal Convolution Network (TCN) de-
scribed in [17]. The network consists of 10 convolutional
layers with batch normalization and ReLU non-linearity.
While training, the TTN parameters are updated at one-
tenth the learning rate of the TCN.

The results obtained for this dataset are shown in Table 2.
For cross-subject experiments, we observe that the addi-
tion of the TTN module results in a performance improve-
ment of about 1 percentage point over the baseline TCN.
We also found that using 2 parallel TTNs and concatenat-
ing the TTN outputs results in further improvement with
a ﬁnal performance of 77.80%. The addition of the TTN
module leads to less improvement in the case of cross-view
experiment. This can be explained by the fact that there is

-300-200-1000100200300AmplitudeAffine-warped inputsTTN-generated warping functionsFrame index050100020406080100Frame index-300-200-1000100200300AmplitudeTTN outputsAmplitudeAffine-warped inputsTTN-generated warping functionsTTN outputsAmplitudeFrame indexFrame index020406080100-1000100020406080100-1000100020406080100-50050020406080100-10001000204060801000102030405060708090100020406080100-1000100020406080100-1000100020406080100-50050020406080100-1000100References

[1] M. Abadi et al. Tensorﬂow: A system for large-scale ma-
chine learning.
In Proceedings of the 12th USENIX Con-
ference on Operating Systems Design and Implementation
(OSDI), pages 265–283, 2016. 5

[2] R. Bellman and R. Kalaba. On adaptive control processes.
IRE Transactions on Automatic Control, 4(2):1–9, Novem-
ber 1958. 2, 4

[3] M. Cuturi and M. Blondel. Soft-DTW: a differentiable loss
function for time-series. In International Conference on Ma-
chine Learning, pages 894–903, 2017. 3

[4] N. S. Detlefsen, O. Freifeld, and S. Hauberg. Deep diffeo-
morphic transformer networks. In Proceedings of the IEEE
Conference on Computer Vision and Pattern Recognition,
pages 4403–4412, 2018. 2

[5] Y. Du, W. Wang, and L. Wang. Hierarchical recurrent neural
network for skeleton based action recognition. In Proceed-
ings of the IEEE conference on computer vision and pattern
recognition, pages 1110–1118, 2015. 3, 7, 8

[6] G. Garcia-Hernando and T.-K. Kim. Transition forests:
transitions for action
Learning discriminative temporal
In 2017 IEEE Conference on
recognition and detection.
Computer Vision and Pattern Recognition (CVPR), pages
407–415. IEEE, 2017. 7

[7] G. Garcia-Hernando, S. Yuan, S. Baek, and T.-K. Kim. First-
person hand action benchmark with RGB-D videos and 3D
hand pose annotations. In Proceedings of Computer Vision
and Pattern Recognition (CVPR), 2018. 3, 6, 7

[8] I. Goodfellow, H. Lee, Q. V. Le, A. Saxe, and A. Y. Ng. Mea-
suring invariances in deep networks. In Advances in neural
information processing systems, pages 646–654, 2009. 1

[9] S. Hochreiter and J. Schmidhuber. Long short-term memory.

Neural computation, 9(8):1735–1780, 1997. 1

[10] J.-F. Hu, W.-S. Zheng, J. Lai, and J. Zhang. Jointly learning
heterogeneous features for RGB-D activity recognition. In
Proceedings of the IEEE conference on computer vision and
pattern recognition, pages 5344–5352, 2015. 7, 8

[11] M. Jaderberg, K. Simonyan, A. Zisserman, et al. Spatial
In Advances in neural information

transformer networks.
processing systems, pages 2017–2025, 2015. 2, 5

[12] C. Jia, M. Shao, and Y. Fu. Sparse canonical temporal align-
ment with deep tensor decomposition for action recogni-
tion.
IEEE Transactions on Image Processing, 26(2):738–
750, 2017. 3

[13] G. Johansson. Visual perception of biological motion and
Perception & psychophysics,

a model for its analysis.
14(2):201–211, 1973. 3

[14] A. Kanazawa, A. Sharma, and D. Jacobs. Locally scale-
arXiv preprint

invariant convolutional neural networks.
arXiv:1412.5104, 2014. 1

[15] Q. Ke, M. Bennamoun, S. An, F. Sohel, and F. Bous-
said. A new representation of skeleton sequences for 3D
action recognition. In Computer Vision and Pattern Recogni-
tion (CVPR), 2017 IEEE Conference on, pages 4570–4579.
IEEE, 2017. 3

[16] R. Khasanova and P. Frossard. Graph-based isometry invari-
ant representation learning. In Proceedings of the 34th Inter-
national Conference on Machine Learning-Volume 70, pages
1847–1856. JMLR. org, 2017. 1

[17] T. S. Kim and A. Reiter.

Interpretable 3D human action
analysis with temporal convolutional networks. In Proceed-
ings of the IEEE Conference on Computer Vision and Pattern
Recognition Workshops, 2017. 1, 3, 8

[18] C. Lea, R. Vidal, A. Reiter, and G. D. Hager. Temporal con-
volutional networks: A uniﬁed approach to action segmen-
tation. In European Conference on Computer Vision, pages
47–54. Springer, 2016. 3

[19] C. Li, Q. Zhong, D. Xie, and S. Pu. Skeleton-based ac-
tion recognition with convolutional neural networks.
In
2017 IEEE International Conference on Multimedia & Expo
Workshops (ICMEW), pages 597–600. IEEE, 2017. 3

[20] M. Liu, H. Liu, and C. Chen. Enhanced skeleton visualiza-
tion for view invariant human action recognition. Pattern
Recognition, 68:346–362, 2017. 1, 3

[21] S. Lohit and P. Turaga. Learning invariant Riemannian geo-
metric representations using deep nets. In Proceedings of the
IEEE International Conference on Computer Vision Work-
shops, pages 1329–1338, 2017. 1

[22] L. v. d. Maaten and G. Hinton. Visualizing data using t-SNE.
Journal of machine learning research, 9(Nov):2579–2605,
2008. 7

[23] J. S. Marron, J. O. Ramsay, L. M. Sangalli, and A. Srivastava.
Functional data analysis of amplitude and phase variation.
Statistical Science, 30(4):468–484, 11 2015. 4

[24] J. Oh, J. Wang, and J. Wiens. Learning to exploit invari-
ances in clinical time-series data using sequence transformer
networks. Machine Learning for Heathcare, 2018. 3

[25] S. Sabour, N. Frosst, and G. E. Hinton. Dynamic routing
between capsules. In Advances in Neural Information Pro-
cessing Systems, pages 3856–3866, 2017. 2

[26] H. Sakoe and S. Chiba. Dynamic programming algorithm
optimization for spoken word recognition.
IEEE Transac-
tions on Acoustics, Speech, and Signal Processing, 26(1):43–
49, Feb 1978. 2, 4

[27] A. Shahroudy, J. Liu, T.-T. Ng, and G. Wang. NTU RGB+D:
A large scale dataset for 3D human activity analysis. In The
IEEE Conference on Computer Vision and Pattern Recogni-
tion (CVPR), June 2016. 3, 7, 8

[28] S. Song, C. Lan, J. Xing, W. Zeng, and J. Liu. An end-to-
end spatio-temporal attention model for human action recog-
nition from skeleton data. In Proc. of AAAI Conference on
Artiﬁcial Intelligence, 2017. 3, 8

[29] A. Srivastava, I. Jermyn, and S. Joshi. Riemannian analy-
sis of probability density functions with applications in vi-
sion.
In Computer Vision and Pattern Recognition, 2007.
CVPR’07. IEEE Conference on, pages 1–8. IEEE, 2007. 1

[30] A. Srivastava, E. Klassen, S. H. Joshi, and I. H. Jermyn.
Shape analysis of elastic curves in Euclidean spaces. IEEE
Transactions on Pattern Analysis and Machine Intelligence,
33(7):1415–1428, 2011. 3

[31] A. Srivastava and E. P. Klassen. Functional and shape data

analysis. Springer, 2016. 1, 3, 4

12434

[32] C. Tallec and Y. Ollivier. Can recurrent neural networks warp
International Conference on Learning Representa-

time?
tions, 2018. 2

[33] Y. Tang, R. Salakhutdinov, and G. Hinton. Deep lamber-
tian networks.
In Proceedings of the 29th International
Coference on International Conference on Machine Learn-
ing, pages 1419–1426. Omnipress, 2012. 1

[34] A. Toshev and C. Szegedy. DeepPose: Human pose es-
timation via deep neural networks.
In Proceedings of the
IEEE conference on computer vision and pattern recogni-
tion, pages 1653–1660, 2014. 2

[35] G. Trigeorgis, M. A. Nicolaou, B. W. Schuller, and
S. Zafeiriou. Deep canonical time warping for simultaneous
alignment and representation learning of sequences.
IEEE
transactions on pattern analysis and machine intelligence,
40(5):1128–1138, 2018. 3

[36] G. Trigeorgis, M. A. Nicolaou, S. Zafeiriou, and B. W.
Schuller. Deep canonical time warping.
In Proceedings
of the IEEE Conference on Computer Vision and Pattern
Recognition, pages 5110–5118, 2016. 3

[37] R. Vemulapalli, F. Arrate, and R. Chellappa. Human action
recognition by representing 3D skeletons as points in a Lie
group. In Proceedings of the IEEE conference on computer
vision and pattern recognition, pages 588–595, 2014. 7, 8

[38] Y. Xu, T. Xiao, J. Zhang, K. Yang, and Z. Zhang. Scale-
arXiv preprint

invariant convolutional neural networks.
arXiv:1411.6369, 2014. 1

[39] S. Yan, Y. Xiong, and D. Lin. Spatial temporal graph convo-
lutional networks for skeleton-based action recognition. In
Proc. of AAAI Conference on Artiﬁcial Intelligence, 2018. 3,
8

[40] M. Zanﬁr, M. Leordeanu, and C. Sminchisescu. The moving
pose: An efﬁcient 3D kinematics descriptor for low-latency
action recognition and detection. In Proceedings of the IEEE
international conference on computer vision, pages 2752–
2759, 2013. 7

[41] P. Zhang, C. Lan, J. Xing, W. Zeng, J. Xue, and N. Zheng.
View adaptive recurrent neural networks for high perfor-
mance human action recognition from skeleton data. In 2017
IEEE International Conference on Computer Vision (ICCV),
pages 2136–2145. IEEE, 2017. 8

[42] X. Zhang, Y. Wang, M. Gou, M. Sznaier, and O. Camps. Efﬁ-
cient temporal sequence comparison and classiﬁcation using
Gram matrix embeddings on a Riemannian manifold. In Pro-
ceedings of the IEEE Conference on Computer Vision and
Pattern Recognition, pages 4498–4507, 2016. 7

[43] F. Zhou and F. De la Torre. Generalized canonical time warp-
ing. IEEE transactions on pattern analysis and machine in-
telligence, 38(2):279–294, 2016. 3

12435

