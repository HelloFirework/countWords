Grounding Human-to-Vehicle Advice for Self-driving Vehicles

Jinkyu Kim1, Teruhisa Misu2, Yi-Ting Chen2, Ashish Tawari2, and John Canny1

1EECS, UC Berkeley, 2Honda Research Institute USA, Inc.

1{jinkyu.kim, canny}@berkeley.edu,

2{tmisu,ychen,atawari}@honda-ri.com

Abstract

Recent success suggests that deep neural control net-
works are likely to be a key component of self-driving ve-
hicles. These networks are trained on large datasets to imi-
tate human actions, but they lack semantic understanding of
image contents. This makes them brittle and potentially un-
safe in situations that do not match training data. Here,
we propose to address this issue by augmenting training
data with natural language advice from a human. Advice
includes guidance about what to do and where to attend.
We present a ﬁrst step toward advice giving, where we train
an end-to-end vehicle controller that accepts advice. The
controller adapts the way it attends to the scene (visual
attention) and the control (steering and speed). Attention
mechanisms tie controller behavior to salient objects in the
advice. We evaluate our model on a novel advisable driving
dataset with manually annotated human-to-vehicle advice
called Honda Research Institute-Advice Dataset (HAD). We
show that taking advice improves the performance of the
end-to-end network, while the network cues on a variety of
visual features that are provided by advice. The dataset is
available at https://usa.honda-ri.com/HAD.

1. Introduction

Dramatic progress in self-driving vehicle control has
been made in the last several years. The recent achieve-
ments [3, 27] suggest that deep neural models can be ap-
plied to vehicle controls in an end-to-end manner by ef-
fectively learning latent representations from data. Ex-
plainability of these deep controllers has increasingly
been explored via a visual attention mechanism [8], a
deconvolution-style approach [2], and a natural language
model [9]. Such explainable models will be an important el-
ement of human-vehicle interaction because they allow peo-
ple and vehicles to understand and anticipate each other’s
actions, hence to cooperate effectively.

However, the network’s understanding of a scene is lim-
ited by the training data: image areas are only attended to if
they are salient to the (training) driver’s subsequent action.

End-user

Input image

Human-to-Vehicle Advice
e.g., “pedestrians are in crosswalk”

without advice

with advice

Visual
encoder

Vehicle
controller

Textual
encoder

control 

commands

Visualizing 
model’s attention

Figure 1: Our model takes human-to-vehicle advice as an
input, i.e., “pedestrians are in crosswalk”, and grounds it
into the vehicle controller, which then predicts a sequence
of control commands, i.e., a steering wheel angle and a ve-
hicle’s speed. Our driving model also provides a visual ex-
planation in the form of attention - highlighted regions have
a direct inﬂuence on the function being estimated. Visual-
izing attention maps helps the end-users acknowledge the
acceptance of their advice.

We have found that this leads to semantically-shallow mod-
els that under-attend to important cues (like pedestrians)
that do not predict vehicle behavior as well as other cues,
like the presence of a stop light or intersection. We also
believe its important for driving models to be able to adapt
the “style” of the journey to user input (fast, gentle, scenic
route, avoid freeways etc). We use the term “advice” to
cover high-level instructions to the vehicle controller about
how to drive, including what to attend to. We distinguish
advice from explicit commands to the vehicle: which may
be problematic if the passenger is not fully attending to the
vehicle’s environment.

The goal of this work is to augment imitation learning
datasets with long-term advice from humans (e.g., driving
instructors) and in the shorter term, from passengers in the
vehicle. In full generality, advice might take the form of
condition-action rules “if you see a child’s toy on the side-
walk, slow down”. For the present paper, we study the sim-

10591

pler task of accepting short-term textual advice about action
or perception.

In this work, we propose a novel driving model that
takes natural language inputs (i.e., human-to-vehicle ad-
vice) from an end-user. Here, we focus on two forms of
advice: (1) goal-oriented advice (top-down signal) – to in-
ﬂuence the vehicle in a navigation task (e.g., “drive slow
in a school zone”), (2) stimulus-driven advice (bottom-up
signal) – conveys some visual stimuli that the user expects
their attention to be actively looked by the vehicle controller
(e.g., “there is a pedestrian crossing”). As shown in Fig-
ure 1, the controller needs three main capabilities to handle
such advice. (i) Perceptual primitives to evaluate the con-
troller’s behavior. (ii) The ability to understand the user’s
utterance and to ground it in the trained perceptual primi-
tives. (iii) Explainability of the controller’s internal state to
communicate with the vehicle. We propose that such capa-
bilities can be learned during off-line training.

Our contributions are as follows. (1) We propose a novel
advisable driving model that takes human-to-vehicle ad-
vice and grounds it into the vehicle controller. (2) We in-
ternalize the (stimulus-driven) advice – aligning its atten-
tion to make the model refer to the important salient ob-
jects even when advice is not available. (3) We generated a
large-scale dataset called Honda Research Institute-Advice
Dataset (HAD) with over 5,600 video clips (over 32 hours)
with human-to-vehicle advice annotations, e.g., “there is a
pedestrian pushing a stroller through the crosswalk”. The
dataset will be available and will provide a new test-bed for
measuring progress towards developing advisable models
for self-driving cars.

2. Related Work

End-to-End Learning for Self-driving Vehicles. Recent
successes [3, 27] suggest that a driving policy can be suc-
cessfully learned by neural networks as a supervised learner
over observation (i.e., raw images)-action (i.e., steering)
pairs collected from human demonstration. Bojarski et
al. [3] trained a deep neural network to map a dashcam
image to steering controls, while Xu et al. [27] explored
a stateful model using a dilated deep neural network and
recurrent neural network so as to predict a vehicle’s dis-
cretized future motion given input images. Other variants
of deep neural architecture have been explored [5, 4].

Explainability of deep neural networks has become a
growing ﬁeld in computer vision and machine learning
communities. Kim et al. [8] utilized a recurrent attention
model followed by a causal ﬁltering that removes spurious
attention blobs and visualizes causal attention maps. We
start our work with this attention-based driving model. At-
tention model visualizes controller’s internal state by vi-
sualizing attention maps, which end-users may use as a

ground and an acknowledgment of their advice. Other ap-
proaches [2, 9] can also be applied to provide richer expla-
nations, but we leave it for future work.

Advice-taking models. Recognition of the value of advice-
taking has a long history in AI community [15], but a few
attempts have been made to exploit textual advice. Sev-
eral approaches have been proposed to translate the natural
language advice in formal semantic representations, which
is then used to bias actions for simulated soccer task [11],
mobile manipulation tasks [16, 17, 24], and a navigation
task [1]. These approaches consider high-level action se-
quences to be given in the task space of the agent. Instead,
we consider the visual imitation learning setting, where the
model has its own perceptual primitives that are trained
by observing third-person demonstration and types of ad-
vice. Recent work suggests that incorporation of natural
language human feedback can improve a text-based QA
agent [12, 26] and image captioning task [13]. Despite
their potential, there are various challenges (e.g., safety and
liability) with collecting human feedback on the actions
taken by self-driving cars. Other notable approaches (in
the reinforcement learning setting) may include the work
by Tung et al. [25] that learns a visual reward detector con-
ditioned on natural language action descriptions, which is
then used to train agents. To our best knowledge, ours is the
ﬁrst attempt to take human-to-vehicle advice in natural lan-
guage and ground it in a real-time deep vehicle controller.

3. Advisable Driving Model

As we summarized in Figure 2, our model involves three
main parts: (1) a Visual encoder, which extract high-level
visual descriptions by utilizing the convolutional neural net-
work (CNN). (2) An Advice encoder, which is a natural lan-
guage model that encodes end-user’s utterance into a latent
vector and ground it into the vehicle controller. (3) An In-
terpretable vehicle controller, which is trained to predict
two control commands (widely used for self-driving vehicle
control) in an end-to-end manner, i.e., a vehicle’s speed and
a steering wheel angle. Our controller uses a visual (spatial)
attention mechanism [8], which visualizes controller’s in-
ternal state by highlighting image regions where the model
ﬁxates on for the network’s output.

3.1. Preprocessing

Following [8], we use raw images that are down-sampled
to 10Hz and are resized to have input dimensionality as
90×160×3. For better generalization, each image is then
normalized by subtracting its mean from the raw pixels and
dividing by its standard deviation. Following Liu et al. [14],
we marginally change its saturation, hue, and brightness for
achieving robustness during a training phase.

10592

Visual Encoder

Vehicle Controller
Visual Attention

h

w

90

CNN

160

3

Preprocessing

Input:
images

d

Element-wise
product

d

d

Textual
encoder
Advice
LSTM

h

w

1

Input:
human-to-vehicle advice
E.g., “There are pedestrians 
and there are traffic lights.”

Advice Encoder

d

Element-wise
product

Control
LSTM

Output:
attention 
heat map

Output:
steering
wheel angle

Output:
vehicle’s
speed

Visual attention

Advice encoding

Figure 2: Our model consists of three main parts: (1) a visual encoder (CNN here), (2) an advice encoder, which encodes
end-user’s utterance (advice) and ground it into the vehicle controller (see green arrows), and (3) an interpretable vehicle
controller, which predicts two vehicle control commands (i.e., a speed and a steering angle command) from an input raw
image stream in an end-to-end manner. Our model also utilizes a (spatial) visual attention mechanism to visualize where and
what the model sees (see yellow arrows).

3.2. Convolutional Feature Encoder

We utilize a convolutional neural network (CNN) to ob-
tain a set of visually-descriptive latent vectors at time t,
where each vector contains a high-level visual description
in certain input region. In this paper, we refer these latent
vectors to as a convolutional feature cube Xt. By feeding an
image through the model at each time t, we collect a Xt of
size w×h×d. Note that Xt has l (=w×h) (spatially) differ-
ent vectors, each of which is a d-dimensional feature slice
corresponding to a certain input region. Choosing a subset
of these vectors will allow us to focus selectively on differ-
ent parts of images (i.e., attention). Formally, Xt = {xt,1,
xt,2, . . ., xt,l}, where xt,i ∈ Rd for i ∈ {1, 2, . . . , l}.

3.3. Advice Encoder

Our advice encoder takes a variable-length advice and
yields a latent vector, which then feeds to the controller
LSTM (called Control LSTM). Our advice-taking driving
model needs to understand the end-users utterance and to
ground it into the vehicle controller. We assume that advice
will often be given ofﬂine, or at the beginning of a ride, e.g.,
“look out for pedestrians” or “drive gently (occupant gets
carsick)”. Thus, advice encoding will be prepared ahead of
the controller generates control commands.

We train our advice encoder to deal with both types of
advice (i.e., the goal-oriented and the stimulus-driven ad-
vice) without any input-level separation. We use a LSTM
(called Advice LSTM, which is different from Control
LSTM) to encode an input sentence (i.e., human-to-vehicle

advice) and to yield a ﬁxed-size latent vector, which is com-
mon practice in sequence-to-sequence models. Inspired by
the knowledge from the Visual Question Answering (VQA)
task, we follow the work by Park et al. [18] and use an
element-wise multiplication to combine the latent vector
from our advice encoder and the visual feature vector from
our visual encoder.

Formally, our advice LSTM yields a d-dimensional la-
tent vector u ∈ Rd. By combining this vector with the vi-
sual feature xt,i using element-wise multiplication, we ob-
tain a feature vector zt,i = xt,i ⊙ u, which is then fed into
vehicle controller. Note that vehicle controller takes a new
image at every time t (thus, update xt,i) but the latent vector
u remains the same during a period of the event.

Note that we focus on two forms of advice: (i) stimulus-
driven and (ii) goal-oriented advice. The former advice
(e.g., watch out a pedestrian) about perception can be
grounded into a context yt,i via attention maps. We, how-
ever, argue that attention maps may not be sufﬁcient to
ground the latter advice (e.g., go straight), which needs
a more direct inﬂuence to the controller via an additional
element-wise multiplication.

Synthetic Token. We use a synthetic token <none> to
indicate unavailable advice input. Since users will not be
aware of the full state of the vehicle (they are not driving),
the controller should mainly be in charge. Thus, we aug-
ment replicate of the dataset that however has a <none>
token as the advice input, which exposes the model to events
that do not have advice as an input.

10593

3.4. Interpretable Vehicle Controller

Table 1: Examples of processing annotated descriptions.

Providing a controller’s internal state is important for ad-
visable systems since it will be used as a ground or an ac-
knowledgment of their advice taken. To this end, we utilize
the attention-based driving model [8] that provides the con-
troller’s internal state by visualizing attention maps – i.e.,
where the model visually ﬁxates on image regions that are
relevant to the decision.

Visual Attention. Visual attention provides introspective
explanations by ﬁltering out non-salient image regions,
while image areas inside the attended region have poten-
tial causal effect on the output. The goal of visual attention
mechanism is to ﬁnd a context Yt = {yt,1, yt,2, . . . , yt,l}
by minimizing a loss function, where yt,i = π(αt,i, xt,i) =
αt,ixt,i for i = {1, 2, . . . , l}. Note that a scalar attention
weight value αt,i in [0, 1] is associated with a certain grid of
input image in such that Pi αt,i = 1. We use a multi-layer
perceptron fattn to generate αt,i, i.e., αt,i = fattn(xt,i, ht−1)
conditioned on the previous hidden state ht−1, and the cur-
rent feature vector xt,i. Softmax regression function is then
used to obtain the ﬁnal attention weight.

Outputs. The outputs of our model are two continuous val-
ues of a speed ˆv(t) and a steering wheel angle ˆs(t). We
utilize additional hidden layers fv and fs, each of which are
conditioned on the current hidden state ht (of the control
LSTM) and a context vector ct. We generate the context
vector by utilizing a function fconcat, which concatenates
{ct,i}l

i=1 to output 1-D vector ct.

i=1 = {yt,i ⊙ u}l

Internalizing Advice. Stimulus-driven advice provides
rich messages about visual saliencies (e.g., trafﬁc lights,
pedestrians, signs, etc) that the vehicle controller should
typically see these objects while driving. Thus, to inter-
nalize such advice, we argue that the driving model must
attend to those areas even when such advice is not avail-
able. We add a loss term, i.e., the Kullback-Leibler diver-
gence (DKL), between two attention maps (i.e., generated
with and without advice) to make the driving model refer to
the same salient objects:

La = λa X

t

DKL(αw

t ||αwo

t ) = λa X

t

l

X

i=1

αw

t,i(log

αw
t,i
αwo
t,i

)

(1)
where αw and αwo are the attention maps generated by the
vehicle controller with and without advice given, respec-
tively. We use a hyperparameter λa to control the strength
of the regularization term.

Loss function. Existing models have been trained mainly
by minimizing the proportional control error term (i.e., the
difference between human-demonstrated and predicted).
However, these systems are prone to suffer from two major
issues. (i) Oscillation of control predictions – its prediction

Type

Step

Textual Annotation

action desc.

Initial annotation The driver went straight and stopped at an intersection.

→ Present tense

The driver goes straight and stops at an intersection.

→ Imperative

Go straight and stop at an intersection.

attention desc.

Initial Annotation There was a pedestrian pushing a stroller through the crosswalk.

→ Present tense

There is a pedestrian pushing a stroller through the crosswalk.

has repeated variation against a target value. (ii) Variations
in task performance between drivers.

Inspired by proportional-integral-derivative (PID) con-
troller [19], we use the following loss function, which con-
sists of three terms: (i) Lp, which is proportional to the er-
ror (i.e., |ev(t)| + |es(t)|), where we use the error terms
ev(t) = v(t) − ˆv(t) and es(t) = s(t) − ˆs(t). (ii) Ld, which is
proportional to the derivative of the error (i.e., d
dt ev(t) and
d
dt es(t)), and (iii) Li, which is proportional to the integral of
the error, which we use the difference in the vehicle’s future
course θ(t) – a cardinal direction in which a vehicle is to
be steered. With the bicycle model assumption [19] - which
assumes that left and right front wheels are represented by
one front wheel, we can approximate a steering wheel angle
st ≈ L/r, where L is the length of wheelbase and r is the
radius of the vehicle’s path. Then, we can approximate the
vehicle’s course θ(t) ≈ v(t)τ
r ≈ s(t)v(t) after the unit time
τ = 1. Thus, we use the following loss function L:

L = La +

1
T

T −1

X

t=0

(cid:2)

Lp

z
|ev(t)| + |es(t)| +λi

}|

{

Li

{
z
|θ(t) − ˆθ(t)|

}|

d
dt

+λd (cid:0)|
|

ev(t)|2 + |
{z

Ld

d
dt

(cid:3)

es(t)|2(cid:1)
}

(2)

where T is the number of timesteps. We use hyperparame-
ters λd and λi to control the strength of the terms.

4. Honda Research Institute-Advice Dataset

In order to evaluate the advisable driving model, we have
collected Honda Research Institute-Advice Dataset (HAD).
In this section, we describe our dataset in terms of the driv-
ing videos used to collect human-annotated textual advice,
our annotation process, and analysis of the advice collected.

Driving Videos and Vehicle Control Commands. We use
5,675 video clips (over 32 hours), each of which is on aver-
age 20 seconds in length. Each video contains around 1-2
driving activities, e.g., passing through an intersection, lane
change, stopping, etc. These videos are randomly collected
from a large-scale driving video dataset called HDD [20].
This dataset contains camera videos – which are captured
by a single front-view camera mounted in a ﬁxed position
on the roof top of the vehicle. These videos are mostly cap-
tured during urban driving near the San Francisco Bay Area,

10594

(A)

Input
video

e
c

i

 

v
d
a
d
e
t
n
e

i
r
o
-
l

a
o
G

e
c

i

v
d
a
n
e
v

 

i
r
d
-
s
u
u
m

l

i
t

S

0s

+5s

+10s

+15s

+20s

time

(B) The top-20 most frequent words of

Goal-oriented advice Stimulus-driven advice

Drive straight and get into the right turning lane and stop at the red light.
There is people on bikes in the road.

Drive through an intersection to turn left and wait for someone to cross.
Pedestrians are crossing the street while he is turning.

Go straight at an intersection then turn left.
There are construction cones on the road.

stop
straight
drive
turn

intersection

light/stoplight

go
left

right
lane
sign
red

car/vehicle
continue
slow
traffic
road
wait
proceed
come
5.5k 11k 16.5k 22k

Number of words

0

car/vehicle
pedestrians
cross
stop
traffic
lane

turn
road
park

intersection

light/stoplight
street
right
driving
left
sign
red
crosswalk
side
no

0

2.75k 5.5k 8.25k 11k
Number of words

Figure 3: (A) Examples of input images, which are sampled at every 5 seconds. We also provide examples of the goal-
oriented advice and the stimulus-driven advice, which are collected from human annotators followed by a post-processing.
We highlight a visual cue (e.g., pedestrians), which are mentioned in advice, with a blue circle on the images. (B) The counts
of top-20 most frequent words used in both types of advice.

which contain the typical driver’s activities (i.e., turning,
merging, lane following, etc) on various road types (i.e.,
highway, residential roads with and without lane markings,
etc). Alongside the video data, the dataset provides a set of
time-stamped controller area network (CAN) bus records,
which contain human driver control inputs (i.e., steering
wheel angle).

Annotations. We provide a 20 seconds driving video and
ask a human annotator to describe, from a point of view of a
driving instructor, what the driver is doing (action descrip-
tion for goal-oriented advice) and what the driver should
pay attention (attention description for stimulus-driven ad-
vice). We require that the annotators enter the action de-
scription and attention description separately, for exam-
ple, “The driver crossed lanes from right to left lane” and
“There was construction happening on the road”, respec-
tively. Each video clip has 4-5 action descriptions (25,549
in total) and 3-4 attention descriptions (20,080 in total). We
then change the descriptions into the present tense (e.g.,
“The driver crosses lanes from right to left lane”). Espe-
cially for action descriptions, we change them to impera-
tive sentences (e.g., “Cross lanes from right to left lane”),
which are used to offer advice. To ensure the quality of the
collected descriptions, we ask another human annotator to
proofread the descriptions/advice to correct typographical
errors and mistakes in grammar and spelling. In our analy-
sis of annotations, we found that this two-stage annotation
is helpful for the annotator to understand the task and per-
form better. In Figure 3 (A), we provide examples of two

types of advice collected along with dashboard camera im-
ages (sampled at every 5 seconds).

Dataset Characteristics. Figure 3 (B) shows word counts
of the top-20 most frequent words used in the goal-oriented
advice and the stimulus-driven advice, respectively. Note
that we exclude prepositions, conjunctions, and deﬁnite and
indeﬁnite articles. Most common goal-oriented advice is
related to changes in speed (i.e., stop, slow), driving (i.e.,
drive, straight, go, etc), and turning (i.e., left, right, turns).
Many also include a list of concepts relevant to a driving,
such as trafﬁc light/sign, lane, intersection. The stimulus-
driven advice covers a diverse list of concepts relevant to
the driving scenario, such as the state of trafﬁc/lane, traf-
ﬁc light/sign, pedestrians crossing the street, passing other
parked/crossing cars, etc. Although less frequent, some
contain references to different types of vehicle (i.e., bus,
truck, bike, van, etc), road bumps, and weather conditions.

5. Experiments

Training and Evaluation Details. We use a single LSTM
layer for all the components of our framework. Our model is
trained end-to-end using random initialization (i.e., no pre-
trained weights). For training, we use Adam optimization
algorithm [10] and dropout [21] of 0.5 at hidden state con-
nections and Xavier initialization [6]. Our model takes 1-3
days (depending on types of CNN used) to train and can
process over 100 frames on average per second on a sin-
gle Titan Xp GPU. We use two mathematical criteria (the
statistics of absolute errors and the correlation distance)

10595

Table 2: In order to see the effectiveness of our advice-taking model, we compare the vehicle control prediction performance
with other two existing models, which do not take advice (the ﬁrst two rows). For a fair comparison, we use the identical 5-
layer base CNN [3]. We also share the same input and output layers trained with the same loss function (i.e., the proportional
error Lp alone) used in [8]. We compare the control prediction performance in terms of three different sets of advice (i.e.,
the goal-oriented advice (ADVG) only, the stimulus-driven advice (ADVS) only, and both). For evaluation, we use the mean
of correlation distances (Corr) and the median of absolute errors as well as the 1st (Q1) and 3rd (Q3) quartiles.

Type

Model

Advice input

Speed (km/h)

Steering Wheel Angle (deg)

Training

Testing Median [Q1, Q3] Corr Median [Q1, Q3]

Corr

Non-advisable ConvNet+FF (feed forward network) [3]

ConvNet+LSTM+Attention [8] (baseline)

-

-

-

-

6.88 [3.13, 13.1]

.597 4.63 [1.80, 12.4]

3.98 [1.76, 8.10]

.763 3.92 [1.54, 10.1]

Advisable

CNN+LSTM+Attention+Advice (Ours)

ADVG only

ADVG 4.25 [1.86, 8.46]

.743 3.53 [1.37, 8.83]

CNN+LSTM+Attention+Advice (Ours)

ADVS only

ADVS

3.28 [1.47, 6.46]

.782 3.78 [1.45, 9.93]

CNN+LSTM+Attention+Advice (Ours)

ADVG+ADVS ADVG 3.78 [1.67, 7.50]

.763 3.54 [1.36, 9.21]

CNN+LSTM+Attention+Advice (Ours)

ADVG+ADVS ADVS

3.78 [1.68, 7.46]

.763 3.78 [1.41, 9.51]

.366

.469

.516

.484

.512

.511

to quantitatively evaluate their performance by comparing
with ground-truth human-demonstrated control commands.

Advisable vs. Non-advisable models. As shown in Ta-
ble 2, we ﬁrst compare the vehicle control prediction per-
formance to see our advice-taking driving model can out-
perform other existing driving models that do not take ad-
vice. To this end, we implemented two other existing mod-
els, i.e., (1) CNN+FF (Feed forward network) [3] and (2)
CNN+LSTM+Attention [8]. For a fair comparison, all
models used the identical 5-layer CNN [3] as the convo-
lutional (visual) feature encoder trained by minimizing the
loss term Lp only (same as used in [8]. See Equation 2).
This visual encoder produces a 12×20×64-dimensional
feature cube from the last convolutional layer. In the later
section, we will also explore further potential performance
improvements with more expressive neural networks over
this base CNN conﬁguration.

In Table 2, we report a summary of our experiments val-
idating the quantitative effectiveness of our advice-taking
approach. Comparing with the non-advisable models (rows
1-2), our advisable models all gave better scores for vehi-
cle control prediction. As we will see in the next section,
we observe that our advisable driving model focuses more
on driving-related objects (whether provided as advice or
not) than others that do not take advice during training and
testing phases. For example, in Figure 4 and 5, our advis-
able model pays more attention to pedestrians crossing, a
car pulling out, and construction cones. More importantly,
advice like “stop at a stop sign” or “there is a person with
a stroller crossing the crosswalk” may reﬂect typical links
between visual causes and actions of human driver behav-
ior. The data suggests that taking advice in controller helps
imitate more closely human driver behaviors. Biasing the

Table 3: Recall from Section 3.4, we propose an advice
internalization technique – which minimizes the difference
between two attention maps (generated with and without ad-
vice inputs) and thus makes the driving model refer to the
same salient objects. Note that we use a synthetic token
<none> to indicate when advice inputs are not available.
We used λa as 50 (by the grid-search method).

Model

Advice input

Speed (km/h)

Steering Wheel Angle (deg)

Training Testing Median [Q1, Q3] Corr Median [Q1, Q3]

Corr

no advice internalization

w/ advice internalization

ADVS

ADVS

<None> 3.55 [1.58, 7.12]

.777 4.01 [1.59, 10.1]

<None> 3.36 [1.51, 6.62]

.784 3.96 [1.55, 10.0]

.479

.480

controller by taking advice improves the plausibility of its
output from a human perspective.

Types of Advice Matter. We further examine the perfor-
mance comparison with two different types of advice: the
goal-oriented advice (e.g., “stop at the intersection”) and the
stimulus-driven advice (e.g., “there is a pedestrian cross-
ing”).
In Table 2 (rows 3-4), we report vehicle control
prediction accuracy when each of which types of advice is
given to the model. In our analysis, the goal-oriented ad-
vice provides better control accuracy for predicting steering
wheel angle commands. This is mainly due to the fact that
the goal-oriented advice conveys the more direct messages,
which may include navigational command on how the ve-
hicle behaves (e.g., go/stop and turn). The stimulus-driven
advice, which conveys rich messages about visual saliencies
(e.g., red light, stop sign, and intersection), provides better
predicting accuracy for vehicle’s speed prediction.

Qualitative Analysis of Attention Maps. As shown in Fig-
ure 4, we qualitatively compared with our baseline by visu-
alizing attention heat maps - the highlighted image region

10596

Input
image

Attention heat maps

Baseline

(non-advisable)

Ours

(advisable)

Input
image

Attention heat maps

Baseline

(non-advisable)

Ours

(advisable)

x10-3
11
9
7
5
3

2.9  | 24.36 km/h

-3.8  | 14.09 km/h

-8.7  | 16.2 km/h

-2.1  | 38.14km/h

-1.9  | 31.9 km/h

-2.8  | 33.8 km/h

“See cones to the left of the turn lane.”

“There is a white car pulling out of a parking lot.”

3.8  | 25.3 km/h

-0.6  | 24.8 km/h

-4.7  | 22.0 km/h

-3.2  | 0.0 km/h

-4.3  | 10.4 km/h

6.8  | 6.7 km/h

“After the turn, be cautious due to pedestrian crosswalks”

“There is a person with a stroller crossing the crosswalk.”

d
e
e
p
S

l

 
|
 
e
g
n
a

 
l

 

e
e
h
w
g
n
i
r
e
e
t
S

i

e
c
v
d
A

5.2  | 16.66 km/h

-37.4  | 16.25 km/h

0.17  | 16.55 km/h

116.3  | 2.21 km/h

91.6  | 10.5 km/h

113.1  | 9.86 km/h

“Go straight and stop at the stop sign and then turn right.”

“Stop at a stop sign and wait for traffic and then continue 
straight through a roundabout”

Figure 4: Attention heat maps comparison. We provide input raw images and attention heat maps generated by the existing
attention-based driving model [8] (Baseline column), and our model trained with all types of advice together (Ours column).
We highlight key object-centric words (as appropriate row 1 & 2), e.g., cones and a white car pulling out, in green as well as
corresponding salient objects in a green circle overlaid on images.

has a potential inﬂuence on the network’s outputs. While
all models see driving-related common visual cues (i.e.,
lane markings), we observed that our advice-taking model
focuses more on both advice-related cues (i.e., pedestrian
crossing, construction cones, a car pulling out, etc) or vi-
sual objects relevant to the certain driving scenario (i.e., ve-
hicles, crosswalk, pedestrians, etc).

Internalizing Advice Taken. Users will not usually be
aware of the full state of the vehicle (they are not driv-
ing), the vehicle controller should mostly be in charge and
the human-to-vehicle advice might occasionally be unavail-
able. As summarized in Table 3, we further examine the
performance comparison with no advice available (we use a
synthetic token <none> to indicate unavailable advice in-
put) in a testing time. Interestingly, we observe that (i) the
performance of a model trained with the stimulus-driven ad-
vice is not degraded much whenever advice inputs are not
available in testing (its control performance is still better
than other non-advisable approaches), (ii) our advice inter-
nalization technique (see Equation 1) further improves the
control performance toward those having advice inputs.

In Figure 5, we further examine the effect of advice in-
ternalization by visualizing attention heat maps. We ﬁrst
visualize attention maps generated with no advice provided
(i.e., using a <none> token, see middle row). Then, we

Table 4: We compared the vehicle control prediction per-
formance with four different visual encoders. Except for
the visual encoder part, we use the same training strategy.

CNN base

Speed (km/h)

Steering Wheel Angle (deg)

Median [Q1, Q3] Corr Median [Q1, Q3]

Corr

MobileNet [7]

3.93 [1.73, 7.80]

.753 4.20 [1.65, 10.7]

Bojarski et al. [3]

3.78 [1.68, 7.49]

.763 3.58 [1.39, 9.34]

Inception v3 [23]

2.89 [1.31, 5.59]

.795 3.47 [1.34, 8.76]

Inception-ResNet-v2 [22] 2.93 [1.33, 5.63]

.796 3.54 [1.36, 9.19]

.463

.512

.525

.491

visualize the attention map changes when the model takes
ground-truth advice as an input (see bottom row). Our re-
sult reveals that our model is still able to see driving-related
visual cues (i.e., trafﬁc lights or lanes), whereas advice in-
puts can bias the model to refer to objects, which is related
to the advice given.

Visual Encoder Comparison. We further examine vari-
ants of our proposed model using four different widely-used
visual feature encoders. We used the output of intermedi-
ate layers from Bojarski et al. [3], Inception v3 [23], Mo-
bileNet [7], and Inception-ResNet-v2 [22]. We trained all
models in an end-to-end manner using random initializa-
tion, and we used both types of advice as an input in the
training and testing phases (averaged scores are reported).

10597

1

2

3

4

5

6

Input
image

Attention
heat maps
(without advice, 
i.e., a <None> token)

Attention
difference
(from with
to without advice)

x10-3
15
12
9
6
3

x10-3
2.4
1.2
0
-1.2
-2.4

1

2

3

“A bus is pulling off to another side of the road.”

“There is people getting out of their car on the right side.”

“Drive slow in a school zone.”

4

5

6

“Someone is hitting the brake in front of the car.”

“Come to a stop sign and turn left.”

“Pedestrians standing between two cars and pedestrians in the
distance crossing the road.”

Figure 5: We compared attention heat maps generated with and without advice as an input in testing time. We visualize raw
input images with salient objects marked by a green circle, e.g., a bus pulling off, which is mentioned by an advice input (1st
row). The provided advice (1-6) is provided at the bottom of the ﬁgure. We visualize attention heat maps from our trained
model but with a synthetic token <none> (i.e., without advice, 2nd row). Attention map differences between those with and
without advice (3rd row), where red parts indicate where the model (with advice) pays more attention.

As reported in Table 4, the result reveals that control pre-
diction accuracy can be generally expected to improve when
using a deeper CNN architecture, which learns more expres-
sive visual features. Visual features from the Inception v3-
based architecture lead the best performance improvement
against other three architectures.

n
o
i
t
a
r
e
e
c
c
A

l

0.85

0.84

0.83

0.82

0.81

Speed

Acceleration

2.97

0.74

Steering

Steering rate

2.95

2.93

2.91

S
p
e
e
d
 
(
k
m
h
)

/

g
n
i
r
e
e
t
s
 
f
o
e
t
a
r
 
e
h
T

 

0.73

0.72

2.89

0.71

3.48

3.47

3.46

3.45

3.44

S
t
e
e
r
i
n
g
 
(
d
e
g
r
e
e
)

0.00

0.01 0.05

0.10

1.00

0.01

0.01

0.10

0.00 0.01 0.05

0.10

1.00

0.01

0.01

0.10

0.00 0.00 0.00

0.00

0.00

0.01

0.10

0.10

0.00 0.00 0.00

0.00

0.00

0.01

0.10

0.10

Effect of Regularization. Recall from Section 3.4, we ex-
plored the loss function L, which contains three terms – Lp
(proportional error), Ld (derivative error), and Li (integral
error). We use two hyperparameters λd and λi to control
the strength of the corresponding terms. Figure 6 shows
control command prediction errors with different combina-
tions of hyperparameters in terms of the median value of
absolute errors. We also visualize the error of the acceler-
ation (the derivative of speed) and the steering angle rate
(the derivative of steering angle command). The impact
of adding these loss terms is dominant in the prediction of
speed, whereas the performance in steering is slightly de-
graded. We obtained marginal improvement by adding in-
tegral loss term (λi) in speed predictions, while derivative
errors are reduced by adding derivative loss term (λd).

6. Conclusion

We described an advisable driving model for self-driving
cars by incorporating a textual encoder that understands
human-to-vehicle natural language advice and grounds it
into the vehicle controller. We showed that (i) taking advice
improves vehicle control prediction accuracy compared to
baselines, (ii) our advice-taking model really sees advice-

Figure 6: Control performance comparison with different
sets of hyperparameters (λd, λi) (see Equation 2). Along
with proportional prediction errors (green bar), we also vi-
sualize derivative errors (blue line). We report the median
value of absolute error.

related visual cues and such advice can be internalized, and
(iii) our Honda Research Institute-Advice Dataset (HAD)
allows us to train and evaluate our advisable model and we
will make the dataset available upon publication.

This is a ﬁrst paper on the use of advice, but this design
is most appropriate for turn-by-turn (short duration) advice.
Since our data comprised short clips, advice was effective
throughout the clip. It will be worth exploring other styles
of advice, such as per-ride advice (gentle, fast, etc) and rule-
based global advice.

Acknowledgements. This work was part of J. Kim’s sum-
mer/fall internship at Honda Research Institute, USA and
also supported by DARPA XAI program and Berkeley
DeepDrive.

10598

[16] D. K. Misra, J. Sung, K. Lee, and A. Saxena. Tell me dave:
Context-sensitive grounding of natural language to manip-
ulation instructions. The International Journal of Robotics
Research, 35(1-3):281–300, 2016.

[17] D. K. Misra, K. Tao, P. Liang, and A. Saxena. Environment-
driven lexicon induction for high-level instructions. In Pro-
ceedings of the 53rd Annual Meeting of the Association for
Computational Linguistics and the 7th International Joint
Conference on Natural Language Processing (Volume 1:
Long Papers), volume 1, pages 992–1002, 2015.

[18] D. H. Park, L. A. Hendricks, Z. Akata, A. Rohrbach,
B. Schiele, T. Darrell, and M. Rohrbach. Multimodal expla-
nations: Justifying decisions and pointing to the evidence.
In Proceedings of the IEEE Conference on Computer Vision
and Pattern Recognition (CVPR), 2018.

[19] R. Rajamani. Vehicle dynamics and control. Springer Sci-

ence & Business Media, 2011.

[20] V. Ramanishka, Y.-T. Chen, T. Misu, and K. Saenko. To-
ward driving scene understanding: A dataset for learning
driver behavior and causal reasoning. In Proceedings of the
IEEE Conference on Computer Vision and Pattern Recogni-
tion (CVPR), pages 7699–7707, 2018.

[21] N. Srivastava, G. E. Hinton, A. Krizhevsky, I. Sutskever, and
R. Salakhutdinov. Dropout: a simple way to prevent neu-
ral networks from overﬁtting. Journal of Machine Learning
Research, 15(1):1929–1958, 2014.

[22] C. Szegedy, S. Ioffe, V. Vanhoucke, and A. A. Alemi.
Inception-v4, inception-resnet and the impact of residual
connections on learning. In AAAI, volume 4, page 12, 2017.
[23] C. Szegedy, V. Vanhoucke, S. Ioffe, J. Shlens, and Z. Wojna.
Rethinking the inception architecture for computer vision.
In Proceedings of the IEEE Conference on Computer Vision
and Pattern Recognition (CVPR), pages 2818–2826, 2016.

[24] S. Tellex, T. Kollar, S. Dickerson, M. R. Walter, A. G. Baner-
jee, S. J. Teller, and N. Roy. Understanding natural language
commands for robotic navigation and mobile manipulation.
In AAAI, volume 1, page 2, 2011.

[25] H.-Y. F. Tung, A. W. Harley, L.-K. Huang, and K. Fragki-
adaki. Reward learning from narrated demonstrations. Pro-
ceedings of the IEEE Conference on Computer Vision and
Pattern Recognition (CVPR), 2018.

[26] J. E. Weston. Dialog-based language learning. In Advances
in Neural Information Processing Systems, pages 829–837,
2016.

[27] H. Xu, Y. Gao, F. Yu, and T. Darrell. End-to-end learning of
driving models from large-scale video datasets. In Proceed-
ings of the IEEE Conference on Computer Vision and Pattern
Recognition (CVPR), pages 2174–2182, 2017.

References

[1] Y. Artzi and L. Zettlemoyer. Weakly supervised learn-
ing of semantic parsers for mapping instructions to actions.
Transactions of the Association of Computational Linguis-
tics, 1:49–62, 2013.

[2] M. Bojarski, A. Choromanska, K. Choromanski, B. Firner,
L. Jackel, U. Muller, and K. Zieba. Visualbackprop: visual-
izing cnns for autonomous driving. arXiv preprint, 2016.

[3] M. Bojarski, D. Del Testa, D. Dworakowski, B. Firner,
B. Flepp, P. Goyal, L. D. Jackel, M. Monfort, U. Muller,
J. Zhang, et al. End to end learning for self-driving cars.
CoRR abs/1604.07316, 2016.

[4] L. Chi and Y. Mu. Learning end-to-end autonomous steering
model from spatial and temporal visual cues. In Proceedings
of the Workshop on Visual Analysis in Smart and Connected
Communities, pages 9–16. ACM, 2017.

[5] T. Fernando, S. Denman, S. Sridharan, and C. Fookes. Go-
ing deeper: Autonomous steering with neural memory net-
works. In Computer Vision Workshop (ICCVW), 2017 IEEE
International Conference on, pages 214–221. IEEE, 2017.

[6] X. Glorot and Y. Bengio. Understanding the difﬁculty of
training deep feedforward neural networks. In Proceedings
of International Conference on Artiﬁcial Intelligence and
Statistics (AISTATS), volume 9, pages 249–256, 2010.

[7] A. G. Howard, M. Zhu, B. Chen, D. Kalenichenko, W. Wang,
T. Weyand, M. Andreetto, and H. Adam. Mobilenets: Efﬁ-
cient convolutional neural networks for mobile vision appli-
cations. arXiv preprint arXiv:1704.04861, 2017.

[8] J. Kim and J. Canny. Interpretable learning for self-driving
cars by visualizing causal attention. Proceedings of the IEEE
International Conference on Computer Vision (ICCV), pages
2942–2950, 2017.

[9] J. Kim, A. Rohrbach, T. Darrell, J. Canny, and Z. Akata.
Textual explanations for self-driving vehicles. In Proceed-
ings of European Conference on Computer Vision (ECCV),
pages 577–593. Springer, Cham, 2018.

[10] D. Kingma and J. Ba. Adam: A method for stochastic
optimization. Proceedings of International Conference for
Learning Representations (ICLR), 2015.

[11] G. Kuhlmann, P. Stone, R. Mooney, and J. Shavlik. Guiding
a reinforcement learner with natural language advice: Initial
results in robocup soccer. In The AAAI-2004 workshop on
supervisory control of learning and adaptive systems. San
Jose, CA, 2004.

[12] J. Li, A. H. Miller, S. Chopra, M. Ranzato, and J. Weston.
Dialogue learning with human-in-the-loop. arXiv preprint
arXiv:1611.09823, 2016.

[13] H. Ling and S. Fidler. Teaching machines to describe im-
ages via natural language feedback.
In Proceedings of the
International Conference on Neural Information Processing
Systems, pages 5075–5085, 2017.

[14] W. Liu, D. Anguelov, D. Erhan, C. Szegedy, S. Reed, C.-
Y. Fu, and A. C. Berg. Ssd: Single shot multibox detector.
In Proceedings of European Conference on Computer Vision
(ECCV), pages 21–37. Springer, 2016.

[15] J. McCarthy. Programs with common sense. RLE and MIT

computation center, 1960.

10599

