DARNet: Deep Active Ray Network for Building Segmentation

Dominic Cheng1, 2

Renjie Liao1, 2, 3

Sanja Fidler1, 2, 4

Raquel Urtasun1, 2, 3

University of Toronto1 Vector Institute2 Uber ATG Toronto3 NVIDIA4

{dominic, rjliao, fidler}@cs.toronto.edu

urtasun@uber.com

Abstract

In this paper, we propose a Deep Active Ray Network
(DARNet) for automatic building segmentation. Taking an
image as input, it ﬁrst exploits a deep convolutional neu-
ral network (CNN) as the backbone to predict energy maps,
which are further utilized to construct an energy function.
A polygon-based contour is then evolved via minimizing the
energy function, of which the minimum deﬁnes the ﬁnal seg-
mentation. Instead of parameterizing the contour using Eu-
clidean coordinates, we adopt polar coordinates, i.e., rays,
which not only prevents self-intersection but also simpliﬁes
the design of the energy function. Moreover, we propose a
loss function that directly encourages the contours to match
building boundaries. Our DARNet is trained end-to-end by
back-propagating through the energy minimization and the
backbone CNN, which makes the CNN adapt to the dynam-
ics of the contour evolution. Experiments on three build-
ing instance segmentation datasets demonstrate our DAR-
Net achieves either state-of-the-art or comparable perfor-
mances to other competitors.

1. Introduction

The ability to automatically extract building footprints
from aerial imagery is an important task in remote sensing.
It has many applications such as cartography, urban plan-
ning, and humanitarian aid. While maps in well-established
urban areas provide precise deﬁnitions of building outlines,
in more general situations, this information may be neither
up-to-date nor available altogether. Such is the case in re-
mote population centers and in dynamic scenarios caused
by rapid urban development or natural disasters. These sit-
uations motivate the use of automatic building segmentation
to form an understanding of an area.

Convolutional neural networks (CNNs) have rapidly es-
tablished themselves as the de facto standard for tasks of
semantic and instance segmentation, as demonstrated by
their impressive performance across a variety of datasets
[25, 7, 13]. When applied to the task of building segmenta-
tion, however, there exists room for improvement. Speciﬁ-

Figure 1: We introduce our DARNet framework, which ap-
proaches the problem of instance segmentation by deﬁning
a contour using active rays that evolve according to energies
parameterized by a CNN. Given an input image, a CNN out-
puts three maps that deﬁne energies. An initialized contour
then moves to minimize the energy, yielding an instance
segmentation.

cally, as demonstrated in [22], while CNNs are able to gen-
erate dense, pixel-based predictions with high recall, they
have issues with precise delineation of building boundaries.

Arguably, these boundaries are the most useful features
in deﬁning the shape and location of a building. Motivated
by this, Marcos et al. proposed the deep structured active
contours (DSAC) [15] model, which combines the power
of deep CNNs with the classic polygon-based active con-
tour model of Kass et al. [11]. This ﬁts in particularly well
with our prior understanding of buildings, which are gen-
erally laid out as relatively simple polygons. DSAC uses
a deep CNN to predict an energy landscape on which the
active contour, also known as a snake, crawls. When the
energy reaches the minimum, the snake stops and the en-
closed region is the ﬁnal predicted segmentation.

Although DSAC’s contours exhibit improved coverage
compared to CNN based segmentation, they can still be
blob-like without strict adherence to building boundaries.
Additionally, the representation of contour points with two
degrees of freedom presents some challenges. Most no-
tably, it results in extra computational overhead to mini-
mize the proposed energy, and also allows for some con-
tours to exhibit self-intersections. To address these limita-

7431

tions, we introduce the Deep Active Ray Network (DAR-
Net), a framework based on a polar representation of active
contours, traditionally known as active rays. This ray-based
parameterization provides several advantages: 1) contour
self-intersections are completely eliminated; 2) it allows us
to propose a simpler energy function; 3) the parameteriza-
tion lends itself to a new loss function that encourages con-
tours to match building boundaries. Our DARNet also ex-
ploits a deep CNN as the backbone network for predicting
the energy landscape. We train the whole model end-to-end
by back-propagating through the energy minimization and
the backbone CNN. We compare DARNet against DSAC on
three datasets, Vaihingen, Bing Huts, and TorontoCity, and
demonstrate its improved effectiveness in producing seg-
mentations that better align with building boundaries.

2. Related Work

Active Contour Models: First introduced in [11] by the
name of snakes, active contour models proved to be an ex-
tremely popular approach to image segmentation. In these
models, an energy is deﬁned as a functional, and its min-
imization yields a contour that describes a segmentation.
The description of this energy is based on intuitive geomet-
ric priors and leverages features such as the intensity image
and its gradient. Of the myriad works that followed, [5]
proposed a balloon force to avoid the tendency for snakes
to collapse when initialized far from object edges. [6] re-
formulated snakes in a polar representation known as ac-
tive rays to reduce the energy optimization from two dimen-
sions to one, and addressed the issue of contour collapse by
introducing energies that encouraged circular shapes. Our
approach leverages the parameterization of active rays, but
we elect to use the curvature term proposed in snakes, as
our application of interest does not typically contain circu-
lar boundaries. Furthermore, we propose a novel balloon
energy that does not involve computing normals at every
point in our contour, but rather exploits the properties of a
polar parameterization to achieve desired effect in a manner
that can be efﬁciently computed, and ﬁts in seamlessly with
our contour inference.

Deep Active Contour Models: [18] proposed to com-
bine deep learning with the active contours framework of
[20] by having a CNN predict a vector ﬁeld for a patch
around a given contour point to guide it to the closest
boundary. However, this method is unable to be learned
end-to-end, as CNN learning is separated from the active
contour inference. [9, 23] propose to combine a CNN with
a level set method [16] in an end-to-end differentiable man-
ner.
In contrast to level sets, which deﬁne contours im-
plicitly, snakes provide an explicit representation of con-
tour points allowing for the deﬁnition of energies based on
geometric intuition. [15] uses the snakes framework and re-
places the engineered features with ones learned by a CNN.

The problem is posed under the formulation of structured
output prediction, and the CNN is trained using a structured
support vector machine (SSVM) hinge loss [21] to optimize
for intersection-over-union. In contrast, we propose to use
an active rays parameterization alongside a largely simpli-
ﬁed energy functional. We also propose a loss function that
encourages sharper, better aligned contours. Additionally,
we back-propagate our loss through the contour evolution,
i.e., the energy minimization. It is interesting to note that
there are other deep learning based approaches for predict-
ing polygon-based contours. For example, rather than rep-
resenting a polygon as a discretization of some continuous
function, [4, 2] use a recurrent neural network (RNN) to di-
rectly predict the polygon vertices in a sequential manner.
In [12], the authors predict the polygon or spline outlining
the object using a Graph Convolutional Network.

Building Segmentation: Current state-of-the-art ap-
proaches to building segmentation typically incorporate
CNNs in a two stage pipeline: identify instances, and ex-
tract polygons. As shown in [22], instances can be extracted
from connected components of the semantic mask predicted
by a semantic segmentation network [14, 8], or directly pre-
dicted with an instance segmentation network [3]. A poly-
gon is then extracted from the instance mask. Because the
output space of these approaches are individual pixels, the
networks do not reason about the geometry of its predic-
tions, resulting in segmentations that are blob-like around
building boundaries. In contrast, the concept of a polygo-
nal output is directly embedded in our model, where we can
encourage our outputs to match ground truth shapes.

3. Our Approach

In this section, we introduce our DARNet model. Given
an input image, our CNN predicts feature maps that deﬁne
an energy landscape. We place a polygon-based contour,
parameterized using polar coordinates, at an initial position
on this landscape. This contour then evolves to minimize its
energy via gradient descent, and its resting position deﬁnes
the predicted instance segmentation. We refer the reader
to Figure 1 for an illustration of our model. In the subse-
quent sections, we ﬁrst describe our parametrization of the
contour, highlighting its advantages, such as avoiding self-
intersections. We then introduce our energy formulation, in
particular our novel balloon energy, and the contour evolu-
tion process. Last, we explain how to learn our model in an
end-to-end manner.

3.1. Contour Representation

Recall that in the active contour (or snake) model a con-

tour point v is represented as

v(s) = (cid:20)xv(s)
yv(s)(cid:21)

(1)

7432

(a)

(b)

(a)

(b)

Figure 2: Contours deﬁned by (a) active rays and (b) snake.

Figure 3: Multiple boundary intersections can occur for
(a) non-convex region, (b) self-intersection.

where s denotes the arc length and is generally deﬁned over
an interval s ∈ [0, 1]. Note that by varying the arc length s
from 0 to 1, we obtain the contour. Since this parameteriza-
tion adopts separate functions for x and y coordinates, the
contour point is free to move in any direction, which may
cause self-intersection as shown in Figure 3. In contrast, in
this paper, we propose to use a parametrization that implic-
itly avoids self-intersection.

Active Rays:
tour via rays. In particular, we deﬁne a contour point c as

Inspired by [6], we parameterize the con-

c(θ) = (cid:20)xc + ρ(θ) cos θ
yc + ρ(θ) sin θ(cid:21)

(2)

where (xc, yc) deﬁne the reference point of the contour,
ρ ≥ 0 is the radius and θ is the angle tracing out from the
x-axis and ranging [0, 2π). We assume (xc, yc) to be ﬁxed
within the interior of the object of interest. To ease the com-
putation, we discretize the contour as a sequence of L points
{ci}L
i=1. The discretization is chosen such that points have
equal angular spacing,

(3)

ci = (cid:20)xc + ρi cos(i∆θ)
yc + ρi sin(i∆θ)(cid:21)
where ∆θ = 2π
L and ρi = ρ(i∆θ). The above ray based
parameterization is called active rays. Importantly, if the
region enclosed by the contour forms a convex set, we can
guarantee that for any interior reference point, given any
angle θ, there is only one corresponding radius ρ based on
the following proposition.

Proposition 1. Given a closed convex set X, a ray starting
from any interior point of X will intersect with the boundary
of X once.

We leave the proof to the supplementary material. If the
region is non-convex, a ray may possibly have more than
one intersecting point with the boundary. In that case, we
pick the one with the minimum distance from the refer-
ence point, thus eliminating the possibility that there are

multiple ρ corresponding to the same angle θ. Therefore,
compared to snakes, an active rays parameterization avoids
self-intersections as shown in Figure 3. Moreover, since we
ﬁx the angle at which rays can emanate, the contour points
possess an inherent order. Such ordering does not exist for
snakes; for example, any cyclic permutation of the snake
points produces an identical contour. As we see in Sec-
tion 3.4, this allows us to naturally use a loss function that
encourages our contours to match building boundaries.

Multiple Sets of Active Rays: Note that active rays
largely preclude contours that enclose non-convex regions.
While this is not the dominating case in our application do-
main, we would like to create a solution that can handle
non-convex shapes. Towards this goal, we propose to use
multiple sets of active rays, where each set has its own ﬁxed
reference point. First, we exploit an instance segmentation
to generate a segment over the region of interest (RoI). We
use the method in [3] as it tends to under segment the RoIs,
thus largely guaranteeing our reference point to lie in the
interior. Using this segment, we calculate a distance trans-
form on the mask, and select the location of the largest value
as the reference point of our initial contour. If this evolved
contour cannot cover the whole segment, we then repeat the
process using the distance transform of the uncovered re-
gions, until we cover the whole segment. This is illustrated
in Figure 4. The union of evolved contours is used to con-
struct the ﬁnal prediction.

3.2. Contour Energy

We now introduce the formulation of the contour en-
ergy functional, of which the minimization yields the ﬁnal
contour. In particular, we encourage the contour to follow
boundaries, prefer low-curvature solutions, and expand out-
wards from a small initialization. With the aforementioned
discretization, the overall energy is deﬁned as follows,

[Edata(ci) + Ecurve(ci) + Eballoon(ci)] .

(4)

E(c) =

L

Xi=1

7433

(a)

(c)

(b)

(d)

Figure 4: Multiple initialization scheme. (a) Instance seg-
mentation from [3] (gray), and ground truth (green); (b)
First initialization and segmentation (red); (c) Initialization
from remaining segment (blue); (d) Final output.

Unlike traditional active contour models, we parameterize
the energy with the help of a backbone CNN. The hope
is that the great power of representation learning of CNN
can make the contour evolution more accurate and efﬁcient.
We use a CNN architecture based on Dilated Residual Net-
works [24]. Speciﬁcally, we use DRN-D-22, with weights
pretrained on ImageNet [19], and append additional learned
upsampling layers using transposed convolutions. At the
last layer, we predict three outputs that match the input im-
age size, corresponding to three maps, which we denote as
(D, β, κ). We now describe each energy term in detail.

Data Term: Given an input image, the data term is de-
ﬁned as

Edata(ci) = D(ci),

(5)

where D is a non-negative feature map output by the back-
bone CNN. Note that D and all subsequently described fea-
ture maps are of the same shape as the input image. Since
we are minimizing the energy, the contour should seek out
places where D is low. Therefore, the CNN should ideally
predict low values at the boundaries.

Curvature Term:
tance of the contour towards bending as follows

Intuitively, this term models the resis-

Ecurve(ci) = β(ci)|ci+1 − 2ci + ci−1|2,

(6)

where β is a non-negative feature map output by the back-
bone CNN and the squared term is a discrete approximation
of the second order derivative of the contour. This term
is ﬂexible since the weighting scheme induced by β can
make the energy locally adaptive. This energy term will
force the contour to straighten out wherever the value is
high. Our curvature term is simpler compared to the one

in DSAC [15], where in order to prevent snake points from
clustering too close together in low-energy areas, they em-
ploy an additional membrane term based on the ﬁrst order
derivative of the contour. In contrast, we do not need such
a term as our evenly spaced angles guarantee that contour
points will not group too closely.

Balloon Term: Our balloon term is deﬁned by

Eballoon(ci) = κ(ci)(1 − ρi/ρmax)

(7)

where κ is a non-negative feature map output by the back-
bone CNN and ρmax is the maximum radius a contour can
reach without crossing the image boundary. The balloon
term is designed to propel a given contour point outwards
from its reference point, conditioned on the value of the un-
derlying κ map. It is necessary due to two reasons. First, the
data term may be insufﬁcient to guide the contour towards
the boundaries, especially if the contour was initialized far
away from them. Second, as noted in [6], the curvature term
has an auxiliary effect of shrinking the contour, which can
lead to its collapse.

It is interesting to note that DSAC [15] also employs a
balloon term which can be expressed using our notation as
below,

EDSAC

balloon(v) = − X(x,y)∈Ω(v)

κ

(8)

where Ω(v) denotes the area enclosed by the contour v.
This term pushes the contour to encapsulate as much of the
κ map as possible. In our case, due to the active ray param-
eterization, a contour point can only move along one axis,
either towards the reference point or away. Therefore, our
balloon term is much simpler as it avoids the need to per-
form an area integral. Also, as we will see in the following
section, our balloon term ﬁts in seamlessly with our infer-
ence procedure.

3.3. Contour Evolution

Conditioned on the energy terms predicted by the back-
bone CNN, the second inference step is achieved through
energy minimization. To evolve the initial contour towards
the optimal one, we ﬁrst derive the partial derivatives and
set them to zero. We then resort to an iterative algorithm to
solve the system of partial derivatives.

Speciﬁcally, the partial derivatives of the energy terms

w.r.t. the contour are derived as below. For the data term,

∂Edata(c)

∂ρi

=

∂D(ci)

∂x

cos(i∆θ) +

∂D(ci)

∂y

sin(i∆θ)

(9)

where we change the coordinates back to Cartesian to facil-
itate the computation of derivatives, e.g. with a Sobel ﬁlter.

7434

For the curvature term, substituting the Cartesian expres-
sion of contour points (Equation 3) into the expressions for
the energy (Equation 6 and Equation 4), we have,

∂Ecurve(c)

∂ρi

=

∂
∂ρi

L−1

Xi=0

β(ci)[ρ2

i+1 + 4ρ2

i + ρ2

i−1−

4ρi(ρi+1 + ρi−1) cos(∆θ)+
2ρi+1ρi−1 cos(2∆θ)]

≈ [2β(ci+1) cos(2∆θ)]ρi+2+

[−4(β(ci+1) + β(ci−1) cos(∆θ)]ρi+1+
2(β(ci+1) + 4β(ci) + β(ci−1))]ρi+
[−4(β(ci) + β(ci−1)) cos(∆θ)]ρi−1+
[2β(ci−1) cos(2∆θ)]ρi−2

(10)

where we discard the term arising from the product rule of
differentiation as in [15]. We interpret this approximation as
treating the β map as not varying within the small vicinity
of the contour points. Alternatively, we do not wish for the
gradient of the β map to exert pressure on the contour. Em-
pirically, we found that doing so stabilizes learning, as the
network only needs to adjust values of the β map without
attention to its gradients.

For the balloon term, we use the same approach as the

curvature term to obtain the partial derivative,

∂Eballoon(c)

∂ρi

≈ −

κ(ci)
ρmax

(11)

With the above derivation, we have a collection of L partial
differential equations w.r.t. individual contour points. We
can summarize this system of equations in a compact matrix
form,

∂E
∂ρ

= Aρ + f

(12)

where ρ is a column vector of size L, A is an L × L cyclic
pentadiagonal matrix comprised of Ecurve derivatives, and f
is a column vector comprised of Edata and Eballoon deriva-
tives.

This system of partial differential equations can be
solved with an iterative method. The approach taken by [11]
and [15] is an implicit-explicit method. For the purposes of
our implementation, we adopt an explicit method instead,
as it avoids the matrix inverse operation. Speciﬁcally, the
contour evolves according to

ρ(t+1) = ρ(t) − ∆t (Aρ(t) + f )

(13)

where ∆t is a time step hyperparameter.
In practice, we
found setting ∆t as 2e−4 is stable enough for solving the
system.

Figure 5: Ground truth rays (green) are deﬁned as the clos-
est distance to the ground truth polygon.

Algorithm 1: DARNet training algorithm.

Given: Input image I, CNN F with parameters ω,

ground truth rays ρGT , initial rays ρ(0), time
step hyperparameter ∆t, number of training
steps N

for j = 1 to N do

(D, β, κ) = F (Ij; θ)
while not converged do

A, f = collection of ∂E
∂ρ(t)
j − ∆t(Aρ(t)

ρ(t+1)
j

= ρ(t)

j

j + f )

using (D, β, κ)

end
L = ℓ(ρ(T )
Compute ∂L
Update ω with gradient-based optimization

, ρGT
∂ω using backpropagation

)

j

j

end

3.4. Learning

Since there exists an explicit ordering of the contour
points, we can naturally generate a ground truth active ray
and use it to supervise the prediction. Using the same ref-
erence point (xc, yc) and angle discretization ∆θ, we cast
rays outwards and record the distances at which they inter-
sect the ground truth polygon. In the case of multiple inter-
sections, we take the smallest distance, to prioritize hitting
the correct boundaries over increasing coverage. This is il-
lustrated in Figure 5. We use this collection of ground truth
distances, {ρGT

i=1, to compute an L1 loss:

i }L

ℓ(ρ, ρGT ) =

L

Xi=1

|ρGT

i − ρi|.

(14)

It differs from the loss employed by DSAC, which used
a SSVM hinge loss to optimize for intersection-over-union.
Instead, our loss encourages contour points to target build-
ing boundaries which is simpler and more efﬁcient.

To allow for gradients to backpropagate to the D, β, and
κ maps, we interpret the value of a given contour point as
a ﬂoating point number, and compute the value of a map
at that point (e.g. D(ci)) using bilinear interpolation from
its four adjacent map entries, in a manner similar to what is
used in Spatial Transformer Networks [10]. We summarize
the learning process in Algorithm 1.

7435

4. Experiments

4.1. Experimental Setup

Datasets: We evaluate DARNet on several building
instance segmentation datasets: Vaihingen [1], Bing
Huts [15], and TorontoCity [22]. The Vaihingen dataset
consists primarily of detached buildings in a town in south-
ern Germany. The original images are 512 × 512 at a reso-
lution of 9 cm/pixel. There are 168 buildings in total, which
are divided into 100/68 examples for train/test according to
the same split used in [15]. The Bing Huts dataset consists
of huts located in a rural area of Tanzania, with an origi-
nal size of 80 × 80 at a resolution of 30 cm/pixel. There
are 605 images in total, divided into 335/270 examples
for train/test, again using the same splits. For these two
datasets, we further partition the existing training data in
an 80%/20% split to form a validation set, and use this for
model selection. We do this for 5 disjoint validation sets,
while the test set remains the same. The TorontoCity dataset
contains aerial images captured over a dense urban area in
Toronto. The images used have a resolution of 10 cm/pixel.
The dataset consists of approximately 28, 000/12, 000 im-
ages for train/test which covers a diverse mixture of build-
ings, including residential, commercial, and industrial. We
divide the training set of TorontoCity into a 80%/20% split
for training and validation respectively.

Metrics: We measure performance using intersection-
over-union (IoU) averaged over number of
instances,
weighted coverage, and polygon similarity as in [22]. Addi-
tionally, we evaluate the boundary F-score (BoundF) intro-
duced in [17], averaged over thresholds from 1 to 5 pix-
els, inclusive. For Vaihingen and Bing Huts, we aggre-
gate these metrics over all models selected with the various
validation sets, measuring their mean and standard devia-
tion. Lastly, for TorontoCity, we also evaluate the quality
of alignment for the predicted boundaries. Speciﬁcally, we
gather predicted contour pixels that match with the ground
truth boundaries, within a threshold of 5 pixels. For these
matches, we evaluate the alignment error with respect to
the ground truth, which is determined as the cosine simi-
larity between the ground truth boundary and the predicted
boundary. We then rank these pixels by their alignment er-
ror, and plot the recall at various thresholds of this error.

Hyper-parameters: We discretize our contour with
L = 60 points. For training, we use SGD with momentum,
with learning rate 4 × 10−5, momentum 0.3, and a batch
size of 10. The learning rate decay schedule is explained
in supplementary material. We perform 200-step inference
as it is found to be sufﬁcient for convergence in practice.
We initialize the contour randomly within the ground truth
boundary during training. For testing, we initialize in im-

Figure 6: Recall-alignment curve. The recall for all match-
ing boundary pixels (within a 5 pixel threshold of ground
truth) is plotted at a given alignment error. Our method ex-
hibits increased recall overall.

age centers for Vaihingen and Bing Huts due to the fact that
most buildings of these two datasets are of regular shape.
As for TorontoCity, we leverage the deep watershed trans-
form (DWT) [3] to get instance proposals and initialize as
described in Section 3.1. Standard data augmentation tech-
niques (random rotation, ﬂipping, scaling, color jitter) are
used. We do not adopt common stabilization tricks during
inference as they are non-differentiable. Instead, we found
using the Euclidean distance transform to pre-train our D,
β and κ maps helps stabilize the inference during training.
We leave more details of pre-training in the supplementary
material.

4.2. Results

Vaihingen and Bing Huts: We compare against the
baseline methods and DSAC [15]. In particular, the base-
line exploits a fully convolutional network (FCN) [14] as
the backbone to perform semantic segmentation of build-
ings (interior, boundary, and exterior) and then the post-
processing following [15] to obtain the predicted contour.
For fair comparison, we also replace the backbone of DSAC
and the baseline with ours. We summarize results in Ta-
ble 1. Compared to the strong FCN baselines, our method
exhibits improved performance across the majority of met-
rics. In particular, the signiﬁcant improvement on PolySim
suggest our segmentations are more geometrically similar.
Furthermore, our method signiﬁcantly outperforms DSAC
on all metrics. Even in instances where DSAC exhibits good
coverage-based metrics, our method is signiﬁcantly better
at capturing edges. It is interesting to note that substitut-
ing our backbone in DSAC does not increase performance,
while DSAC’s results generally exhibits higher variance, re-
gardless of backbone.

TorontoCity: We compare against the semantic seg-
mentation based methods that utilize FCN-8s [14] or

7436

Method

Vaihingen

Bing Huts

Approach

Backbone

DSAC’s [15]
Ours

FCN
FCN
DSAC [15] DSAC’s [15]
DSAC [15] Ours
Ours
Ours

mIoU

µ

81.09
87.27
71.10
60.37
88.24

σ

0.32
0.50
3.88
5.97
0.38

WCov
µ

σ

PolySim
σ
µ

BoundF
σ
µ

81.48
86.89
70.76
61.12
88.16

0.52
0.40
4.07
6.22
0.35

68.78
76.41
61.71
52.96
81.33

0.66
0.77
3.97
5.89
0.37

64.60
76.84
36.44
24.34
75.91

0.77
0.48
5.16
5.73
0.89

mIoU

µ

69.88
74.54
38.74
57.23
75.29

σ

0.65
1.22
1.07
3.89
0.45

WCov
µ

σ

PolySim
σ
µ

BoundF
σ
µ

73.36
77.55
44.61
63.09
77.07

0.40
0.96
3.00
2.25
0.63

64.01
67.98
38.91
55.43
72.12

0.36
2.20
2.66
2.20
0.57

30.39
37.77
37.16
15.98
38.08

0.95
2.69
0.85
2.62
0.76

Table 1: Test set results (mean and standard deviation) on Vaihingen and Bing Huts from models selected across 5 disjoint
validation sets. mIoU is averaged over instances. WCov is weighted coverage. PolySim is polygon similarity. BoundF is
average boundary-F score at 1 pixel to 5 pixel thresholds.

Method

mIoU WCov

PolySim BoundF

FCN-8s [14]
ResNet50 [8]
DWT [3]
DSAC [15]
Ours, single init
Ours, multi init

-
-
-

60.0
57.9
60.1

45.6
40.1
52.0
58.0
52.2
57.5

32.3
29.2
24.0
27.2
23.9
26.8

-
-
-

25.4
29.0
29.6

Table 2: Results on TorontoCity.

ResNet50 [8], along with the instance segmentation method
that relies on DWT. Additionally, because the commercial
and industrial buildings contained in TorontoCity tend to
possess complex boundaries, we examine the effects of us-
ing one versus multiple initializations described in Sec-
tion 3.1. We summarize results in Table 2. Our method
shows improved performance compared to DSAC on the
mIOU. For weighted coverage, which accounts for the area
of the building, we achieve comparable performance to
DSAC. Our performance on this metric is inﬂuenced pri-
marily by larger buildings, as moving from a single initial-
ization to multiple initializations signiﬁcantly improves the
performance. We ﬁnd that large areas presented by com-
mercial and industrial lots present many ambiguous features
such as mechanical penthouses and visible facades due to
parallax error. Our single initialization method tends to pro-
duce smaller segmentations as it focuses on the boundaries
offered by these features. This is alleviated by using mul-
tiple initializations. The weighting from larger buildings is
also reﬂected in polygon similarity. The average BoundF
metric demonstrates our method is signiﬁcantly better at
capturing building boundaries than DSAC. It is important
to note that even our segmentations generated with a sin-
gle initialization showed improved performance. To delve
deeper into the quality of these segmentations, we exam-
ine their alignment with respect to the ground truth in Fig-
ure 6. We see that, for a given threshold for alignment error,
our method exhibits superior recall. Overall, our multiple
initialization scheme performs the best, although for lower
error thresholds our single initialization is also very com-
petitive.

Number of Initializations: In TorontoCity, we found

(a)

(b)

(c)

(d)

Figure 7: Energies predicted by our CNN on an example
from the Vaihingen test set.
(a) Input image, initial con-
tour (yellow), and ﬁnal contour (cyan). (b) Data term. (c)
Curvature term. (d) Balloon term.

that 25.7% of examples required multiple initializations.
For these examples, on average 3.71 initializations were re-
quired.

Qualitative Discussion: We visualize some energies
predicted by our CNN in Figure 7. We see the CNN opts to
predict a D term that has deep valleys at the building con-
tours. The β term adopts small values along the edges to
encourage straightness at the boundaries, while the κ term
acts to propel the contour points from inside. We show
additional segmentations in Figure 8. The segmentations
produced by our method are generally more adherent to
the edges of the buildings. This is especially helpful when
buildings are densely packed together, as seen in the Toron-
toCity results (columns e-f). Additionally, in comparison
to DSAC, our parameterization successfully prevents self-
intersecting contours (column b, second last row).

Failure Modes: The last two rows in Figure 8 demon-
strate some weaknesses of our model. In cases where the
model is unsure about the extent of one building, it will ex-
pand the contour until it meets the edge of another building
(column (b), last row). Also, on large commercial lots (col-
umn f, last two rows), our method becomes confused by the
shapes and features of the buildings.

5. Conclusion

In this paper, we presented an approach to building in-
stance segmentation using a combination of active rays with
energies predicted by a CNN. The use of a polar represen-
tation of contours enables us to predict contours that cannot
self-intersect, and to employ a loss function that encourages

7437

(a)

(b)

(c)

(d)

(e)

(f)

Figure 8: Results on (a-b) Vaihingen, (c-d) Bing Huts, (e-f) TorontoCity. Bottom two rows highlight failure cases. Original
image shown in left. On right, our output is shown in cyan; DSAC output in yellow; ground truth is shaded.

our predicted contours to match building boundaries. Fur-
thermore, we demonstrate a method to combine several pre-
dictions to generate more complex contours. Comparisons
against other state-of-the-art methods on various buliding
segmentation datasets demonstrate our method’s power in
generating segmentations that better capture, and are better
aligned with, building boundaries.

Acknowledgments

We gratefully acknowledge support from the Vector In-
stitute, and NVIDIA for donation of GPUs. S.F. also ac-
knowledges the Canada CIFAR AI Chair award at the Vec-
tor Institute. We thank Relu Patrascu and Priyank Thatte for
infrastructure support.

7438

References

[1] International

for

society

photogrammetry
mote sensing, 2d semantic labeling contest.
//www2.isprs.org/commissions/comm3/wg4/
semantic-labeling.html. 6

re-
http:

and

[2] D. Acuna, H. Ling, A. Kar, and S. Fidler. Efﬁcient interactive
annotation of segmentation datasets with polygon-rnn++. In
CVPR, pages 859–868, 2018. 2

[3] M. Bai and R. Urtasun. Deep watershed transform for in-
In CVPR, pages 2858–2866. IEEE,

stance segmentation.
2017. 2, 3, 4, 6, 7

[4] L. Castrejon, K. Kundu, R. Urtasun, and S. Fidler. Annotat-
ing object instances with a polygon-rnn. In CVPR, volume 1,
page 2, 2017. 2

[5] L. D. Cohen. On active contour models and balloons.

CVGIP: Image understanding, 53(2):211–218, 1991. 2

[6] J. Denzler, H. Niemann, et al. Active rays: Polar-transformed
active contours for real-time contour tracking. Real-Time
Imaging, 5(3):203–213, 1999. 2, 3, 4

[7] K. He, G. Gkioxari, P. Dollr, and R. Girshick. Mask r-cnn.

In ICCV, pages 2980–2988, Oct 2017. 1

[8] K. He, X. Zhang, S. Ren, and J. Sun. Deep residual learning
for image recognition. In CVPR, pages 770–778, 2016. 2, 7

[9] P. Hu, B. Shuai, J. Liu, and G. Wang. Deep level sets for
salient object detection. In CVPR, volume 1, page 2, 2017. 2

[10] M. Jaderberg, K. Simonyan, A. Zisserman, et al. Spatial

transformer networks. In NIPS, pages 2017–2025, 2015. 5

[11] M. Kass, A. Witkin, and D. Terzopoulos. Snakes: Active

contour models. IJCV, 1(4):321–331, 1988. 1, 2, 5

[12] H. Ling, J. Gao, A. Kar, W. Chen, and S. Fidler. Fast in-
teractive object annotation with curve-gcn. In CVPR, 2019.
2

[13] S. Liu, L. Qi, H. Qin, J. Shi, and J. Jia. Path aggregation

network for instance segmentation. In CVPR, 2018. 1

[14] J. Long, E. Shelhamer, and T. Darrell. Fully convolutional
networks for semantic segmentation. In CVPR, pages 3431–
3440, June 2015. 2, 6, 7

[15] D. Marcos, D. Tuia, B. Kellenberger, L. Zhang, M. Bai,
R. Liao, and R. Urtasun. Learning deep structured active
contours end-to-end. In CVPR, pages 8877–8885, 2018. 1,
2, 4, 5, 6, 7

[16] S. Osher and J. A. Sethian.

Fronts propagating with
curvature-dependent speed: algorithms based on hamilton-
jacobi formulations.
Journal of Computational Physics,
79(1):12–49, 1988. 2

[17] F. Perazzi, J. Pont-Tuset, B. McWilliams, L. Van Gool,
M. Gross, and A. Sorkine-Hornung. A benchmark dataset
and evaluation methodology for video object segmentation.
In Computer Vision and Pattern Recognition, 2016. 6

[18] C. Rupprecht, E. Huaroc, M. Baust, and N. Navab. Deep

active contours. arXiv preprint arXiv:1607.05074, 2016. 2

[19] O. Russakovsky, J. Deng, H. Su, J. Krause, S. Satheesh,
S. Ma, Z. Huang, A. Karpathy, A. Khosla, M. Bernstein,
et al.
Imagenet large scale visual recognition challenge.
IJCV, 115(3):211–252, 2015. 4

[20] G. Sundaramoorthi, A. Yezzi, and A. C. Mennucci. Sobolev
active contours. International Journal of Computer Vision,
73(3):345–366, 2007. 2

[21] I. Tsochantaridis, T. Joachims, T. Hofmann, and Y. Altun.
Large margin methods for structured and interdependent out-
put variables. JMLR, 6:1453–1484, 2005. 2

[22] S. Wang, M. Bai, G. Mattyus, H. Chu, W. Luo, B. Yang,
J. Liang, J. Cheverie, S. Fidler, and R. Urtasun. Torontocity:
Seeing the world with a million eyes. In ICCV, pages 3028–
3036, 2017. 1, 2, 6

[23] Z. Wang, D. Acuna, H. Ling, A. Kar, and S. Fidler. Object
instance annotation with deep extreme level set evolution. In
CVPR, 2019. 2

[24] F. Yu, V. Koltun, and T. Funkhouser. Dilated residual net-

works. In CVPR, 2017. 4

[25] H. Zhao, J. Shi, X. Qi, X. Wang, and J. Jia. Pyramid scene

parsing network. In CVPR, pages 2881–2890, 2017. 1

7439

