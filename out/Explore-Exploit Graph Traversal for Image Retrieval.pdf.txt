Explore-Exploit Graph Traversal for Image Retrieval

Cheng Chang ∗

Guangwei Yu ∗

Layer6 AI

Layer6 AI

Chundi Liu
Layer6 AI

Maksims Volkovs

Layer6 AI

jason@layer6.ai

guang@layer6.ai

chundi@layer6.ai

maks@layer6.ai

Abstract

We propose a novel graph-based approach for image re-
trieval. Given a nearest neighbor graph produced by the
global descriptor model, we traverse it by alternating be-
tween exploit and explore steps. The exploit step maxi-
mally utilizes the immediate neighborhood of each vertex,
while the explore step traverses vertices that are farther
away in the descriptor space. By combining these two
steps we can better capture the underlying image mani-
fold, and successfully retrieve relevant images that are vi-
sually dissimilar to the query. Our traversal algorithm
is conceptually simple, has few tunable parameters and
can be implemented with basic data structures. This en-
ables fast real-time inference for previously unseen queries
with minimal memory overhead. Despite relative sim-
plicity, we show highly competitive results on multiple
public benchmarks, including the largest image retrieval
dataset that is currently publicly available. Full code for
this work is available here: https://github.com/
layer6ai-labs/egt.

1. Introduction

Image retrieval is a fundamental problem in computer
vision with numerous applications including content-based
image search [31], medical image analysis [16] and 3D
scene reconstruction [12]. Given a database of images, the
goal is to retrieve all relevant images for a given query im-
age. Relevance is task speciﬁc and typically corresponds to
images containing same attribute(s) such as person, land-
mark or scene. At scale, retrieval is typically done in two
phases: ﬁrst phase quickly retrieves an initial set of candi-
dates, and second phase reﬁnes this set returning the ﬁnal
result. To support efﬁcient retrieval, ﬁrst phase commonly
encodes images into compact low dimensional descriptor
space where retrieval is done via inner product. Numerous
approaches have been proposed in this area predominantly
based on local invariant features [17, 18, 29] and bag-of-

∗Authors contributed equally to this work.

words (BoW) models [26]. With recent advances in deep
learning, many of the leading descriptor models now use
convolutional neural networks (CNNs) trained end-to-end
for retrieval [30, 3, 10, 25].

Second phase is introduced because it is difﬁcult to accu-
rately encode all relevant information into compact descrip-
tors. Natural images are highly complex and retrieval has
to be invariant to many factors such as occlusion, lighting,
view-angle, background clutter etc. Consequently, while
the ﬁrst phase is designed to be efﬁcient and highly scalable,
it often doesn’t produce the desired level of accuracy [35, 7].
Research in the second phase have thus focused on reduc-
ing false positives and improving recall [7, 15]. A common
approach to reduce false positives is to apply spatial veri-
ﬁcation to retrieved query-candidate pairs [21]. The local-
ized spatial structure of the image is leveraged by extracting
multiple features from various regions typically at different
resolutions [20]. Spatial veriﬁcation based on RANSAC [9]
is then applied to align points of interest and estimate inlier
counts. Filtering images by applying threshold to their in-
lier counts can signiﬁcantly reduce false positives, and var-
ious versions of this approach are used in leading retrieval
frameworks [21, 6].

To improve recall, graph-based methods are typically ap-
plied to a k-nearest neighbor (k-NN) graph produced by
the ﬁrst stage [35]. Query expansion (QE) [7] is a popu-
lar graph-based approach where query descriptor is itera-
tively reﬁned with descriptors from retrieved images. QE is
straightforward to implement and often leads to signiﬁcant
performance boost. However, iterative neighbor expansion
mostly explores narrow regions where image descriptors are
very similar [15]. An alternative approach using similar-
ity propagation/diffusion has received signiﬁcant attention
recently due to its strong performance [15, 25, 4]. In dif-
fusion, pairwise image similarities are propagated through
the k-NN graph, allowing relevant images beyond the im-
mediate neighborhood of the query to be retrieved thus im-
proving recall [8]. While effective, for large graphs similar-
ity propagation can be prohibitively expensive making real-
time retrieval challenging in these models [13]. More ef-
ﬁcient alternatives have recently been proposed [14], how-

9423

ever efﬁciency is achieved as a trade-off with performance.
In this work we propose a novel image retrieval approach
based on the traversal of the nearest neighbor graph. Our
approach preserves the connectivity of the k-NN graph and
only traverses it by alternating between explore and exploit
steps. This leads to highly efﬁcient inference, enabling real-
time retrieval on previously unseen images with minimal
memory overhead. Empirically, we show that a combi-
nation of explore and exploit steps maximally utilizes the
immediate neighbors of the query, and effectively explores
more distant vertices leading to signiﬁcant improvements in
both precision and recall. In summary, our contributions are
as follows:

• We propose a novel image retrieval approach based on
the k-NN graph traversal. By alternating between ex-
plore and exploit steps we are able to effectively re-
trieve relevant images that are “far” from the query in
the descriptor space.

• We introduce an effective approach to incorporate spa-
tial veriﬁcation into the k-NN graph through edge re-
Incorporating spatial veriﬁcation reduces
weighting.
topic drift during traversal further improving accuracy.

• The proposed approach naturally generalizes to online
inference and we propose a simple yet effective proce-
dure for retrieval with previously unseen images. This
procedure is efﬁcient and scales well to large retrieval
tasks.

• We conduct extensive empirical evaluation on publicly
available benchmarks demonstrating highly competi-
tive performance with new state-of-the-art results on
multiple benchmarks.

2. Related Work

In this section we review relevant graph-based image re-
trieval methods that operate on the k-NN graph produced by
the global descriptors. This direction is typically motivated
by the hypothesis that descriptor inner product similarity
cannot properly capture the highly complex image mani-
fold structure [27]. Early approaches in this area include
manifold ranking [35] and query expansion (QE) [7].
In
QE, the query descriptor is updated with nearest neighbors
and the updated query is re-issued. This approach tends
to produce consistent improvements and can be applied to
a wide range of image descriptors [2]. Many variants of
QE have been proposed including transitive closure [6] and
more recently αQE [25]. Spatial veriﬁcation [21] is of-
ten applied in conjunction with QE to reduce topic drift
where updated query descriptor deviates signiﬁcantly from
the original [7]. A major drawback of QE is that it can only
explore limited regions where image descriptors are very

similar [15]. Furthermore, each iteration requires full or
partial query reissue which can get prohibitively expensive
for large databases [7, 2].

Similarity propagation methods, also known as diffu-
sion, are another popular category of graph-based ap-
proaches [8], recently achieving state-of-the-art perfor-
mance on a number of benchmarks [15, 25, 4]. Exten-
sive study has been conducted on various ways to propa-
gate similarity through the k-NN graph, most of which can
be viewed as versions of random walk [8]. Related work
hypothesize that relevant objects can be closer in one simi-
larity space while not in another, and explore fusion meth-
ods in conjunction with similarity propagation [34, 32, 5].
Despite strong performance, most existing similarity propa-
gation methods are computationally expensive. This makes
application to modern large scale image databases difﬁcult,
particularly in the online setting where new queries have to
be handled in real-time. Spectral methods have been pro-
posed to reduce computational cost [13], but the speedup
is achieved at the cost of increased memory overhead and
drop in performance.

In this work we propose a novel approach to reﬁne and
augment descriptor retrieval by traversing the k-NN graph.
Our traversal algorithm enables efﬁcient retrieval, and new
queries can be handled with minimal overhead. Moreover,
once retrieval is completed, the new query can be fully inte-
grated in the graph and itself be retrieved for other queries
with equal efﬁciency. In the following sections we outline
our approach in detail and present empirical results.

3. Proposed Approach

We consider the problem of image retrieval where, given
a database of n images X := {x1, ..., xn} and a query im-
age u, the goal is to retrieve the top-k most relevant images
for u. Images are considered to be relevant if they share
a pre-deﬁned criteria, such as containing the same scene,
In many applications n can be ex-
landmark, or person.
tremely large reaching millions or even billions of images.
As such, the initial retrieval is typically done using compact
descriptors where each image is represented as a vector in
a d-dimensional space and similarity is calculated with an
inner product. With recent advancements in deep learning,
many state-of-the-art descriptor models use convolutional
neural networks (CNNs) that are trained end-to-end for re-
trieval [10, 1, 25]. However given the complexity of natural
images, even with powerful CNN models it is difﬁcult to
encode all relevant information into compact descriptors. It
has been shown that applying additional processing to re-
trieved images can signiﬁcantly improve accuracy, and this
two-stage approach is adopted by many leading retrieval
models [8, 5, 25]. In this work we propose a novel approach
based on graph traversal to reﬁne and augment the retrieved
set. Speciﬁcally, we show that by traversing the k-NN graph

9424

formed by the descriptors, alternating between exploration
and exploitation steps, we can effectively retrieve relevant
images that are “far” away from the query in the descrip-
tor space. We refer to our approach as the Explore-Exploit
Graph Traversal (EGT).

k-NN Graph Retrieving the top-k images for every im-
age in X produces a sparse k-NN graph Gk. Formally,
the weighted undirected k-NN graph Gk contains vertices
{x|x ∈ X} and edges described by the adjacency matrix
Ak = (aij) ∈ Rn×n. The edges are weighted according
to the similarity function sk and the adjacency matrix is de-
ﬁned by:

aij =(sk(xi, xj)

0

if xj ∈ NNk(xi)
otherwise

(1)

where NNk(x) is the set of k nearest neighbors of x in the
descriptor space; aij = 0 indicates that there is no edge be-
tween xi and xj . Gk is highly sparse given that typically
k ≪ n, and contains nk edges at most. The sparsity con-
straint signiﬁcantly reduces noise [33, 8] making traversal
more robust as noisy edges are likely to cause divergence
from the query. Since global descriptors trade-off accuracy
for efﬁciency, the immediate neighbors NNk might not con-
tain all relevant images unless k is very large. To improve
recall it is thus necessary to explore regions beyond NNk,
which motivates our approach.

Explore-Exploit Graph Traversal Given Gk as input,
our goal is to effectively explore relevant vertices beyond
NNk. However, traversing far from the query can degrade
performance due to topic drift [27]. Incorrect vertices cho-
sen early on can lead to highly skewed results as we move
farther from the query. A balance of exploration and ex-
ploitation is thus required where we simultaneously retrieve
the most likely images in the neighborhood of the query
and explore farther vertices. Moreover, to avoid topic drift,
farther vertices should only be explored when there is suf-
ﬁcient evidence to do so. These ideas form the basis of
our approach. We alternate between retrieving images with
shortest path to the query and exploring farther vertices.
Further improvement is achieved by adopting a robust sim-
ilarity function sk.

To control the trade-off between explore and exploit we
introduce a threshold t such that only images with edge
weights greater than t can be retrieved. Then starting at the
query image, we alternate between retrieving all images that
pass t (exploit) and traversing neighbors of retrieved images
(explore). During the traversal, if the same not-yet-retrieved
image is encountered again via a new edge, we check if the
new edge passes the threshold t and retrieve the image if it
does. The intuition here is if the edge passes the threshold

Algorithm 1: EGT
input : k-NN graph Gk = (X , Ak, sk),
query u,
number of images to retrieve p,
edge weight threshold t

output: list of retrieved images Q

1 initialize max-heap H, list V , and list Q
2 add u to V
3 do

// Explore step

4

5

6

7

8

9

10

11

12

13

14

15

16

17

foreach v ∈ V do

foreach x ∈ NNk(v), x /∈ Q, x 6= u do
if x ∈ H and H[x] < sk(v, x) then
else if x /∈ H then
end

update weight for x: H[x] ← sk(v, x)
push x to H with weight sk(v, x)

end

end
clear V
// Exploit step
do

v ← pop(H)
add v to V and Q

while (peek(H) > t or |V | = 0) and |Q| < p

18 while |Q| < p and |H| > 0
19 return Q

then the image must be sufﬁciently similar to an already re-
trieved image and should also be retrieved. This procedure
creates “trusted” paths between the query and far away ver-
tices via edges from already retrieved vertices. Threshold t
controls the degree of exploration. Setting t = 0 reduces to
a greedy breadth ﬁrst search without exploration, and set-
ting t = ∞ leads to Prim’s algorithm [23] with aggressive
exploration.

In the original graph Gk returned
Edge Re-weighting
by the descriptor model, edge weights correspond to in-
ner product between descriptors. However, as previously
discussed,
these weights are not optimal as global de-
scriptors have limited expressive power. To make traver-
sal more robust, we propose to reﬁne Gk by keeping the
edge structure and modifying the scoring function sk ef-
fectively re-weighting each edge. RANSAC [9] and other
inlier-based methods are widely used in state-of-the-art re-
trieval methods as a post-processing step to reduce false
positives [21]. We adopt a similar approach here and pro-
pose to use the RANSAC inlier count for sk. Analogous
to previous work [6], we found RANSAC to be more ro-
bust than descriptor scores, allowing to explore far away

9425

Q = []

V = [u]

H = []

Q = [b, d, a]

V = [f ]

H = [(c, 55)]

b
b
b

88

15

87

d
d
d

b
b

88

15

87

d
d

u
u

u
u

c
c

65

9

f
f

cc
c

65

9

f
f

55

107

a
a

66

(a)

55

107

a
a

66

(c)

Q = [b, d]

V = [b, d]

H = [(a, 15)]

Q = [b, d, a, c]

V = [c]

H = [(f, 9)]

b
b

88

15

87

d
d

b
b

88

15

87

d
d

u
u

u
u

c
c

65

9

f
f

c
c

65

9

f
f

55

107

a
a

66

(b)

55

107

a
a

66

(d)

Figure 1: Algorithm 1 example with query image u, database images X = {a, b, c, d, f}, t = 60, and p = 4. States at the
beginning of each iteration of the outer loop (line 3) in Algorithm 1 are shown on the right for each ﬁgure. Red vertices denote
retrieved images and weights on the edges are the inlier counts. Red vertex label indicates that this vertex will be explored at
the next iteration. (a) Traversal is initiated by adding query u to V . (b) During the ﬁrst iteration, vertices {a, b, d} ∈ NNk(u)
are pushed to H. Both sk(u, b) > t and sk(u, d) > t, so they are popped from H, added to V , and retrieved to Q. (c) During
the second iteration, neighbors of b and d are added to H. At this point, weight a is replaced with the largest visited edge so
H[a] = sk(b, a) = 107. Since a’s updated weight puts it at the top of the max-heap, it is popped from H next, added to V
and retrieved to Q. (d) During the third and ﬁnal iteration, neighbors of a are added to H. Only c, f are not in Qu, so f is
added to H and c’s weight is updated to 65. Finally, c is popped from H and added to Q terminating the algorithm. Note that
the order of images in Q directly corresponds to the order in which they were popped from H.

vertices with minimal topic drift [7]. RANSAC calculation
is done once ofﬂine for all nk edges and the graph remains
ﬁxed after that. However, even in the ofﬂine case comput-
ing RANSAC for all edges in Gk is an expensive operation
so we make this step optional. Empirically we show that
without RANSAC our approach still achieves leading re-
sults among comparable models, while adding RANSAC
further improves performance producing new state-of-the-
art.

Algorithm 1 formalizes the details of our approach. We
use max-heap H to keep track of the vertices to be retrieved,
list V to store vertices to be explored and list Q to store al-
ready retrieved vertices. The graph traversal is initialized
by adding query image u to V . Then at each iteration we
alternate between explore and exploit steps. During the ex-
plore step we iterate through all images v ∈ V and add
images in their neighborhood NNk(v) to the max-heap H.
Each image x ∈ NNk(v) is added to H with the weight
sk(v, x), which corresponds to the conﬁdence that x should
be retrieved. In cases where x is already in H but with a
lower weight, we update its weight to sk(v, x) so max-heap
always stores the highest edge weight with which x was
visited. Similarly to query expansion, we treat already re-

trieved images as ground truth and use the highest available
similarity to any retrieved image as evidence for x. Finally,
once all images in V are explored we clear the list.

During the exploit step, we pop all images from H whose
weights pass the threshold t, add them to V to be explored,
and retrieve them to Q. The “retrieve” operation always ap-
pends images to Q and no further re-ordering is done. This
ensures that the visit order is preserved in the ﬁnal returned
list. Conceptually, images retrieved earlier have higher con-
ﬁdence since they are “closer” to the query so preserving
the order is desirable here. In cases where no image in H
passes the threshold, we pop a single image with the current
highest weight so the algorithm is guaranteed to terminate.
A detailed example of this procedure is shown in Figure 1.

In our approach, Gk is constructed en-
Online Inference
tirely off-line and is not modiﬁed during retrieval. For
the off-line inference where query image is already in X ,
retrieval involves a quick graph traversal following Algo-
rithm 1. However, in many applications off-line inference
is not sufﬁcient and the retrieval system must be able to han-
dle new images in real-time. In the online inference given
a query image u /∈ X , we need to retrieve images from X

9426

Method

R-MAC [11]
R-MAC+αQE [25]
R-MAC+DFS [15]
R-MAC+Hybrid-Spectral-Temporal [14]
R-MAC+EGT

mAP

RParis+R1M
Medium Hard Medium Hard Medium Hard Medium Hard

ROxford+R1M

ROxford

RParis

60.9
64.8
69.0
67.0
73.6

Without SV

32.4
36.8
44.7
44.2
56.3

With SV

39.3
45.7
56.6
55.6
55.8

12.5
19.5
28.4
27.2
35.1

78.9
82.7
89.5
89.3
90.6

59.4
65.7
80.0
80.2
81.2

54.8
61.0
83.2
82.9
79.4

28.0
35.0
70.4
69.2
63.7

HesAff+rSIFT+HQE [29]+SV
DELF [20]+HQE +SV
HesAffNet+HardNet++ [19]+HQE+SV
R-MAC+DFS+DELF+ASMK [28]+SV
74.2
76.0
R-MAC+DFS+HesAff+rSIFT+ASMK+SV
R-MAC+QE+SV+rEGT
75.6
Table 1: mAP results on medium and hard versions of the ROxford and RParis with and without the 1M distractor set R1M.
To make comparison fair we split the table into two parts to separate models with and without spatial veriﬁcation (SV).

49.7
50.3
53.3
48.3
54.8
65.8

70.2
84.0
73.1
90.5
92.5
92.8

45.1
69.3
48.9
81.2
84.0
84.6

71.3
73.4
75.2
75.0
80.2
83.5

86.6
87.5
87.1

68.7
74.9
74.9

39.4
47.5
54.1

21.8
35.8

52.0
60.6

29.8
37.9

46.8
65.2

-

-

-

-

that are relevant to u. This is straightforwardly achieved in
our approach. First, using the same descriptor model, we
compute k nearest neighbors of u to obtain NNk(u). We
then add u to Gk by expanding the adjacency matrix with
NNk(u). Finally, we (optionally) reﬁne the edge weights
by computing the RANSAC inlier counts for all images in
NNk(u). Algorithm 1 can now be applied without modiﬁ-
cation to obtain relevant images for u. Note that after this
process u is fully integrated into Gk and can itself be re-
trieved for another query.

Complexity We analyze the run-time complexity of our
algorithm and compare it with leading graph-based ap-
proaches. Following previous work we assume that Gk is
already constructed and omit this cost from our analysis.
To analyze the complexity, we note that at every iteration at
least one vertex is popped from H so that retrieving p im-
ages involves at most p iterations. For each vertex popped
from H, we traverse its immediate neighbors during the
explore step so the total pushes to H are upper-bounded
by pk. The outer loop of the Algorithm 1 thus has worst
case complexity of O(pk log(pk)) during online retrieval
which is dominated by the max-heap. There is no addi-
tional ofﬂine cost beyond the computation of Gk. If inlier
edge re-weighting is used, the ofﬂine complexity increases
to O(nk) since we need to compute RANSAC for the k
edges of each vertex. For online inference, k additional
RANSAC evaluations are required per query so the com-
plexity remains O(pk log(pk)).

Recently proposed leading similarity propagation ap-
proach by Iscen et al., [15] has online inference complex-

ity of O(pk√ρ) where ρ is the condition number of the

diffusion transition matrix. An improvement on this run-

time can be achieved by shifting and caching some com-
putation to ofﬂine [13]. This leads to ofﬂine complexity
of O(nr(k + r)) and online complexity of O(pr) where r
is the spectral rank. To achieve good performance the au-
thors suggest to use large r in the range of 5, 000 to 10, 000,
which increases runtime complexity for both ofﬂine and on-
line procedures as they depend on r2 and r respectively.

4. Experiments

We present results on three recent and publicly avail-
able landmark retrieval benchmarks:
revisited Oxford
(ROxford), revisited Paris (RParis) [24], and Google Land-
mark Retrieval Challenge dataset [20]. ROxford and
RParis build on the well-known Oxford [21] and Paris [22]
datasets in image retrieval by reﬁning the labels. No-
tably, many hard examples (severe occlusion, deformation,
change in viewpoint etc.)
that were not used before are
now included in the evaluation [24]. A signiﬁcantly larger
and more challenging distractor set of 1, 001, 001 images
(R1M) is introduced, replacing the original 100K distrac-
tors. Furthermore, the relevant ground truth annotations
are subdivided into the easy, medium, and hard subsets.
In this paper, we focus on the more difﬁcult medium and
hard subsets. The revisited datasets substantially increase
the level of difﬁculty as evidenced by considerably lower
In total, ROxford
re-evaluated model performance [24].
contains 4, 993 images and RParis contains 6, 322 images.
The Google Landmark Retrieval Challenge dataset con-
sists of 1, 093, 647 database images and 116, 025 query im-
ages. At the time of writing this is the largest publicly avail-
able image retrieval dataset. This dataset was at the core
of the image retrieval challenge organized by Google 1 to

1www.kaggle.com/c/landmark-retrieval-challenge

9427

Rank Team

mAP@100

1
2
3
4
5

CVSSP & Visual Atoms
Layer 6 AI
SevenSpace
Naver Labs Europe
VPP
R-MAC+QE+SV+rEGT

0.627
0.608
0.598
0.586
0.583
0.619

Table 2: Leaderboard mAP@100 results for the top-5 teams
on the Google Landmark Retrieval Challenge. We compare
our approach by submitting the predictions to the challenge
evaluation server. Over 200 teams participated in this chal-
lenge.

benchmark retrieval models at scale in a standardized set-
ting. Over two hundred teams participated in the challenge
using a wide array of approaches and we compare our re-
sults against the top-5 teams.

Implementation Details Global descriptors for all exper-
iments are obtained using a CNN-based R-MAC descrip-
tor model with ResNet-101 backbone ﬁne-tuned for land-
mark retrieval [10]. We do not re-train or further ﬁne-
tune the model released by the original authors 2. Standard
multi-scale averaging is applied as in [24] to obtain 2048-
dimensional descriptors for all images. While re-training
can improve performance, our aim is to test the general-
ization ability of our approach to previously unseen images
that can be from an entirely different geographical location.
Generalization to previously unseen objects is critically im-
portant in image retrieval as most systems have limited la-
belled training data.

For EGT, the k-NN graph Gk is constructed by com-
puting inner product nearest neighbor retrieval in the 2048-
dimensional descriptor space. To validate the effect of inlier
edge re-weighting, we also apply RANSAC scoring to Gk,
and refer to this variant as rEGT. To compute RANSAC we
use the deep local features (DELF) model [20] 3, and fol-
low the default feature extraction pipeline. At most 1000
feature vectors are extracted per image, and the dimension
of each vector is reduced to 40 via PCA. Veriﬁcation is then
performed as in [21] to obtain inlier count, which is used to
replace inner product as the edge weight. We test our traver-
sal algorithm on both original and re-weighted Gk. We also
validate effect of QE and spatial veriﬁcation (SV) on top of
our method. These are implemented in the standard manner
outlined by [7] and [29], where veriﬁed images from initial
results are used to retrieve a new set of results. Through

2code: http://www.europe.naverlabs.com/Research/

Computer-Vision/Learning-Visual-Representations/
Deep-Image-Retrieval

3code: https://github.com/tensorflow/models/tree/

master/research/delf

Method

p

R-MAC

+ αQE
+ DFS
+ DFS
+ DFS
+ DFS
+ EGT
+ EGT
+ EGT
+ EGT

1K
5K
10K
20K
1K
5K
10K
20K

ROxford+R1M

RParis+R1M

mAP
12.5
19.5
15.3
19.8
21.0
25.9
32.9
33.1
33.1
33.1

Time (ms) mAP
29.8
194±55
37.1
344±23
42.9
259±26
279±17
51.8
55.3
303±25
58.5
343±17
62.4
198 ± 55
62.5
205 ± 55
62.5
216 ± 55
62.5
239 ± 56

Time (ms)
184 ± 12
463 ± 70
241 ± 12
284 ± 17
305 ± 12
361 ± 15
189 ± 13
196 ± 13
210 ± 14
235 ± 16

Table 3: Run-time and mAP results on the hard versions
of the ROxford and RParis datasets with 1M distractors.
Time records online query time in ms and we repeat the ex-
periment 100 times to estimate the standard deviation. All
methods use the same global descriptors from R-MAC [11]
to do nearest neighbor search, and k is set to 50 to make
comparison fair. EGT (without RANSAC) is benchmarked
against αQE [25] and DFS [15].

cross validation we set t = 0.42 and t = 50 for EGT and
rEGT respectively and k = 100 for all datasets. All experi-
ments are conducted on the 20-core Intel(R) Xeon(R) CPU
E5-2630 v4 @ 2.20GHz machine with 200GB of RAM.

Results Results on ROxford and RParis are shown in
Table 1. We compare our approach to the state-of-the-
art baselines taken from the recent survey by Radenovic
et al [24]. The baselines are partitioned into two groups
without and with spatial veriﬁcation shown at the top and
bottom half of the table respectively. For both ROxford
and RParis datasets we show results on medium and hard
versions with and without the 1M distractor set R1M re-
rEGT with inlier re-
sulting in eight datasets in total.
weighting achieves new state-of-the-art results on six of the
eight datasets and performs comparably to the best model
on the other two. Notably the performance is particularly
strong on the ROxford hard category where it outperforms
the best baselines by over 20%. We also see that EGT with-
out inlier re-weighting has highly competitive performance
beating or performing comparably to the best baselines. The
one exception is the RParis+ R1M dataset where DFS [15]
is the best performing model.
The Google Landmark Retrieval challenge results are
shown in Table 2. We compare our approach against the
top-5 teams by submitting our predictions to the challenge
evaluation server. Unlike ROxford and RParis which are
highly geographically localized, this dataset contains pho-
tos of landmarks from all over the world. The photos
are from the public, and thus include a lot of variations
such as signiﬁcant occlusion, camera artifacts, viewpoint
change and zoom, and lighting changes. From the challenge

9428

s
e
g
a
m

i

f
o

n
o
i
t
c
a
r
f

0.40

0.30

0.20

0.10

0.00

1

EGT
rEGT
Ground Truth

0.60

P
A
m

0.40

2

3

4

geodesic distance

0.20

0

5

e
c
n
a
t
s
i

d

c
i
s
e
d
o
e
g

3.00

2.50

2.00

1.50

EGT
rEGT

EGT
rEGT

200 400 600 800

p

0

200 400 600 800

p

(a)

(b)

(c)

Figure 2: All ﬁgures are for the ROxford hard dataset. (a) Geodesic distance (shortest path to the query in Gk) distribution
of correctly retrieved images from the top-500 list by EGT and rEGT compared to the distribution of all relevant images. (b)
mAP@p as p is varied from 1 to 1,000. (c) Averaged geodesic distance for images at different positions in the retrieved list.

Method

R-MAC
R-MAC+QE+SV
R-MAC+EGT
R-MAC+QE+SV+EGT
R-MAC+QE+SV+rEGT

ROxford

RParis

Med. Hard Med. Hard
60.9
59.4
64.8
68.6
81.2
73.6
81.2
82.0
83.5
84.6

32.4
46.2
56.3
61.7
65.8

78.9
81.3
90.6
91.3
92.8

Table 4: Ablation results on medium and hard versions of
ROxford and RParis.
workshop 4, many of top teams employed model ensem-
bles ﬁne tuned speciﬁcally for this dataset to obtain high-
quality global descriptors. In contrast, we did not ﬁne tune
the R-MAC descriptors and did not ensemble, our submis-
sion used the same retrieval pipeline as in the ROxford and
RParis experiments. From the table we see that our ap-
proach is highly competitive placing 2’nd out of over 200
teams. We narrowly miss the top spot with less than a point
difference between us and the top team.

Together these results demonstrate that EGT is a sim-
ple yet effective retrieval method that can be combined with
other models to achieve leading performance. Our approach
is particularly strong in challenging settings common in
real-world applications, where images are noisy and have
signiﬁcant variations.

Analysis To obtain additional insight into run-time per-
formance in a realistic setting where p ≪ n, we vary p
from 1K to 20K and measure query time. Table 3 shows
mAP and average query time for EGT and one of the lead-
ing baselines DFS [15]. From the table we see that EGT
becomes progressively faster than DFS as p increases. This
can be attributed to the simplicity of Algorithm 1 that can be
efﬁciently implemented with common data structures. For
small p the overhead of EGT is negligible relative to the
base k-NN retrieval with R-MAC. We also see that EGT

4https://landmarksworkshop.github.io/CVPRW2018

consistently attains higher mAP accuracy at lower p than
DFS. Little improvement in mAP is achieved beyond p =
1K, and with that setting EGT outperforms DFS with much
larger p = 20K. This has a direct and practical impact on
run-time since p can be set to a small value without sacriﬁc-
ing accuracy in EGT.

We evaluate the importance of each component of the
proposed method by conducting an ablation study shown
in Table 4. From the table it is seen that both EGT and
rEGT improve performance signiﬁcantly when added to
every component combination with or without query ex-
pansion. As expected rEGT consistently outperforms EGT
across all combinations but at the cost of increased run-
time. We also see that EGT performance is further enhanced
by combining it with spatially veriﬁed QE due to more ro-
bust neighbor estimation in Gk.

To test the ability of EGT to retrieve relevant images that
are farther away from the query, we analyze the geodesic
distance (shortest path to the query) during retrieval. Fig-
ure 2a shows geodesic distance distribution for correctly re-
trieved relevant images together with the ground truth dis-
tribution for all relevant images. From the ground truth
distribution it is evident that only around 30% of relevant
images are in the immediate neighborhood of the query.
This further supports the conclusion that descriptor retrieval
alone is not sufﬁcient. The explore step enables EGT to tra-
verse farther, and effectively retrieve relevant images with
geodesic distance up to 5. Surprisingly, distributions for
EGT and rEGT look similar despite signiﬁcant difference
in mAP as shown in Table 4. This indicates that the perfor-
mance difference between the two methods is primarily due
to changes in ranking order rather than recall.

We analyze this further by evaluating performance at
different positions in the retrieved list. Figure 2b shows
mAP@p as p is varied form 1 to 1,000, and Figure 2c shows
average geodesic distance to the query for all retrieved im-
ages at each rank position. We see that at the very top

9429

n
o
i
s
u
f
f
i

D

T
G
E
r

Figure 3: Top retrieved results for three queries from the ROxford dataset using diffusion [24] and rEGT, both using R-MAC
descriptors and SV. Query images are in blue, correctly retrieved images are in green and incorrect ones are in red.

Figure 4: Topic drift example for RParis+R1M.

of the retrieved list, mAP performance is similar between
EGT and rEGT, but rEGT quickly overtakes EGT at higher
ranks. Similarly, Figure 2c shows that rEGT starts to ex-
plore distant images earlier than EGT. Jointly these results
indicate that re-weighting the edges reduces bias towards
immediate neighbors, enabling the traversal to start explor-
ing distant neighborhoods sooner.

We noted above that EGT performance on RParis is not
as strong as on ROxford. After further inspection we no-
ticed that RParis (particularly the 1M distractor set) con-
tains more cluttered scenes that sometimes lead to topic drift
during the explore step in graph traversal. An example of
this is shown in Figure 4. Here, given a query image in blue,
EGT ﬁrst retrieves correct image in green. This image con-
tains additional buildings which lead to topic drift, and an
incorrect image with those buildings is retrieved next. Clut-
tered scenes increase the likelihood of topic drift, and large
distractor set is likely to contain more images with similar
structures. We believe that weaker performance of EGT on
RParis+R1M can be partially attributed to the combination
of these factors.

5. Conclusion

Qualitative Results Selected qualitative examples of re-
trieval are shown in Figure 3. We show three queries from
ROxford, along with the top nine retrieved results for dif-
fusion [24] (top) and rEGT (bottom). Here, we see that dif-
fusion tends to retrieve images with similar viewpoints and
makes repeated mistakes. In contrast, images retrieved by
our approach are much more diverse and include multiple
view points and condition (zoom, lighting etc.) variations.
The explore step is thus able to successfully capture relevant
images that are visually dissimilar to the query.

In this work, we proposed a new approach for image
retrieval based on graph traversal. We alternate between
explore and exploit steps to better capture the underlying
manifold, and retrieve relevant but visually dissimilar im-
ages that global descriptors fail to retrieve. Empirically, we
demonstrated that the proposed approach is efﬁcient and
outperforms state-of-the-art on multiple recent and large-
scale benchmarks. Given the promising results, future work
involves exploring other graph-based traversal methods and
comparing their efﬁcacy.

9430

References

[1] R. Arandjelovic, P. Gronat, A. Torii, T. Pajdla, and J. Sivic.
NetVLAD: CNN Architecture for Weakly Supervised Place
Recognition.
IEEE Transactions on Pattern Analysis and
Machine Intelligence, 2018. 2

[2] R. Arandjelovic and A. Zisserman. Three things everyone
should know to improve object retrieval. In CVPR, 2012. 2
[3] A. Babenko and V. Lempitsky. Aggregating local deep fea-

tures for image retrieval. In ICCV, 2015. 1

[4] S. Bai, X. Bai, Q. Tian, and L. J. Latecki. Regularized dif-
fusion process on bidirectional context for object retrieval.
IEEE Transactions on Pattern Analysis and Machine Intelli-
gence, 2018. 1, 2

[5] S. Bai, Z. Zhou, J. Wang, X. Bai, L. J. Latecki, and Q. Tian.

Ensemble diffusion for retrieval. In CVPR, 2017. 2

[6] O. Chum et al. Large-scale discovery of spatially related
images. IEEE Transactions on Pattern Analysis and Machine
Intelligence, 2010. 1, 2, 3

[7] O. Chum, J. Philbin, J. Sivic, M. Isard, and A. Zisserman.
Total recall: Automatic query expansion with a generative
feature model for object retrieval. In ICCV, 2007. 1, 2, 4, 6
[8] M. Donoser and H. Bischof. Diffusion processes for retrieval

revisited. In CVPR, 2013. 1, 2, 3

[9] M. A. Fischler and R. C. Bolles. Random sample consen-
sus: a paradigm for model ﬁtting with applications to image
analysis and automated cartography. Communications of the
ACM, 1981. 1, 3

[10] A. Gordo, J. Almaz´an, J. Revaud, and D. Larlus. Deep image
retrieval: Learning global representations for image search.
In ECCV, 2016. 1, 2, 6

[11] A. Gordo, J. Almaz´an, J. Revaud, and D. Larlus. End-to-
End Learning of Deep Visual Representations for Image Re-
trieval. International Journal of Computer Vision, 2017. 5,
6

[12] J. Heinly, J. L. Sch¨onberger, E. Dunn, and J.-M. Frahm. Re-
constructing the world* in six days *(as captured by the Ya-
hoo 100 Million Image Dataset). In CVPR, 2015. 1

[13] A. Iscen, Y. Avrithis, G. Tolias, T. Furon, and O. Chum. Fast
spectral ranking for similarity search. In CVPR, 2018. 1, 2,
5

[14] A. Iscen, Y. Avrithis, G. Tolias, T. Furon, and O. Chum. Hy-
brid diffusion: Spectral-temporal graph ﬁltering for manifold
ranking. arXiv preprint arXiv:1807.08692, 2018. 1, 5

[15] A. Iscen, G. Tolias, Y. Avrithis, T. Furon, and O. Chum. Ef-
ﬁcient diffusion on region manifolds: Recovering small ob-
jects with compact CNN representations. In CVPR, 2017. 1,
2, 5, 6, 7

[16] J. Kalpathy-Cramer, A. G. S. de Herrera, D. Demner-
Fushman, S. Antani, S. Bedrick, and H. M¨uller. Evaluat-
ing performance of biomedical image retrieval systems-an
overview of the medical image retrieval task at ImageCLEF
2004–2013. Computerized Medical Imaging and Graphics,
2015. 1

[17] D. G. Lowe. Distinctive image features from scale-invariant
keypoints. International Journal of Computer Vision, 2004.
1

[18] K. Mikolajczyk and C. Schmid. Scale & afﬁne invariant in-
terest point detectors. International Journal of Computer Vi-
sion, 2004. 1

[19] D. Mishkin, F. Radenovic, and J. Matas. Repeatability is
not enough: Learning afﬁne regions via discriminability. In
ECCV, 2018. 5

[20] H. Noh, A. Araujo, J. Sim, T. Weyand, and B. Han. Large-
Scale Image Retrieval with Attentive Deep Local Features.
In ICCV, 2017. 1, 5, 6

[21] J. Philbin, O. Chum, M. Isard, J. Sivic, and A. Zisser-
man. Object retrieval with large vocabularies and fast spatial
matching. In CVPR. IEEE, 2007. 1, 2, 3, 5, 6

[22] J. Philbin, O. Chum, M. Isard, J. Sivic, and A. Zisserman.
Lost in quantization: Improving particular object retrieval in
large scale image databases. In CVPR, 2008. 5

[23] R. C. Prim. Shortest connection networks and some general-

izations. Bell System Technical Journal, 1957. 3

[24] F. Radenovic, A. Iscen, G. Tolias, Y. Avrithis, and O. Chum.
large-scale image retrieval

Revisiting Oxford and Paris:
benchmarking. In CVPR, 2018. 5, 6, 8

[25] F. Radenovic, G. Tolias, and O. Chum. Fine-tuning CNN
Image Retrieval with No Human Annotation. In IEEE Trans-
actions on Pattern Analysis and Machine Intelligence, 2018.
1, 2, 5, 6

[26] J. Sivic and A. Zisserman. Video google: A text retrieval

approach to object matching in videos. In ICCV, 2003. 1

[27] J. B. Tenenbaum, V. De Silva, and J. C. Langford. A global
geometric framework for nonlinear dimensionality reduc-
tion. Science, 2000. 2, 3

[28] G. Tolias, Y. Avrithis, and H. J´egou. Image search with se-
lective match kernels: aggregation across single and multiple
images. International Journal of Computer Vision, 2016. 5
[29] G. Tolias and H. J´egou. Visual query expansion with or with-
out geometry: Reﬁning local descriptors by feature aggrega-
tion. Pattern Recognition, 2014. 1, 5, 6

[30] G. Tolias, R. Sicre, and H. J´egou. Particular object retrieval
with integral max-pooling of cnn activations. arXiv preprint
arXiv:1511.05879, 2015. 1

[31] T. Weyand and B. Leibe. Discovering favorite views of pop-

ular places with iconoid shift. In ICCV, 2011. 1

[32] F. Yang, B. Matei, and L. S. Davis. Re-ranking by multi-
feature fusion with diffusion for image retrieval.
In IEEE
Winter Conference on Applications of Computer Vision
(WACV), 2015. 2

[33] X. Yang, S. K¨oknar-Tezel, and L. J. Latecki.

Locally
constrained diffusion process on locally densiﬁed distance
spaces with applications to shape retrieval. In CVPR Work-
shops, 2009. 3

[34] S. Zhang, M. Yang, T. Cour, K. Yu, and D. N. Metaxas.
Query speciﬁc fusion for image retrieval. In ECCV. 2012.
2

[35] D. Zhou,

J. Weston, A. Gretton, O. Bousquet, and
B. Sch¨olkopf. Ranking on data manifolds. In NIPS, 2003. 1,
2

9431

