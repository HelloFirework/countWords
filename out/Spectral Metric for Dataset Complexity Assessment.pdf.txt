Spectral Metric for Dataset Complexity Assessment

Fr´ed´eric Branchaud-Charron1, Andrew Achkar2, Pierre-Marc Jodoin 1

1 Universit´e de Sherbrooke, 2 Miovision Inc.

1{frederic.branchaud-charron, pierre-marc.jodoin}@usherbrooke.ca, 2

aachkar@miovision.com

∗

Abstract

In this paper, we propose a new measure to gauge the
complexity of image classiﬁcation problems. Given an an-
notated image dataset, our method computes a complex-
ity measure called the cumulative spectral gradient (CSG)
which strongly correlates with the test accuracy of convolu-
tional neural networks (CNN). The CSG measure is derived
from the probabilistic divergence between classes in a spec-
tral clustering framework. We show that this metric corre-
lates with the overall separability of the dataset and thus
its inherent complexity. As will be shown, our metric can
be used for dataset reduction, to assess which classes are
more difﬁcult to disentangle, and approximate the accuracy
one could expect to get with a CNN. Results obtained on
11 datasets and three CNN models reveal that our method
is more accurate and faster than previous complexity mea-
sures.

1. Introduction

The number of image-based datasets designed to train
deep convolutional neural networks (CNN) have been on
the rise in the past few years [8, 11, 23, 25, 29, 35, 44].
One reason for this is the indisputable efﬁciency of CNNs
at classifying image data [9, 17, 23, 39].

A common challenge that arises when building a new
image dataset for training a CNN is to identify how chal-
lenging the classiﬁcation problem is, which classes are the
most difﬁcult to disentangle, and correspondingly what is
the minimum dataset size required to train a CNN. As of
today, there is no standard framework to make such de-
terminations. The common way to assess the complexity
of an image dataset is by training, ﬁnetuning and compar-
ing results from several CNNs, the test accuracy being the
usual measure for complexity. However, this procedure is
time consuming and, most importantly, requires a fully-
annotated dataset which is not available when in the process
of building it.

∗This work is supported by the FQRNT B1 208594 and Mitacs accel-

eration IT08995.

Unfortunately, one cannot predict the accuracy of a CNN
by only looking at its architecture. As mentioned by Zhang
et al. [45] in their attempt to understand why deep neural
nets generalize well, deep neural networks can easily ﬁt
with zero training error on any input data, including pure
random noise. This underlines the sole ability of CNNs to
project any input data into a linearly separable space (and
thus have a zero training error) while sometimes having
poor generalization abilities. Their conclusion is that the
structure of a neural net, its hyperparameters, its depth, and
its optimizer cannot be used alone to predict its generaliza-
tion capabilities.

Assessing the complexity of a classiﬁcation problem
may instead start from the analysis of the data at hand
with the goal of deriving useful complexity measures (c-
measures) [2, 3, 14, 18, 41]. The goal of c-measures is
to assess how entangled classes are assuming that datasets
with overlapping classes are more difﬁcult to analyze than
those with well separated classes. C-measures have been
shown effective for a number of applications such as classi-
ﬁer selection [7], automatic noise-ﬁltering adjustment [38],
dataset reduction [26], and hyperparameter tuning [31].

Unfortunately, existing c-measures have not been de-
signed for large image datasets used to train deep neural
networks. While some c-measures assume that classes are
linearly separable in their original feature space [18], others
work only for two-class problems [2, 3, 19]. Also, some c-
measures are prohibitively slow and memory expensive as
they require the analysis of matrices whose size is in the
order to the number of training samples and/or the feature
dimension size [3, 14].

Another important limitation with existing c-measures is
the fact that they process raw input data. While this was
shown valid for some classiﬁcation problems [7], it is ill
suited for deep neural nets since their learning procedure
allows them to project input data onto a different and more
easily separable space.

In this paper, we present a novel c-measure adapted to
modern image classiﬁcation problems. Instead of process-
ing raw input data like previous approaches, our method
ﬁrst projects the input images onto a lower-dimensional la-

3215

tent space. This allows to analyze data whose features are
better adapted to what CNNs learn. Our method then es-
timates pairwise class overlap with a Monte-Carlo method
which leads to an inter-class similarity matrix. Following
the spectral clustering theory, we compute a K × K Lapla-
cian matrix where K is the number of classes. Finally, the
spectrum of this matrix is used to derived our cumulative
spectral gradient (CSG) c-measure.

The main advantages of our proposed c-measure are as

follows :

1. It naturally scales with the number of classes and the

number of images in the dataset;

2. Our metric is fast to compute and does not require the

computation of prohibitively large matrices;

3. It has no prior assumption on the distribution of the

data;

4. It gives a strong insight on which classes are easily

separable and those that are entangled;

5. The metric is highly correlated with CNN generaliza-

tion capabilities;

6. It can be easily used for dataset reduction.

2. Previous works

The goal of a c-measure is to characterize the difﬁculty
of a classiﬁcation problem. While several c-measures have
been proposed in the past, those by Ho and Basu are by far
the most widely used [18]. They proposed 12 different de-
scriptors called F1, F2, F3, L1, L2, L3, N1, N2, N3, N4,
T1, and T2. F1 is a Fisher’s Discriminant Ratio, F2 mea-
sures the inter-class overlap, and F3 is the largest fraction
of points one can correctly classify with a stump decision
function. L1, L2 and L3 measures the linear separability
of the data, while N1, N2, N3 and N4 are nearest neighbor
measures which estimate the inter-class overlap. As for T1,
it measures the total number of hyperspheres one can ﬁt into
the feature space of a class and T2 is the ratio between the
total number of training samples N divided by the dimen-
sionality of the data d.

While the c-measures by Ho and Basu have been shown
effective for small non-image datasets [7], those metrics are
less suited to analyze large and complex image datasets. For
example, F1, F2, F3, L1, L2 and L3 assumes the data is
linearly separable which is an over-simplistic assumption
when considering modern image datasets. F1 requires the
computation of d×d matrices which is problematic memory
wise for large d (i.e. for medium to large images) and F3
measures the linear separability of each class by accounting
for each feature independently which is prohibitively slow
when both N and d are large. T1 is also prohibitively slow
as N gets large since it requires to grow an hypersphere
around each data point and T2 is not a good complexity
predictor as will be shown in the results section.

Although Ho and Basu’s metrics were designed for two-
class problems, some researchers generalize it to more than
two classes by averaging measures obtained between all
possible pair of classes [37, 41]. Also, although recent
generalizations of the Ho-Basu c-measures have been pro-
posed [2, 12, 41], none addresses explicitly the problem of
classifying large image datasets.

Other c-measures have been proposed. For example,
Baumgartner and Somorjai [3] proposed a metric adapted
to small biomedical datasets with high dimensionality data.
Unfortunately, their c-measures are for two-class problems,
assume that the data is linearly separable and require the de-
composition of N ×d matrices which is only tractable when
N and d are small. Duin and Pekalska [14] quantify the
complexity of a dataset with metrics derived from a dissim-
ilarity matrix of size N ×M where N is the training set size
and M is the number of “representation” vectors randomly
sampled from the training set. They report results on sev-
eral datasets including two image datasets which contains
2000 or less black and white digits. The authors used the
Euclidean distance to measure the similarity between two
images, a metric that does not generalize well to real-world
images [43].

Like we do, some methods build a graph from the
dataset to characterize the intra and inter-class relation-
ships [15, 34]. This type of method requires building a
N × N distance matrix which is problematic memory wise
for large datasets. For example, the Hub score by [28] re-
quires to compute AT A where A is a N × N adjacency
matrix.

To our knowledge, Li et al. [27] are the only ones who
proposed a c-measure applied speciﬁcally to modern image
datasets and deep neural networks. They called their mea-
sure the Intrinsic Dimension which is the minimum number
of neurons a model needs to reach its best performances.
They show that adding more neurons past the Intrinsic Di-
mension does not improve test accuracy. Unfortunately, as
opposed to what we seek to do, their measure requires mul-
tiple training of image classiﬁcation CNNs through a grid-
search approach which is slow and tedious. More details on
c-measures can be found in the recent survey paper by [28].

3. Proposed Method

3.1. Class overlap

At the core of our c-measure is the notion of class over-
lap. Let x be an input image and φ(x) ∈ IRd an embedding
for that image. As will be discussed later, φ can be any
function that projects x to a new dimensional space where
images with similar content are close together and the other
ones further away. The overlap between two classes Ci and
Cj refers to the overall area in the feature space for which
P (φ(xk)|Ci) > P (φ(xk)|Cj) when φ(xk) is a member of

3216

class Cj . Class overlap can thus be formulated as [36]:

ZIRd

min (P (φ(x)|Ci), P (φ(x)|Cj)) dφ(x).

(1)

Unfortunately, the direct calculation of this integral is pro-
hibitively complicated for non-parametric distributions and
when d (the dimensionality of the embedded space) is large.
Since the overlap between two classes is related to the sim-
ilarity of their distributions, one may instead use a proba-
bility distribution distance function such as the Kullback-
Leibler divergence or the Kolmogorov-Smirnov test as a
surrogate for Eq.(1). One such function is the probability
product kernel of Jebara et al. [22] :

ZIRd

P (φ(x)|Ci)ρP (φ(x)|Cj)ρdφ(x)

(2)

which is a generalization of the Bhattacharyya kernel (and
the Hellinger distance) when ρ = 1/2. While comput-
ing Eq.(2) is as complex as computing Eq.(1) for an ar-
bitrary value of ρ, simpliﬁcation occurs when ρ = 1. In
that case, the kernel becomes the inner-product between the

two distributionsRIRd P (φ(x)|Ci)P (φ(x)|Cj)dφ(x) which

is the expectation of one distribution under the other :
EP (φ(x)|Ci)[P (φ(x)|Cj)] or EP (φ(x)|Cj )[P (φ(x)|Ci)].

Formulating the inter-class divergence as an expectation

function allows one to use Monte-Carlo to approximate it:

EP (φ(x)|Ci)[P (φ(x)|Cj)] ≈

1
M

MXm=1

P (φ(xm)|Cj)

(3)

where {φ(x1), ..., φ(xM )} are M samples i.i.d.
from
P (φ(x)|Ci). One can thus approximate the divergences be-
tween two class distributions by averaging the probability of
M samples of class Ci to be in class Cj or vice versa. Com-
puting inter-class divergences leads to a K × K similarity
matrix S where K is the total number of classes and Sij is
the Monte-Carlo approximation of the divergence between
Ci and Cj .

Since the underlying model of P (φ(xm)|Cj) is a priori

unknown, we approximate it with a K-nearest estimator:

p(φ(x) | Cj) =

KCj
M V

(4)

where V is the volume of the hypercube surrounding the k
closest samples to φ(x) in class Cj , M is the total number
of samples selected in class Cj and KCj is the number of
neighbors around φ(x) of class Cj .

3.2. Spectral Clustering

The K × K similarity matrix S embodies the overall
complexity of a dataset by means of class overlap. Our goal
is to extract a measure from S that would summarize the

complexity of that dataset. For that, we rely on the spectral
clustering theory [42] that we brieﬂy review in this section.
Let G be an undirected similarity graph G = (V, E)
where V is a set of nodes connected by edges E. An
edge Eij is an arc connecting two nodes i and j and whose
weight wij ≥ 0 encodes how close these two nodes are. A
weight of 0 implies no connection between i and j whereas
a large weight implies strong similarity (in our case, a
weight of 1 implies that i and j are identical). The weight
of all edges are put in a n × n adjacency matrix W where
n is the total number of nodes. Note that W is symmetric
and positive semi-deﬁnite due to the undirected nature of
the graph which implies that wij = wji.

The goal of spectral clustering is to partition G into sub-
graphs such that the edges between the subgraphs have min-
imum weight. A set of subgraphs {G1, ..., Gl} is valid when
Gi ∩ Gj = ∅, ∀i 6= j and G1 ∪ ... ∪ Gl = G. An optimal
partition of G is one for which the cut has minimum cost :

costCut(G1, ..., Gl) = P wij for i and j in different sub-

graphs.

Spectral clustering provides an elegant framework to re-
cover the subgraphs with minimum cut.
It starts with a
Laplacian matrix whose simplest form is L = D − W

where D is a degree matrix Di = Pj wi,j . L is sym-

metric and positive semi-deﬁnite, it contains n eigenvalues
{λ0, ..., λn−1} that are real and non negative with λ0 = 0
and λi+1 ≥ λi. This set of eigenvalues is called the spec-
trum of L. Interestingly, the n eigenvectors associated to
the eigenvalues can be seen as indicator vectors that one
can use to cut the graph. Also, the magnitude of their asso-
ciated eigenvalues is related to the cost of their cut [33]. As
such, the eigenvectors associated to the lowest eigenvalues
are those associated to the partitions of minimum cost.

3.3. Inter class adjacency matrix

We formulate our c-measure within the spectral cluster-
ing framework for which each node is a class index. In our
case, W and L are K × K matrices where K is the total
number of classes. As such, the weight wi,j is the distance
between the likelihood distributions of classes Ci and Cj .
Thus, a simple dataset for which each pair of classes has
little overlap would produce a sparse Laplacian matrix L
whose spectrum contains small eigenvalues. On the other
hand, a more complex dataset with stronger class overlap
would lead to a spectrum with larger eigenvalues.

Since the similarity matrix S was obtained with a Monte-
Carlo approximation of the Jebara kernel, it is not symmet-
ric and thus cannot be used as an adjacency matrix W . In-
stead, we consider each column Si as a signature vector of
each class i so two classes with similar likelihood distri-
butions would also have a similar signature vector Si and
vice versa. We then compute W following the Bray-Curtis

3217

Dataset
mnist 10
mnist 9
mnist 8
mnist 7
mnist 6
mnist 5
mnist 4
mnist 3
mnist 2
mnist

CSG E.R.
5.51
0.91
0.78
5.04
0.69
4.53
0.61
3.79
0.51
3.31
0.39
2.70
2.16
0.30
0.18
1.52
0.13
0.84
0.12
0.01

Figure 1: [Left] Spectrum of ten noisy versions of MNIST
and [right] our CSG c-measure with the error rate (E.R.) of
an AlexNet CNN (ﬁgure best viewed in color).

distance function [16]:

wij = 1 − PK
PK

k |Sik − Sjk|
k |Sik + Sjk|

.

(5)

This equation implies that wij = 0 when the distributions
of classes i and j do not overlap and wij = 1 when the
distributions are identical.

3.4. Runtime improvement

Computing the adjacency matrix W with the Bray-Curtis
function as well as the Monte-Carlo method (Eq.(3)) is 40
times faster than with a naive implementation (Eq.(2)) for a
K=10 class problem. This explains why our method is fast
and gets good results even with a small number of samples.
We came to that number as follows.

First, let us mention that the most computationally inten-
sive operation is the point-wise estimation of a probabilis-
tic distribution function (pdf) P (φ(x)|C). Since computing
Eq.(2) requires M estimations of P (φ(x)|Cj), the K × K
similarity matrix S requires a total of K 2 × M pdf estima-
tions, where K is the number of classes and M the number
of samples. Also, since Eq.(5) requires no additional pdf
estimation, our method requires a total of K 2 × M pdf es-
timations to compute the adjacency matrix W .

However, since the Bray-Curtis distance function com-
bines two RK vectors Si and Sj , it incorporates the statis-
tics of 2 × K × M samples at each entry wij of W . If the
same number of samples were to be used by a naive imple-
mentation, i.e. that wij was to be computed with 2×K ×M
samples and Eq.(2), the computation of W would require a
total of 4 × K 3 × M pdf estimations, i.e. 4 × K more pdf
estimations than for our method. From there we conclude
that our method is 40 times faster than a naive implemen-
tation when K = 10. Please note that these ﬁndings are in
line with empirical results.

3.5. The CSG complexity measure

the spectrum of the MNIST dataset (the bottommost cyan
curve) which we obtained by processing raw images. Since
MNIST contains 10 classes, its spectrum contains 10 eigen-
values. Being a simple dataset, MNIST’s spectrum contains
mostly near-zero values. We then randomly swap elements
between classes to force their distribution to strongly over-
lap, making this noisy version of MNIST more complex.
We ﬁrst swap elements between two classes (MNIST 2),
then between three classes (MNIST 3) all the way to 10
classes (MNIST 10). As one can see, these noisy versions
of MNIST lead to a gentle progression of the spectrum pro-
ﬁles. The more entangled classes are, the larger the eigen-
values are. Also, the sooner a strong spectrum gradient oc-
curs (λi+1 − λi) the more difﬁcult the dataset is (this gradi-
ent discontinuity is also called the eigengap in the spectral
clustering literature [42]).

The overall complexity of the dataset is thus related to
the area under the spectrum curve as well as the position
of the eigengap. To account for both observations, we ﬁrst
normalize the eigengap by its horizontal position:

λi+1 − λi

K − i

.

(6)

∆eλi =

The normalization by K − i is at the core of our metric.
Depending on where the largest eigengap occurs, its max-
imum value can only be of K − i. The difﬁculty of cut-
ting the graph is thus related to the position of the largest
eigengap. Our c-measure (the cumulative spectral gradient
(CSG)) is the cumulative maximum (cummax) of the nor-
malized eigengaps :

CSG =Xi

cummax(∆eλ)i.

(7)

With a cummax, between two spectrums with the same area
under the curve, our CSG measure will be larger for the one
with the left-most eigengap. The CSG values for the noisy
MNIST datasets are shown on the right of Fig. 1 along side
with the test error rate obtained with an AlexNet CNN [24].
As can be seen, our CSG c-measure is heavily correlated to
the complexity of the datasets.

Our method is summarized in Algorithm 1.

4. Results

4.1. Embeddings

As mentioned before, the input images x are projected to
an embedding space with a function φ(x). In this paper, we
tested four projection functions :

As mentioned before, a dataset with a low eigenvalue
spectrum indicates a low inter-class overlap and thus eas-
ily separable classes. To illustrate this, we put in Fig. 1

1. Raw; the identity function φ(x) = x ;

2. t-SNE; the t-SNE function [30] which projects the raw

input images down to a 2D space;

3218

Algorithm 1: The CSG c-measure algorithm.

Data: Dataset={(φ(x1), t1), ..., (φ(xN ), tN )}
Args: M, k
Result: CSG score
Compute inter-class similarity matrix S with Eq.(3)
and (4) ∀ pair of classes Ci, Cj
Compute W (Eq.(5))
L ← D − W
{λ1, ..., λK} ← EigenValues(L)
Compute CSG (Eq.(7))
return CSG

3. CNNAE;

the

embedding of

a 9-layer CNN-

Autoencoder trained for 100 epochs;

4. CNNAE t-SNE; the t-SNE function applied to the em-

bedding of the CNN-autoencoder.

4.2. Datasets

In order to gauge performance of our method, we used
several image classiﬁcation datasets of various difﬁculty
levels. Of those datasets, six contain 10 classes, one con-
tains 11 classes and three contain two classes. These
datasets are summarized in Table 1 and sorted accord-
ing to the test error rate (E.R.) obtained with an AlexNet
CNN [24]. Note that we replaced the AlexNet local re-
sponse norm with a batch-norm [20], trained it for 500
epochs on each dataset with a batch size of 32 and the SGD
optimizer with the same parameters than in the original pa-
per but without data augmentation. We used Keras [10],
Tensorﬂow [1] and an Nvidia Titan X GPU.

The datasets are the well-known MNIST [25] and CI-
FAR10 [23]. There is also notMNIST [8], a synthetic
dataset of 18,724 letters made of unconventional fonts, and
the Street View House Numbers (SVHN) dataset [35], one
of the most challenging digit classiﬁcation datasets with
73,257 images of low resolution street numbers. We also
use MioTCD [29], a large dataset of 648,959 vehicles pic-
tured by trafﬁc cameras with varying orientation angles,
resolution, time of the day and weather conditions. STL-
10 [11] is a 10-class dataset similar to CIFAR-10 but with
larger images (96 × 96 instead of 32 × 32) and fewer train-
ing samples (5,000 instead of 50,000). SeeFood [4] is a
two-class dataset (Hot-dog vs No Hot-dog) with 498 sam-
ples derived from the Food-101 dataset [6]. We also use the
well-known Inria pedestrian dataset [13] containing 38,634
RGB images of pedestrians or not, and Pulmo-X [21], a
two-class pulmonary chest X-Ray dataset for tuberculosis
detection containing 662 images. Finally, CompCars [44] is
a dataset containing 1,716 car categories of different makes
and models. For our experiments, we selected the 10 makes
with the highest count and resized the images to 128 × 128,

SVHN
Inria

Datasets
MNIST

E.R. K
10
0.01
11
MIO-TCD 0.03
10
0.05
notMNIST
0.08
10
2
0.10
10
0.12
2
0.23
2
0.38
0.68
10
10
0.70

CIFAR10
Pulmo-X
SeeFood
STL-10

CompCars

N
50k
649k
18.7k
73.3k
3.6k
50k
662
500
5k
6k

Content

Hand written digits

Trafﬁc images
Printed digits
Printed digits
Pedestrians

Various real images
Pulmonary X-Rays

Images of food

Various real images

Pictures of cars

Table 1: Datasets used to validate our method with the test
error rate (E.R.) of an AlexNet CNN [24], the number of
classes K, the training set size N and a short summary.

giving us 500 samples per class.

We followed the evaluation methodology speciﬁc to each
dataset, i.e. we trained and tested the methods on the train-
ing and testing set provided with the datasets. For the two
datasets without pre-determined train/test split (notMNIST
and Pulmo-X) we made a 80-20 Train/Test split and kept
the same class proportion.

4.2.1 Hyper-parameters

Our algorithm has two main hyper-parameters: M the num-
ber of samples per class used by the Monte Carlo method in
Eq.(3) and k the number of neighbors to compute the like-
lihood distribution of each class in Eq.(4). In Table 2, we
show the Pearson correlation score between our c-measure
with the CNNAE t-SNE embedding and the error rate of
AlexNet on the six 10-class datasets (upper table) as well
as the average processing time of our Algo 1 (lower table).
As one can see, the choice for k and M has little impact
on the quality of the results (except for when M is very
small). Also, while the runtime scales almost linearly with
M , our method is still fast with timings below 3 seconds,
even with M = 400 samples per class. This shows that our
method does not require a careful adjustment of its hyper-
parameters. We found this as well for the other embeddings
we tested. As such, we will use M = 100 and k = 3 for the
remainder of this section.

4.3. Experimental results

4.3.1 Comparison with other c-measures

We compared our method to the most widely implemented
c-measures, i.e. those by Ho and Basu [18]. We used the
C++ DCol library provided by the authors [37] and pro-
cessed the six 10-class datasets. We thus followed the orig-
inal methodology provided by the authors which implies no
embedding. In addition, we tested two other metrics derived
from the spectral theory: the maximum eigenvalue (max Λ)
and the area under the curve (AUC). These methods are

3219

1

0.81
0.97
0.97
0.98
0.97
0.97

0.02
0.30
0.60
1.22
1.82
2.42

3

0.79
0.97
0.97
0.98
0.97
0.97

0.02
0.30
0.61
1.21
1.82
2.38

2
50
100
200
300
400

2
50
100
200
300
400

M

M

k

7

0.75
0.96
0.98
0.98
0.98
0.97

0.02
0.30
0.60
1.19
1.78
2.41

5

0.80
0.97
0.98
0.98
0.97
0.97

0.02
0.29
0.60
1.23
1.82
2.42

9

0.76
0.96
0.97
0.98
0.97
0.97

0.02
0.29
0.60
1.20
1.83
2.39

11
0.73
0.97
0.97
0.98
0.98
0.97

0.02
0.27
0.60
1.22
1.79
2.39

P
e
a
r
s
o
n
C
o
r
r
.

i

T
m
i
n
g
(
s
)

Table 2: Correlation values [upper table] and average pro-
cessing times of Algo 1 in seconds [lower table] for various
combinations of hyperparameters M and k.

c-measure

N4
F3
F1
F2
T1
T2
N2
F4
N1
N3

maxi λi CNNAE t-SNE
Pi
λi CNNAE t-SNE

CSG Raw

CSG CNNAE
CSG t-SNE

CSG CNNAE t-SNE

p-value
Corr.
0.896
0.069
0.610
0.267
0.311
0.501
0.405
0.422
0.487
0.357
0.175
0.636
0.161
0.652
0.103
0.725
0.092
0.741
0.072
0.773
0.02
0.88
≤0.01
0.94
.125
0.696
.044
0.823
0.903
.014
0.968 ≤0.01

Time (s)

3,744
3,924

72
72

36,108

72

36,180
3,644
17,748
36,216

0.3 (18,900)
0.3 (18,900)

50 (NA)

3.6 (13,300)
0.7 (6,084)
0.3 (18,900)

Table 3: Correlation between the accuracy of AlexNet on 6
datasets and 10 c-measures by Ho-Basu [18] and ours meth-
ods with four embeddings, the associated p-value and pro-
cessing time alongside the time to train the autoencoder in
the parentheses (measured on CIFAR10).

known in the literature as being related to the similarity be-
tween nodes [40]. These turn out to perform worse than our
CSG metric. Results are reported in Table 3 together with
our method with four embeddings.

The ﬁrst column contains the Pearson correlation score
between the error rate by an AlexNet CNN and each c-
measure. As one can see, our method with the CNNAE,
t-SNE and CNNAE t-SNE embeddings have a better correla-
tion than any of the existing c-measures with a p-value be-
low the 0.05 bar. The best embedding is CNNAE t-SNE with
a signiﬁcance p-value below 0.01. To illustrate how this em-
bedding correlates with the dataset complexity, we put in

Figure 2: Laplacian spectrum for the 10-class datasets.

Fig. 2 its Laplacian spectrum for the six 10-class datasets.
As can be seen, the spectrum plots grow smoothly from
the simplest dataset (MNIST), to slightly more complex
datasets (notMNIST, CIFAR10 and SVHN) all the way to
the most complex datasets (STL-10 and CompCars). Note
that we will use the CNNAE t-SNE embedding for the re-
maining of this section.

As for processing time, our method is faster than the best
c-measures F4, N1 and N3. Note the value on the left is the
time to execute Algo.
1 whereas the value in parenthe-
sis is the processing time to train a CNNAE and/or run t-
SNE. Although that processing time is large (more than one
hour) it is much faster than the previous best method N3.1
The performance of the t-SNE embedding is due to the fact
that while t-SNE does not change the nearest neighbours,
it does not preserve long-range distances which results in
a less convoluted low-dimensional representation. In con-
sequence, the approximation of the volume is better in this
representation.

In Table 4, we provide our CSG c-measure with the test
error rate of three CNN models as well as their Pearson cor-
relation and p-value. As can be seen, our c-measure cor-
relates well not only with AlexNet, but also with more re-
cent ResNet-50 [17] and XceptionNet [9]. Also, our cor-
relation and p-value with CNN error rates is signiﬁcantly
better than the best existing c-measures [18] even when us-
ing our CNN t-SNE embedding. In fact, using embeddings
seem detrimental to the overall performance of the existing
c-measures. Results on all the existing c-measures with all
the embeddings are available in the supplementary material.
We also tested our method on two-class image classiﬁ-
cation problems. We used the Inria, SeeFood, and PulmoX
datasets as well as the deer-dog subset of CIFAR10. Re-
sults reported in Table 5 show that our method correlates
well with the CNN models, especially AlexNet. Our corre-
lation scores are also better than those of the best c-measure
of Ho-Basu (although by a slight margin) although it was
speciﬁcally designed for two-class problems.

1The timings were computed on CIFAR10 using a Intel R(cid:13)Xeon R(cid:13)CPU

E5-1620 and a NVIDIA TITAN X.

3220

Datasets

CSG

AlexNet

CompCars

STL-10
CIFAR10

SVHN

notMNIST

MNIST

2.93
3.07
1.00
1.15
0.72
0.11

0.70
0.69
0.18
0.08
0.05
0.01

Error rate
ResNet-

50
0.88
0.63
0.19
0.07
0.04
0.05

Xception

0.86
0.69
0.06
0.03
0.03
0.01

Method

N3/CNN Corr
N3/CNN p-val

N3 CNN t-SNE/CNN Corr
N3 CNN t-SNE/CNN p-val
CSG CNN t-SNE/CNN Corr
CSG CNN t-SNE/CNN p-val

Pearson correlation

0.773
0.054
0.837
0.063
0.968
0.01

0.727
0.102
0.765
0.124
0.935
0.006

0.681
0.136
0.837
0.144
0.951
0.003

Table 4: [Top] CSG c-measure alongside with test error
rates for 3 CNN models on six datasets.[Bottom] Pearson
correlation and p-value between the CNN error rates and the
N2 and N3 Ho-Basu our CSG c-measure [18] and CNN.

Datasets

CSG

AlexNet

SeeFood
PulmoX
deer-dog

Inria

0.95
0.55
0.39
0.32

N3 Ho-Basu/CNN Corr
N3 Ho-Basu/CNN p-val

CSG/CNN Corr
CSG/CNN p-val

0.38
0.23
0.20
0.10

0.976
0.01
0.995
0.006

ResNet-

50
0.34
0.16
0.02
0.07

0.852
0.148
0.860
0.130

Xception

0.21
0.11
0.02
0.03

0.862
0.138
0.887
0.113

Table 5: [Top] CSG c-measure alongside with test error
rates for 3 CNN models on four 10-class datasets.[Bottom]
Pearson correlation and p-value between ours methods and
CNN and between the N3 c-measure [18] and CNN.

4.3.2 Dataset reduction

Dataset reduction (also known as instance selection [26])
consists in reducing as much as possible the number of el-
ements in a dataset without losing trained CNN accuracy.
One way of doing so is by iteratively removing elements
from the dataset up to a point where the CSG measure in-
creases sharply.

We ﬁrst tested our method on the MIO-TCD dataset [29],
a large dataset used for a 2017 CVPR challenge and for
which CNN methods got accuracies of up to 98%. Such
high accuracies suggest that the dataset is overcomplete and
could be reduced without affecting much the CNN accu-
racy. Results for various reduction ratios are shown in Fig-
ure 3. As one can see, the CSG (red dots) stays roughly un-
changed for reduction ratios below 80% but then increases
sharply after that. This is inline with the AlexNet test error

Figure 3: Our c-measure and AlexNet accuracy obtained
while reducing the size of the MioTCD dataset.

rate (blue line) although it took less than 5 minutes to pro-
duce the CSG measures and 5 days the AlexNet results. We
used the same CNNAE embedding for all ratios. We got a
Pearson correlation of 0.956 between our CSG dots and the
error rate values shown in Figure 3.

Dataset reduction can also be used to measure the simi-
larity between two datasets with very different sizes like CI-
FAR10 (5,000 training samples per class) and STL-10 (500
training samples per class). While these datasets have vi-
sually similar content, the CNN error rates on it are very
different (see Table 1). To measure the true distance be-
tween those datasets, we progressively reduced the number
of samples for each CIFAR10 class to reach that of STL-
10. The results in Table 6 show the close bound between
our metric and the number of samples in the dataset. With
only 500 samples, CIFAR10 gets a CSG score and a CNN
accuracy similar but not identical to that of STL-10. This
shows that the datasets are similar but not identical, prob-
ably due to the fact that the CIFAR10 Frog class has been
replaced by a Monkey class in STL-10 (supplementary ma-
terial). Here again, it took roughly one minute to produce
the CSG scores (after having trained the embedding) and 4
days for the CNN error rates.

4.4. Confusion matrix

While our c-measure can gauge the overall complexity
of a dataset with a single measure that correlates with CNN
accuracies, we can also use the similarity matrix W (Eq.(5))
to analyze the inter-class distances. As such, one can use a
dissimilarity matrix S = 1 − W to visualize the dataset
in 2D via an algorithm such as multidimensional scaling
(MDS) [5]. This results into plots such as those in Fig. 4.
While the classes of MNIST are all well separated, the CI-
FAR10 plots show that the cat and dog classes as well as
deer and bird are close to each other, probably due to sim-
ilar contexts. As for MioTCD, the bicycle, motorcycle and
pedestrian classes are in the same vicinity, mainly because

3221

Figure 4: 2D plots of our W matrix for MNIST, CIFAR10 and MioTCD.

Dataset
CIFAR10

CIFAR10 reduced=4500
CIFAR10 reduced=3500
CIFAR10 reduced=2500
CIFAR10 reduced=1500
CIFAR10 reduced=500

STL-10

CSG
1.10
1.10
1.26
1.44
2.16
2.59
3.16

Error rate

0.18
0.19
0.20
0.24
0.28
0.42
0.68

Table 6: Effect of reducing the number of samples per class
for CIFAR10 on our CSG metric and the AlexNet test error
rate.

A future direction of our research would be to determine
a procedure to compare the relative complexity of classiﬁ-
cation problems with different number of classes. The anal-
ysis of random subsets of classes could be used as a com-
mon representation. Another important direction would be
to generalize our method to segmentation and localization
problems. As of now, it is not clear how these problems can
be described by spectral clustering.

Another future work would be to incorporate our simi-
larity matrix W in the optimization process of a neural net-
work to minimize the interclass divergence. It is our intu-
ition that the a priori knowledge of the interclass overlap
could be used to force the optimizer to further separate en-
tangled classes, a bit like the triplet loss does. Finally, our
metric is not restricted to image classiﬁcation datasets and
could be used in other areas of machine learning such as
speech recognition and natural language processing (NLP).
These ﬁelds already use state-of-the-art embeddings such as
Word2Vec [32] and would thus naturally fall into our CSG
framework.

References

[1] M. Abadi, P. Barham, J. Chen, Z. Chen, A. Davis, J. Dean,
M. Devin, S. Ghemawat, G. Irving, M. Isard, et al. Tensor-
ﬂow: A system for large-scale machine learning. In OSDI,
volume 16, pages 265–283, 2016.

[2] N. Anwar, G. Jones, and S. Ganesh. Measurement of data
complexity for classiﬁcation problems with unbalanced data.
Journal Stat. Anal. Data Mining, 7(3):196–211, 2014.

3222

Figure 5: [Top] our W matrix and [Bottom] AlexNet’s con-
fusion matrix for CIFAR10.
of their small image resolution, they often contain more
compression artifacts and hence be less feature-rich than
other classes, making them confusing with featureless back-
ground.

As shown in Fig. 5, the W matrix strongly correlates to
a real confusion matrix (here AlexNet). Here again, cat and
dog as well as deer and bird are easily confused.

5. Conclusion

In this work, we proposed a novel complexity measure
designed for image classiﬁcation problems called the cumu-
lative spectral gradient (CSG) which is more accurate and
faster than previous methods. We showed that our metric
has many uses such as instance selection and class disen-
tanglement. We also showed that the CSG closely matches
the accuracy achievable by standard CNN architectures, an
important feature when assessing an image dataset.

[3] R. Baumgartner and R. Somorjai. Data complexity as-
sessment in undersampled classiﬁcation of high-dimensional
biomedical data. Pat. Rec. Letters, 27(12), 2006.

[4] D. Becker. Hot dog - not hot dog.

[Online]. Avail-
urlhttps://www.kaggle.com/dansbecker/hot-dog-not-

able:
hot-dog, 2017.

[5] I. Borg and P. Groenen. Modern multidimensional scaling:
theory and applications, volume 40. Wiley Online Library,
2003.

[6] L. Bossard, M. Guillaumin, and L. Van Gool. Food-101 –
mining discriminative components with random forests. In
Proc. ECCV, 2014.

[7] A. L. Brun, A. S. Britto Jr, L. S. Oliveira, F. Enembreck, and
R. Sabourin. A framework for dynamic classiﬁer selection
oriented by the classiﬁcation problem difﬁculty. Pat. Rec.,
76:175–190, 2018.

[8] Y. Bulatov.

notmnist.

[Online]. Available:

www.kaggle.com/lubaroli/notmnist, 2017.

[9] F. Chollet. Xception: Deep learning with depthwise separa-

ble convolutions. In Proc. CVPR, pages 1800–1807, 2017.

[10] F. Chollet

et

al.

Keras.

[Online] Available

[24] A. Krizhevsky, I. Sutskever, and G. E. Hinton.

classiﬁcation with deep convolutional neural networks.
Proc. NIPS, pages 1097–1105, 2012.

Imagenet
In

[25] Y. LeCun, C. Cortes, and C. Burges. Mnist handwritten digit
database. AT&T Labs [Online]. Available: http://yann. le-
cun. com/exdb/mnist, 2, 2010.

[26] E. Leyva, A. Gonz´alez, and R. P´erez. A set of com-
plexity measures designed for applying meta-learning to in-
stance selection. IEEE Trans on Knowledge and Data Eng.,
27(2):354–367, 2015.

[27] C. Li, H. Farkhoor, R. Liu, and J. Yosinski. Measuring the
intrinsic dimension of objective landscapes. In Proc. ICLR,
2018.

[28] A. Lorena, L. Garcia, J. Lehmann, M. Souto, and T. Ho.
How Complex is your classiﬁcation problem? A survey on
measuring classiﬁcation complexity. ArXiv –1808.03591v1,
2018.

[29] Z. Luo, F. B.Charron, C. Lemaire, J. Konrad, S. Li,
A. Mishra, A. Achkar, J. Eichel, and P.-M. Jodoin. Mio-
tcd: A new benchmark dataset for vehicle classiﬁcation and
localization. In press at IEEE TIP, 2018.

:https://github.com/fchollet/keras, 2015.

[30] L. v. d. Maaten and G. Hinton. Visualizing data using t-sne.

[11] A. Coates, A. Ng, and H. Lee. An analysis of single-layer
In Proc. AIS-

networks in unsupervised feature learning.
TATS, pages 215–223, 2011.

[12] L. Cummins and D. Bridge. Choosing a case base mainte-
nance algorithm using a meta-case base.
In Research and
Development in Intelligent Systems XXVIII, pages 167–180.
Springer, 2011.

[13] N. Dalal and B. Triggs. Inria person dataset. [Online]. Avail-

JMLR, 9(11):2579–2605, 2008.

[31] R. G. Mantovani, A. L. Rossi, J. Vanschoren, B. Bischl, and
A. C. Carvalho. To tune or not to tune: recommending when
to adjust svm hyper-parameters via meta-learning. In Proc.
IJCNN, 2015.

[32] T. Mikolov, I. Sutskever, K. Chen, G. Corrado, and J. Dean.
Distributed representations of words and phrases and their
compositionality. In Proc. NIPS, 2013.

able: http://pascal. inrialpes. fr/data/human, 2005.

[33] B. Mohar.

Some applications of Laplace eigenvalues of

[14] R. Duin and E. Pekalska. Object representation, sample size

graphs, pages 225–275. Springer, 1997.

and dataset complexity. Springer, 2006.

[15] L. Garcia, A. de Carvalho, and A. Lorena. Effect of label
noise in the complexity of classiﬁcation problems. Neuro-
computing, 160:108–119, 2015.

[16] M. Greenacre and R. Primicerio. Measures of distance be-
tween samples: non-euclidean. Multivariate analysis of eco-
logical data, pages 5–1, 2013.

[17] K. He, X. Zhang, S. Ren, and J. Sun. Deep residual learning
for image recognition. In Proc. CVPR, pages 770–778, 2016.
[18] T. Ho and M. Basu. Complexity measures of supervised clas-
IEEE trans on PAMI, 24(3):289–300,

siﬁcation problems.
2002.

[19] D. Hoiem, Y. Chodpathumwan, and Q. Dai. Diagnosing error

in object detectors. Springer, 2012.

[20] S. Ioffe and C. Szegedy. Batch normalization: Accelerating
deep network training by reducing internal covariate shift. In
Proc. ICML, pages 448–456, 2015.

[21] S. Jaeger, S. Candemir, S. Antani, Y.-X. J. W´ang, P.-X. Lu,
and G. Thoma. Two public chest x-ray datasets for computer-
aided screening of pulmonary diseases. Quantitative imag-
ing in medicine and surgery, 4(6):475, 2014.

[22] T. Jebara, R. Kondor, and A. Howard. Probability product

kernels. JMLR, 5(7):819–844, 2004.

[23] A. Krizhevsky and G. Hinton. Learning multiple layers of

features from tiny images. Tech.Report, 2009.

[34] G. Morais and R. C. Prati. Complex network measures for
In Proc. BRACIS, pages 12–18.

data set characterization.
IEEE, 2013.

[35] Y. Netzer, T. Wang, A. Coates, A. Bissacco, B. Wu, and
A. Ng. Reading digits in natural images with unsupervised
feature learning. In Proc. NIPS, page 5, 2011.

[36] E. Nowakowska, J. Koronacki, and S. Lipovetsky. Tractable
Measure of Component Overlap for Gaussian Mixture Mod-
els. ArXiv – 1407.7172, 2014.

[37] A. Orriols-Puig, N. Macia, and T. K. Ho. Documentation for
the data complexity library in c++. Universitat Ramon Llull,
La Salle, 196, 2010.

[38] J. Saez, J. Luengo, and F. Herrera. Predicting noise ﬁltering
efﬁcacy with data complexity measures for nearest neighbor
classiﬁcation. Pat. Rec., 46(1):355–364, 2013.

[39] K. Simonyan and A. Zisserman. Very deep convolutional
networks for large-scale image recognition. In Proc. ACPR,
2015.

[40] S. Sorgun and S. Buyukkose. Bounds for the largest lapla-
cian eigenvalues of weighted graphs. International Journal
of Combinatorics, 2013, 2013.

[41] J. Sotoca, R. Mollineda, and J. Sanchez. A meta-learning
framework for pattern classiﬁcation by means of data com-
plexity measures.
Int. art. rev. iber de IA, 10(29):31–38,
2006.

3223

[42] U. Von Luxburg. A tutorial on spectral clustering. Statistics

and computing, 17(4):395–416, 2007.

[43] L. Wang, Y. Zhang, and J. Feng. On the euclidean distance

of images. IEEE Trans on PAMI, 27(8), 2005.

[44] L. Yang, P. Luo, C. Change Loy, and X. Tang. A large-scale
car dataset for ﬁne-grained categorization and veriﬁcation.
In Proc. CVPR, pages 3973–3981, 2015.

[45] C. Zhang, S. Bengio, M. Hardt, B. Recht, and O. Vinyals.
Understanding deep learning requires re-thinking generaliza-
tion. In Proc. ICLR, 2017.

3224

