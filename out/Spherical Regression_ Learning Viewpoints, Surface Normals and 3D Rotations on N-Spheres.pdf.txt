Learning Viewpoints, Surface Normals and 3D Rotations on n-Spheres

Spherical Regression:

Shuai Liao

Efstratios Gavves

Cees G. M. Snoek

QUVA Lab, University of Amsterdam

Abstract

Many computer vision challenges require continuous
outputs, but tend to be solved by discrete classiﬁcation. The
reason is classiﬁcation’s natural containment within a prob-
ability n-simplex, as deﬁned by the popular softmax activa-
tion function. Regular regression lacks such a closed geom-
etry, leading to unstable training and convergence to sub-
optimal local minima. Starting from this insight we revisit
regression in convolutional neural networks. We observe
many continuous output problems in computer vision are
naturally contained in closed geometrical manifolds, like
the Euler angles in viewpoint estimation or the normals in
surface normal estimation. A natural framework for posing
such continuous output problems are n-spheres, which are
naturally closed geometric manifolds deﬁned in the R(n+1)
space. By introducing a spherical exponential mapping on
n-spheres at the regression output, we obtain well-behaved
gradients, leading to stable training. We show how our
spherical regression can be utilized for several computer
vision challenges, speciﬁcally viewpoint estimation, sur-
face normal estimation and 3D rotation estimation. For all
these problems our experiments demonstrate the beneﬁt of
spherical regression. All paper resources are available at
https://github.com/leoshine/Spherical Regression.

1. Introduction

Computer vision challenges requiring continuous out-
puts are abundant. Viewpoint estimation [28, 29, 33, 35],
object tracking [12, 17, 18, 34], and surface normal estima-
tion [1, 8, 30, 39] are just three examples. Despite the con-
tinuous nature of these problems, regression based solutions
that seem a natural ﬁt are not very popular. Instead, classi-
ﬁcation based approaches are more reliable in practice and,
thus, dominate the literature [20, 24, 33, 34, 35]. This leads
us to an interesting paradox: while several challenges are
of continuous nature, their present-day solutions tend to be
discrete.

In this work we start from this paradox and investigate
why regression lags behind. When juxtaposing the mechan-

y

(cosφ, sinφ)

φ

x

φ

(a) 2D rotation

S1: cos2φ + sin2φ = 1

Z

X

Y

(b) Surface normal vector

z

[!", !$, !%]

y

x

S2: !"

& + !$

& + !%

& = 1

Z

θ

Y

X

q = a + bi + cj + dk
x’

z

y’

z’

θ

y

x

(c) 3D rotation

S3 : a2 + b2 + c2 + d2 = 1

Figure 1. Many computer vision problems can be converted
into a n-sphere problem. n-spheres are naturally closed geomet-
ric manifolds deﬁned in the R(n+1) space. Examples are a) view-
point estimation, b) surface normal estimation, and c) 3D rotation
estimation. This paper proposes a general regression framework
that can be applied on all these n-sphere problems.

ics of classiﬁcation and regression we observe that classiﬁ-
cation is naturally contained within a probability n-simplex
geometry deﬁned by the popular softmax activation func-
tion. The gradients propagated backwards to the model are
constrained and enable stable training and convergence. In
contrast, regression is not contained by any closed geome-
try. Hence, the gradients propagated backwards are not con-
strained, potentially leading to unstable training or conver-
gence to suboptimal local minima. Although classiﬁcation
solutions for continuous problems suffer from discretization

9759

errors in annotations and predictions, they typically lead to
more reliable learning [20, 24].

(CNN) we can split it into two subnetworks, the base net-
work and the prediction head, see (eq. 1).

Founded on the relation between classiﬁcation, regres-
sion and closed geometric manifolds, we revisit regression
in deep networks. Speciﬁcally, we observe many continu-
ous output problems in computer vision are naturally con-
tained in closed geometrical manifolds deﬁned by the prob-
lem at hand. For instance, in viewpoint estimation, angles
cannot go beyond the [−π, π] range. Or, in surface nor-
mal estimation the ℓ2 norm of the surface normals must
sum up to 1 to form unit vectors that indicate directional-
ity. It turns out that a natural framework for posing such
continuous output problems are the n-spheres Sn [7, 10],
which are naturally closed geometric manifolds deﬁned in
the R(n+1) space. We, therefore, rethink regression in con-
tinuous spaces in the context of n-spheres, when permitted
by the application. It turns out that if we introduce a pro-
posed spherical exponential mapping on n-spheres at the re-
gression output we obtain regression gradients that are con-
strained and well-behaving, similar to classiﬁcation-based
learning. We refer to regression using the proposed spher-
ical exponential mappings on Sn spheres as Sn spherical
regression.

In this work we make the following contributions. First,
we link the framework of n-spheres to continuous output
computer vision tasks. By doing so, they are amenable
to the properties of the n-spheres formulation, leading to
spherical regression. Second, we propose a novel nonlin-
earity, the spherical exponential activation function, specif-
ically designed for regressing on Sn spheres. We show the
activation function improves the results obtained by regular
regression. Third, we show how the general spherical re-
gression framework can be utilized for particular computer
vision challenges. Speciﬁcally, we show how to recast ex-
isting methods for viewpoint estimation, surface normal es-
timation and 3D rotation estimation to the proposed spheri-
cal regression framework. Our experiments demonstrate the
beneﬁt of spherical regression for these problems.

We now ﬁrst describe in Section 2 the motivation be-
hind the deep learning mechanics of classiﬁcation and re-
gression. Based on the insights derived, we describe in Sec-
tion 3 the general framework for spherical regression on
Sn spheres. We then explain how to specialize the gen-
eral frameworks for particular applications, see Fig. 1. We
describe the related work for these tasks in Section 4. In
Section 5, we evaluate spherical regression for the three
applications.

2. Motivation

Deep classiﬁcation and regression networks. We start
from an input image x of an object with a supervised learn-
ing task in mind, be it classiﬁcation or regression. Re-
gardless the task, if we use a convolutional neural network

O =


o0
o1
...
on



}

H(·)

base network

−−−−−−−→
{z

x

|

g(·)

−−−−−→activation

L(·,·)
←−−→loss

Y

P =


|

p0
p1
...
pn



{z

}

Base network

Prediction head

(1)
The base network considers all the layers from input x
till layer O. It deﬁnes a function O = H(x) that returns an
intermediate latent embedding O = [o0, o1, ..., on]⊤ of the
raw input x. The function comprises a cascade of convo-
lutional layers intertwined with nonlinearities and followed
by fully connected layers, H = hl ◦ hl−1 ···◦ hk ◦···◦ h2 ◦
h1, where hk is the θ-parameterized mapping of k-th layer.
Given an arbitrary input signal x, the latent representation

O is unconstrained, namely x = H(x) → R(n+1).

The prediction head contains the last (n+1)-dimensional
layer P before the loss function, which is typically re-
ferred to as the network output. The output is obtained
from an activation function g(·), which generates the out-
put P : pk = g(ok; O) using as input the intermediate raw
embedding O returned by the base network. The activation
function g(·) imposes a structure to the raw embdedding
O according to the task at hand. For instance, for a CNN
trained for image classiﬁcation out of 1, 000 classes we have
a 1, 000-dimensional output layer P that represents softmax
probabilities. And, for a CNN trained for 2D viewpoint es-
timation we have a 2-dimensional output layer P that repre-
sents the trigonometric functions P = [cosφ, sinφ]. After
the prediction head lies the loss function L(P , Y ) that com-
putes the distance between the prediction P and the ground
truth Y = [y0, y1, ...]⊤, be it cross entropy for classiﬁcation
or sum of squared errors for regression.

The dimensionalities of O and P vary according to the
type of classiﬁcation or regression that is considered. For
classiﬁcation P represents the probability of (n + 1) dis-
cretized bins. For regression, P depends on the assumed
output representation dimensionality, e.g., regression 1D
[28], regression 2D [2, 28] or regression 3D [27] and be-
yond can have different output dimensions. Together the
subnetworks comprise a standard deep architecture, which
is trained end-to-end.
Training. During training, the k-th layer parameters are
updated with stochastic gradient descent, θk ← θk − γ ∂L∂θk
,
where γ is the learning rate. Expanding by the chain rule of
calculus we have that
∂L
∂P

∂hk+1
∂hk

∂hk
∂θk

∂L
∂θk

∂P
∂O

. . .

(2)

=

(

)

∂O
∂hl−1

Training is stable and leads to consistent convergence when
the gradients are constrained, otherwise gradient updates

9760

may cause bouncing effects on the optimization landscape
and may cancel each other out. Next, we examine the be-
havior of the output activation P and the loss functions for
classiﬁcation and regression.
Classiﬁcation. For classiﬁcation the standard output ac-
tivation and loss functions are the softmax and the cross
entropy,

that is g(oi; O) = {pi = eoi /Pj eoj , i =
0··· n},L(O, Y ) = −Pi yilog(pi). The pi and yi are
the posterior probability and the one-hot vector for the i-th
class, and d is the number of classes. Note that softmax
maps the raw latent embedding O ∈ R(n+1) to a structured
output P , known as n-simplex, where each dimension is
positive and the sum equals to one, i.e. Pi pi = 1 and

pi > 0. The partial derivative of the probability output with
respect to the latent activation equals to

∂pj
∂oi

=(pj · (1 − pj), when j = i
when j 6= i

−pi · pj,

(3)

Crucially, we observe that the partial derivative ∂pj
does
∂oi
not directly depend on O. This leads the partial derivative
of the loss function with respect to oi, namely

∂L
∂oi

= −Xk

yk
pk ·

∂pk
∂oi

= pi − yi,

(4)

to be independent of O itself. As P corresponds to a prob-
ability distribution that lies inside the n-dimensional sim-
plex, it is naturally constrained by its ℓ1 norm, pj < 1.
Thus, the partial derivative ∂L∂O depends only on a quantity
that is already constrained.

Regression. In regression usually there is no explicit acti-
vation function in the ﬁnal layer to enforce some manifold
structure. Instead, the raw latent embedding O is directly
compared with the ground truth. Take the smooth-L1 loss
as an example,

L =(0.5|yi − oi|2

|yi − oi| − 0.5 otherwise.

if|yi − oi| 6 1

(5)

The partial derivative of the loss with respect to oi equals to

∂L
∂oi

=(−(yi − oi)

−sign(yi − oi)

if|yi − oi| 6 1
otherwise.

(6)

Unlike classiﬁcation, where the partial derivatives are con-
strained, for regression we observe that the ∂L∂oi
directly de-
pends on the raw output O. Hence, if O has high variance,
the unconstrained gradient will have a high variance as well.
Because of the unconstrained gradients training may be un-
stable.
Conclusion. Classiﬁcation with neural networks leads to
stable training and convergence. The reason is that the par-
∂O is constrained, and, therefore, the

tial derivatives ∂L∂P · ∂P

gradient updates ∂L∂θk
, are constrained. The gradients are
constrained because the output P itself is constrained by the

ℓ1 norm of the n-simplex,Pi pi = 1. Regression with neu-

ral networks may have instabilities and sub-optimal results
during training because gradient updates are unconstrained.
We examine next how we can deﬁne a similar closed geo-
metrical manifold also for regression. Speciﬁcally, we focus
on regression problems where the target label Y lives in a
constrained n-sphere manifold.

3. Spherical regression

The n-sphere, denoted with Sn, is the surface bound-
ary of an (n + 1)-dimensional ball
in the Euclidean
space. Mathematically, the n-sphere is deﬁned as Sn =

(cid:8)x ∈ Rn+1 : kxk = r(cid:9) and is constrained by the ℓ2 norm,
namely Pi x2

i = 1. Fig. 1 gives examples of simple n-
spheres, where S1 is the circle and S2 the surface of a 3D
ball. Where the n-simplex constrains classiﬁcation by the
ℓ1 simplex norm, we next present how to constrain regres-
sion by the ℓ2 norm of an n-sphere.

3.1. Constraining regression with n spheres

To encourage stability in training regression neural net-
works on Sn spheres, one reasonable objective is to ensure
the gradients are constrained. To constrain the gradient ∂L∂O ,
we propose to insert an additional activation function in re-
gression after the raw embedding layer O. The activation
function should have the following properties.

I The output of the activation, P = {pk}, must live on
n-sphere, namely its ℓ2 norm Pk=1 p2
k = 1 must be
constant, e.g., cos2φ + sin2φ = 1. This is necessary
for spherical targets.

II Similar to classiﬁcation, the gradient ∂L∂O must not di-
rectly depend on the input signal. That is, ∂L∂O must
not depend directly on the raw latent embedding O ∈
R(n+1).

To satisfy property I, we pick our activation function
such that it produces normalized values. We opt for the ℓ2
√Pk f (ok)2 , where
normalization form: pj = g(oj; O) =
f (·) corresponds to any univariate mapping. The partial
derivative of the output with respect to the latent O then
becomes:

f (oj )

=

f (oj )

∂oi

√Pk f (ok)2(cid:21)
∂(cid:20)
=
(cid:16) df (oi)
A(cid:17) · (1 − pi
· 1
A(cid:17) · (−pi · pj), when j 6= i
(cid:16) df (oi)
· 1


2), when j = i

doi

doi

(7)

∂pj
∂oi

9761

Still, ∂pj
∂oi

where A =pPk f (ok)2 is the normalization factor.

is potentially depending on the raw latent em-
bedding O through the partial function derivatives df (oj )
doi
and the normalization factor A. To satisfy property II and
make ∂pi
independent from the raw output O, and thus
∂oj

constrained, we must make sure that(cid:16) df (oj )
A(cid:17) becomes
· 1
independent of O.
In practice, there are a limited num-
ber of choices for f (·) to satisfy this constraint. Inspired
by the softmax activation function, we resort to the ex-
ponential map f (oi) = eoi , where df (oi)
= f (oi) and
doi
∂f (oi)

doj

A = pi. Thus Eq. 7 is simpliﬁed as

∂oi

A = f (oi)
· 1

=(pi · (1 − p2
i · pj,
removing all dependency on O.

∂pj
∂oi

−p2

i ), when j = i
when j 6= i

(8)

1

(9)

eoj

||O||

pj = Sexp(oj; O) =

Since our activation function has a similar form as soft-
max, which is also known as normalized exponential func-
tion, we refer to our activation function as Spherical Expo-
nential Function. It maps inputs from Rn+1 to the positive
domain of the n-Sphere, i.e. Sexp(·) : Rn+1 → Sn
+:
pPk(eok )2

Converting Eq. 8 into matrix provides Jacobian as JSexp =
(I − P ⊗ P ) · diag(P ) where ⊗ denotes outer product
(see supplementary material for details). Notice that if we
only do ℓ2 normalization without exponential, the Jacobian
is given as JSf lat = (I− P ⊗ P )·
, which is inﬂuenced
by the magnitude of O in gradient, which is unconstrained.
Unfortunately, the exponential map in Sexp(·) restricts
the output to be in the positive range only, whereas our tar-
get can be either positive or negative. To enable regression
on the full range on n-sphere coordinates we rewrite each
dimension into two parts: pi = sign(pi) · |pi|. We then use
the output from the spherical exponential function to learn
the absolute values |pi|, i = 0, 1, ..., n only. At the same
time, we rely on a separate classiﬁcation branch to predict
the sign values, sign(pi), i = 1, ..., d of the output. The
overall network is shown in Fig. 2:
Conclusion. Given the spherical exponential mapping for
g(·), the gradient ∂P
∂O is detached from O, and P is con-
strained by the n-Sphere. Thus, to make the parameter gra-
dients also constrained, we just need to pick a suitable loss
function. It turns out that there are no signiﬁcant constraints
for the loss function. Given ground truth Y , we can set the
loss to be the negative dot product L = −h|P|,|Y |i. Since
both P and Y are on sphere with ℓ2 norm equal to 1 (i.e.
||P||2 = ||Y ||2 = 1), this is equivalent to optimize with co-
sine proximity loss or L2 loss 1. In this case, the gradients

1For cosine proximity loss: L = − h|P |,|Y |i
||P ||2·||Y ||2

= −h|P |, |Y |i.

Image

CNN

Sexp

o0
o1

on

Classification

Regression

(cid:1)(∙, ∙)

|p0|
|p1|

|pn|

|y0|
|y1|

|yn|

sign(P)
[+ + ⋯ +]

[+ + ⋯ −]

[− − ⋯ −]

Figure 2. Regressing on n-spheres with targets Y = [y0, ..., yn],
i.e. Pi y2
i = 1. The model processes the input image and ﬁrst
returns a raw latent embedding O = [o0, ..., on] ∈ R(n+1). Then,
a regression branch using the proposed spherical exponential acc-
tivation Sexp maps O to a structured output |P | = [|p0|, ..., |pn|].
A classiﬁcation branch is also used to learn the sign labels of P .
Prediction is made by P = sign(P ) · |P |.

1, p2

= −sign(pi)|yi| and only relate to P . We could
2 ...} as probabilities
i , in which
. We

are ∂L∂pi
also treat the individual outputs {p2
with a cross-entropy loss on continuous labels y2
case we would have that H(Y 2, P 2) = Pi y2

conclude that the Spherical Regression using the spherical
exponential mapping allows for constrained parameter up-
dates and, thus, we expect it to lead to stable training and
convergence. We verify this experimentally on three differ-
ent applications and datasets.

i log 1
p2
i

3.2. Specializing to S1, S2 and S3

Next, we show how to specialize the general n-sphere
formulation for different regression applications that reside
on speciﬁc n-spheres.
S1 case: Euler angles estimation. Euler angles are used
to describe the orientation of a rigid body with respect to a
ﬁxed coordinate system. They are deﬁned by 3 angles, de-
scribing 3 consecutive rotations around ﬁxed axes. Specif-
ically, each of the angles φ ∈ [0, 2π] can be represented
by a point on a unit circle with 2D coordinate [cosφ, sinφ],
see Fig. 1. Since cos2φ + sin2φ = 1, estimating these
coordinates is an S1 sphere problem. Consequently, our
prediction head has two components: i) a regression branch
with spherical exponential activations for absolute values
|P| = [|cosφ|,|sinφ|] and, ii) a classiﬁcation branch to
learn all possible sign combinations between sign(cosφ)
and sign(sinφ), that is a 4-class classiﬁcation problem:
sign(P ) ∈ {(+, +), (+,−), (−, +), (−,−)}. We could
also predict the signs independently and have fewer possi-
ble outputs, however, this would deprive the classiﬁer from
the opportunity to learn possible correlations.

During training time, we jointly minimize the regres-
sion loss (cosine proximity) and the sign classiﬁcation loss

For L2 loss: L = ||P − Y ||2
2
2 − 2h|P |, |Y |i.

= ||P ||2
2

+ ||Y ||2

2 − 2h|P |, |Y |i =

9762

(cross-entropy). For the inference, we do the ﬁnal predic-
tion by merging the absolute values and sign labels together:

(cosφ = sign(cosφ) · |cosφ|
sinφ = sign(sinφ) · |sinφ|

(10)

Beyond Euler angles, other 2D rotations can be learned in
the same fashion.
S2 case: Surface normal estimation. A surface normal is
the direction that is perpendicular to the tangent plane of the
point on the surface of objects in a 3D scene, see Fig. 1.(b).
It can be represented by a unit 3D vector v = [Nx, Ny, Nz]
for which N 2
z = 1. Thus, a surface normal
lies on the surface of a unit 3D ball, i.e. an S2 sphere. Sur-
face normal estimation from RGB images makes pixel-wise
predictions of surface normals of the input scene.

y + N 2

x + N 2

It is worth noticing that all surface normals computed by
a 2D image should always be pointing outwards from the
image plane, that is Nz < 0, since only these surfaces are
visible to the camera. This halves the prediction space to
a semi-sphere of S2. Again, when designing the spherical
regressor for surface normals, we have a regression branch
to learn the absolute normal values [|Nx|,|Ny|,|Nz|] and a
classiﬁcation branch for learning all combinations of signs
for Nx and Ny. The total number of possible sign classes
is 4, similar to Euler angle estimation. The training and
inference is similar to Euler angles as well. Other S2 prob-
lems include learning the direction of motion in 2D/3D ﬂow
ﬁelds, geographical locations on the Earth sphere and so on.
S3 case: 3D rotation estimation. Rotational transforma-
tions are relevant in many computer vision tasks, for exam-
ple, orientation estimation, generalized viewpoint and pose
estimation beyond Euler angles or camera relocation. Rota-
tional transformations can be expressed as orthogonal ma-
trices of size n with determinant +1 (rotation matrices). We
can think of the set of all possible rotation matrices to form
a group that acts as an operator on vectors. This group is
better known as the special orthogonal Lie group SO(n)
[14]. Speciﬁcally, the SO(2) represents the set of all 2D
rotation transformations, whereas SO(3) represents the set
of all possible 3D rotations.
We have already shown that 2D rotations can be mapped

to a regression on an S1 sphere, thus the set SO(2) of all
2D rotations is topologically equivalent to the S1 sphere.
Interestingly, the topology of 3D rotations is not as straight-
forward [14], namely there is no n-sphere that is equivalent
to SO(3).
Instead, as shown in Fig. 1.(c) a 3D rotation
SO(3) can be thought of as ﬁrst choosing a rotation axis v
and then rotating by an angle θ. This approach leads to the
well known S3 representation of quaternions [15], which is
the closest equivalent to the 3D rotation [31].

A unit quaternion is equal to q = a + bi + cj + dk, where
a2 + b2 + c2 + d2 = 1. As q and −q give the same rotation,

Z

Y

In-plane rotation

X

elevation

(a) S1: Viewpoint (Pascal3D+)

h
t
u

zim

a

RGB Image

Surface Normal Image

(b) S2: Surface Normal (NYU v2)

(c) S3: 3D rotations (ModelNet10-SO3)

Figure 3. We assess spherical regression on 3 computer vision
tasks. (a) S1: Viewpoint estimation on Pascal3D+ [38], which
needs to predict 3 Euler angles: azimuth, elevation and in-plane
(b) S2: Surface normal estimation on NYU v2 [32],
rotation.
where pixel-wised dense surface normal prediction is required. (c)
S3: 3D rotation on our newly proposed ModelNet10-SO3, where
given one rendered view of a CAD model, we predict the underly-
ing 3D rotation that aligns it back to standard pose.

we restrict ourselves to a > 0, which again halves the out-
put space. We, therefore, need to predict the signs of only 3

imaginary components {b, c, d} to a total of 8 (23) classes.
The design of the prediction heads and the loss functions are
similar to the case of surface normal prediction on S2, only
now having 8 sign classes. Given the axis-angle representa-
tion (θ, v) of SO(3), we can, therefore, rewrite a quaternion
into q = (cos θ
2 v). Constraining a > 0 is equivalent
to restricting the rotation angle θ ∈ [0, π]. Furthermore,
predicting the 8 sign categories is equivalent to predicting
to which of the 8 quadrants of the 3D rotation space the v
belongs.

2 , sin θ

4. Related work

Viewpoint Estimation.
In general, viewpoint estimation
focuses on recovering the 3 Euler angles, namely, azimuth,
elevation and in-plane rotation (see Fig. 3-(a)). Tulsiani

9763

and Malik [35] discretize continuous Euler angles into mul-
tiple bins and convert viewpoint estimation into a classiﬁ-
cation problem. Su et al. [33] propose a ﬁner-grained dis-
cretization that divides the Euler angles into 360 bins. How-
ever, training for all possible outputs requires an enormous
amount of examples that can only be addressed by synthetic
renderings.

Albeit more natural, regression-based viewpoint esti-
mation is less popular. Because of the periodical nature
of angles, most approaches do not regress directly on the
linear space of angles, a, e, t ∈ [−π, π]. The reason is
that ignoring the angle periodicity leads to bad modeling,
as the 1◦ and 359◦ angles are assumed to be the furthest
apart. Instead, trigonometric representations are preferred,
with [2, 28, 29] proposing to represent angles by [cosφ,
sinφ]. They then learn a regression function h : x 7→
[cosφ, sinφ], without, however, enforcing the vectors to lie
on S1. In comparison to viewpoint classiﬁcation, regres-
sion gives continuous and ﬁne-grained angles. In practice,
however, training regression for viewpoint estimation is not
as easy. Complex loss functions are typically crafted, e.g.,
smooth L1 loss [24], without reaching the accuracy levels
of classiﬁcation-based alternatives.

In this paper, we continue the line of work on regression
based viewpoint estimation. Built upon the S1 representa-
tions [cosφ, sinφ] of Euler angles [2, 28, 29], we assess our
spherical regression for viewpoint prediction.

Surface Normal Estimation. Surface normal estimation is
typically viewed as a 2.5D representation problem, one that
carries information for the geometry of the scene, includ-
ing layout, shape and even depth. The surface normal is a
3-dim vector that points outside the tangent plane of the sur-
face. In the surface normal estimation task, given an image
of a scene, a pixel-wise prediction of the surface normal is
required [1, 8, 11, 21, 30, 32, 36, 39] (see Fig. 3-(b)).

Fouhey et al. [11] infer the surface normal by discover-
ing discriminative and geometrically 3D primitives from 2D
images. Building on contextual and segment-based cues,
Ladicky et al. [21] build their surface normal regressor from
local image features. They both use hand crafted features.
Eigen and Fergus [8] propose a multi-scale CNN architec-
ture adapted to predicting depth, surface normals and se-
mantic labels. While the network outputs are ℓ2 normal-
ized, the gradients are not constrained. Bansal et al. [1]
introduce a skip-network model optimized by the standard
sum of squared errors regression loss, without enforcing
any structure to the output. Zhang et al. [39] propose to
predict normals with deconvolution layers and rely on large
scale synthetic data for training. Similar to [8], they also en-
force an ℓ2 norm on the output but have unconstrained gra-
dients. Recently, Qi et al. [30] proposed two-stream CNNs
that jointly predict depth and surface normals from a single
image and also rely on the sum of squared errors loss for

training.

In our work we propose a spherical exponential mapping
for performing spherical regression. This new mapping can
be directly applied to any of the surface normal estimation
methods that rely on a regression loss on n-spheres and im-
prove their accuracy, as we show in the experiments.
3D Rotation Estimation. 3D Rotations are a component
of several tasks in computer vision and robotics, including
viewpoint and pose estimation or camera relocation. The
rotation matrix for 3D rotation is a 3 × 3 orthogonal ma-
trix (determinant= 1). Direct regression on the rotation
matrix via neural networks is difﬁcult, as the output lies in

the R9 (3 × 3) space. Moreover, regressing a rotation ma-

trix directly cannot guarantee its orthogonality. Recently,
Falorsi et al. [9] take a ﬁrst step toward regressing 3D rota-
tion matrices. Instead of predicting the 9 elements of rota-

tion matrix directly, they pose the 3D rotation as an S2× S2

representation problem reducing the number of elements to
regress on to a total of 6.

Viewpoint

[2, 5, 24, 24, 26, 33, 35] and pose [27, 28]
consider the relative 3D rotation between object and cam-
era. With 3 consecutive rotation angles, see Fig. 3 (a),
Euler Angles can uniquely recover the rotation matrix. As
such a decomposition is easy to be interpreted and able to
cover most of the viewpoint distribution, it has been widely
adopted. However, this approach leads to the gimbal lock
problem [16], where the degrees of freedom for the rota-
tions are reduced.

Mahendran et al. [22] studied an axis-angle representa-
tion for viewpoint estimation by ﬁrst choosing a rotation
axis and then rotating along it by an angle θ. To constrain
the angle θ ∈ [0, π) and the axis vi ∈ [−1, 1], they propose
a π · tanh non-linearity. Also, instead of a standard regres-
sion loss, e.g. cosine proximity or sum of squared errors
loss, they propose a geodesic loss which directly optimizes
the 3D rotations in SO(3). Do et al. [6] consider the Lie-
algebra SO(3) representation to learn the 3D rotation of the
6 DoF pose of an object. It is represented as [x, y, z] ∈ R3,
and can be mapped to a rotation matrix via the Rodrigues
rotation formula [3]. They conclude that an ℓ1 regression
loss yields better results.

Last, both Kendall et al. [19] and Mahendran et al. [22]
consider quaternion for camera re-localization and view-
point estimation. As quaternions allow for easy interpo-
lation and computations on the S3 sphere, they are also
widely used in graphics [4,31] and robotics [25]. Although
Do et al. [6] argue that quaternion is over-parameterized, we
see this as an advantage that gives us more freedom to learn
rotations directly on the n-sphere.

Despite the elegance and completeness of the aforemen-
tioned works, modelling 3D rotations is hard and methods
specialized for the task at hand, instead, typically reach bet-
ter accuracies. Unlike most of the aforementioned works,

9764

Table 1. S1: Viewpoint estimation with Euler angles. Compari-
son with state-of-the-art on Pascal3D+. Adding our S1
exp spherical
regression on top of the backbone network of [28] leads to best ac-
curacy. We report a class-wise comparison in supplementary.

Table 2. S2: Surface normal estimation Comparison with state-
of-the-art on NYU v2. Adding our S2
exp spherical regression on
top of the backbone network of Zhang et al. [39] leads to best
accuracy.

MedErr↓ Acc@ π
6 ↑
N/A
80.8
81.0
82.0
83.6
83.8
83.9
85.9

16.6
13.6
11.1
11.7
11.6
12.2
10.9
10.1

9.2

88.2

Mahendran et al. [22]
Tulsiani and Malik [35]
Mousavian et al. [26]
Su et al. [33]
Penedones et al. [28]†
Prokudin et al. [29]
Grabner et al. [13]
Mahendran et al. [23]

This paper: [28]†+ S1
† Based on our implementation.

exp

we learn to regress on the Euclidean space directly. Further-
more, we present a framework for regressing on n-spheres
with constrained gradients, leading to more stable training
and good accuracy, as we show experimentally.

5. Experiments

5.1. S1: Viewpoint estimation with Euler angles

Setup. First, we evaluate spherical regression on S1 view-
point estimation on Pascal3D+ [38]. Pascal3D+ contains 12
rigid object categories with bounding boxes and noisy rota-
tion matrix annotations, obtained after manually aligning
3D models to the 2D object in the image. We follow [23,
26, 29, 33, 35] and estimate the 3 Euler angles, namely the
azimuth, elevation and in-plane rotation, given the ground
truth object location. A viewpoint prediction is correct
when the geodesic distance ∆(Rgt, Rpr) = ||logRT
gtRpr||F
√2
between the predicted rotation matrix Rpr (constructed
from the predicted Euler angles) and the ground truth ro-
tation matrix Rgt is smaller than a threshold θ [35]. The
evaluation metric is the accuracy Acc@π/6 given threshold
θ = π/6. We use ResNet101 as our backbone architecture,
with a wider penultimate fully connected layer in the predic-
tion head that is shared by the regression branch and classi-
ﬁcation branch (see supplementary material for details). As
many of the annotations are concentrated around the x-axis,
we found that rotating all annotations by 45◦ during train-
ing (and rotating back at test time) leads to more balanced
distribution of annotations and better learning. For train-
ing data, we also use the synthetic data provided by [33],
without additional data augmentations like in [22, 23].

Results. We report comparisons with the state-of-the-art
in Table 1. Note that our spherical exponential mapping
can be easily used by any of the regression-based methods

Mean↓ Median↓ 11.25◦↑ 22.5◦↑ 30.0◦↑
44.1
55.9
65.5
73.9
76.1

14.0
24.0
35.2
38.6
39.4

37.7
35.5
28.8
22.3
21.7

34.1
25.5
17.9
15.3
14.8

32.7
45.6
57.1
64.0
66.3

19.7

12.5

45.8

72.1

80.6

Fouhey et al. [11] §
Ladicky et al. [21] §
Wang et al. [36] §
Eigen and Fergus [8]
Zhang et al. [39]

This paper: [39] + S2
§ Copied from [8].

exp

with S1 representation [cosφ, sinφ] [2, 28]. In this experi-
ment we combine it with Penedones et al. [28], who tried to
directly regress 2D representation [cosφ, sinφ] of angels,
obtaining a signiﬁcant improvement in accuracy over other
regression and classiﬁcation baselines. That said, during
experiments we observed that classiﬁcation-based methods
are more amenable to large data sets, most probably be-
cause of their increased number of parameters. As expected,
the continuous outputs by the spherical regression are bet-
ter suited for ﬁner and ﬁner evaluations , that is Acc@π/12
and Acc@π/24 (supplementary material). We conclude that
spherical regression is successful for viewpoint estimation
with Euler angles.

5.2. S2: Surface normal estimation

Setup. Next, we evaluate spherical regression for S2 sur-
face normal estimation on the NYU Depth v2 [32]. The
NYU Depth v2 dataset contains 1,449 video frames of in-
door scenes associated with Microsoft Kinect depth data.
We use the ground truth surface normals provided by [32].
We consider all valid pixels across the whole test set during
evaluation [39]. The evaluation metrics are the (Mean and
Median), as well as the accuracy based metric, namely the
percentage of correct predictions at given threshold 11 .24 ◦,
22 .5 ◦ and 30 ◦). We implement our S2
exp spherical regres-
sion based on the network proposed by Zhang et al. [39],
which is built on top of VGG-16 convolutional layers, and
a symmetric stack of deconvolution layers with skip con-
nections for decoding. As in viewpoint estimation, we also
rotate the ground truth around the z-axis by 45◦ to yield
better results. We follow the same training setup as [39],
that is we ﬁrst pre-train on the selected 568K synthetic data
provided by [39] for 8 epochs, and ﬁne-tune on NYU v2 for
60 epochs.
Results. We report results in Table 2. Replacing regu-
lar regression in [39] with spherical regression on S2 im-
proves the estimation of the surface normals considerably.
We found the improvement is attentuated by the fact that
for surface normal estimation we perform one regression

9765

Table 3. S3: 3D Rotation estimation with quaternions. Com-
parison on newly established ModelNet10-SO3. Adding our S3
exp
spherical regression on top of an AlexNet or VGG16 backbone
network leads to best accuracy.

AlexNet (Direct+smooth-L1)
AlexNet + Sf lat
AlexNet + S3
VGG16 (Direct+smooth-L1)
VGG16 + Sf lat
VGG16 + S3

exp

exp

MedErr↓ Acc@ π
32.5
53.5
65.4
46.7
63.5
70.9

46.1
33.3
25.3
36.8
25.9
20.3

12 ↑ Acc@ π
6 ↑ Acc@ π
24 ↑
2.5
11.2
13.9
34.1
24.4
48.5
13.4
29.4
48.7
29.5
38.4
58.9

per pixel location. As each one of these regressions could
return unstable gradients, bounding the total sum of losses
with spherical regression is beneﬁcial. Especially for the
ﬁner regression thresholds of 11.25◦, 22.5◦. We conclude
that spherical regression is successful also for surface nor-
mal estimation.

5.3. S3: 3D Rotation estimation with quaternions

Setup. Last, we evaluate S3
exp spherical regression on 3D
rotation estimation on S3 with quaternions. For this eval-
uation we introduce a new dataset, ModelNet10-SO3, com-
posed of images of 3D synthetic renderings. ModelNet10-
SO3 is based on ModelNet10 [37], which contains 4,899
instances from 10 categories of 3D CAD models.
In
ModelNet10 the purpose is the classiﬁcation of 3D shapes
to one of the permissible CAD object categories. With
ModelNet10-SO3 we have a different purpose, we want
to evaluate 3D shape alignment by predicting its 3D rota-
tion matrix w.r.t. the reference position from single image.
We construct ModelNet10-SO3 by uniformly sampling per
CAD model 100 3D rotations on SO(3) for the training set
and 4 3D rotations for the test set. We render each view
with white background, thus the foreground shows the ro-
tated rendering only. We show some examples in Fig. 3-(c).
Relying on Euler angles for ModelNet10-SO3 is not ad-
Instead,
vised because of the Gimbal lock problem [16].
alignment is possible only by predicting the quaternion rep-
resentation of the 3D rotation matrix. For this task, we test
the following 3 regression strategies:

(I) Direct regression with smooth-L1 loss. It may cause

the output to no longer follow unit ℓ2 norm.

(II) Regression with ℓ2 normalization Sf lat.
(III) Regression with Sexp (this paper).

We report results based on AlexNet and VGG16 as our
CNN backbones, with a class-speciﬁc prediction head. We
borrow the evaluation metric from viewpoint estimation,
namely MedErr and Acc@{π/6, π/12, π/24} so that we
also examine ﬁner-grained predictions.

Figure 4. Variance of the average gradient norm || ∂L
∂O ||. Spher-
ical exponentiation Sexp yields lower variance on mini-batch over
entire train progress.

Results. We report results in Table 3. First, both Sf lat
and S3
exp regression on quaternions improve over direct re-
gression baselines. This shows the importance of constrain-
ing the output space to be on sphere when regress spherical
target. Second, putting l2 normalization constraint on out-
put space, S3
exp improves over Sf lat with both AlexNet and
VGG16. For AlexNet we obtain about 8 − 12% improve-
ment across all metrics. VGG16 is higher overall, but the
improvement over the baseline is less. This shows that with
the VGG16 we are potentially getting closer to the maxi-
mum possible accuracy attainable for this hard task. That
can be explained by the fact that the shapes have no tex-
ture. Thus, a regular VGG16 is close to what can be en-
coded by a good RGB-based model. Note that estimating
the 3D rotation with a discretization and classiﬁcation ap-
proach [5, 24, 33, 35] would be impossible because of the
vastness of the output space on SO(3) manifold.

Further, we investigate the variance of the gradients ∂L∂O
by recording its average ℓ2 norm during training progress.
The results are shown in Fig. 4. We observe the gradi-
ent norm of the spherical exponential mapping has much
lower variance. Spherical exponentiation achieves this be-
havior naturally without interventions, unlike other tricks
(e.g. gradient clipping, gradient reparameterization) which
ﬁx the symptom (gradient instability/vanishing/exploding)
but not the root cause (unconstrained input signals). We
conclude that spherical regression is successful also for the
application of 3D rotation estimation.

6. Conclusion

Spherical regression is a general framework which can
be applied to any continuous output problem that lives in n-
spheres. It obtains regression gradients that are constrained
and well-behaving for several computer vision challenges.
In this work we have investigated three such applications,
speciﬁcally viewpoint estimation, surface normal estima-
tion and 3D rotation estimation. Generally, we observe
that spherical regression improves considerably the regres-
sion accuracy in all tasks and different datasets. We con-
clude that spherical regression is a good alternative for tasks
where continuous output prediction are needed.

9766

References

[1] Aayush Bansal, Bryan Russell, and Abhinav Gupta. Marr
revisited: 2d-3d alignment via surface normal prediction. In
CVPR, 2016.

[2] Lucas Beyer, Alexander Hermans, and Bastian Leibe.
Biternion nets: Continuous head pose regression from dis-
crete training labels. In GCVPR, 2015.

[3] R. W. Brockett. Robotic manipulators and the product of
exponentials formula. In Mathematical Theory of Networks
and Systems. 1984.

[4] Erik B Dam, Martin Koch, and Martin Lillholm. Quater-
interpolation and animation. Datalogisk Institut,

nions,
Københavns Universitet, 1998.

[5] Gilad Divon and Ayellet Tal. Viewpoint estimation—insights

& model. In ECCV, 2018.

[6] Thanh-Toan Do, Trung Pham, Ming Cai, and Ian Reid.
Real-time monocular object instance 6d pose estimation. In
BMVC, 2018.

[7] Maura Eduarda and David G Henderson. Experiencing ge-

ometry: On plane and sphere. Prentice Hall, 1996.

[8] David Eigen and Rob Fergus. Predicting depth, surface nor-
mals and semantic labels with a common multi-scale convo-
lutional architecture. In ICCV, 2015.

[9] Luca Falorsi, Pim de Haan, Tim R Davidson, Nicola De Cao,
Maurice Weiler, Patrick Forr´e, and Taco S Cohen. Explo-
rations in homeomorphic variational auto-encoding. arXiv
preprint arXiv:1807.04689, 2018.

[10] Harley Flanders. Differential Forms with Applications to the
Physical Sciences by Harley Flanders, volume 11. Elsevier,
1963.

[11] David F Fouhey, Abhinav Gupta, and Martial Hebert. Data-
In

driven 3d primitives for single image understanding.
ICCV, 2013.

[12] Jin Gao, Haibin Ling, Weiming Hu, and Junliang Xing.
Transfer learning based visual tracking with gaussian pro-
cesses regression. In ECCV, 2014.

[13] Alexander Grabner, Peter M Roth, and Vincent Lepetit. 3d
pose estimation and 3d model retrieval for objects in the
wild. In CVPR, 2018.

[14] David Gurarie. Symmetries and laplacians: Introduction to
harmonic analysis, group representations and applications.
Bull. Amer. Math. Soc, 29, 1993.

[15] William Rowan Hamilton. On quaternions; or on a new
system of imaginaries in algebra. The London, Edinburgh,
and Dublin Philosophical Magazine and Journal of Science,
1844.

[16] David Hoag. Apollo guidance and navigation: Considera-
tions of apollo imu gimbal lock. Cambridge: MIT Instru-
mentation Laboratory, 1963.

[17] Seunghoon Hong, Tackgeun You, Suha Kwak, and Bohyung
Han. Online tracking by learning discriminative saliency
map with convolutional neural network. In ICML, 2015.

[18] Zdenek Kalal, Krystian Mikolajczyk, and Jiri Matas.

Tracking-learning-detection. PAMI, 2010.

[19] Alex Kendall and Roberto Cipolla. Geometric loss functions
In CVPR,

for camera pose regression with deep learning.
2017.

[20] Lubor Ladicky, Jianbo Shi, and Marc Pollefeys. Pulling

things out of perspective. In CVPR, 2014.

[21] Lubor Ladicky, Bernhard Zeisl, and Marc Pollefeys. Dis-
In

criminatively trained dense surface normal estimation.
ECCV, 2014.

[22] Siddharth Mahendran, Haider Ali, and Ren´e Vidal. 3d pose
In ICCV,

regression using convolutional neural networks.
2017.

[23] Siddharth Mahendran, Haider Ali, and Rene Vidal. A mixed
classiﬁcation-regression framework for 3d pose estimation
from 2d images. In BMVC, 2018.

[24] Francisco Massa, Renaud Marlet, and Mathieu Aubry. Craft-
In BMVC,

ing a multi-task cnn for viewpoint estimation.
2016.

[25] J Michael McCarthy. Introduction to theoretical kinematics.

MIT press, 1990.

[26] Arsalan Mousavian, Dragomir Anguelov, John Flynn, and
Jana Koˇseck´a. 3d bounding box estimation using deep learn-
ing and geometry. In CVPR, 2017.

[27] Margarita Osadchy, Yann Le Cun, and Matthew L Miller.
Synergistic face detection and pose estimation with energy-
based models. Journal of Machine Learning Research, 2007.
[28] Hugo Penedones, Ronan Collobert, Francois Fleuret, and
David Grangier. Improving object classiﬁcation using pose
information. Technical report, Idiap, 2012.

[29] Sergey Prokudin, Peter Gehler, and Sebastian Nowozin.
Deep directional statistics: Pose estimation with uncertainty
quantiﬁcation. In ECCV, 2018.

[30] Xiaojuan Qi, Renjie Liao, Zhengzhe Liu, Raquel Urtasun,
and Jiaya Jia. Geonet: Geometric neural network for joint
depth and surface normal estimation. In CVPR, 2018.

[31] Ken Shoemake. Animating rotation with quaternion curves.

In SIGGRAPH, 1985.

[32] Nathan Silberman, Derek Hoiem, Pushmeet Kohli, and Rob
Indoor segmentation and support inference from

Fergus.
rgbd images. In ECCV, 2012.

[33] Hao Su, Charles R Qi, Yangyan Li, and Leonidas J Guibas.
Render for cnn: Viewpoint estimation in images using cnns
trained with rendered 3d model views. In ICCV, 2015.

[34] Ran Tao, Efstratios Gavves, and Arnold W M Smeulders.

Siamese instance search for tracking. In CVPR, 2016.

[35] Shubham Tulsiani and Jitendra Malik. Viewpoints and key-

points. In CVPR, 2015.

[36] Anran Wang, Jiwen Lu, Gang Wang, Jianfei Cai, and Tat-Jen
Cham. Multi-modal unsupervised feature learning for rgb-d
scene labeling. In ECCV, 2014.

[37] Zhirong Wu, Shuran Song, Aditya Khosla, Fisher Yu, Lin-
guang Zhang, Xiaoou Tang, and Jianxiong Xiao.
3d
shapenets: A deep representation for volumetric shapes. In
CVPR, 2015.

[38] Yu Xiang, Roozbeh Mottaghi, and Silvio Savarese. Beyond
pascal: A benchmark for 3d object detection in the wild. In
WACV, 2014.

[39] Yinda Zhang, Shuran Song, Ersin Yumer, Manolis Savva,
Joon-Young Lee, Hailin Jin, and Thomas Funkhouser.
Physically-based rendering for indoor scene understanding
using convolutional neural networks. In CVPR, 2017.

9767

