A Variational Auto-Encoder Model for Stochastic Point Processes

Nazanin Mehrasa1

,

3, Akash Abdu Jyothi1

,

3, Thibaut Durand1

,

3, Jiawei He1

,

3, Leonid Sigal2

,

3, Greg Mori1

3

,

1Simon Fraser University

2University of British Columbia

3Borealis AI

{nmehrasa, aabdujyo, tdurand, jha203}@sfu.ca

lsigal@cs.ubc.ca

mori@cs.sfu.ca

Abstract

We propose a novel probabilistic generative model for
action sequences. The model is termed the Action Point
Process VAE (APP-VAE), a variational auto-encoder that
can capture the distribution over the times and categories
of action sequences. Modeling the variety of possible action
sequences is a challenge, which we show can be addressed
via the APP-VAE’s use of latent representations and non-
linear functions to parameterize distributions over which
event is likely to occur next in a sequence and at what time.
We empirically validate the efﬁcacy of APP-VAE for model-
ing action sequences on the MultiTHUMOS and Breakfast
datasets.

1. Introduction

Anticipatory reasoning to model the evolution of action
sequences over time is a fundamental challenge in human
activity understanding. The crux of the problem in making
predictions about the future is the fact that for interesting
domains, the future is uncertain – given a history of actions
such as those depicted in Fig. 1, the distribution over future
actions has substantial entropy.

In this work, we propose a powerful generative approach
that can effectively model the categorical and temporal vari-
ability comprising action sequences. Much of the work in
this domain has focused on taking frame level data of video
as input in order to predict the actions or activities that may
occur in the immediate future. There has also been recent
interest on the task of predicting the sequence of actions that
occur farther into the future [6, 32, 1].

Time series data often involves regularly spaced data
points with interesting events occurring sparsely across
time. This is true in case of videos where we have a reg-
ular frame rate but events of interest are present only in
some frames that are infrequent. We hypothesize that in
order to model future events in such a scenario, it is bene-
ﬁcial to consider the history of sparse events (action cate-
gories and their temporal occurrence in the above example)
alone, instead of regularly spaced frame data. While the

Figure 1. It is difﬁcult to make predictions, especially about the fu-
ture. Given a history of past actions, multiple actions are possible
in the future. We focus on the problem of learning a distribution
over the future actions – what are the possible action categories
and when will they start.

history of frames contains rich information over and above
the sparse event history, we can possibly create a model for
future events occurring farther into the future by choosing
to only model the sparse sequence of events. This approach
also allows us to model high-level semantic meaning in the
time series data that can be difﬁcult to discern from low-
level data points that are regular across time.

Our model is formulated in the variational auto-encoder
(VAE) [15] paradigm, a powerful class of probabilistic
models that facilitate generation and the ability to model
complex distributions. We present a novel form of VAE
for action sequences under a point process approach. This
approach has a number of advantages, including a proba-
bilistic treatment of action sequences to allow for likelihood
evaluation, generation, and anomaly detection.

Contribution. The contributions of this work center
around the APP-VAE (Action Point Process VAE), a novel
generative model for asynchronous time action sequences.
The contributions of this paper include:

• A novel formulation for modeling point process data

within the variational auto-encoder paradigm.

• Conditional prior models for encoding asynchronous

time data.

3165

Figure 2. Given the history of actions, APP-VAE generates a distribution over possible actions in the next step. APP-VAE can recurrently
perform this operation to model diverse sequences of actions that may follow. The ﬁgure shows the distributions for the fourth action in a
basketball game given the history of ﬁrst three actions.

• A probabilistic model for jointly capturing uncertainty
in which actions will occur and when they will happen.

Wasserstein GAN in the context of temporal point process
for learning to generate sequences of action.

2. Related Work

Activity Prediction. Most activity prediction tasks are
frame-based, i.e. the input to the model is a sequence of
frames before the action starts and the task is predict what
will happen next. Lan et al. [18] predict future actions from
hierarchical representations of short clips by having differ-
ent classiﬁers at each level in a max-margin framework.
Mahmud et al. [20] jointly predicts future activity as well
as its starting time by a multi-streams framework. Each
streams tries to catch different features for having a richer
feature representation for future prediction: One stream for
visual information, one for previous activities and the last
one focusing on the last activity.

Farha et al. [1] proposed a framework for predicting the
action categories of a sequence of future activities as well
as their starting and ending time. They proposed two de-
terministic models, one using a combination of RNN and
HMM and the other one is a CNN predicting a matrix which
future actions are encoded in it.

Asynchronous Action Prediction. We focus on the task
of predicting future action given a sequence of previous
actions that are asynchronous in time. Du et al. [6] pro-
posed a recurrent temporal model for learning the next ac-
tivity timing and category given the history of previous ac-
tions. Their recurrent model learns a non-linear map of his-
tory to the intensity function of a temporal point process
framework. Zhong et al. [32] also introduced a hierarchi-
cal recurrent network model for future action prediction for
modeling future action timing and category. Their model
takes frame-level information as well as sparse high-level
events information in the history to learn the intensity func-
tion of a temporal point process. Xiao et al. [28] introduced
an intensity-free generative method for temporal point pro-
cess. The generative part of their model is an extension of

Early Stage Action Prediction. Our work is related to
early stage action prediction. This task refers to predicting
the action given the initial frames of the activity [19, 10, 25].
Our task is different from early action prediction, because
the model doesn’t have any information about the action
while predicting it. Recently Yu et al. [31] used variational
auto-encoder to learn from the frames in the history and
transfer them into the future. Sadegh Aliakbarian et al. [24]
combine context and action information using a multi-stage
LSTM model to predict future action. The model is trained
with a loss function which encourages the model to predict
action with few observations. Gao et al. [7] proposed to use
a Reinforced Encoder-Decoder network for future activity
prediction. Damen et al. [3] proposed a semi-supervised
variational recurrent neural network to model human activ-
ity including classiﬁcation, prediction, detection and antici-
pation of human activities.

Video Prediction. Video prediction has recently been
studied in several works. Denton and Fergus [5] use a vari-
ational auto-encoder framework with a learned prior to gen-
erate future video frames. He et al. [9] also proposed a gen-
erative model for future prediction. They structure the latent
space by adding control features which makes the model
able to control generation. Vondrick et al. [27] uses adver-
sarial learning for generating videos of future with trans-
forming the past pixels. Patraucean et al. [23] describe a
spatio-temporal auto-encoder that predicts optical ﬂow as
a dense map, using reconstruction in its learning criterion.
Villegas et al. [26] propose a hierarchical approach to pixel-
level video generation, reasoning over body pose before
rendering into a predicted future frame.

3. Asynchronous Action Sequence Modeling

We ﬁrst introduce some notations and the problem def-
inition. Then we review the VAE model and temporal

3166

G
N

I

N

I

A
R
T

N
O

I
T
A
R
E
N
E
G

Figure 3. Our proposed recurrent VAE model for asynchronous action sequence modeling. At each time step, the model uses the history
of actions and inter-arrival times to generate a distribution over latent codes, a sample of which is then decoded into two probability
distributions for the next action: one over possible action labels and one over the inter arrival time.

point process that are used in our model. Subsequently, we
present our model in detail and how it is trained.

Problem deﬁnition. The input is a sequence of actions
x1:n = (x1, . . . , xn) where xn is the n-th action. The ac-
tion xn = (an, τn) is represented by the action category
an ∈ {1, 2, . . . , K} (K discrete action classes) and the
inter-arrival time τn ∈ R+. The inter-arrival time is the
difference between the starting time of action xn−1 and xn.
We formulate the asynchronous action distribution model-
ing task as follows: given a sequence of actions x1:n−1, the
goal is to produce a distribution over what action an will
happen next, and the inter arrival time τn. We aim to de-
velop probabilistic models to capture the uncertainty over
these what and when questions of action sequence model-
ing.

3.1. Background: Base Models

Variational Auto-Encoders (VAEs). A VAE [15] de-
scribes a generative process with simple prior pθ(z) (usu-
ally chosen to be a multivariate Gaussian) and complex
likelihood pθ(x|z) (the parameters of which are produced
by neural networks). x and z are observed and latent vari-
ables, respectively. Approximating the intractable posterior
pθ(z|x) with a recognition neural network qφ(z|x), the pa-
rameters of the generative model θ as well as the recogni-
tion model φ can be jointly optimized by maximizing the
evidence lower bound L on the marginal likelihood pθ(x):

log pθ(x) = KL(qφkpθ) + L(θ, φ)

≥ L(θ, φ) = −Eqφ(cid:20)log

qφ(z|x)

pθ(z, x)(cid:21) .

(1)

lar design choice of such models is the integration of a per
time-step VAE with RNN/LSTM temporal modelling. The
ELBO thus becomes a summation of time-step-wise varia-
tional lower bound1:

N

Xn=1hE

L(θ, φ, ψ) =

qφ(z1:n|x1:n) [log pθ(xn|x1:n−1, z1:n)]

− KL(qφ(zn|x1:n)||pψ(zn|x1:n−1))i.

(2)

with a “prior” pψ(zn|x1:n−1) that evolves over the N time
steps used.

Temporal point process. A temporal point process is a
stochastic model used to capture the inter-arrival times of
a series of events. A temporal point process is charac-
terized by the conditional intensity function λ(τn|x1:n−1),
which is conditioned on the past events x1:n−1 (e.g. action
in this work). The conditional intensity encodes instanta-
neous probabilities at time τ . Given the history of n − 1
past actions, the probability density function for the time of
the next action is:

f (τn|x1:n−1) = λ(τn|x1:n−1)e

−

τn
R
0

λ(u|x1:n−1) du

(3)

The Poisson process [16] is a popular temporal point pro-
cess, which assumes that events occur independent of one
another. The conditional intensity is λ(τn|x1:n−1) = λ
where λ is a positive constant. More complex conditional
intensities have been proposed like Hawkes Process [8] and
Self-Correcting Process [13]. All these conditional inten-
sity function seek to capture some forms of dependency on

Recent works expand VAEs to time-series data includ-
ing video [2, 5, 9], text [4, 12], or audio [30]. A popu-

1Note that variants exist, depending on the exact form of the recurrent

structure and its VAE instantiation.

3167

the past action. However, in practice the true model of the
dependencies is never known [21] and the performance de-
pend on the design of the conditional intensity. In this work,
we learn a recurrent model that estimates the conditional in-
tensity based on the history of actions.

3.2. Proposed Approach

We propose a generative model for asynchronous action
sequence modeling using the VAE framework. Figure 3
shows the architecture of our model. Overall, the input se-
quence of actions and inter arrival times are encoded using
a recurrent VAE model. At each step, the model uses the
history of actions to produce a distribution over latent codes
zn, a sample of which is then decoded into two probability
distributions: one over the possible action categories and
another over the inter-arrival time for the next action. We
now detail our model.

Model. At time step n during training, the model takes
as input the action xn, which is the target of the prediction
model, and the history of past actions x1:n−1. These inputs
are used to compute a conditional distribution qφ(zn|x1:n)
from which a latent code zn is sampled. Since the true
distribution over latent variables zn is intractable we rely
on a time-dependent inference network qφ(zn|x1:n) that
approximates it with a conditional Gaussian distribution
N (µφn , σ2
). To prevent zn from just copying xn, we force
φn
qφ(zn|x1:n) to be close to the prior distribution p(zn) us-
ing a KL-divergence term. Usually in VAE models, p(zn)
is a ﬁxed Gaussian N (0, I). But a drawback of using a
ﬁxed prior is that samples at each time step are drawn ran-
domly, and thus ignore temporal dependencies present be-
tween actions. To overcome this problem, a solution is to
learn a prior that varies across time, being a function of all
past actions except the current action pψ(zn+1|x1:n). Both
prior and approximate posterior are modelled as multivari-
ate Gaussian distributions with diagonal covariance with pa-
rameters as shown below:

qφ(zn|x1:n) = N (µφn , σ2

φn )
pψ(zn+1|x1:n) = N (µψn+1 , σ2

ψn+1 )

(4)

(5)

At step n, both posterior and prior networks observe actions
x1:n but the posterior network outputs the parameters of a
conditional Gaussian distribution for the current action xn
whereas the prior network outputs the parameters of a con-
ditional Gaussian distribution for the next action xn+1.

At each time-step during training, a latent variable zn
is drawn from the posterior distribution qφ(zn|x1:n). The
output action ˆxn is then sampled from the distribution
pθ(xn|zn) of our conditional generative model which is pa-
rameterized by θ. For mathematical convenience, we as-
sume the action category and inter-arrival time are condi-

tionally independent given the latent code zn:
θ (an|zn)pτ

pθ(xn|zn) = pθ(an, τn|zn) = pa

θ (τn|zn)

(6)

θ (an|zn) (resp. pτ

where pa
θ (τn|zn)) is the conditional gen-
erative model for action category (resp. inter-arrival time).
This is a standard assumption in event prediction [6, 32].
The sequence model generates two probability distribu-
tions: (i) a categorical distribution over the action categories
and (ii) a temporal point process distribution over the inter-
arrival times for the next action.

The distribution over action categories is modeled with
a multinomial distribution when an can only take a ﬁnite
number of values:

K

pa
θ (an = k|zn) = pk(zn)

and

pk(zn) = 1

(7)

Xk=1

where pk(zn) is the probability of occurrence of action k,
and K is the total number of action categories.

The inter-arrival time is assumed to follow an exponen-
tial distribution parameterized by λ(zn), similar to a stan-
dard temporal point process model:

pτ

θ (τn|zn) =(λ(zn)e−λ(zn)τn

0

if τn ≥ 0
if τn < 0

(8)

where pτ
θ (τn|zn) is a probability density function over ran-
dom variable τn and λ(zn) is the intensity of the process,
which depends on the latent variable sample zn.

Learning. We train the model by optimizing the varia-
tional lower bound over the entire sequence comprised of
N steps:

Lθ,φ(x1:N ) =

N

Xn=1

(Eqφ(zn|x1:n)[log pθ(xn|zn)]

(9)

− DKL(qφ(zn|x1:n)||pψ(zn|x1:n−1)))

Because the action category and inter-arrival time are con-
ditionally independent given the latent code zn, the log-
likelihood term can be written as follows:

(10)

θ (an|zn)] + Eqφ(zn|x1:n)[log pτ

Eqφ(zn|x1:n)[log pθ(xn|zn)] =
Eqφ(zn|x1:n)[log pa
Given the form of pa
θ the log-likelihood term reduces to a
cross entropy between the predicted action category dis-
tribution pa
n. Given
the ground truth inter-arrival time τ ∗
n, we compute its log-
likelihood over a small time interval ∆τ under the predicted
distribution.

θ (an|zn) and the ground truth label a∗

θ (τn|zn)]

log"Z τ ∗

τ ∗
n

n+∆τ
pτ

θ (τn|zn) dτn# = log(1 − e−λ(zn)∆τ ) (11)

− λ(zn)τ ∗
n

3168

We use the re-parameterization trick [15] to sample from
the encoder network qφ.

Generation. The goal is to generate the next action ˆxn =
(ˆan, ˆτn) given a sequence of past actions x1:n−1. The gen-
eration process is shown on the bottom of Figure 3. At test
time, an action at step n is generated by ﬁrst sampling zn
from the prior. The parameters of the prior distribution are
computed based on the past n − 1 actions x1:n−1. Then, an
action category ˆan and inter-arrival time ˆτn are generated as
follows:

The decoder network for action category f a

θ (zn) is a
multi-layer perceptron with a softmax output to generate the
probability distribution in Eq. 7:

pa
θ (an|zn) = f a

θ (zn)

(19)

The decoder network for inter-arrival time f τ
θ (zn) is an-
other multi-layer perceptron, producing the parameter for
the point process model for temporal distribution in Eq. 8:

λ(zn) = f τ

θ (zn)

(20)

ˆan ∼ pa

θ (an|zn)

ˆτn ∼ pτ

θ (τn|zn)

(12)

During training, the parameters of all the networks are
jointly learned in an end-to-end fashion.

Architecture. We now describe the architecture of our
model in detail. At step n, the current action xn is em-
bedded into a vector representation xemb
n with a two-step
embedding strategy. First, we compute a representation for
the action category (an) and the inter-arrival time (τn) sepa-
rately. Then, we concatenate these two representations and
compute a new representation xemb

of the action.

n

n =f emb
aemb
a
xemb
n = f emb

(an)

a,τ ([aemb

n

τ emb
n = f emb
, τ emb

])

τ

n

(τn)

(13)

(14)

We use a 1-hot encoding to represent the action category la-
bel an. Then, we have two branches: one to estimate the
parameters of the posterior distribution and another to esti-
mate the parameters of the prior distribution. The network
architecture of these two branches is similar but we use sep-
arate networks because the prior and the posterior distribu-
tion capture different information. Each branch has a Long
Short Term Memory (LSTM) [11] to encode the current ac-
tion and the past actions into a vector representation:

n = LST Mφ(xemb
hpost
= LST Mψ(xemb

hprior

n

n

n

, hpost
n−1)
, hprior
n−1 )

(15)

(16)

Recurrent networks turn variable length sequences into
meaningful, ﬁxed-sized representations. The output of the
posterior LSTM hpost
) is passed
into a posterior (also called inference) network f post
(resp.
prior network f prior
Gaussian distribution:

) that outputs the parameters of the

(resp. prior LSTM hprior

ψ

n

n

φ

µφn , σ2
µψn , σ2

φn = f post
ψn = f prior

ψ

φ

(hpost

)

n
(hprior

n

(17)

(18)

)

Then, a latent variable zn is sampled from the posterior (or
prior during testing) distribution and is fed to the decoder
networks for generating distributions over the action cate-
gory an and inter-arrival time τn.

4. Experiments

Datasets. We performed experiments using APP-VAE on
two action recognition datasets. We use the standard train-
ing and testing sets for each.
MultiTHUMOS Dataset [29] is a challenging dataset for ac-
tion recognition, containing 400 videos of 65 different ac-
tions. On average, there are 10.5 action class labels per
video and 1.5 actions per frame.
Breakfast Dataset [17] contains 1712 videos of breakfast
preparation for 48 action classes. The actions are performed
by 52 people in 18 different kitchens.

Architecture details. The APP-VAE model architecture
is shown in Fig. 3. Action category and inter-arrival time
inputs are each passed through 2 layer MLPs with ReLU
activation. They are then concatenated and followed with a
linear layer. Hidden state of prior and posterior LSTMs is
128. Both prior and posterior networks are 2 layer MLPs,
with ReLU activation after the ﬁrst layer. Dimension of the
latent code is 256. Action decoder is a 3 layer MLP with
ReLU at the ﬁrst two layers and softmax for the last one.
The time decoder is also a 3 layer MLP with ReLU at the
ﬁrst two layers, with an exponential non-linearity applied to
the output to ensure the parameter of the point process is
positive.

Implementation details. The models are implemented
with PyTorch [22] and are trained using the Adam [14] opti-
mizer for 1,500 epochs with batch size 32 and learning rate
0.001. We split the standard training set of both datasets
into training and validation sets containing 70% and 30%
of samples respectively. We select the best model during
training based on the model loss (Eq. 10) on the validation
set.

Baselines. We compare APP-VAE with the following
models for action prediction tasks.

3169

Dataset

Model

Stoch. Var.

LL

Breakfast

MultiTUHMOS

APP-LSTM
APP-VAE w/o Learned Prior
APP-VAE

APP-LSTM
APP-VAE w/o Learned Prior
APP-VAE

-
✓

✓

-
✓

✓

-6.668
≥-9.427
≥-5.944

-4.190
≥-5.344
≥-3.838

Table 1. Comparison of log-likelihood on Breakfast and MultiTHUMOS datasets.

• Time Deterministic LSTM (TD-LSTM). This is a
vanilla LSTM model that is trained to predict the next
action category and the inter-arrival time, comparable
with the model proposed by Farha et al. [1]. This
model directly predicts the inter-arrival time and not
the distribution over it. TD-LSTM uses the same en-
coder network as APP-VAE. We use cross-entropy loss
for action category output and perform regression over
inter-arrival time using mean squared error (MSE) loss
similar to [1].

• Action Point Process LSTM (APP-LSTM). This base-
line predicts the inter-arrival time distribution similar
to APP-VAE. The model uses the same reconstruction
loss function as in the VAE model – cross entropy
loss for action category and negative log-likelihood
(NLL) loss for inter-arrival time. APP-LSTM does not
have the stochastic latent code that allows APP-VAE
to model diverse distributions over action category and
inter-arrival time. Our APP-LSTM baseline encom-
passes Du et al. [6]’s work. The only difference is the
way we model the intensity function (IF). Du et al. [6]
deﬁnes IS explicitly as a function of time. This design
choice has been investigated in Zhong et al. [32]; an
implicit intensity function is shown to be superior and
thus adapted in our APP-LSTM baseline.

Metrics. We use log-likelihood (LL) to compare our
model with the APP-LSTM. We also report accuracy of ac-
tion category prediction and mean absolute error (MAE) of
inter-arrival time prediction. We calculate accuracy by com-
paring the most probable action category from the model
output with the ground truth category. To calculate MAE,
we use the expected inter-arrival time under the predicted
distribution pτ

θ (τn|zn):

E

θ (τn|zn)[τn] =
pτ

∞

Z0

τn · pτ

θ (τn|zn)dτn =

1

λ(zn)

(21)

The expected value
time are used to compute MAE.

1

λ(zn) and the ground truth inter-arrival

4.1. Experiment Results

We discuss quantitative and qualitative results from our
experiments. All quantitative experiments are performed
by teacher forcing methodology i.e. for each step in the se-
quence of actions, the models are fed the ground truth his-
tory of actions, and likelihood and/or other metrics for the
next action are measured.

Quantitative results. Table 1 shows experimental results
that compare APP-VAE with the APP-LSTM. To estimate
the log-likelihood (LL) of our model, we draw 1500 sam-
ples from the approximate posterior distribution, following
the standard approach of importance sampling. APP-VAE
outperforms the APP-LSTM on both MultiTHUMOS and
Breakfast datasets. We believe that this is because the APP-
VAE model is better in modeling the complex distribution
over future actions.

Table 2 shows accuracy and MAE in predicting the fu-
ture action given the history of previous actions. APP-
VAE outperforms TD-LSTM and APP-LSTM under both
the metrics. For each step in the sequence we draw 1500
samples from the prior distribution that models the next step
action. Given the output distributions, we select the action
category with the maximum probability as the predicted ac-
tion, and the expected value of inter-arrival time as the pre-
dicted inter-arrival time. Out of 1500 predictions, we select
the most frequent action as the model prediction for that
time step, and compute inter-arrival time by averaging over
the corresponding time values.

Table 1 and 2 also show the comparison of our model
with the case where the prior is ﬁxed in all of the time-steps.
In this experiment, we ﬁxed the prior to the standard normal
distribution N (0, I). We can see that the learned prior vari-
ant outperforms the ﬁxed prior variant consistently across
all datasets. The model with the ﬁxed prior does not per-
form well because it learns to predict the majority action
class and average inter-arrival time of the training set, ig-
noring the history of any input test sequence.

In addition to the above strategy of selecting the mode
action at each step, we also report action category accu-
racy and MAE obtained by averaging over predictions of
all 1500 samples. We summarize these results in Table 4.

3170

Figure 4. Examples of generated sequences. Given the history (shown at left), we generate a distribution over latent code zn for the
subsequent time step. A sample is drawn from this distribution, and decoded into distributions over action category and time, from which
a next action/time pair by selecting the action with the highest probability and computing the expectation of the generated distribution over
τ (Equation 21). This process is repeated to generate a sequence of actions. Two such sampled sequences (a) and (b) are shown for each
history, and compared to the respective ground truth sequence (in line with history row). We can see that APP-VAE is capable of generating
diverse and plausible action sequences.

Dataset

Model

Time Loss

stoch. var.

↑ accuracy

↓ MAE

Breakfast

MultiTUHMOS

TD-LSTM
APP-LSTM
APP-VAE w/o Learned Prior
APP-VAE

TD-LSTM
APP-LSTM
APP-VAE w/o Learned Prior
APP-VAE

MSE
NLL
NLL
NLL

MSE
NLL
NLL
NLL

-
-
✓

✓

-
-
✓

✓

53.64
61.39
27.09
62.20

29.74
36.31
8.79
39.30

173.76
152.17
270.75
142.65

2.33
1.99
2.02
1.89

Table 2. Accuracy of action category prediction and Mean Absolute Error (MAE) of inter-arrival time prediction of all model variants.
Arrows show whether lower (↓ ) or higher (↑ ) scores are better.

We next explore the architecture of our model by vary-
ing the sizes of the latent variable. Table 5 shows the log-
likelihood of our model for different sizes of the latent vari-
able. We see that as we increase the size of the latent
variable, we can model a more complex latent distribution
which results in better performance.

Qualitative Results. Fig. 4 shows examples of diverse fu-
ture action sequences that are generated by APP-VAE given
the history. For different provided histories, sampled se-

quences of actions are shown. We note that the overall du-
ration and sequence of actions on the Breakfast Dataset are
reasonable. Variations, e.g. taking the juice squeezer before
using it, adding salt and pepper before cooking eggs, are
plausible alternatives generated by our model.

Fig. 5 visualizes a traversal on one of the latent codes
for three different sequences by uniformly sampling one

z dimension over (cid:2)µ − 5σ, µ + 5σ(cid:3) while ﬁxing others

to their sampled values. As shown, this dimension corre-
lates closely with the action add saltnpepper, strifry egg

3171

Test sequences with high likelihood

1 NoHuman, CliffDiving, Diving, Jump, BodyRoll, CliffDiving, Diving, Jump, BodyRoll, CliffDiving, Diving, Jump,

BodyRoll, BodyContract, Run, CliffDiving, Diving, Jump, ..., BodyRoll, CliffDiving, Diving, BodyContract, CliffDiving,
Diving, CliffDiving, Diving, CliffDiving, Diving, Jump, CliffDiving, Diving, Walk, Run, Jump, Jump, Run, Jump

2 CleanAndJerk, PickUp, BodyContract, Squat, StandUp, BodyContract, Squat, CleanAndJerk, PickUp, StandUp,

BodyContract, Squat, CleanAndJerk, PickUp, StandUp, Drop, BodyContract, Squat, PickUp, ..., Squat, StandUp, Drop,
BodyContract, Squat, BodyContract, Squat, BodyContract, Squat, BodyContract, Squat, BodyContract, Squat, NoHuman

Test sequences with low likelihood

1 NoHuman, TalkToCamera, GolfSwing, GolfSwing, GolfSwing, GolfSwing, NoHuman

2 NoHuman, HammerThrow, TalkToCamera, CloseUpTalkToCamera, HammerThrow, HammerThrow, HammerThrow,
TalkToCamera, ..., HammerThrow, HammerThrow, HammerThrow, HammerThrow, HammerThrow, HammerThrow,
HammerThrow, HammerThrow, HammerThrow, HammerThrow, HammerThrow, HammerThrow, HammerThrow

Table 3. Example of test sequences with high and low likelihood according to our learned model

Latent size

32

64

128

256

512

LL (≥)

-4.486

-3.947

-3.940

-3.838

-4.098

Table 5. Log-likelihood for APP-VAE with different latent variable
dimensionality on MultiTHUMOS.

MultiTHUMOS dataset. We note that a regular, structured
sequence of actions such as jump, body roll, cliff diving for
a diving action or body contract, squat, clean and jerk for a
weightlifting action receives high likelihood. However, re-
peated hammer throws or golf swings with no set up actions
receives a low likelihood.

Finally we compare asynchronous APP-LSTM with a
synchronous variant (with constant frame rate) on Breakfast
dataset. The synchronous model predicts actions one step at
a time and the sequence is post-processed to infer the dura-
tion of each action. The performance is signiﬁcantly worse
for both MAE time (152.17 vs 1459.99) and action predic-
tion accuracy (61.39% vs 28.24%). A plausible explanation
is that LSTMs cannot deal with very long-term dependen-
cies.

5. Conclusion

We presented a novel probabilistic model for point pro-
cess data – a variational auto-encoder that captures uncer-
tainty in action times and category labels. As a generative
model, it can produce action sequences by sampling from
a prior distribution, the parameters of which are updated
based on neural networks that control the distributions over
the next action type and its temporal occurrence. The model
can also be used to analyze given input sequences of ac-
tions to determine the likelihood of observing particular se-
quences. We demonstrate empirically that the model is ef-
fective for capturing the uncertainty inherent in tasks such
as action prediction and anomaly detection.

3172

future action for

Figure 5. Latent Code Manipulation. The history + ground-
truth label of
(a)
“SIL, crack egg”→“add saltnpepper”,
take plate,
crack egg”→ “add saltnpepper”
pour oil,
and
crack egg”→“add saltnpepper”.

(b) “SIL,
(c)

the sub-ﬁgures are:

“SIL,

Dataset

Breakfast

Model

Acc

MAE

APP-VAE - avg
APP-VAE - mode

59.02
62.20

35.23
39.30

145.95
142.65

1.96
1.89

MultiTUHMOS APP-VAE - avg

APP-VAE - mode

Table 4. Accuracy (Acc) and Mean Absolute Error (MAE) under
mode and averaging over samples.

and fry egg.

We further qualitatively examine the ability of the model
to score the likelihood of individual test samples. We sort
the test action sequences according to the average per time-
step likelihood estimated by drawing 1500 samples from
the approximate posterior distribution following the impor-
tance sampling approach. High scoring sequences should
be those that our model deems as “normal” while low scor-
ing sequences those that are unusual. Tab. 3 shows some
example of sequences with low and high likelihood on the

References

[1] Yazan Abu Farha, Alexander Richard, and Juergen Gall.
When Will You Do What? - Anticipating Temporal Occur-
rences of Activities. In IEEE Conference on Computer Vision
and Pattern Recognition (CVPR), 2018. 1, 2, 6

[2] Mohammad Babaeizadeh, Chelsea Finn, Dumitru Erhan,
Roy H. Campbell, and Sergey Levine. Stochastic Variational
Video Prediction. In International Conference on Learning
Representations (ICLR), 2018. 3

[3] Judith B¨utepage, Hedvig Kjellstr¨om, and Danica Kragic.
Classify, predict, detect, anticipate and synthesize: Hierar-
chical recurrent latent variable models for human activity
modeling. arXiv preprint arXiv:1809.08875, 2018. 2

[4] Junyoung Chung, Kyle Kastner, Laurent Dinh, Kratarth
Goel, Aaron C Courville, and Yoshua Bengio. A recurrent
latent variable model for sequential data. In Advances in neu-
ral information processing systems, pages 2980–2988, 2015.
3

[5] Emily Denton and Rob Fergus. Stochastic Video Genera-
In International Conference on

tion with a Learned Prior.
Machine Learning (ICML), 2018. 2, 3

[6] Nan Du, Hanjun Dai, Rakshit Trivedi, Utkarsh Upadhyay,
Manuel Gomez-Rodriguez, and Le Song. Recurrent marked
temporal point processes: Embedding event history to vector.
In ACM SIGKDD International Conference on Knowledge
Discovery and Data Mining, 2016. 1, 2, 4, 6

[7] Jiyang Gao, Zhenheng Yang, and Ram Nevatia. RED: re-
inforced encoder-decoder networks for action anticipation.
CoRR, abs/1707.04818, 2017. 2

[8] Alan G Hawkes. Spectra of some self-exciting and mutually

exciting point processes. Biometrika, 1971. 3

[9] Jiawei He, Andreas Lehrmann, Joseph Marino, Greg Mori,
and Leonid Sigal. Probabilistic video generation using holis-
tic attribute control. In The European Conference on Com-
puter Vision (ECCV), September 2018. 2, 3

[10] M. Hoai and F. De la Torre. Max-margin early event detec-
tors. In IEEE Conference on Computer Vision and Pattern
Recognition (CVPR), 2012. 2

[11] Sepp Hochreiter and J¨urgen Schmidhuber. Long short-term

memory. Neural Comput., 1997. 5

[12] Zhiting Hu, Zichao Yang, Xiaodan Liang, Ruslan Salakhut-
dinov, and Eric P Xing. Toward controlled generation of text.
In International Conference on Machine Learning, pages
1587–1596, 2017. 3

[13] Valerie Isham and Mark Westcott. A self-correcting point
process. Stochastic Processes and their Applications, 1979.
3

[14] Diederick P Kingma and Jimmy Ba. Adam: A method
for stochastic optimization. In International Conference on
Learning Representations (ICLR), 2015. 5

[15] Diederik P Kingma and Max Welling. Auto-Encoding Varia-
tional Bayes. In International Conference on Learning Rep-
resentations (ICLR), 2014. 1, 3, 5

[16] J. F. C. Kingman. Poisson processes. 1993. 3
[17] Hilde Kuehne, Ali Arslan, and Thomas Serre. The Language
of Actions: Recovering the Syntax and Semantics of Goal-

Directed Human Activities.
puter Vision and Pattern Recognition (CVPR), 2014. 5

In IEEE Conference on Com-

[18] Tian Lan, Tsung-Chuan Chen, and Silvio Savarese. A hier-
archical representation for future action prediction. In Euro-
pean Conference on Computer Vision (ECCV), 2014. 2

[19] S. Ma, L. Sigal, and S. Sclaroff. Learning activity progres-
In

sion in lstms for activity detection and early detection.
cvpr, 2016. 2

[20] Tahmida Mahmud, Mahmudul Hasan, and Amit K. Roy-
Chowdhury. Joint prediction of activity labels and starting
times in untrimmed videos. In IEEE International Confer-
ence on Computer Vision (ICCV), 2017. 2

[21] Hongyuan Mei and Jason Eisner. The Neural Hawkes Pro-
cess: A Neurally Self-Modulating Multivariate Point Pro-
cess. In Advances in Neural Information Processing Systems
(NIPS), 2017. 4

[22] Adam Paszke, Sam Gross, Soumith Chintala, Gregory
Chanan, Edward Yang, Zachary DeVito, Zeming Lin, Alban
Desmaison, Luca Antiga, and Adam Lerer. Automatic dif-
ferentiation in pytorch. In Advances in Neural Information
Processing Systems (NIPS), 2017. 5

[23] Viorica P˘atr˘aucean, Ankur Handa, and Roberto Cipolla.
Spatio-temporal video autoencoder with differentiable mem-
ory.
In International Conference on Learning Representa-
tions (ICLR) Workshop, 2016. 2

[24] Mohammad Sadegh Aliakbarian, Fatemeh Sadat Saleh,
Mathieu Salzmann, Basura Fernando, Lars Petersson, and
Lars Andersson. Encouraging LSTMs to Anticipate Actions
Very Early. In IEEE International Conference on Computer
Vision (ICCV), 2017. 2

[25] Yuge Shi, Basura Fernando, and Richard Hartley. Action an-
ticipation with rbf kernelized feature mapping rnn. In The
European Conference on Computer Vision (ECCV), Septem-
ber 2018. 2

[26] Ruben Villegas, Jimei Yang, Yuliang Zou, Sungryull Sohn,
Xunyu Lin, and Honglak Lee. Learning to Generate Long-
term Future via Hierarchical Prediction.
In International
Conference on Machine Learning (ICML), 2017. 2

[27] Carl Vondrick and Antonio Torralba. Generating the fu-
ture with adversarial transformers. In The IEEE Conference
on Computer Vision and Pattern Recognition (CVPR), July
2017. 2

[28] Shuai Xiao, Mehrdad Farajtabar, Xiaojing Ye, Junchi Yan,
Le Song, and Hongyuan Zha. Wasserstein learning of deep
generative point process models. In Advances in Neural In-
formation Processing Systems (NIPS), 2017. 2

[29] Serena Yeung, Olga Russakovsky, Ning Jin, Mykhaylo An-
driluka, Greg Mori, and Li Fei-Fei. Every Moment Counts:
Dense Detailed Labeling of Actions in Complex Videos. In-
ternational Journal of Computer Vision (IJCV), 2017. 5

[30] Li Yingzhen and Stephan Mandt. Disentangled sequen-
In International Conference on Machine

tial autoencoder.
Learning, 2018. 3

[31] Runsheng Yu, Zhenyu Shi, and Laiyun Qing. Unsuper-
vised learning aids prediction: Using future representation
learning variantial autoencoder for human action prediction.
CoRR, abs/1711.09265, 2017. 2

3173

[32] Y. Zhong, B. Xu, G.-T. Zhou, L. Bornn, and G. Mori.
Time Perception Machine: Temporal Point Processes for the
When, Where and What of Activity Prediction. ArXiv e-
prints, Aug. 2018. 1, 2, 4, 6

3174

