Look Back and Predict Forward in Image Captioning

Yu Qin1,2, Jiajun Du1, Yonghua Zhang2, Hongtao Lu1 ∗

1 Key Lab of Shanghai Education Commission for Intelligent Interaction and Cognitive Engineering,

MoE Key Lab of Artiﬁcial Intelligence, AI Institute, Shanghai Jiao Tong University, China

Department of Computer Science and Engineering,

2AI-Lab Visual Search Team, Bytedance

{qinyu123,dujiajun,htlu}@sjtu.edu.cn, {mpeg21}@hotmail.com

Abstract

Most existing attention-based methods on image cap-
tioning focus on the current word and visual information
in one time step and generate the next word, without con-
sidering the visual and linguistic coherence. We propose
Look Back (LB) method to embed visual information from
the past and Predict Forward (PF) approach to look into
future. LB method introduces attention value from the pre-
vious time step into the current attention generation to suit
visual coherence of human. PF model predicts the next two
words in one time step and jointly employs their probabil-
ities for inference. Then the two approaches are combined
together as LBPF to further integrate visual information
from the past and linguistic information in the future to im-
prove image captioning performance. All the three methods
are applied on a classic base decoder, and show remarkable
improvements on MSCOCO dataset with small increments
on parameter counts. Our LBPF model achieves BLEU-4
/ CIDEr / SPICE scores of 37.4 / 116.4 / 21.2 with cross-
entropy loss and 38.3 / 127.6 / 22.0 with CIDEr optimiza-
tion. Our three proposed methods can be easily applied
on most attention-based encoder-decoder models for image
captioning.

1. Introduction

Image caption generation is to generate a sentence to de-
scribe an image in natural language from its visual contents
and has attracted increasing attention in computer vision
ﬁeld. This task combines image understanding and natural
language processing methods to predict an informative and
ﬂuent caption. The generated texts can do great help for
people with visual impairment and image searching prob-
lems. Caption generation is a challenging task. First, the
image needs to be well understood and the primary infor-

∗Corresponding author.

Figure 1. An overview of our proposed Look Back and Predict For-
ward (LBPF) method. The same color of LSTM2 and Att indicates
they share the same parameters. Et denotes the word embedding
of yt. The Att layer takes both hidden state h and previous atten-
tion result attt−1 as input to predict the current attention value,
which shows the look-back part. The network predicts y′
t+1 and
y′
t+2 at the same timestep, and shares the Att and LSTM2 param-
eters, which shows the predict-forward part.

mation should be extracted as features for text generation.
Second, a language model should be employed to identify
concrete information from the extracted features and gen-
erate descriptive texts. In the past few years, many neural
encoder-decoder models [27, 25, 28] have been proposed to
solve this problem, where encoder extracts semantic em-
beddings from the image based on Convolutional Neural
Network (CNNs) and decoder predicts the texts using Re-
current Neural Networks (RNNs).

Attention mechanism is ﬁrst introduced into this task

8367

in [29] and shows extraordinary advantage on all the ob-
jective metrics like BLEU [22], CIDEr [26] and SPICE [1].
Attention module takes a look at semantic embeddings from
the encoder, and focuses on the crucial information related
to the current expression. At each time step, the atten-
tion module calculates a relevance weight according to the
given word which contributes to the current word genera-
tion. Soft attention [5] method employs the weighted av-
erage of all the feature vectors as attention result, while
hard attention [4] method performs a sampling on the rel-
evance weights. Although attention module in the decoder
can provide precise and effective visual information for the
text generation, the attention methods simply take the cur-
rent word state ht as input and calculate the attention result
for only one output state ht+1. This kind of attention ig-
nores the visual relevance between adjacent words, e.g. “a
blue bike” actually expresses one object with three words.

As far as we know, all existing works on image caption-

ing generate word one by one and the predicted word y′
t+1
is highly dependent on yt. During the training phase, they
take ground-truth yt as the input of the language model to
predict the word y′
t+1. However, in the inference phase,
the input y′
t can only be sampled from the last time step,
which can easily bring in accumulated error in ﬁnal gen-
erated texts. Previous work like [9] proposes to increase
the correlation between ht−1 and ht by coupling with an
auto-reconstructor network (ARnet). This reduces the dif-
ference between ht−1 and ht, and can embed more infor-
mation from the previous state. However, the regularization
method using Euclidean distance may directly reduce the L-
2 norm for each hidden state, and show little intuitionistic
improvement.

In order to solve the problems mentioned above, we pro-
pose Look Back and Predict Forward method (LBPF) to uti-
lize the visual information and language modeling ability.
As illustrated in Figure 1, our LBPF method introduces two
main designs denoted as Look-Back (LB) part and Predict-
Forward (PF) part. The LB part concatenates the previous
attention vector and the current hidden state ht as the in-
put of the attention module. It helps to embed visual infor-
mation of the previous steps and suits human visual habit.
PF part differs from traditional methods and serially pre-
dicts ht+1 and ht+2 according to ht within the same time
step. We directly regard ht+1 as an embedding of y′
t+1 and
pass it through the same parameters for ht to predict ht+2.
This process generates two sequences denoted as seq1 and
seq2, where seq2 starts from the second word in the ﬁnal se-
quence. In the training phase, we separately optimize seq1
and seq2 according to the ground-truth.
In the inference
phase, we predict y′
t when t ≥ 2 with p1t + λp2t, and the
ﬁrst word y1 depends on p11 itself (p1 denotes the predicted
probability in seq1, and p2 denotes the probability in seq2).

We evaluate our proposed LB, PF and LBPF methods on

MSCOCO Karpathy test split with both cross-entropy loss
and CIDEr optimization. To verify the effectiveness of our
methods, we employ Up-Down model [2] as the base de-
coder, and respectively implement LB, PF and LBPF model.
With the detected feature pre-trained on Visual Genome
dataset, all the three models show remarkable improvement
over the base model, and the best LBPF model achieves
BLEU-4 / METEOR / ROUGE-L / CIDEr / SPICE scores of
37.4 / 28.1 / 57.5 / 116.4 / 21.2 with cross-entropy loss and
38.3 / 28.5 / 58.4 / 127.6 / 22.0 with CIDEr optimization.

2. Related Work

A large number of methods have been proposed based
on encoder-decoder frameworks [19, 14, 13] for image cap-
tioning. Oriol Vinyals et al. [27] proposed show and tell net-
work, where the image was encoded into a feature vector by
a pre-trained CNN and used as the ﬁrst word embedding in-
put for the language LSTM. Junhua Mao et al. [21] concate-
nated the image feature vector with each word embedding in
order to maintain the visual information for later-generated
words. Lisa Anne Hendricks et al. [3] separated visusal in-
formation from language LSTM and only employed it be-
fore the logit layer. Kelvin Xu et al. [29] ﬁrst introduced
attention mechanism into caption generation tasks and also
ﬁrst initialized the hidden state of language LSTM with vi-
sual feature vector. Attention module has been proved to
have huge improvements on image caption generation and
thus applied to almost all recent methods [30, 8, 32, 11].

Attention-based methods for image captioning usually
extract features with pre-trained CNN models on extra
datasets. Famous image datasets like ImageNet [10] have
a large number of images with labels for various common
objects. Channel-wise features from pre-trained CNN mod-
els like VGG [24] and ResNet [12] show great representa-
tional capacity in object and scene identiﬁcation. As newly
released Visual Genome [15] dataset came out, detection-
based encoder employed Fast R-CNN network to extract
more explicit features for images. Peter Anderson et al. [2]
pre-trained Fast R-CNN on Visual Genome dataset, and
gathered the detected region vectors with high conﬁdence
coefﬁcients as ﬁnal features, which showed remarkable ad-
vantage over CNN pre-trained features. All these efforts
focus on embedding more information on the encoded fea-
tures, while ignoring the relevance of visual attention. Our
proposed method instead considers the inﬂuence of the pre-
vious attention vector to the present one.

Besides attention mechanisms, the solution to accumu-
lated error also played an important role in image caption-
ing. Samy Bengio et al. [7] proposed scheduled sampling
for sequence prediction with RNNs, which partially uses
sampled y′
t to replace ground-truth yt in the training phase.
Beam search algorithm has been widely used in caption
generation, as it reduces accumulated error caused by max-

8368

Figure 2. Look Back attention module. We concatenate previous
attention result attt−1 and the current hidden state ht together and
feed it into Attention module to predict attt.

sampling. Krueger et al. [16] put forward zoneout to reg-
ularize RNN, where each hidden state and memory cells
chose to update their values or remain unchanged. Xinpeng
Chen et al. [9] introduced auto-reconstructor network (AR-
net) to regularize the transition between neighboring hid-
den states. However, all these methods are still stuck in the
word-by-word generation process and have not considered
predicting forward to decrease accumulated error caused by
max-sampling. We propose to predict forward in both train-
ing and inference phase, and actively employ future infor-
mation to adjust current selection.

3. Method

Like most existing methods, we employ encoder-decoder
framework for image captioning. Given an image I, we ﬁrst
generate the detection feature V = {v1, v2, · · · , vk}, vi ∈
RD with pre-trained encoder model, and take the mean
pooling vector ¯v as the global information. Then we ap-
ply our LBPF method in the decoder architecture. In this
paper, we employ classic Bottom-Up and Top-Down Atten-
tion model proposed by [2] as the base image captioning
model. We ﬁrst introduce Look-Back model in Sec 3.1 and
then describe Predict-Forward model in Sec.3.2. In Sec.3.3,
we explain how to combine these two models together as
LBPF.

3.1. Look Back Model

image

Given k spatial

=
{v1, · · · , vk} ∈ RD×k and current hidden state ht ∈ Rd,
conventional attention module employs
the attention
function fatt to calculate a weighted average vector attt as:

feature vectors V

attt = fatt(V, ht)

(1)

where each vi of V is a D-dimensional representation of
a detected region. In general, the calculated attt is directly
concatenated with ht to predict the next word y′
t+1. How-
ever, the attention region should have visual coherence and

attt can contribute to later time steps.

We thus propose Look Back method, which helps to take
the previous attended result into consideration. As illus-
trated in Figure.2, we bring in attt−1, which is the previous
attention result, and concatenate it with current hidden state
ht as the input of fatt. We denote ◦ as the concatenation
operation, and we get new attt as:

attt = fatt(V, ht ◦ attt−1)

(2)

We denote Ht = ht ◦ attt−1, and then employ Ht to dis-
tinguish the importance of different feature vectors vi and
the weights are calculated as follows:

ui,t = wu tanh(Wvuvi + WhuHt)
αt = sof tmax(ut)

(3)

(4)

where Wvu, Whu and wu are parameters in fatt, αt =
{α1,t, α2,t, · · · , αk,t} ∈ Rk is a k-dimensional vector
which sums to 1. The ﬁnal attention attt is generated by:

attt =

k

X

i=1

αi,tvi

(5)

It is worth mentioning that, we treat attt−1 as previous
attended regions and employ it for current attention genera-
tion. In our Look Back model, we simply employ the value
of attt−1 and cut off the back propagation through it to the
previous time step. The attention module may become too
complicated and get hard to converge if all the gradients are
accumulated together.

3.2. Predict Forward Model

In most existing methods of sequence generation, the
current word embedding Et of yt is fed into the RNN-based
architecture, and the next word y′
t+1 is predicted at this time
In the inference phase, y′
t+1 depends heavily on y′
step.
t
and the probability of wrong sampling results in inevitable
accumulated error on sequence generation. We hereby pro-
pose Predict Forward method to predict y′
t+2 in
one time step to alleviate this problem.
As illustrated in Figure. 3, given h1

t from the attention
LSTM and visual features V , we get att1
t with Att module
and feed them together into LSTM2 (the language LSTM).
Here we denote attention function as fatt, the mathematical
operation of LSTM2 as F2 and concatenation operation as
◦, then h2

t can be calculated as:

t+1 and y′

t = fatt(V, h1
att1
t )
h2
t = F2(h1
t ◦ att1

t , h2

t−1)

(6)

(7)

where h2
step. Normally, h2

t−1 is the hidden state of LSTM2 from last time
t is fed into the logit layer and retrieve the

8369

In Figure.3, the dashed line connecting LSTM2 and h3
t
indicates that h3
t will not be passed to the next time step
and is simply used to generate y′
t is
stored both for h3
t+1 in next time step. We denote
the Predict Forward module as PF-LSTM unit for further
explaination.

t+2. On the contrary, h2

t and h2

1 , y1′

2 , · · · , y1′

3 , · · · , y2′

In training phase with cross-entropy loss, the PF-LSTM
unit is executed for T steps where T refers to the length
of ground-truth Y . This process will generate two pre-
dicted sequences: Y 1′
T , EOS} and
Y 2′
= {y2′
corre-
sponds to h2
t . The input of training phase
starts from Begin-of-Sentence (BOS), which is normally
zero vector, and the prediction sequence ends with End-
of-Sentence (EOS). h3
t and thus there is no
y2′
1 in Y 2′
when h2
t
educes EOS. Then we deﬁne the loss as:

= {y1′
T , EOS, EOS}, where Y 1′
for h3

. We also abandon the last EOS in Y 2′

2 , y2′
t and Y 2′

t depends on h2

loss1 = −

loss2 = −

1
T

T

X

t=1

1

T − 1

log(p2

t (yt|y1:t−1))

T

X

t=2

log(p3

t (yt|y1:t−2))

loss = loss1 + loss2

(12)

(13)

(14)

loss1 + loss2 treats Y 1′

and Y 2′

the model to predict accurate y′
advantage, we combine the predicted probability of y1′
y2′
t

t+1 and y′

together by:

equally, which prompts
t+2. To utilize this
t and

t = p2
p′

t + λp3

t−1

(15)

t , p3

where p2

t and p3

t is calculated from h2

t−1. During training process, both p2

t−1 is retrieved from
h3
t−1 and λ is a trade-off coefﬁcient to balance the impor-
tance of p2
t and
p3
t−1 approach to promote ground-truth yt+1, and we com-
bine them together to predict the next word. Beam search
method is employed in our inference phase, and beam-size
of 3 can basically guarantee the existence of optimal word
from both of the two probability distributions. This oper-
ation enables the prediction of y′
t+1 to not simply depend
on sampled y′
t, but can also directly look to the generation
result of the previous time step, which effectively reduces
the accumulated error by wrong sampling.

For completeness of comparison with state-of-the-art
work [2], we also apply our model with self-critical
(SC) optimization on CIDEr [23]. Conventional self-
critical learning on caption generation focuses on optimiz-
ing CIDEr score on the predicted sequence. The training
process is to minimize the negative expected reward:

Lr(θ) = −Ey1:T pθ [r(y1:T )]

(16)

Figure 3. Predict Forward module. With current hidden state
h1
t from the ﬁrst LSTM, we operate the word generation twice
with the same parameters in Attention module and the language
LSTM2. First we generate att1
t , and then we move forward
t by replacing h1
to predict h3
t and feed it through Att and
t is employed both as the hidden state to generate h3
LSTM2. h2
and as the hidden state for LSTM2 in next time step. h2
t and h3
are fed into two independent logit layers to predict y′
respectively.

t and h2
t with h2

t+1 and y′

t+2

t

t

probability p2
as logit1, and calculate p2
t :

t for y′

t+1, here we denote logit layer for pt+1

p2
t = sof tmax(logit1(h2

t ))

(8)

As the training proceeds, h2

t tends to embed more precise
information of word yt+1, because it can be mapped to yt+1
by a simple logit layer. This offers us enough support to re-
gard h2
t as a special embedding of yt+1, and it is reasonable
to predict the next word by employing history information
and h2
t .

As shown in Figure.3, in our proposed PF module, be-
sides being fed into the logit layer, h2
t further go through
Att and LSTM2 and predict h3
t . The same color indicates
that the Att module and LSTM2 are identical to which h1
t
goes through. The main difference from the original method
is that the hidden state of LSTM2 is updated into h2
t while
h2
t−1 is employed for h1
t is generated by the fol-
lowing:

t . Then h3

t = fatt(V, h2
att2
t )
h3
t = F2(h2
t ◦ att2

t , h2
t )

(9)

(10)

t is connected to another logit layer logit2 to predict

next, h3
the probability p3

t for y′

t+2 as:

p3
t = sof tmax(logit2(h3

t ))

(11)

where r(y1:T ) is the score function of the predicted se-
quence y1:T which is CIDEr in this paper and θ denotes

8370

the parameters of the network. Following the reinforcement
learning based method proposed in [23], the gradient can
be approximated as:

∇θLr(θ) ≈ −(r(ys

1:T ) − r(ym

1:T ))∇θ log pθ(ys

1:T )

(17)

1:T represents a sampled sequence and ym

where ys
1:T de-
notes the max-sampling sequence. The baseline is set to
be r(ym

1:T ) to reﬂect the current capacity of the network.

and Y 2′

In our PF model, we generate Y 1′

simultane-
ously, and self-critical sequence training (SCST) certainly
takes one sequence to be optimized. To apply our PF model
with SCST, we select Y 1′
to be trained with CIDEr score
optimization, and we force Y 2′
by append-
ing cross-entropy loss of Y 2′
as the ground-truth.
The cross-entropy loss Lc is calculated as:

to approach Y 1′

with Y 1′

Lc = −

1

T − 1

T

X

t=2

log(p3

t (y1′

t |y1′

1:t−2))

(18)

Then we combine self-critical loss Lr and cross-entropy
loss Lc together and apply the total loss for SCST as:

Lsc = Lr + Lc

(19)

In the inference phase of SCST, we also employ the prob-
together, and follow Eq.(15) to gen-

and Y 2′

ability of Y 1′
erate the ﬁnal sequence.

3.3. Look Back and Predict Forward Model

Look Back model focuses on attention module and take
attended result of the last time step as input, which helps
the model embed information from previous visual atten-
tion. Predict Forward model aims to predict next two words
in one time step. We can combine these two models to-
gether by simply reserving two attention results (att1
t and
att2
t ) in one time step for the next one, as illustrated in Fig-
ure.1. By bringing in both previous and future information,
our LBPF model is capable of predicting the next word by
both contexts of the situation and visual information, which
provides more details and guidance.

4. Experiments

4.1. Datasets

4.1.1 MSCOCO

We evaluate the performance of our proposed LBPF meth-
ods on MSCOCO 2014 caption dataset [18]. MSCOCO
is the largest English image caption dataset containing
164,062 images. It is split with rate 2:1:1 for training, val-
idation and test. In this paper, we employ the widely-used
’Karpathy’ splits [13] for ofﬂine evaluation, which chooses
113,287 images for training and 5000 for validation and test

each. Each image in MSCOCO is associated with at least 5
captions, and we select 5 per image for quantitative perfor-
mance evaluation on BLEU [22], METEOR [6], ROUGE-
L [17], CIDEr [26] and SPICE [1].

4.1.2 Visual Genome

Visual Genome (VG) [15] dataset contains 108K images
with dense annotations. There are 5.4 million region de-
scriptions and 42 for each image on average, where each
description is a phrase with 1 to 16 words. These annota-
tions include bounding boxes, classiﬁcations and attributes
of main objects, and even the relationships among differ-
ent instances are identiﬁed. Totally, the dataset contains 3.8
million object instances, 2.8 million attributes and 23 mil-
lion relationships. In this paper, we employ detected feature
pre-trained [20] on VG dataset.

4.2. Implementation Details

4.2.1 Encoder and Features

We employ detected vectors proposed by [2] as features,
which are generated by pre-trained Fast R-CNN model [20]
on VG dataset. In pre-training process, only object and at-
tribute data is employed. 98K images are split for training
and 5K for validation and test each [2, 20].

The annotations of objects and attributes are phrases with
1 to 16 words, thus data cleaning is performed over the
dataset. Fast R-CNN model is trained on this dataset for
multiple instances detection, and we only preserve ROI (re-
gion of interest) pooling vectors with the size of 2048 whose
conﬁdence coefﬁcient is at least 0.2 to guarantee the expres-
sive ability of our selected features. We also set the selected
number for each image to be 10-100 to balance the distribu-
tion among different images.

4.2.2 Decoder

Our base decoder employs the Bottom-Up and Top-Down
Attention model. For fair comparison with the previous
work, we directly employ the same hyper-parameters which
are proposed in [2]. We use hidden units of 1000 in both
LSTMs and set hidden units of the atttention module as 512.
The size of input word embedding is also 1000. We employ
Adam optimizer with the learning rate initialized as 5e−4
and decaying by 0.8 exponentially every 3 epoches. Due to
the limit of the graphic memory of GeForce GTX 1080Ti,
we set the batch size to 64. For self-critical learning, we
start from the best saved model during optimization using
cross-entropy loss. The learning rate for SCST starts from
5e−5 and decays by rate 0.1 every 50 epoches.

8371

Cross-Entropy Loss

CIDEr Opitimization

Models

B-1

B-4 METEOR

ROUGE-L

CIDEr

SPICE

B-1

B-4 METEOR

ROUGE-L

CIDEr

SPICE

SCST:Att2in [23]

SCST:Att2all [23]

ARnet [9]

Up-Down [2]

Ours: LB

Ours: PF

Ours: LBPF

-

-

74.0

77.2

77.4

77.4

77.8

31.3

30.0

33.5

36.2

36.7

37.0

37.4

26.0

25.9

26.1

27.0

27.6

27.9

28.1

54.3

53.4

54.6

56.4

57.0

57.2

57.5

101.3

99.4

1.034

113.5

114.3

115.7

116.4

-

-

19.0

20.3

20.8

20.9

21.2

-

-

-

33.3

34.2

-

79.8

36.3

79.6

80.7

80.5

37.7

38.3

38.3

26.3

26.7

-

27.7

28.4

28.4

28.5

55.3

55.7

-

56.9

58.1

58.4

58.4

111.4

114.0

-

120.1

124.4

126.9

127.6

-

-

-

21.4

21.8

21.9

22.0

Table 1. Performance comparisons on MSCOCO Karpathy test split using cross-entropy loss and CIDEr optimization, respectively. Our
baseline is Up-Down model proposed in [2], the existing state-of-the-art model employing bottom-up attention mechanisms. With the
pre-trained features, we apply our Look Back (LB) method, Predict Forward (PF) method and the combined Look Back and Predict
Forward (LBPF) method on the base decoder. Testing results show that our methods bring huge boost with both cross-entropy loss / CIDEr
optimization and outperform all the previous work with simple feature. In the table, B-1 and B-4 represent BLEU-1 and BLEU-4.

λ

0.1

0.3

0.5

0.7

0.9

λ

0.1

0.3

0.5

0.7

0.9

B-1

76.5

76.9

77.0

77.2

77.4

B-1

76.7

76.9

77.2

77.2

77.3

B-4

36.3

36.6

36.7

36.7

36.6

B-4

36.7

37.0

36.9

36.8

36.6

PF Model

M

27.7

27.7

27.7

27.7

27.6

R

56.7

57.0

57.0

57.0

56.9

LBPF Model

M

27.9

27.9

27.9

27.8

27.7

R

57.0

57.1

57.2

57.1

56.9

C

112.7

113.2

113.8

113.7

113.5

C

113.9

114.1

114.3

114.2

113.8

S

20.6

20.6

20.8

20.8

20.8

S

20.7

20.8

20.8

20.9

20.9

Table 2. Performances evaluation of our PF and LBPF models with
different λ on MSCOCO Karpathy validation dataset where λ is
the trade-off parameter in Eq.(15). B-1 / B-4 / M / R / C / S refers
to BLEU-1 / BLEU-4 / METEOR / ROUGE-L / CIDEr / SPICE
scores respectively. This table shows the performance trained with
cross-entropy loss.

4.3. Captioning Evaluation Results

4.3.1 Model Selection with λ

In our proposed PF and LBPF methods, we combine two
generated sequences together with a trade-off parameter λ
in Eq.(15) and we do model selection through it. During the
training process, we noticed that the converged loss of Y 2′
is slightly larger than that of Y 1′
, thus we set λ from 0 to 1
to put more emphasis on Y 1′
. In our experiments, we em-
ploy beam search method to sample output sequence. Beam
size of 3 can effectively cover the optimal words in both se-
quences and setting λ less than 1 tends to select the second
promoted word in Y 1′
. The results of PF and LBPF models
trained with cross-entropy loss are shown in Table.2.

Recently, CIDEr has become the most important score
which is well-accepted to best reﬂect the information and
smoothness of the sentences. The results in Table.2 show
that both PF and LBPF models achieve their best perfor-
mances at λ = 0.5. This is reasonable, because if λ is
too small the sequence Y 2′
might not contribute to the ﬁnal
sampling, and on the contrary, if λ is too large the sequence
Y 2′
might lead the sampling, while the training loss shows
that Y 1′
. Thereafter, we
eventually set λ = 0.5 and test the performance over Karpa-
thy test split.

converges slightly better than Y 2′

For self-critical learning, we perform the same model se-
lection procedure through λ and eventually select λ = 0.3
for PF model and λ = 0.5 for LBPF model. The results are
similar to those in Table. 2, and not shown here.

4.3.2 Evaluation Results

After model selection on the validation dataset according
to λ, we evaluate our methods on MSCOCO Karpathy test
split which contains 5000 images. The LB, PF and LBPF
model are trained independently from randomly initializa-
tion, and are validated every 0.5 epoch. The weights show-
ing best performance on validation dataset are eventually
selected to perform testing, and the validation procedure
also employs beam searching methods with the beam size of
3. All the three models are trained with both cross-entropy
loss and CIDEr optimization, where the self-critical learn-
ing starts from the best weights stored in the training pro-
cedure with cross-entropy loss. The evaluation results are
shown in Table. 1.

Our baseline is the Up-Down model proposed in [2], and
we also employ the network as our base decoder. The test
results in Table. 1 show that all the three methods bring
with noteworthy improvement over the baseline. The LB
model improves 0.8 percent on CIDEr score with cross-
entropy loss, and 4.3 percent with CIDEr optimization. The

8372

Figure 4. Qualitative analysis of attention results using Up-Down [2] model and our LB model.

Cross-Entropy Loss

employs complicated semantic and spacial information.

Models

Up-Down [2]

PF λ = 0

PF λ = 0.5

LBPF λ = 0

LBPF λ = 0.5

Models

Up-Down [2]

PF λ = 0

PF λ = 0.3

LBPF λ = 0

LBPF λ = 0.5

B-1

76.5

76.7

77.4

76.7

77.8

B-1

79.8

80.4

80.7

80.4

80.5

B-4

36.3

36.6

37.0

36.6

37.4

M

27.7

27.8

27.9

27.9

28.1

R

56.7

56.9

57.2

56.9

57.5

C

112.7

114.4

115.7

114.8

116.4

CIDEr Optimization

B-4

36.3

37.9

38.3

38.1

38.3

M

27.7

28.4

28.4

28.5

28.5

R

56.9

58.4

58.4

58.4

58.4

C

120.1

126.5

126.9

127.1

127.6

S

20.6

20.8

20.9

20.8

21.2

S

21.4

21.9

21.9

21.9

22.0

Table 3. comparison of our proposed PF and LBPF model with
best λ value and λ = 0. B-1 / B-4 / M / R / C / S refers to BLEU-1
/ BLEU-4 / METEOR / ROUGE-L / CIDEr / SPICE scores. This
table shows the performance trained both with cross-entropy loss
and CIDEr optimization.

PF method shows better performance over LB method and
outperforms the baseline 2.2 / 6.8 percent with two training
methods respectively. LBPF method combines LB and PF
together, and achieves BLEU-4 / CIDEr / SPICE scores of
37.4 / 116.4 / 21.2 with cross-entropy loss, and 38.3 / 127.6
/ 22.0 with CIDEr optimization. The results are persuasive
to show the effectiveness of our proposed model as we out-
perform the baseline over every quantitative score by great
promotion. With the simple detected feature, we even ap-
proach the result in the latest work proposed in [31], which

The qualitative analysis over the attention results for our
LB method is shown in Figure.4. For the same image, Up-
Down model only consider the main aera while our LB
model show a smooth transition from “dog” to “gound”,
“plate” and “food”. The caption shows this improvement
can also bring more information of the image like “food”.

Some examples of our generated captions with CIDEr
optimization are shown in Table. 4. From the table we can
see, all our three models retrieve most important informa-
tion from the image, and models with PF method can ob-
serve more precise visual information from the image like
“car”, “couch” and “sitting”. Some information we gener-
ated does not even exist in the ground-truth, which in fact
appears in the image like the “coach” in the second image.

4.3.3 PF method Analysis

and Y 2′

Our PF model generates two sequences (Y 1′
) to-
gether. In the training phase with cross-entropy loss, we re-
spectively calculate the losses of the two sequences and add
them together as the ﬁnal loss in Eq.(14). In self-critical
training process, we optimize Y 1′
with CIDEr score and
force Y 2′
by summing reward loss and
cross-entropy loss in Eq.(19). In the training phase, we em-
ploy a trade-off parameter λ to balance the contributions of
thte two sequences. In Table.3, we show the comparison of
our selected model with the best λ value and with λ = 0.

to be close to Y 1′

Evaluation results show that, even with λ = 0, our pro-
posed PF and LBPF models still show remarkable improve-
ment over the baseline Up-Down model. This comparison
indicates that, besides predicting two words at one time

8373

Images

Our Captions

Ground Truth Captions

LB:a wooden cutting board topped with a pizza

1.A vegetarian pizza is half eaten on a pizza holder

2.A couple of pieces of pizza with vegetable slices on them.

PF:a pizza sitting on top of a wooden cutting board

3.A wooden pan serving tray with a pizza on it

4.A pizza on a cutting board is half gone

LBPF:a couple of slices of pizza on a wooden cutting board

5.A Pizza is nearly ﬁnished with only three pieces left

LB:a man holding a nintendo wii game controller

1.A young man playing a game with a remote controller

2.A man playing a game with a remote controller

PF:a man sitting on a couch holding a wii game controller

3.A man is playing the wii while his face is being stroked

4.A hand strokes the face of a man playing a video game

LBPF:a man sitting on a couch holding a wii game controller

5.A guy sitting down playing a video game

LB:a person taking a picture of a dog in a rear view mirror

1.A man is taking a picture in a rear view mirror

2.A woman taking a picture of her and a dog in a mirror

PF:a person taking a picture of a dog in a car rear view mirror

3.The woman in the mirror is taking a picture of herself and the dog

LBPF:a woman taking a picture of a dog in a rear view mirror of a car

4.A hand strokes the face of a man playing a video game

5.A woman sitting in the pasenger seat of a car with a dog in her

lap and a camera in her hand

Table 4. Generated caption examples of our three models trained with CIDEr optimization. The results show that, all our three approaches
retrieve most important information from the image and models with PF method can observe more precise information like highlighted
”car”, ”couch”, ”sitting” and so on. (We rotate the image in line 2 to adapt to the table size)

Models

Parameters(M)

Up-Down

LB

PF

LBPF

49.71

50.20

58.77

59.26

Table 5. Parameter counts for Up-Down model, LB model, PF
model and LBPF model, which is shown in M.

step, the PF method also helps the network embed more
precise information on h2
t . Models with the best λ exceed-
ing ones with λ = 0 show that combination with λ better
aggregates the information within two sequences.

4.3.4 Complexity comparison over decoder

As illustrated in Figure.2 Our proposed LB method simply
increases the input size of the Attention module, and PF
method adds another logit layer into the network as shown
in Figure.3. Table.5 shows the total parameters in the four
models, including the base Up-Down model. The parame-
ter numbers of LB model increases 0.99 percent, which lays
on the attention module. PF method brings with 18% incre-
ment on the base model. All the increased parameter lays
on the logit layer, which has no change on the main network
structure. After the combination of LB and PF methods,
LBPF model is totally 18.99 percent larger than the original
architecture.

This comparison shows that, we achieve remarkable im-
provements over the base model while bringing only small
increment in the parameter numbers. Our LBPF method can
effectively help the base architecture embed more informa-
tion and perform better on the caption generation task.

5. Conclusion

We propose Look Back method to embed previous vi-
sual information and Predict Forward approach to look into
future for image captioning task. Our LB method takes at-
tention value from the previous time step into the input of
the current attention module which satisﬁes the visual co-
herence of human beings. PF approach generates two next
words in one time step, which utilizes linguistic coherence
and integrates future information. In the inference phase,
the two generated probabilities are combined together to
predict the current word. LBPF approach combines LB
and PF together and achieves remarkable performance gains
over the state-of-the-art method on MSCOCO dataset.

All the three approaches can be easily applied on most
attention-based encoder-decoder models for image caption-
ing. When applying them on a base decoder Up-Down ar-
chitecture, LBPF model achieves BLEU-4 / CIDEr / SPICE
scores of 37.4 / 116.4 / 21.2 with cross-entropy loss and
38.3 / 127.6 / 22.0 with CIDEr optimization.

Our proposed PF method can be intuitively applied to
most sequence generation task like machine translation. In
our future work, we will further explore the potential of PF
method in both network structure and application ﬁelds.

6. Acknowledgement

This paper is supported by NSFC (No.

61772330,
61533012, 61876109), the Basic Research Project of In-
novation Action Plan (16JC1402800),
the advanced re-
search project (No.61403120201), Shanghai authentication
key Lab. (2017XCWZK01), Technology Committee the in-
terdisciplinary Program of Shanghai Jiao Tong University
(YG2015MS43), and AI-Lab VS Team, Bytedance.

8374

References

[1] Peter Anderson, Basura Fernando, Mark Johnson, and
Stephen Gould. Spice: Semantic propositional image cap-
tion evaluation. In ECCV, pages 382–398. Springer, 2016.

[2] Peter Anderson, Xiaodong He, Chris Buehler, Damien
Teney, Mark Johnson, Stephen Gould, and Lei Zhang.
Bottom-up and top-down attention for image captioning and
visual question answering. In CVPR, volume 3, page 6, 2018.

[3] Lisa Anne Hendricks, Subhashini Venugopalan, Marcus
Rohrbach, Raymond Mooney, Kate Saenko, and Trevor Dar-
rell. Deep compositional captioning: Describing novel ob-
ject categories without paired training data. In CVPR, pages
1–10, 2016.

[4] Jimmy Ba, Ruslan R Salakhutdinov, Roger B Grosse, and
Brendan J Frey. Learning wake-sleep recurrent attention
models. In NIPS, pages 2593–2601, 2015.

[5] Dzmitry Bahdanau, Kyunghyun Cho, and Yoshua Bengio.
Neural machine translation by jointly learning to align and
translate. arXiv preprint arXiv:1409.0473, 2014.

[6] Satanjeev Banerjee and Alon Lavie. Meteor: An automatic
metric for mt evaluation with improved correlation with hu-
man judgments. In ACL Workshop, pages 65–72, 2005.

[7] Samy Bengio, Oriol Vinyals, Navdeep Jaitly, and Noam
Shazeer. Scheduled sampling for sequence prediction with
recurrent neural networks. In NIPS, pages 1171–1179, 2015.

[8] Long Chen, Hanwang Zhang, Jun Xiao, Liqiang Nie, Jian
Shao, Wei Liu, and Tat-Seng Chua. Sca-cnn: Spatial and
channel-wise attention in convolutional networks for image
captioning. In CVPR, pages 6298–6306. IEEE, 2017.

[9] Xinpeng Chen, Lin Ma, Wenhao Jiang, Jian Yao, and Wei
Liu. Regularizing rnns for caption generation by reconstruct-
ing the past with the present. In CVPR, June 2018.

[10] Jia Deng, Wei Dong, Richard Socher, Li-Jia Li, Kai Li,
and Li Fei-Fei. Imagenet: A large-scale hierarchical image
database. In CVPR, pages 248–255. Ieee, 2009.

[11] Hao Fang, Saurabh Gupta, Forrest Iandola, Rupesh K Sri-
vastava, Li Deng, Piotr Doll´ar, Jianfeng Gao, Xiaodong He,
Margaret Mitchell, John C Platt, et al. From captions to vi-
sual concepts and back. In CVPR, pages 1473–1482, 2015.

[12] Kaiming He, Xiangyu Zhang, Shaoqing Ren, and Jian Sun.
In CVPR,

Deep residual learning for image recognition.
pages 770–778, 2016.

[13] Andrej Karpathy and Li Fei-Fei. Deep visual-semantic align-
In CVPR, pages

ments for generating image descriptions.
3128–3137, 2015.

[14] Jonathan Krause, Justin Johnson, Ranjay Krishna, and Li
Fei-Fei. A hierarchical approach for generating descriptive
image paragraphs. In CVPR, pages 3337–3345. IEEE, 2017.

[15] Ranjay Krishna, Yuke Zhu, Oliver Groth, Justin Johnson,
Kenji Hata, Joshua Kravitz, Stephanie Chen, Yannis Kalan-
tidis, Li-Jia Li, David A Shamma, et al. Visual genome:
Connecting language and vision using crowdsourced dense
image annotations. IJCA, 123(1):32–73, 2017.

[16] David Krueger, Tegan Maharaj, J´anos Kram´ar, Mohammad
Pezeshki, Nicolas Ballas, Nan Rosemary Ke, Anirudh Goyal,
Yoshua Bengio, Aaron Courville, and Chris Pal. Zoneout:

Regularizing rnns by randomly preserving hidden activa-
tions. arXiv preprint arXiv:1606.01305, 2016.

[17] Chin-Yew Lin and Franz Josef Och. Automatic evaluation
of machine translation quality using longest common subse-
quence and skip-bigram statistics. In ACL, page 605. Asso-
ciation for Computational Linguistics, 2004.

[18] Tsung-Yi Lin, Michael Maire, Serge Belongie, James Hays,
Pietro Perona, Deva Ramanan, Piotr Doll´ar, and C Lawrence
Zitnick. Microsoft coco: Common objects in context.
In
European conference on computer vision, pages 740–755.
Springer, 2014.

[19] Jiasen Lu, Caiming Xiong, Devi Parikh, and Richard Socher.
Knowing when to look: Adaptive attention via a visual sen-
tinel for image captioning. In CVPR, volume 6, page 2, 2017.
[20] Ruotian Luo, Brian Price, Scott Cohen, and Gregory
Shakhnarovich. Discriminability objective for training de-
scriptive captions. arXiv preprint arXiv:1803.04376, 2018.

[21] Junhua Mao, Wei Xu, Yi Yang, Jiang Wang, Zhiheng Huang,
and Alan Yuille. Deep captioning with multimodal recurrent
neural networks (m-rnn). ICLR, 2015.

[22] Kishore Papineni, Salim Roukos, Todd Ward, and Wei-Jing
Zhu. Bleu: a method for automatic evaluation of machine
translation. In ACL, pages 311–318. Association for Com-
putational Linguistics, 2002.

[23] Steven J Rennie, Etienne Marcheret, Youssef Mroueh, Jarret
Ross, and Vaibhava Goel. Self-critical sequence training for
image captioning. In CVPR, volume 1, page 3, 2017.

[24] Karen Simonyan and Andrew Zisserman. Very deep convo-
lutional networks for large-scale image recognition. ICLR,
2015.

[25] Richard Socher, Andrej Karpathy, Quoc V Le, Christopher D
Manning, and Andrew Y Ng. Grounded compositional se-
mantics for ﬁnding and describing images with sentences.
ACL, 2(1):207–218, 2014.

[26] Ramakrishna Vedantam, C Lawrence Zitnick, and Devi
Parikh. Cider: Consensus-based image description evalua-
tion. In CVPR, pages 4566–4575, 2015.

[27] Oriol Vinyals, Alexander Toshev, Samy Bengio, and Du-
mitru Erhan. Show and tell: A neural image caption gen-
erator. In CVPR, pages 3156–3164, 2015.

[28] Zhilin Yang Ye Yuan Yuexin Wu and Ruslan Salakhutdinov
William W Cohen. Encode, review, and decode: Reviewer
module for caption generation. NIPS, 2016.

[29] Kelvin Xu, Jimmy Ba, Ryan Kiros, Kyunghyun Cho, Aaron
Courville, Ruslan Salakhudinov, Rich Zemel, and Yoshua
Bengio. Show, attend and tell: Neural image caption gen-
eration with visual attention.
In ICML, pages 2048–2057,
2015.

[30] Zichao Yang, Xiaodong He, Jianfeng Gao, Li Deng, and
Alex Smola. Stacked attention networks for image question
answering. In CVPR, pages 21–29, 2016.

[31] Ting Yao, Yingwei Pan, Yehao Li, and Tao Mei. Exploring

visual relationship for image captioning. In ECCV, 2018.

[32] Quanzeng You, Hailin Jin, Zhaowen Wang, Chen Fang, and
In

Image captioning with semantic attention.

Jiebo Luo.
CVPR, pages 4651–4659, 2016.

8375

