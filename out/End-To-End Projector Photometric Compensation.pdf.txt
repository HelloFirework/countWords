End-to-end Projector Photometric Compensation

Bingyao Huang1

2

,

,*

Haibin Ling1

,†

1Department of Computer and Information Sciences, Temple University, Philadelphia, PA USA

2Meitu HiScene Lab, HiScene Information Technologies, Shanghai, China

{bingyao.huang, hbling}temple.edu

Abstract

Projector photometric compensation aims to modify a
projector input image such that it can compensate for dis-
turbance from the appearance of projection surface. In this
paper, for the ﬁrst time, we formulate the compensation
problem as an end-to-end learning problem and propose a
convolutional neural network, named CompenNet, to im-
plicitly learn the complex compensation function. Compen-
Net consists of a UNet-like backbone network and an au-
toencoder subnet. Such architecture encourages rich multi-
level interactions between the camera-captured projection
surface image and the input image, and thus captures both
photometric and environment information of the projection
surface. In addition, the visual details and interaction in-
formation are carried to deeper layers along the multi-level
skip convolution layers. The architecture is of particular
importance for the projector compensation task, for which
only a small training dataset is allowed in practice.

Another contribution we make is a novel evaluation
benchmark, which is independent of system setup and thus
quantitatively veriﬁable. Such benchmark is not previously
available, to our best knowledge, due to the fact that con-
ventional evaluation requests the hardware system to ac-
tually project the ﬁnal results. Our key idea, motivated
from our end-to-end problem formulation, is to use a rea-
sonable surrogate to avoid such projection process so as to
be setup-independent. Our method is evaluated carefully
on the benchmark, and the results show that our end-to-end
learning solution outperforms state-of-the-arts both quali-
tatively and quantitatively by a signiﬁcant margin.

1. Introduction

Projectors are widely used in applications such as pre-
sentation, cinema, structured light and projection mapping
[1, 3, 8, 9, 25, 28, 31, 32, 36]. To ensure high perception qual-

*Work partly done during internship with HiScene.
†Corresponding author.

(a) Tex-
Figure 1: Projector photometric compensation.
tured projection surface under normal illumination. (b) In-
put image (desired visual effect). (c) Camera-captured un-
compensated projection result, i.e., (b) projected onto (a).
(d) Compensated image by the proposed CompenNet. (e)
Camera-captured compensated projection result, i.e., (d)
projected onto (a). Comparing (c) and (e) we can see clearly
improved color and details.

ity, existing systems typically request the projection surface
(screen) to be white and textureless, under reasonable envi-
ronment illumination. Such request, however, largely limits
applicability of these systems. Projector photometric com-
pensation [1, 3, 25, 28, 31, 32, 36], or simply compensation
for short, aims to address this issue by modifying a projec-
tor input image to compensate for the projection surface as
well as associated photometric environment. An example
from our solution is illustrated in Fig. 1, where the compen-
sated projection result (e) is clearly more visually pleasant
than the uncompensated one (c).

6810

acbdeA typical projector compensation system consists of a
camera-projector pair and a projection surface placed at a
ﬁxed distance and orientation. Firstly, the projector projects
a sequence of sampling input images to the projection sur-
face, then the sampling images are absorbed, reﬂected or
refracted according to the projection surface material. Once
the camera captures all the projected sampling images, a
composite radiometric transfer function is ﬁtted that maps
the input images to the captured images. This function (or
its inverse) is then used to infer the compensated image for
a new input image. Existing solutions (e.g., [9, 11, 26, 30])
usually model the compensation function explicitly, with
various simpliﬁcation assumptions that allow the parame-
ters to be estimated from samples collected. These assump-
tions, such as context independence (§2), however, are often
violated in practice. Moreover, due to the tremendous com-
plexity of the photometric process during projection, reﬂec-
tion and capturing, it is extremely hard, if not impossible,
to faithfully model the compensation explicitly.

In this paper, for the ﬁrst time, an end-to-end projector
compensation solution is presented to address the above is-
sues. We start by reformulating the compensation problem
to a novel form that can be learned online, as required by
the compensation task in practice. This formation allows us
to develop a convolutional neural network (CNN), named
CompenNet, to implicitly learn the complex compensation
function.
In particular, CompenNet consists of two sub-
nets, a UNet-like [29] backbone network and an autoen-
coder subnet. Firstly, the autoencoder subnet encourages
rich multi-level interactions between the camera-captured
projection surface image and the input image, and thus cap-
tures both photometric and environment information of the
projection surface. Secondly, the UNet-like backbone net-
work allows the visual details and interaction information to
be carried to deeper layers and the output using the multi-
level skip convolution layers. The two subnets together
make CompenNet efﬁcient in practice and allow Compen-
Net to learn the complex backward mapping from camera
captured image to projector input image.
In addition, a
pre-trained solution is designed that can further improve the
training efﬁciency with a small tradeoff in precision.

Another issue addressed in this paper is the absence
of evaluation benchmarks for projector compensation, due
mainly to the fact that traditional evaluation is highly setup
dependent. More speciﬁcally, to evaluate a compensation
algorithm, theoretically, its experimental results need to
be actually projected and captured and then quantitatively
compared with ground truth. This process makes it im-
practical to provide a shared benchmark among different re-
search groups. In this work, we tackle this issue by deriving
a surrogate evaluation protocol that requests no actual pro-
jection of the algorithm output. As a result, this surrogate
allows us to construct, for the ﬁrst time, a sharable setup-

independent compensation benchmark.

The proposed compensation network, i.e., CompenNet,
is evaluated on the proposed benchmark that is carefully
designed to cover various challenging factors.
In the ex-
periments, CompenNet demonstrates clear advantages com-
pared with state-of-the-art solutions.
In summary, in this
paper we bring the following contributions:

1. For the ﬁrst time, an end-to-end solution is proposed
for projector compensation. Such solution allows our
system to effectively and implicitly capture the com-
plex photometric process involved in the projector
compensation process.

2. The proposed CompenNet is designed to have two im-
portant subnets that enable rich multi-level interac-
tions between projection surface and input image, and
to carry interaction information and structural details
through the network.

3. A pre-train method is proposed to further improve the

practical efﬁciency of our system.

4. For the ﬁrst time, a setup-independent projector com-
pensation benchmark is constructed, which is expected
to facilitate future works in this direction.

The source code, benchmark and experimental results
are available at https://github.com/BingyaoHuang/
CompenNet.

2. Related Works

In theory, the projector compensation process is a very
complicated nonlinear function involving the camera and
the projector sensor radiometric responses [24], lens distor-
tion/vignetting [20], defocus [35, 37], surface material re-
ﬂectance and inter-reﬂection [33]. A great amount of ef-
fort has been dedicated to designing practical and accurate
compensation models, which can be roughly categorized
into context-independent [9, 11, 26, 30] and context-aware
ones [1, 2, 24, 33]. Detailed reviews can be found in [4, 12].
Context-independent methods typically assume that there
is an approximate one-to-one mapping between the projec-
tor and camera image pixels, i.e., a camera pixel is only
dependent on its corresponding projector pixel and the sur-
face patch illuminated by that projector pixel. Namely, each
pixel is roughly independent of its neighborhood context.
The pioneer work by Nayar et al. [26] proposes a linear
model that maps a projector ray brightness to camera de-
tected irradiance with a 3×3 color mixing matrix. Gross-
berg et al. [9] improve Nayar’s work and model the envi-
ronment lighting by adding a 3×1 vector to the camera-
captured irradiance. However, a spectroradiometer is re-
quired to calibrate the uniform camera radiometric response
function. Moreover, as pointed out in [20], even with a
spectroradiometer the assumption of uniform radiometric
response is usually violated, let alone the linearity. Consid-
ering the nonlinearity of the transfer function, Sajadi et al.

6811

[30] ﬁt a smooth higher-dimensional B´ezier patches-based
model with 93=729 sampling images. Grundh¨ofer and Iwai
[11] propose a thin plate spline (TPS)-based method and
reduce the number of sampling images to 53=125 and fur-
ther deal with clipping errors and image smoothness with
a global optimization step. Other than optimizing the im-
age colors numerically, some methods speciﬁcally focus on
human perceptual properties, e.g. Huang et al. [15] gener-
ate visually pleasing projections by exploring human visual
system’s chromatic adaptation and perceptual anchoring
property. Also, clipping artifacts due to camera/projector
sensor limitation are minimized using gamut scaling.

Despite largely simplifying the compensation problem,
the context-independent assumption is usually violated in
practice, due to many factors such as projector distance-to-
surface, lens distortion, defocus and surface inter-reﬂection
[33, 35, 37]. Moreover, it is clear that a projector ray can
illuminate multiple surface patches, a patch can be illumi-
nated by the inter-reﬂection of its surrounding patches, and
a camera pixel is also determined by rays reﬂected by mul-
tiple patches.

Context-aware methods compensate a pixel by consider-
ing information from neighborhood context. Grundh¨ofer et
al. [10] tackle visual artifacts and enhance brightness and
contrast by analyzing the projection surface and input image
prior. Li et al. [24] reduce the number of sampling images
to at least two by sparse sampling and linear interpolation.
Multidimensional reﬂectance vectors are extracted as color
transfer function control points. Due to the small size of
sampling dots, this method may be sensitive to projector de-
focus and lens vignetting. A simple linear interpolation us-
ing those unreliable samples may add to the compensation
errors. Besides computing an ofﬂine compensation model,
Aliaga et al. [1] introduce a run time linear scaling opera-
tion to optimize multiple projector compensation. Takeda
et al. [33] propose an inter-reﬂection compensation method
using an ultraviolet LED array.

Context-aware methods generally improve over previ-
ous methods by integrating more information. However, it
is extremely hard to model or approximate the ideal com-
pensation process due to complex interactions between the
global lighting, the projection surface and the input image.
Moreover, most existing works focus on reducing pixel-
wise color errors rather than jointly improve the color and
structural similarity to the target image.

Our method belongs to the Context-aware one, and in
fact captures much richer context information by using the
CNN architecture. Being the ﬁrst end-to-end learning-based
solution, our method implicitly and effectively models the
complex compensation process. Moreover, the proposed
benchmark is the ﬁrst one that can be easily shared for ver-
iﬁable quantitative evaluation.

posed deep learning-based image-to-image translation,
such as pix2pix [18], CycleGAN [40], style transfer [7, 16,
19], image super-resolution [6, 21, 23, 34] and image col-
orization [5, 17, 38]. That said, as the ﬁrst deep learning-
based projector compensation algorithm, our method is very
different from these studies and has its own special con-
straints. For example, unlike above CNN models that can be
trained once and for all, the projector compensation model
needs to be quickly retrained if the system setup changes.
However, in practice, both capturing training images and
training the model are time consuming. In addition, data
augmentations such as cropping and afﬁne translations are
not available for our task, because each camera pixel is
strongly coupled with a neighborhood of its correspond-
ing projector pixel and the projection surface patch illumi-
nated by those pixels. Furthermore, general image-to-image
translation models cannot formulate the complex spectral
interactions between the global lighting, the projector back-
light and the projection surface.
In fact, in our evalua-
tion, the advantage of the proposed method over the clas-
sical pix2pix [18] algorithm is clearly demonstrated quanti-
tatively and qualitatively.

3. Deep Projector Compensation

3.1. Problem formulation

Our projector compensation system consists of a camera-
projector pair and a planar projection surface placed at a
ﬁxed distance and orientation. Let a projector input image
be x; and let the projector’s and the camera’s composite
geometric projection and radiometric transfer functions be
πp and πc, respectively. Let the surface spectral reﬂectance
property and spectral reﬂectance functions be s and πs, re-
spectively. Let the global lighting irradiance distribution be
g, then the camera captured image ˜x,1 is given by:

˜x = πc(cid:16)πs(cid:0)πp(x), g, s(cid:1)(cid:17)

(1)

The problem of projector compensation is to ﬁnd a pro-
jector input image x∗, named compensation image of x
such that the camera captured image is the same as the ideal
desired viewer perceived image, i.e.,

πc(cid:16)πs(cid:0)πp(x∗), g, s(cid:1)(cid:17) = x

(2)

However, the spectral interactions and responses formu-
lated in the above equation are very complex and can hardly
be solved by traditional methods. Moreover, in practice it is
also hard to measure g and s directly. For this reason, we
capture their spectral interactions using a camera-captured
surface image ˜s under the global lighting and the projector
backlight:

˜s = πc(cid:16)πs(cid:0)πp(x0), g, s(cid:1)(cid:17),

(3)

Our method is inspired by the successes of recently pro-

1We use ‘tilde’ ( ˜x) to indicate a camera-captured image.

6812

Figure 2: Flowchart of the proposed projector compensation pipeline consisting of three major steps. (a) Project and capture
a surface image and a set of sampling images. (b) The proposed CompenNet, i.e., π†
θ, is trained using the projected and
captured image pairs. (c) With the trained model, an input image y can be compensated and projected.

where x0 is theoretically a black image. In practice, the pro-
jector outputs some backlight πp(x0) even when the input
image is black, thus we encapsulate this factor in ˜s. When
under low global illumination, ˜s suffers from camera gamut
clipping due to the limitation of camera dynamic range, thus
we set x0 to a plain gray image to provide some illumina-
tion. Denoting the composite projector to camera radiomet-
ric transfer function in Eq. 2 as π and substituting g and s
with ˜s, we have the compensation problem as

π(x∗; ˜s) = x ⇒ x∗ = π†(x; ˜s),

(4)

where π† is the pseudo-inverse function of π and, obviously,
has no closed form solution.

where ˆx is the compensation of ˜x (not x) and θ contains
the learnable network parameters. It is worth noting that ˜s
is ﬁxed as long as the the setup is unchanged, thus only one
˜s is needed in training and prediction.

By using Eq. 5, we can generate a set of N training pairs,
i=1. Then, with a loss function

denoted as X = {(˜xi, xi)}N
L, CompenNet can be learned by

θ = arg min

θ′ X

L(cid:0) ˆxi = π†

θ′ ( ˜xi; ˜s), xi(cid:1)

(7)

i

Our loss function is designed to jointly optimize the com-
pensated image’s color and structural similarity to the target
image by combining the pixel-wise ℓ1 and the SSIM loss:

3.2. Learning based formulation

L = Lℓ1 + LSSIM

(8)

A key requirement for learning-based solution is the
availability of training data. In the following we derive a
method for collecting such data. Investigating the formula-
tion in §3.1 we ﬁnd that:

˜x = π(x; ˜s) ⇒ x = π†(˜x; ˜s)

(5)

This suggests that we can learn π† over sampled image pairs
like (˜x, x) and a surface image ˜s as shown in Fig. 3. In fact,
some previous solutions (e.g. [11, 30]) use similar ideas to
ﬁt models for π†, but typically under simpliﬁed assumptions
and without modeling ˜s.

Instead, we reformulate the compensation problem with
a deep neural network solution, which is capable of pre-
serving the projector compensation complexity. In particu-
lar, we model the compensation process with an end-to-end
learnable convolutional neural network, named CompenNet
and denoted as π†

θ (see (Fig. 2(b)), such that

ˆx = π†

θ(˜x; ˜s),

(6)

The advantages of this loss function over the other loss
functions are shown in [39] and in our comprehensive ex-
perimental comparisons in Table 3 and Fig. 5.

3.3. Network design

Based on the above formulation, our CompenNet is de-
signed with two input images, ˜x and ˜s, corresponding to
the camera-captured uncompensated image of x and the
camera-captured surface image, respectively. The network
architecture is shown in Fig. 3. Both two inputs and the
output are 256×256×3 RGB images. Both input images
are fed to a sequence of convolution layers to downsample
and to extract multi-level feature maps. Note that in Fig. 3
we give the two paths different colors to indicate that the
two branches do NOT share weights. The multi-level fea-
ture maps are then combined by element-wise addition, al-
lowing the model to learn the complex spectral interactions
between the global lighting, the projector backlight, the sur-
face and the projected image.

6813

WarpSurface image �𝒔𝒔ProjectCamera captured raw imageProjector image 𝒙𝒙𝟎𝟎𝒙𝒙𝟏𝟏𝒙𝒙𝑵𝑵Camera image �𝒙𝒙𝟏𝟏�𝒙𝒙𝑵𝑵�𝒙𝒙𝟏𝟏…�𝒙𝒙𝒊𝒊…�𝒙𝒙𝑵𝑵�𝒙𝒙𝟏𝟏…�𝒙𝒙𝒊𝒊…�𝒙𝒙𝑵𝑵π𝜽𝜽†π𝜽𝜽†𝒚𝒚∗(a)Data preparation(b)Model training(c)Compensation64321282563264128333𝒚𝒚ProjectorLossFigure 3: The architecture of CompenNet (ReLU layers omitted). All convolution layers are composed of 3×3 ﬁlters and all
transposed convolution layers consist of 2×2 ﬁlters. Both upsample and downsample layers use a stride of two. The number
of ﬁlters for each layer is labeled on its top. The skip convolution layers are shown in colored arrows, and the number of
layers and the number of ﬁlters are labeled as #layers #ﬁlters for conciseness. Learning the backward mapping from camera
captured uncompensated image to the projector input image (left: ˜x 7→ x) is the same as learning the mapping from desired
viewer perceived image to the compensation image (right: x 7→ x∗).

We also pass low-level interaction information to high-
level feature maps through skip convolution layers [14]. In
the middle blocks, we extract rich features by increasing
the feature channels while keeping the feature maps’ width
and height unchanged. Then, we use two transposed con-
volution layers to gradually upsample the feature maps to
256×256×32. Finally, the output image is an element-wise
summation of the last layer’s output and the three skip con-
volution layers at the bottom of Fig. 3. Note that we clamp
the output image pixel values to [0, 1] before output. We
ﬁnd that deeper CNNs with more layers and ﬁlters, e.g. 512
ﬁlters can produce better compensation results, but suffer
from overﬁtting on fewer sampling images and longer train-
ing and prediction time. However, if an application prefers
accuracy to speed, it can add more convolution layers, in-
crease the number of iterations and capture more training
data accordingly. In this paper, we choose the architecture
in Fig. 3 to balance training/prediction time and sampling
data size.

To make the method more practical, we also provide
a pre-trained model by projecting and capturing N (N =
500) sampling images using a white projection surface.
Once the setup, e.g., the projection surface or the global
lighting changes, rather than recapturing 500 training im-
ages, we use much fewer (e.g. 32) images to ﬁne-tune the
pre-trained model. This technique saves data preparation
and training time and adds to the advantages over the ex-
isting solutions. We demonstrate the effectiveness of the
pre-trained model in §5.3.

3.4. Training details

We implement CompenNet using PyTorch [27] and train
it using Adam optimizer [22] with the following speciﬁca-
tions: we set β1 = 0.9 and ﬁx ℓ2 penalty factor to 10−4.

The initial learning rate is set to 10−3, we also decay it by
a factor of 5 every 800 iterations. The model weights are
initialized using He’s method [13]. We train the model for
1,000 iterations on two Nvidia GeForce 1080 GPUs with a
batch size of 64, and it takes about 10min to ﬁnish training
(for 500 samples). We report a comprehensive evaluation of
different hyperparameters in supplementary material.

3.5. Compensation pipeline

To summarize,

the proposed projector compensation
pipeline consists of three major steps shown in Fig. 2. (a)
We start by projecting a plain gray image x0 and N sam-
pling images x1, . . . , xN to the planar projection surface
and capture them using the camera. Then each captured
image is warped to the canonical view using a homogra-
phy, and we denote warped camera images as ˜xi. (b) After-
wards, we gather the N image pairs (˜xi, xi) and train the
compensation model π†
θ. (c) Finally, with the trained model,
we generate the compensation image y∗ for an input image
y and project y∗ to the surface.

4. Benchmark

An issue left unaddressed in previous studies is the
lack of public benchmarks for quantitative evaluation, due
mainly to the fact that traditional evaluation is highly setup-
dependent. In theory, to evaluate a compensation algorithm,
its output compensation image x∗ for input x should be ac-
tually projected to the projection surface, and then captured
by the camera and quantitatively compared with the ground
truth. This process is obvious impractical since it requests
the same projector-camera-environment setup for fair com-
parison of different algorithms.

In this work, motivated by our problem formulation, we
derive an effective surrogate evaluation protocol that re-

6814

Projector image ෝ𝒙64321282563264128Camera captured image ෥𝒙Surface image ෤𝒔1_64 skip conv3_3 skip conv1_128 skip conv333Compensationimage 𝒙∗64321282563264128Desired viewer perceived image 𝒙Surface image ෤𝒔1_64 skip conv3_3 skip conv1_128 skip conv333TrainingCompensationquests no actual projection of the algorithm output. The
basic idea is, according to Eq. 5, we can collect testing sam-
ples in the same way as the training samples. We can also
evaluate an algorithm in the similar way. Speciﬁcally, we
collect the test set of M samples as Y = {(˜yi, yi)}M
i=1, un-
der the same system setup as the training set X . Then the
algorithm performance can be measured by averaging over
similarities between each test input image yi and its algo-
rithm output ˆyi = π†

θ(˜yi; ˜s).

The above protocol allows us to construct a projector
compensation evaluation benchmark, consisting of K sys-
tem setups, each with a training set Xk, a test set Yk and a
surface image ˜sk, k = 1, . . . , K.
System conﬁguration. Our projector compensation sys-
tem consists of a Canon 6D camera with image resolution
of 960×640, and a ViewSonic PJD7828HDL DLP projec-
tor set to the resolution of 800×600. The distance between
the camera and the projector is 500mm and the projection
surface is around 1,000mm in front of the camera-projector
pair. The camera exposure mode, focus mode and white
balance mode are set to manual, the global lighting is ﬁxed
during the data capturing and system validation.
Dataset. To obtain the sampling colors and textures as di-
verse as possible, we download 700 colorful textured im-
ages from the Internet and use N = 500 for each train-
ing set Xk and M = 200 for each testing set Yk. In total
K = 24 different setups are prepared for training and eval-
uation. Future works can replicate our results and compare
with CompenNet on the benchmark without replicating our
setups. For more camera perceived compensation results
and the detailed conﬁgurations of the benchmark please re-
fer to supplementary material.

5. Experimental Evaluations

5.1. Comparison with state of the arts

We compare the proposed projector compensation
method with a context-independent TPS model [11], an im-
proved TPS model (explained below) and a general image-
to-image translation model pix2pix [18] on our benchmark.
We ﬁrst capture 125 pairs of plain color sampling image
as used in the original TPS method [11]. We also ﬁt the
TPS method using our diverse textured training set Xk, and
name this method TPS textured. The experiment results in
Table 1 and Fig. 4 show clear improvement of TPS textured
over the original TPS method.

We then compare our method with pix2pix [18] to
demonstrate the challenge of the projector compensation
problem and to show the advantages of our formulation and
architecture. We use the default implementation2 of pix2pix
with some adaptations for the compensation problem: (1)
as mentioned in §2, data augmentation can break the strong

2https://github.com/junyanz/pytorch-CycleGAN-and-pix2pix

coupling between the camera, the surface and the projec-
tor image, thus, we disable cropping, resizing and ﬂipping.
(2) We train the pix2pix model for 10,000 iterations and it
takes about 10min with a batch size of one using the same
hardware. The comparison results show that our method
outperforms pix2pix by a signiﬁcant margin on this task.

We ﬁnd that TPS textured obtains slightly increased
SSIM and slightly decreased PSNR when the data size in-
creases. Pix2pix shows the lowest PSNR and SSIM when
training data size is 250, and the highest PSNR and SSIM at
500. Only the proposed CompenNet achieves higher PSNR
and SSIM when training data size increases from 125 to
500 (Table 1). Despite improving the performance of the
CompenNet, a downside of large data size is increased data
capturing time.
In practice, taking hundreds of sampling
images is time consuming, therefore, we proposed a pre-
trained model that has improved performance than the de-
fault model when we only have limited training pairs and
training time (§5.3).

Besides the state-of-the-arts above, we also tested the
model-free “reﬁnement by continuous feedback” method
in [26] and ﬁnd it work well. However, it has the disad-
vantage of needing several real projections, captures and it-
erations to converge for each single frame. Thus, it is im-
practical to evaluate it on the proposed setup-independent
surrogate evaluation benchmark.

5.2. Effectiveness of the surface image

To show the effectiveness of our learning-based formula-
tion and that the surface image ˜s is a necessary model input,
we compare with the proposed CompenNet that is without
the input surface image and the corresponding autoencoder
subnet, we name it CompenNet w/o surf. The results are
shown in Table 1. Firstly, we can see a clear increase in
PSNR and SSIM and a drop in RMSE when the ˜s is in-
cluded in the model input (CompenNet). This shows that
our learning-based formulation has a clear advantage over
the models that ignore the important information encoded
in the surface image. Secondly, CompenNet w/o surf out-
performs TPS, TPS textured and pix2pix on PSNR, RMSE
and SSIM even ˜s is not included. It is worth noting that for
a new projection setting, simply replacing the surface im-
age does not work well and it is necessary to train a new
CompenNet from scratch. Fortunately, with the pre-trained
model we can ﬁne-tune from a reasonable initialization to
reduce the number of training images and training time.

5.3. Effectiveness of the pre trained model

We compare the default CompenNet model (using He’s
[13] initialization) with a model that is pre-trained with 500
training pairs projected to a white surface. Then we train
and evaluate both models on each training set Xk and eval-
uation set Yk of the 24 setups that the models have never

6815

Figure 4: Comparison of TPS [11], TPS textured, pix2pix [18] and CompenNet on different surfaces. The 1st column is the
camera-captured projection surface. The 2nd column is the camera-captured uncompensated projected image. The 3rd to 6th
columns are the camera-captured compensation results of different methods. The last column is the ground truth input image.
Each image is provided with two zoomed-in patches for detailed comparison. When trained with diverse textured images,
TPS produces better results than its original version [11] that uses plain color images, though still suffers from hard edges,
blocky effect and color errors. Compared with CompenNet, pix2pix generates unsmooth pixelated details and color errors.

Figure 5: Qualitative comparison of CompenNet trained with ℓ1 loss, ℓ2 loss, SSIM loss and ℓ1+SSIM loss. It shows that
the ℓ1 and ℓ2 losses are unable to successfully compensate the surface patterns. The ℓ1+SSIM and the SSIM losses produce
similar results, but the water in the zoomed-in patch of SSIM is bluer than the ℓ1+ SSIM and the ground truth.

been trained on. To demonstrate that pre-trained model ob-
tains improved performance with limited training pairs and
training time, we train the models for 500 iterations using
only 32 training pairs. The results are reported in Table 2.

Clearly, we see that the pre-trained model outperforms

the default counterpart even the 24 training and evaluation
setups have different lightings and surface textures as the
pre-trained setup. Our explanation is that despite the sur-
faces have different appearances, the pre-trained model has
already learned partial radiometric transfer functions of the

6816

SurfaceUncompensatedTPSTPS texturedPix2pixProjector (GT)ProposedSurfaceUncompensatedℓ𝟏ℓ𝟐SSIMProjector (GT)ℓ𝟏+SSIMTable 1: Quantitative comparison of compensation algo-
rithms. Results are averaged over K = 24 different setups.

#Train Model

PSNR↑

RMSE↓

SSIM↑

Table 2: Quantitative comparison between a pre-trained
CompenNet and a CompenNet randomly initialized using
He’s method [13], both trained using only 32 samples and
500 iterations with a batch size of 32, and take about 170s.

125 TPS [11]

17.6399
19.3156
TPS [11] textured
Pix2pix [18]
17.9358
CompenNet w/o Surf. 19.8227
21.0542
CompenNet

250 TPS [11] textured

19.2764
Pix2pix [18]
16.2939
CompenNet w/o Surf. 20.0857
21.2991
CompenNet

500 TPS [11] textured

19.2264
Pix2pix [18]
18.0923
CompenNet w/o Surf. 20.2618
21.7998
CompenNet

0.2299
0.1898
0.2347
0.1786
0.1574

0.1907
0.2842
0.1733
0.1536

0.1917
0.2350
0.1698
0.1425

0.6042
0.6518
0.6439
0.7003
0.7314

0.6590
0.6393
0.7146
0.7420

0.6615
0.6523
0.7209
0.7523

- Uncompensated

12.1673

0.4342

0.4875

camera and the projector. This pre-trained model makes
our method more practical, i.e., as long as the projector
and camera are not changed, the pre-trained model can be
quickly tuned with much fewer training images and thus
shortens the image capturing and training time. Another
ﬁnding is even with 32 training pairs and 500 iterations, the
proposed CompenNet, with or without pre-train, performs
better than TPS [11], TPS textured and pix2pix [18] in Ta-
ble 1. Furthermore, CompenNet has much fewer param-
eters (1M) than pix2pix’s default generator (54M parame-
ters). This further conﬁrms that the projector compensation
is a complex problem and is different from general image-
to-image translation tasks, and carefully designed models
are necessary to solve this problem.

5.4. Comparison of different loss functions

Existing works ﬁt the composite radiometric transfer
function by linear/nonlinear regression subject to a pixel-
wise ℓ2 loss and this loss function is known to penalize
large pixel errors while oversmoothes the structural details.
We investigate four different loss functions, i.e., pixel-wise
ℓ1 loss, pixel-wise ℓ2 loss, SSIM loss, and ℓ1+SSIM loss.
The qualitative and quantitative comparisons are shown in
Fig. 5 and Table 3, respectively. Compared with SSIM loss,
pixel-wise ℓ1 and ℓ2 losses cannot well compensate sur-
face patterns, notice the hard edges in the red zoomed-in
patches in Fig. 5. Consistent to the qualitative results, the
SSIM column in Table 3 also shows a clear disadvantage
of both pixel-wise ℓ1 and ℓ2 losses. Although SSIM loss
alone obtains the best SSIM value, its PSNR and RMSE
are the 2nd worst. After comprehensive experiments on our
benchmark, we ﬁnd that ℓ1+SSIM loss obtains the best
PSNR/RMSE and the 2nd best SSIM, thus, we choose it as
our CompenNet loss function. Moreover, even when trained

Model

PSNR↑ RMSE↓

SSIM↑

CompenNet
CompenNet pre-train

19.6767
20.3423

0.1863
0.1688

0.6788
0.7165

Uncompensated

12.1673

0.4342

0.4875

Table 3: Quantitative comparison of different loss functions
for the proposed CompenNet.

Loss

ℓ1
ℓ2
SSIM
ℓ1+SSIM

PSNR↑ RMSE↓

SSIM↑

21.1782
20.7927
21.0134
21.7998

0.1527
0.1594
0.1566
0.1425

0.6727
0.6453
0.7591
0.7523

Uncompensated

12.1673

0.4342

0.4875

with pixel-wise ℓ1 loss, CompenNet outperforms TPS, TPS
textured and pix2pix on PSNR, RMSE and SSIM, this again
shows a clear advantage of our task-targeting formulation
and architecture.

5.5. Limitations

We focus on introducing the ﬁrst end-to-end solution to
projector compensation, for planar surfaces with decent, not
necessarily ideal, reﬂectance/geometric qualities. In addi-
tion, we have not experimented on surfaces with special re-
ﬂectance transport properties, such as water, strong specular
reﬂection, geometry inter-reﬂection and semi-gloss, thus it
may not work well in these cases.

6. Conclusions

In this paper, we reformulate the projector compensa-
tion problem as a learning problem and propose an accu-
rate and practical end-to-end solution named CompenNet.
In particular, CompenNet explicitly captures the complex
spectral interactions between the environment, the projec-
tion surface and the projector image. The effectiveness of
our formulation and architecture is veriﬁed by comprehen-
sive evaluations. Moreover, for the ﬁrst time, we provide
the community with a novel setup-independent evaluation
benchmark dataset. Our method is evaluated carefully on
the benchmark, and the results show that our end-to-end
learning solution outperforms state-of-the-arts both quali-
tatively and quantitatively by a signiﬁcant margin. To make
our model more practical, we propose a pre-train method,
which adds to the advantages over the prior works.

Acknowledgement. We thank the anonymous reviewers
for valuable and inspiring comments and suggestions.

6817

References

[1] Daniel G. Aliaga, Yu Hong Yeung, Alvin Law, Behzad
Sajadi, and Aditi Majumder. Fast high-resolution appear-
ance editing using superimposed projections. ACM Tran. on
Graphics, 31(2):13, 2012.

[2] Mark Ashdown, Takahiro Okabe, Imari Sato, and Yoichi
Sato. Robust content-dependent photometric projector com-
pensation. In Proceedings of IEEE International Workshop
on Projector Camera Systems (PROCAMS) 2006, 2006.

[3] Oliver Bimber, Andreas Emmerling, and Thomas Klemmer.
Embedded entertainment with smart projectors. Computer,
38(1):48–55, 2005.

[4] Oliver Bimber, Daisuke Iwai, Gordon Wetzstein, and
Anselm Grundh¨ofer. The visual computing of projector-
camera systems.
In Computer Graphics Forum, page 84,
2008.

[5] Aditya Deshpande, Jiajun Lu, Mao-Chuang Yeh, Min Jin
Chong, and David A Forsyth. Learning diverse image col-
orization. In CVPR, pages 2877–2885, 2017.

[6] Chao Dong, Chen Change Loy, Kaiming He, and Xiaoou
Tang. Learning a deep convolutional network for image
super-resolution. In ECCV, pages 184–199. Springer, 2014.
[7] Leon A. Gatys, Alexander S. Ecker, and Matthias Bethge.
Image style transfer using convolutional neural networks. In
CVPR, pages 2414–2423, 2016.

[8] Jason Geng. Structured-light 3D surface imaging: a tutorial.

Advances in Optics and Photonics, 3(2):128, jun 2011.

[9] Michael D. Grossberg, Harish Peri, Shree K. Nayar, and Pe-
ter N. Belhumeur. Making one object look like another:
controlling appearance using a projector-camera system. In
CVPR, June 2004.

[10] Anselm Grundh¨ofer and Oliver Bimber. Real-time adap-
tive radiometric compensation. IEEE TVCG, 14(1):97–108,
2008.

[11] Anselm Grundh¨ofer and Daisuke Iwai.

tolerant photometric projector compensation.
24(12):5086–5099, 2015.

Robust, error-
IEEE TIP,

[12] Anselm Grundh¨ofer and Daisuke Iwai. Recent advances in
projection mapping algorithms, hardware and applications.
In Computer Graphics Forum. Wiley Online Library, 2018.
[13] Kaiming He, Xiangyu Zhang, Shaoqing Ren, and Jian Sun.
Delving deep into rectiﬁers: Surpassing human-level perfor-
mance on imagenet classiﬁcation.
In ICCV, pages 1026–
1034, 2015.

[14] Kaiming He, Xiangyu Zhang, Shaoqing Ren, and Jian Sun.
In CVPR,

Deep residual learning for image recognition.
pages 770–778, 2016.

[15] Tai-Hsiang Huang, Ting-Chun Wang, and Homer H Chen.
Radiometric compensation of images projected on non-white
surfaces by exploiting chromatic adaptation and perceptual
anchoring. IEEE TIP, 26(1):147–159, 2017.

[16] Xun Huang and Serge J. Belongie. Arbitrary style transfer
in real-time with adaptive instance normalization. In ICCV,
pages 1510–1519, 2017.

[17] Satoshi Iizuka, Edgar Simo-Serra, and Hiroshi Ishikawa. Let
there be color!: joint end-to-end learning of global and local

image priors for automatic image colorization with simul-
taneous classiﬁcation. ACM Tran. on Graphics, 35(4):110,
2016.

[18] Phillip Isola, Jun-Yan Zhu, Tinghui Zhou, and Alexei A
Image-to-image translation with conditional adver-

Efros.
sarial networks. CVPR, 2017.

[19] Justin Johnson, Alexandre Alahi, and Li Fei-Fei. Perceptual
In

losses for real-time style transfer and super-resolution.
ECCV, pages 694–711. Springer, 2016.

[20] Ray Juang and Aditi Majumder. Photometric self-calibration
of a projector-camera system. In CVPR, pages 1–8. IEEE,
2007.

[21] Jiwon Kim, Jung Kwon Lee, and Kyoung Mu Lee. Accurate
image super-resolution using very deep convolutional net-
works. In CVPR, June 2016.

[22] Diederik P. Kingma and Jimmy Ba. Adam: A method for

stochastic optimization. In ICLR, volume 5, 2015.

[23] Christian Ledig, Lucas Theis, Ferenc Husz´ar, Jose Caballero,
Andrew Cunningham, Alejandro Acosta, Andrew P Aitken,
Alykhan Tejani, Johannes Totz, Zehan Wang, et al. Photo-
realistic single image super-resolution using a generative ad-
versarial network. In CVPR, volume 2, page 4, 2017.

[24] Yuqi Li, Aditi Majumder, Meenakshisundaram Gopi, Chong
Wang, and Jieyu Zhao. Practical radiometric compensation
for projection display on textured surfaces using a multidi-
mensional model. In Computer Graphics Forum, volume 37,
pages 365–375. Wiley Online Library, 2018.

[25] Gaku Narita, Yoshihiro Watanabe, and Masatoshi Ishikawa.
Dynamic projection mapping onto deforming non-rigid sur-
face using deformable dot cluster marker.
IEEE TVCG,
(1):1–1, 2017.

[26] Shree K. Nayar, Harish Peri, Michael D. Grossberg, and Pe-
ter N. Belhumeur. A projection system with radiometric
compensation for screen imperfections.
In ICCV-W PRO-
CAMS, volume 3, 2003.

[27] Adam Paszke, Sam Gross, Soumith Chintala, Gregory
Chanan, Edward Yang, Zachary DeVito, Zeming Lin, Al-
ban Desmaison, Luca Antiga, and Adam Lerer. Automatic
differentiation in pytorch. In NIPS-W, 2017.

[28] Ramesh Raskar, Jeroen Van Baar, Paul Beardsley, Thomas
Willwacher, Srinivas Rao, and Clifton Forlines. ilamps: geo-
metrically aware and self-conﬁguring projectors. ACM Tran.
on Graphics, 22(3):809–818, 2003.

[29] Olaf Ronneberger, Philipp Fischer, and Thomas Brox. U-net:
Convolutional networks for biomedical image segmentation.
In MICCAI, pages 234–241. Springer, 2015.

[30] Behzad Sajadi, Maxim Lazarov, and Aditi Majumder. Adict:
accurate direct and inverse color transformation. In ECCV,
pages 72–86. Springer, 2010.

[31] Christian Siegl, Matteo Colaianni, Marc Stamminger, and
Frank Bauer. Adaptive stray-light compensation in dynamic
multi-projection mapping. Computational Visual Media,
3(3):263–271, 2017.

[32] Christian Siegl, Matteo Colaianni, Lucas Thies, Justus Thies,
Michael Zollh¨ofer, Shahram Izadi, Marc Stamminger, and
Frank Bauer. Real-time pixel luminance optimization for
dynamic multi-projection mapping. ACM Tran. on Graph-
ics, 34(6):237, 2015.

6818

[33] Shoichi Takeda, Daisuke Iwai, and Kosuke Sato.

Inter-
reﬂection compensation of immersive projection display by
spatio-temporal screen reﬂectance modulation. IEEE TVCG,
22(4):1424–1431, 2016.

[34] Xintao Wang, Ke Yu, Chao Dong, and Chen Change Loy.
Recovering realistic texture in image super-resolution by
deep spatial feature transform. In CVPR, 2018.

[35] Liming Yang, Jean-Marie Normand, and Guillaume Moreau.
In IS-

Practical and precise projector-camera calibration.
MAR, pages 63–70. IEEE, 2016.

[36] Takenobu Yoshida, Chinatsu Horii, and Kosuke Sato. A vir-
tual color reconstruction system for real heritage with light
projection.
In Proceedings of International Conference on
Virtual Systems and Multimedia, volume 3, 2003.

[37] Li Zhang and Shree Nayar. Projection defocus analysis for
scene capture and image display. In ACM Tran. on Graphics,
volume 25, pages 907–915, 2006.

[38] Richard Zhang, Phillip Isola, and Alexei A. Efros. Color-
ful image colorization. In ECCV, pages 649–666. Springer,
2016.

[39] Hang Zhao, Orazio Gallo, Iuri Frosio, and Jan Kautz. Loss
functions for image restoration with neural networks. IEEE
TCI, 3(1):47–57, 2017.

[40] Jun-Yan Zhu, Taesung Park, Phillip Isola, and Alexei A
Efros. Unpaired image-to-image translation using cycle-
consistent adversarial networks. In ICCV, 2017.

6819

