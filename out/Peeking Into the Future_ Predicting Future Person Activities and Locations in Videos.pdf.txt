Predicting Future Person Activities and Locations in Videos

Peeking into the Future:

Junwei Liang1 ∗

Lu Jiang2

Juan Carlos Niebles3,2

Alexander Hauptmann1

Li Fei-Fei3,2

1Carnegie Mellon University

2Google AI

3Stanford University

{junweil,alex}@cs.cmu.edu, lujiang@google.com, {feifeili,jniebles}@cs.stanford.edu

Abstract

Deciphering human behaviors to predict their future
paths/trajectories and what they would do from videos is im-
portant in many applications. Motivated by this idea, this
paper studies predicting a pedestrian’s future path jointly
with future activities. We propose an end-to-end, multi-task
learning system utilizing rich visual features about human
behavioral information and interaction with their surround-
ings. To facilitate the training, the network is learned with
an auxiliary task of predicting future location in which the
activity will happen. Experimental results demonstrate our
state-of-the-art performance over two public benchmarks
on future trajectory prediction. Moreover, our method is
able to produce meaningful future activity prediction in ad-
dition to the path. The result provides the ﬁrst empirical
evidence that joint modeling of paths and activities beneﬁts
future path prediction. 1

1. Introduction

With the advancement in deep learning, systems now are
able to analyze an unprecedented amount of rich visual in-
formation from videos. An important analysis is forecast-
ing the future path of pedestrians, called future person tra-
jectory prediction. This problem has received increasing
attention in the computer vision community [13, 1, 7]. It
is regarded as an essential building block in video under-
standing because looking at the visual information from the
past to predict the future is useful in many applications like
self-driving cars, socially-aware robots [19], etc.

Humans navigate through public spaces often with spe-
ciﬁc purposes in mind, ranging from simple ones like en-
tering a room to more complicated ones like putting things
into a car. Such intention, however, is mostly neglected in
existing work. Consider the example in Fig. 1, the person
(at the top-right corner) might take different paths depend-
ing on their intention, e.g., they might take the green path
to transfer object or the yellow path to load object into the

∗Work partially done during a part-time research program at Google.
1Code and models are released at https://next.cs.cmu.edu

Future Activity - 
Object Transfer

Person

Future Activity - 

Loading

Future path 
Future activity 

Figure 1. Our goal is to jointly predict a person’s future path and
activity. The green and yellow line show two possible future tra-
jectories and two possible activities are shown in the green and
yellow boxes. Depending on the future activity, the person (top
right) may take different paths, e.g. the yellow path for “loading”
and the green path for “object transfer”.

car. Inspired by this, this paper is interested in modeling the
future path jointly with such intention in videos. We model
the intention in terms of a predeﬁned set of 29 activities pro-
vided by the NIST such as “loading”, “object transfer”, etc.
See supplementary material for the full list.

The joint prediction model can have two beneﬁts. First,
learning the activity together with the path may beneﬁt the
future path prediction. Intuitively, humans are able to read
from others’ body language to anticipate whether they are
going to cross the street or continue walking along the side-
In the example of Fig. 1, the person is carrying a
walk.
box, and the man at the bottom left corner is waving at the
person. Based on common sense, we may agree that the
person will take the green path instead of the yellow path.
Second, the joint model advances the capability of under-
standing not only the future path but also the future activity
by taking into account the rich semantic context in videos.
This increases the capabilities of automated video analytics
for social good, such as safety applications like anticipat-
ing pedestrian movement at trafﬁc intersections or a road
robot helping humans transport goods to a car. Note that
our techniques focus on predicting a few seconds into the
future, and should not be useful for non-routine activities.

To this end, we propose a multi-task learning model
called Next which has prediction modules for learning fu-

15725

ture paths and future activities simultaneously. As predict-
ing future activity is challenging, we introduce two new
techniques to address the issue. First, unlike most of the
existing work [13, 1, 7, 26, 21, 31] which oversimpliﬁes a
person as a point in space, we encode a person through rich
semantic features about visual appearance, body movement
and interaction with the surroundings, motivated by the fact
that humans derive such predictions by relying on similar
visual cues. Second, to facilitate the training, we introduce
an auxiliary task for future activity prediction, i.e. activity
location prediction. In the auxiliary task, we design a dis-
cretized grid which we call the Manhattan Grid as location
prediction target for the system.

To the best of our knowledge, our work is the ﬁrst on
joint future path and activity prediction in streaming videos,
and more importantly the ﬁrst to demonstrate such joint
modeling can considerably improve the future path predic-
tion. We empirically validate our model on two bench-
marks: ETH & UCY [23, 16], and ActEV/VIRAT [22, 3].
Experimental results show that our method outperforms
state-of-the-art baselines, achieving the best-published re-
sult on two common benchmarks and producing additional
prediction about the future activity. To summarize, the
contributions of this paper are threefold: (i) We conduct
a pilot study on joint future path and activity prediction
in videos. We are the ﬁrst to empirically demonstrate the
beneﬁt of such joint learning. (ii) We propose a multi-task
learning framework with new techniques to tackle the chal-
lenge of joint future path and activity prediction. (iii) Our
model achieves the best-published performance on two pub-
lic benchmarks. Ablation studies are conducted to verify the
contribution of the proposed sub-modules.

2. Related Work

Person-person models for trajectory prediction. Person
trajectory prediction models try to predict the future path
of people, mostly pedestrians. A large body of work learns
to predict person path by considering human social inter-
actions and behaviors in crowded scene [32, 34]. Zou et
al. in [36] learned human behaviors in crowds by imitat-
ing a decision-making process. Social-LSTM [1] added
social pooling to model nearby pedestrian trajectory pat-
terns. Social-GAN [7] added adversarial training on Social-
LSTM to improve performance. Different from these previ-
ous work, we represent a person by rich visual features in-
stead of simply considering a person as points in the scene.
Meanwhile we use geometric relation to explicitly model
the person-person relations in the scene, which has not been
used in previous work.
Person-scene models for trajectory prediction. A num-
ber of works focused on learning the effects of the phys-
ical scene, e.g., people tend to walk on the sidewalk in-
stead of grass. Kitani et al. in [13] used Inverse Rein-

forcement Learning to forecast human trajectory. Xie et
al. in [31] considered pedestrian as “particles” whose mo-
tion dynamics are modeled within the framework of La-
grangian Mechanics. Scene-LSTM [21] divided the static
scene into Manhattan Grid and predict pedestrian’s location
using LSTM. CAR-Net [12] proposed an attention network
on top of scene semantic CNN to predict person trajectory.
SoPhie [26] combined deep neural network features from
scene semantic segmentation model and generative adver-
sarial network (GAN) using attention to model person tra-
jectory. A disparity to [26] is that we explicitly pool scene
semantic features around each person at each time instant
so that the model can directly learn from such interactions.
Person visual features for trajectory prediction. Some
recent works have attempted to predict person path by uti-
lizing individual’s visual features instead of considering
them as points in the scene. Kooij et al. in [14] looked
at pedestrian’s faces to model their awareness to predict
whether they will cross the road using a Dynamic Bayesian
Network in dash-cam videos. Yagi et al. in [33] used per-
son keypoint features with a convolutional neural network
to predict future path in ﬁrst-person videos. Different from
these works, we consider rich visual semantics for future
prediction that includes both the person behavior and their
interactions with soundings .
Activity prediction/early recognition & Tracking. Many
works have been proposed to anticipate future human ac-
tions using Recurrent Neural Network (RNN). [20] and [2]
proposed different losses to encourage LSTM to recognize
actions early in internet videos. Srivastava et al. in [29] uti-
lized unsupervised learning with LSTM to reconstruct and
predict video representations. Another line of works is an-
ticipating human activities in robotic vision [15, 10]. There
are previous works that take into account multiple cues in
videos for tracking [11, 25] and group activity recogni-
tion [5, 28, 27]. Our work differs in that rich visual features
and focal attention are used for joint person path and activ-
ity prediction. Meanwhile, our work utilizes novel activity
location prediction (see Section 3.5) to bridge the two tasks.

3. Approach

Humans navigate through spaces often with speciﬁc pur-
poses in mind. Such purposes may considerably orient the
future trajectory/path. This motivates us to study the future
path prediction jointly with the intention. In this paper, we
model the intention in terms of a predeﬁned set of future
activities such as “walk”, “open door”, “talk”, etc.
Problem Formulation: Following [1, 7, 26], we assume
each scene is ﬁrst processed to obtain the spatial coordi-
nates of all people at different time instants. Based on the
coordinates, we can automatically extract their bounding
boxes. Our system observes the bounding box of all the
people from time 1 to Tobs, and objects if there are any, and

5726

Figure 2. Overview of our model. Given a sequence of frames containing the person for prediction, our model utilizes person behavior
module and person interaction module to encode rich visual semantics into a feature tensor.

predicts their positions (in terms of xy-coordinates) for time
Tobs+1 to Tpred, meanwhile estimating the possibilities of
future activity labels at time Tpred.

3.1. Network Architecture

Fig. 2 shows the overall network architecture of our Next
model. Unlike most of the existing work [13, 1, 7, 26, 21,
31] which oversimpliﬁes a person as a point in space, our
model employs two modules to encode rich visual informa-
tion about each person’s behavior and interaction with the
surroundings. Next has the following key components:
Person behavior module extracts visual information from
the behavioral sequence of the person.
Person interaction module looks at the interaction be-
tween a person and their surroundings.
Trajectory generator summarizes the encoded visual fea-
tures and predicts the future trajectory by the LSTM de-
coder with focal attention [17].
Activity prediction utilizes rich visual semantics to pre-
dict the future activity label for the person. In addition, we
divide the scene into a discretized grid of multiple scales,
which we call the Manhattan Grid, to compute classiﬁca-
tion and regression for robust activity location prediction.

In the rest of this section, we will introduce the above

modules and the learning objective in details.

3.2. Person Behavior Module

This module encodes the visual information about every
individual in a scene. As opposed to oversimplifying a per-
son as a point in space, we model the person’s the appear-
ance and body movement. To model appearance changes
of a person, we utilize a pre-trained object detection model
with “RoIAlign” [8] to extract ﬁxed size CNN features for
each person bounding box. See Fig. 3. We average the fea-
tures along the spatial dimensions for each person and feed
them into an LSTM encoder. Finally, we obtain a feature
representation of Tobs × d, where d is the hidden size of the
LSTM. To capture the body movement, we utilize a person
keypoint detection model trained on MSCOCO dataset [6]
to extract person keypoint information. We apply the lin-
ear transformation to embed the keypoint coordinates be-
fore feeding into the LSTM encoder. The shape of the en-
coded feature has the shape of Tobs × d. These appearance

Figure 3. Person behavior module given a sequence of person
frames. See Section 3.2.

and movement features are commonly used in a wide va-
riety of studies and thus do not introduce new concern on
machine learning fairness.

3.3. Person Interaction Module

This module looks at the interaction between a person
and their surroundings, i.e. person-scene and person-objects
interactions.
Person-scene. To encode the nearby scene of a person, we
ﬁrst use a pre-trained scene segmentation model [4] to ex-
tract pixel-level scene semantic classes for each frame. We
use totally Ns = 10 common scene classes, such as roads,
sidewalks, etc. The scene semantic features are integers
(class indexes) of the size Tobs × h × w, where h, w are
the spatial resolution. We ﬁrst transform the integer ten-
sor into Ns binary masks (one mask for each class), and
average along the temporal dimension. This results in Ns
real-valued masks, each of the size of h × w. We apply two
convolutional layers on the mask feature with a stride of 2
to get the scene CNN features in two scales.

Given a person’s xy-coordinate, we pool the scene fea-
tures at the person’s current location from the convolution
feature map. As the example shown at the bottom of Fig. 4,
the red part of the convolution feature is the discretized lo-
cation of the person at the current time instant. The recep-
tive ﬁeld of the feature at each time instant, i.e. the size
of the spatial window around the person which the model
looks at, depends on which scale is being pooled from and
the convolution kernel size. In our experiments, we set the
scale to 1 and the kernel size to 3, which means our model
looks at the 3-by-3 surrounding area of the person at each
time instant. The person-scene representation for a person
is in RTobs×C , where C is the number of channels in the
convolution layer. We feed this into a LSTM encoder in
order to capture the temporal information and get the ﬁnal

5727

Figure 4. The person interaction module includes person-scene
and person-objects modeling. See Section 3.3.

person-scene features in RTobs×d.
Person-objects. Unlike previous work [1, 7] which relies
on LSTM hidden states to model nearby people, our module
explicitly models the geometric relation and the object type
of all the objects/persons in the scene. At any time instant,
given the observed box of a person (xb, yb, wb, hb) and K
other objects/persons in the scene {(xk, yk, wk, hk)|k ∈
[1, K]}, we encode the geometric relation into G ∈ RK×4,
the k-th row of which equals to:

Gk = [log(

|xb − xk|

wb

), log(

|yb − yk|

hb

), log(

wk
wb

), log(

hk
hb

)] (1)

This encoding computes the geometric relation in terms of
the geometric distance and the fraction box size. We use a
logarithmic function to reﬂect our observation that human
trajectories are more likely to be affected by close-by ob-
jects or people. This encoding has been proven effective in
object detection [9]. For the object type, we simply use one-
hot encoding to get the feature in RK×No , where No is the
total number of object classes. We then embed the geomet-
ric features and the object type features at the current time
into de-dimensional vectors and feed the embedded features
into an LSTM encoder to obtain the ﬁnal feature in RTobs×d.
As shown in the example from Fig. 4, the person-objects
feature can capture how far away the person is to the other
person and the cars. The person-scene feature can capture
whether the person is near the sidewalk or grass. We de-
sign this information to the model with the hope of learning
things like a person walks more often on the sidewalk than
the grass and tends to avoid bumping into cars.

3.4. Trajectory Generation with Focal Attention

As discussed, the above four types of visual features,
i.e. appearance, body movement, person-scene, and person-
objects, are encoded by separate LSTM encoders into the
same dimension. Besides, given a person’s trajectory output
from the last time instant, we extract the trajectory embed-
ding by

et−1 = tanh{We[xt−1, yt−1]} + be ∈ Rd,

(2)

where [xt−1, yt−1] is the trajectory prediction of time t − 1
and We, be are learnable parameters. We then feed the em-
bedding et−1 into another LSTM encoder for the trajectory.

The hidden states of all encoders are packed into a tensor
named Q ∈ RM ×Tobs×d, where M = 5 denotes the total
number of features and d is the hidden size of the LSTM.

Following [7], we use an LSTM decoder to directly pre-
dict the future trajectory in the xy-coordinate. The hid-
den state of this decoder is initialized using the last state
of the person’s trajectory LSTM encoder. At each time in-
stant, the xy-coordinate will be computed from the decoder
state ht = LSTM(ht−1, [et−1, ˜qt]) and by a fully connected
layer. ˜qt is an important attended feature vector which sum-
marizes salient cues in the input features Q. We employ an
effective focal attention [17] to this end. It was originally
proposed to carry out multimodal inference over a sequence
of images for visual question answering. The key idea is to
project multiple features into a space of correlation, where
discriminative features can be easier to capture by the atten-
tion mechanism. To do so, we compute a correlation matrix
St ∈ RM ×Tobs at every time instant t, where each entry
St
ij = h⊤
t−1 · Qij: is measured using the dot product similar-
ity and : is a slicing operator that extracts all elements from
that dimension. Then we compute two attention matrices:

M

i:) ∈ RM
St

At = softmax(

max
i=1
1:), · · · , softmax(St
Bt = [softmax(St
Then the attended feature vector is given by:

(3)

M :)] ∈ RM ×Tobs (4)

M

˜qt =

X

At
j

j=1

Tobs

X

k=1

Bt

jkQjk: ∈ Rd

(5)

As shown,
the focal attention models the correlation
among different features and summarizes them into a low-
dimensional attended vector. Section 4 shows its beneﬁt.

3.5. Activity Prediction

Since the trajectory generation module outputs one lo-
cation at a time, errors may accumulate across time and the
ﬁnal destination would deviate from the actual location. Us-
ing the wrong location for activity prediction may lead to
bad accuracy. To counter this disadvantage, we introduce
an auxiliary task, i.e. activity location prediction, in addi-
tion to predicting the future activity label of the person. We
describe the two prediction modules in the following.
Activity location prediction with the Manhattan Grid.
To bridge the gap between trajectory generation and activity
label prediction, we propose an activity location prediction
module to predict the ﬁnal location of where the person will
engage in the future activity. The activity location predic-
tion includes two tasks, location classiﬁcation and location
regression. As illustrated in Fig. 5, we ﬁrst divide a video
frame into a discretized h×w grid, namely Manhattan Grid,
and learn to classify the correct grid block and at the same
time to regress from the center of that grid block to the ac-
tual location. Speciﬁcally, the aim for the classiﬁcation task
is to predict the correct grid block in which the ﬁnal location

5728

dicts the future activity at time instant Tpred. We compute
the future Na activity probabilities using the concatenated
last hidden states of the encoders:

clsact = softmax(Wa · [Q1Tobs:, · · · , QM Tobs:])

(6)

where Wa is a learnable weight. The future activity of a per-
son could be multi-class, e.g. a person could be “walking”
and “carrying” at the same time.
3.6. Training

The entire network is trained end-to-end by minimizing
a multi-task objective. The primary loss is the common
L2 loss between the predicted future trajectories and the
ground-truth trajectories [21, 7, 26]. The loss is summed
into Lxy over all persons from Tobs+1 to Tpred.

i=1ce(clsi

The second category of

loss is the activity loca-
tion classiﬁcation and regression loss discussed in Sec-
tion 3.5. We have Lgrid cls = PN
grid),
where cls∗i
grid is the ground-truth ﬁnal location grid block
ID for the ith training trajectory. Likewise Lgrid reg =
PN
grid is the ground-
truth difference to the correct grid block center. This loss
is designed to bridge the gap between the trajectory gener-
ation task and activity label prediction task.

i=1 smoothL1 (rgi

grid) and rg∗i

grid, cls∗i

grid, rg∗i

The third loss is for activity label prediction. We employ
act). The

the cross-entropy loss: Lact = PN
ﬁnal loss is then calculated from:

i=1 ce(clsi

act, cls∗i

L = Lxy + λ(Lgrid cls + Lgrid reg) + Lact

(7)

We use a balance controller λ = 0.1 for location destination
prediction to offset their higher loss values during training.

4. Experiments

We evaluate the proposed Next model on two com-
mon benchmarks for future path prediction: ETH [23] and
UCY [16], and ActEV/VIRAT [3, 22].

4.1. ActEV/VIRAT

Dataset & Setups. ActEV/VIRAT [3] is a public dataset
released by NIST in 2018 for activity detection research in
streaming video (https://actev.nist.gov/). This dataset
is an improved version of VIRAT [22], with more videos
and annotations. It includes 455 videos at 30 fps from 12
scenes, more than 12 hours of recordings. Most of the
videos have a high resolution of 1920x1080. We use the
ofﬁcial training set for training and the ofﬁcial validation
set for testing. Following [1, 7, 26], the models observe 3.2
seconds (8 frames) of every person and predict the future
4.8 seconds (12 frames) of person trajectory. We downsam-
ple the videos to 2.5 fps and extract person trajectories using
the code released in [7]. Since we do not have the homo-
graphic matrix, we use the pixel values for the trajectory
coordinates as it is done in [33].
Evaluation Metrics. Following prior work [1, 7, 26], we
use two error metrics for person trajectory prediction:

5729

Figure 5. Activity location prediction with classiﬁcation and re-
gression on the multi-scale Manhattan Grid. See Section 3.5.

coordinates reside. After classifying the grid block, the aim
for the regression task is to predict the deviation of the grid
block center (green dots in the ﬁgure) to the ﬁnal location
coordinate (the end of green arrows). The reason for adding
the regression task are: (i) it will provide more precise loca-
tions than just a grid block area; (ii) it is complementary to
the trajectory prediction which requires xy-coordinates lo-
calization. We repeat this process on the Manhattan Grid of
different scales and use separate prediction heads to model
them. These prediction heads are trained end-to-end with
the rest of the model. Our idea is partially inspired by the re-
gion proposal network [24] and our intuition is that similar
to object detection problem, we need accurate localization
using multi-scale features in a cost-efﬁcient way.

As shown in Fig. 5, we ﬁrst concatenate the scene CNN
features (see Section 3.3) with the last hidden state of the
encoders (see Section 3.4). For compatibility, we tile the
hidden state Q:Tobs: along the height and width dimension
resulting in a tensor of the size M × d × w · h, where w · h
is the total number of the grid blocks. The hidden state con-
tains rich information from all encoders and allow gradients
ﬂow smoothly through from prediction to feature encoders.
The concatenated features are fed into two separate con-
volution layers for classiﬁcation and regression. The con-
volution output for grid classiﬁcation clsgrid ∈ Rw·h×1 in-
dicates the probability of each grid block being the correct
destination. In comparison, the convolution output for grid
regression rggrid ∈ Rw·h×2 denotes the deviation, in the
xy-coordinates, between the ﬁnal destination and every grid
block center. A row of rggrid represents the difference to a
grid block, calculated from [xt −xci, yt −yci] where (xt, yt)
denotes the predicted location and (xci, yci) is the center of
the i-th grid block. The ground truth for the grid regression
can be computed in a similar way. During training, only the
correct grid block receives gradients for regression. Recent
work [21] also incorporates the grid for location prediction.
Our model differs in that we link grid locations to scene se-
mantics, and use a classiﬁcation layer and a regression layer
together to make more robust predictions.
Activity label prediction. Given the encoded visual obser-
vation sequence, the activity label prediction module pre-

Method

ADE

FDE

move ADE

move FDE

Linear
LSTM
Social LSTM
SGAN-PV
SGAN-V
Ours
Ours-Noisy
SGAN-PV-20
SGAN-V-20
Ours-20

l
e
d
o
M

e
l
g
n
i
S

s
t
u
p
t
u
O
0
2

32.19
23.98
23.10
30.51
30.48
17.99
34.32
23.11
21.16
16.00

60.92
44.97
44.27
60.90
62.17
37.24
57.04
41.81
38.05
32.99

42.82
30.55
28.59
37.65
35.41
20.34
40.33
29.80
26.97
17.97

80.18
56.25
53.75
73.01
68.77
42.54
66.73
53.04
47.57
37.28

Table 1. Comparison to baseline methods on the ActEV/VIRAT
validation set. Top uses the single model output. Bottom uses 20
outputs. Numbers denote errors thus lower are better.

i) Average Displacement Error (ADE): The average Eu-
clidean distance between the ground truth coordinates and
the prediction coordinates over all time instants,

ADE = PN

i=1 PTpred

t=1 k ˜Y i
N ∗ Tpred

t − Y i

t k2

(8)

ii) Final Displacement Error (FDE): The euclidean distance
between the predicted points and the ground truth point at
the ﬁnal prediction time instant Tpred,

FDE = PN

i=1k ˜Y i

Tpred
N

− Y i

Tpred

k2

(9)

errors

are measured in the pixel

The
space on
ActEV/VIRAT whereas in meters on ETH and UCY.
For
future activity prediction, we use mean average
precision (mAP).
Baseline methods. We compare our method with the two
simple baselines and two recent methods: Linear is a single
layer model that predicts the next coordinates using a linear
regressor based on the previous input point. LSTM is a sim-
ple LSTM encoder-decoder model with coordinates input
only. Social LSTM [1]: We train the social LSTM model to
directly predict trajectory coordinates instead of Gaussian
parameters. SGAN [7]: We train two model variants (PV &
V) detailed in the paper using the released code from Social-
GAN [7] (https://github.com/agrimgupta92/sgan/).

Aside from using a single model at test time, Gupta et
al. [7] also used 20 model outputs per frame and selected the
best prediction to count towards the ﬁnal performance. Fol-
lowing the practice, we train 20 identical models using ran-
dom initializations and report the same evaluation results,
which are marked “20 outputs” in Table 1.
Implementation Details. We use LSTM cell for both the
encoder and decoder. The embedding size de is set to 128,
and the hidden sizes d of encoder and decoder are both 256.
Ground truth bounding boxes of persons and objects are
used during the observation period (from time 1 to Tobs).
For person keypoint features, we utilize the pre-trained pose
estimator from [6] to extract 17 joints for each ground truth
person box. For person appearance feature, we utilize the
pre-trained object detection model FPN [18] to extract ap-

pearance features from person bounding boxes. The scene
semantic segmentation features are resized to (64, 36) and
the scene convolution layers are set to have a kernel size of
3, a stride of 2 and the channel dimension is 64. We resize
all videos to 1920x1080 and utilize two grid scales, 32x18
and 16x9. The activation function is tanh if not stated oth-
erwise and we do not use any normalization. For training,
we use Adadelta optimizer [35] with an initial learning rate
of 0.1 and the dropout value is 0.3. We use gradient clip-
ping of 10 and weight decay of 0.0001. For Social LSTM,
the neighbor is set to 256 pixels as in [33]. All baselines
use the same embedding size and hidden size as our model,
therefore all encoder-decoder models have about the same
numbers of parameters. Other hyper-parameters we use for
the baselines follow the ones in [7].

Main Results. Table 1 lists the testing error, where the top
part is the error of a single model output and the bottom
shows the best result of 20 model outputs. The “ADE” and
“FDE” columns summarize the error over all trajectories,
and the last two columns further detail the subset trajecto-
ries of moving activities (“walk”, “run”, and “ride bike”).
We report the mean performance of 20 runs of our single
model at Row 7. The standard deviation on “ADE” metric is
0.043. Full numbers can be found in supplemental material.
As we see, our method performs favorably against other
methods, especially in predicting the trajectories of mov-
ing activities. For example, our model outperforms Social-
LSTM and Social-GAN by a large margin of 10 points in
terms of the “move FDE” metric. The results demonstrate
the efﬁcacy of the proposed model and its state-of-the-art
performance on future trajectory prediction. Additionally,
as a step towards real-world application, we train our model
with noisy outputs from object detection and tracking dur-
ing the observation period. For evaluation, following com-
mon practise in tracking [30], for each trajectory, we as-
sume the person bounding box location at time 1 is close to
the ground truth location, and we evaluate the model pre-
diction using tracking inputs and other visual features from
time 1 to Tobs as shown in Table 1 “Ours-Noisy”.

Qualitative analysis. We visualize and compare our model
outputs and the baselines in Fig. 6. As we see, our method
outputs more accurate trajectories for each person, espe-
cially for the two persons on the right that were about to
accelerate their movement. Our method is also able to pre-
dict most of the activities correct except one (walk versus
run). Our model successfully predicts the activity “carry”
and the static trajectory of the person near the car, while in
Fig 6(c), SGAN predicts several moving trajectories in dif-
ferent directions. We further provide a qualitative analysis
of our model predictions. (i) Successful cases: In Fig 6(e)
and 6(f), both the trajectory prediction and future activity
prediction are correct. (ii) Imperfect case: In Fig 6(g), al-
though the trajectory prediction is mostly correct, our model

5730

Figure 6. (Better viewed in color.) Qualitative comparison between our method and the baselines. Yellow path is the observable trajectory
and green path is the ground truth trajectory during the prediction period. Predictions are shown as blue heatmaps. Our model also predicts
the future activity, which is shown in the text and with the person pose template.

Method
Our full model
No p-behavior
No p-interaction
No focal attention
No act label loss
No act location loss
No multi-task
Table 2. Multi-task performance & ablation experiments.

FDE ↓ Act mAP ↑
37.11
39.82
39.35
42.08
41.45
39.91
42.79

ADE ↓
17.91
18.99
18.83
19.93
19.48
19.07
20.37

0.192
0.139
0.163
0.144

0.152

-

-

predicts that the person is going to open the door of the car,
given the observation that he is walking towards the side
of the car. (iii) Failed case: In Fig 6(h), our model fails to
capture the subtle interactions between the two persons and
predicts that they will go separate ways, while in fact they
are going to stop and talk to each other.

4.2. Ablation Model

shown in the ﬁrst three rows in Table 2, both features are im-
portant to trajectory prediction while person behavior fea-
tures are more essential for activity prediction. Individual
feature ablations are in the supplementary material.
Effect of focal attention. In the fourth row of Table 2, we
replace focal attention in Eq. (5) with a simple average of
the last hidden states from all encoders. Both trajectory and
activity prediction hurt as a result.
Impact of multi-task learning. In the last three rows of
Table 2, we remove the additional tasks of predicting the
activity label or the activity location or both to see the im-
pact of multi-task learning. Results show the beneﬁt of our
multi-task learning method.

4.3. ETH & UCY

In Table 2, we systematically evaluate our method
through a series of ablation experiments, where “ADE” and
“FDE” denotes the errors thus lower are better. “Act” is the
mean Average Precision (mAP) of the activity label predic-
tion over 29 activities and higher are better.
Efﬁcacy of rich visual features. We investigate the feature
contribution of person behavior and person interactions. As

Dataset. ETH [23] and UCY [16] are common datasets
for person trajectory prediction benchmark [1, 7, 21, 26].
Same as previous work [1, 7, 21, 26], we report perfor-
mance by averaging over both datasets. We use the same
data processing method and settings detailed in [7]. This
benchmark includes videos from ﬁve scenes: ETH, HO-
TEL, UNIV, ZARA1 and ZARA2. Leave-one-scene-out

5731

Method

ETH

HOTEL

UNIV *

ZARA1

ZARA2

AVG

l
e
d
o
M

e
l
g
n
i

Linear
LSTM
Alahi et al. [1]
Ours-single-model
S
s Gupta et al. [7](V)
t
u
p
t
u
O
0
2

Gupta et al. [7](PV)
Sadeghian et al. [26]
Ours-20

1.33 / 2.94
1.09 / 2.41
1.09 / 2.35
0.88 / 1.98
0.81 / 1.52
0.87 / 1.62
0.70 / 1.43
0.73 / 1.65

0.39 / 0.72
0.86 / 1.91
0.79 / 1.76
0.36 / 0.74
0.72 / 1.61
0.67 / 1.37
0.76 / 1.67
0.30 / 0.59

0.82 / 1.59
0.61 / 1.31
0.67 / 1.40
0.62 / 1.32
0.60 / 1.26
0.76 / 1.52
0.54 / 1.24
0.60 / 1.27

0.62 / 1.21
0.41 / 0.88
0.47 / 1.00
0.42 / 0.90
0.34 / 0.69
0.35 / 0.68
0.30 / 0.63
0.38 / 0.81

0.77 / 1.48
0.52 / 1.11
0.56 / 1.17
0.34 / 0.75
0.42 / 0.84
0.42 / 0.84
0.38 / 0.78
0.31 / 0.68

0.79 / 1.59
0.70 / 1.52
0.72 / 1.54
0.52 / 1.14
0.58 / 1.18
0.61 / 1.21
0.54 / 1.15
0.46 / 1.00

Table 3. Comparison of different methods on ETH (Column 3 and 4) and UCY datasets (Column 5-7). * We use a smaller test set on UNIV
since 1 video is unable to download.

data split is used and we evaluate our model on 5 sets of
data. We follow the same testing scenario and baselines as
in the previous section. We have also cited the latest state-
of-the-art results from [26]. Due to 1 video cannot be down-
loaded, we use a smaller test set for UNIV and a smaller
training set across all splits. The other 4 test sub-datasets
are the same as in [7] so the numbers are comparable.

Since there is no activity annotation, we do not use activ-
ity label prediction module in our model. Since the annota-
tion is only a point for each person and the human scale in
each video doesn’t change much, we apply a ﬁxed size ex-
pansion from points for each video to get the person bound-
ing box annotation for feature pooling. We do not use any
other bounding box. We don’t use any additional annotation
compared to baselines to ensure a fair comparison.
Implementation Details. We do not use person keypoint
feature. Final location loss and trajectory L2 loss are used.
Unlike [26], we don’t utilize any data augmentation. We
train our model for 40 epochs with the adadelta optimizer.
Other hyper-parameters are the same as in Section 4.1.
Results & Analysis. Experiments are shown in Table 3.
Our model outperforms other methods in both evaluations,
where we obtain the best-published single model on ETH
and best average performance on the ETH & UCY bench-
mark. As shown in the table, our model performs much
better on HOTEL and ZARA2. The average movement at
each time-instant in these two scenes are 0.18 and 0.22, re-
spectively, much lower than others: 0.389 (ZARA1), 0.460
(ETH), 0.258 (UNIV). Recall that the leave-one-scene-out
data split is used in training. The results suggest other
methods are more likely to overﬁt to the trajectories of
large movements, e.g. Social-GAN [7] often ”over-shoot”
when predicting the future trajectories. In comparison, our
method uses attention to ﬁnd the ”right” visual signal and
show better performance for trajectories of small move-
ments on HOTEL and ZARA2 while still being competitive
for trajectories of large movements.

5. Conclusion

In this paper, we have presented a new neural network
model for predicting human trajectory and future activity
simultaneously. We ﬁrst encode a person through rich vi-

sual features capturing human behaviors and interactions
with their surroundings. Then we add an auxiliary task of
predicting the activity locations to facilitate the joint train-
ing process. We refer to the resulting model as Next. We
showed the efﬁcacy of our model on both popular and recent
large-scale video benchmarks on person trajectory predic-
tion. In addition, we quantitatively and qualitatively demon-
strated that our Next model successfully predicts meaning-
ful future activities.

Our research goal is to promote human safety in appli-
cations such as robotics or autonomous driving. We experi-
ment on the public benchmark ActEV, the primary driver of
which is to support public safety and trafﬁc monitoring and
management by automatic activity detection in streaming
video2. Our approach works on a predeﬁned set of 29 activ-
ities provided by NIST, such as “loading”, “object transfer”.
See supplementary material for the full list. Our system
may not work beyond these predeﬁned activities.

Future research into activity and path prediction may im-
plicate ethical issues around privacy, safety and fairness and
ought to be considered carefully before being used in real-
world applications. Our method for predicting trajectory
and activity has not been tested for different populations of
people. As such, it is important to further evaluate these
issues before employing the model in situations that may
differentially impact people.

Acknowledgements This work was partially supported
by the ﬁnancial assistance award 60NANB17D156 from
U.S. Department of Commerce, National Institute of Stan-
dards and Technology (NIST). This work was also sup-
ported by the Intelligence Advanced Research Projects Ac-
tivity (IARPA) via Department of Interior/ Interior Busi-
ness Center (DOI/IBC) contract number D17PC00340. The
U.S. Government is authorized to reproduce and distribute
reprints for Governmental purposes notwithstanding any
copyright annotation/herein. Disclaimer: The views and
conclusions contained herein are those of the authors and
should not be interpreted as necessarily representing the of-
ﬁcial policies or endorsements, either expressed or implied,
of IARPA, NIST, DOI/IBC, or the U.S. Government.

2https://actev.nist.gov/1B-Evaluation

5732

References

[1] A. Alahi, K. Goel, V. Ramanathan, A. Robicquet,
L. Fei-Fei, and S. Savarese. Social lstm: Human tra-
jectory prediction in crowded spaces. In CVPR, 2016.
1, 2, 3, 4, 5, 6, 7, 8

[2] M. S. Aliakbarian, F. Saleh, M. Salzmann, B. Fer-
nando, L. Petersson, and L. Andersson. Encouraging
lstms to anticipate actions very early. 2017. 2

[3] G. Awad, A. Butt, K. Curtis, J. Fiscus, A. Godil, A. F.
Smeaton, Y. Graham, W. Kraaij, G. Qunot, J. Magal-
haes, D. Semedo, and S. Blasi. Trecvid 2018: Bench-
marking video activity detection, video captioning and
matching, video storytelling linking and video search.
In TRECVID, 2018. 2, 5

[4] L.-C. Chen, Y. Zhu, G. Papandreou, F. Schroff, and
H. Adam. Encoder-decoder with atrous separable con-
volution for semantic image segmentation. In ECCV,
2018. 3

[5] W. Choi and S. Savarese. Understanding collec-
tive activitiesof people from videos.
IEEE transac-
tions on pattern analysis and machine intelligence,
36(6):1242–1257, 2014. 2

[6] H.-S. Fang, S. Xie, Y.-W. Tai, and C. Lu. RMPE: Re-
gional multi-person pose estimation. In ICCV, 2017.
3, 6

[7] A. Gupta, J. Johnson, S. Savarese, Li Fei-Fei, and
A. Alahi. Social gan: Socially acceptable trajectories
with generative adversarial networks. In CVPR, 2018.
1, 2, 3, 4, 5, 6, 7, 8

[8] K. He, G. Gkioxari, P. Doll´ar, and R. Girshick. Mask

r-cnn. In ICCV, 2017. 3

[9] H. Hu, J. Gu, Z. Zhang, J. Dai, and Y. Wei. Relation

networks for object detection. In CVPR, 2018. 4

[10] A. Jain, H. S. Koppula, B. Raghavan, S. Soh, and
A. Saxena. Car that knows before you do: Anticipat-
ing maneuvers via learning temporal driving models.
In CVPR, 2015. 2

[11] A. Jain, A. R. Zamir, S. Savarese, and A. Sax-
ena. Structural-rnn: Deep learning on spatio-temporal
graphs.
In Proceedings of the IEEE Conference
on Computer Vision and Pattern Recognition, pages
5308–5317, 2016. 2

[12] N. Jaipuria, G. Habibi, and J. P. How. A trans-
ferable pedestrian motion prediction model for inter-
sections with different geometries.
arXiv preprint
arXiv:1806.09444, 2018. 2

[14] J. F. P. Kooij, N. Schneider, F. Flohr, and D. M.
Gavrila. Context-based pedestrian path prediction. In
ECCV, 2014. 2

[15] H. S. Koppula and A. Saxena. Anticipating human
activities using object affordances for reactive robotic
response. IEEE transactions on pattern analysis and
machine intelligence, 38(1):14–29, 2016. 2

[16] A. Lerner, Y. Chrysanthou, and D. Lischinski. Crowds
In Computer Graphics Forum, pages

by example.
655–664. Wiley Online Library, 2007. 2, 5, 7

[17] J. Liang, L. Jiang, L. Cao, L.-J. Li, and A. Hauptmann.
Focal visual-text attention for visual question answer-
ing. In CVPR, 2018. 3, 4

[18] T.-Y. Lin, P. Doll´ar, R. B. Girshick, K. He, B. Hariha-
ran, and S. J. Belongie. Feature pyramid networks for
object detection. In CVPR, 2017. 6

[19] M. Luber, J. A. Stork, G. D. Tipaldi, and K. O. Arras.
People tracking with human motion predictions from
social forces. In ICRA, 2010. 1

[20] S. Ma, L. Sigal, and S. Sclaroff. Learning activity
progression in lstms for activity detection and early
detection. In CVPR, 2016. 2

[21] H. Manh and G. Alaghband. Scene-lstm: A model
arXiv preprint

for human trajectory prediction.
arXiv:1808.04018, 2018. 2, 3, 5, 7

[22] S. Oh, A. Hoogs, A. Perera, N. Cuntoor, C.-C. Chen,
J. T. Lee, S. Mukherjee, J. Aggarwal, H. Lee, L. Davis,
et al. A large-scale benchmark dataset for event recog-
nition in surveillance video. In CVPR, 2011. 2, 5

[23] S. Pellegrini, A. Ess, and L. Van Gool.

Improving
data association by joint modeling of pedestrian tra-
jectories and groupings. In ECCV, 2012. 2, 5, 7

[24] S. Ren, K. He, R. Girshick, and J. Sun. Faster r-cnn:
Towards real-time object detection with region pro-
posal networks. In NIPS, 2015. 5

[25] A. Sadeghian, A. Alahi, and S. Savarese. Tracking
the untrackable: Learning to track multiple cues with
long-term dependencies. In Proceedings of the IEEE
International Conference on Computer Vision, pages
300–311, 2017. 2

[26] A. Sadeghian, V. Kosaraju, A. Sadeghian, N. Hirose,
and S. Savarese. Sophie: An attentive gan for predict-
ing paths compliant to social and physical constraints.
arXiv preprint arXiv:1806.01482, 2018. 2, 3, 5, 7, 8

[27] T. Shu, S. Todorovic, and S.-C. Zhu.

Cern:
conﬁdence-energy recurrent network for group activ-
ity recognition. In IEEE Conference on Computer Vi-
sion and Pattern Recognition, volume 2, 2017. 2

[13] K. M. Kitani, B. D. Ziebart, J. A. Bagnell, and
M. Hebert. Activity forecasting. In ECCV, 2012. 1, 2,
3

[28] T. Shu, D. Xie, B. Rothrock, S. Todorovic, and
S. Chun Zhu. Joint inference of groups, events and hu-
man roles in aerial videos. In Proceedings of the IEEE

5733

Conference on Computer Vision and Pattern Recogni-
tion, pages 4576–4584, 2015. 2

[29] N. Srivastava, E. Mansimov, and R. Salakhudinov.
Unsupervised learning of video representations using
lstms. In ICML, 2015. 2

[30] Y. Wu, J. Lim, and M.-H. Yang. Object tracking
benchmark.
IEEE Transactions on Pattern Analysis
and Machine Intelligence, 37(9):1834–1848, 2015. 6

[31] D. Xie, T. Shu, S. Todorovic, and S.-C. Zhu. Learning
and inferring dark matter and predicting human intents
and trajectories in videos. IEEE transactions on pat-
tern analysis and machine intelligence, 40(7):1639–
1652, 2018. 2, 3

[32] Y. Xu, Z. Piao, and S. Gao. Encoding crowd interac-
tion with deep neural network for pedestrian trajectory
prediction. In CVPR, 2018. 2

[33] T. Yagi, K. Mangalam, R. Yonetani, and Y. Sato.
In

Future person localization in ﬁrst-person videos.
CVPR, 2018. 2, 5, 6

[34] S. Yi, H. Li, and X. Wang. Pedestrian behavior under-
standing and prediction with deep neural networks. In
ECCV, 2016. 2

[35] M. D. Zeiler. Adadelta: an adaptive learning rate

method. arXiv preprint arXiv:1212.5701, 2012. 6

[36] H. Zou, H. Su, S. Song, and J. Zhu. Understanding
human behaviors in crowds by imitating the decision-
making process. arXiv preprint arXiv:1801.08391,
2018. 2

5734

