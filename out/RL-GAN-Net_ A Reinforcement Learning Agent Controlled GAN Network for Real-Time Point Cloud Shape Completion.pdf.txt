RL-GAN-Net: A Reinforcement Learning Agent Controlled GAN Network for

Real-Time Point Cloud Shape Completion

Muhammad Sarmad

Hyunjoo Jenny Lee∗

Young Min Kim∗

KAIST

South Korea

KAIST

South Korea

KIST, SNU
South Korea

sarmad@kaist.ac.kr

hyunjoo.lee@kaist.ac.kr

youngmin.kim@snu.ac.kr

Abstract

We present RL-GAN-Net, where a reinforcement learn-
ing (RL) agent provides fast and robust control of a genera-
tive adversarial network (GAN). Our framework is applied
to point cloud shape completion that converts noisy, par-
tial point cloud data into a high-ﬁdelity completed shape by
controlling the GAN. While a GAN is unstable and hard to
train, we circumvent the problem by (1) training the GAN
on the latent space representation whose dimension is re-
duced compared to the raw point cloud input and (2) using
an RL agent to ﬁnd the correct input to the GAN to gen-
erate the latent space representation of the shape that best
ﬁts the current input of incomplete point cloud. The sug-
gested pipeline robustly completes point cloud with large
missing regions. To the best of our knowledge, this is the
ﬁrst attempt to train an RL agent to control the GAN, which
effectively learns the highly nonlinear mapping from the in-
put noise of the GAN to the latent space of point cloud. The
RL agent replaces the need for complex optimization and
consequently makes our technique real time. Additionally,
we demonstrate that our pipelines can be used to enhance
the classiﬁcation accuracy of point cloud with missing data.

1. Introduction

Acquisition of 3D data, either from laser scanners, stereo
reconstruction, or RGB-D cameras, is in the form of the
point cloud, which is a list of Cartesian coordinates. The
raw output usually suffers from large missing region due
to limited viewing angles, occlusions, sensor resolution, or
unstable measurement in the texture-less region (stereo re-
construction) or specular materials. To utilize the measure-
ments, further post-processing is essential which includes
registration, denoising, resampling, semantic understanding
and eventually reconstructing the 3D mesh model.

In this work, we focus on ﬁlling the missing regions

∗co-corresponding authors

Figure 1: Qualitative results of point cloud shape completion
given input data missing 70% of its original points. We present
RL-GAN-Net, which observes a partial input point cloud data
(Pin) and completes the shape within a matter of milliseconds.
Even when input is severely distorted, our approach completes the
shape with high-ﬁdelity compared to the previous approach using
autoencoder (AE) [1].

within the 3D data by a data-driven method. The primary
form of acquired measurements is the 3D point cloud which
is unstructured and unordered. Therefore, it is not possi-
ble to directly apply conventional convolutional neural net-
works (CNN) approaches which work nicely for structured
data e.g. for 2D grids of pixels [20, 21, 5]. The extensions
of CNN in 3D have been shown to work well with 3D voxel
grid [37, 7, 8]. However, the computing cost grows dras-

5898

PinAERL-GAN-NetGround Truth(GT)RL-GAN-Net and GTFigure 2: The forward pass of our shape completion network. By observing an encoded partial point cloud, our RL-GAN-Net selects
an appropriate input for the latent GAN and generates a cleaned encoding for the shape. The synthesized latent representation is decoded
to get the completed point cloud in real time. In our hybrid version, the discriminator ﬁnally selects the best shape.

tically with voxel resolution due to the cubic nature of 3D
space. Recently PointNet [33] has made it possible to di-
rectly process point cloud data despite its unstructured and
permutation invariant nature. This has opened new avenues
for employing point cloud data, instead of voxels, to con-
temporary computer-vision applications, e.g. segmentation,
classiﬁcation and shape completion [1, 15, 34, 9, 10].

In this paper, we propose our pipeline RL-GAN-Net as
shown in Fig. 2. It is a reinforcement learning agent con-
trolled GAN (generative adversarial network) based net-
work which can predict complete point cloud from incom-
plete data. As a pre-processing step, we train an autoen-
coder (AE) to get the latent space representation of the
point cloud and we further use this representation to train
a GAN [1]. Our agent is then trained to take an ’action’
by selecting an appropriate z vector for the generator of the
pre-trained GAN to synthesize the latent space representa-
tion of the complete point cloud. Unlike the previous ap-
proaches which use back-propagation to ﬁnd the correct z
vector of the GAN [15, 40], our approach based on an RL
agent is real time and also robust to large missing regions.
However, for data with small missing regions, a simple AE
can reliably recover the original shape. Therefore, we use
the help of a pre-trained discriminator of GAN to decide
the winner between the decoded output of the GAN and the
output of the AE. The ﬁnal choice of completed shape pre-
serves the global structure of the shape and is consistent
with the partial observation. A few results with 70% miss-
ing data are shown in Fig. 1.

To the best of our knowledge, we are the ﬁrst to introduce
this unique combination of RL and GAN for solving the
point cloud shape completion problem. We believe that the
concept of using an RL agent to control the GAN’s output
opens up new possibilities to overcome underlying insta-
bilities of current deep architectures. This can also lead to
employing similar concept for problems that share the same
fundamentals of shape completion e.g.
image in-painting
[40].

Our key contributions are the following:

• We present a shape completion framework that is ro-
bust to low-availability of point cloud data without any
prior knowledge about visibility or noise characteris-
tics.

• We suggest a real-time control of GAN to quickly gen-
erate desired output without optimization. Because of
the real-time nature, we demonstrate that our pipeline
can pre-process the input for other point cloud process-
ing pipelines, such as classiﬁcation.

• We demonstrate the ﬁrst attempt to use deep RL frame-
work for the shape completion problem. In doing so,
we demonstrate a unique RL problem formulation.

2. Related Works

Shape Completion and Deep Learning. 3D shape com-
pletion is a fundamental problem which is faced when pro-
cessing 3D measurements of the real world. Regardless of
the modality of the sensors (multi-view stereo, the structure
of light sensors, RGB-D cameras, lidars, etc.), the output
point cloud exhibits large holes due to complex occlusions,
limited ﬁeld of view and unreliable measurements (because
of material properties or texture-less regions). Early works
use symmetry [38] or example shapes [32] to ﬁll the miss-
ing regions. More recently databases of shapes has been
used to retrieve the shape that is the closest to the current
measurement [19, 22].

Recently, deep learning has revolutionized the ﬁeld of
computer vision due to the enhanced computational power,
the availability of large datasets, and the introduction of ef-
ﬁcient architectures, such as the CNN [5]. Deep learning
has demonstrated superior performance on many traditional
computer vision tasks such as classiﬁcation [20, 21, 16] and
segmentation [24, 29]. Our 3D shape completion adapts the
successful techniques from the ﬁeld of deep learning and
uses data-driven methods to complete the missing parts.

3D deep learning architecture largely depends on the
choice of the 3D data representation, namely volumetric

5899

voxel grid, mesh, or point cloud. The extension of CNN
in 3D works best with 3D voxel grids, which can be gen-
erated from point measurements with additional process-
ing. Dai et al. [7] introduced a voxel-based shape com-
pletion framework which consists of a data-driven network
and an analytic 3D shape synthesis technique. However,
voxel-based techniques are limited in resolution because
the network complexity and required computations increase
drastically with the resolution. Recently, Dai et al. [8] ex-
tended this work to perform scene completion and semantic
segmentation using coarse-to-ﬁne strategy and using sub-
volumes. There are also manifold-based deep learning ap-
proaches [28] to analyze various characteristics of complete
shapes, but these lines of work depend on the topological
structure of the mesh. Such techniques are not compatible
with point cloud.

Point cloud is the raw output of many acquisition tech-
niques.
It is more efﬁcient compared to the voxel-based
representation, which is required to fully cover the entire
volume including large empty spaces. However, most of
the successful deep learning architectures can not be de-
ployed on point cloud data. Stutz et al. [37] introduced a
network which consumes incomplete point cloud but they
use a pre-trained decoder to get a voxelized representation
of the complete shape. Direct point cloud processing has
been made possible recently due to the emergence of new
architecture such as PointNet [33] and others [34, 9, 17].

Achlioptas et al. [1] explored learning shape represen-
tation with auto-encoder. They also investigated the gen-
eration of 3D point clouds and their latent representation
with GANs. Even though their work performs a certain
level of shape completion, their architecture is not designed
for shape completion tasks and suffers from considerable
degradation as the number of missing points at the in-
put are increased. Gurumurthy et al. [15] have suggested
shape completion architecture which utilizes latent GAN
and auto-encoder. However, they use a time-consuming op-
timization step for each batch of input to select the best seed
for the GAN. While we also use latent GAN, our approach
is different because we use a trained agent to ﬁnd the GAN’s
input seed. In doing so, we complete shapes in a matter of
milliseconds.

GAN and RL. Recently, Goodfellow et al. [13] suggested
generative adversarial networks (GANs) which use a neural
network (a discriminator) to train another neural network
(a generator). The generator tries to fool the discrimina-
tor by synthesizing fake examples that resembles real data,
whereas the discriminator tries to discriminate between the
real and the fake data. The two networks compete with each
other and eventually the generator learns the distribution of
the real data.

While GAN suggests a way to overcome the limitation

of data-driven methods, at the same time, it is very hard
to train and is susceptible to a local optimum. Many im-
provements have been suggested which range from changes
in the architecture of generator and discriminator to modi-
ﬁcations in the loss function and adoption of good training
practices [2, 41, 42, 14]. There are also practices to control
GAN by observing the condition as an additional input [26]
or using back-propagation to minimize the loss between the
desired output and the generated output [40, 15].

Our pipeline utilizes deep reinforcement learning (RL)
to control the complex latent space of GAN. RL is a frame-
work where a decision-making network, also called an
agent, interacts with the environment by taking available
actions and collects rewards. RL agents in discrete action
spaces have been used to provide useful guides to com-
puter vision problems such as to propose bounding box lo-
cations [3, 4] or seed points for segmentation [36] with deep
Q-network (DQN) [27]. On the other hand, we train an
actor-critic based network [23] learning the policy in contin-
uous action space to control GAN for shape completion. In
our setup, the environment is the shape completion frame-
work composed of various blocks such as AE and GAN,
and the action is the input to the generator. The unknown
behavior of the complex network can be controlled with the
deep RL agent and we can generate completed shapes from
highly occluded point cloud data.

3. Methods

Our shape completion pipeline is composed of three fun-
damental building blocks, which are namely an autoen-
coder (AE), a latent-space generative adversarial network
(l-GAN) and a reinforcement learning (RL) agent. Each
of the components is a deep neural network that has to be
trained separately. We ﬁrst train an AE and use the encoded
data to train l-GAN. The RL agent is trained in combination
with a pre-trained AE and GAN.

The forward pass of our method can be seen in Fig. 2.
The encoder of the trained AE encodes the noisy and incom-
plete point cloud to a noisy global feature vector (GFV).
Given this noisy GFV, our trained RL agent selects the cor-
rect seed for the l-GAN’s generator. The generator produces
the clean GFV which is ﬁnally passed through the decoder
of AE to get the completed point cloud representation of
the clean GFV. A discriminator observes the GFV of the
generated shape and the one processed by AE and selects
the more plausible shape. In the following subsections, we
explain the three fundamental building blocks of our ap-
proach, then describe the combined architecture.

3.1. Autoencoder (AE)

An AE creates a low-dimensional encoding of input data
by training a network that reproduces the input. An AE is
composed of an encoder and a decoder. The encoder con-

5900

verts a complex input into an encoded representation, and
the decoder reverts the encoded version back to the original
dimension. We refer to the efﬁcient intermediate represen-
tation as the GFV, which is obtained upon training an AE.
The training of AE is performed with back-propagation re-
ducing the distance between input and output point cloud,
either with the Earth Movers distance (EMD) [35] or the
Chamfer distance [10, 1]. We use the Chamfer distance over
EMD due to its efﬁciency which can be deﬁned as follows:

dCH (P1, P2) = X

a∈P1

min
b∈P2

ka − bk2

2 + X

b∈P2

min
a∈P1

ka − bk2
2 ,

(1)
where in Eq. (1) the P1 and P2 are the input and output point
cloud respectively.

We ﬁrst train a network similar to the one reported by
Achlioptas et al. [1] on the ShapeNet point cloud dataset
[39, 6]. Achlioptas et al. [1] also demonstrated that a trained
AE can be used for shape completion. The trained decoder
maps GFV into a complete point cloud even when the input
GFV has been produced from an incomplete point cloud.
But the performance degrades drastically as the percentage
of the missing data in the input is increased (Fig. 1).

3.2. l GAN

GAN generates new yet realistic data by jointly train-
ing a pair of generator and discriminator [13]. While
GAN demonstrated its success in image generation tasks
[41, 14, 2], in practice, training a GAN tends to be unstable
and suffer from mode collapse [25]. Achlioptas et al. [1]
showed that training a GAN on GFV, or latent representa-
tion, leads to more stable training results compared to train-
ing on raw point clouds. Similarly, we also train a GAN on
GFV, which has been converted from complete point cloud
data using the encoder of trained AE, Sec. 3.1. The gen-
erator synthesizes a new GFV from a noise seed z, which
can then be converted into a complete 3D point cloud using
the decoder of AE. We refer to the network as l-GAN or
latent-GAN.

Gurumurthy et al. [15] similarly utilized l-GAN for point
cloud shape completion. They formulated an optimization
framework to ﬁnd the best input z to the generator to create
GFV that best explains the incomplete point cloud at the
input. However, as the mapping between the raw points and
the GFV is highly non-linear, the optimization could not be
written as a simple back-propagation. Rather, the energy
term is a combination of three loss terms. We list the losses
below, where Pin is the incomplete point cloud input, E and
E−1 are the encoder and the decoder of AE, and G and D
represent the generator and the discriminator of the l-GAN
respectively.

• Chamfer loss: the Chamfer distance between the in-
put partial pointcloud Pin and the generated, decoded

pointcloud E−1(G(z))

LCH = dCH (Pin, E−1(G(z)))

(2)

• GFV loss:

l2 distance between the generated GFV

G(z) and the GFV of the input pointcloud E(Pin)

LGF V = kG(z) − E(Pin)k2
2

• Discriminator loss: the output of the discriminator

LD = −D(G(z))

(3)

(4)

Gurumurthy et al. [15] optimized the energy function de-
ﬁned as a weighted sum of the losses, and the weights grad-
ually evolve with every iteration. However, we propose a
more robust control of GAN using an RL framework, where
an RL agent quickly ﬁnds the z-input to the GAN by ob-
serving the combination of losses.

3.3. Reinforcement Learning (RL)

In a typical RL-based framework, an agent acts in an
environment. Given an observation xt at each time step t,
the agent performs an action at and receives a reward rt.
The agent network learns a policy π which maps states to
the action with some probability. The environment can be
modeled as a Markov decision process, i.e., the current state
and action only depend on the previous state and action.
The reward at any given state is the discounted future reward
Rt = PT
i=t γ(i−t)r(si, ai). The ﬁnal objective is to ﬁnd a
policy which provides the maximum reward.

We formulate the shape completion task in an RL frame-
work as shown in Fig. 3. For our problem, the environment
is the combination of AE and l-GAN, and resulting losses
that are calculated as intermediate results of various net-
works in addition to the discrepancy between the input and
the predicted shape. The observed state st is the initial noisy
GFV encoded from the incomplete input point cloud. We
assume that the environment is Markov and fully observed;
i.e., the recent most observation xt is enough to deﬁne the
state st. The agent takes an action at to pick the correct seed
for the z-space input of the generator. The synthesized GFV
is then passed through the decoder to obtain the completed
point cloud shape.

One of the major tasks in training an RL agent is the cor-
rect formulation of the reward function. Depending on the
quality of the action, the environment gives a reward r back
to the agent. In RL-GAN-Net, the right decision equates
to the correct seed selection for the generator. We use
the combination of negated loss functions as a reward for
shape completion task [15] (Sec. 3.2) that represent losses
in all of Cartesian coordinate (rCH = −LCH ), latent space
(rGF V = −LGF V ), and in the view of the discriminator
(rD = −LD). The ﬁnal reward term is given as follows:

r = wCH · rCH + wGF V · rGF V + wD · rD,

(5)

5901

Algorithm 1 Training RL-GAN-Net
Agent Input:

State (st): st = GF Vn = E(Pin); Sample pointcloud Pin
from dataset into the pre-trained encoder E to generate
noisy latent representation GF Vn.
Reward (rt): Calculated using Eq. (5)

Agent Output:

Action (at): at = z
Pass z-vector to the pre-trained generator G to form clean
latent vector GF Vc=G(z)

Final Output:

Pout = E−1(GF Vc); Pass GF Vc into decoder E−1 to
generate output point cloud Pout.
1: Initialize procedure Env with pre-trained generator G,

discriminator D, encoder E and decoder E−1

2: Initialize policy π with DDPG, actor A, critic C, and

replay buffer R

3: for tsteps < maxsteps do
4:

Get Pin
if tsteps > 0 then

5:

6:

7:

8:

9:

10:

11:

12:

13:

14:

15:

18:

19:

20:

Train A and C with R

if tLastEvaluation > fEvalF requency then

Evaluate π

GF Vn ← E(Pin)
if tsteps > tStartT ime then

Random Action at

if tsteps < tStartT ime then
Use at ← A ← GF Vn

(st, at, rt, st+1) ←Env ←at
Store transition (st, at, rt, st+1) in R

endfor

16: procedure ENV(Pin,at)
17:

Get State (st) : GF Vn ← E(Pin)
Implement Action : GF Vc ← G (at = z)
Calculate reward rt using Eq. (5)
Obtain point cloud : Pout ← E−1 (GF Vc)

as more data is missing, and our RL-agent can nonetheless
ﬁnd the correct semantic shape. Based on this observation,
we suggest a hybrid approach by using a discriminator as
a switch that selects the best results out of the vanilla RL-
GAN-Net and AE. The ﬁnal pipeline we used for the result
is shown in Fig. 2. Our hybrid approach can robustly com-
plete the semantic shape in real time and at the same time
preserve local details.

4. Experiments

We used PyTorch [31] and open source codes [12, 18,
30, 11] for our implementation. All networks were trained
on a single Nvidia GTX Titan Xp graphics card. The details

5902

Figure 3: Training RL-GAN-Net for shape completion. Our
RL framework utilizes AE (shown in green) and l-GAN (shown in
blue). The RL agent and the environment are shaded in gray, and
the embedded reward, states, and action spaces are highlighted in
red. The output is decoded and completed as shown at the bottom.
Note that the decoder and decoded point cloud in the upper right
corner is added for a comparison, and does not affect the training.
By employing an RL agent, our pipeline is capable of real-time
shape completion.

where wCH , wGF V , and wD are the corresponding weights
assigned to each loss function. We explain the selection of
weights in the supplementary material.

Since the action space is continuous, we adopt deep de-
terministic policy gradient (DDPG) by Lillicrap et al. [23].
In DDPG algorithm, a parameterized actor network µ(s |
θµ) learns a particular policy and maps states to particu-
lar actions in a deterministic manner. The critic network
Q(s, a) uses the Bellman equation and provides a measure
of the quality of action and the state. The actor network
is trained by ﬁnding the expected return of the gradient to
the cost J w.r.t the actor-network parameters, which is also
known as the policy gradient. It can be deﬁned as below:

▽θµ J(θ) = E

st∼ρβ [▽αQ(s, a | θQ) |s=st,a=µ(st)
▽θµ µ(s | θµ) |s=st ]

(6)

Before training the agent, we make sure that AE and GAN
are adequately pre-trained as they constitute the environ-
ment. The agent relies on them to select the correct action.
The algorithm of the detailed training process is summa-
rized in Algorithm 1.

3.4. Hybrid RL GAN Net

With the vanilla implementation described above, the
generated details of completed point cloud can sometimes
have limited semantic variations. When the portion of miss-
ing data is relatively small, the AE can often complete the
shape that agrees better with the input point cloud. On the
other hand, the performance of AE degrades signiﬁcantly

Ground Truth

Pin

(GT)

AE

RL-GAN-Net

RL-GAN-Net 

and GT

ratio (%)
time (ms)

20

40

30

50

70

1.310

1.293

1.295

1.266

1.032

Table 1: The average action time for the RL agent to produce
clean GFV from observation of noisy GFV. Our approach can cre-
ate the appropriate z-vector approximately in one millisecond.

against the method using AE only [1].

Fig. 5a shows the Chamfer distances of the completed
shape compared against the ground-truth point cloud. With
point cloud input with 70% of its original points missing,
the Chamfer distance compared to ground truth increase up
to 16% of the diagonal of the shape, but the reconstructed
shapes of AE, vanilla and hybrid RL-GAN-Net all show less
than 9% of the distances.

While the Chamfer distance is a widely used metric to
compare shapes, we noticed that it might not be the absolute
measure of the performance. From Fig. 5a, we noticed that
the input point cloud Pin was the best in terms of Cham-
fer distance for 20% missing data. However, from our vi-
sual inspection in Fig. 4, the completed shapes, while they
might not be exactly aligned in every detail, are semanti-
cally reasonable and does not exhibit any large holes that
are clearly visible in the input. For the examples with data
missing 70% of its original points in Fig. 1, it is obvious
that our approach is superior to AE, whose visual quality
for completed shape severely degrades as the ratio of miss-
ing data increases. However, the Chamfer distance is almost
the same for AE and RL-GAN-Net. The observation can
be interpreted as the fact that 1) AE is speciﬁcally trained
to reduce the Chamfer loss, thus performs better in terms
of the particular loss, while RL-GAN-Net jointly considers
Chamfer loss, latent space and discriminator losses, and 2)
Pin has points that are exactly aligned with the GT, which,
when averaged, compensates errors from missing regions.

In addition,

Nonetheless our hybrid approach correctly predicts the
category of shapes and ﬁlls the missing points even with
a large amount of missing data.
the RL-
controlled forward pass takes only around a millisecond
to complete, which is a huge advantage over previous
work [15] that requires back-propagation over a complex
network. They claim the running time of 324 seconds for
a batch of 50 shapes. On the other hand, our approach is
real-time and easily used as a preprocessing step for vari-
ous tasks, even at the scanning stage.

Comparison with Dai et al. [7] While there is not much
prior work in point cloud space, we include the completion
results of Dai et al [7] which works in a different domain
(voxel grid). To brieﬂy describe, their approach used an
encoder-decoder network in 323 voxel space followed by an
analytic patch-based completion in 1283 resolution. Their
results of both resolutions are available as distance function
format. We converted the distance function into a surface

5903

Figure 4: Qualitative results of point cloud shape completion
missing 20% of its original points. With relatively small miss-
ing data, AE sometimes performs better in completing shapes.
Therefore, our hybrid RL-GAN-Net reliably selects the best out-
put shape among the AE and the vanilla RL-GAN-Net.

of network architectures are provided in the supplementary
materials. For the experiments, we used the four categories
with the most number of shapes among ShapeNetCore [6, 1]
dataset, namely cars, airplanes, chairs, and desks. The to-
tal number of shapes sums to 26,829 for the four classes.
All shapes are translated to be centered at the origin and
scaled such that the diagonals of bounding boxes are of unit
length. The ground-truth point cloud data is generated by
uniformly sampling 2048 points on each shape. The points
are used to train the AE and generate clean GFV to train
the l-GAN. The incomplete point cloud is generated by se-
lecting a random seed from the complete point cloud and
removing points within a certain radius. The radius is con-
trolled for each shape to obtain the desired amount of miss-
ing data. We generated incomplete point cloud missing 20,
30, 40, 50 and 70% of the original data for test, and trained
our RL agent on the complete dataset.

4.1. Shape Completion Results

We present the results using the two variations of our
algorithm, the vanilla version and the hybrid approach as
mentioned in Sec. 3. Since the area is relatively new, there
are not many previous works available performing shape
completion in point cloud space. We compare our result

(a) Chamfer distance to GT

(b) Classiﬁcation accuracy [33]

(c) Loss terms

Figure 5: Performance analysis. We compare the two versions of our algorithms against the original input and the AE in terms of (a) the
Chamfer distance (the lower the better) and (b) the performance gain for shape classiﬁcation (the higher the better). (c) We also analyze
the losses of RL-GAN-Net with different amount of missing data.

representation using the MATLAB function isosurface as
they described, and uniformly sampled 2048 points to com-
pare with our results. We present the qualitative visual com-
parison in Fig. 6. The results of encoder-decoder based net-
work (referred as Voxel 323 in the ﬁgure) are smoother than
point clouds processed by AE as the volume accumulation
compensates for random noise. However, the approach is
limited in resolution and washes out the local details. Even
after the patch-based synthesis in 1283 resolution, the de-
tails they could recover are limited. On the other hand, our
approach robustly preserves semantic symmetries and com-
pletes local details in challenging scenarios. It should be
noted that we used only scanned point data but did not in-
corporate the additional mask information, which they uti-
lized. More results are included in the supplementary mate-
rial due to the limitation of space.

4.2. Application into Classiﬁcation

As an alternative measure to test the performances of the
semantic shape completion, we compared the classiﬁcation
accuracy of Pin and the shapes completed by AE and RL-
GAN-Net. This scenario also agrees with the main applica-
tions that we intended. That is, RL-GAN-Net can be used as
a quick preprocessing of the captured real data before per-
forming other tasks as the raw output of 3D measurements
are often partial, noisy data to be used as a direct input to
point cloud processing framework. We took the incom-
plete input and ﬁrst processed through our shape comple-
tion pipeline. Then we analyzed the classiﬁcation accuracy
of PointNet [33] with the completed point cloud input and
compared against the results with incomplete input. Fig. 5b
shows the improvement of classiﬁcation accuracy. Clearly,
our suggested pipeline reduces possible performance losses
of existing networks by completing the defects in the input.
We also would like to add a note about the performance
of the vanilla RL-GAN-Net and the hybrid approach. We
noticed that the main achievement of our RL agent is often
limited to ﬁnding the correct semantic categories in the la-
tent space. The hybrid approach overcomes the limitation

Figure 6: Performance Comparison. Comparison of RLGAN-
Net vs Dai et al.[7] for their 323 and 1283 resolution results. We
converted their distance function output to point cloud domain.
It should be noted that they additionally have mask information
whereas we operate directly on the scanned points only.

by selecting the results of AE when the shape is more rea-
sonable according to the trained discriminator. This agrees
with the fact that the hybrid approach is clearly better in
terms of Chamfer distance in Fig. 5a, but is comparable
with the vanilla approach in classiﬁcation in Fig. 5b, where
the task is ﬁnding the correct category. Fig. 7 shows some
examples of failure cases, where the suggested internal cat-
egory does not exactly align with the observed shape.

4.3. Reward Function Analysis

We demonstrate the effects of the three different loss
terms we used. Fig. 5c shows the change of loss values of
generated pointcloud with different amount of missing data.

5904

Figure 7: Failure cases. RL-GAN-Net can sometimes predict a
wrong category (top) or semantically similar but different shape of
the category (bottom).

Both Chamfer loss LCH and GFV loss LGF V increase for a
large amount of missing data. This is reasonable consider-
ing that we need to ﬁll more information and make a larger
change from the incomplete input as the ratio of missing
data grows larger. The LD is almost constant as the pre-
trained generator synthesizes according to the learned dis-
tribution given the z input.

We also tested different combinations of loss functions
for reward. Fig. 8 shows the sample results with a shape per
category. While the Chamfer distance is the widely used
metric to compare two shapes, the Chamfer loss was not
very efﬁcient when used alone. This can be interpreted as
the curse of dimensionality. While we need to semantically
complete the 3D positions of 2048 points, the single number
of Chamfer loss is not enough to inform the agent to ﬁnd the
correct control of the l-GAN. On the other hand, the perfor-
mance of GFV loss is impressive. While details are often
mismatched, the GFV loss alone enables the controller to
ﬁnd the correct semantic shape category from partial data.
This result agrees with the discussion in [1], where the la-
tent space representation reduces the dimension and boost
the performance of GAN. However, the completed shape
aligned better with the desired shape when combined with
the Chamfer loss, which only shows its power when com-
bined with GFV. The discriminator loss is essential to create
a realistic shape. When discriminator loss is used alone, the
RL agent creates a reasonable but unrelated shape, which is
an expected behaviour considering the reward is simply en-
couraging a realistic shape. From the results, we conclude
that all of the three loss terms are necessary for the RL agent
to deduce the correct control of GAN.

5. Conclusion and Future Work

In this work, we presented a robust and real time point
cloud shape completion framework using the RL agent to
control the generator. Our primary motivation was to re-
move the costly and complex optimization process that is
not real time and takes a minimum of 324 seconds to pro-
Instead of optimizing the
cess a batch of inputs
various combinations of loss functions, we have converted
these loss functions into rewards. In doing so, our RL agent

[15].

Figure 8: Reward function analysis. We tested the reward func-
tion with different combinations of losses. According to our analy-
sis, the Chamfer loss cannot work alone to complete the shape but
with the GFV loss our RL-GAN-Net can ﬁnd the correct shape.
The discriminator loss ensures that the completed shape is seman-
tically meaningful.

can complete the shape in approximately one millisecond.
In addition, we present shape completion results with data
with up to 70% missing points. We show the superiority of
our technique by demonstrating qualitative results.

We have also presented a use case of our network for the
classiﬁcation problem. Being real time, RL-GAN-Net can
be used to improve the performance of other point cloud
processing networks. We demonstrated that our trained net-
work raises the classiﬁcation accuracy of PointNet from
50% to 83% for the data with 70% missing points. With
this work, we have demonstrated a hidden potential in RL-
based techniques to effectively control the complex space
of GAN. An immediate extension is to apply the approach
into closely related tasks such as image in-painting [40].

Acknowledgements. This work was supported by KIST
institutional program [Project No.
2E29450] and the
KAIST School of Electrical Engineering Graduate Fellow-
ship. We are grateful to In So Kweon, Sunghoon Im, Arda
Senocak from RCV lab, KAIST for insightful discussions.

5905

PinAERL-GAN-NetGround Truth(GT)RL-GAN-Net and GTPinAELCHonlyLGFVonlyLDonlyLCH+ LGFVLCH+ LDLGFV+ LDRL-GAN-NetReferences

[1] Panos Achlioptas, Olga Diamanti, Ioannis Mitliagkas, and
Leonidas J. Guibas. Representation learning and adversarial
generation of 3d point clouds. CoRR, abs/1707.02392, 2017.
1, 2, 3, 4, 6, 8

[2] Martin Arjovsky, Soumith Chintala, and L´eon Bottou.
Wasserstein generative adversarial networks. In Doina Pre-
cup and Yee Whye Teh, editors, Proceedings of the 34th In-
ternational Conference on Machine Learning, volume 70 of
Proceedings of Machine Learning Research, pages 214–223,
International Convention Centre, Sydney, Australia, 06–11
Aug 2017. PMLR. 3, 4

[3] Miriam Bellver, Xavier Giro-i Nieto, Ferran Marques, and
Jordi Torres. Hierarchical object detection with deep rein-
forcement learning. In Deep Reinforcement Learning Work-
shop, NIPS, December 2016. 3

[4] Juan C. Caicedo and Svetlana Lazebnik. Active object lo-
calization with deep reinforcement learning. In Proceedings
of the 2015 IEEE International Conference on Computer Vi-
sion (ICCV), ICCV ’15, pages 2488–2496, Washington, DC,
USA, 2015. IEEE Computer Society. 3

[5] Alfredo Canziani, Adam Paszke, and Eugenio Culurciello.
An analysis of deep neural network models for practical ap-
plications. CoRR, abs/1605.07678, 2016. 1, 2

[6] Angel X. Chang, Thomas A. Funkhouser, Leonidas J.
Guibas, Pat Hanrahan, Qi-Xing Huang, Zimo Li, Silvio
Savarese, Manolis Savva, Shuran Song, Hao Su, Jianxiong
Xiao, Li Yi, and Fisher Yu. Shapenet: An information-rich
3d model repository. CoRR, abs/1512.03012, 2015. 4, 6

[7] Angela Dai, Charles Ruizhongtai Qi, and Matthias Nießner.
Shape completion using 3d-encoder-predictor cnns and
shape synthesis. CoRR, abs/1612.00101, 2016. 1, 3, 6, 7

[8] Angela Dai, Daniel Ritchie, Martin Bokeloh, Scott Reed,
J¨urgen Sturm, and Matthias Nießner. Scancomplete: Large-
scale scene completion and semantic segmentation for 3d
scans. CoRR, abs/1712.10215, 2017. 1, 3

[9] Haoqiang Fan, Hao Su, and Leonidas J. Guibas. A point
set generation network for 3d object reconstruction from a
single image. CoRR, abs/1612.00603, 2016. 2, 3

[10] Haoqiang Fan, Hao Su, and Leonidas J. Guibas. A point
set generation network for 3d object reconstruction from a
single image. CoRR, abs/1612.00603, 2016. 2, 4

[11] Scott Fujimoto. Addressing function approximation error in
actor-critic methods. https://github.com/sfujim/
TD3, 2018. 5

[12] Scott Fujimoto, Herke van Hoof, and Dave Meger. Ad-
dressing function approximation error in actor-critic meth-
ods. CoRR, abs/1802.09477, 2018. 5

[13] Ian Goodfellow, Jean Pouget-Abadie, Mehdi Mirza, Bing
Xu, David Warde-Farley, Sherjil Ozair, Aaron Courville, and
Yoshua Bengio. Generative adversarial nets. In Z. Ghahra-
mani, M. Welling, C. Cortes, N. D. Lawrence, and K. Q.
Weinberger, editors, Advances in Neural Information Pro-
cessing Systems 27, pages 2672–2680. Curran Associates,
Inc., 2014. 3, 4

[14] Ishaan Gulrajani, Faruk Ahmed, Mart´ın Arjovsky, Vincent
Improved training of

Dumoulin, and Aaron C. Courville.
wasserstein gans. CoRR, abs/1704.00028, 2017. 3, 4

[15] Swaminathan Gurumurthy and Shubham Agrawal. High ﬁ-
delity semantic shape completion for point clouds using la-
tent optimization. CoRR, abs/1807.03407, 2018. 2, 3, 4, 6,
8

[16] Kaiming He, Xiangyu Zhang, Shaoqing Ren, and Jian
Sun. Deep residual learning for image recognition. CoRR,
abs/1512.03385, 2015. 2

[17] Qiangui Huang, Weiyue Wang, and Ulrich Neumann. Re-
current slice networks for 3d segmentation on point clouds.
CoRR, abs/1802.04402, 2018. 3

[18] Li Jiaxin. So-net: Self-organizing network for point cloud
analysis, cvpr2018. https://github.com/lijx10/
SO-Net, 2018. 5

[19] Young Min Kim, Niloy J. Mitra, Qixing Huang, and
Leonidas Guibas. Guided real-time scanning of indoor ob-
jects. Computer Graphics Forum (Proc. Paciﬁc Graphics),
xx:xx, 2013. 2

[20] Alex Krizhevsky, Ilya Sutskever, and Geoffrey E. Hinton.
Imagenet classiﬁcation with deep convolutional neural net-
works.
In Proceedings of the 25th International Confer-
ence on Neural Information Processing Systems - Volume 1,
NIPS’12, pages 1097–1105, USA, 2012. Curran Associates
Inc. 1, 2

[21] Yann LeCun, Bernhard E. Boser, John S. Denker, Don-
nie Henderson, R. E. Howard, Wayne E. Hubbard, and
Lawrence D. Jackel. Handwritten digit recognition with a
back-propagation network.
In D. S. Touretzky, editor, Ad-
vances in Neural Information Processing Systems 2, pages
396–404. Morgan-Kaufmann, 1990. 1, 2

[22] Yangyan Li, Angela Dai, Leonidas Guibas, and Matthias
Nießner. Database-assisted object retrieval for real-time 3d
reconstruction.
In Computer Graphics Forum, volume 34.
Wiley Online Library, 2015. 2

[23] Timothy P. Lillicrap, Jonathan J. Hunt, Alexander Pritzel,
Nicolas Heess, Tom Erez, Yuval Tassa, David Silver, and
Daan Wierstra. Continuous control with deep reinforcement
learning. CoRR, abs/1509.02971, 2015. 3, 5

[24] J. Long, E. Shelhamer, and T. Darrell. Fully convolutional
networks for semantic segmentation. In 2015 IEEE Confer-
ence on Computer Vision and Pattern Recognition (CVPR),
pages 3431–3440, June 2015. 2

[25] Mario Lucic, Karol Kurach, Marcin Michalski, Sylvain
Gelly, and Olivier Bousquet. Are gans created equal? a
large-scale study. abs/1711.10337, 2018. 4

[26] Mehdi Mirza and Simon Osindero. Conditional generative

adversarial nets. CoRR, abs/1411.1784, 2014. 3

[27] Volodymyr Mnih, Koray Kavukcuoglu, David Silver, An-
drei A. Rusu, Joel Veness, Marc G. Bellemare, Alex Graves,
Martin Riedmiller, Andreas K. Fidjeland, Georg Ostro-
vski, Stig Petersen, Charles Beattie, Amir Sadik, Ioannis
Antonoglou, Helen King, Dharshan Kumaran, Daan Wier-
stra, Shane Legg, and Demis Hassabis. Human-level control
through deep reinforcement learning. Nature, 518:529 EP –,
Feb 2015. 3

5906

[28] Federico Monti, Davide Boscaini,

Jonathan Masci,
Emanuele Rodol`a, Jan Svoboda, and Michael M. Bronstein.
Geometric deep learning on graphs and manifolds using
mixture model cnns. In 2017 IEEE Conference on Computer
Vision and Pattern Recognition, CVPR 2017, Honolulu, HI,
USA, July 21-26, 2017, pages 5425–5434, 2017. 3

[29] Hyeonwoo Noh, Seunghoon Hong, and Bohyung Han.
Learning deconvolution network for semantic segmentation.
CoRR, abs/1505.04366, 2015. 2

[30] David Keetae Park.

https://
github.com/heykeetae/Self-Attention-GAN,
2018. 5

Self-attention gan.

[31] Adam Paszke, Sam Gross, Soumith Chintala, Gregory
Chanan, Edward Yang, Zachary DeVito, Zeming Lin, Al-
ban Desmaison, Luca Antiga, and Adam Lerer. Automatic
differentiation in pytorch. 2017. 5

[32] M. Pauly, N. J. Mitra, J. Giesen, M. Gross, and L. Guibas.
Example-based 3d scan completion. In Symposium on Ge-
ometry Processing, pages 23–32, 2005. 2

[33] Charles Ruizhongtai Qi, Hao Su, Kaichun Mo, and
Leonidas J. Guibas. Pointnet: Deep learning on point sets for
3d classiﬁcation and segmentation. CoRR, abs/1612.00593,
2016. 2, 3, 7

[34] Charles Ruizhongtai Qi, Li Yi, Hao Su, and Leonidas J.
Guibas. Pointnet++: Deep hierarchical feature learning on
point sets in a metric space. CoRR, abs/1706.02413, 2017.
2, 3

[35] Yossi Rubner, Carlo Tomasi, and Leonidas J. Guibas. The
earth mover’s distance as a metric for image retrieval. Int. J.
Comput. Vision, 40(2):99–121, Nov. 2000. 4

[36] Gwangmo Song, Heesoo Myeong, and Kyoung Mu Lee.
Seednet: Automatic seed generation with deep reinforce-
ment learning for robust interactive segmentation.
In The
IEEE Conference on Computer Vision and Pattern Recogni-
tion (CVPR), June 2018. 3

[37] David Stutz and Andreas Geiger. Learning 3d shape comple-
tion under weak supervision. CoRR, abs/1805.07290, 2018.
1, 3

[38] S. Thrun and B. Wegbreit.

In
Tenth IEEE International Conference on Computer Vision
(ICCV’05) Volume 1, volume 2, pages 1824–1831 Vol. 2, Oct
2005. 2

Shape from symmetry.

[39] Zhirong Wu, Shuran Song, Aditya Khosla, Xiaoou Tang, and
Jianxiong Xiao. 3d shapenets for 2.5d object recognition and
next-best-view prediction. CoRR, abs/1406.5670, 2014. 4

[40] Raymond A. Yeh, Chen Chen, Teck-Yian Lim, Mark
Hasegawa-Johnson, and Minh N. Do.
Semantic image
inpainting with perceptual and contextual losses. CoRR,
abs/1607.07539, 2016. 2, 3, 8

[41] Han Zhang, Ian J. Goodfellow, Dimitris N. Metaxas, and
Augustus Odena. Self-attention generative adversarial net-
works. CoRR, abs/1805.08318, 2018. 3, 4

[42] Junbo Jake Zhao, Micha¨el Mathieu, and Yann LeCun.
CoRR,

Energy-based generative adversarial network.
abs/1609.03126, 2016. 3

5907

