Image Deformation Meta-Networks for One-Shot Learning

Zitian Chen1

Yanwei Fu1*

Yu-Xiong Wang2

Lin Ma3

Wei Liu3

Martial Hebert2

1Schools of Computer Science, and Data Science, Fudan University; Jilian Technology Group (Video++)

2Robotics Institute, Carnegie Mellon University

3Tencent AI Lab

{chenzt15,yanweifu}@fudan.edu.cn

yuxiongw@cs.cmu.edu

forest.linma@gmail.com

wl2223@columbia.edu

hebert@cs.cmu.edu

(a)

(b)

(c)

(d)

(e)

Figure 1. Illustration of a variety of image deformations: ghosted (a, b), stitched (c), montaged (d), and partially occluded (e) images.

Abstract

Humans can robustly learn novel visual concepts even
when images undergo various deformations and loose cer-
tain information. Mimicking the same behavior and syn-
thesizing deformed instances of new concepts may help vi-
sual recognition systems perform better one-shot learning,
i.e., learning concepts from one or few examples. Our key
insight is that, while the deformed images may not be vi-
sually realistic, they still maintain critical semantic infor-
mation and contribute signiﬁcantly to formulating classi-
ﬁer decision boundaries. Inspired by the recent progress of
meta-learning, we combine a meta-learner with an image
deformation sub-network that produces additional training
examples, and optimize both models in an end-to-end man-
ner. The deformation sub-network learns to deform images
by fusing a pair of images — a probe image that keeps the
visual content and a gallery image that diversiﬁes the de-
formations. We demonstrate results on the widely used one-
shot learning benchmarks (miniImageNet and ImageNet 1K
Challenge datasets), which signiﬁcantly outperform state-
of-the-art approaches.

1. Introduction

Deep architectures have made signiﬁcant progress in var-
ious visual recognition tasks, such as image classiﬁcation
and object detection. This success typically relies on super-

*Yanwei Fu is the corresponding author

vised learning from large amounts of labeled examples. In
real-world scenarios, however, one may not have enough re-
sources to collect large training sets or need to deal with rare
visual concepts. It is also unlike the human visual system,
which can learn a novel concept with very little supervision.
One-shot or low/few-shot learning [4], which aims to build
a classiﬁer for a new concept from one or very few labeled
examples, has thus attracted more and more attention.

Recent efforts to address this problem have leveraged a
learning-to-learn or meta-learning paradigm [25, 20, 28,
32, 31, 22, 33, 17, 5, 13]. Meta-learning algorithms train a
learner, which is a parameterized function that maps labeled
training sets to classiﬁers. Meta-learners are trained by sam-
pling a collection of one-shot learning tasks and the corre-
sponding datasets from a large universe of labeled examples
of known (base) categories, feeding the sampled small train-
ing set to the learner to obtain a classiﬁer, and then comput-
ing the loss of the classiﬁer on the sampled test set. The
goal is that the learner is able to tackle the recognition of
unseen (novel) categories from few training examples.

Despite their noticeable performance improvements,
these generic meta-learning algorithms typically treat im-
ages as black boxes and ignore the structure of the visual
world. By contrast, our biological vision system is very ro-
bust and trustable in understanding images that undergo var-
ious deformations [27, 1]. For instance, we can easily rec-
ognize the objects in Figure 1, despite ghosting (Figure 1(a,
b)), stitching (Figure 1(c)), montaging (Figure 1(d)), and
partially occluding (Figure 1(e)) the images. While these

8680

deformed images may not be visually realistic, our key in-
sight is that they still maintain critical semantic information
and presumably serve as “hard examples” that contribute
signiﬁcantly to formulating classiﬁer decision boundaries.
Hence, by leveraging such modes of deformations shared
across categories, the synthesized deformed images could
be used as additional training data to build better classiﬁers.
A natural question then arises: how could we produce in-
formative deformations? We propose a simple parametriza-
tion that linearly combines a pair of images to generate the
deformed image. We use a probe image to keep the vi-
sual content and overlay a gallery image on a patch level to
introduce appearance variations, which could be attributed
to semantic diversity, artifacts, or even random noise. Fig-
ure 5 shows some examples of our deformed images. Im-
portantly, inspired by [30], we learn to deform images that
are useful for a classiﬁcation objective by end-to-end meta-
optimization that includes image deformations in the model.
Our Image Deformation Meta-Network (IDeMe-Net)
thus consists of two components:
a deformation sub-
network and an embedding sub-network. The deforma-
tion sub-network learns to generate the deformed images
by linearly fusing the patches of probe and gallery images.
Speciﬁcally, we treat the given small training set as the
probe images and sample additional images from the base
categories to form the gallery images. We evenly divide
the probe and gallery images into nine patches, and the de-
formation sub-network estimates the combination weight of
each patch. The synthesized images are used to augment the
probe images and train the embedding sub-network, which
maps images to feature representations and performs one-
shot classiﬁcation. The entire network is trained in an end-
to-end meta-learning manner on base categories.

Our contributions are three-fold.

(1) We propose
a novel image deformation framework based on meta-
learning to address one-shot learning, which leverages the
rich structure of shared modes of deformations in the visual
world. (2) Our deformation network learns to synthesize di-
verse deformed images, which effectively exploits the com-
plementarity and interaction between the probe and gallery
image patches. (3) By using the deformation network, we
effectively augment and diversify the one-shot training im-
ages, leading to a signiﬁcant performance boost on one-shot
learning tasks. Remarkably, our approach achieves state-of-
the-art performance on both the challenging ImageNet1K
and miniImagenet datasets.

2. Related Work

Meta-Learning. Typically, meta-learning [25, 24, 20,
28, 32, 31, 22, 33, 17, 5, 13, 37, 15] aims at training
a parametrized mapping from a few training instances to
model parameters in simulated one-shot learning scenarios.
Other meta-learning strategies in one-shot learning include

graph CNNs [7] and memory networks [19, 2]. Attention is
also introduced in meta-learning, in ways of analyzing the
relation between visual and semantic representations [29]
and learning the combination of temporal convolutions and
soft attention [14]. Different from prior work, we focus on
exploiting the complementarity and interaction between vi-
sual patches through the meta-learning mechanism.

Metric Learning. This is another important line of work
in one-shot learning. The goal is to learn a metric space
which can be optimized for one-shot learning. Recent work
includes Siamese networks [11], matching networks [28],
prototypical networks [22], relation networks [23], and dy-
namic few-shot learning without forgetting [8].

Data Augmentation. The key limitation of one-shot learn-
ing is the lack of sufﬁcient training images. As a com-
mon practice, data augmentation has been widely used to
help train supervised classiﬁers [12, 3, 35]. The standard
techniques include adding Gaussian noise, ﬂipping, rotat-
ing, rescaling, transforming, and randomly cropping train-
ing images. However, the generated images in this way
are particularly subject to visual similarity with the origi-
nal images. In addition to adding noise or jittering, previ-
ous work seeks to augment training images by using semi-
supervised techniques [31, 18, 16], or directly synthesizing
new instances in the feature domain [9, 30, 21, 6] to transfer
knowledge of data distribution from base classes to novel
classes. By contrast, we also use samples from base classes
to help synthesize deformed images but directly aim at max-
imizing the one-shot recognition accuracy.

The most relevant to our approach is the work of [30, 36].
Wang et al. [30] introduces a generator to hallucinate novel
instances in the feature domain by adding noise, whereas
we focus on learning to deform two real images in the im-
age domain without introducing noise. Zhang et al. [36]
randomly sample image pairs and linearly combine them to
generate additional training images. In this mixup augmen-
tation, the combination is performed with weights randomly
sampled from a prior distribution and is thus constrained to
be convex. The label of the generated image is similarly
the linear combination of the labels (as one-hot label vec-
tors) of the image pairs. However, they ignore structural
dependencies between images as well as image patches. By
contrast, we learn classiﬁers to select images that are simi-
lar to the probe images from the unsupervised gallery image
set. Our combination weights are learned through a defor-
mation sub-network on the image patch level and the com-
bination is not necessarily convex. In addition, our gener-
ated image preserves the label of its probe image. Com-
paring with these methods, our approach learns to dynami-
cally fuse patches of two real images in an end-to-end man-
ner. The produced images maintain the important patches
of original images while being visually different from them,
thus facilitating training one-shot classiﬁers.

8681

3. One-Shot Learning Setup

Following recent work [28, 17, 5, 22, 30], we establish
one-shot learning in a meta-learning framework: we have a
base category set Cbase and a novel category set Cnovel, in
which Cbase ∩ Cnovel = ∅; correspondingly, we have a base
dataset Dbase = {(Ii, yi) , yi ∈ Cbase} and a novel dataset
Dnovel = {(Ii, yi) , yi ∈ Cnovel}. We aim to learn a clas-
siﬁcation algorithm on Dbase that can generalize to unseen
classes Cnovel with one or few training examples per class.
To mimic the one-shot learning scenario, meta-learning
algorithms learn from a collection of N -way-m-shot clas-
siﬁcation tasks/datasets sampled from Dbase and are eval-
uated in a similar way on Dnovel. Each of these sampled
datasets is termed as an episode, and we thus have different
meta-sets for meta-training and meta-testing. Speciﬁcally,
we randomly sample N classes L ∼ Ck for a meta-training
(i.e., k = base) or meta-testing episode (i.e., k = novel).
We then randomly sample m and q labeled images per class
in L to construct the support set S and query set Q, re-
spectively, i.e., |S| = N × m and |Q| = N × q. During
meta-training, we sample S and Q to train our model. Dur-
ing meta-testing, we evaluate by averaging the classiﬁcation
accuracy on query sets Q of many meta-testing episodes.

We view the support set as supervised probe images and
different from the previous work, we introduce an addi-
tional gallery image set G that serves as an unsupervised
image pool to help generate deformed images. To construct
G, we randomly sample some images per base class from
the base dataset, i.e., G ∼ Dbase. The same G is used
in both the meta-training and meta-testing episodes. Note
that since it is purely sampled from Dbase, the newly in-
troduced G does not break the standard one-shot setup as
in [34, 22, 5, 17]. We do not introduce any additional im-
ages from the novel categories Cnovel.

4. Image Deformation Meta-Networks

We now explain our image deformation meta-network
(IDeMe-Net) for one-shot learning. Figure 2 shows the ar-
chitecture of IDeMe-Net fθ(·) parametrized by θ. IDeMe-
Net is composed of two modules — a deformation sub-
network and an embedding sub-network. The deformation
sub-network adaptively fuses the probe and gallery images
to synthesize the deformed images. The embedding sub-
network maps the images to feature representations and
then constructs the one-shot classiﬁer. The entire meta-
network is trained in an end-to-end manner.

ages Isyn, i.e., Isyn = fθdef (Iprob, Igallery). Our goal
is to synthesize meaningful deformed images such that
ysyn = yprobe. This is achieved by using two strategies: (1)
ysyn = yprobe is explicitly enforced as a constraint during
the end-to-end optimization; (2) we propose an approach
to sample Igallery that are visually or semantically similar
to the images of yprobe. Speciﬁcally, for each class yprobe,
we directly use the feature extractor and one-shot classi-
ﬁer learned in the embedding sub-network to select the top
ǫ% images from G which have the highest class probability
of yprobe. From this initial pool of images, we randomly
sample Igallery for each probe image (Iprobe, yprobe). Note
that during meta-training, both Iprobe and Igallery are ran-
domly sampled from base classes, so they might belong to
the same class. We ﬁnd that further constraining them to
belong to different base classes has little impact on the per-
formance. During meta-testing, Iprobe and Igallery belong
to different classes, with Iprobe sampled from novel classes
and Igallery still from base classes.

Two branches, ANET and BNET, are used to parse
Iprobe and Igallery, respectively. Each of them is a residual
network [10] without fully-connected layers. The outputs
of ANET and BNET are then concatenated to be fed into a
fully-connected layer, which produces a 9-D weight vector
w. As shown in Figure 2, we evenly divide the images into
3×3 patches. The deformed image is thus simply generated
as a linearly weighted combination of Iprobe and Igallery on
the patch level. That is, for the qth patch, we have
Isyn,q = wq Iprobe,q + (1 − wq) Igallery,q.

(1)

We assign the class label yprobe to the synthesized
deformed image Isyn.
probe,
we sample naug gallery images from the correspond-
ing pool and produce naug synthesized deformed im-
ages. We thus obtain an augmented support set ˜S =

For any probe image Ii

(cid:26)(cid:16)Ii

probe, yi

probe(cid:17) ,n(cid:16)Ii,j

syn, yi,j

probe(cid:17)onaug

j=1 (cid:27)N ×m

i=1

.

4.2. Embedding Sub network

The embedding sub-network fθemb (·) consists of a deep
convolutional network for feature extraction and a non-
parametric one-shot classiﬁer. Given an input image I, we
use a residual network [10] to produce its feature represen-
tation fθemb (I). To facilitate the training process, we intro-
duce an additional softmax classiﬁer, i.e., a fully-connected
layer on top of the embedding sub-network with a cross-
entropy loss (CELoss), that outputs |Cbase| scores.

4.1. Deformation Sub network

4.3. One Shot Classiﬁer

This sub-network fθdef (·) learns to explore the interac-
tion and complementarity between the probe images Iprobe
((Iprobe, yprobe) ∈ S) and the gallery images Igallery ∈ G,
and fuses them to generate the synthesized deformed im-

Due to its superior performance, we use the non-
parametric prototype classiﬁer [22] as the one-shot classi-
ﬁer. During each episode, given the sampled S, Q, and G,
the deformation sub-network produces the augmented sup-

8682

Figure 2. The overall architecture of our image deformation meta-network (IDeMe-Net).

port set ˜S. Following [22], we calculate the prototype vector
θ for each class c in ˜S as
pc
Z X(Ii,yi)∈ ˜S

fθemb (Ii) · Jyi = cK ,

pc
θ =

(2)

1

where Z = Σ(Ii,yi)∈ ˜S Jyi = cK is the normalization factor.
J·K is the Iverson’s bracket notation: JxK = 1 if x is true, and
0 otherwise. Given any query image Ii ∈ Q, its probability
of belonging to class c is computed as

Pθ (yi = c|Ii) =

exp (− kfθemb (Ii) − pc

θk)
fθemb (Ii) − pj

j=1 exp(cid:16)−(cid:13)(cid:13)(cid:13)
PN

θ(cid:13)(cid:13)(cid:13)(cid:17)

, (3)

where k · k indicates the Euclidean distance. The one-shot
classiﬁer P thus predicts the class label of Ii as the highest
probability over N classes.

5. Training Strategy of IDeMe-Net

5.1. Training Loss

Training the entire IDeMe-Net includes two subtasks:
(1) training the deformation sub-network which maximally
improves the one-shot classiﬁcation accuracy; (2) building
the robust embedding sub-network which effectively deals
with various synthesized deformed images. Note that our
one-shot classiﬁer has no parameters, which does not need
to be trained. We use the prototype loss and the cross-
entropy loss to train these two sub-networks, respectively.
Update the deformation sub-network. We optimize the
following prototype loss function to endow the deformation
sub-network with the desired one-shot classiﬁcation ability:

minθ EL∼Dbase

ES,G,Q∼L

 X(Ii,yi)∈Q

−logPθ (yi | Ii)


, (4)

where Pθ (yi | Ii) is the one-shot classiﬁer in Eq. (3). Using
the prototype loss encourages the deformation sub-network
to generate diverse instances to augment the support set.
Update the embedding sub-network. We use the cross-
entropy loss to train the embedding sub-network to directly
classify the augmented support set ˜S. Note that with the

Algorithm 1 Meta-training procedure of our IDeMe-Net
fθ. G is the ﬁxed gallery constructed from Cbase.

1: procedure META-TRAIN EPISODE
2: The procedure of one meta-training episode
3:

L ← randomly sample N classes from Cbase
S ← randomly sample instances belonging to L
//sample the support set
Q ← randomly sample instances belonging to L
//sample the query set
train the prototype classiﬁer P from fθemb (S)
˜S ← S
for c in L do

⊲ initialize the augment support set
⊲ enumerate the chosen classes
pool ←use P to select ǫ% images in G that have

the highest class probability of c

for (Iprob, c) in Sc do

for j = 1 to naug do

Igallery ← randomly sample instances

from pool

Isyn ← fθdef (Iprob, Igallery)
˜S ← ˜S ∪ (Isyn, c)

end for

end for

end for
train the prototype classiﬁer ˜P from fθemb ( ˜S)
use ˜P to classify fθemb (Q) and obtain the prototype

loss

use the softmax classiﬁer to classify fθemb ( ˜S) and

obtain the CELoss

4:

5:

6:

7:

8:

9:

10:

11:

12:

13:

14:

15:

16:

17:

18:

19:

20:

21:

22:

23:

update θemb with the CELoss
update θdef with the prototype loss

24:
25: end procedure

augmented support set ˜S, we have relatively more training
instances to train this sub-network and the cross-entropy
loss is the standard loss function in training a supervised
classiﬁcation network. Empirically, we ﬁnd that using the
cross-entropy loss speeds up the convergence and improves
the recognition performance than using the prototype loss
only.

8683

5.2. Training Strategy

We summarize the entire training procedure of our
IDeMe-Net on the base dataset Dbase in Algorithm 1. We
have access to the same, predeﬁned gallery G from Dbase
for both meta-training and meta-testing. During meta-
training, we sample the N -way-m-shot training episode to
produce S and Q from Dbase. The embedding sub-network
learns an initial one-shot classiﬁer on S using Eq. (3). Given
a probe image Iprobe, we then sample the gallery images
Igallery ∼ G and train the deformation sub-network to gen-
erate the augmented support set ˜S using Eq. (1). ˜S is fur-
ther used to update the embedding sub-network and learn
a better one-shot classiﬁer. We then conduct the ﬁnal one-
shot classiﬁcation on the query set Q and back-propagate
the prediction error to update the entire network. During
meta-testing, we sample the N -way-m-shot testing episode
to produce S and Q from the novel dataset Dnovel.

6. Experiments

Our IDeMe-Net is evaluated on two standard bench-
marks: miniImageNet [28] and ImageNet 1K Challenge [9]
datasets. miniImageNet is a widely used benchmark in one-
shot learning, which includes 600 images per class and has
100 classes in total. Following the data split in [17], we use
64, 16, 20 classes as the base, validation, and novel category
set, respectively. The hyper-parameters are cross-validated
on the validation set. Consistent with [28, 17], we evaluate
our model in 5-way-5-shot and 5-way-1-shot settings.

For the large-scale ImageNet 1K dataset, we divide the
original 1K categories into 389 base (Dbase) and 611 novel
(Dnovel) classes following the data split in [9]. The base
classes are further divided into two disjoint subsets: base
base (193 classes) and evaluation set Df in
validation set Dcv
base
(196 classes) and the novel classes are divided into two sub-
sets as well: novel validation set Dcv
novel (300 classes) and
evaluation set Df in
novel (311 classes). We use the base/novel
validation set Dcv for cross-validating hyper-parameters
and use the base/novel evaluation set Df in to conduct the ﬁ-
nal experiments. The same experimental setup is used in [9]
and the reported results are averaged over 5 trails. Here we
focus on synthesizing novel instances and we thus evaluate
the performance primarily on novel classes, i.e., 331-way-
m-shot settings, which is also consistent with most of the
contemporary work [28, 22, 17].

6.1. Results on ImageNet 1K Challenge

Setup. We use ResNet-10 architectures for ANET and
BNET (i.e., the deformation sub-network). For a fair com-
parison with [9, 30], we evaluate the performance of using
ResNet-10 (Table 1) and ResNet-50 (Table 2) for the em-
bedding sub-network. Stochastic gradient descent (SGD)

It
is used to train IDeMe-Net in an end-to-end manner.
gets converged over 100 epochs. The initial learning rates
of ANET, BNET, and the embedding sub-network are set
as 3 × 10−3, 3 × 10−3, and 10−1, respectively, and de-
creased by 1/10 every 30 epochs. The batch size is set as
32. We randomly sample 10 images per base category to
construct the gallery G and we set ǫ as 2. Note that G is
ﬁxed during the entire experiments. ANET, BNET, and the
embedding sub-network are trained from scratch on Dbase.
Our model is evaluated on Dnovel. naug is cross-validated
as 8, which balances between the computational cost and
the augmented training data scale. In practice, we perform
stage-wise training to overcome potential negative inﬂuence
caused by misleading training images synthesized by the
initial deformation sub-network. Speciﬁcally, in the ﬁrst
20 epochs, we ﬁx the deformation sub-network and train
the embedding sub-network with only real images to ob-
tain good initial classiﬁers. In the next 20 epochs, we ﬁx
the embedding sub-network and learn the deformation sub-
network to reduce the discrepancy between synthesized and
real images. Finally, we train the embedding and defor-
mation sub-networks jointly (i.e., the entire IDeMe-Net) to
allow them to cooperate with each other.

Baselines and Competitors. We compare against several
baselines and competitors as follows. (1) We directly train a
ResNet-10 feature extractor on Dbase and use it to compute
features on Dnovel. We then train standard supervised clas-
siﬁers on Dnovel, including neural network, support vec-
tor machine (SVM), logistic regression (LR), and prototype
classiﬁers. The neural network classiﬁer consists of a fully-
connected layer and a softmax layer. (2) We compare with
state-of-the-art approaches to one-shot learning, such as
matching networks [28], generation SGM [9], prototypical
networks [22], Cosine Classiﬁer & Att. Weight Gen (Cos
& Att.) [8], CP-ANN [6], PMN, and PMN w/ H [30]. (3)
The data augmentation methods are also compared — ﬂip-
ping: the input image is ﬂipped from left to right; Gaussian
noise: cross-validated Gaussian noise N (0, 10) is added
to each pixel of the input image; Gaussian noise (feature
level): cross-validated Gaussian noise N (0, 0.3) is added
to each dimension of the ResNet feature for each image;
Mixup: using mixup [36] to combine probe and gallery im-
ages. For fair comparisons, all theses augmentation meth-
ods use the prototype classiﬁer as the one-shot classiﬁer.

Results. Tables 1 and 2 summarize the results of using
ResNet-10 and ResNet-50 as the embedding sub-network,
respectively. For example, using ResNet-10, the top-5 accu-
racy of IDeMe-Net in Table 1 is superior to the prototypical
network by 7% when m = 1, 2, 5, showing the sample efﬁ-
ciency of IDeMe-Net for one-shot learning. With more data
(e.g., m = 10, 20), while the plain prototype classiﬁer base-
line performs worse than other baselines (e.g., PMN), our
deformed images coupled with the prototype classiﬁer still

8684

Baselines

Competitors

Augmentation

Method

Softmax
LR
SVM
Prototype Classiﬁer

Matching Network [28]
Prototypical Network [22]
Generation-SGM [9]
PMN [30]
PMN w/ H [30]
Cos & Att. [8]
CP-AAN [6]

Flipping
Gaussian Noise
Gaussian Noise (feature level)
Mixup [36]

m = 1

2

5

10

20

– /16.3

– /35.9

– /57.4

- / 67.3

– /72.1

18.3/42.8
15.9/36.6
17.1/39.2

– / 43.0
16.9/41.7
– / 34.3
– / 43.3
– / 45.8
– / 46.0
– / 48.4

17.4/39.6
16.8/39.0
16.7/39.1
15.8/38.7

26.0/54.7
22.7/48.4
24.3/51.1

– / 54.1
24.0/53.6
– / 48.9
– / 55.7
– / 57.8
– / 57.5
– / 59.3

24.7/51.2
24.0/51.2
24.2/51.4
24.6/51.4

35.8/66.1
31.5/61.2
33.8/63.9

– / 64.4
33.5/63.7
– / 64.1
– / 68.4
– / 69.0
– / 69.1
– / 70.2

33.7/64.1
33.9/63.7
33.4/63.3
32.0/61.1

41.1/71.3
37.9/69.2
38.4/69.9

– / 68.5
37.7/68.2
– / 70.5
– / 74.0
– / 74.3
– / 74.8
– / 76.5

38.7/70.2
38.0/69.7
38.2/69.5
38.5/69.2

44.9/74.8
43.9/74.6
44.1/74.7

– / 72.8
42.7/72.3

– /74.6
– / 77.0
– / 77.4
– / 78.1
– / 79.3

44.2/74.5
43.8/74.5
44.0/74.2
42.1/72.9

Ours

IDeMe-Net

23.1/51.0

30.1/60.9

39.3/70.4

42.7/73.4

45.0/75.1

Table 1. Top-1 / Top-5 accuracy (%) on novel classes of the ImageNet 1K Challenge dataset. We use ResNet-10 as the embedding
sub-network. m indicates the number of training examples per class. Our IDeMe-Net consistently achieves the best performance.

Method

Softmax
SVM
LR
Proto-Clsf

G-SGM [9]
PMN [30]
PMN w/ H [30]
IDeMe-Net (Ours)

m = 1

2

5

10

– /28.2

– /51.0

20.1/41.6
22.9/47.9
20.8/43.1

– /47.3
– / 53.3
– / 54.7
30.3/60.1

29.4/57.7
32.3/61.3
29.9/58.1

– /60.9
– / 65.2
– / 66.8
39.7/69.6

– / 71.0
42.6/72.8
44.3/73.6
42.4/72.3

– /73.7
– / 75.9
– / 77.4
47.5/77.4

– /78.4

49.9/79.1
50.9/78.8
49.5/79.0

– /79.5
– / 80.1
– / 81.4
51.3/80.2

Table 2. Top-1 / Top-5 accuracy (%) on novel classes of the Im-
agenet 1K Challenge dataset. We use ResNet-50 as the embed-
ding sub-network. m indicates the number of training examples
per class. Proto-Clsf and G-SGM denote the prototype classiﬁer
and generation SGM [9], respectively.

have signiﬁcant effect (e.g., 3.5 point boost when m = 10).
The top-1 accuracy demonstrates the similar trend. Using
ResNet-50 as the embedding sub-network, the performance
of all the approaches improves and our IDeMe-Net consis-
tently achieves the best performance, as shown in Table 2.
Figure 3(a) further highlights that our IDeMe-Net consis-
tently outperforms all the baselines by large margins.

6.2. Ablation Study on ImageNet 1K Challenge

We conduct extensive ablation study to evaluate the con-

tribution of each component in our model.
Variants of IDeMe-Net. We consider seven different vari-
ants of our IDeMe-Net, as shown in Figure 3(b) and Ta-
ble 3. (1) ‘IDeMe-Net - CELoss’: the IDeMe-Net is trained
using only the prototype loss without the cross-entropy loss
(CELoss). (2) ‘IDeMe-Net - Proto Loss’: the IdeMe-Net is
trained using only the cross-entropy loss without the pro-
totype loss.
the gallery im-

(3) ‘IDeMe-Net - Predict’:

ages are randomly chosen in IDeMe-Net without predict-
ing their class probability. (4) ‘IDeMe-Net - Aug. Testing’:
the deformed images are not produced in the meta-testing
phase. (5) ‘IDeMe-Net - Def. Network’: the combination
weights in Eq. (1) are randomly generated instead of us-
ing the learned deformation sub-network. (6) ‘IDeMe-Net -
Gallery’: the gallery images are directly sampled from the
support set instead of constructing an additional Gallery. (7)
‘IDeMe-Net - Deform’: we simply use the gallery images to
serve as the deformed images. As shown in Figure 3(b), our
full IDeMe-Net model outperforms all these variants, show-
ing that each component is essential and complementary to
each other.

We note that (1) Using CELoss and prototype loss to
update the embedding and deformation sub-networks,
respectively, achieves the best result. As shown in
Figure 3(b),
the accuracy of ‘IDeMe-Net - CELoss’ is
marginally lower than IDeMe-Net but still higher than the
prototype classiﬁer baseline, while ‘IDeMe-Net - Proto
(2) Our strategy for
Loss’ underperforms the baseline.
selecting the gallery images is the key to diversify the
deformed images. Randomly choosing the gallery im-
ages (‘IDeMe-Net - Predict’) or sampling the gallery im-
ages from the support set (‘IDeMe-Net - Gallery’) obtains
no performance improvement. One potential explanation
is that they only introduce noise or redundancy and do not
(3) Our improved perfor-
bring in useful information.
mance mainly comes from the diversiﬁed deformed im-
ages, rather than the embedding sub-network. Without
producing the deformed images in the meta-testing phase
(‘IDeMe-Net - Aug. Testing’), the performance is close
to the baseline, suggesting that training on the deformed
images does not obviously beneﬁt from the embedding

8685

Method

m = 1

2

5

10

20

Baselines

LR
Prototype Classiﬁer

IDeMe-Net - CELoss
IDeMe-Net - Proto Loss
IDeMe-Net - Predict
IDeMe-Net - Aug. Testing
IDeMe-Net - Def. Network
IDeMe-Net - Gallery
IDeMe-Net - Deform
IDeMe-Net (1 × 1)
IDeMe-Net (5 × 5)
IDeMe-Net (7 × 7)
IDeMe-Net (pixel level)

Variants

Patch Size

18.3/42.8
17.1/39.2

21.3/50.0
15.3/36.7
17.0/39.3
17.0/39.1
15.9/38.0
17.5/39.4
15.7/37.8

16.2/39.3
24.1/51.7
23.8/52.1
17.3/39.0

26.0/54.7
24.3/51.1

28.0/58.3
21.4/50.4
24.0/50.7
24.30/51.3
24.1/50.1
24.2/51.4
22.7/49.8

24.4/52.1
30.3/61.2
30.2/61.3
23.8/51.2

35.8/66.1
33.8/63.9

37.7/69.4
31.7/62.0
33.6/63.5
33.5/63.8
32.6/63.3
33.5/63.7
31.9/62.6

32.9/63.0
39.6/70.4
39.1/70.2
34.1/63.7

41.1/71.3
38.4/69.9

41.3/71.6
37.9/69.0
38.0/69.2
38.0/69.1
38.2/68.9
38.7/70.3
38.0/68.7

38.8/69.5
42.4/73.2
42.7/73.1
38.5/70.2

44.9/74.8
44.1/74.7

44.3/74.3
43.7/73.7
43.7/73.8
43.8/74.5
42.4/73.1
44.4/74.5
43.5/73.8

42.7/73.2
44.3/74.6
44.5/74.7
43.9/74.5

Ours

IDeMe-Net

23.1/51.0

30.4/60.9

39.3/70.4

42.7/73.4

45.0/75.1

Table 3. Top-1 / Top-5 accuracy (%) of the ablation study on novel classes of the ImageNet 1K Challenge dataset. We use ResNet-10
as the embedding sub-network. m indicates the number of training examples per class. Our full model achieves the best performance.

(4) Our meta-learned deformation sub-
sub-network.
network effectively exploits the complementarity and in-
teraction between the probe and gallery image patches,
producing the key information in the deformed images.
To show this point, we investigate two deformation strate-
gies: randomly generating the weight vector w (‘IDeMe-
Net - Def. Network’) and setting all the weights to be 0
(‘IDeMe-Net - Deform’); in the latter case, it is equiva-
lent to purely using the gallery images to serve as the de-
formed images. Both strategies perform worse than the
prototype classiﬁer baseline, indicating the importance of
meta-learning a deformation strategy.

Different division schemes.
In the deformation sub-
network and Eq. (1), we evenly split the image into 3 × 3
patches. Some alternative division schemes are compared in
Table 3 and Figure 3(c). Speciﬁcally, we consider the 1 × 1,
5 × 5, 7 × 7, and pixel-level division schemes and report the
results as IDeMe-Net (1 × 1), IDeMe-Net (5 × 5), IDeMe-
Net (7 × 7), and IDeMe-Net (pixel level), respectively. The
experimental results suggest the patch-level fusion, rather
than image-level or pixel-level fusion in our IDeMe-Net.
The image-level division (1 × 1) ignores the local image
structures and deforms through a global combination, thus
decreasing the diversity. The pixel-level division is particu-
larly subject to the disarray of the local information, while
the patch-level division (3 × 3, 5 × 5, and 7 × 7) consid-
ers image patches as the basic unit to maintain some local
information. In addition, the results show that using a ﬁne-
grained patch size (e.g., 5 × 5 division and 7 × 7 division)
may achieve slightly better results than our 3×3 division. In
brief, our patch-level division not only maintains the critical
region information but also increases diversity.

Number of synthesized deformed images. We also show
how the top-5 accuracy changes with respect to the number

(a)

(b)

(c)

(d)

Figure 3. Ablation study on ImageNet 1K Challenge dataset:
(a) highlights the comparison with several competitors; (b) shows
the impact of different components on our IDeMe-Net; (c) ana-
lyzes the impact of different division schemes; (d) shows how the
performance changes with respect to the number of synthesized
deformed images. Best viewed in color with zoom.

of synthesized deformed images in Figure 3(d). Speciﬁ-
cally, we change the number of synthesized deformed im-
ages naug in the deformation sub-network, and plot the 5-
shot top-5 accuracy on the Imagenet 1K Challenge dataset.
It shows that when naug is changed from 0 to 8, the per-
formance of our IDeMe-Net is gradually improved. The
performance saturates when enough deformed images are
generated (naug > 8).
Visualization of deformed images in feature space. Fig-

8686

(a) Gaussian Baseline

(b) IDeMe-Net - Deform

(c) IDeMe-Net

Figure 4. t-SNE visualization of 5 novel classes. Dots, stars,
and triangles represent the real examples, the probe images, and
the synthesized deformed images, respectively. (a) Synthesis by
adding Gaussian noise. (b) Synthesis by directly using the gallery
images. (c) Synthesis by our IDeMe-Net. Best viewed in color
with zoom.

Figure 5. Examples of the deformed images during meta-testing.
1st row: probe images of novel classes.
2nd: gallery im-
synthesized images. The probe-
ages of base classes.
gallery image pairs from left
to right: vase–jellyﬁsh, vase–
oboe, vase–garbage bin, vase–soup pot, golden retriever–poodle,
golden retriever–walker hound, golden retriever–walker hound,
and golden retriever–poodle. Best viewed in color with zoom.

3rd:

ure 4 shows the t-SNE [26] visualization of 5 novel classes
from our IDeMe-Net, the Gaussian noise baseline, and the
‘IDeMe-Net - Deform’ variant. For the Gaussian noise
baseline, the synthesized images are heavily clustered and
close to the probe images. By contrast, the synthesized
deformed images of our IDeMe-Net scatter widely in the
class manifold and tend to locate more around the class
boundaries. For ‘IDeMe-Net - Deform’, the synthesized
images are the same as the gallery images and occasionally
fall into manifolds of other classes. Interesting, comparing
Figure 4(b) and Figure 4(c), our IDeMe-Net effectively de-
forms those misleading gallery images back to the correct
class manifold.

Visualization of deformed images in image space. Here
we show some examples of our deformed images on novel
classes in Figure 5. We can observe that the deformed im-
ages (in the third row) are visually different from the probe
images (in the ﬁrst row) and the gallery images (in the sec-
ond row). For novel classes (e.g., vase and golden retriever),
our method learns to ﬁnd visual samples that are similar
in shape and geometry (e.g., jelly ﬁsh, garbage bin, and
soup pot) or similar in appearance (e.g., poodle and walker
hound). By doing so, the deformed images preserve im-
portant visual content from the probe images and introduce
new visual contents from the gallery images, thus diversify-

Method

miniImageNet (%)

1-shot

5-shot

MAML [5]

48.70±1.84

63.11±0.92

Meta-SGD [13]

50.47±1.87

64.03±0.94

Matching Network [28]

43.56±0.84

55.31±0.73

Prototypical Network [22]

49.42±0.78

68.20±0.66

Relation Network [23]

57.02±0.92

71.07±0.69

SNAIL [14]

55.71±0.99

68.88±0.92

Delta-Encoder [21]

58.7

73.6

Cos & Att. [8]

55.45±0.89

70.13 ±0.68

Prototype Classiﬁer

52.54±0.81

72.71±0.73

IDeMe-Net (Ours)

59.14±0.86

74.63±0.74

the
Table 4. Top-1 accuracy (%) on novel classes of
miniImageNet dataset. “±” indicates 95% conﬁdence intervals
over tasks.

ing and augmenting the training images in a way that max-
imizes the one-shot classiﬁcation accuracy.

6.3. Results on miniImageNet

Setup and Competitors. We use a ResNet-18 architecture
as the embedding sub-network. We randomly sample 30
images per base category to construct the gallery G. Other
settings are the same as those on the ImageNet 1k Challenge
dataset. As summarized in Table 4, we mainly focus on
three groups of competitors: (1) meta-learning algorithms,
such as MAML [5] and Meta-SGD [13]; (2) metric learning
algorithms, including matching networks [28], prototypical
networks [22], relation networks [23], SNAIL [14], delta-
encoder [21], and Cosine Classiﬁer & Att. Weight Gen (Cos
& Att.) [8].
Results. We report the results in Table 4.
Impressively,
our IDeMe-Net consistently outperforms all these state-of-
the-art competitors. This further validates the general effec-
tiveness of our proposed approach in addressing one-shot
learning tasks.

7. Conclusion

In this paper, we propose a conceptually simple yet
powerful approach to address one-shot learning that uses a
trained image deformation network to generate additional
examples. Our deformation network leverages unsuper-
vised gallery images to synthesize deformed images, which
was trained end-to-end by meta-learning. The extensive ex-
periments demonstrate that our approach achieves state-of-
the-art performance on multiple one-shot learning bench-
marks, surpassing the competing methods by large margins.
Acknowledgment: This work is supported in part by the
grants from NSFC (#61702108), STCSM (#16JC1420400),
Eastern Scholar (TP2017006), and The Thousand Talents
Plan of China (for young professionals, D1410009).

8687

References

[1] A. Boccolini, A. Fedrizzi, and D. Faccio. Ghost imag-

ing with the human eye. 2018. 1

[2] Q. Cai, Y. Pan, T. Yao, C. Yan, and T. Mei. Memory
matching networks for one-shot image recognition. In
CVPR, 2018. 2

[3] K. Chatﬁeld, K. Simonyan, A. Vedaldi, and A. Zisser-
man. Return of the devil in the details: Delving deep
into convolutional nets. In BMVC, 2014. 2

[4] L. Fei-Fei, R. Fergus, and P. Perona. One-shot learn-

ing of object categories. IEEE TPAMI, 2006. 1

[5] C. Finn, P. Abbeel, and S. Levine. Model-agnostic
meta-learning for fast adaptation of deep networks. In
ICML, 2017. 1, 2, 3, 6.3, 6.3

[6] H. Gao, Z. Shou, A. Zareian, H. Zhang, and S.-F.
Chang. Low-shot learning via covariance-preserving
adversarial augmentation networks. In NeurIPS, 2018.
2, 6.1, 6

[7] V. Garcia and J. Bruna. Few-shot learning with graph

neural networks. In ICLR, 2018. 2

[8] S. Gidaris and N. Komodakis. Dynamic few-shot vi-
sual learning without forgetting. In CVPR, 2018. 2,
6.1, 6, 6.3, 6.3

[9] B. Hariharan and R. Girshick. Low-shot visual recog-
In

nition by shrinking and hallucinating features.
ICCV, 2017. 2, 6, 6.1, 6, 2

[10] K. He, X. Zhang, S. Ren, and J. Sun. Deep residual
learning for image recognition. In CVPR, 2015. 4.1,
4.2

[11] G. Koch, R. Zemel, and R. Salakhutdinov. Siamese
In

neural networks for one-shot image recognition.
ICML – Deep Learning Workshok, 2015. 2

[12] A. Krizhevsky, I. Sutskever, and G. E. Hinton.

Im-
agenet classiﬁcation with deep convolutional neural
networks. In NeurIPS, 2012. 2

[13] Z. Li, F. Zhou, F. Chen, and H. Li. Meta-SGD:
learning.

Learning to learn quickly for few shot
arxiv:1707.09835, 2017. 1, 2, 6.3, 6.3

[14] N. Mishra, M. Rohaninejad, X. Chen, and P. Abbeel.
A simple neural attentive meta-learner. In ICLR, 2018.
2, 6.3, 6.3

[15] T. Munkhdalai and H. Yu. Meta networks. In ICML,

2017. 2

[18] M. Ren, E. Triantaﬁllou, S. Ravi, J. Snell, K. Swer-
sky, J. B. Tenenbaum, H. Larochelle, and R. S. Zemel.
Meta-learning for semi-supervised few-shot classiﬁ-
cation. In ICLR, 2018. 2

[19] A. Santoro, S. Bartunov, M. Botvinick, D. Wier-
stra, and T. Lillicrap. Meta-learning with memory-
augmented neural networks. In ICML, 2016. 2

[20] J. Schmidhuber.

Evolutionary principles in self-
referential learning. On learning how to learn: The
meta-meta-... hook.) Diploma thesis, Institut f. Infor-
matik, Tech. Univ. Munich, 1987. 1, 2

[21] E. Schwartz, L. Karlinsky, J. Shtok, S. Harary,
M. Marder, R. Feris, A. Kumar, R. Giryes, and A. M.
Bronstein. Delta-encoder: An effective sample syn-
thesis method for few-shot object recognition.
In
NeurIPS, 2018. 2, 6.3, 6.3

[22] J. Snell, K. Swersky, and R. S. Zemeln. Prototypical
networks for few-shot learning. In NeurIPS, 2017. 1,
2, 3, 4.3, 6, 6.1, 6, 6.3, 6.3

[23] F. Sung, Y. Yang, L. Zhang, T. Xiang, P. H. Torr, and
T. M. Hospedales. Learning to compare: Relation net-
work for few-shot learning. In CVPR, 2018. 2, 6.3,
6.3

[24] S. Thrun. Learning to learn: Introduction. Kluwer

Academic Publishers, 1996. 2

[25] S. Thrun. Lifelong learning algorithms. Learning to

learn, 8:181–209, 1998. 1, 2

[26] L. van der Maaten and G. Hinton. Visualizing high-
dimensional data using t-SNE. Journal of Machine
Learning Research, 2008. 6.2

[27] J. Vermaak, S. Maskell, and M. Briers. Online sensor
registration. In IEEE Aerospace Conference, 2005. 1

[28] O. Vinyals, C. Blundell, T. Lillicrap, K. Kavukcuoglu,
and D. Wierstra. Matching networks for one shot
learning.
In NeurIPS, 2016. 1, 2, 3, 6, 6.1, 6, 6.3,
6.3

[29] P. Wang, L. Liu, C. Shen, Z. Huang, A. Hengel, and
H. Tao Shen. Multi-attention network for one shot
learning. In CVPR, pages 6212–6220, 07 2017. 2

[30] Y.-X. Wang, R. Girshick, M. Hebert, and B. Hariha-
ran. Low-shot learning from imaginary data. In CVPR,
2018. 1, 2, 3, 6.1, 6, 6

[31] Y.-X. Wang and M. Hebert. Learning from small
sample sets by combining unsupervised meta-training
with CNNs. In NeurIPS, 2016. 1, 2

[16] A. Rasmus, H. Valpola, M. Honkala, M. Berglund,
and T. Raiko. Semi-supervised learning with ladder
networks. In NeurIPS, 2015. 2

[32] Y.-X. Wang and M. Hebert. Learning to learn: Model
regression networks for easy small sample learning. In
ECCV, 2016. 1, 2

[17] S. Ravi and H. Larochelle. Optimization as a model

[33] Y.-X. Wang, D. Ramanan, and M. Hebert. Learning to

for few-shot learning. In ICLR, 2017. 1, 2, 3, 6

model the tail. In NeurIPS, 2017. 1, 2

8688

[34] Z. Xu, L. Zhu, and Y. Yang. Few-shot object recog-
nition from machine-labeled web images. In CVPR,
2017. 3

[35] M. D. Zeiler and R. Fergus. Visualizing and under-

standing convolutional networks. In ECCV, 2014. 2

[36] H. Zhang, M. Ciss´e, Y. N. Dauphin, and D. Lopez-
Paz. Mixup: Beyond empirical risk minimization. In
ICLR, 2018. 2, 6.1, 6

[37] F. Zhou, B. Wu,

Deep meta-
learning: Learning to learn in the concept space.
arxiv:1802.03596, 2018. 2

and Z. Li.

8689

