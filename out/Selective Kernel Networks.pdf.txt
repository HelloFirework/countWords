Selective Kernel Networks

Xiang Li∗1,2, Wenhai Wang†3,2, Xiaolin Hu‡4 and Jian Yang§1

1PCALab, Nanjing University of Science and Technology

2Momenta

3Nanjing University

4Tsinghua University

Abstract

1. Introduction

In standard Convolutional Neural Networks (CNNs), the
receptive ﬁelds of artiﬁcial neurons in each layer are de-
signed to share the same size. It is well-known in the neu-
roscience community that the receptive ﬁeld size of visual
cortical neurons are modulated by the stimulus, which has
been rarely considered in constructing CNNs. We propose
a dynamic selection mechanism in CNNs that allows each
neuron to adaptively adjust its receptive ﬁeld size based
on multiple scales of input information. A building block
called Selective Kernel (SK) unit is designed, in which mul-
tiple branches with different kernel sizes are fused using
softmax attention that is guided by the information in these
branches. Different attentions on these branches yield dif-
ferent sizes of the effective receptive ﬁelds of neurons in
the fusion layer. Multiple SK units are stacked to a deep
network termed Selective Kernel Networks (SKNets). On
the ImageNet and CIFAR benchmarks, we empirically show
that SKNet outperforms the existing state-of-the-art archi-
tectures with lower model complexity. Detailed analyses
show that the neurons in SKNet can capture target objects
with different scales, which veriﬁes the capability of neu-
rons for adaptively adjusting their receptive ﬁeld sizes ac-
cording to the input. The code and models are available at
https://github.com/implus/SKNet.

∗Xiang Li and Jian Yang are with PCA Lab, Key Lab of Intelligent
Perception and Systems for High-Dimensional Information of Ministry of
Education, and Jiangsu Key Lab of Image and Video Understanding for
Social Security, School of Computer Science and Engineering, Nanjing
University of Science and Technology, China. Xiang Li is also a visiting
scholar at Momenta. Email: xiang.li.implus@njust.edu.cn

†Wenhai Wang is with National Key Lab for Novel Software Technol-

ogy, Nanjing University. He was an research intern at Momenta.

‡Xiaolin Hu is with the Tsinghua National Laboratory for Information
Science and Technology (TNList) Department of Computer Science and
Technology, Tsinghua University, China.

§Corresponding author.

The local receptive ﬁelds (RFs) of neurons in the primary
visual cortex (V1) of cats [14] have inspired the construc-
tion of Convolutional Neural Networks (CNNs) [26] in the
last century, and it continues to inspire mordern CNN struc-
ture construction. For instance, it is well-known that in the
visual cortex, the RF sizes of neurons in the same area (e.g.,
V1 region) are different, which enables the neurons to col-
lect multi-scale spatial information in the same processing
stage. This mechanism has been widely adopted in recent
Convolutional Neural Networks (CNNs). A typical exam-
ple is InceptionNets [42, 15, 43, 41], in which a simple con-
catenation is designed to aggregate multi-scale information
from, e.g., 3×3, 5×5, 7×7 convolutional kernels inside the
“inception” building block.

However, some other RF properties of cortical neurons
have not been emphasized in designing CNNs, and one such
property is the adaptive changing of RF size. Numerous ex-
perimental evidences have suggested that the RF sizes of
neurons in the visual cortex are not ﬁxed, but modulated by
the stimulus. The Classical RFs (CRFs) of neurons in the
V1 region was discovered by Hubel and Wiesel [14], as de-
termined by single oriented bars. Later, many studies (e.g.,
[30]) found that the stimuli outside the CRF will also af-
fect the responses of neurons. The neurons are said to have
non-classical RFs (nCRFs). In addition, the size of nCRF
is related to the contrast of the stimulus:
the smaller the
contrast, the larger the effective nCRF size [37]. Surpris-
ingly, by stimulating nCRF for a period of time, the CRF
of the neuron is also enlarged after removing these stim-
uli [33]. All of these experiments suggest that the RF sizes
of neurons are not ﬁxed but modulated by stimulus [38].
Unfortunately, this property does not receive much atten-
tion in constructing deep learning models. Those models
with multi-scale information in the same layer such as In-
ceptionNets have an inherent mechanism to adjust the RF
size of neurons in the next convolutional layer according
to the contents of the input, because the next convolutional

510

layer linearly aggregates multi-scale information from dif-
ferent branches. But that linear aggregation approach may
be insufﬁcient to provide neurons powerful adaptation abil-
ity.

In the paper, we present a nonlinear approach to aggre-
gate information from multiple kernels to realize the adap-
tive RF sizes of neurons. We introduce a “Selective Kernel”
(SK) convolution, which consists of a triplet of operators:
Split, Fuse and Select. The Split operator generates mul-
tiple paths with various kernel sizes which correspond to
different RF sizes of neurons. The Fuse operator combines
and aggregates the information from multiple paths to ob-
tain a global and comprehensive representation for selection
weights. The Select operator aggregates the feature maps of
differently sized kernels according to the selection weights.
The SK convolutions can be computationally lightweight
and impose only a slight increase in parameter and compu-
tational cost. We show that on the ImageNet 2012 dataset
[35] SKNets are superior to the previous state-of-the-art
models with similar model complexity. Based on SKNet-
50, we ﬁnd the best settings for SK convolution and show
the contribution of each component. To demonstrate their
general applicability, we also provide compelling results on
smaller datasets, CIFAR-10 and 100 [22], and successfully
embed SK into small models (e.g., ShufﬂeNetV2 [27]).

To verify the proposed model does have the ability to
adjust neurons’ RF sizes, we simulate the stimulus by en-
larging the target object in natural images and shrinking the
background to keep the image size unchanged. It is found
that most neurons collect information more and more from
the larger kernel path when the target object becomes larger
and larger. These results suggest that the neurons in the pro-
posed SKNet have adaptive RF sizes, which may underlie
the model’s superior performance in object recognition.

2. Related Work

Multi-branch convolutional networks. Highway net-
works [39] introduces the bypassing paths along with gat-
ing units. The two-branch architecture eases the difﬁculty
to training networks with hundreds of layers. The idea
is also used in ResNet [9, 10], but the bypassing path
is the pure identity mapping. Besides the identity map-
ping, the shake-shake networks [7] and multi-residual net-
works [1] extend the major transformation with more iden-
tical paths. The deep neural decision forests [21] form the
tree-structural multi-branch principle with learned splitting
functions. FractalNets [25] and Multilevel ResNets [52]
are designed in such a way that the multiple paths can
be expanded fractally and recursively. The InceptionNets
[42, 15, 43, 41] carefully conﬁgure each branch with cus-
tomized kernel ﬁlters, in order to aggregate more informa-
tive and multifarious features. Please note that the proposed
SKNets follow the idea of InceptionNets with various ﬁlters

for multiple branches, but differ in at least two important
aspects: 1) the schemes of SKNets are much simpler with-
out heavy customized design and 2) an adaptive selection
mechanism for these multiple branches is utilized to realize
adaptive RF sizes of neurons.

Grouped/depthwise/dilated convolutions. Grouped con-
volutions are becoming popular due to their low compu-
tational cost. Denote the group size by G, then both the
number of parameters and the computational cost will be
divided by G, compared to the ordinary convolution. They
are ﬁrst adopted in AlexNet [23] with a purpose of distribut-
ing the model over more GPU resources. Surprisingly, us-
ing grouped convolutions, ResNeXts [47] can also improve
accuracy. This G is called “cardinality”, which characterize
the model together with depth and width.

Many compact models such as IGCV1 [53], IGCV2 [46]
and IGCV3 [40] are developed, based on the interleaved
grouped convolutions. A special case of grouped convolu-
tions is depthwise convolution, where the number of groups
is equal to the number of channels. Xception [3] and Mo-
bileNetV1 [11] introduce the depthwise separable convolu-
tion which decomposes ordinary convolutions into depth-
wise convolution and pointwise convolution. The effec-
tiveness of depthwise convolutions is validated in the sub-
sequent works such as MobileNetV2 [36] and ShufﬂeNet
[54, 27]. Beyond grouped/depthwise convolutions, dilated
convolutions [50, 51] support exponential expansion of the
RF without loss of coverage. For example, a 3×3 convo-
lution with dilation 2 can approximately cover the RF of
a 5×5 ﬁlter, whilst consuming less than half of the com-
putation and memory. In SK convolutions, the kernels of
larger sizes (e.g., >1) are designed to be integrated with the
grouped/depthwise/dilated convolutions, in order to avoid
the heavy overheads.

Attention mechanisms. Recently, the beneﬁts of attention
mechanism have been shown across a range of tasks, from
neural machine translation [2] in natural language process-
ing to image captioning [49] in image understanding. It bi-
ases the allocation of the most informative feature expres-
sions [16, 17, 24, 28, 31] and simultaneously suppresses the
less useful ones. Attention has been widely used in recent
applications such as person re-ID [4], image recovery [55],
text abstraction [34] and lip reading [48]. To boost the per-
formance of image classiﬁcation, Wang et al. [44] propose
a trunk-and-mask attention between intermediate stages of
a CNN. An hourglass module is introduced to achieve the
global emphasis across both spatial and channel dimension.
Furthermore, SENet [12] brings an effective, lightweight
gating mechanism to self-recalibrate the feature map via
channel-wise importances. Beyond channel, BAM [32] and
CBAM [45] introduce spatial attention in a similar way. In
contrast, our proposed SKNets are the ﬁrst to explicitly fo-
cus on the adaptive RF size of neurons by introducing the

511

Figure 1. Selective Kernel Convolution.

attention mechanisms.
Dynamic convolutions. Spatial Transform Networks [18]
learns a parametric transformation to warp the feature map,
which is considered difﬁcult to be trained. Dynamic Fil-
ter [20] can only adaptively modify the parameters of ﬁl-
ters, without the adjustment of kernel size. Active Convo-
lution [19] augments the sampling locations in the convolu-
tion with offsets. These offsets are learned end-to-end but
become static after training, while in SKNet the RF sizes
of neurons can adaptively change during inference. De-
formable Convolutional Networks [6] further make the lo-
cation offsets dynamic, but it does not aggregate multi-scale
information in the same way as SKNet does.

3. Methods

3.1. Selective Kernel Convolution

To enable the neurons to adaptively adjust their RF sizes,
we propose an automatic selection operation, “Selective
Kernel” (SK) convolution, among multiple kernels with dif-
ferent kernel sizes. Speciﬁcally, we implement the SK con-
volution via three operators – Split, Fuse and Select, as illus-
trated in Fig. 1, where a two-branch case is shown. There-
fore in this example, there are only two kernels with differ-
ent kernel sizes, but it is easy to extend to multiple branches
case.

Split: For any given feature map X ∈ RH ′

×W ′

×C ′

, by

default we ﬁrst conduct two transformations eF : X → eU ∈
RH×W ×C and bF : X → bU ∈ RH×W ×C with kernel sizes
3 and 5, respectively. Note that both eF and bF are com-

posed of efﬁcient grouped/depthwise convolutions, Batch
Normalization [15] and ReLU [29] function in sequence.
For further efﬁciency, the conventional convolution with a
5×5 kernel is replaced with the dilated convolution with a
3×3 kernel and dilation size 2.

Fuse: As stated in Introduction, our goal is to enable
neurons to adaptively adjust their RF sizes according to the
stimulus content. The basic idea is to use gates to control
the information ﬂows from multiple branches carrying dif-
ferent scales of information into neurons in the next layer.

To achieve this goal, the gates need to integrate information
from all branches. We ﬁrst fuse results from multiple (two
in Fig. 1) branches via an element-wise summation:

U = eU + bU,

(1)

then we embed the global information by simply using
global average pooling to generate channel-wise statistics
as s ∈ RC . Speciﬁcally, the c-th element of s is calculated
by shrinking U through spatial dimensions H × W :

sc = Fgp(Uc) =

1

H × W

HX

WX

i=1

j=1

Uc(i, j).

(2)

Further, a compact feature z ∈ Rd×1 is created to enable
the guidance for the precise and adaptive selections. This
is achieved by a simple fully connected (fc) layer, with the
reduction of dimensionality for better efﬁciency:

z = Ff c(s) = δ(B(Ws)),

(3)

where δ is the ReLU function [29], B denotes the Batch
Normalization [15], W ∈ Rd×C . To study the impact of d
on the efﬁciency of the model, we use a reduction ratio r to
control its value:

d = max(C/r, L),

(4)

where L denotes the minimal value of d (L = 32 is a typical
setting in our experiments).

Select: A soft attention across channels is used to adap-
tively select different spatial scales of information, which is
guided by the compact feature descriptor z. Speciﬁcally, a
softmax operator is applied on the channel-wise digits:

ac =

eAc z

eAc z + eBc z , bc =

eBc z

eAc z + eBc z ,

(5)

where A, B ∈ RC×d and a, b denote the soft attention vec-
tor for eU and bU, respectively. Note that Ac ∈ R1×d is

the c-th row of A and ac is the c-th element of a, likewise

512

softmaxChw෩𝐔෡𝐔𝐬𝐔𝐳𝐚𝐛𝐕𝐗Kernel 3x3Kernel 5x5SplitFuseSelect෨ℱ෠ℱℱ𝑔𝑝ℱ𝑓𝑐element-wise summationelement-wise productOutput

112 × 112

56 × 56

56 × 56

28 × 28

14 × 14

7 × 7

1 × 1

#P

GFLOPs

ResNeXt-50 (32×4d)

SENet-50

SKNet-50

7 × 7, 64, stride 2

3 × 3 max pool, stride 2










1 × 1, 128
3 × 3, 128, G = 32
1 × 1, 256

1 × 1, 256
3 × 3, 256, G = 32
1 × 1, 512

1 × 1, 512
3 × 3, 512, G = 32
1 × 1, 1024










× 3

× 4

× 6




1 × 1, 1024
3 × 3, 1024, G = 32
1 × 1, 2048




× 3










1 × 1, 128
3 × 3, 128, G = 32
1 × 1, 256
f c, [16, 256]
1 × 1, 256
3 × 3, 256, G = 32
1 × 1, 512
f c, [32, 512]
1 × 1, 512
3 × 3, 512, G = 32
1 × 1, 1024
f c, [64, 1024]
1 × 1, 1024
3 × 3, 1024, G = 32
1 × 1, 2048
f c, [128, 2048]










× 3

× 4

× 6










1 × 1, 128
SK[M = 2, G = 32, r = 16], 128
1 × 1, 256

1 × 1, 256
SK[M = 2, G = 32, r = 16], 256
1 × 1, 512

1 × 1, 512
SK[M = 2, G = 32, r = 16], 512
1 × 1, 1024

× 3




1 × 1, 1024
SK[M = 2, G = 32, r = 16], 1024
1 × 1, 2048













× 3

× 4

× 6

× 3

7 × 7 global average pool, 1000-d f c, softmax

25.0M
4.24

27.7M
4.25

27.5M
4.47

Table 1. The three columns refer to ResNeXt-50 with a 32×4d template, SENet-50 based on the ResNeXt-50 backbone and the correspond-
ing SKNet-50, respectively. Inside the brackets are the general shape of a residual block, including ﬁlter sizes and feature dimensionalities.
The number of stacked blocks on each stage is presented outside the brackets. “G = 32” suggests the grouped convolution. The inner
brackets following by f c indicates the output dimension of the two fully connected layers in an SE module. #P denotes the number of
parameter and the deﬁnition of FLOPs follow [54], i.e., the number of multiply-adds.

Bc and bc. In the case of two branches, the matrix B is re-
dundant because ac + bc = 1. The ﬁnal feature map V is
obtained through the attention weights on various kernels:

Vc = ac · eUc + bc · bUc, ac + bc = 1,

(6)

where V = [V1, V2, ..., VC], Vc ∈ RH×W . Note that
here we provide a formula for the two-branch case and one
can easily deduce situations with more branches by extend-
ing Eqs. (1) (5) (6).

3.2. Network Architecture

Using the SK convolutions, the overall SKNet architec-
ture is listed in Table 1. We start from ResNeXt [47] for
two reasons: 1) it has low computational cost with extensive
use of grouped convolution, and 2) it is one of the state-of-
the-art network architectures with high performance on ob-
ject recognition. Similar to the ResNeXt [47], the proposed
SKNet is mainly composed of a stack of repeated bottle-
neck blocks, which are termed “SK units”. Each SK unit
consists of a sequence of 1×1 convolution, SK convolu-
tion and 1×1 convolution. In general, all the large kernel
convolutions in the original bottleneck blocks in ResNeXt
are replaced by the proposed SK convolutions, enabling the
network to choose appropriate RF sizes in an adaptive man-
ner. As the SK convolutions are very efﬁcient in our design,
SKNet-50 only leads to 10% increase in the number of pa-
rameters and 5% increase in computational cost, compared
with ResNeXt-50.

In SK units, there are three important hyper-parameters
which determine the ﬁnal settings of SK convolutions: the

number of paths M that determines the number of choices
of different kernels to be aggregated, the group number G
that controls the cardinality of each path, and the reduction
ratio r that controls the number of parameters in the fuse
operator (see Eq. (4)). In Table 1, we denote one typical
setting of SK convolutions SK[M, G, r] to be SK[2, 32, 16].
The choices and effects of these parameters are discussed in
Sec. 4.3.

Table 1 shows the structure of a 50-layer SKNet which
has four stages with {3,4,6,3} SK units, respectively. By
varying the number of SK units in each stage, one can ob-
tain different architectures. In this study, we have experi-
mented with other two architectures, SKNet-26, which has
{2,2,2,2} SK units, and SKNet-101, which has {3,4,23,3}
SK units, in their respective four stages.

Note that the proposed SK convolutions can be applied to
other lightweight networks, e.g., MobileNet [11, 36], Shuf-
ﬂeNet [54, 27], in which 3×3 depthwise convolutions are
extensively used. By replacing these convolutions with the
SK convolutions, we can also achieve very appealing results
in the compact architectures (see Sec. 4.1).

4. Experiments

4.1. ImageNet Classiﬁcation

The ImageNet 2012 dataset [35] comprises 1.28 mil-
lion training images and 50K validation images from 1,000
classes. We train networks on the training set and report the
top-1 errors on the validation set. For data augmentation,
we follow the standard practice and perform the random-

513

top-1 err (%)
224× 320×

#P

GFLOPs

ResNeXt-50
AttentionNeXt-56 [44]
InceptionV3 [43]
ResNeXt-50 + BAM [32]
ResNeXt-50 + CBAM [45]
SENet-50 [12]
SKNet-50 (ours)

ResNeXt-101
Attention-92 [44]
DPN-92 [5]
DPN-98 [5]
InceptionV4 [41]
Inception-ResNetV2 [41]
ResNeXt-101 + BAM [32]
ResNeXt-101 + CBAM [45]
SENet-101 [12]
SKNet-101 (ours)

22.23
21.76

–

21.70
21.40
21.12
20.79

21.11

–

20.70
20.20

–
–

20.67
20.60
20.58
20.19

21.05

–

21.20
20.15
20.38
19.71
19.32

19.86
19.50
19.30
18.90
20.00
19.90
19.15
19.42
18.61
18.40

25.0M
31.9M
27.1M
25.4M
27.7M
27.7M
27.5M

44.3M
51.3M
37.7M
61.6M
42.0M
55.0M
44.6M
49.2M
49.2M
48.9M

4.24
6.32
5.73
4.31
4.25
4.25
4.47

7.99
10.43
6.50
11.70
12.31
13.22
8.05
8.00
8.00
8.46

Table 2. Comparisons to the state-of-the-arts under roughly identi-
cal complexity. 224× denotes the single 224×224 crop for evalu-
ation, and likewise 320×. Note that SENets/SKNets are all based
on the corresponding ResNeXt backbones.

size cropping to 224 ×224 and random horizontal ﬂipping
[42]. The practical mean channel subtraction is adpoted to
normalize the input images for both training and testing.
Label-smoothing regularization [43] is used during train-
ing. For training large models, we use synchronous SGD
with momentum 0.9, a mini-batch size of 256 and a weight
decay of 1e-4. The initial learning rate is set to 0.1 and de-
creased by a factor of 10 every 30 epochs. All models are
trained for 100 epochs from scratch on 8 GPUs, using the
weight initialization strategy in [8]. For training lightweight
models, we set the weight decay to 4e-5 instead of 1e-4,
and we also use slightly less aggressive scale augmentation
for data preprocessing. Similar modiﬁcations can as well
be referenced in [11, 54] since such small networks usually
suffer from underﬁtting rather than overﬁtting. To bench-
mark, we apply a centre crop on the validation set, where
224×224 or 320×320 pixels are cropped for evaluating the
classiﬁcation accuracy. The results reported on ImageNet
are the averages of 3 runs by default.

Comparisons with state-of-the-art models. We ﬁrst com-
pare SKNet-50 and SKNet-101 to the public competitive
models with similar model complexity. The results show
that SKNets consistently improve performance over the
state-of-the-art attention-based CNNs under similar bud-
gets. Remarkably, SKNet-50 outperforms ResNeXt-101
by above absolute 0.32%, although ResNeXt-101 is 60%
larger in parameter and 80% larger in computation. With
comparable or less complexity than InceptionNets, SKNets
achieve above absolute 1.5% gain of performance, which

top-1 err. (%)

#P

GFLOPs

ResNeXt-50 (32×4d)

22.23

SKNet-50 (ours)

ResNeXt-50, wider
ResNeXt-56, deeper
ResNeXt-50 (36×4d)

20.79 (1.44)

22.13 (0.10)
22.04 (0.19)
22.00 (0.23)

25.0M

27.5M

28.1M
27.3M
27.6M

4.24

4.47

4.74
4.67
4.70

Table 3. Comparisons on ImageNet validation set when the com-
putational cost of model with more depth/width/cardinality is in-
creased to match that of SKNet. The numbers in brackets denote
the gains of performance.

demonstrates the superiority of adaptive aggregation for
multiple kernels. We also note that using slightly less pa-
rameters, SKNets can obtain 0.3∼0.4% gains to SENet
counterparts in both 224×224 and 320×320 evaluations.

Selective Kernel vs. Depth/Width/Cardinality. Com-
pared with ResNeXt (using the setting of 32×4d), SKNets
inevitably introduce a slightly increase in parameter and
computation due to the additional paths of differnet kernels
and the selection process. For fair comparison, we increase
the complexity of ResNeXt by changing its depth, width
and cardinality, to match the complexity of SKNets. Table
3 shows that increased complexity does lead to better pre-
diction accuracy.

However,

the improvement

is marginal when going
deeper
(0.19% from ResNeXt-50 to ResNeXt-53) or
wider (0.1% from ResNeXt-50 to ResNeXt-50 wider), or
with slightly more cardinality (0.23% from ResNeXt-50
(32×4d) to ResNeXt-50 (36×4d)).

In contrast, SKNet-50 obtains 1.44% absolute improve-
ment over the baseline ResNeXt-50, which indicates that
SK convolution is very efﬁcient.

Performance with respect to the number of parameters.
We plot the top-1 error rate of the proposed SKNet with
respect to the number of parameters in it (Fig. 2). Three ar-
chitectures, SK-26, SKNet-50 and SKNet-101 (see Section
3.2 for details), are shown in the ﬁgure. For comparison,
we plot the results of some state-of-the-art models includ-
ing ResNets [9], ResNeXts [47], DenseNets [13], DPNs [5]
and SENets [12] in the ﬁgure. Each model has multiple
variants. The details of the compared architectures are pro-
vided in the Supplementary Materials. All Top-1 errors are
reported in the references. It is seen that SKNets utilizes pa-
rameters more efﬁciently than these models. For instance,
achieving ∼20.2 top-1 error, SKNet-101 needs 22% fewer
parameters than DPN-98.

Lightweight models. Finally, we choose the representa-
tive compact architecture – ShufﬂeNetV2 [27], which is one
of the strongest light models, to evaluate the generalization
ability of SK convolutions. By exploring different scales of
models in Table 4, we can observe that SK convolutions not
only boost the accuracy of baselines signiﬁcantly but also

514

Models

#P

CIFAR-10

CIFAR-100

ResNeXt-29, 16×32d
ResNeXt-29, 8×64d
ResNeXt-29, 16×64d

SENet-29 [12]
SKNet-29 (ours)

25.2M
34.4M
68.1M

35.0M
27.7M

3.87
3.65
3.58

3.68
3.47

18.56
17.77
17.31

17.78
17.33

Table 5. Top-1 errors (%, average of 10 runs) on CIFAR. SENet-29
and SKNet-29 are all based on ResNeXt-29, 16×32d.

Settings

Kernel D

3×3
3×3
3×3
5×5
7×7

3
2
1
1
1

G

32
32
32
64
128

top-1

err. (%)

20.97
20.79
20.91
20.80
21.18

#P

GFLOPs

Resulted
Kernel

27.5M
27.5M
27.5M
28.1M
28.1M

4.47
4.47
4.47
4.56
4.55

7×7
5×5
3×3
5×5
7×7

Table 6. Results of SKNet-50 with different settings in the second
branch, while the setting of the ﬁrst kernel is ﬁxed. “Resulted
kernel” in the last column means the approximate kernel size with
dilated convolution.

K3 K5 K7

SK

X

X

X

X

X

X

X

X

X

X

X

X

X

X

X

X

X

X

X

X

X

X

X

X

X

top-1

err. (%)
22.23
25.14
25.51

21.76
20.79
21.82
20.97
23.64
23.09

21.47
20.76

#P

GFLOPs

25.0M
25.0M
25.0M

26.5M
27.5M
26.5M
27.5M
26.5M
27.5M

28.0M
29.3M

4.24
4.24
4.24

4.46
4.47
4.46
4.47
4.46
4.47

4.69
4.70

Table 7. Results of SKNet-50 with different combinations of mul-
tiple kernels. Single 224×224 crop is utilized for evaluation.

The dilation D and group number G. The dilation D and
group number G are two crucial elements to control the RF
size. To study their effects, we start from the two-branch
case and ﬁx the setting 3×3 ﬁlter with dilation D = 1 and
group G = 32 in the ﬁrst kernel branch of SKNet-50.

Under the constraint of similar overall complexity, there
are two ways to enlarge the RF of the second kernel branch:
1) increase the dilation D whilst ﬁxing the group number G,
and 2) simultaneously increase the ﬁlter size and the group
number G.

Table 6 shows that the optimal settings for the other
branch are those with kernel size 5×5 (the last column),
which is larger than the ﬁrst ﬁxed kernel with size 3×3. It
is proved beneﬁcial to use different kernel sizes, and we
attribute the reason to the aggregation of multi-scale infor-
mation.

Figure 2. Relationship between the performance of SKNet and the
number of parameters in it, compared with the state-of-the-arts.

ShufﬂeNetV2

top-1 err.(%) MFLOPs

#P

0.5× [27]
0.5× (our impl.)
0.5× + SE [12]
0.5× + SK

1.0× [27]
1.0× (our impl.)
1.0× + SE [12]
1.0× + SK

39.70
38.41
36.34
35.35

30.60
30.57
29.47
28.36

41

40.39
40.85
42.58

146

140.35
141.73
145.66

1.4M
1.40M
1.56M
1.48M

2.3M
2.45M
2.66M
2.63M

Table 4. Single 224×224 crop top-1 error rates (%) by variants of
lightweight models on ImageNet validation set.

perform better than SE [12] (achieving around absolute 1%
gain). This indicates the great potential of the SK convolu-
tions in applications on low-end devices.

4.2. CIFAR Classiﬁcation

To evaluate the performance of SKNets on smaller
datasets, we conduct more experiments on CIFAR-10 and
100 [22]. The two CIFAR datasets [22] consist of colored
natural scence images, with 32×32 pixel each. The train
and test sets contain 50k images and 10k images respec-
tively. CIFAR-10 has 10 classes and CIFAR-100 has 100.
We take the architectures as in [47] for reference: our net-
works have a single 3×3 convolutional layer, followed by 3
stages each having 3 residual blocks with SK convolution.
We also apply SE blocks on the same backbone (ResNeXt-
29, 16×32d) for better comparisons. More architectural and
training details are provided in the supplemantary materi-
als. Notably, SKNet-29 achieves better or comparable per-
formance than ResNeXt-29, 16×64d with 60% fewer pa-
rameters and it consistently outperforms SENet-29 on both
CIFAR-10 and 100 with 22% fewer parameters.

4.3. Ablation Studies

In this section, we report ablation studies on the Ima-

geNet dataset to investigate the effectiveness of SKNet.

There are two optimal conﬁgurations: kernel size 5×5

515

2030405060The number of parameters (M)20.020.521.021.522.022.523.023.524.0Top-1 error (%), single crop 224×224DPNDenseNetResNetResNeXtSENetSKNetwith D = 1 and kernel size 3×3 with D = 2, where the
latter has slightly lower model complexity. In general, we
empirically ﬁnd that the series of 3×3 kernels with various
dilations is moderately superior to the corresponding coun-
terparts with the same RF (large kernels without dilations)
in both performance and complexity.

Combination of different kernels. Next we investigate the
effect of combination of different kernels. Some kernels
may have size larger than 3×3, and there may be more than
two kernels. To limit the search space, we only use three
different kernels, called “K3” (standard 3×3 convolutional
kernel), “K5” (3×3 convolution with dilation 2 to approx-
imate 5×5 kernel size), and “K7” (3×3 with dilation 3 to
approximate 7×7 kernel size). Note that we only consider
the dilated versions of large kernels (5×5 and 7×7) as Ta-
ble 6 has suggested. G is ﬁxed to 32. If “SK” in Table 7
is ticked, it means that we use the SK attention across the
corresponding kernels ticked in the same row (the output of
each SK unit is V in Fig. 1), otherwise we simply sum up
the results with these kernels (then the output of each SK
unit is U in Fig. 1) as a naive baseline model.

The results in Table 7 indicate that excellent performance
of SKNets can be attributed to the use of multiple kernels
and the adaptive selection mechanism among them. From
Table 7, we have the following observations: (1) When the
number of paths M increases, in general the recognition
error decreases. The top-1 errors in the ﬁrst block of the
table (M = 1) are generally higher than those in the sec-
ond block (M = 2), and the errors in the second block are
generally higher than the third block (M = 3). (2) No mat-
ter M = 2 or 3, SK attention-based aggregation of multi-
ple paths always achieves lower top-1 error than the simple
aggregation method (naive baseline model). (3) Using SK
attention, the performance gain of the model from M = 2 to
M = 3 is marginal (the top-1 error decreases from 20.79%
to 20.76%). For better trade-off between performance and
efﬁciency, M = 2 is preferred.

4.4. Analysis and Interpretation

To understand how adaptive kernel selection works, we
analyze the attention weights by inputting same target ob-
ject but in different scales. We take all the image instances
from the ImageNet validation set, and progressively enlarge
the central object from 1.0× to 2.0× via a central cropping
and subsequent resizing (see top left in Fig. 3a,b).

First, we calculate the attention values for the large ker-
nel (5×5) in each channel in each SK unit. Fig. 3a,b (bot-
tom left) show the attention values in all channels for two
randomly samples in SK 3 4, and Fig. 3c (bottom left)
shows the averaged attention values in all channels across
all validation images. It is seen that in most channels, when
the target object enlarges, the attention weight for the large
kernel (5×5) increases, which suggests that the RF sizes of

(a)

(b)

(c)

Figure 3. (a) and (b): Attention results for two randomly sampled
images with three differently sized targets (1.0x, 1.5x and 2.0x).
Top left: sample images. Bottom left: the attention values for the
5×5 kernel across channels in SK 3 4. The plotted results are the
averages of 16 successive channels for the ease of view. Right: the
attention value of the kernel 5×5 minus that of the kernel 3×3 in
different SK units. (c): Average results over all image instances in
the ImageNet validation set. Standard deviation is also plotted.

the neurons are adaptively getting larger, which agrees with
our expectation.

We then calculate the difference between the the mean
attention weights associated with the two kernels (larger mi-
nus smaller) over all channels in each SK unit. Fig. 3a,b
(right) show the results for two random samples at different
SK units, and Fig. 3c (right) show the results averaged over
all validation images. We ﬁnd one surprising pattern about
the role of adaptive selection across depth: The larger the
target object is, the more attention will be assigned to larger

516

1.0x        1.5x        2.0x2_33_44_65_3SK unit0.080.060.040.020.00mean attention difference (kernel 5x5 - 3x3)1.0x1.5x2.0x0326496128160192224channel index0.4000.4250.4500.4750.5000.5250.550activationattention for 5x5 kernel in SK_3_41.0x1.5x2.0x1.0x        1.5x        2.0x2_33_44_65_3SK unit0.150.100.050.000.05mean attention difference (kernel 5x5 - 3x3)1.0x1.5x2.0x0326496128160192224channel index0.400.420.440.460.480.500.520.54activationattention for 5x5 kernel in SK_3_41.0x1.5x2.0x2_33_44_65_3SK unit0.20.10.00.10.20.3mean attention difference (kernel 5x5 - 3x3)1.0x1.5x2.0x0326496128160192224channel index0.400.420.440.460.480.500.520.54activationattention for 5x5 kernel in SK_3_41.0x1.5x2.0xFigure 4. Average mean attention difference (mean attention value of kernel 5×5 minus that of kernel 3×3) on SK units of SKNet-50, for
each of 1,000 categories using all validation samples on ImageNet. On low or middle level SK units (e.g., SK 2 3, SK 3 4), 5×5 kernels
are clearly imposed with more emphasis if the target object becomes larger (1.0x → 1.5x).

kernels by the Selective Kernel mechanism in low and mid-
dle level stages (e.g., SK 2 3, SK 3 4). However, at much
higher layers (e.g., SK 5 3), all scale information is getting
lost and such a pattern disappears.

Further, we look deep into the selection distributions
from the perspective of classes. For each category, we draw
the average mean attention differences on the representative
SK units for 1.0× and 1.5× objects over all the 50 images
which belong to that category. We present the statistics of
1,000 classes in Fig. 4. We observe the previous pattern
holds true for all 1,000 categories, as illustrated in Fig. 4,
where the importance of kernel 5×5 consistently and simul-
taneously increases when the scale of targets grows. This
suggests that in the early parts of networks, the appropri-
ate kernel sizes can be selected according to the semantic
awareness of objects’ sizes, thus it efﬁciently adjusts the
RF sizes of these neurons. However, such pattern is not
existed in the very high layers like SK 5 3, since for the
high-level representation, “scale” is partially encoded in the
feature vector, and the kernel size matters less compared to
the situation in lower layers.

5. Conclusion

Inspired by the adaptive receptive ﬁeld (RF) sizes of neu-
rons in visual cortex, we propose Selective Kernel Networks
(SKNets) with a novel Selective Kernel (SK) convolution,
to improve the efﬁciency and effectiveness of object recog-
nition by adaptive kernel selection in a soft-attention man-
ner. SKNets demonstrate state-of-the-art performances on
various benchmarks, and from large models to tiny models.
In addition, we also discover several meaningful behaviors
of kernel selection across channel, depth and category, and
empirically validate the effective adaption of RF sizes for
SKNets, which leads to a better understanding of its mech-
anism. We hope it may inspire the study of architectural
design and search in the future.

Acknowledgments The authors would like to thank the
editor and the anonymous reviewers for their critical and
constructive comments and suggestions. This work was
supported by the National Science Fund of China under
Grant No. U1713208, Program for Changjiang Scholars
and National Natural Science Foundation of China, Grant
no. 61836014.

517

01002003004005006007008009001000class index0.080.070.060.050.040.03mean attention difference (kernel 5x5 - 3x3) on SK_2_3 over various classes1.0x1.5x01002003004005006007008009001000class index0.060.050.040.030.020.01mean attention difference (kernel 5x5 - 3x3) on SK_3_4 over various classes1.0x1.5x01002003004005006007008009001000class index0.100.050.000.050.100.150.20mean attention difference (kernel 5x5 - 3x3) on SK_5_3 over various classes1.0x1.5xReferences

[23] A. Krizhevsky, I. Sutskever, and G. E. Hinton.

[1] M. Abdi and S. Nahavandi. Multi-residual networks. arxiv

preprint. arXiv preprint arXiv:1609.05672, 2016.

[2] D. Bahdanau, K. Cho, and Y. Bengio. Neural machine
translation by jointly learning to align and translate. arXiv
preprint arXiv:1409.0473, 2014.

[3] J. Carreira, H. Madeira, and J. G. Silva. Xception: A tech-
nique for the experimental evaluation of dependability in
modern computers. Transactions on Software Engineering,
1998.

[4] D. Chen, S. Zhang, W. Ouyang, J. Yang, and Y. Tai. Per-
son search via a mask-guided two-stream cnn model. arXiv
preprint arXiv:1807.08107, 2018.

[5] Y. Chen, J. Li, H. Xiao, X. Jin, S. Yan, and J. Feng. Dual

path networks. In NIPS, 2017.

[6] J. Dai, H. Qi, Y. Xiong, Y. Li, G. Zhang, H. Hu, and
Y. Wei. Deformable convolutional networks. arXiv preprint
arXiv:1703.06211, 2017.

[7] X. Gastaldi. Shake-shake regularization. arXiv preprint

arXiv:1705.07485, 2017.

[8] K. He, X. Zhang, S. Ren, and J. Sun. Delving deep into
rectiﬁers: Surpassing human-level performance on imagenet
classiﬁcation. In ICCV, 2015.

[9] K. He, X. Zhang, S. Ren, and J. Sun. Deep residual learning

for image recognition. In CVPR, 2016.

[10] K. He, X. Zhang, S. Ren, and J. Sun. Identity mappings in

deep residual networks. In ECCV, 2016.

[11] A. G. Howard, M. Zhu, B. Chen, D. Kalenichenko, W. Wang,
T. Weyand, M. Andreetto, and H. Adam. Mobilenets: Efﬁ-
cient convolutional neural networks for mobile vision appli-
cations. arXiv preprint arXiv:1704.04861, 2017.

[12] J. Hu, L. Shen, and G. Sun. Squeeze-and-excitation net-

works. arXiv preprint arXiv:1709.01507, 2017.

[13] G. Huang, Z. Liu, L. Van Der Maaten, and K. Q. Weinberger.
Densely connected convolutional networks. In CVPR, 2017.

[14] D. H. Hubel and T. N. Wiesel. Receptive ﬁelds, binocular
interaction and functional architecture in the cat’s visual cor-
tex. The Journal of Physiology, 1962.

[15] S. Ioffe and C. Szegedy. Batch normalization: Accelerating
deep network training by reducing internal covariate shift.
arXiv preprint arXiv:1502.03167, 2015.

[16] L. Itti and C. Koch. Computational modelling of visual at-

tention. Nature Reviews Neuroscience, 2001.

[17] L. Itti, C. Koch, and E. Niebur. A model of saliency-based

visual attention for rapid scene analysis. TPAMI, 1998.

[18] M. Jaderberg, K. Simonyan, A. Zisserman, et al. Spatial

transformer networks. In NIPS, 2015.

Imagenet
In

classiﬁcation with deep convolutional neural networks.
NIPS, 2012.

[24] H. Larochelle and G. E. Hinton. Learning to combine foveal
In NIPS,

glimpses with a third-order boltzmann machine.
2010.

[25] G. Larsson, M. Maire, and G. Shakhnarovich. Fractalnet:
Ultra-deep neural networks without residuals. arXiv preprint
arXiv:1605.07648, 2016.

[26] Y. LeCun, B. Boser, J. S. Denker, D. Henderson, R. E.
Howard, W. Hubbard, and L. D. Jackel. Backpropagation
applied to handwritten zip code recognition. Neural Compu-
tation, 1989.

[27] N. Ma, X. Zhang, H.-T. Zheng, and J. Sun. Shufﬂenet
v2: Practical guidelines for efﬁcient cnn architecture design.
arXiv preprint arXiv:1807.11164, 2018.

[28] V. Mnih, N. Heess, A. Graves, et al. Recurrent models of

visual attention. In NIPS, 2014.

[29] V. Nair and G. E. Hinton. Rectiﬁed linear units improve re-

stricted boltzmann machines. In ICML, 2010.

[30] J. Nelson and B. Frost. Orientation-selective inhibition from
beyond the classic visual receptive ﬁeld. Brain Research,
1978.

[31] B. A. Olshausen, C. H. Anderson, and D. C. Van Essen. A
neurobiological model of visual attention and invariant pat-
tern recognition based on dynamic routing of information.
Journal of Neuroscience, 1993.

[32] J. Park, S. Woo, J.-Y. Lee, and I. S. Kweon. Bam: Bottleneck

attention module. arXiv preprint arXiv:1807.06514, 2018.

[33] M. W. Pettet and C. D. Gilbert. Dynamic changes in
receptive-ﬁeld size in cat primary visual cortex. Proceedings
of the National Academy of Sciences, 1992.

[34] A. M. Rush, S. Chopra, and J. Weston. A neural atten-
tion model for abstractive sentence summarization. arXiv
preprint arXiv:1509.00685, 2015.

[35] O. Russakovsky, J. Deng, H. Su, J. Krause, S. Satheesh,
S. Ma, Z. Huang, A. Karpathy, A. Khosla, M. Bernstein,
et al.
Imagenet large scale visual recognition challenge.
IJCV, 2015.

[36] M. Sandler, A. Howard, M. Zhu, A. Zhmoginov, and L.-C.
Chen. Mobilenetv2: Inverted residuals and linear bottle-
necks. In CVPR, 2018.

[37] M. P. Sceniak, D. L. Ringach, M. J. Hawken, and R. Shap-
ley. Contrast’s effect on spatial summation by macaque v1
neurons. Nature Neuroscience, 1999.

[38] L. Spillmann, B. Dresp-Langley, and C.-h. Tseng. Beyond
the classical receptive ﬁeld: the effect of contextual stimuli.
Journal of Vision, 2015.

[19] Y. Jeon and J. Kim. Active convolution: Learning the shape

[39] R. K. Srivastava, K. Greff, and J. Schmidhuber. Highway

of convolution for image classiﬁcation. In CVPR, 2017.

networks. arXiv preprint arXiv:1505.00387, 2015.

[20] X. Jia, B. De Brabandere, T. Tuytelaars, and L. V. Gool. Dy-

namic ﬁlter networks. In NIPS, 2016.

[21] P. Kontschieder, M. Fiterau, A. Criminisi, and S. Rota Bulo.

Deep neural decision forests. In ICCV, 2015.

[22] A. Krizhevsky and G. Hinton. Learning multiple layers of

features from tiny images. 2009.

[40] K. Sun, M. Li, D. Liu, and J. Wang. Igcv3: Interleaved low-
rank group convolutions for efﬁcient deep neural networks.
arXiv preprint arXiv:1806.00178, 2018.

[41] C. Szegedy, S. Ioffe, V. Vanhoucke, and A. A. Alemi.
Inception-v4, inception-resnet and the impact of residual
connections on learning. In AAAI, 2017.

518

[42] C. Szegedy, W. Liu, Y. Jia, P. Sermanet, S. Reed,
D. Anguelov, D. Erhan, V. Vanhoucke, and A. Rabinovich.
Going deeper with convolutions. In CVPR, 2015.

[43] C. Szegedy, V. Vanhoucke, S. Ioffe, J. Shlens, and Z. Wojna.
Rethinking the inception architecture for computer vision. In
CVPR, 2016.

[44] F. Wang, M. Jiang, C. Qian, S. Yang, C. Li, H. Zhang,
X. Wang, and X. Tang. Residual attention network for image
classiﬁcation. arXiv preprint arXiv:1704.06904, 2017.

[45] S. Woo, J. Park, J.-Y. Lee, and I. S. Kweon. Cbam:
arXiv preprint

Convolutional block attention module.
arXiv:1807.06521, 2018.

[46] G. Xie, J. Wang, T. Zhang, J. Lai, R. Hong, and G.-J. Qi.
Igcv 2: Interleaved structured sparse convolutional neural
networks. arXiv preprint arXiv:1804.06202, 2018.

[47] S. Xie, R. Girshick, P. Doll´ar, Z. Tu, and K. He. Aggregated
residual transformations for deep neural networks. In CVPR,
2017.

[48] K. Xu, D. Li, N. Cassimatis, and X. Wang. Lcanet: End-
to-end lipreading with cascaded attention-ctc.
In Interna-
tional Conference on Automatic Face & Gesture Recogni-
tion, 2018.

[49] Q. You, H. Jin, Z. Wang, C. Fang, and J. Luo. Image cap-

tioning with semantic attention. In CVPR, 2016.

[50] F. Yu and V. Koltun. Multi-scale context aggregation by di-
lated convolutions. arXiv preprint arXiv:1511.07122, 2015.
[51] F. Yu, V. Koltun, and T. A. Funkhouser. Dilated residual

networks. In CVPR, 2017.

[52] K. Zhang, M. Sun, X. Han, X. Yuan, L. Guo, and T. Liu.
Residual networks of residual networks: Multilevel residual
networks. Transactions on Circuits and Systems for Video
Technology, 2017.

[53] T. Zhang, G.-J. Qi, B. Xiao, and J. Wang. Interleaved group

convolutions. In CVPR, 2017.

[54] X. Zhang, X. Zhou, M. Lin, and J. Sun. Shufﬂenet: An
extremely efﬁcient convolutional neural network for mobile
devices. arxiv 2017. arXiv preprint arXiv:1707.01083, 2017.
[55] Y. Zhang, K. Li, K. Li, L. Wang, B. Zhong, and Y. Fu. Image
super-resolution using very deep residual channel attention
networks. arXiv preprint arXiv:1807.02758, 2018.

519

