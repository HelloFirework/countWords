OICSR: Out-In-Channel Sparsity Regularization for

Compact Deep Neural Networks

Jiashi Li1,2,*, Qi Qi1,2,*, Jingyu Wang1,2,†, Ce Ge1,2, Yujian Li1,2, Zhangzhang Yue1, and Haifeng Sun1,2

1State Key Laboratory of Networking and Switching Technology, Beijing University of Posts and

Telecommunications, Beijing 100876, P.R. China

2EBUPT Information Technology Co., Ltd., Beijing 100191, P.R. China

Abstract

Channel pruning can signiﬁcantly accelerate and com-
press deep neural networks. Many channel pruning works
utilize structured sparsity regularization to zero out all
the weights in some channels and automatically obtain
structure-sparse network in training stage. However, these
methods apply structured sparsity regularization on each
layer separately where the correlations between consecu-
tive layers are omitted.
In this paper, we ﬁrst combine
one out-channel in current layer and the corresponding in-
channel in next layer as a regularization group, namely out-
in-channel. Our proposed Out-In-Channel Sparsity Regu-
larization (OICSR) considers correlations between succes-
sive layers to further retain predictive power of the compact
network. Training with OICSR thoroughly transfers dis-
criminative features into a fraction of out-in-channels. Cor-
respondingly, OICSR measures channel importance based
on statistics computed from two consecutive layers, not in-
dividual layer. Finally, a global greedy pruning algorithm
is designed to remove redundant out-in-channels in an iter-
ative way. Our method is comprehensively evaluated with
various CNN architectures including CifarNet, AlexNet,
ResNet, DenseNet and PreActSeNet on CIFAR-10, CIFAR-
100 and ImageNet-1K datasets. Notably, on ImageNet-1K,
we reduce 37.2% FLOPs on ResNet-50 while outperform-
ing the original model by 0.22% top-1 accuracy.

1. Introduction

Convolutional neural networks (CNNs) have achieved
signiﬁcant successes in visual tasks, including image clas-
siﬁcation [10, 21, 33], object detection [5, 31], seman-
tic segmentation [2, 25], etc. However, large CNNs suf-

∗ Authors contributed equally
† Corresponding author: wangjingyu@bupt.edu.cn

fer from massive computational and storage overhead. For
instance, deep residual network ResNet-50 [10] takes up
about 190MB storage space, and needs more than 4 bil-
lion ﬂoat point operations (FLOPs) to classify a single im-
age. High demand for computation and storage resources
severely hinders the deployment of large-scale CNNs in re-
source constrained devices such as mobile devices, wear-
able devices and Internet of Things (IoT) equipment.

Pruning [9, 34] is an important family of methods to slim
neural network by removing redundant connections, chan-
nels and layers. Connection pruning gains high compres-
sion ratio but leads to non-structured sparsity of CNNs [34].
The practical acceleration of non-structured sparsity is lim-
ited due to irregular memory access. Therefore, structured
sparsity pruning [34, 36] becomes growing popular.

Regularization-based channel pruning [24, 34] is a pop-
ular direction of structured sparsity pruning. These works
introduce structured sparsity regularization (structured reg-
ularization) into optimization objective of model training.
Training with structured regularization transfers important
features into a small quantity of channels and automatically
obtains structure-sparse model. Pruning structure-sparse
models keeps more features/accuracy compared with di-
rectly pruning non-sparse models [34]. For channel-level
pruning, existing regularization-based works apply struc-
tured regularization on each layer separately, and only en-
force channel-level sparsity in out-channels. However, the
corresponding in-channels in next layer are neglected and
non-sparse. We call them as the separated structured regu-
larization. Pruning one out-channel in current layer results
in a dummy zero output feature map that in turn prunes
a corresponding in-channel in next layer together. With-
out structure sparsity, useful features in in-channels of next
layer are falsely discarded, which severely impair the repre-
sentational capacity of the network.

In this paper, we propose a novel structured regulariza-

17046

+

𝑜𝑢𝑡-𝑖𝑛-𝑐ℎ𝑎𝑛𝑛𝑒𝑙1𝑙,𝑙+1
𝑋1𝑙+1
×

𝑋𝑙+1

output

𝑜𝑢𝑡-𝑐ℎ𝑎𝑛𝑛𝑒𝑙1𝑙

𝑋𝑙 ×

𝑊𝑙𝑇

(a) Consecutive fully-connected layers

𝑊𝑙+1𝑇

𝑖𝑛-𝑐ℎ𝑎𝑛𝑛𝑒𝑙1𝑙+1

𝑜𝑢𝑡-𝑐ℎ𝑎𝑛𝑛𝑒𝑙1𝑙

output

𝑜𝑢𝑡-𝑖𝑛-𝑐ℎ𝑎𝑛𝑛𝑒𝑙1𝑙,𝑙+1
𝑋1𝑙+1

+

. . .

conv

𝑖𝑛-𝑐ℎ𝑎𝑛𝑛𝑒𝑙1𝑙+1

.
.
.

…
…
…
…

𝑊𝑙+1

.
.
.

𝑊𝑙

𝑋𝑙+1

(b) Consecutive convolutional layers

i. Next, X l+1

Figure 1: Correlations between two consecutive layers and the deﬁnition of out-in-channel. out-channell
vector of ith out-channel of W l. X l is the input of lth layer and X l+1
channell
channels (marked by the same color) out-channell
and are simultaneously pruned/saved. Therefore, out-channell
(out-in-channell,l+1

i is the weight
is the output of X l multiplied/convoluted by out-
i
to obtain the input of next layer. The corresponding
of two consecutive layers tend to work cooperatively
are regarded as one regularization group
i and in-channell+1
.

) and are regularized together. Above ’⊕’ denotes concatenation of out-channell

is multiplied/convoluted by in-channell+1

i and in-channell+1

i and in-channell+1

i

i

i

i

i

i

tion form, namely Out-In-Channel Sparsity Regularization
(OICSR), to learn more compact deep neural networks. Dif-
ferent from separated structured regularization, correlations
between two consecutive layers are taken into account for
channel pruning. An out-channel in current layer and the
corresponding in-channel in next layer are combined to be
a regularization group, namely out-in-channel. In training
stage, features in one out-in-channel are simultaneously re-
distributed by OICSR. After training, features in redundant
out-in-channels are thoroughly transferred to automatically
selected important out-in-channels. Specially, the chan-
nel importance is measured based on statistics of two con-
secutive layers, not individual layer. To minimize accu-
racy loss induced by incorrect channel pruning, a greedy
algorithm is proposed to globally prune redundant out-in-
channels in an iterative way. As a result, pruning redun-
dant out-in-channels induces negligible accuracy loss and it
can be greatly compensated by the ﬁne-tuning procedure.
Our method achieves higher speedup ratio and compression
compared with existing regularization-based methods. For
ResNet-18 [10] on CIFAR-10 [20] dataset, OICSR achieves
7.4× speedup and 11× parameters compression with tiny
(0.19%) top-1 accuracy drop.

The key advantages and major contributions of this paper

can be summarized as follows:

• We propose a novel structured regularization form,
namely OICSR, which takes account correlations be-
tween two consecutive layers to further retain predic-
tive power of the compact network.

• To minimize accuracy loss induced by incorrect chan-
nel pruning, OICSR measures channel
importance
based on statistics computed from two consecutive lay-
ers. A global greedy pruning algorithm is proposed to

remove out-in-channels in an iterative way.

• To the best of our knowledge, this paper is the ﬁrst
attempt to present the evaluation of regularization-
based channel pruning methods for very deep neural
networks (ResNet-50 in this paper) on ImageNet [6]
dataset.

2. Related Work

Obtaining compact deep neural networks for speeding up
inference and reducing storage overhead has been a long-
studied project in both academia and industry.

Recently, much attention has been focused on struc-
tured sparsity pruning to reduce network complexity. He
et al. [13] pruned channels by a LASSO regression based
channel selection and least square reconstruction. Channel
pruning was regarded as an optimization problem by Luo
et al. [26] and redundant channels were pruned by statis-
tics of its next layer. Yu et al. [36] conducted feature rank-
ing to obtain neuron/channel importance score and prop-
agated it throughout the network. The neurons/channels
with smaller importance scores were removed with negligi-
ble accuracy loss. Chin et al. [3] considered channel prun-
ing as a global ranking problem and compensated the layer-
wise approximation error that improved the performance
for various heuristic metrics. To reduce accuracy loss
caused by incorrect channel pruning, redundant channels
were pruned in a dynamic way in [11, 23]. Furthermore,
Huang et al. [17] and Huang & Wang [18] trained prun-
ing agents and removed redundant structure in a data-driven
way. These methods directly pruned insigniﬁcant channels
on non-structured sparse models, which may falsely aban-
don useful features and induce obvious accuracy decline.

More recent developments adopted structured regular-

27047

ization to learn structured sparsity in training stage. Zhang
et al. [39] incorporated sparse constraints into objective
function to decimate the number of channels in CNNs. Sim-
ilarly, Wen et al. [34] utilized Group Lasso to automati-
cally obtain channel, ﬁlter shape and layer level sparsity
in CNNs during network training. In [35], group and ex-
clusive sparsity regularization are combined to exploit both
positive and negative correlations among features, while en-
forcing the network to be structure-sparse. Moreover, Liu
et al. [24] proposed Network-Sliming which applied L1-
norm on channel scaling factors. After training, channels
with small-magnitude scaling factors are pruned. Zhang
et al. [38] adopted GrOWL regularization for simultaneous
parameter sparsity and tying in CNNs learning. For chan-
nel pruning, these works automatically obtain channel-level
sparse networks in training stage. Therefore, redundant
channels are pruned with less accuracy decline. However,
the above methods only apply separated structured regular-
ization on out-channel in current layer but in-channels in
next layer are neglected. Besides, these methods have not
been accessed with very deep neural networks on ImageNet
dataset.

Low rank approximation [7, 29], network quantiza-
tion [4, 19, 30], knowledge distillation [14] and reinforce-
ment learning [1, 12] are popular techniques to speedup and
compress CNNs. These techniques can be combined with
our channel pruning method for further improvement.

3. Approach

3.1. Motivation

We start by analyzing the drawbacks of separated struc-
tured regularization. The optimization objective of CNNs
with separated structured regularization is formulized as:

J(W ) = Loss(W, D) + λR(W ) + λs

Rss(W l) (1)

L

Xl=1

the L layers
where W is trainable weights across all
in CNNs and D = {(xi, yi)}N
i=1 is a training dataset.
Loss(W, D) denotes the normal training loss on the dataset
D. And R(W ) represents the non-structured regularization,
e.g., L1 regularization and L2 regularization. The func-
tion Rss(·) denotes the separated structured regularization
applied on L layers separately. λ and λs are the hyper-
parameters of non-structured regularization and structured
regularization.

The correlations between two consecutive layers are il-
lustrated in Fig. 1. Features in the ith out-channel of layer
l and the ith in-channel of layer l + 1 are interdepen-
dent and tend to work cooperatively [26, 36]. Accordingly
they should be regularized and redistributed together dur-
ing training. However, Rss(W l) regularizes layer l sepa-
rately. Suppose the lth layer is a fully connected layer with

W l ∈ ROC l×IC l , where OC l and IC l are the dimensions
of W l along the axes of out-channels and in-channels re-
spectively. The separated structured regularization Rss(·)
applied on out-channels of W l for channel-level sparsity is:

OCl

Rss(W l) =

kW l

i,:kc

(2)

Xi=1

where W l

i,: is the weight vector of ith out-channel of W l,

Pi k · kc is a speciﬁc structured regularization term which

can effectively zero out all weights in some out-channels,
such as Group Lasso [37], CGER [35] and GrOWL [8]. The
separated Group Lasso for channel-level sparsity is:

R∗

ss(W l) =

OCl

Xi=1sXj

(W l

i,j)2

(3)

The critical issue of separated structured regularization
is that the correlations between two consecutive layers of
CNNs are disregarded.
It separately regularizes and en-
forces out-channels of each layer to be sparse. After train-
ing with separated structured regularization, features in the
ith out-channel of layer l may be squeezed to the ith in-
channel of layer l + 1, instead of the rest out-channels of
layer l. Pruning the ith out-channel of layer l results in
pruning the ith in-channel of layer l + 1 together. Important
features in the ith in-channel of layer l + 1 may be falsely
discarded that losses massive accuracy. Moreover, the sep-
arated structured regularization fails to maximally prune re-
dundant channels and utilize the representational capacity
of CNNs.

3.2. Out In Channel Sparsity Regularization

We propose out-in-channel sparsity regularization to
tackle the drawbacks of separated structured regulariza-
tion. The deﬁnition of out-in-channel is demonstrated
in Fig. 1.
The corresponding channels of two con-
secutive layers work cooperatively and are simultane-
ously pruned/saved. Therefore, OICSR concatenates out-
channell
as one regularization group
out-in-channell,l+1
The optimization objective with
OICSR of CNNs can be given as follows:

i with in-channell+1

.

i

i

J(W ) = Loss(W, D) + λR(W )

+ λs

Roic(W l, W l+1)

(4)

L−1

Xl=1

where Roic(W l, W l+1) is the out-in-channel sparisity reg-
ularization which regularizes out-in-channels of layer l and
layer l + 1 together. OICSR of two consecutive fully-
connected layers is given as:

Roic(W l, W l+1) =

OCl

Xi=1

37048

kW l

i,: ⊕ W l+1

:,i koic

(5)

Initialized 
network 

Train with 

OICGR

Prune unimportant 

channels

Fine-tune 
with OICGR

Compact 
network

Iterative

tical imformation of two consecutive layers. The channel
importance of Group Lasso in OICSR form is given as:

Figure 2: Iterative channel pruning procedure with OICSR.

El,l+1

i

= kW l

i,: ⊕ W l+1

:,i k2

i,: and W l+1
:,i

where Pi k · koic is a speciﬁc structured regularization

term in OICSR form which can simultaneously zero out all
weights in some out-in-channels. The symbol ⊕ denotes
concatenation of W l
. For two consecutive con-
volutional layers, with W l ∈ ROC l×IC l×Hl×Wl and W l+1,
where Hl and Wl denote the height and width respectively,
we ﬁrst reshape W l and W l+1 to 2D matrices, i.e. W l ∈
ROC l×(IClHlWl) and W l+1 ∈ R(OCl+1Hl+1Wl+1)×IC l+1 .
Then, OICSR of two consecutive convolutional layers can
be similarly formulated as Eq. 5.

OICSR regards one out-in-channel as a regularization
group in which features are simultaneously redistributed in
training stage. After training, features in redundant out-
in-channels are thoroughly transferred to important out-in-
channels. As a result, OICSR is able to prune more redun-
dant out-in-channels in large networks with less accuracy
loss. Actually, the correlations between layer l and layer
l + n (n > 2) are too complex to be formulated in struc-
tured regularization form. It is a trade-off between practi-
cability and effectiveness to consider the correlation of two
consecutive layers.

OICSR is a generic regularization form which can works
with several structured regularization terms, e.g., Group
Lasso in OICSR form for channel-level sparsity is given as:

R∗

oic(W l, W l+1) =

OCl

Xi=1sXj

(W l

i,j)2 +Xj

(W l+1

j,i )2

(6)

The other structured regularization terms can be extended
into OICSR form in a similar way.

3.3. Criterion of Channel Importance

importance metric.

For computational efﬁciency,

the channel energy is
chosen as the channel
Existing
regularization-based methods [22, 24, 34, 35] only utilize
statistics of individual layer to guide the channel pruning.
In this paper, the channel importance of separated Group
Lasso and non-structured regularization is deﬁned as:

El

i = kW l

i,:k2

2 =Xj

(W l

i,j)2

(7)

where El
i is the energy of the ith out-channel of layer l. The
statistical imformation of next layer are abandoned that may
cause incorrect selection of redundant channels. In partic-
ular, OICSR measures channel importance based on statis-

2 =Xj

(W l

i,j)2 +Xj

(W l+1

j,i )2

(8)
where El,l+1
is the energy of the ith out-in-channel of layer
l and layer l + 1. The higher the energy, the more important
the out-in-channel is.

i

3.4. Channel Pruning Framework

With initialized deep neural networks, our iterative chan-
nel pruning procedures are illustrated in Fig. 2.
In fact,
it is puzzling to manually determine the redundancy and
channel pruning ratio for each layer. Therefore, a global
greedy pruning algorithm is proposed to minimize the ac-
curacy loss caused by incorrect channel pruning. As shown
in Algorithm 1, in each iteration, redundant out-in-channels
across all layers are globally selected and greedily removed
until reaching the preset FLOPs pruning ratio.

Algorithm 1 Global greedy pruning algorithm

Input: Training dataset D, initialzed model W, number of

pruning iteration T , FLOPs pruning ratio P ∈ RT

1: W (0) ← train(W, D) with OICSR from scratch
2: for t = 1 to T do
3:

˜E ← ∅
// global channel selection
for l = 1 to L − 1 do

for i = 1 to OCl do

˜E ← ˜E ∪ {El,l+1

} as Eq. 8

i

˜E = sort( ˜E)
// greedy channel pruning
repeat

// remove the corresponding channel with ˜E(0)
W (t−1) ← prune(W (t−1), ˜E(0))
˜E ← ˜E\ ˜E(0)

until flops(W (t−1)) < (1 − Pt) · flops(W (0))
W (t) ← W (t−1)
W (t) ← fine-tune(W (t), D) with OICSR

16:
Output: The compact model W (T )

4:

5:

6:

7:

8:

9:

10:

11:

12:

13:

14:

15:

Compared with single pass pruning, iterative pruning
leads to smoother pruning process with less accuracy drop.
Pruning a whole layer is detrimental to the network [3, 24].
Accordingly, we set a constraint that no more than 50% of
out-in-channels in two consecutive layers are pruned in one
channel pruning iteration.

Fine-tuning is an important process after channel prun-
ing. To the best of our knowledge, we are the ﬁrst to
ﬁne-tune the pruned network with structured regularization.
Fine-tuning with OICSR simultaneously recovers the di-
minished accuracy of channel pruning in last step and en-

47049

(a) CifarNet on CIFAR-10

(b) ResNet-18 on CIFAR-10

(c) DenseNet-89 on CIFAR-10

(d) AlexNet on ImageNet-1K

(e) CifarNet on CIFAR-100

(f) ResNet-56 on CIFAR-100

(g) PreActSeNet-18 on CIFAR-100

(h) ResNet-50 on ImageNet-1K

Figure 3: Comparison between OICSR-GL and baselines of the trade-off between top-1 accuracy (without ﬁne-tuning) and
pruned FLOPs ratio. L1-BN [24] can not be appied on the variant AlexNet3 which has no batch normalization layers.
Obviously, OICSR-GL generally has less accuracy drop compared with baselines under the same pruned FLOPs.

forces channel-level sparsity on the pruned model. There-
fore, the next iteration of channel pruning is smoothly con-
ducted after ﬁne-tuning.

4. Experiments

In this section, we evaluate the effectiveness of OICSR
on CIFAR-10 [20], CIFAR-100 [20], ImageNet-1K [6]
datasets using popular CNNs architectures: CifarNet [20],
AlexNet [21], ResNet [10], DenseNet [16] and SeNet [15].
OICSR is mainly compared with non-structured regulariza-
tion and separated structured regularization to demonstrate
its superiority. Moreover, we also compare OICSR with
other state-of-the-art channel pruning methods [3, 11, 13,
17, 18, 23, 26, 27, 36]. All the experiments are implemented
using PyTorch [28] on four NVIDIA P100 GPUs.

4.1. Experimental Setting

For CIFAR-10/100 datasets, OICSR is evaluated with
CifarNet1, ResNet-182, ResNet-562, DenseNet-892 and
PreActSeNet-182. OICSR is also accessed with AlexNet3
and ResNet-503 on ImageNet-1K dataset. All the initial-
ized networks are trained from scratch using SGD optimizer
with a weight decay 10−4 and Nesterov momentum [32]
of 0.9. On CIFAR-10/100 datasets, we train networks us-
ing mini-batch size 100 for 160 epochs. On ImageNet-1K

1 https://github.com/tensorﬂow/models/blob/master/research/slim/nets
2 https://github.com/kuangliu/pytorch-cifar/tree/master/models
3 https://github.com/pytorch/vision/tree/master/torchvision/models

Figure 4: The distribution of energy of out-in-channels
(layer4.2.conv1 and layer4.2.conv2 in ResNet-56 on
CIFAR-100 dataset) after training with L2, GL and OICSR-
GL respectively.

dataset, we train AlexNet and ResNet-50 with mini-batch
size 256 for 90 and 120 epochs, respectively. All the accu-
racies on ImageNet-1K dataset are tested on the validation
dataset using the single view center crop.

The hyper-parameter λs balances the normal training
loss and the structured sparsity. We empirically recommend
choosing relatively large λs for simple task but small λs
for complex task. The hyper-parameter λs is set to 10−4
for networks (except for DenseNet-89 with 5 × 10−5) on
CIFAR-10/100 dataset and 10−5 for ImageNet-1K dataset.

Considering that fully-connected layers are much impor-
tant in CifarNet and AlexNet and the majority of FLOPs is
contributed by convolutional layers, only convolutional lay-
ers in these networks are regularized and pruned.

57050

0.00.10.20.30.40.50.60.7Pruned FLOPs Ratio0.10.20.30.40.50.60.70.80.9Top-1 Accuracy without Fine-tuningOICSR-GLGLL1-BNL2Full-Network0.00.10.20.30.40.50.60.70.8Pruned FLOPs Ratio0.20.40.60.8Top-1 Accuracy without Fine-tuningOICSR-GLGLL1-BNL2Full-Network0.00.10.20.30.40.50.60.70.8Pruned FLOPs Ratio0.20.40.60.8Top-1 Accuracy without Fine-tuningOICSR-GLGLL1-BNL2Full-Network0.000.050.100.150.200.250.300.350.40Pruned FLOPs Ratio0.00.10.20.30.40.50.6Top-1 Accuracy without Fine-tuningOICSR-GLGLL2Full-Network0.00.10.20.30.40.50.60.7Pruned FLOPs Ratio0.10.20.30.40.50.6Top-1 Accuracy without Fine-tuningOICSR-GLGLL1-BNL2Full-Network0.00.10.20.30.40.50.60.70.80.9Pruned FLOPs Ratio0.00.10.20.30.40.50.60.7Top-1 Accuracy without Fine-tuningOICSR-GLGLL1-BNL2Full-Network0.00.10.20.30.40.50.60.70.80.9Pruned FLOPs Ratio0.00.10.20.30.40.50.60.7Top-1 Accuracy without Fine-tuningOICSR-GLGLL1-BNL2Full-Network0.000.050.100.150.200.250.300.350.40Pruned FLOPs Ratio0.00.10.20.30.40.50.60.70.8Top-1 Accuracy without Fine-tuningOICSR-GLGLL1-BNL2Full-Network02004000.00.51.01.52.0OICSR-GL0200400Index of channels0.00.51.01.5GL0200400Index of channels0123Sorted Channel EnergyL2(a) CifarNet on CIFAR-10 (84%
FLOPs pruned)

(b) CifarNet on CIFAR-100 (74%
FLOPs pruned)

(c) ResNet-18 on CIFAR-10 (94%
FLOPs pruned)

(d) ResNet-56 on CIFAR-100 (97%
FLOPs pruned)

Figure 5: Accuracy loss of pruning/ﬁne-tuning with OICSR and relevant baselines using CifarNet and ResNet on CIFAR-10
and CIFAR-100 datasets. Pruning/ﬁne-tuning with OICSR-GL converges fastest with the lowest accuracy loss.

(a) CifarNet on CIFAR-10

(b) CifarNet on CIFAR-100

Figure 6: Comparison between OICSR-GL and relevant baselines of the trade-off between pruned FLOPs ratio and top-
1 accuracy with various ﬁne-tuning epochs. As expected, all the methods achieve higher accuracy with more ﬁne-tuning
epochs. With the same ﬁne-tuning epochs, OICSR-GL consistently outperforms all the baselines under different pruned
FLOPs ratio.

4.2. Comparison with Non structured Regulariza 
tion and Seperated structured Regularization

In this section, OICSR is compared with non-structured
regularization and separated structured regularization from
multiple aspects. The most classic structured regulariza-
tion, Group Lasso [37], is chosen as the speciﬁc regular-
ization term to demonstrate the effectiveness of OICSR.
OICSR with Group Lasso (OICSR-GL) is used in all ex-
periments. OICSR-GL is compared with three baselines:
(1) L2. The network is only trained with non-structured
regularization L2 regularization. The structure regulariza-
tion is not used.(2) GL (Separated Group Lasso). Group
Lasso is separately applied on layers of the network as de-
scribed in Eq. 1. (3) L1-BN. L1-BN [24] is another form of
separated structured regularization which applies L1-norm
on the scaling factors of batch normalization layers. After

training with L1-BN, we obtain a network in which the vec-
tor of scaling factors is sparse. Scaling factors with small
magnitudes and their corresponding channels are pruned.

For all the above methods, the global greedy pruning al-
gorithm (Algorithm 1) is uniformly adopted to prune the
redundant channels. All the experimental settings are the
same except for the regularization and the corresponding
criterion of channel importance.

4.2.1 Accuracy without Fine-tuning

We ﬁrst validate whether OICSR-GL retains more impor-
tant features and accuracy after channel pruning. The sub-
stantial remaining feature/accuracy works as a great ini-
tializer that leads to higher accuracy after ﬁne-tuning [3].
OICSR-GL is compared with relevant baselines by mea-
suring top-1 accuracy (without ﬁne-tuning) over pruned

67051

0246810Training iterations(k)0.81.01.21.4Accuracy LossOICSR-GLGLL1-BNL20246810Training iterations(k)1.82.02.22.42.62.83.03.2Accuracy LossOICSR-GLGLL1-BNL20246810Training iterations(k)0.20.40.60.81.0Accuracy LossOICSR-GLGLL1-BNL20246810Training iterations(k)0.51.01.52.0Accuracy LossOICSR-GLGLL1-BNL20.00.20.40.60.81.0Pruned FLOPs Ratio0.6750.7000.7250.7500.7750.8000.8250.8500.875Top-1 Accuracy after Fine-tuningOICSR-GLGLL1-BNL2160 epochs80 epochs20 epochsFull-NetworkFull-Network0.00.20.40.60.81.0Pruned FLOPs Ratio0.200.250.300.350.400.450.500.550.60Top-1 Accuracy after Fine-tuningOICSR-GLGLL1-BNL2160 epochs80 epochs20 epochsFull-NetworkFull-NetworkFLOPs. For fair comparison, results of all the methods are
reported after channel pruning of the ﬁrst iteration.

Fig. 3 shows the top-1 accuracy without ﬁne-tuning of
different classiﬁcation tasks over pruned FLOPs, obtained
by differentiating the structured regularization. As ex-
pected, training and pruning with structured regularization
GL, L1-BN and OICSR-GL reserve more prediction ac-
curacy compared with non-structured regularization L2 in
most of cases. Separated Group Lasso is an efﬁcient struc-
tured regularization which in general performs better than
L1-BN and non-structured regularization L2. Speciﬁcally,
L2, GL and OICSR-GL achieve similar performance (L1-
BN performs worst) with CifarNet on CIFAR-10 dataset
(Fig. 3(a)) due to simplicity of both CIFAR-10 dataset and
CifarNet architecture. Finally, OICSR-GL achieves the best
trade-off between pruned FLOPs and prediction accuracy
without ﬁne-tuning owing to the fact that OICSR enforces
channel-level sparsity on out-in-channels and prunes redun-
dant out-in-channels based on statistical information com-
puted from two consecutive layers.

For channel pruning,

feature/energy in one out-in-
channel is pruned/saved together. The distribution of en-
ergy of out-in-channels (Eq. 8) after training with differ-
ent regularization are visualized (Fig. 4) to show the ef-
fect of OICSR. After training with OICSR-GL, energy dis-
tributes in less out-in-channels and more redundant chan-
nels are automatically selected. Here, OICSR-GL regu-
larizes out-in-channels and transfers important features in
much less out-in-channels compared with separated GL and
non-structured regularization L2. Therefore, important fea-
tures and accuracy can be maximally preserved by OICSR-
GL after pruning the redundant out-in-channels.

4.2.2 Convergence Speed

To further study advantages of OICSR-GL over baselines,
we next analyze learning curves of different methods shown
in Fig. 5.
Interestingly, we ﬁnd that L1-BN outperforms
separated Group Lasso and L2 with CifarNet but performs
worst with multi-branches architecture ResNet on CIFAR-
10/100 datasets. For CifarNet on CIFAR-100 and ResNet-
18 on CIFAR-10, separated Group Lasso converges faster
and has lower accuracy loss compared with non-structured
regularization L2.

OICSR-GL outperforms all the relevant baselines, which
is reﬂected in three aspects. Firstly, OICSR-GL has less ac-
curacy loss compared with baselines at ﬁne-tuning iteration
0. This implies that OICSR-GL keeps higher accuracy af-
ter channel pruning, which agrees with the conclusion in
section 4.2.1. Secondly, OICSR-GL converges faster and
achieves the same accuracy loss using much fewer ﬁne-
tuning iterations. Thirdly, OICSR-GL has lowest accuracy
loss after ﬁne-tuning.

Acc Regu

FLOPs
39.2%↓
86.5%↓
94.5%↓

L2

L1-BN

GL

OICSR-GL

95.04% 94.95% 94.96%
94.10% 93.77% 94.10%
92.15% 91.02% 92.15%

95.10%
94.27%
92.44%

(a) ResNet-18 on CIFAR-10 (Original Acc is 94.46%)

L2

L1-BN

GL

OICSR-GL

34.5%↓
81.7%↓
86.0%↓

94.09% 94.09% 94.08%
92.69% 92.37% 92.69%
90.87% 91.21% 90.37%

94.21%
92.95%
91.50%

(b) DenseNet-89 on CIFAR-10 (Original Acc is 93.25%)

L2

L1-BN

GL

OICSR-GL

38.5%↓
86.2%↓
97.2%↓

76.13% 75.28% 76.04%
74.60% 75.13% 75.30%
71.98% 72.36% 72.29%

76.23%
75.75%
73.10%

(c) ResNet-56 on CIFAR-100 (Original Acc is 75.87%)

L2

L1-BN

GL

OICSR-GL

48.0%↓
83.0%↓
95.1%↓

75.65% 75.76% 75.80%
73.26% 72.66% 72.79%
67.43% 65.52% 67.69%

76.38%
73.91%
68.30%

(d) PreActSeNet-18 on CIFAR-100 (Original Acc is 75.29%)

23.4%↓
54.0%↓
68.3%↓

L2

L1-BN

GL

OICSR-GL

57.62% —— 57.35%
55.14% —— 55.02%
52.55% —— 49.65%

57.87%
56.83%
53.78%

(e) AlexNet on ImageNet-1K (Original Acc is 56.98%)

L2

L1-BN

GL

OICSR-GL

37.3%↓
44.4%↓
50.0%↓

76.39% 76.04% 76.23%
76.03% 75.98% 76.02%
75.80% 75.53% 75.76%

76.53%
76.30%
75.95%

(f) ResNet-50 on ImageNet-1K (Original Acc is 76.31%)

Table 1: Summary of the trade-off between top-1 accu-
ray after ﬁne-tuning and pruned FLOPs ratio with various
CNNs on three benchmark datasets. [xx.x%↓] denotes the
percentage of pruned FLOPs.

4.2.3 Accuracy after Fine-tuning

OICSR-GL is also evaluated over relevant baselines in
terms of prediction accuracy after ﬁne-tuning. The results
with various ﬁne-tuning epochs for CifarNet on CIFAR-
10/100 datasets are reported in Fig 6. As expected, un-
der the same pruned FLOPs ratio, all the methods achieve
higher accuracy with more ﬁne-tuning epochs. The loss
feature/accuracy induced by channel pruning can be well
retrieved by ﬁne-tuning. The fewer ﬁne-tuning epochs,
the more obvious the advantage of OICSR-GL is. With

77052

Params↓ Top-1 Acc↓

Methods
Huang et al. [17]
OICSR-GL
Huang et al. [17]
OICSR-GL

—

FLOPs↓
35.30%
39.20% 59.09%
76.00%
86.50% 90.89%

—

1.00%
-0.64%
2.90%
0.19%

(a) ResNet-18 on CIFAR-10

Methods
FMP [27] ([23] impl.)
GDP [23]
NISP [36]
OICSR-GL

FLOPs↓ Params↓ Top-1 Acc↓
37.62% —
52.30% —
53.70% 2.91%
54.00% 3.06%

1.87%
0.77%
0.54%
0.15%

(b) AlexNet on ImageNet-1K

Methods
LcP [3]
NISP [36]
SSS [18]
ThiNet [26]
OICSR-GL
He et al. [11]
GDP [23]
LcP [3]
NISP [36]
OICSR-GL
He et al. [13]
LcP [3]
OICSR-GL

—

-0.19%

-0.09%
0.21%
1.94%
0.84%
-0.22%
1.54%
2.52%
0.85%
0.89%
0.01%

FLOPs↓ Top-1 Acc↓ Top-5 Acc↓
25.00%
27.31%
31.08%
36.79%
37.30%
41.80%
42.00%
42.00%
44.41%
44.43%
50.00%
50.00%
50.00%

0.95%
0.47%
-0.16%
0.81%
1.25%
0.26%

0.08%
1.40%
0.42%
0.34%

0.96%
0.37%

—

—

(c) ResNet-50 on ImageNet-1K

Table 2: Comparison with existing methods. FLOPs↓ and
Params↓ denote the reduction of FLOPs and parameters.
Top-k Acc↓ denotes the decline of top-k accuracy and a neg-
ative value indicates an improvement of model accuracy.

the same ﬁne-tuning epochs, OICSR-GL consistently per-
forms better than all the baselines under different pruned
FLOPs ratios. Moreover, OICSR-GL ﬁne-tuned with 20
epochs achieves higher accuracy compared with baselines
ﬁne-tuned with 80 epochs in certain sparsity ranges.

Results of the other network architectures are reported
in Table 1. To maintain channel-level sparsity during prun-
ing, the networks on CIFAR-10/100 dataset and ImageNet-
1K are ﬁne-tuned with 160 epochs and 60 epochs respec-
tively for each channel pruning iteration. Shown in Ta-
ble 1, the superiority of OICSR-GL gradually emerges with
the increase of pruned FLOPs ratio. Pruning channels and
ﬁne-tuning with OICSR-GL lead to higher generalization
accuracy. For ResNet-18 on CIFAR-10 dataset, OICSR-
GL obtains 0.64% accuracy improvement using 39.2% less
FLOPs and achieves 7.4× FLOPs reduction with only
0.19% top-1 accuracy drop. OICSR-GL improves 1.09%
accuracy while using 48.0% less FLOPs for PreActSeNet-

18 on CIFAR-100 dataset. OICSR speeds up ResNet-56
by 7.2× with only 0.12% top-1 accuracy loss on CIFAR-
100 dataset. For AlexNet and ResNet-50 on ImageNet
dataset, OICSR gains 0.89% and 0.32% accuracy improve-
ment while using 23.4% and 37.3% less FLOPs; OICSR-
GL also achieves 2.2× and 2.0× speedup with only 0.19%
and 0.36% top-1 accuracy decline respectively. More-
over, as shown in Table 1(b) and Table 1(d), OICSR-GL
outperforms relevant baselines on both popular networks
DenseNet-89 and PreActSeNet-18.

4.3. Comparison with Other Methods

We compare our method with other state-of-the-art
channel pruning techniques (not regularization-based) us-
ing AlexNet and ResNet on CIFAR-10 and ImageNet-
1K datasets. As shown in Table 2, for ResNet-18 on
CIFAR-10, OICSR-GL signiﬁcantly reduces more param-
eters (90.89%) and FLOPs(86.50% vs. 35.30% [17]), while
achieving less accuracy decline (0.19% vs. 1.00% [17]).

Our method also shows superior performance on
ImageNet-1K dataset. For AlexNet, with less accuracy loss,
OICSR-GL prunes more FLOPs(54.00%) compared with
FMP [27] (37.62%); OICSR reduces similar FLOPs but
achieves much less accuracy loss (0.15%) compared with
GDP [23] (0.77%) and NISP [36] (0.54%). We are the ﬁrst
to exploit regularization-based channel pruning methods for
very deep residual network ResNet-50 on ImageNet-1K
dataset. Under various pruned FLOPs ratios, our method
consistently achieves state-of-the-art result compared with
prior arts [3, 11, 13, 18, 23, 26, 27, 36], which strongly
aligns with our pervious analysis and observation.

5. Conclusion

Current deep neural networks are effective with high in-
ference costs. In this paper, we propose a novel structured
regularization form, namely OICSR, which takes account
correlations between successive layers to learn more com-
pact CNNs. OICSR regularizes out-in-channels and mea-
sures channel importance based on statistical information of
two consecutive layers. To minimize accuracy loss caused
by incorrect channel pruning, we investigate a global greedy
pruning algorithm to select and remove redundant out-in-
channel in an iterative way. As a result, important fea-
tures and accuracy are greatly preserved by OICSR after
channel pruning. Experiments demonstrated the superiority
of OICSR against non-structured regularization and sepa-
rated structured regularization. Furthermore, our method
achieves better results compared with existing state-of-the-
art channel pruning techniques.
Acknowledgements. This work was supported in part by the National

Natural Science Foundation of China under Grant 61671079, Grant

61771068, and Grant 61471063, and in part by the Beijing Municipal Nat-

ural Science Foundation under Grant 4182041.

87053

References

[1] Anubhav Ashok, Nicholas Rhinehart, Fares Beainy, and
N2n learning: Network to network
learning.

Kris M Kitani.
compression via policy gradient reinforcement
arXiv:1709.06030, 2017.

[2] Liangchieh Chen, George Papandreou, Iasonas Kokkinos,
Kevin P Murphy, and Alan L Yuille. Semantic image seg-
mentation with deep convolutional nets and fully connected
crfs. International Conference on Learning Representations,
2015.

[3] Ting-Wu Chin, Cha Zhang, and Diana Marculescu. Layer-
compensated pruning for resource-constrained convolutional
neural networks. arXiv:1810.00518, 2018.

[4] Matthieu Courbariaux, Itay Hubara, Daniel Soudry, Ran
El-Yaniv, and Yoshua Bengio. Binarized neural networks:
Training deep neural networks with weights and activations
constrained to+ 1 or-1. arXiv:1602.02830, 2016.

[5] Jifeng Dai, Yi Li, Kaiming He, and Jian Sun. R-fcn: Object
detection via region-based fully convolutional networks. In
Advances in Neural Information Processing Systems, 2016.
[6] Jia Deng, Wei Dong, Richard Socher, Li-Jia Li, Kai Li,
and Li Fei-Fei.
Imagenet: A large-scale hierarchical im-
age database. In Computer Vision and Pattern Recognition,
2009.

[7] Emily L Denton, Wojciech Zaremba, Joan Bruna, Yann Le-
Cun, and Rob Fergus. Exploiting linear structure within con-
volutional networks for efﬁcient evaluation. In Advances in
Neural Information Processing Systems, 2014.

[8] Mario Figueiredo and Robert Nowak. Ordered weighted l1
regularized regression with strongly correlated covariates:
theoretical aspects. In Artiﬁcial Intelligence and Statistics,
2016.

[9] Song Han, Huizi Mao, and William J Dally. Deep com-
pression: Compressing deep neural networks with pruning,
trained quantization and huffman coding. International Con-
ference on Learning Representations, 2016.

[10] Kaiming He, Xiangyu Zhang, Shaoqing Ren, and Jian Sun.
Deep residual learning for image recognition. Computer Vi-
sion and Pattern Recognition, 2016.

[11] Yang He, Guoliang Kang, Xuanyi Dong, Yanwei Fu, and Yi
Yang. Soft ﬁlter pruning for accelerating deep convolutional
neural networks. In International Joint Conferences on Arti-
ﬁcial Intelligence, 2018.

[12] Yihui He, Ji Lin, Zhijian Liu, Hanrui Wang, Li-Jia Li, and
Song Han. Amc: Automl for model compression and ac-
celeration on mobile devices.
In European Conference on
Computer Vision, 2018.

[13] Yihui He, Xiangyu Zhang, and Jian Sun. Channel pruning
for accelerating very deep neural networks. In International
Conference on Computer Vision, 2017.

[14] Geoffrey Hinton, Oriol Vinyals, and Jeff Dean. Distilling the

knowledge in a neural network. arXiv:1503.02531, 2015.

[15] Jie Hu, Li Shen, and Gang Sun. Squeeze-and-excitation net-

works. arXiv:1709.01507, 2017.

[16] Gao Huang, Zhuang Liu, Laurens Van Der Maaten, and Kil-
ian Q Weinberger. Densely connected convolutional net-
works. In Computer Vision and Pattern Recognition, 2017.

[17] Qiangui Huang, Kevin Zhou, Suya You, and Ulrich Neu-
mann. Learning to prune ﬁlters in convolutional neural net-
works. Workshop on Applications of Computer Vision, 2018.
[18] Zehao Huang and Naiyan Wang. Data-driven sparse struc-
ture selection for deep neural networks. In European Con-
ference on Computer Vision, 2018.

[19] Benoit Jacob, Skirmantas Kligys, Bo Chen, Menglong Zhu,
Matthew Tang, Andrew Howard, Hartwig Adam, and Dmitry
Kalenichenko. Quantization and training of neural networks
for efﬁcient integer-arithmetic-only inference. In Computer
Vision and Pattern Recognition, 2018.

[20] Alex Krizhevsky and Geoffrey Hinton. Learning multiple
layers of features from tiny images. Technical report, 2009.
[21] Alex Krizhevsky, Ilya Sutskever, and Geoffrey E Hinton.
Imagenet classiﬁcation with deep convolutional neural net-
works. In Advances in Neural Information Processing Sys-
tems, 2012.

[22] Vadim Lebedev and Victor Lempitsky. Fast convnets using
group-wise brain damage. In Computer Vision and Pattern
Recognition, 2016.

[23] Shaohui Lin, Rongrong Ji, Yuchao Li, Yongjian Wu, Feiyue
Huang, and Baochang Zhang. Accelerating convolutional
networks via global & dynamic ﬁlter pruning.
In Interna-
tional Joint Conferences on Artiﬁcial Intelligence, 2018.

[24] Zhuang Liu, Jianguo Li, Zhiqiang Shen, Gao Huang,
Shoumeng Yan, and Changshui Zhang. Learning efﬁcient
convolutional networks through network slimming. In Inter-
national Conference on Computer Vision, 2017.

[25] Jonathan Long, Evan Shelhamer, and Trevor Darrell. Fully
convolutional networks for semantic segmentation. In Com-
puter Vision and Pattern Recognition, 2015.

[26] Jianhao Luo, Jianxin Wu, and Weiyao Lin. Thinet: A ﬁlter
level pruning method for deep neural network compression.
International Conference on Computer Vision, 2017.

[27] Pavlo Molchanov, Stephen Tyree, Tero Karras, Timo Aila,
and Jan Kautz. Pruning convolutional neural networks for
resource efﬁcient inference.
International Conference on
Learning Representations, 2017.

[28] Adam Paszke, Sam Gross, Soumith Chintala, Gregory
Chanan, Edward Yang, Zachary DeVito, Zeming Lin, Al-
ban Desmaison, Luca Antiga, and Adam Lerer. Automatic
differentiation in pytorch. 2017.

[29] Bo Peng, Wenming Tan, Zheyang Li, Shun Zhang, Di Xie,
and Shiliang Pu. Extreme network compression via ﬁlter
group approximation. In European Conference on Computer
Vision, 2018.

[30] Mohammad Rastegari, Vicente Ordonez, Joseph Redmon,
and Ali Farhadi. Xnor-net: Imagenet classiﬁcation using bi-
nary convolutional neural networks. In European Conference
on Computer Vision, 2016.

[31] Shaoqing Ren, Kaiming He, Ross Girshick, and Jian Sun.
Faster r-cnn: Towards real-time object detection with region
proposal networks. In Advances in Neural Information Pro-
cessing Systems, 2015.

[32] Ilya Sutskever, James Martens, George Dahl, and Geoffrey
Hinton. On the importance of initialization and ,momentum
in deep learning.
In International Conference on Machine
Learning, 2013.

97054

[33] Christian Szegedy, Wei Liu, Yangqing Jia, Pierre Sermanet,
Scott Reed, Dragomir Anguelov, Dumitru Erhan, Vincent
Vanhoucke, and Andrew Rabinovich. Going deeper with
convolutions. In Computer Vision and Pattern Recognition,
2015.

[34] Wei Wen, Chunpeng Wu, Yandan Wang, Yiran Chen, and
Hai Li. Learning structured sparsity in deep neural net-
works. In Advances in Neural Information Processing Sys-
tems, 2016.

[35] Jaehong Yoon and Sung Ju Hwang. Combined group and
exclusive sparsity for deep neural networks. In International
Conference on Machine Learning, 2017.

[36] Ruichi Yu, Ang Li, Chun-Fu Chen, Jui-Hsin Lai, Vlad I.
Morariu, Xintong Han, Mingfei Gao, Ching-Yung Lin, and
Larry S. Davis. Nisp: Pruning networks using neuron im-
portance score propagation. In Computer Vision and Pattern
Recognition, 2018.

[37] Ming Yuan and Yi Lin. Model selection and estimation in
regression with grouped variables. Journal of the Royal Sta-
tistical Society: Series B (Statistical Methodology), 2006.

[38] Dejiao Zhang, Haozhu Wang, Mario Figueiredo, and Laura
Balzano. Learning to share: Simultaneous parameter typing
and sparsiﬁcation in deep learning. International Conference
on Learning Representations, 2018.

[39] Hao Zhou, Jose M Alvarez, and Fatih Porikli. Less is more:
In European Conference on Com-

Towards compact cnns.
puter Vision. Springer, 2016.

107055

