Unsupervised Deep Tracking

Ning Wang1 Yibing Song2∗ Chao Ma3 Wengang Zhou1 Wei Liu2∗ Houqiang Li1

1 CAS Key Laboratory of GIPAS, University of Science and Technology of China

2 Tencent AI Lab

3 MoE Key Lab of Artiﬁcial Intelligence, AI Institute, Shanghai Jiao Tong University

wn6149@mail.ustc.edu.cn, dynamicstevenson@gmail.com, chaoma@sjtu.edu.cn

zhwg@ustc.edu.cn, wl2223@columbia.edu, lihq@ustc.edu.cn

Abstract

We propose an unsupervised visual tracking method in
this paper. Different from existing approaches using ex-
tensive annotated data for supervised learning, our CNN
model is trained on large-scale unlabeled videos in an un-
supervised manner. Our motivation is that a robust tracker
should be effective in both the forward and backward pre-
dictions (i.e., the tracker can forward localize the target ob-
ject in successive frames and backtrace to its initial position
in the ﬁrst frame). We build our framework on a Siamese
correlation ﬁlter network, which is trained using unlabeled
raw videos. Meanwhile, we propose a multiple-frame val-
idation method and a cost-sensitive loss to facilitate unsu-
pervised learning. Without bells and whistles, the proposed
unsupervised tracker achieves the baseline accuracy of fully
supervised trackers, which require complete and accurate
labels during training. Furthermore, unsupervised frame-
work exhibits a potential in leveraging unlabeled or weakly
labeled data to further improve the tracking accuracy.

1. Introduction

Visual tracking is a fundamental task in computer vision,
which aims to localize the target object in the video given
a bounding box annotation in the ﬁrst frame. The state-
of-the-art deep tracking methods [1, 46, 15, 55, 27, 60, 58,
54, 4, 19, 33, 34] typically use pretrained CNN models for
feature extraction. These models are trained in a supervised
manner, requiring a large quantity of annotated ground-truth
labels. Manual annotations are always expensive and time-
consuming, whereas extensive unlabeled videos are readily
available on the Internet. It deserves to investigate how to
exploit unlabeled video sequences for visual tracking.

∗Y. Song and W. Liu are the corresponding authors. This work is done
when N. Wang is an intern in Tencent AI Lab. The source code and results
are available at https://github.com/594422814/UDT.

Supervised Training:
Forward tracking       
Annotated sequences      

Unsupervised Training:
Forward and Backward tracking      
Unlabeled sequences      

Figure 1. The comparison between supervised and unsupervised
learning. Visual tracking methods via supervised learning require
ground-truth labels for every frame of the training videos. By uti-
lizing the forward tracking and backward veriﬁcation, we train the
unsupervised tracker without heavyweight annotations.

In this paper, we propose to learn a visual tracking model
from scratch via unsupervised learning. Our intuition re-
sides on the observation that visual tracking can be per-
formed in both the forward and backward manners.
Ini-
tially, given the target object annotated on the ﬁrst frame, we
can track the target object forward in the subsequent frames.
When tracking backward, we use the predicted location in
the last frame as the initial target annotation and track it
backward towards the ﬁrst frame. The estimated target lo-
cation in the ﬁrst frame via backward tracking is expected to
be identical with the initial annotation. After measuring the
difference between the forward and backward target trajec-
tories, our network is trained in an unsupervised manner1 by
considering the trajectory consistency as shown in Fig. 1.
Through exploiting consecutive frames in unlabeled videos,
our model learns to locate targets by repeatedly performing
forward tracking and backward veriﬁcation.

The proposed unsupervised learning scheme aims to
acquire a generic feature representation, while not being

1In this paper, we do not distinguish between the term unsupervised and
self-supervised, as both refer to learning without ground-truth annotations.

1308

strictly required to track a complete object. For a video se-
quence, we randomly initialize a bounding box in the ﬁrst
frame, which may not cover an entire object. Then, the
proposed model learns to track the bounding box region in
the following sequences. This tracking strategy shares sim-
ilarity with the part-based [30] or edge-based [28] tracking
methods that focus on tracking the subregions of the target
objects. As the visual object tracker is not expected to only
concentrate on the complete objects, we use the randomly
cropped bounding boxes for tracking initialization during
training.

We integrate the proposed unsupervised learning into the
Siamese based correlation ﬁlter framework [54]. The pro-
posed network consists of two steps in the training process:
forward tracking and backward veriﬁcation. We notice that
the backward veriﬁcation is not always effective since the
tracker may successfully return to the initial target location
from a deﬂected or false position. In addition, challenges
such as heavy occlusion in unlabeled videos will further de-
grade the network representation capability. To tackle these
issues, we propose multiple frames validation and a cost-
sensitive loss to beneﬁt the unsupervised training. The mul-
tiple frames validation increases the discrepancy between
the forward and backward trajectories to reduce veriﬁcation
failures. Meanwhile, the cost-sensitive loss mitigates the
interference from noisy samples during training.

The proposed unsupervised tracker is shown effective on
the benchmark datasets. Extensive experimental results in-
dicate that without bells and whistles, the proposed unsu-
pervised tracker achieves comparable performance with the
baseline fully supervised trackers [1, 49, 54]. When inte-
grated with additional improvements such as the adaptive
online model update [9, 7], the proposed tracker exhibits
state-of-the-art performance.
It is worth mentioning that
the unsupervised framework shows potential in exploiting
unlabeled Internet videos to learn good feature representa-
tions for tracking scenarios. Given limited or noisy labels,
the unsupervised method exhibits comparable results with
the corresponding supervised framework. In addition, we
further improve the tracking accuracy by using more unla-
beled data. Sec. 4.2 shows a complete analysis of different
training conﬁgurations.

In summary, the contributions of our work are three-fold:
• We propose an unsupervised tracking method based
on the Siamese correlation ﬁlter backbone, which is
learned via forward and backward tracking.

• We propose a multiple-frame validation method and a
cost-sensitive loss to improve the unsupervised learn-
ing performance.

• The extensive experiments on the standard bench-
marks show the favorable performance of the proposed
method and reveal the potential of unsupervised learn-
ing in visual tracking.

2. Related Work

In this section, we perform a literature review on the
deep tracking methods, forward-backward trajectory anal-
ysis, and unsupervised representation learning.
Deep Visual Tracking. Existing deep tracking meth-
ods either ofﬂine learn a speciﬁc CNN model for online
tracking or simply utilize off-the-shelf deep models (e.g.,
VGG [43, 3]) for feature extraction. The Siamese trackers
[1, 46, 49, 54, 55, 15, 27, 60, 58] formulate the tracking
task as a similarity matching process. They typically ofﬂine
learn a tracking network and do not ﬁne-tune the model on-
line. On the other hand, some trackers adopt off-the-shelf
CNN models as the feature extraction backbone. They in-
crementally train binary classiﬁcation layers [37, 45, 39] or
regression layers [44, 31] based on the initial frame. These
methods typically achieve high accuracy while consuming
a huge computational cost. The Discriminative Correlation
Filter (DCF) based trackers [2, 16, 8, 30, 5, 52, 18] tackle
the tracking task by solving a ridge regression problem us-
ing densely sampled candidates, which also beneﬁt from the
powerful off-the-shelf deep features (e.g., [35, 40, 53, 7]).
The main distinction is that deep DCF trackers merely uti-
lize off-the-shelf models for feature extraction and do not
online train additional layers or ﬁne-tune the CNN models.
Different from the above deep trackers using off-the-shelf
models or supervised learning, the proposed method trains
a network from scratch using unlabeled data in the wild.
Forward-Backward Analysis. The forward-backward tra-
jectory analysis has been widely explored in the liter-
ature. The tracking-learning-detection (TLD) [20] uses
the Kanade-Lucas-Tomasi (KLT) tracker [47] to perform
forward-backward matching to detect tracking failures. Lee
et al. [25] proposed to select the reliable base tracker by
comparing the geometric similarity, cyclic weight, and ap-
pearance consistency between a pair of forward-backward
trajectories. However, these methods rely on empirical met-
rics to identify the target trajectories. In addition, repeat-
edly performing forward and backward tracking brings in a
heavy computational cost for online tracking. Differently,
in TrackingNet [36], forward-backward tracking is used for
data annotation and tracker evaluation.
In this work, we
revisit this scheme to train a deep visual tracker in an unsu-
pervised manner.
Unsupervised Representation Learning. Our framework
relates to the unsupervised representation learning. In [26],
the feature representation is learned by sorting sequences.
The multi-layer auto-encoder on large-scale unlabeled data
has been explored in [24]. Vondrick et al. [50] proposed
to anticipate the visual representation of frames in the fu-
ture. Wang and Gupta [56] used the KCF tracker [16] to pre-
process the raw videos, and then selected a pair of tracked
images together with another random patch for learning
CNNs using a ranking loss. Our method differs from [56] in

1309

Template Patch Search Patch

#2

#1

Forward Tracking

using 

Initial Label

Search Patch Template Patch
#1

#2

d
r
a
w
r
o
F

Backward Tracking

using 

Pseudo Label

#1

#2

Consistency Loss 

Computation

Initial Label

Feature

Correlation 

Filter

Response

Consistency 

Loss

Pseudo Label

Correlation 

Filter

Response

#1

#2

#2

#1

l

e
t
a
p
m
e
T

h
c
r
a
e
S

l

e
t
a
p
m
e
T

h
c
r
a
e
S

CNN

CNN

CNN

CNN

i

g
n
k
c
a
r
T

 
 

i

g
n
k
c
a
r
T

 
 

d
r
a
w
k
c
a
B

(a)  Unsupervised Learning Motivation

(b)  Unsupervised Learning Pipeline using a Siamese Network

Figure 2. An overview of unsupervised deep tracking. We show our motivation in (a) that we track forward and backward to compute the
consistency loss for network training. The detailed training procedure is shown in (b), where unsupervised learning is integrated into a
Siamese correlation ﬁlter network. Note that during online tracking, we only track forward to predict the target location.

two aspects. First, we integrate the tracking algorithm into
unsupervised training instead of merely utilizing an off-the-
shelf tracker as the data pre-processing tool. Second, our
unsupervised framework is coupled with a tracking objec-
tive function, so the learned feature representation is effec-
tive in presenting the generic target objects. In the visual
tracking community, unsupervised learning has rarely been
touched. To the best of our knowledge, the only related
but different approach is the auto-encoder based method
[51]. However, the encoder-decoder is a general unsuper-
vised framework [38], whereas our unsupervised method is
specially designed for tracking tasks.

3. Proposed Method

Fig. 2(a) shows an example from the Butterﬂy sequence
to illustrate forward and backward tracking. In practice, we
randomly draw bounding boxes in unlabeled videos to per-
form forward and backward tracking. Given a randomly ini-
tialized bounding box label, we ﬁrst track forward to predict
its location in the subsequent frames. Then, we reverse the
sequence and take the predicted bounding box in the last
frame as the pseudo label to track backward. The predicted
bounding box via backward tracking is expected to be iden-
tical with the original bounding box in the ﬁrst frame. We
measure the difference between the forward and backward
trajectories using the consistency loss for network training.
An overview of the proposed unsupervised Siamese corre-
lation ﬁlter network is shown in Fig. 2(b). In the following,
we ﬁrst revisit the correlation ﬁlter based tracking frame-
work and then illustrate the details of our unsupervised deep
tracking approach.

3.1. Revisiting Correlation Tracking

The Discriminative Correlation Filters (DCFs) [2, 16]
regress the input features of a search patch to a Gaussian
response map for target localization. When training a DCF,
we select a template patch X with the ground-truth label Y.
The ﬁlter W can be learned by solving the ridge regression
problem as follows:

min

W

kW ∗ X − Yk2

2 + λkWk2
2,

(1)

where λ is a regularization parameter and ∗ denotes the cir-
cular convolution. Eq. 1 can be efﬁciently calculated in the
Fourier domain [2, 8, 16] and the DCF can be computed by

W = F −1(cid:18) F (X) ⊙ F ⋆(Y)

F ⋆(X) ⊙ F (X) + λ(cid:19) ,

(2)

where ⊙ is the element-wise product, F (·) is the Discrete
Fourier Transform (DFT), F −1(·) is the inverse DFT, and
⋆ denotes the complex-conjugate operation. In each sub-
sequent frame, given a search patch Z, the corresponding
response map R can be computed in the Fourier domain:

R = W ∗ Z = F −1 (F ⋆(W) ⊙ F (Z)) .

(3)

The above DCF framework starts from learning a target
template W using the template patch X and then convolves
W with a search patch Z to generate the response. Re-
cently, the Siamese correlation ﬁlter network [49, 54] em-
beds the DCF in a Siamese framework and constructs two
shared-weight branches as shown in Fig. 2(b). The ﬁrst one
is the template branch which takes a template patch X as in-
put and extracts its features to further generate a target tem-
plate via DCF. The second one is the search branch which

1310

takes a search patch Z as input for feature extraction. The
target template is then convolved with the CNN features of
the search patch to generate the response map. The advan-
tage of the Siamese DCF network is that both the feature
extraction CNN and correlation ﬁlter are formulated into an
end-to-end framework, so that the learned features are more
related to the visual tracking scenarios.

Consistency Loss Computation. After forward and back-
ward tracking, we obtain the response map RT.
Ideally,
RT should be a Gaussian label with the peak located at the
initial target position. In other words, RT should be as sim-
ilar as the originally given label YT. Therefore, the repre-
sentation network ϕθ(·) can be trained in an unsupervised
manner by minimizing the reconstruction error as follows:

3.2. Unsupervised Learning Prototype

Given two consecutive frames P1 and P2, we crop the
template and search patches from them, respectively. By
conducting forward tracking and backward veriﬁcation, the
proposed framework does not require ground-truth labeling
for supervised training. The difference between the initial
bounding box and the predicted bounding box in P1 will
formulate a consistency loss for network learning.

Forward Tracking. We follow [54] to build a Siamese cor-
relation ﬁlter network to track the initial bounding box re-
gion in frame P1. After cropping the template patch T from
the ﬁrst frame P1, the corresponding target template WT
can be computed as:

WT = F −1(cid:18) F (ϕθ(T)) ⊙ F ⋆(YT)

F ⋆(ϕθ(T)) ⊙ F (ϕθ(T)) + λ(cid:19) ,

(4)

where ϕθ(·) denotes the CNN feature extraction operation
with trainable network parameters θ, and YT is the label of
the template patch T. This label is a Gaussian response cen-
tered at the initial bounding box center. Once we obtain the
learned target template WT, the response map of a search
patch S from frame P2 can be computed by

RS = F −1(F ⋆(WT) ⊙ F (ϕθ(S))).

(5)

If the ground-truth Gaussian label of patch S is available,
the network ϕθ(·) can be trained by computing the L2 dis-
tance between RS and the ground-truth. In the following,
we show how to train the network without labels by exploit-
ing backward trajectory veriﬁcation.

Backward Tracking. After generating the response map
RS for frame P2, we create a pseudo Gaussian label cen-
tered at its maximum value, which is denoted by YS. In
backward tracking, we switch the role between the search
patch and the template patch. By treating S as the template
patch, we generate a target template WS using the pseudo
label YS. The target template WS can be learned using
Eq. (4) by replacing T with S and replacing YT with YS.
Then, we generate the response map RT through Eq. (5) by
replacing WT with WS and replacing S with T. Note that
we only use one Siamese correlation ﬁlter network to track
forward and backward. The network parameters θ are ﬁxed
during the tracking steps.

Lun = kRT − YTk2
2.

(6)

We perform back-propagation of the computed loss to
update the network parameters. During back-propagation,
we follow the Siamese correlation ﬁlter methods [54, 59] to
update the network as:

∂Lun

∂ϕθ(T)

∂Lun

∂ϕθ(S)

= F −1(cid:18)
= F −1(cid:18)

∂Lun

∂ (F (ϕθ(T)))⋆ +(cid:18)
∂ (F (ϕθ(S)))⋆(cid:19) .

∂Lun

∂ (F (ϕθ(T)))(cid:19)⋆(cid:19) ,

∂Lun

(7)

3.3. Unsupervised Learning Improvements

The proposed unsupervised learning method constructs
the objective function based on the consistency between
RT and YT. In practice, the tracker may deviate from the
target in the forward tracking but still return to the original
position during the backward process. However, the pro-
posed loss function does not penalize this deviation because
of the consistent predictions. Meanwhile, the raw videos
may contain uninformative or even corrupted training sam-
ples with occlusion that deteriorate the unsupervised learn-
ing process. We propose multiple frames validation and a
cost-sensitive loss to tackle these limitations.

3.3.1 Multiple Frames Validation

We propose a multiple frames validation approach to alle-
viate the inaccurate localization issue that is not penalized
by Eq. (6). Our intuition is to involve more frames dur-
ing forward and backward tracking to reduce the veriﬁca-
tion failures. The reconstruction error in Eq. (6) tends to be
ampliﬁed and the computed loss will facilitate the training
process.

During unsupervised learning, we involve another frame
P3 which is the subsequent frame after P2. We crop a search
patch S1 from P2 and another search patch S2 from P3. If
the generated response map RS1 is different from its corre-
sponding ground-truth response, this error tends to become
larger in the next frame P3. As a result, the consistency is
more likely to be broken in the backward tracking, and the
generated response map RT is more likely to deviate from
YT. By simply involving more search patches during for-
ward and backward tracking, the proposed consistency loss

1311

Template Patch
#1

Search Patch
#2

Template Patch 

#1

#2

#3

 Search
Patch #1

 Search
Patch #2

Coincidental Success

Error Accumulation

Figure 3. Single frame validation and multiple frames validation.
The inaccurate localization in single frame validation may not be
captured as shown on the left. By involving more frames as shown
on the right, we can accumulate the localization error to break the
prediction consistency during forward and backward tracking.

will be more effective to penalize the inaccurate localiza-
tions as shown in Fig. 3. In practice, we use three frames to
validate and the improved consistency loss is written as:

Lun = keRT − YTk2

2,

where eRT is the response map generated by an additional

frame during the backward tracking step.

(8)

3.3.2 Cost-sensitive Loss

We randomly initialize a bounding box region in the ﬁrst
frame P1 for forward tracking. This bounding box region
may contain noisy background context (e.g., occluded tar-
gets). Fig. 5 shows an overview of these regions. To allevi-
ate the background interference, we propose a cost-sensitive
loss to exclude noisy samples for network training.

During unsupervised learning, we construct multiple
training pairs from the training sequences. Each training
pair consists of one initial template patch T in frame P1 and
two search patches S1 and S2 from the subsequent frames
P2 and P3, respectively. These training pairs form a training
batch to train the Siamese network. In practice, we ﬁnd that
few training pairs with extremely high losses prevent the
network training from convergence. To reduce the contri-
butions of noisy pairs, we exclude 10% of the whole train-
ing pairs which contain a high loss value. Their losses can
be computed using Eq. (8). To this end, we assign a bi-
nary weight Ai
drop to each training pair and all the weight
elements form the weight vector Adrop. The 10% of its ele-
ments are 0 and the others are 1.

In addition to the noisy training pairs, the raw videos in-
clude lots of uninformative image patches which only con-
tain the background or still targets. For these patches, the
objects (e.g., sky, grass, or tree) hardly move. Intuitively,
the target with a large motion contributes more to the net-
work training. Therefore, we assign a motion weight vector
Amotion to all the training pairs. Each element Ai
motion can
be computed by

Ai

motion =(cid:13)(cid:13)Ri

2 +(cid:13)(cid:13)Ri
T(cid:13)(cid:13)2

S1 − Yi

S2 − Yi

(9)

2 ,

S1(cid:13)(cid:13)2

Search 
   # 2

...

Unlabeled sequences in the wild

Template or search patches

Figure 4. An illustration of training samples generation. The pro-
posed method simply crops and resizes the center regions from
unlabeled videos as the training patches.

T and Yi

S1 and Ri

where Ri
S2 are the response maps in the i-th train-
ing pair, Yi
S1 are the corresponding initial and
pseudo labels, respectively. Eq. (9) calculates the target
motion difference from frame P1 to P2 and P2 to P3. The
larger value of Ai
motion indicates that the target undergoes a
larger movement in this continuous trajectory. On the other
hand, we can interpret that the large value of Ai
motion rep-
resents the hard training pair which the network should pay
more attentions to. We normalize the motion weight and the
binary weight as follows,

Ai

norm =

Ai

drop · Ai
Ai

drop · Ai

motion

i=1

motion

Pn

,

(10)

where n is number of the training pairs in a mini-batch. The
ﬁnal unsupervised loss in a mini-batch is computed as:

Lun =

1
n

nXi=1

Ai

norm ·(cid:13)(cid:13)(cid:13)eRi

T(cid:13)(cid:13)(cid:13)

T − Yi

2

2

.

(11)

3.4. Unsupervised Training Details

Network Structure. We follow the DCFNet [54] to use
a shallow Siamese network with only two convolutional
layers. The ﬁlter sizes of these convolutional layers are
3 × 3 × 3 × 32 and 3 × 3 × 32 × 32, respectively. Besides,
a local response normalization (LRN) layer is employed at
the end of convolutional layers. This lightweight structure
enables extremely efﬁcient online tracking.

Training Data. We choose the widely used ILSVRC 2015
[42] as our training data to fairly compare with existing su-
pervised trackers. In the data pre-processing step, existing
supervised approaches [1, 49, 54] require ground-truth la-
bels for every frame. Meanwhile, they usually discard the
frames where the target is occluded, or the target is partially
out of view, or the target infrequently appears in tracking
scenarios (e.g., snake). This requires a time-consuming hu-
man interaction to preprocess the training data.

In contrast, we do not preprocess any data and simply
crop the center patch in each frame. The patch size is the
half of the whole image and further resized to 125 × 125 as

1312

t

e
a
r
 

i

i

n
o
s
c
e
r
P

1

0.9

0.8

0.7

0.6

0.5

0.4

0.3

0.2

0.1

0

0

Precision plots of OPE

UDT-FullySupervised [80.6]
UDT-Weakly [78.9]
UDT-MoreData [76.9]
UDT-Finetune [76.7]
UDT [76.0]
UDT-StandardLoss [74.5]
UDT-SingleTrajectory [73.2]

10

20

30

40

50

Location error threshold (pixels)

e

t

a
r
 
s
s
e
c
c
u
S

1

0.9

0.8

0.7

0.6

0.5

0.4

0.3

0.2

0.1

0

0

Success plots of OPE

UDT-FullySupervised [62.6]
UDT-Weakly [61.4]
UDT-MoreData [60.1]
UDT-Finetune [60.0]
UDT [59.4]
UDT-StandardLoss [58.6]
UDT-SingleTrajectory [57.4]

0.2

0.4

0.6

0.8

1

Overlap threshold

Figure 5. Examples of randomly cropped center patches from
ILSVRC 2015 [42]. Most patches contain valuable contents while
some are less meaningful (e.g., the patches on the last row).

the network input as shown in Fig. 4. We randomly choose
three cropped patches from the continuous 10 frames in a
video. We set one of the three patches as the template and
the remaining as search patches. This is based on the as-
sumption that the center located target objects are unlikely
to move out of the cropped region in a short period. We
track the objects appearing in the center of the cropped re-
gions, while not specifying their categories. Some examples
of the cropped regions are exhibited in Fig. 5.

3.5. Online Object Tracking

After ofﬂine unsupervised learning, we online track the
target object following forward tracking as illustrated in
Sec. 3.2. To adapt the object appearance variations, we on-
line update the DCF parameters as follows:

Wt = (1 − αt)Wt−1 + αtW,

(12)

where αt ∈ [0, 1] is the linear interpolation coefﬁcient. The
target scale is estimated through a patch pyramid with scale
factors {as|a = 1.015, s = {−1, 0, 1}} following [10]. We
denote the proposed Unsupervised Deep Tracker as UDT,
which merely uses standard incremental model update and
scale estimation. Furthermore, we use an advanced model
update that adaptively changes αt as well as a better DCF
formulation following [7]. The improved tracker is denoted
as UDT+.

4. Experiments

In this section, we ﬁrst analyze the effectiveness of our
unsupervised learning framework. Then, we compare with
state-of-the-art trackers on the standard benchmarks includ-
ing OTB-2015 [57], Temple-Color [29] and VOT-2016 [21].

4.1. Experimental Details

In our experiments, we use the stochastic gradient de-
scent (SGD) with a momentum of 0.9 and a weight decay

Figure 6. The precision and success plots of our UDT tracker with
different conﬁgurations on the OTB-2015 dataset [57]. In the leg-
end, we show the distance precision at 20 pixels threshold and
area-under-curve (AUC) score.

of 0.005 to train our model. Our unsupervised network is
trained for 50 epoches with a learning rate exponentially
decays from 10−2 to 10−5 and a mini-batch size of 32. All
the experiments are executed on a computer with 4.00GHz
Intel Core I7-4790K and NVIDIA GTX 1080Ti GPU.

On the OTB-2015 [57] and TempleColor [29] datasets,
we use one-pass evaluation (OPE) with distance precision
(DP) at 20 pixels and the area-under-curve (AUC) of the
overlap success plot. On the VOT2016 [21], we measure the
performance using the Expected Average Overlap (EAO).

4.2. Ablation Study and Analysis

Unsupervised and supervised learning. We use the same
training data [42] to train our network via fully supervised
learning. Fig. 6 shows the evaluation results where the fully
supervised training conﬁguration improves UDT by 3% un-
der the AUC scores.
Stable training. We analyze the effectiveness of our sta-
ble training by using different conﬁgurations. Fig. 6 shows
the evaluation results of multiple learned trackers. The
UDT-StandardLoss indicates the results from the tracker
learned without using hard sample reweighing (i.e., Amotion
in Eq. (9)). The UDT-SingleTrajectory denotes the results
from the tracker learned only using the prototype frame-
work in Sec. 3.2. The results show that multiple frames
validation and cost-sensitive loss improve the accuracy.
Using high-quality training data. We analyze the perfor-
mance variations by using high-quality training data.
In
ILSVRC 2015 [42], instead of randomly cropping patches,
we add offsets ranging from [-20, +20] pixels to the ground-
truth bounding boxes for training samples collection. These
patches contain more meaningful objects than the randomly
cropped ones. The results in Fig. 6 show that our tracker
learned using weakly labeled samples (i.e., UDT-Weakly)
produce comparable results with the supervised conﬁgu-
ration. Note that the predicted target location by exist-
ing object detectors or optical ﬂow estimators is normally
within 20 pixels offset with respect to the ground-truth.
These results indicate that UDT achieves comparable per-
formance with supervised conﬁguration when using less ac-

1313

Table 1. Comparison results with fully-supervised baseline (left) and state-of-the-art (right) trackers on the OTB-2015 benchmark [57].
The evaluation metric is AUC score. Our unsupervised UDT tracker performs favorably against baseline methods shown on the left, while
our UDT+ tracker achieves comparable results with the recent state-of-the-art supervised trackers shown on the right.

Trackers

SiamFC DCFNet CFNet UDT DSiam EAST HP SA-Siam SiamPRN RASNet SACF Siam-tri RT-MDNet MemTrack StructSiam UDT+

AUC score (%)
Speed (FPS)

[1]

58.2
86

[54]

58.0
70

[49]

56.8
65

59.4
70

[14]

60.5
25

[17]

62.9
159

[13]

60.1
69

[15]

65.7
50

[27]

63.7
160

[55]

64.2
83

[59]

63.3
23

[12]

59.2
86

[19]

65.0
50

[58]

62.6
50

[60]

62.1
45

63.2
55

curate labels produced by existing detection or ﬂow estima-
tion methods.
Few-shot domain adaptation. We collect the ﬁrst 5 frames
from the videos in OTB-2015 [57] with only the ground-
truth bounding box available in the ﬁrst frame. Using these
limited samples, we ﬁne-tune our network by 100 iterations
using the forward-backward pipeline. This training process
takes around 6 minutes. The results (i.e., UDT-Finetune)
show that the performance is further enhanced. Our ofﬂine
unsupervised training learns general feature representation,
which can be transferred to a speciﬁc domain (e.g., OTB)
using few-shot adaptation. This domain adaptation is sim-
ilar to MDNet [37] but our initial parameters are ofﬂine
learned in an unsupervised manner.
Adopting more unlabeled data. Finally, we utilize more
unlabeled videos for network training. These additional raw
videos are from the OxUvA benchmark [48] (337 videos in
total), which is a subset of Youtube-BB [41].
In Fig. 6,
our UDT-MoreData tracker gains performance improve-
ment (0.9% DP and 0.7% AUC), which illustrates unlabeled
data can advance the unsupervised training. Nevertheless,
in the following we remain using the UDT and UDT+ track-
ers which are only trained on [42] for fair comparisons.

4.3. State of the art Comparison

OTB-2015 Dataset. We evaluate the proposed UDT and
UDT+ trackers with state-of-the-art real-time trackers in-
cluding ACT [4], ACFN [6], CFNet [49], SiamFC [1], SCT
[5], CSR-DCF [32], DSST [8], and KCF [16] using preci-
sion and success plots metrics. Fig. 7 and Table 1 show that
the proposed unsupervised tracker UDT is comparable with
the baseline supervised methods (i.e., SiamFC and CFNet).
Meanwhile, the proposed UDT tracker exceeds DSST algo-
rithm by a large margin. As DSST is a DCF based tracker
with accurate scale estimation, the performance improve-
ment indicates that our unsupervised feature representation
In Fig. 7 and
is more effective than empirical features.
Table 1, we do not compare with some remarkable non-
realtime trackers. For example, MDNet [37] and ECO [7]
can yield 67.8% and 69.4% AUC on the OTB-2015 dataset,
but they are far from real-time.

In Table 1, we also compare with more recently proposed
supervised trackers. These latest approaches are mainly
based on the Siamese network and trained using ILSVRC
[42]. Some trackers (e.g., SA-Siam [15] and RT-MDNet

1

0.9

0.8

e

t

a
r
 

0.7

0.6

i

i

n
o
s
c
e
r
P

0.5

0.4

0.3

0.2

0.1

0

0

Precision plots of OPE

ACT [84.2]
UDT+ [83.1]
ACFN [79.4]
SiamFC [77.1]
CSR-DCF [77.0]
UDT [76.0]
SCT [76.0]
CFNet [74.8]
KCF [69.6]
DSST [68.9]

10

20

30

40

50

Location error threshold (pixels)

e

t

a
r
 
s
s
e
c
c
u
S

1

0.9

0.8

0.7

0.6

0.5

0.4

0.3

0.2

0.1

0

0

Success plots of OPE

UDT+ [63.2]
ACT [62.5]
UDT [59.4]
SiamFC [58.2]
CSR-DCF [58.1]
ACFN [57.0]
CFNet [56.8]
SCT [53.7]
DSST [51.8]
KCF [48.5]

0.2

0.4

0.6

0.8

1

Overlap threshold

Figure 7. Precision and success plots on the OTB-2015 dataset [57]
for recent real-time trackers.

e

t

a
r
 

i

i

n
o
s
c
e
r
P

0.9

0.8

0.7

0.6

0.5

0.4

0.3

0.2

0.1

0

0

Precision plots of OPE

UDT+ [71.7]
SiamFC [68.8]
UDT [65.8]
CSR-DCF [64.7]
SCT [62.7]
CFNet [60.7]
KCF [54.9]
DSST [53.4]

10

20

30

40

50

Location error threshold (pixels)

e

t

a
r
 
s
s
e
c
c
u
S

0.9

0.8

0.7

0.6

0.5

0.4

0.3

0.2

0.1

0

0

Success plots of OPE

UDT+ [54.1]
UDT [50.7]
SiamFC [50.3]
CSR-DCF [47.7]
SCT [46.6]
CFNet [45.6]
DSST [40.5]
KCF [38.7]

0.2

0.4

0.6

0.8

1

Overlap threshold

Figure 8. Precision and success plots on the Temple-Color dataset
[29] for recent real-time trackers.

[19]) adopt pre-trained CNN models (e.g., AlexNet [23]
and VGG-M [3]) for network initialization. The SiamRPN
[27] additionally uses more labeled training videos from
Youtube-BB dataset [41]. Compared with existing methods,
the proposed UDT+ tracker does not require data labels or
off-the-shelf deep models while still achieving comparable
performance and efﬁciency.
Temple-Color Dataset. The Temple-Color [29] is a more
challenging benchmark with 128 color videos. We com-
pare our method with the state-of-the-art trackers illustrated
in Sec. 4.3. The propose UDT tracker performs favorably
against SiamFC and CFNet as shown in Fig. 8.
VOT2016 Dataset. Furthermore, we report the evaluation
results on the VOT2016 benchmark [21]. The expected av-
erage overlap (EAO) is the ﬁnal metric for tracker rank-
ing according to the VOT report [22]. As shown in Ta-
ble 2, the performance of our UDT tracker is comparable
with the baseline trackers (e.g., SiamFC). The improved
UDT+ tracker performs favorably against state-of-the-art
fully-supervised trackers including SA-Siam [15], Struct-
Siam [60] and MemTrack [58].
Attribute Analysis. On the OTB-2015 benchmark, we fur-

1314

Figure 9. Attribute-based evaluation on the OTB-2015 dataset
[57]. The 11 attributes are background clutter (BC), deforma-
tion (DEF), fast motion (FM), in-plane rotation (IPR), illumination
varition (IV), low resolution (LR), motion blur (MB), occlusion
(OCC), out-of-plane rotation (OPR), out-of-view (OV), and scale
varition (SV), respectively.

Table 2. Comparison with state-of-the-art and baseline trackers on
the VOT2016 benchmark [21]. The evaluation metrics include Ac-
curacy, Failures (over 60 sequences), and Expected Average Over-
lap (EAO). The up arrows indicate that higher values are better for
the corresponding metric and vice versa.

Trackers

Accuracy (↑) Failures (↓) EAO (↑) FPS (↑)

ECO [7]
C-COT [11]
pyMDNet [37]
SA-Siam [15]
StructSiam [60]
MemTrack [58]
SiamFC [1]
SCT [5]
DSST [8]
KCF [16]

UDT (Ours)
UDT+ (Ours)

0.54
0.52

-

0.53

-

0.53
0.53
0.48
0.53
0.49

0.54
0.53

-
51
-
-
-
-
99
117
151
122

102
66

0.374
0.331
0.304
0.291
0.264
0.273
0.235
0.188
0.181
0.192

0.226
0.301

6
0.3
2
50
45
50
86
40
25
170

70
55

ther analyze the performance variations over different chal-
lenges as shown in Fig. 9. On the majority of challeng-
ing scenarios, the proposed UDT tracker outperforms the
SiamFC and CFNet trackers. Compared with the fully-
supervised UDT tracker, the unsupervised UDT does not
achieve similar tracking accuracies under illumination vari-
ation (IV), occlusion (OCC), and fast motion (FM) scenar-
ios. This is because the target appearance variations are sig-
niﬁcant in these video sequences. Without strong supervi-
sion, the proposed tracker is not effective to learn a robust
feature representation to overcome these variations.
Qualitative Evaluation. We visually compare the proposed
UDT tracker to some supervised trackers (e.g., ACFN,
SiamFC, and CFNet) and a baseline DCF tracker (DSST) on
eight challenging video sequences. Although the proposed
UDT tracker does not employ online improvements, we still
observe that UDT effectively tracks the target, especially

UDT

SiamFC

CFNet

ACFN

DSST

Figure 10. Qualitative evaluation of our proposed UDT and other
trackers including SiamFC [1], CFNet [49], ACFN [6], and DSST
[8] on 8 challenging videos from OTB-2015. From left to right and
top to down are Basketball, Board, Ironman, CarScale, Diving,
DragonBaby, Bolt, and Tiger1, respectively.

on the challenging Ironman and Diving video sequences as
shown in Fig. 10. It is worth mentioning that such a robust
tracker is learned using unlabeled videos without ground-
truth supervisions.
Limitation. (1) As discussed in the Attribute Analysis, our
unsupervised feature representation may lack the objectness
information to cope with complex scenarios. (2) Since our
approach involves both forward and backward tracking, the
computational load is another potential drawback.

5. Conclusion

In this paper, we proposed how to train a visual tracker
using unlabeled video sequences in the wild, which has
rarely been investigated in visual tracking. By designing an
unsupervised Siamese correlation ﬁlter network, we veriﬁed
the feasibility and effectiveness of our forward-backward
based unsupervised training pipeline. To further facilitate
the unsupervised training, we extended our framework to
consider multiple frames and employ a cost-sensitive loss.
Extensive experiments exhibit that the proposed unsuper-
vised tracker, without bells and whistles, performs as a solid
baseline and achieves comparable results with the classic
fully-supervised trackers. Finally, unsupervised framework
shows attractive potentials in visual tracking, such as utiliz-
ing more unlabeled data or weakly labeled data to further
improve the tracking accuracy.

Acknowledgements. This work was supported in part to Dr. Houqiang
Li by the 973 Program under Contract No. 2015CB351803 and NSFC
under contract No. 61836011, and in part to Dr. Wengang Zhou by
NSFC under contract No. 61822208 and 61632019, Young Elite Scientists
Sponsorship Program By CAST (2016QNRC001), and the Fundamental
Research Funds for the Central Universities. This work was supported
in part by National Key Research and Development Program of China
(2016YFB1001003), STCSM(18DZ1112300).

1315

0 10 20 30 40 50 60 70 UDT-fully UDT SiamFC CFNet AUC  Score  (%) References

[1] Luca Bertinetto, Jack Valmadre, Jo˜ao F Henriques, Andrea
Vedaldi, and Philip HS Torr. Fully-convolutional siamese
networks for object tracking. In ECCV, 2016.

[2] David S Bolme, J Ross Beveridge, Bruce A Draper, and
Yui Man Lui. Visual object tracking using adaptive corre-
lation ﬁlters. In CVPR, 2010.

[3] Ken Chatﬁeld, Karen Simonyan, Andrea Vedaldi, and An-
drew Zisserman. Return of the devil in the details: Delving
deep into convolutional nets. In BMVC, 2014.

[4] Boyu Chen, Dong Wang, Peixia Li, Shuang Wang, and
In ECCV,

Huchuan Lu. Real-time’actor-critic’tracking.
2018.

[5] Jongwon Choi, Hyung Jin Chang, Jiyeoup Jeong, Yian-
nis Demiris, and Jin Young Choi. Visual tracking using
attention-modulated disintegration and integration. In CVPR,
2016.

[6] Jongwon Choi, Hyung Jin Chang, Sangdoo Yun, Tobias Fis-
cher, Yiannis Demiris, and Jin Young Choi. Attentional cor-
relation ﬁlter network for adaptive visual tracking. In CVPR,
2017.

[7] Martin Danelljan, Goutam Bhat, Fahad Shahbaz Khan, and
Michael Felsberg. Eco: Efﬁcient convolution operators for
tracking. In CVPR, 2017.

[8] Martin Danelljan, Gustav H¨ager, Fahad Khan, and Michael
Felsberg. Accurate scale estimation for robust visual track-
ing. In BMVC, 2014.

[9] Martin Danelljan, Gustav H¨ager, Fahad Shahbaz Khan, and
Michael Felsberg. Adaptive decontamination of the training
set: A uniﬁed formulation for discriminative visual tracking.
In CVPR, 2016.

[10] Martin Danelljan, Gustav Hager, Fahad Shahbaz Khan, and
Michael Felsberg. Learning spatially regularized correlation
ﬁlters for visual tracking. In ICCV, 2015.

[11] Martin Danelljan, Andreas Robinson, Fahad Shahbaz Khan,
and Michael Felsberg. Beyond correlation ﬁlters: Learn-
ing continuous convolution operators for visual tracking. In
ECCV, 2016.

[12] Xingping Dong and Jianbing Shen. Triplet loss in siamese

network for object tracking. In ECCV, 2018.

[13] Xingping Dong, Jianbing Shen, Wenguan Wang, Yu Liu,
Ling Shao, and Fatih Porikli. Hyperparameter optimiza-
tion for tracking with continuous deep q-learning. In CVPR,
2018.

[14] Qing Guo, Wei Feng, Ce Zhou, Rui Huang, Liang Wan, and
Song Wang. Learning dynamic siamese network for visual
object tracking. In ICCV, 2017.

[15] Anfeng He, Chong Luo, Xinmei Tian, and Wenjun Zeng. A
In

twofold siamese network for real-time object tracking.
CVPR, 2018.

[16] Jo˜ao F Henriques, Rui Caseiro, Pedro Martins, and Jorge
Batista. High-speed tracking with kernelized correlation ﬁl-
ters. TPAMI, 37(3):583–596, 2015.

[18] Jianglei Huang and Wengang Zhou. Re2ema: Regular-
ized and reinitialized exponential moving average for target
model update in object tracking. In AAAI, 2019.

[19] Ilchae Jung, Jeany Son, Mooyeol Baek, and Bohyung Han.

Real-time mdnet. In ECCV, 2018.

[20] Zdenek Kalal, Krystian Mikolajczyk, and Jiri Matas.
TPAMI, 34(7):1409–1422,

Tracking-learning-detection.
2012.

[21] Matej Kristan, Jiri Matas, Ales Leonardis, Michael Felsberg,
Luka Cehovin, Gustavo Fern´andez, Tomas Vojir, Hager, and
et al. The visual object tracking vot2016 challenge results.
In ECCV Workshop, 2016.

[22] Matej Kristan, Jiri Matas, Aleˇs Leonardis, Tom´aˇs Voj´ıˇr,
Roman Pﬂugfelder, Gustavo Fernandez, Georg Nebehay,
Fatih Porikli, and Luka ˇCehovin. A novel performance
evaluation methodology for single-target trackers. TPAMI,
38(11):2137–2155, 2016.

[23] Alex Krizhevsky, Ilya Sutskever, and Geoffrey E Hinton.
Imagenet classiﬁcation with deep convolutional neural net-
works. In NIPS, 2012.

[24] Quoc V Le. Building high-level features using large scale

unsupervised learning. In ICASSP, 2013.

[25] Dae Youn Lee, Jae Young Sim, and Chang Su Kim. Multi-
hypothesis trajectory analysis for robust visual tracking. In
CVPR, 2015.

[26] Hsin-Ying Lee, Jia-Bin Huang, Maneesh Singh, and Ming-
Hsuan Yang. Unsupervised representation learning by sort-
ing sequences. In ICCV, 2017.

[27] Bo Li, Junjie Yan, Wei Wu, Zheng Zhu, and Xiaolin Hu.
High performance visual tracking with siamese region pro-
posal network. In CVPR, 2018.

[28] Feng Li, Yingjie Yao, Peihua Li, David Zhang, Wangmeng
Zuo, and Ming-Hsuan Yang. Integrating boundary and center
correlation ﬁlters for visual tracking with aspect ratio varia-
tion. In ICCV Workshop, 2017.

[29] Pengpeng Liang, Erik Blasch, and Haibin Ling. Encoding
color information for visual tracking: algorithms and bench-
mark. TIP, 24(12):5630–5644, 2015.

[30] Si Liu, Tianzhu Zhang, Xiaochun Cao, and Changsheng Xu.
In

Structural correlation ﬁlter for robust visual tracking.
CVPR, 2016.

[31] Xiankai Lu, Chao Ma, Bingbing Ni, Xiaokang Yang, Ian
Reid, and Ming-Hsuan Yang. Deep regression tracking with
shrinkage loss. In ECCV, 2018.

[32] Alan Lukezic, Tomas Vojir, Luka Cehovin Zajc, Jiri Matas,
and Matej Kristan. Discriminative correlation ﬁlter with
channel and spatial reliability. In CVPR, 2017.

[33] Wenhan Luo, Peng Sun, Fangwei Zhong, Wei Liu, Tong
Zhang, and Yizhou Wang. End-to-end active object track-
ing and its real-world deployment via reinforcement learn-
ing. TPAMI, 2019.

[34] Wenhan Luo, Junliang Xing, Anton Milan, Xiaoqin Zhang,
Wei Liu, Xiaowei Zhao, and Tae-Kyun Kim. Multi-
ple object tracking: A literature review.
arXiv preprint
arXiv:1409.7618, 2014.

[17] Chen Huang, Simon Lucey, and Deva Ramanan. Learning
policies for adaptive tracking with deep feature cascades. In
ICCV, 2017.

[35] Chao Ma, Jia-Bin Huang, Xiaokang Yang, and Ming-Hsuan
Yang. Hierarchical convolutional features for visual tracking.
In ICCV, 2015.

1316

[54] Qiang Wang, Jin Gao, Junliang Xing, Mengdan Zhang, and
Weiming Hu. Dcfnet: Discriminant correlation ﬁlters net-
work for visual tracking. arXiv preprint arXiv:1704.04057,
2017.

[55] Qiang Wang, Zhu Teng, Junliang Xing, Jin Gao, Weiming
Hu, and Stephen Maybank. Learning attentions: Residual
attentional siamese network for high performance online vi-
sual tracking. In CVPR, 2018.

[56] Xiaolong Wang and Abhinav Gupta. Unsupervised learning

of visual representations using videos. In ICCV, 2015.

[57] Yi Wu, Jongwoo Lim, and Ming-Hsuan Yang. Object track-

ing benchmark. TPAMI, 37(9):1834–1848, 2015.

[58] Tianyu Yang and Antoni B Chan. Learning dynamic memory

networks for object tracking. In ECCV, 2018.

[59] Mengdan Zhang, Qiang Wang, Junliang Xing, Jin Gao, Peixi
Peng, Weiming Hu, and Steve Maybank. Visual tracking via
spatially aligned correlation ﬁlters network. In ECCV, 2018.
[60] Yunhua Zhang, Lijun Wang, Jinqing Qi, Dong Wang,
Mengyang Feng, and Huchuan Lu. Structured siamese net-
work for real-time visual tracking. In ECCV, 2018.

[36] Matthias M¨uller, Adel Bibi, Silvio Giancola, Salman Al-
Subaihi, and Bernard Ghanem. Trackingnet: A large-scale
dataset and benchmark for object tracking in the wild.
In
ECCV, 2018.

[37] Hyeonseob Nam and Bohyung Han. Learning multi-domain
convolutional neural networks for visual tracking. In CVPR,
2016.

[38] Bruno A Olshausen and David J Field. Sparse coding with an
overcomplete basis set: A strategy employed by v1? Vision
research, 37(23):3311–3325, 1997.

[39] Shi Pu, Yibing Song, Chao Ma, Honggang Zhang, and Ming-
Hsuan Yang. Deep attentive tracking via reciprocative learn-
ing. In NeurIPS, 2018.

[40] Yuankai Qi, Shengping Zhang, Lei Qin, Hongxun Yao,
Qingming Huang, and Jongwoo Lim Ming-Hsuan Yang.
Hedged deep tracking. In CVPR, 2016.

[41] Esteban Real, Jonathon Shlens, Stefano Mazzocchi, Xin Pan,
and Vincent Vanhoucke. Youtube-boundingboxes: A large
high-precision human-annotated data set for object detection
in video. In CVPR, 2017.

[42] Olga Russakovsky, Jia Deng, Hao Su, Jonathan Krause, San-
jeev Satheesh, Sean Ma, Zhiheng Huang, Andrej Karpathy,
Aditya Khosla, Michael Bernstein, et al.
Imagenet large
scale visual recognition challenge.
IJCV, 115(3):211–252,
2015.

[43] Karen Simonyan and Andrew Zisserman. Very deep convo-
lutional networks for large-scale image recognition. arXiv
preprint arXiv:1409.1556, 2014.

[44] Yibing Song, Chao Ma, Lijun Gong, Jiawei Zhang, Rynson
Lau, and Ming-Hsuan Yang. Crest: Convolutional residual
learning for visual tracking. In ICCV, 2017.

[45] Yibing Song, Chao Ma, Xiaohe Wu, Lijun Gong, Linchao
Bao, Wangmeng Zuo, Chunhua Shen, Rynson W.H. Lau,
and Ming-Hsuan Yang. Vital: Visual tracking via adversarial
learning. In CVPR, 2018.

[46] Ran Tao, Efstratios Gavves, and Arnold WM Smeulders.

Siamese instance search for tracking. In CVPR, 2016.

[47] Carlo Tomasi and Takeo Kanade. Detection and tracking of

point features. 1991.

[48] Jack Valmadre, Luca Bertinetto, Jo˜ao F Henriques, Ran Tao,
Andrea Vedaldi, Arnold Smeulders, Philip Torr, and Efstra-
tios Gavves. Long-term tracking in the wild: A benchmark.
In ECCV, 2018.

[49] Jack Valmadre, Luca Bertinetto, Jo˜ao F Henriques, Andrea
Vedaldi, and Philip HS Torr. End-to-end representation
learning for correlation ﬁlter based tracking. In CVPR, 2017.

[50] Carl Vondrick, Hamed Pirsiavash, and Antonio Torralba. An-
In

ticipating visual representations from unlabeled video.
CVPR, 2016.

[51] Naiyan Wang and Dit-Yan Yeung. Learning a deep compact

image representation for visual tracking. In NIPS, 2013.

[52] Ning Wang, Wengang Zhou, and Houqiang Li. Reliable re-

detection for long-term tracking. TCSVT, 2019.

[53] Ning Wang, Wengang Zhou, Qi Tian, Richang Hong, Meng
Wang, and Houqiang Li. Multi-cue correlation ﬁlters for ro-
bust visual tracking. In CVPR, 2018.

1317

