Combinatorial persistency criteria for multicut and max-cut

Jan-Hendrik Lange

Bjoern Andres

Paul Swoboda

Max Planck Institute for Informatics

Max Planck Institute for Informatics

Max Planck Institute for Informatics

Saarland University

Bosch Center for AI

University of T¨ubingen

Abstract

In combinatorial optimization, partial variable assign-
ments are called persistent if they agree with some optimal
solution. We propose persistency criteria for the multicut
and max-cut problem as well as fast combinatorial routines
to verify them. The criteria that we derive are based on
mappings that improve feasible multicuts, respectively cuts.
Our elementary criteria can be checked enumeratively. The
more advanced ones rely on fast algorithms for upper and
lower bounds for the respective cut problems and max-ﬂow
techniques for auxiliary min-cut problems. Our methods can
be used as a preprocessing technique for reducing problem
sizes or for computing partial optimality guarantees for so-
lutions output by heuristic solvers. We show the efﬁcacy of
our methods on instances of both problems from computer
vision, biomedical image analysis and statistical physics.

1. Introduction

Partitioning graphs into meaningful clusters is a funda-
mental problem in combinatorial optimization with numer-
ous applications in computer vision, biomedical image anal-
ysis, machine learning, data mining and beyond. The MUL-
TICUT problem (a.k.a. correlation clustering) and MAX-CUT
problem are arguably among the most well-known combina-
torial optimization problems for partitioning graphs. They
enable graph clustering purely based on costs between pairs
of nodes and are thus commonly employed to model image
processing and segmentation tasks occurring in computer
vision [34, 3, 22, 18, 5]. The following factors contribute to
the signiﬁcance of the MULTICUT and MAX-CUT problem:
The former allows for a graph clustering formulation that
determines the number of clusters as part of the optimiza-
tion process. The latter is essentially equivalent to binary
quadratic programming, which has a variety of applications
in image processing. However, as computer vision mod-
els are typically large-scale, standard solution techniques
based on solving LP-relaxations do not scale well enough
and are thus inapplicable. Even more so, ﬁnding globally

optimal solutions with branch-and-cut is infeasible with off-
the-shelf commercial solvers. Hence, the need arises for
developing specialized heuristic solvers that output high-
quality solutions for real-world problems, despite the worst-
case NP-hardness of the MULTICUT and MAX-CUT problem.
Unfortunately, although heuristic solvers often achieve a
good empirical performance, they usually come without any
optimality guarantees. Speciﬁcally, even if large parts of
the variable assignments computed by a heuristic agree with
globally optimal solutions, such optimality is not recognized.

In this work we consider combinatorial techniques for the
MULTICUT and MAX-CUT problem by which we can efﬁ-
ciently ﬁnd persistency (a.k.a. partial optimality). Persistent
variable assignments come with a certiﬁcate that proves their
agreement with a globally optimal solution. The potential
beneﬁts are twofold: (i) After running a primal heuristic,
we can compute certiﬁcates which show that some variables
are persistent. (ii) Even before running a heuristic, we may
determine in a preprocessing step persistent variable assign-
ments. In either case, the problem size can be reduced. In
the ﬁrst case, a subsequent optimization with exact solvers
is accelerated. In the second case, possibly also the runtime
of a heuristic algorithm is reduced and the solution quality
improved.

A joint treatment of the MULTICUT and MAX-CUT prob-
lem seems instructive, since many criteria have a similar
formulation and are based on analogous arguments. For the
MAX-CUT problem we offer, to our knowledge, a novel ap-
proach for computing persistent variable assignments. For
the MULTICUT problem our empirical evidence suggests that
our method offers substantial improvement over prior work
on persistency. Our empirical results are most signiﬁcant
for very large scale problems which current heuristics can
barely handle, e.g. in biomedical image segmentation [5]. By
reducing problem size via persistency, our method enables
high quality solutions in such cases.

The paper is organized as follows. In Section 2 we review
the related work. In Section 3 we introduce the MULTICUT
and MAX-CUT problem mathematically in a shared compact
formulation. In Section 4 we recap the concept of improving

16093

mappings in the context of persistency. Further, we introduce
fundamental building blocks for the construction of improv-
ing mappings for the MULTICUT and MAX-CUT problem. In
Section 5 and 6 we present our combinatorial persistency
criteria and devise algorithms to check them. Finally, in
Section 7 we evaluate our methods in numerical experiments
on instances from the literature and compare to related work.
Due to limited space, we provide the proofs for our results
as well as running times for our experiments in the supple-
mentary material. The supplements also contain technical
improvements of our persistency criteria that were omitted
from the main paper for the sake of clarity.

2. Related work

Persistency for Markov Random Fields (MRF) and, as a
special case, for the binary quadratic optimization problem
(a.k.a. Quadratic Pseudo-Boolean Optimization (QPBO)),
has been well studied. It was observed in [31] that a natural
LP-relaxation of the stable set problem has the persistency
property: All integral variables of LP-solutions coincide with
a globally optimal one. This result has been transferred to
QPBO [16, 6, 7] and extended in [45] to ﬁnd relational persis-
tency, i.e. showing that some pairs of variables must have the
same/different values. For higher order binary unrestricted
optimization problems, the concept of roof duality can be
extended to obtain further persistency results [34, 19, 26].
Going beyond the basic LP-relaxation for QPBO, persistency
certiﬁcates involving tighter LP-relaxations for higher order
polynomial 0/1-programs that do not possess the persistency
property (i.e. integral variables need not be persistent) have
been studied in [1].

For general MRFs, criteria that can be elementarily
checked include Dead End Elimination (DEE) [12]. More
powerful techniques generalizing DEE that still can be used
for fast preprocessing can be found in [44]. The MQPBO
method [24] consists of transforming multilabel MRFs to
the QPBO problem and persistency results from QPBO can
subsequently be used to obtain persistency for the origi-
nal multilabel MRF. Persistency criteria for the multilabel
Potts problem that can be efﬁciently checked with max-ﬂow
computations have been developed in [27, 28] and reﬁned
in [14]. More powerful criteria based on LP-relaxations have
been proposed for the multilabel Potts problem in [41] and
in [38, 42, 40] for general discrete MRFs. An in-depth ex-
position of the concept of improving mappings that is used
implicitly or explicitly for all of the above MRF criteria can
be found in [37]. A comprehensive theoretical discussion
and comparison of the above persistency techniques can be
found in [39].

There has been, to our knowledge, less work on per-
sistency for the MULTICUT and MAX-CUT problem. For
MULTICUT, the works [2, 29] proposed simple persistency
criteria that allow to ﬁx some edge assignments. We are not

aware of any persistency results for MAX-CUT. Also it is not
easily possible to transfer persistency results from QPBO
to MAX-CUT, even though there exist straightforward trans-
formations between these two problems. The underlying
reason is that the transformation from MAX-CUT to QPBO
introduces symmetries which current persistency criteria can-
not handle. More speciﬁcally, known persistency criteria
rely on an improving mapping, but in symmetric instances
it is always possible to map a labeling to an equivalent one
with the same cost by exploiting symmetries. Consequently,
ﬁxed-points of improving mappings, which amount to persis-
tent variables, cannot be found. For the closely related (yet
polynomial-time solvable) MIN-CUT problem, a family of
persistency criteria were proposed in [32, 17]. They directly
translate to the MAX-CUT problem and we derive them as
special cases in our study below.

The more involved constraints describing the MULTICUT
and MAX-CUT problem make it difﬁcult to directly transfer
some of the powerful persistency techniques that are avail-
able for MRFs. In our work we show how the framework of
improving mappings developed in [37] can be used to derive
persistency criteria for combinatorial problems with more
complicated constraint structures, such as the MULTICUT
and MAX-CUT problem, once a class of mappings that act
on feasible solutions is identiﬁed. Speciﬁcally, we show
that the known MULTICUT persistency criteria from [29] and
the persistency criteria from [17] (transferred to the MAX-
CUT problem) can be derived in our theoretical framework.
Moreover, we deﬁne more powerful criteria that can ﬁnd
signiﬁcantly more persistent variables, as shown in the ex-
perimental Section 7, yet can be evaluated efﬁciently. We
believe that our approach of composing improving mappings
from elementary mappings is instructive in the search for
more persistency criteria.

3. Multicut and max-cut

Let

min hθ, xi

s.t.

x ∈ X

(P)

with X ⊆ {0, 1}m be a linear combinatorial optimization
problem. In this paper, we study speciﬁc instances of (P)
known as the MULTICUT and the MAX-CUT problem, which
are introduced mathematically in this section. To this end,
let G = (V, E, θ) be a weighted graph, where θ ∈ RE.
We distinguish non-negative and negative edges via E =
E+ ∪ E− with E+ = {e ∈ E | θe ≥ 0} and E− =
{e ∈ E | θe < 0}. For any two disjoint subsets of vertices
U, W ⊆ V let δ(U, W ) = {uw ∈ E | u ∈ U, w ∈ W }
denote the set of edges between U and W . Further, we write
δ(U ) = δ(U, V \ U ) and E(U ) = {uv ∈ E | u, v ∈ U }.

Deﬁnition 1 (Multicuts and Cuts). Let (U1, . . . , Uk) be a
partition of V , i.e. U1 ∪ . . . ∪ Uk = V and Ui ∩ Uj = ∅ for

6094

all i, j with i 6= j. The set of edges M between any pair of
components of the partition, deﬁned by

M = [1≤i<j≤k

δ(Ui, Uj),

is called a multicut of G. If k = 2, then M = δ(U1) = δ(U2)
is called a cut of G. For any set of edges F ⊆ E deﬁne the
incidence vector ✶F ∈ {0, 1}E of F via

(✶F )e =(1

0

if e ∈ F

else.

We write

MC =n✶M | M multicut of Go,
CUT =(cid:8)✶δ(U ) | U ⊆ V(cid:9) ⊆ MC

for the set of incidence vectors of multicuts, respectively
cuts of G.

The MULTICUT problem is to ﬁnd a multicut of minimum
weight w.r.t. θ and can be written as an instance of (P) as
follows:

min hθ, xi

s.t. x ∈ MC.

(PMC)

The MAX-CUT problem is to ﬁnd a cut δ(U ), U ⊆ V ,
of maximum weight (or equivalently of minimum weight
for −θ). Therefore, it can w.l.o.g. be written as an instance
of (P) as follows:

min hθ, xi

s.t.

x ∈ CUT.

(PCUT)

Note that we use min instead of max to conform to (P).

4. Improving mappings

In this section, we introduce improving mappings as a
concept to derive partial optimality results and deﬁne ele-
mentary building blocks to construct improving mappings
for the MULTICUT and MAX-CUT problem.

b)

a)
Figure 1. Illustration of elementary mappings. a) Original multicut
x ∈ MC (solid lines) and connected region U (dashed line). b)
Result of cut mapping pδ(U )(x). c) Result of join mapping pU (x).

c)

There are two trivial improving mappings: (i) The iden-
tity mapping id : x 7→ x. It does not provide any persistency
at all, given that no variable is ﬁxed by the constraint x ∈ X
alone. (ii) The mapping p∗ : x 7→ x∗ that maps any x to a
ﬁxed optimal solution x∗ ∈ argminx∈X hθ, xi. This map-
ping obviously provides the maximal persistency, i.e. it ﬁxes
all variables, but for NP-hard problems it is generally in-
tractable to compute x∗.

We are hence interested in a middle ground: We want
to ﬁnd improving mappings that ﬁx as many variables as
possible (unlike id) but that are computable in polynomial
time (unlike p∗). This allows us to simplify the original
problem (P) by ﬁxing the persistent variables. For the MUL-
TICUT problem we can contract those edges that can be
persistently set to 0, which allows to shrink the underlying
graph. For the MAX-CUT problem, however, any value for
persistent variables can be exploited for contractions, as we
show below.

4.1. Elementary mappings

In order to construct improving mappings for the MUL-
TICUT and MAX-CUT problem, we employ the elementary
mappings deﬁned in this section.

Deﬁnition 3 (Multicut mappings). Let U ⊆ V be a set of
nodes that induce a connected component of G.

(i) The elementary cut mapping pδ(U ) is deﬁned as

pδ(U )(x) = x ∨ ✶δ(U ) .

Deﬁnition 2 ([38]). A mapping p : X → X with the prop-
erty

In other words, this means that pδ(U )(x)e = 1 for all edges
e ∈ δ(U ) and pδ(U )(x)e = xe otherwise.

hθ, p(x)i ≤ hθ, xi ∀x ∈ X

is called improving mapping.

An improving mapping p that maps some variable xi to a
ﬁxed value β provides persistency (a.k.a. partial optimality):
For each feasible element x ∈ X, applying p to x and thus
ﬁxing xi = β gives another element that is at least as good.

Lemma 1 (Persistency). Let p : X → X be an improving
mapping and β ∈ {0, 1}. If

p(x)i = β ∀x ∈ X,

then x∗

i = β in some optimal solution x∗ of (P).

(ii) The elementary join mapping pU is deﬁned as

pU (x)uv =

0,
0,

xuv,

uv ∈ E(U )
∃uv-path P such that
∀e ∈ EP :
xe = 0 or e ∈ E(U )
otherwise.

(1)




Intuitively, the elementary cut mapping pδ(U ) adds the
cut δ(U ) to the multicut deﬁned by x. The elementary join
mapping pU merges all components that intersect with U ,

6095

a)

b)

Figure 2. Illustration of symmetric difference mapping. a) Original
cut x ∈ CUT (solid lines) and cut δ(U ) (dashed orange line). b)
Result of symmetric difference mapping p△

δ(U )(x).

cf. Figure 1. To show well-deﬁnedness of the elementary
cut and join mapping rigorously, we need the following
characterization of multicuts.

Fact 1 ([9]). A set M ⊆ E is a multicut iff for every cycle
C of G it holds that |M ∩ C| 6= 1.

Lemma 2 (Well-deﬁnedness). The mappings pδ(U ) and pU
are well-deﬁned, i.e.

(i) pδ(U ) : MC → MC for any connected U ⊆ V

(ii) pU : MC → MC for any connected U ⊆ V .

The elementary mapping for the MAX-CUT problem ex-
ploits the well-known property of cuts that they are closed
under taking symmetric differences (of edges).

Fact 2 ([36]). Let x, y ∈ CUT. Then x△y ∈ CUT.

In particular, since x 7→ x△y is an involution (i.e. its
own inverse) for any cut y ∈ CUT, it holds that CUT△y =
{x△y | x ∈ CUT} = CUT. Given an instance of MAX-
CUT deﬁned by G = (V, E, θ) and a cut y ∈ CUT, this
transformation of the feasible set corresponds to switching
the signs of θe for all e ∈ E with ye = 1 and adding the

constantPe∈E θeye to the objective value. If y is optimal

for the original instance, then y△y = 0 is optimal for the
transformed instance. Hence, whenever we want to compute
persistency for xf = 1, we can transform the instance to an
equivalent one by applying the described switching for any
cut that contains f and then checking whether xf = 0 holds
persistently.

Deﬁnition 4 (Symmetric Difference Mapping). Let U ⊆ V .
The elementary symmetric difference mapping p△
δ(U ) w.r.t.
δ(U ) is deﬁned as

p△
δ(U )(x) = x△✶δ(U ) .

5. Persistency criteria

In this section, we propose subgraph-based criteria for
ﬁnding improving mappings. We provide criteria for small
connected subgraphs such as edges or triangles as well as
criteria for general connected subgraphs. In Section 6, we
present efﬁcient heuristic algorithms to check the subgraph
criteria proposed in this section.

First consider the instructive special case of a single edge
subgraph. The following criterion has been evaluated by [29]
for the MULTICUT problem.

Theorem 1 (Edge Criterion). Let f ∈ E be an edge and
U ⊆ V be connected with f ∈ δ(U ). Further, let β =
(1 − sign θf )/2. If

|θe|,

P = PMC, β = 0

(2)

θe,

P = PMC, β = 1

(3)

|θe|,

P = PCUT

(4)

θf ≥ Xe∈δ(U )\{f }
|θf | ≥ Xe∈δ(U )∩E+
|θf | ≥ Xe∈δ(U )\{f }




then x∗

f = β in some optimal solution x∗ of (P).

The criteria of Theorem 1 are proved by showing that the
mapping p : X → X that maps any x ∈ X with xf 6= β
to (pf ◦ pδ(U ))(x), pδ(U )(x) or p△
δ(U )(x), respectively, is im-
proving. Simple candidates for U in Theorem 1 are {u}
and {v} where f = uv. Checking these for every edge
f ∈ E can be done in linear time. All u-v-cuts (the cuts
that separate u from v) can be checked at once by mini-
mizing the right-hand sides of (2) – (4) via max-ﬂow tech-
niques on the weighted graph G|·| = (V, E, |θ|), respectively
G+ = (V, E+, θ) for (3). Note that the condition in (3) is
less restrictive than (2). Computing a Gomory-Hu tree [13]
of G|·| or G+ reduces the total computational effort of check-
ing the criterion for all edges f ∈ E to |V | − 1 max-ﬂow
problems.

5.1. General subgraph criteria

We give a technical lemma that allows to generalize the

persistency criterion stated in Theorem 1.

Lemma 3. Let f ∈ E and β ∈ {0, 1}. Further, let H =
(VH , EH ) be a connected subgraph of G such that f ∈ EH .
If for every y ∈ CUT(H) with yf = 1 − β, there exists
a mapping py : X → X such that for all x ∈ X whose
restriction to H agrees with y, i.e. x|EH = y, we have

In other words, this means that p△
δ(U )(x)e = 1 − xe for
all edges e ∈ δ(U ) and p△
δ(U )(x)e = xe otherwise. The
symmetric difference mapping is well-deﬁned because of
Fact 2. See Figure 2 for an illustration of p△

δ(U ).

(i) hθ, py(x)i ≤ hθ, xi

(ii) py(x)f = β,

then x∗

f = β in some optimal solution x∗.

6096

v

w

b)

a)

u

u

U

v

VH \ U

V \ VH

Figure 3. a) The conditions presented in Corollary 1 compare the
weights of inner cuts (- -) and outer cuts (- -) around the triangle
{u, v, w}. b) The conditions (9) and (10), presented in Theorem 2
and 3, compare the weights of the inner cut δ(U, VH \ U ) and the
outer cut δ(VH ) = δ(U, V \ VH ) ∪ δ(VH \ U, V \ VH ).

The lemma follows by application of py(x) whenever
x|EH = y. Consider the following special case when H is
a triangle subgraph. If the persistency criterion is satisﬁed,
then for every assignment of x|EH there is an improving
combination of elementary mappings from Section 4.1.

Corollary 1 (Triangle Criterion). Let {uw, uv, vw} ⊂ E
be a triangle. Let U ⊂ V be such that uv, uw ∈ δ(U ), and
W ⊂ V be such that uw, vw ∈ δ(W ).

(i) If

θuw + θuv ≥ Xe∈δ(U )\{uw,uv}
θuw + θvw ≥ Xe∈δ(W )\{uw,vw}

|θe|,

|θe|

(5)

(6)

holds, then x∗

uw = 0 for some optimal solution of (PCUT).

(ii) If additionally

and for all U ⊂ VH with u ∈ U and v /∈ U it holds that

Xe∈δ(U,VH \U )

θe ≥ Xe∈δ(VH )∩E+

θe,

(9)

then x∗

uv = 0 in some optimal solution x∗ of (PMC).

Note that the MULTICUT subgraph criterion stated in The-
orem 2 is different from the edge and triangle criteria when
evaluated on these special subgraphs. If H = (f, {f }) for
some edge f ∈ E, then condition (9) translates to

θf ≥ Xe∈δ(f )∩E+

θe.

If H is a triangle, i.e. H = ({u, v, w}, {uv, uw, vw}) for
some vertices u, v, w ∈ V , then condition (9) translates to

min{θuv + θuw, θuv + θvw, θuw + θvw}

≥ Xe∈δ({u,v,w})∩E+

θe.

Theorem 3 (Max-Cut Subgraph Criterion). Let H =
(VH , EH ) be a connected subgraph of G and suppose
uv ∈ EH . If for all U ⊂ VH with u ∈ U and v /∈ U it
holds that

θe

Xe∈δ(U,VH \U )
≥ min( Xe∈δ(U,V \VH )

|θe|, Xe∈δ(VH \U,V \VH )

|θe|),

(10)

(7)

then x∗

uv = 0 in some optimal solution x∗ of (PCUT).

θuw + θuv + θvw ≥ Xe∈δ({u,v,w})∩E+

θe

holds, then x∗

uw = 0 for some optimal solution of (PMC).

A straightforward choice for the cuts in Corollary 1 are
δ({u}), δ({w}), δ({v, w}) and δ({u, v}), as depicted in Fig-
ure 3 a). It is possible to ﬁnd better cuts w.r.t. costs |θ|, but
we are not aware of any more efﬁcient technique than to
explicitly compute them via max-ﬂow for every triangle (un-
like computing a Gomory-Hu tree to evaluate the single edge
criterion for all edges).

We further employ Lemma 3 to state general subgraph
criteria for the MULTICUT and MAX-CUT problem. They are
proved by showing that the mapping p : X → X, which suit-
ably applies pVH ◦ pδ(VH ), respectively p△
δ(U ), is improving.
See Figure 3 b) for a schematic illustration.

Theorem 2 (Multicut Subgraph Criterion). Let H =
(VH , EH ) be a connected subgraph of G and suppose
uv ∈ EH . If

min

y∈MC(H)

hθ, yi = 0

(8)

Note that if H is a single edge or a triangle, the subgraph
criterion stated in Theorem 3 specializes to the edge cri-
terion, respectively triangle criterion, where only the cuts
δ({u}), δ({v}), respectively δ({u}), δ({w}), δ({v, w}) and
δ({u, v}) are considered.

6. Algorithms

In this section we devise algorithms that verify, for a
given instance G = (V, E, θ) of the MULTICUT or MAX-
CUT problem, the persistency criteria presented in Section 5.
The edge and triangle criteria can be checked explicitly
for all edges, respectively triangles of G. Note that listing
all triangles of a graph can be done efﬁciently [35].

Therefore, we focus here on developing efﬁcient algo-
rithms that ﬁnd subgraphs H which qualify for the criteria
from Theorem 2 and 3. Speciﬁcally, we propose routines
that (i) check for a given connected subgraph H whether
some persistency criteria apply and (ii) ﬁnd good candidates
for H. Our method applies all subroutines repeatedly until
no more persistent edges are found.

6097

6.1. Subgraph evaluation

Let H = (VH , EH ) be a subgraph of G that we want to
check for persistency condition (9), respectively (10). Now,
for a given edge uv ∈ EH , we can determine if (9) holds
true for all U ⊂ VH with u ∈ U and v /∈ U by minimizing
the left-hand side w.r.t. U . In contrast, for (10), we also need
to simultaneously maximize the right-hand side, since it de-
pends on U as well. Obviously, minimizing the left-hand
side (of either (9) or (10)) means ﬁnding a minimum u-v-cut
w.r.t. θ. Further, since the right-hand sides are non-negative,
the minimum u-v-cut must have non-negative weight. How-
ever, in general the weights θ on H may be negative, which
renders both optimization problems hard in general.

For this reason, we simplify the problem by restriction to
suitable subgraphs H that satisfy Assumption 1 below. We
shall see subsequently how to utilize this condition. In order
to state Assumption 1 rigorously, we need to brieﬂy recap
the following integer linear programming (ILP) formulation
of the MULTICUT problem.

The MULTICUT problem can be stated equivalently
to (PMC) as ﬁnding the minimum weight edge set w.r.t. |θ|
that covers every cycle with exactly one negative edge, the
so-called erroneous or conﬂicted cycles [11, 29]. The corre-
sponding ILP formulation reads

Note that Assumption 1 i) also implies a trivial MAX-CUT
solution, since CUT ⊆ MC. Assumption 1 has the following
expedient consequence.

Lemma 4. Let H = (VH , EH , θ) be a weighted graph that
satisﬁes Assumption 1. Then the reduced costs ˜θ deﬁned by
(13) satisfy ˜θe ≥ 0 for all e ∈ EH and for any cut δ(U ) of
H it holds that

0 ≤ Xe∈δ(U )

˜θe ≤ Xe∈δ(U )

θe.

(14)

Our method exploits Assumption 1 and Lemma 4 as fol-
lows. First, we compute a heuristic solution to the packing
dual (12) by the fast Iterative Cycle Packing (ICP) algorithm
from [29]. Then, if the computed dual bound shows that H
has a trivial MULTICUT solution (and thus the dual solution
is optimal), we can compute lower bounds to the left-hand
side of (9) and (10) by applying max-ﬂow techniques on H
with capacities ˜θ.

In the case of the MULTICUT problem, the right-hand side
of (9) is constant w.r.t. U so it sufﬁces to compute a Gomory-
Hu tree on H. In the case of the MAX-CUT problem, however,
this is not sufﬁcient, since the right-hand side of (10) also
depends on U . Here, after replacing θe by ˜θe for all e ∈ EH ,
we need to solve the following min max problem

min

ˆx

h|θ|, ˆxi + Xe∈E−
s.t. Xe∈EC

ˆxe ≥ 1,

ˆx ∈ {0, 1}E.

θe

(11)

∀ conﬂicted C

The associated packing dual is the linear program

θe

(12)

λC ≤ |θe|

∀e ∈ E,

max

λ

h✶, λi + Xe∈E−
s.t. XC:e∈EC

λ ≥ 0.

˜θe

min
U ⊂VH :

u∈U,v /∈U  Xe∈δ(U,VH \U )
− min( Xe∈δ(U,V \VH )
= − Xe∈δ(VH )
+ max( Xe∈δ(U,V \VH )

|θe| + min
U ⊂VH :

|θe|, Xe∈δ(VH \U,V \VH )
u∈U,v /∈U  Xe∈δ(U,VH \U )
|θe|, Xe∈δ(VH \U,V \VH )

˜θe

|θe|)!

|θe|)!.

(15)

For any dual feasible λ ≥ 0, the associated reduced costs for
the primal problem (11) are given by

˜θe =(cid:18)|θe| − XC:e∈EC

λC(cid:19) sign θe

∀e ∈ E.

(13)

Assumption 1. Let H = (VH , EH , θ) be a weighted graph
such that

i) The graph H has a trivial optimal MULTICUT solution

y∗ = 0, i.e. miny∈MC(H)hθ, yi = 0 = hθ, y∗i.

ii) An optimal packing dual solution λ∗ that corresponds

to y∗ for the MULTICUT problem on H is at hand.

As solving this problem exactly appears to be difﬁcult,
we propose to solve a relaxation that is obtained by replacing
the inner max term with

max
α∈[0,1]

α Xe∈δ(U,V \VH )

|θe| + (1 − α) Xe∈δ(VH \U,V \VH )

|θe|

and then swapping the order of min and max. This yields

(15) ≥ − Xe∈δ(VH )
α Xe∈δ(U,V \VH )

|θe| + max
α∈[0,1]

˜θe+

min
U ⊂VH :

u∈U,v /∈U  Xe∈δ(U,VH \U )
|θe|!.
|θe| + (1 − α) Xe∈δ(VH \U,V \VH )

6098

The right-hand side is the maximization of a concave, non-
smooth function on the unit interval, which can be solved
efﬁciently with the bisection method. In every iteration, the
inner minimization problem needs to be solved for a ﬁxed
α ∈ [0, 1], which can be formulated again as a max-ﬂow
problem.

For solving the max-ﬂow problems that occur in our
method, we use Boykov-Kolmogorov’s algorithm with
reused search trees [8, 25]. For computing Gomory-Hu
trees, we use a parallelized implementation of Gusﬁeld’s
algorithm [15, 10].

6.2. Finding candidate subgraphs

To efﬁciently ﬁnd good candidate subgraphs, we employ
the following strategy. First, we compute a primal feasible
solution ¯x ∈ X by a fast heuristic method such as greedy
edge contraction algorithms [20, 23]. If the heuristic solu-
tion ¯x is reasonably good, then many components deﬁned
by ¯x should be close to optimal. Thus, in the case of the
MULTICUT problem, the components may already serve as
candidate subgraphs. In the case of the MAX-CUT problem,
we use ¯x to transform the instance by the switching operation
described in Section 4.

Then, we compute a heuristic packing dual solution ¯λ
by ICP for the entire graph G = (V, E, θ). The candidate
subgraphs are determined as the connected components of
the positive residual graph (V, {e ∈ E | ˜θe > 0}), where ˜θ
is deﬁned as before in (13). The intuition behind this strat-
egy is that, by construction, the edges within the subgraphs
have relatively higher weight than the outgoing edges. This
facilitates the application of the conditions (9) and (10).

Reduced cost ﬁxing.
Further, whenever both a primal
solution and dual solution are available, we use the following
technique known as reduced cost ﬁxing [4] to determine
additional persistent variables. Let γ = hθ, ¯xi − h✶, ¯λi −

Pe∈E− θe denote the duality gap of the primal-dual solution

pair and suppose γ < ˜θf for some f ∈ E. Then, it follows
that xf = 1 cannot be optimal and thus we can ﬁx xf = 0.

7. Experiments

In order to study the effectiveness of our methods, we
evaluate them on a collection of more than 200 instances
from the literature. The size of the instances ranges from
a few hundred to hundreds of millions of variables (edges).
We measure and compare the average relative size reduction
of test instances that is obtained by applying our algorithms.

Instances.
For the MULTICUT problem we use segmen-
tation and clustering instances from the OpenGM bench-
mark [21] as well as biomedical segmentation instances
provided by the authors of [5] and [33]. The dataset Image
Segmentation contains planar graphs that are constructed

Table 1. The table gathers for each data set the number of instances
(#I), the graph sizes and instance type (P).

Data set

#I

|V |

|E|

Image Segmentation
Knott-3D-150
Knott-3D-300
Knott-3D-450
Knott-3D-550
Modularity Clustering

156–3764
572–972

100
8
8 3846–5896
8
8
6

15k–17k
27k–31k
34–115

439–10970
3381–5656

23k–36k
94k–107k
173k–195k
561–6555

P

PMC
PMC
PMC
PMC
PMC
PMC

CREMI-small
CREMI-large

20k–35k

3
3 430k–620k

170k–235k
PMC
3.2M–4.1M PMC

Fruit-Fly Level 1–4
Fruit-Fly Global

Ising Chain
2D Torus
3D Torus

Deconvolution
Super Resolution
Texture Restoration

4
1

30
9
9

2
2
4

5M–11M 28M–72M PMC
PMC

650M

90M

100–300
100–400
125–343

4950–44850 PCUT
PCUT
PCUT

200–800
375–1029

1001
5247

7k–22k

11k–34k
15k–25k
59k–195k

PCUT
PCUT
PCUT

Table 2. For each dataset the table reports the average fraction of
remaining nodes and edges after applying our method, respectively
the method from [29] (lower is better). †Results for Fruit-Fly
Global are without ICP-based candidate subgraphs.

Our

[29]

Data set

|V |

|E|

|V |

|E|

Image Seg.
Knott-3D-150
Knott-3D-300
Knott-3D-450
Knott-3D-550
Mod. Clustering

CREMI-small
CREMI-large

9.7%

27.7% 27.4% 63.7% 62.7%
9.6% 75.2% 88.3%
54.8% 61.6% 76.7% 91.6%
66.9% 77.6% 77.6% 92.4%
67.8% 79.0% 77.8% 92.6%
88.7% 80.6% 92.0% 85.1%

33.8% 31.9% 76.6% 75.3%
44.0% 44.2% 83.7% 86.6%

Fruit-Fly Level 1–4
Fruit-Fly Global†

8.7%

9.6% 24.6% 27.9%
56.3% 51.8% 77.9% 74.5%

from superpixel adjacencies of photographs. The Knott-3D
data sets contains non-planar graph arising from volume
images acquired by electron microscopy. The set Modular-
ity Clustering contains complete graphs constructed from
clustering problems on small social networks. The CREMI
data sets contain supervoxel adjacency graphs obtained from
volume image scans of neural tissue. The Fruit-Fly instances
were generated from volume image scans of fruit ﬂy brain
matter. The global problem is the largest instance in this
study with roughly 650 million variables. It represents the
current limit of what can be tackled by state-of-the-art local
search algorithms. The instances Level 1–4 are progres-
sively simpliﬁed versions of the global problem obtained via
block-wise domain decomposition [33].

6099

|

E

|

%

100
80

60

40

20

0

Image Seg.

CREMI-small

∅

[2]

[29]

Edge △ Greedy

ICP

Figure 4. The ﬁgure shows the average fraction of remaining vari-
ables after shrinking the instance with progressively more expen-
sive persistency criteria. The criteria added are from left to right:
none [∅], connected components of G+ [2], single node cuts [29],
edge subgraphs [Edge], triangle subgraphs [△], greedy subgraphs
[Greedy], ICP candidate subgraphs and reduced cost ﬁxing [ICP].

For the MAX-CUT problem we use two different types
of instances. (i) The datasets Ising Chain, 2D Torus and
3D Torus contain instances that stem from applications in
statistical physics [30]. The instances in Ising Chain assume
a linear order on the nodes. For any pair of nodes there
is an edge with an associated weight. The absolute values
of the weights decrease exponentially with the distance of
the nodes in the linear order. The instances in 2D Torus
and 3D Torus are deﬁned on toroidal grid graphs in two,
resp. three dimensions with Gaussian distributed weights.
(ii) The datasets Deconvolution, Super Resolution and Tex-
ture Restoration contain QPBO instances originating from
image processing applications [34, 43] that are converted
to our formulation of the MAX-CUT problem. The transfor-
mation introduces an additional node that is connected with
all other nodes. A cut (uncut) edge to the additional node
signiﬁes label 0 (resp. 1). The instance size statistics for all
data sets are summarized in Table 1.

Results.
In Table 2, we report for the MULTICUT instances
the average graph sizes after shrinking the instances with
our algorithms from Section 6. In Figure 4, the contribu-
tions of the individual persistency criteria are separated and
compared. It can be seen from Table 2 and Figure 4 that our
criteria enable ﬁnding substantially more persistent variables
than the prior work [2, 29]. In relation to the graph sizes
after shrinking with the baseline [29], our method achieves
an additional size reduction of about 30–60% for the large
CREMI and Fruit-Fly instances. This shows that our algo-
rithms ﬁnd persistent variable assignments that are harder to
detect than with the criteria from prior work.

In Table 3 we report for the MAX-CUT instances the av-
erage graph size reduction on each dataset. For the QPBO
instances we compare to the QPBO method [34]. For the
original MAX-CUT instances we are unaware of any baseline
method and the QPBO method is not applicable. In Figure 5
we compare the contribution of the different subgraph cri-
teria. It can be seen that our method solves all Ising Chain

Table 3. For each dataset, the table reports the average fraction of
remaining nodes and edges after applying our method, respectively
the QPBO method [34] (lower is better). Note that the latter is not
applicable to original MAX-CUT instances due to symmetries.

Our

[34]

|V |

|E|

0.0%

0.0%
23.6% 27.9%
94.8% 98.1%

|V |

n/a
n/a
n/a

|E|

n/a
n/a
n/a

61.0% 56.5% 61.0% 56.5%
0.1%
98.4% 98.5% 58.8% 57.3%

0.2%

0.0%

0.0%

2D Torus

Super Res.

Data set

Ising Chain
2D Torus
3D Torus

Deconvolution
Super Resolution
Texture Restoration

|

E

|

%

100
80
60
40
20
0

∅

Edge

△

ICP

Figure 5. The ﬁgure shows the average fraction of remaining vari-
ables after shrinking the instance with progressively more expensive
persistency criteria. The criteria added are from left to right: none
[∅], edge subgraphs [Edge], triangle subgraphs [△], ICP candidate
subgraphs and reduced cost ﬁxing [ICP].

instances to optimality, which is facilitated by their partic-
ular distribution of the weights. On 2D Torus we achieve
substantial size reductions and on the denser 3D Torus in-
stances we ﬁnd few persistencies. Our results on the QPBO
instances are on a par with [34] for Deconvolution and Super
Resolution while our method is less effective for Texture
Restoration.

8. Conclusion

We have presented combinatorial persistency criteria for
the MULTICUT and MAX-CUT problem. Moreover, we have
devised efﬁcient algorithms to check our criteria. For MUL-
TICUT our method achieves a substantial improvement over
prior work when evaluated on common benchmarks as well
as practical instances. For MAX-CUT we are, to the best of
our knowledge, the ﬁrst to propose an algorithm that com-
putes persistent variable assignments for the general problem.
For the special case of QPBO problems, our method matches
the performance of prior work on some instances. Our results
demonstrate the feasibility of computing persistent variable
assignments for NP-hard graph cut problems in practice. Be-
sides acquiring partial optimality guarantees, our approach is
a helpful tool for shrinking problem sizes and thus essential
toward identifying globally optimal solutions.

6100

References

[1] Warren P. Adams, Julie Bowers Lassiter, and Hanif D. Sherali.
Persistency in 0-1 polynomial programming. Mathematics of
Operations Research, 23(2):359–389, 1998.

[2] Amir Alush and Jacob Goldberger. Ensemble segmenta-
tion using efﬁcient integer linear programming. TPAMI,
34(10):1966–1977, 2012.

[3] Bjoern Andres, J¨org H. Kappes, Thorsten Beier, Ullrich
K¨othe, and Fred A. Hamprecht. Probabilistic image seg-
mentation with closedness constraints. In ICCV, 2011.

[4] Egon Balas and Clarence H. Martin. Pivot and complement-
a heuristic for 0-1 programming. Management Science,
26(1):86–96, 1980.

[5] Thorsten Beier, Constantin Pape, Nasim Rahaman, Timo
Prange, Stuart Berg, Davi D. Bock, Albert Cardona, Gra-
ham W. Knott, Stephen M. Plaza, Louis K. Scheffer, Ullrich
Koethe, Anna Kreshuk, and Fred A. Hamprecht. Multicut
brings automated neurite segmentation closer to human per-
formance. Nature Methods, 14(2):101–102, 2017.

[6] Endre Boros and Peter L. Hammer. Pseudo-boolean opti-
mization. Discrete Applied Mathematics, 123(13):155 – 225,
2002.

[7] Endre Boros, Peter L. Hammer, Richard Sun, and Gabriel
Tavares. A max-ﬂow approach to improved lower bounds for
quadratic unconstrained binary optimization (qubo). Discrete
Optimization, 5(2):501 – 529, 2008. In Memory of George B.
Dantzig.

[8] Yuri Boykov and Vladimir Kolmogorov. An experimental
comparison of min-cut/max-ﬂow algorithms for energy mini-
mization in vision. TPAMI, 26(9):1124–1137, 2004.

[9] Sunil Chopra and M.R. Rao. The partition problem. Mathe-

matical Programming, 59(1–3):87–115, 1993.

[10] Jaime Cohen, Luiz A. Rodrigues, Fabiano Silva, Renato
Carmo, Andr´e L. P. Guedes, and Elias P. Duarte. Parallel im-
plementations of gusﬁeld’s cut tree algorithm. In Algorithms
and Architectures for Parallel Processing, pages 258–269,
2011.

[11] Erik D. Demaine, Dotan Emanuel, Amos Fiat, and Nicole
Immorlica. Correlation clustering in general weighted graphs.
Theoretical Computer Science, 361(2–3):172–187, 2006.

[12] Johan Desmet, Marc De Maeyer, Bart Hazes, and Ignace
Lasters. The dead-end elimination theorem and its use in
protein side-chain positioning. Nature, 356(6369):539, 1992.
[13] R. E. Gomory and T. C. Hu. Multi-Terminal Network Flows.
Journal of the Society for Industrial and Applied Mathematics,
9(4):551–570, 1961.

[14] Igor Gridchyn and Vladimir Kolmogorov. Potts model, para-
metric maxﬂow and k-submodular functions. In ICCV, 2013.
[15] Dan Gusﬁeld. Very simple methods for all pairs network ﬂow

analysis. SIAM J. Comput., 19(1):143–155, 1990.

[16] Peter L. Hammer, Pierre Hansen, and Bruno Simeone. Roof
duality, complementation and persistency in quadratic 0–1
optimization. Mathematical Programming, 28(2):121–155,
1984.

[17] Monika Henzinger, Alexander Noe, Christian Schulz, and
Darren Strash. Practical minimum cut algorithms. In Proceed-

ings of the Twentieth Workshop on Algorithm Engineering
and Experiments (ALENEX), pages 48–61. SIAM, 2018.

[18] Eldar Insafutdinov, Leonid Pishchulin, Bjoern Andres,
Mykhaylo Andriluka, and Bernt Schiele. Deepercut: A
deeper, stronger, and faster multi-person pose estimation
model. In ECCV, pages 34–50, 2016.

[19] Fredrik Kahl and Petter Strandmark. Generalized roof duality.
Discrete Applied Mathematics, 160(16-17):2419–2434, 2012.
[20] Sera Kahruman-Anderoglu, Elif Kolotoglu, Sergiy Butenko,
and Illya V. Hicks. On greedy construction heuristics for the
MAX-CUT problem. International Journal of Computational
Science and Engineering (IJCSE), 3(3):211–218, 2007.

[21] J¨org H. Kappes, Bj¨orn Andres, Fred A. Hamprecht, Christoph
Schn¨orr, Sebastian Nowozin, Dhruv Batra, Sungwoong
Kim, Bernhard X. Kausler, Thorben Kr¨oger, Jan Lellmann,
Nikos Komodakis, Bogdan Savchynskyy, and Carsten Rother.
A comparative study of modern inference techniques for
structured discrete energy minimization problems.
IJCV,
115(2):155–184, 2015.

[22] Margret Keuper, Bjoern Andres, and Thomas Brox. Motion
trajectory segmentation via minimum cost multicuts. In ICCV,
2015.

[23] Margret Keuper, Evgeny Levinkov, Nicolas Bonneel, Guil-
laume Lavou´e, Thomas Brox, and Bjoern Andres. Efﬁcient
decomposition of image and mesh graphs by lifted multicuts.
In ICCV, 2015.

[24] P. Kohli, A. Shekhovtsov, C. Rother, V. Kolmogorov, and P.
Torr. On partial optimality in multi-label MRFs. In ICML,
2008.

[25] Pushmeet Kohli and Philip H. S. Torr. Effciently solving
dynamic markov random ﬁelds using graph cuts. In ICCV,
pages 922–929, 2005.

[26] Vladimir Kolmogorov.

Generalized roof duality and
bisubmodular functions. Discrete Applied Mathematics,
160(4):416 – 426, 2012.

[27] Ivan Kovtun. Partial optimal labeling search for a np-hard
subclass of (max,+) problems. In Bernd Michaelis and Gerald
Krell, editors, Pattern Recognition, pages 402–409, 2003.

[28] Ivan Kovtun. Sufﬁcient condition for partial optimality for
(max,+)-labeling problems and its usage. Control systems
and machines, (2):35–42, 2011.

[29] Jan-Hendrik Lange, Andreas Karrenbauer, and Bjoern An-
dres. Partial optimality and fast lower bounds for weighted
correlation clustering. In ICML, 2018.

[30] Frauke Liers, Michael J¨unger, Gerhard Reinelt, and Giovanni
Rinaldi. Computing Exact Ground States of Hard Ising Spin
Glass Problems by Branch-and-Cut, chapter 4, pages 47–69.
Wiley-Blackwell, 2005.

[31] George L Nemhauser and Leslie Earl Trotter. Vertex pack-
ings: structural properties and algorithms. Mathematical
Programming, 8(1):232–248, 1975.

[32] M. Padberg and G. Rinaldi. An efﬁcient algorithm for the
minimum capacity cut problem. Mathematical Programming,
47(1):19–36, May 1990.

[33] Constantin Pape, Thorsten Beier, Peter Li, Viren Jain, Davi D.
Bock, and Anna Kreshuk. Solving large multicut problems
for connectomics via domain decomposition. In ICCV Work-
shops, 2017.

6101

[34] Carsten Rother, Vladimir Kolmogorov, Victor S. Lempitsky,
and Martin Szummer. Optimizing binary MRFs via extended
roof duality. In CVPR, 2007.

[35] Thomas Schank and Dorothea Wagner. Finding, counting
and listing all triangles in large graphs, an experimental study.
In Experimental and Efﬁcient Algorithms, 4th International
Workshop, (WEA), Proceedings, pages 606–609, 2005.

[36] Alexander Schrijver. Combinatorial Optimization. Springer,

2003.

[37] Alexander Shekhovtsov. Exact and Partial Energy Minimiza-
tion in Computer Vision. PhD Thesis CTU–CMP–2013–24,
Center for Machine Perception, K13133 FEE Czech Techni-
cal University in Prague, Prague, Czech Republic, 2013.

[38] Alexander Shekhovtsov. Maximum persistency in energy

minimization. In CVPR, 2014.

[39] Alexander Shekhovtsov. Higher order maximum persistency
and comparison theorems. Computer vision and image under-
standing, 143(C):54–79, 2 2016.

[40] A. Shekhovtsov, P. Swoboda, and B. Savchynskyy. Maximum
persistency via iterative relaxed inference with graphical mod-
els. TPAMI, PP(99), 2017.

[41] Paul Swoboda, Bogdan Savchynskyy, J¨org H. Kappes, and
Christoph Schn¨orr. Partial optimality via iterative pruning
for the Potts model. In Scale Space and Variational Methods
(SSVM), 2013.

[42] Paul Swoboda, Alexander Shekhovtsov, J¨org H. Kappes,
Christoph Schn¨orr, and Bogdan Savchynskyy. Partial opti-
mality by pruning for MAP-inference with general graphical
models. TPAMI, 38(7):1370–1382, 7 2016.

[43] Tanmay Verma and Dhruv Batra. Maxﬂow revisited: An
empirical comparison of maxﬂow algorithms for dense vision
problems. In BMVC, 2012.

[44] Chen Wang and Ramin Zabih. Relaxation-based preprocess-
ing techniques for Markov Random Field inference. In CVPR,
2016.

[45] Di Wang and Robert Kleinberg. Analyzing quadratic uncon-
strained binary optimization problems via multicommodity
ﬂows. Discrete Applied Mathematics, 157(18):3746 – 3753,
2009.

6102

