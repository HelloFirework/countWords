Self-supervised Spatio-temporal Representation Learning for Videos

by Predicting Motion and Appearance Statistics

Jiangliu Wang1†

Jianbo Jiao2†

Linchao Bao3∗ Shengfeng He4 Yunhui Liu1 Wei Liu3∗

1The Chinese University of Hong Kong

2University of Oxford

3Tencent AI Lab 4South China University of Technology

Abstract

We address the problem of video representation learning
without human-annotated labels. While previous efforts ad-
dress the problem by designing novel self-supervised tasks
using video data, the learned features are merely on a
frame-by-frame basis, which are not applicable to many
video analytic tasks where spatio-temporal features are pre-
vailing. In this paper we propose a novel self-supervised
approach to learn spatio-temporal features for video repre-
sentation. Inspired by the success of two-stream approaches
in video classiﬁcation, we propose to learn visual features
by regressing both motion and appearance statistics along
spatial and temporal dimensions, given only the input video
data.
Speciﬁcally, we extract statistical concepts (fast-
motion region and the corresponding dominant direction,
spatio-temporal color diversity, dominant color, etc.) from
simple patterns in both spatial and temporal domains. Un-
like prior puzzles that are even hard for humans to solve,
the proposed approach is consistent with human inherent
visual habits and therefore easy to answer. We conduct ex-
tensive experiments with C3D to validate the effectiveness
of our proposed approach. The experiments show that our
approach can signiﬁcantly improve the performance of C3D
when applied to video classiﬁcation tasks. Code is available
at https://github.com/laura-wang/video repres mas.

1. Introduction

Learning powerful spatio-temporal representations is the
most fundamental deep learning problem for many video
understanding tasks such as action recognition [4, 17, 26],
action proposal and localization [5, 33, 34], video caption-
ing [40, 42], etc. Great progresses have been made by train-
ing expressive networks with massive human-annotated
video data [37, 38]. However, annotating video data is very
laborious and expensive, which makes the learning from un-

†Work done during an internship at Tencent AI Lab.
∗Corresponding authors.

1

4

7

2

5

8

3

6

9

Motion

(5, (cid:1))

Appear.

(2, Blue)

Appear.

(4, Green)

Figure 1. The main idea of the proposed approach. Given a
video sequence, we design a novel task to predict several nu-
merical labels derived from motion and appearance statistics for
spatio-temporal representation learning, in a self-supervised man-
ner. Each video frame is ﬁrst divided into several spatial regions
using different partitioning patterns like the grid shown above.
Then the derived statistical labels, such as the region with the
largest motion and its direction (the red patch), the most diverged
region in appearance and its dominant color (the yellow patch),
and the most stable region in appearance and its dominant color
(the blue patch), are employed as supervision during the learning.

labeled video data important and interesting.

Recently, several approaches [27, 11, 24, 12] have
emerged to learn transferable representations for video
recognition tasks with unlabeled video data. In these ap-
proaches, a CNN is ﬁrst pre-trained on unlabeled video data
using novel self-supervised tasks, where supervision sig-
nals can be easily derived from input data without human
labors, such as solving puzzles with perturbed video frame
orders [27, 11, 24] or predicting ﬂow ﬁelds or disparity
maps obtained with other computational approaches [12].
Then the learned representations can be directly applied to
other video tasks as features, or be employed as initializa-
tion during succeeding supervised learning. Unfortunately,
although these work demonstrated the effectiveness of self-
supervised representation learning with unlabeled videos,
their approaches are only applicable to a CNN that accepts
one or two frames as inputs, which is not a recommended
way for tackling video tasks. In most video understanding
tasks, spatio-temporal features that can capture information
of both appearances and motions are proved to be vital in
many recent studies [2, 35, 37, 4, 38].

In order to extract spatio-temporal features, a network ar-

4006

chitecture that can accept multiple frames as inputs and per-
form operations along both spatial and temporal dimensions
is needed. For example, the popular C3D network [37],
which accepts 16 frames as inputs and employs 3D con-
volutions along both spatial and temporal dimensions to ex-
tract features, is becoming more and more popular for many
video tasks [33, 34, 22, 25, 42]. Vondrick et al. [39] pro-
posed to address the representation learning by C3D-based
networks, while motion and appearance are not explicitly
incorporated thus the performance is not satisfactory when
transferring the learned features to other video tasks.

In this paper, we propose a novel self-supervised learn-
ing approach to learn spatio-temporal video representations
by predicting motion and appearance statistics in unlabeled
videos. The idea is inspired by Giese and Poggio’s work
on human visual system [14], in which the representation
of motion is found to be based on a set of learned patterns.
These patterns are encoded as sequences of snapshots of
body shapes by neurons in the form pathway, and by se-
quences of complex optic ﬂow patterns in the motion path-
way.
In our work, the two pathways are the appearance
branch and motion branch respectively. Besides, the ab-
stract statistical concepts are also inspired by the biologi-
cal hierarchical perception mechanism. The main idea of
our approach is shown in Figure 1. We design several spa-
tial partitioning patterns to encode each spatial location and
its motion and appearance statistics over multiple frames,
and use the encoded vectors as supervision signals to train
the spatio-temporal representation network. The novel ob-
jectives are simple to learn and informative for the motion
and appearance distributions in video, e.g., the spatial lo-
cations of the most dominant motions and their directions,
the most consistent and the most diverse colors over a cer-
tain temporal cube, etc. We conduct extensive experiments
with C3D network to validate the effectiveness of the pro-
posed approach. We show that, compared with training
from scratch, pre-training C3D without labels using our
proposed approach gives a large boost to the performance
of the action recognition task (e.g., 45.4% v.s. 61.2% on
UCF101). By transferring the learned representations to
other video tasks on smaller datasets, we demonstrate sig-
niﬁcant performance gains on various tasks like dynamic
scene recognition, action similarity labeling, etc.

2. Related work

Self-supervised representation learning is proposed to
leverage the huge amounts of unlabeled data to learn useful
representations for various problems, for example, image
classiﬁcation, object detection, video recognition, etc.
It
has been proved that lots of deep learning methods can ben-
eﬁt from pre-trained models on large labeled datasets, e.g.,
ImageNet [7] for image tasks and Kinetics [19] or Sports-
1M [18] for video tasks. The basic motivation behind self-

supervised representation learning is to replace the expen-
sive labeled data with “free” unlabeled data.

A common way to achieve self-supervised learning is
to derive easy-to-obtain supervision signals without hu-
man annotations, to encourage the learning of useful fea-
tures for regular tasks. Various novel tasks are proposed
to learn image representations from unlabeled image data,
e.g., re-ordering perturbed image patches [9, 29], coloriz-
ing grayscale images [45], inpainting missing regions [32],
counting virtual primitives [30], classifying image rotations
[13], predicting image labels obtained using a clustering al-
gorithm [3], etc. There are also studies that try to learn im-
age representations from unlabeled video data. Wang and
Gupta [43] proposed to derive supervision labels from un-
labeled videos using traditional tracking algorithms. Pathak
et al. [31] instead obtained labels from videos using con-
ventional motion segmentation algorithms.

Recent studies leveraging video data try to learn trans-
ferable representations for video tasks. Misra et al. [27]
designed a binary classiﬁcation task and asked the CNN to
predict whether the video input is in right order or not. Fer-
nando et al. [11] and Lee et al. [24] also designed tasks
based on video frame orders. Gan et al. [12] proposed
a geometry-guided network that force the CNN to predict
ﬂow ﬁelds or disparity maps between two input frames. Al-
though these work demonstrated the effectiveness of self-
supervised representation learning with unlabeled videos
and showed impressive performances when transferring the
learned features to video recognition tasks, their approaches
are only applicable to a CNN that accepts one or two frames
as inputs and cannot be applied to network architectures
that are suitable for spatio-temporal representations. The
most related work to ours are Vondrick et al. [39] and Kim
et al. [20]. Vondrick et al. [39] proposed a GAN model
for videos with a spatio-temporal 3D convolutional archi-
tecture, which can be employed as a self-supervised ap-
proach for video representation learning. Kim et al. [20]
proposed to learn spatio-temporal representations with un-
labeled video data, by solving space-time cubic puzzles,
which is a straightforward extension of the 2D puzzles [29].

3. Our Approach

We design a novel task for self-supervised video repre-
sentation learning by predicting the motion and appearance
statistics in a video sequence. The task is bio-inspired and
consistent with human visual habits [14] to capture high-
level concepts of videos. In this section, we ﬁrst illustrate
the statistical concepts and motivations to design the task
(Sec. 3.1). Next, we formally deﬁne the proposed statisti-
cal labels (Sec. 3.2 and 3.3). Finally, we present the whole
learning framework when applying the self-supervised task
to the C3D [37] network (Sec. 3.4).

4007

3.1. Statistical Concepts

Given a video clip, humans usually ﬁrst notice the mov-
ing proportion of the visual ﬁeld [14]. By observing the
foreground motion and the background appearance, we can
easily tell the motion class based on prior knowledge. In-
spired by human visual system, we break the process of un-
derstanding videos into several questions and encourage a
CNN to answer them accordingly: (1) Where is the largest
motion in the video? (2) What is the dominant direction of
the largest motion? (3) Where is the largest color diversity
and what is its dominant color? (4) Where is the small-
est color diversity, i.e., the potential background of a scene
and what is its dominant color? The approach to quantify
these questions into annotation-free training labels will be
described in details in the following sections. Here, we in-
troduce the statistical concepts for motion and appearance.
Figure 2 illustrates an example of a three-frame video
clip with two moving objects (blue circle and yellow trian-
gle). A typical video clip normally consists of much more
frames. We here instead use the three-frame clip for better
understanding of the key ideas. To accurately represent the
location and quantify “where”, each frame is divided into
4-by-4 blocks and each block is assigned to a number in an
ascending order. The blue circle moves from block four to
block seven, and the yellow triangle moves from block 12
to block 11. Comparing the moving distance, we can eas-
ily tell that the motion of the blue circle is larger than the
motion of the yellow triangle. And the largest motion lies
in block seven since it contains moving-in motion between
frame one and two, and moving-out motion between frame
two and three. As for the question “what is the dominant
direction of the largest motion?”, it can be easily observed
from Figure 2 that the blue circle is moving towards lower-
left. To quantify the directions, the full angle 360◦ is di-
vided into eight angle pieces, with each piece covering a
45◦ motion direction range. And similar to location quan-
tiﬁcation, each angle piece is assigned to a number in an
ascending order counterclockwise. The corresponding an-
gle piece number of “lower-left” is ﬁve.

For the appearance statistics, the largest spatio-temporal
color diversity area is also block seven, as it changes from
the background color to the circle color. The dominant color
is the same as the moving circle color, i.e., blue. As for the
smallest color diversity location, most of the blocks stay the
same and the background color is white.

Keeping the above concepts and motivation in mind, we
next present the proposed novel self-supervised approach.
We assume that by training a spatio-temporal CNN to pre-
dict the motion and appearance statistics mentioned above,
better spatio-temporal representations can be learned, by
which the video understanding tasks could be beneﬁted
consequentely. Speciﬁcally, we design a novel regres-
sion task to predict a group of numbers related to motion

3

7

11

15

4

8

12

16

1

3
3

7

11

15

2

4
4

8

12

16

Ti m e

1

5

9

13

1
1

3
3

7

11

15

2
2

4
4

8

12

16

2
2

6

10

14

u

2

3

6

7

4

5

v

1

8

Figure 2. A simple illustration of statistical concepts in a three-
frame video clip. See explanations in Sec. 3.1 for more details.

and appearance statistics, such that by correctly predicting
them, the following queries could be roughly derived: the
largest motion location and the dominant motion direction
in the video, the most consistent colors over the frames and
their spatial locations, and the most diverse colors over the
frames and their spatial locations.

3.2. Motion Statistics

We use optical ﬂow computed by classic coarse-to-ﬁne
algorithms [1] to derive the motion statistical labels to be
predicted in our task. Optical ﬂow is a motion representa-
tion feature that is commonly used in many video recogni-
tion methods. For example, the classic two-stream network
[35] and the recent I3D network [4], both of which use stack
of optical ﬂow as their inputs for action recognition tasks.
However, optical ﬂow based methods are sensitive to cam-
era motion, since they represent the absolute motion [4, 41].
To suppress the inﬂuence of camera motion, we instead seek
a more robust feature, motion boundary [6], to capture the
video motion information.

∂x , uy = ∂u

Motion Boundary. Denote optical ﬂow horizontal com-
ponent and vertical component as u and v, respectively.
Motion boundaries are calculated by computing x- and y-
∂y , vx = ∂v
derivatives of u and v, i.e., ux = ∂u
∂x ,
vy = ∂v
∂y . As motion boundaries capture changes in the ﬂow
ﬁeld, constant or smoothly varied motion, such as motion
caused by camera view change, will be cancelled out. Only
motion boundaries information is kept, as shown in Figure
3. Speciﬁcally, for an N -frame video clip, (N − 1) ∗ 2
motion boundaries are computed. Diverse video motion
information can be encoded into two summarized motion
boundaries by summing up all these (N − 1) sparse motion
boundaries of each component as follows:

Mu = (

N −1

X

i=1

ui
x,

N −1

X

i=1

ui

y), Mv = (

N −1

X

i=1

vi
x,

N −1

X

i=1

vi
y),

(1)

where Mu denotes the motion boundaries on horizontal op-
tical ﬂow u, and Mv denotes the motion boundaries on ver-
tical optical ﬂow v. Figure 3 shows the visualization of the
two sum-up motion boundaries images.

4008

RGB Video Clip

Optical Flow

Motion Boundaries

on u_flow

on v_flow

…

…

…

Sum on v_flow

Sum on u_flow

e
m
T

i

Optical Flow

on v_flow

on u_flow

Motion Boundaries

Figure 3. Motion boundaries computation. For a given input video clip, we ﬁrst extract optical ﬂow across each frame. For each optical
ﬂow, two motion boundaries are obtained by computing gradients separately on the horizontal and vertical components of the optical ﬂow.
The ﬁnal sum-up motion boundaries are obtained by aggregating the motion boundaries on u ﬂow and v ﬂow of each frame separately.

Spatial-aware Motion Statistical Labels.
In this section,
we describe how to design the spatial-aware motion statis-
tical labels to be predicted by our self-supervised task: 1)
where is the largest motion; 2) what is the dominant orien-
tation of the largest motion, based on motion boundaries.
Given a video clip, we ﬁrst divide it into several blocks us-
ing simple patterns. Although the pattern design is an inter-
esting problem to be investigated, here, we introduce three
simple yet effective patterns as shown in Figure 4. For each
video block, we assign a number to it for representing its lo-
cation. Then we compute Mu and Mv as described above.
The motion magnitude and orientation of each pixel can be
obtained by casting motion boundaries Mu and Mv from
the Cartesian coordinates to the Polar coordinates. As for
the largest motion statistics, we compute the average mag-
nitude of each block and use the number of the block with
the largest average magnitude as the largest motion loca-
tion. Note that the largest block number computed from
Mu and Mv can be different. Therefore, we use two la-
bels to represent the largest motion locations of Mu and Mv
separately. While for the dominant orientation statistics, an
orientation histogram is computed based on the largest mo-
tion block, similar to the computation motion boundary his-
togram (MBH) [6]. Note that we do not have the normaliza-
tion step since we are not computing a descriptor. Instead,
we divide 360◦ into 8 bins, with each bin containing 45◦ an-
gle range and again assign each bin to a number to represent
its orientation. For each pixel in the largest motion block,
we ﬁrst use its orientation angle to determine which angle
bin it belongs to and then add the corresponding magnitude
number into the angle bin. The dominant orientation is the

1

5

9

13

2

6

10

14

3

7

11

15

4

8

12

16

4
3
2
1

1

5

2

6

3

7

4

8

Figure 4. Three different partitioning patterns (from left to right:
1 to 3) used to divide video frames into different types of spatial
regions. Pattern 1 divides each frame into 4×4 blocks. Pattern
2 divides each frame into 4 different non-overlapped areas with
the same gap between each block. Pattern 3 divides each frame
by the two center lines and the two diagonal lines. The indexing
strategies of the labels are shown in the bottom row.

number of the angle bin with the largest magnitude sum.

Global Motion Statistical Labels. We also propose a set
of global motion statistical labels to provide complementary
information to the local motion statistics described above.
Instead of focusing on the local patch of video clips, a CNN
is asked to predict the largest motion frame. That is given an
N -frame video clip, the CNN is encouraged to understand
the video evolution from a global perspective and ﬁnd out
between which two frames, contains the largest motion. The
largest motion is quantiﬁed by Mu and Mv separately and
two labels are used to represent the global motion statistics.

4009

Motion Boundaries

....

Optical Flow

Motion Branch

Pattern 1 (ul , uo, vl , vo)

....

o  

e

u t  V i d
C li p

p

I n

Backbone Network

Pattern 2 (ul , uo, vl , vo)

Pattern 3 (ul , uo, vl , vo)

Global (ui , vi )

Pattern 1 (pd,  cd,  ps,  cs)

Pattern 2 (pd,  cd,  ps,  cs)

Appearance Branch 

Pattern 3 (pd,  cd,  ps,  cs)

Global (C)

Figure 5. The network architecture of the proposed method. Given a 16-frame video, we regress 14 outputs for the motion branch and 13
outputs for the appearance branch. For each motion pattern, 4 labels are generated by aggregating motion boundaries Mu and Mv: (1) ul
– the largest magnitude location of Mu. (2) uo – the corresponding orientation of ul. (3) vl – the largest magnitude location of Mv. (4) vo
– the corresponding orientation of vl. For each appearance pattern, 4 labels are predicted: (1) pd – the position of largest color diversity.
(2) cd – the corresponding dominant color. (3) ps – the position of smallest color diversity. (4) cs – the corresponding dominant color.

3.3. Appearance Statistics

3.4. Learning with Spatio temporal CNNs

Spatio-temporal Color Diversity Labels. Given an N -
frame video clip, same as motion statistics, we divide it into
several video blocks by patterns described above. For an
N -frame video block, we ﬁrst compute the 3D distribution
Vi in 3D color space of each frame i. We then use the In-
tersection over Union (IoU) along temporal axis to quantify
the spatio-temporal color diversity as follows:

IoUscore =

V1 ∩ V2 ∩ ... ∩ Vi... ∩ VN
V1 ∪ V2 ∪ ... ∪ Vi... ∪ VN

.

(2)

The largest color diversity location is the block with the
smallest IoUscore, while the smallest color diversity loca-
tion is the block with the largest IoUscore. In practice, we
calculate the IoUscore on R,G,B channels separately and
compute the ﬁnal IoUscore by averaging them.

Dominant Color Labels. After we compute the largest
and smallest color diversity locations, the corresponding
dominant color is represented by another two labels. In the
3-D RGB color space, we evenly divide it into 8 bins. For
the two representative video blocks, we assign each pixel
a corresponding bin number by its RGB value, and the bin
with the largest number of pixels is the dominant color.

Global Appearance Statistical Labels. We also design
a global appearance statistics to provide supplementary in-
formation.
Particularly, we use the dominant color of
the whole video as the global statistics. The computation
method is the same as described above.

We adopt the popular C3D network [37] as the backbone
for video spatio-temporal representation learning. Instead
of using 2D convolution kernel k × k, C3D proposed to use
3D convolution kernel k × k × k to learn spatial and tem-
poral information together. To have a fair comparison with
other self-supervised learning methods, we use the smaller
version of C3D as described in [37]. It contains 5 convolu-
tional layers, 5 max-pooling layers, 2 fully-connected lay-
ers and a soft-max loss layer in the end to predict the action
class, which is similar to CaffeNet [16]. We followed the
same video pre-processing procedure as C3D. Input video
samples are ﬁrst split into non-overlapped 16-frame video
clips. And for each input video clip, it is ﬁrst reshaped into
128 × 171 and then randomly cropped into 112 × 112 for
spatial jittering. Thus, the input size of C3D is 16 × 112
× 112 × 3. Temporal jittering is also adopted by randomly
ﬂipping the whole video clip horizontally.

We model our self-supervised task as a regression prob-
lem. The whole framework of our proposed method is
shown in Figure 5. When pre-training the C3D network
with the self-supervised labels introduced in the previous
section, after the ﬁnal convolutional layer, we use two
branches to regress motion statistical labels and appearance
statistical labels separately. For each branch, two fully con-
nected layers are used similarly to the original C3D model
design. And we replace the ﬁnal soft-max loss layer with a
fully connected layer, with 14 outputs for the motion branch
and 13 outputs for the appearance branch. Mean squared

4010

error is used to compute the differences between the target
statistics labels and the predicted labels.

Table 1. Comparison the performance of different patterns of mo-
tion statistics for action recognition on UCF101.

4. Experiments

In this section, we evaluate the effectiveness of our pro-
posed approach. We ﬁrst conduct several ablation studies
on the local and global, motion and appearance statistics
design. Speciﬁcally, we use motion statistics as our auxil-
iary task and appearance statistics acts the similar way. The
activation based attention map of different video samples is
visualized to validate our proposed methodology. Second,
we compare our method with other self-supervised learn-
ing auxiliary tasks on action recognition problem based on
two popular dataset UCF101 [36] and HMDB51 [23]. Our
method achieves the state-of-the-art result. Finally, we con-
duct two more experiments on action similarity [21] and
dynamic scene recognition [8] to validate the transferability
of our self-supervised spatio-temporal features.

4.1. Datasets and Evaluations

In our experiment, we incorporate ﬁve datasets:

the
UCF101 [36], the Kinetics [19], the HMDB51 [23], the
ASLAN [21], and the YUPENN [8]. Unless speciﬁcally
state, we use UCF101 dataset for our model pre-training.

UCF101 dataset [36] consists of 13,320 video samples,
which fall into 101 action classes. Actions in it are all
naturally performed as they are collected from YouTube.
Videos in it are quite challenging due to the large variation
in human pose and appearance, object scale, light condition,
camera view and etc. It contains three train/test splits and in
our experiment, we use the ﬁrst train split to pre-train C3D.
Kinetics-400 dataset is a very large human action dataset
[19] proposed recently.
It includes 400 human action
classes, with 400 or more video clips for each class. Each
sample is collected from YouTube and is trimmed into a
10-seconds video clip. This dataset is very challenging as
it contains considerable camera motion/shake, illumination
variations, shadows, etc. We use the training split for pre-
training, which contains around 240k videos.

HMDB51 dataset [23] is a smaller dataset which con-
tains 6766 videos and 51 action classes. It also consists of
three train/test splits. In our experiment, to have fair com-
parison with others, we use HMDB51 train split 1 to ﬁne-
tune the pre-trained C3D network and test the action recog-
nition accuracy on HMDB51 test split 1.

When pre-training on UCF101 train split 1 video data,
we set the batch size to 30 and use the SGD optimizer with
learning rate 0.001. We divide the leaning rate every 5
epochs by 10. The training process is stopped at 20 epochs.
When pre-training on the Kinetics-400 train split, the batch
size is 30 and we use the SGD optimizer with learning
rate 0.0005. The learning rate is divided by 10 for every
7 epochs and the model is also trained for 20 epochs. When

Initialization
Random
Motion pattern 1
Motion pattern 2
Moiton pattern 3

Accuracy (%)

45.4
53.8
53.2
54.2

ﬁnetuning the C3D, we retain the conv layers weights from
the pre-trained network and initialize three fully-connected
layers. The entire network is ﬁnetuned with SGD on 0.001
learning rate. The learning schedule is the same as the pre-
training procedure. When testing, average accuracy for ac-
tion classiﬁcation is computed on all videos to obtain the
video-level accuracy.

4.2. Ablation Analysis

In this section, we analyze the performance of our local
and global statistics, motion and appearance statistics on ex-
tensive experiments. Particularly, we ﬁrst pre-train the C3D
using different statistics design on UCF101 train split 1. For
local and global statistics ablation studies, we ﬁnetune the
pre-train model on UCF101 train split 1 data with human
annotated labels. For the high-level appearance and motion
statistics studies, we also ﬁnetune the C3D with HMDB51
train split 1 to get more understanding of the design.

Pattern. The objective of this section is to investigate the
performance of different pattern design. Speciﬁcally, we
use the motion statistics and appearance statistics follow the
same trend. As shown in Table 1, all the three patterns out-
perform the random initialization, i.e., train from scratch
setting, by around 8%, which strongly proves that our mo-
tion statistics is a very useful task. The performance of the
three patterns are quite similar, indicating that we have bal-
anced pattern design.

Local v.s. Global.
In this section, we compare the perfor-
mance of local statistics, where is the largest motion video
block?, global statistics, where is the largest motion frame?
and their combination. As can be seen in Table 2, only
global statistics serves as a useful auxiliary task for action
recognition problem, with a improvement of 3%. And when
all the three motion patterns are combined together, we can
further get around 1.5% improvement, compared with sin-
gle pattern. Finally, all motion statistics labels can achieve
57.8% accuracy, which is a signiﬁcant improvement com-
pared with train from scratch.

Motion, RGB, and Joint Statistics. We ﬁnally compare
all motion statistics, all RGB statistics, and their combina-
tion on UCF101 and HMDB51 dataset as shown in Table
3. From the table, we can ﬁnd that both the appearance and
motion statistics serve as a useful self-supervised signals
for UCF101 and HMDB51 dataset. The motion statistics is

4011

Table 2. Comparison of local and global motion statistics for action
recognition on the UCF101 dataset.

Table 4. Comparison with the state-of-the-art self-supervised
video representation learning methods on UCF101 and HMDB51.

Accuracy (%)

Method

UCF101 acc.(%) HMDB51 acc.(%)

Initialization
Random
Motion global
Motion pattern all
Motion pattern all + global

45.4
48.3
55.4
57.8

Table 3. Comparison of different supervision signals on the
UCF101 and the HMDB51 datasets.

Domain
From scratch
Appearance
Motion
Joint

UCF101 acc.(%) HMDB51 acc. (%)

45.4
48.6
57.8
58.8

19.7
20.3
29.95
32.6

more powerful as the temporal information is more impor-
tant for video understanding. It is also interesting to note
that although UCF101 only improves 1% when combined
motion and appearance, the HMDB51 dataset beneﬁts a lot
from the combination, with a 3% improvement.

4.3. Action Recognition

In this section, we compare our method with other self-
supervised learning methods on the action recognition prob-
lem. Particularly, we compare the results with RGB video
input and directly quote the number from [12]. As shown
in Table 4, our method can achieve signiﬁcantly improve-
ment compared with the state-of-the-art both on UCF101
and HMDB51. Compared with methods that are pre-
trained on UCF101 dataset, we improve 9.3% accuracy on
HMDB51 than [12] and 2.5% accuracy on UCF101 than
[24]. Compared with the method proposed recently [20]
that are pre-trained on Kinetics dataset using 3D CNN mod-
els, we can also achieve 0.6% improvement on UCF101 and
5.1% improvement on HMDB51. And please note that [20]
used various regularization techniques during pre-training,
such as channel replication, rotation with classiﬁcation and
spatio-temporal jittering while we do not use these tech-
niques. The results strongly support that our proposed
predicting motion and appearance statistics task can really
drive the CNN to learn powerful spatio-temporal features.
And our method can generate multi-frame spatio-temporal
features transferable to many other video tasks.

Visualization. To further validate that our proposed
method really helps the C3D to learn video related features,
we visualize the attention map [44] on several video frames
as shown in Figure 6. It is interesting to note that for similar
actions: Apply eye makeup and Apply lipstick, C3D is just
sensitive to the location that is exactly the largest motion
location as quantiﬁed by the motion boundaries as shown in
the right. For different scale motion, for example, the bal-

DrLim [15]
TempCoh [28]
Object Patch [43]
Seq Ver.[27]
VGAN [39]
OPN [24]
Geometry [12]
Ours (UCF101)

ST-puzzle (Kinetics) [20]
Ours (Kinetics)

38.4
45.4
42.7
50.9
52.1
56.3
55.1
58.8

60.6
61.2

13.4
15.9
15.6
19.8

-

22.1
23.3
32.6

28.3
33.4

Figure 6. Attention visualization. From left to right: A frame from
a video clip, activation based attention map of conv5 layer on the
frame by using [44], motion boundaries Mu of the whole video
clip, and motion boundaries Mv of the whole video clip.

ance beam action, the pre-trained C3D is also able to focus
on the discriminative location.

4.4. Action Similarity Labeling

We validate our learned spatio-temporal features on
ASLAN dataset [21]. This dataset contains 3,631 video
samples of 432 classes. The task is to predict whether the
given two videos are of the same class or not. We use C3D
as a feature extractor, followed by a linear SVM to do the
classiﬁcation. Each video sample is split into several 16
frames video clips with 8 frames overlapped and then go
through a feed-forward pass on C3D to extract features from
the last conv layer. The video-level spatio-temporal feature
is obtained by averaging the clip feature, followed by l2-
normalization. When testing on the ASLAN dataset, we
follow the same 10-fold cross validation with leave-one-out
evaluation protocol in each fold. Given a pair of videos,
we ﬁrst extract C3D feature from each video and then com-
pute the 12 different distances described in [21]. The 12
(dis-)similarity are ﬁnally concatenated together to obtain a

4012

Table 5. Comparison with different handcrafted features and our
proposed four scenarios performance on the ASLAN dataset.

Features
HOF [21]
HOG [21]
STIP [21]
C3D, random initialization
C3D, train from scratch with label
C3D, self-supervised training
C3D, ﬁnetune on self-supervised

Accuracy (%)

56.68
59.78
60.9
51.7
58.3
59.4
62.3

video-pair descriptor which is then fed into a linear SVM
classiﬁer. Since the scales of each distance are different,
we normalize the distances separately into zero-mean and
unit-variance as described in [37].

As no previous self-supervised learning methods have
done experiment on this dataset, to validate that our self-
supervised task can drive C3D to learn powerful spatio-
temporal features, we design 4 scenarios to extract features
from ASLAN dataset:
(1) Use the random initialization
C3D as feature extractor. (2) Use the C3D pre-trained on
UCF101 with labels as feature extractor. (3) Use the C3D
pre-trained on UCF101 with our self-supervised task as fea-
ture extractor. (4) Use the C3D ﬁnetuned on UCF101 on our
self-supervised model as feature extractor. Table 5 shows
the performance of different feature extractors. The ran-
dom initialization model can achieve 51.4% accuracy as the
problem is a binary classiﬁcation problem. What surprises
us is that although our self-supervised pre-trained C3D has
never seen the ASLAN dataset before, it can still do well in
this problem and outperforms the C3D trained with human-
annotated labels by 1.1%. Such results strongly support that
our proposed self-supervised task is able to learn power-
ful and transferable spatio-temporal features. This can be
explained by the internal characteristics of the action sim-
ilarity labeling problem. Different from the previous ac-
tion recognition problem, the goal of ASLAN dataset is to
predict video similarity instead of predicting the actual la-
bel. To achieve good performance, C3D must understand
the video context, which is just what we try to drive the
C3D to do with our self-supervised method. When ﬁne-
tuned our self-supervised pre-trained model with labels on
UCF101, we can further get around 3% improvement. It
outperforms the handcrafted features STIP [21], which is
the combination of three popular features: HOG, HOF, and
HNF (a composition of HOG and HOF).

Table 6. Comparison with hand-crafted features and other self-
supervised representation learning methods for dynamic scene
recognition problem on the YUPENN dataset.

Method

[10]

[8]

[43]

[27]

[12] Ours

Accuracy (%)

86.0

80.7

70.47

76.67

86.9

90.2

problems? We investigate this question by transferring the
learned features to the dynamic scene recognition problem
based on the YUPENN dataset [8], which contains 420
video samples of 14 dynamic scenes. For each video in
the dataset, ﬁrst split it into 16 frames clips with 8 frames
overlapped. The spatio-temporal features are then extracted
based on our self-supervised C3D pre-trained model from
the last conv layer. The video-label representations are ob-
tained by averaging each video-clip features, followed with
l2 normalization. A linear SVM is ﬁnally used to classify
each video scene. We follow the same leave-one-out evalu-
ation protocol as described in [8].

We compared our methods with both hand-crafted fea-
tures and other self-supervised learning tasks as shown in
Table 6. Our self-supervised C3D outperforms both the tra-
ditional features and self-supervised learning methods. It
shows that although our self-supervised C3D is trained on a
action dataset, the learned weights has impressive transfer-
ability to other video-related tasks.

5. Conclusions

In this paper, we presented a novel approach for self-
supervised spatio-temporal video representation learning by
predicting a set of statistical labels derived from motion and
appearance statistics. Our approach is bio-inspired and con-
sistent with human visual systems. We demonstrated that by
pre-training on unlabeled videos with our method, the per-
formance of C3D network is improved signiﬁcantly over
random initialization on the action recognition problem.
Compared with other self-supervised representation learn-
ing approaches, our method achieves state-of-the-art perfor-
mances on UCF101 and HMDB51 datasets. This strongly
supports that our method can drive C3D network to capture
more crucial spatio-temporal information. We also showed
that our pre-trained C3D network can be used as a power-
ful feature extractor for other tasks, such as action similar-
ity labeling and dynamic scene recognition, where we also
achieve state-of-the-art performances on public datasets.

4.5. Dynamic Scene Recognition

The performance on UCF101, HMDB51 and ASLAN
dataset shows that our proposed self-supervised learning
task can drive the C3D to learn powerful spatio-temporal
features for action recognition problem. One may won-
der that can action-related features be generalized to other

Acknowledgements: This work is supported in part by
the Natural Science Foundation of China under Grant
U1613218 and 61702194, in part by the Hong Kong ITC
under Grant ITS/448/16FP, and in part by the VC Fund
4930745 of the CUHK T Stone Robotics Institute. Jianbo
Jiao is supported by the EPSRC Programme Grant See-
bibyte EP/M013774/1.

4013

References

[1] Thomas Brox, Andr´es Bruhn, Nils Papenberg, and Joachim
Weickert. High accuracy optical ﬂow estimation based on a
theory for warping. In ECCV, 2004. 3

[2] Liujuan Cao, Rongrong Ji, Yue Gao, Wei Liu, and Qi Tian.
Mining spatiotemporal video patterns towards robust action
retrieval. Neurocomputing, 105:61–69, 2013. 1

[3] Mathilde Caron, Piotr Bojanowski, Armand Joulin, and
Matthijs Douze. Deep clustering for unsupervised learning
of visual features. In ECCV, 2018. 2

[4] Joao Carreira and Andrew Zisserman. Quo vadis, action
recognition? a new model and the kinetics dataset. In CVPR,
2017. 1, 3

[5] Yu-Wei Chao, Sudheendra Vijayanarasimhan, Bryan Sey-
bold, David A Ross, Jia Deng, and Rahul Sukthankar. Re-
thinking the faster r-cnn architecture for temporal action lo-
calization. In CVPR, 2018. 1

[6] Navneet Dalal, Bill Triggs, and Cordelia Schmid. Human
detection using oriented histograms of ﬂow and appearance.
In ECCV, 2006. 3, 4

[7] Jia Deng, Wei Dong, Richard Socher, Li-Jia Li, Kai Li,
and Li Fei-Fei. Imagenet: A large-scale hierarchical image
database. In CVPR, 2009. 2

[8] Konstantinos G Derpanis, Matthieu Lecce, Kostas Daniilidis,
and Richard P Wildes. Dynamic scene understanding: The
role of orientation features in space and time in scene classi-
ﬁcation. In CVPR, 2012. 6, 8

[9] Carl Doersch, Abhinav Gupta, and Alexei A Efros. Unsuper-
vised visual representation learning by context prediction. In
ICCV, 2015. 2

[10] Christoph Feichtenhofer, Axel Pinz, and Richard P Wildes.
Spacetime forests with complementary features for dynamic
scene recognition. In BMVC, 2013. 8

[11] Basura Fernando, Hakan Bilen, Efstratios Gavves, and
Stephen Gould. Self-supervised video representation learn-
ing with odd-one-out networks. In CVPR, 2017. 1, 2

[12] Chuang Gan, Boqing Gong, Kun Liu, Hao Su, and
Leonidas J Guibas. Geometry guided convolutional neural
networks for self-supervised video representation learning.
In CVPR, 2018. 1, 2, 7, 8

[13] Spyros Gidaris, Praveer Singh, and Nikos Komodakis. Un-
supervised representation learning by predicting image rota-
tions. In ICLR, 2018. 2

[14] Martin A Giese and Tomaso Poggio. Cognitive neuro-
science: neural mechanisms for the recognition of biological
movements. Nature Reviews Neuroscience, 4(3):179–192,
2003. 2, 3

[15] R Hadsell, S Chopra, and Y LeCun. Dimensionality reduc-

tion by learning an invariant mapping. In CVPR, 2006. 7

[16] Yangqing Jia, Evan Shelhamer, Jeff Donahue, Sergey
Karayev, Jonathan Long, Ross Girshick, Sergio Guadarrama,
and Trevor Darrell. Caffe: Convolutional architecture for fast
feature embedding. In ACM Multimedia, 2014. 5

[17] Yu-Gang Jiang, Qi Dai, Wei Liu, Xiangyang Xue, and
Chong-Wah Ngo. Human action recognition in uncon-
strained videos by explicit motion modeling.
IEEE TIP,
24(11):3781–3795, 2015. 1

[18] Andrej Karpathy, George Toderici, Sanketh Shetty, Thomas
Leung, Rahul Sukthankar, and Li Fei-Fei. Large-scale video
classiﬁcation with convolutional neural networks. In CVPR,
2014. 2

[19] Will Kay, Joao Carreira, Karen Simonyan, Brian Zhang,
Chloe Hillier, Sudheendra Vijayanarasimhan, Fabio Viola,
Tim Green, Trevor Back, Paul Natsev, et al. The kinetics hu-
man action video dataset. arXiv preprint arXiv:1705.06950,
2017. 2, 6

[20] Dahun Kim, Donghyeon Cho, and In So Kweon. Self-
supervised video representation learning with space-time cu-
bic puzzles. In AAAI, 2019. 2, 7

[21] Orit Kliper-Gross, Tal Hassner, and Lior Wolf. The action
similarity labeling challenge. IEEE TPAMI, 34(3):615–621,
2012. 6, 7, 8

[22] Ranjay Krishna, Kenji Hata, Frederic Ren, Li Fei-Fei, and
Juan Carlos Niebles. Dense-captioning events in videos. In
ICCV, 2017. 2

[23] Hildegard Kuehne, Hueihan Jhuang, Est´ıbaliz Garrote,
Tomaso Poggio, and Thomas Serre. Hmdb: a large video
database for human motion recognition. In ICCV, 2011. 6

[24] Hsin-Ying Lee, Jia-Bin Huang, Maneesh Singh, and Ming-
Hsuan Yang. Unsupervised representation learning by sort-
ing sequences. In ICCV, 2017. 1, 2, 7

[25] Yehao Li, Ting Yao, Yingwei Pan, Hongyang Chao, and Tao
Mei. Jointly localizing and describing events for dense video
captioning. In CVPR, 2018. 2

[26] Jingjing Liu, Chao Chen, Yan Zhu, Wei Liu, and Dimitris N
Metaxas. Video classiﬁcation via weakly supervised se-
quence modeling. CVIU, 152:79–87, 2016. 1

[27] Ishan Misra, C Lawrence Zitnick, and Martial Hebert. Shuf-
ﬂe and learn: unsupervised learning using temporal order
veriﬁcation. In ECCV, 2016. 1, 2, 7, 8

[28] Hossein Mobahi, Ronan Collobert, and Jason Weston. Deep
learning from temporal coherence in video. In ICML, 2009.
7

[29] Mehdi Noroozi and Paolo Favaro. Unsupervised learning of
visual representations by solving jigsaw puzzles. In ECCV,
2016. 2

[30] Mehdi Noroozi, Hamed Pirsiavash, and Paolo Favaro. Rep-
In ICCV, 2017.

resentation learning by learning to count.
2

[31] Deepak Pathak, Ross B Girshick, Piotr Doll´ar, Trevor Dar-
rell, and Bharath Hariharan. Learning features by watching
objects move. In CVPR, 2017. 2

[32] Deepak Pathak, Philipp Krahenbuhl, Jeff Donahue, Trevor
Darrell, and Alexei A Efros. Context encoders: Feature
learning by inpainting. In CVPR, 2016. 2

[33] Zheng Shou, Jonathan Chan, Alireza Zareian, Kazuyuki
Miyazawa, and Shih-Fu Chang. Cdc: Convolutional-de-
convolutional networks for precise temporal action localiza-
tion in untrimmed videos. In CVPR, 2017. 1, 2

[34] Zheng Shou, Dongang Wang, and Shih-Fu Chang. Temporal
action localization in untrimmed videos via multi-stage cnns.
In CVPR, 2016. 1, 2

[35] Karen Simonyan and Andrew Zisserman. Two-stream con-
In

volutional networks for action recognition in videos.
NeruIPS, 2014. 1, 3

4014

[36] Khurram Soomro, Amir Roshan Zamir, and Mubarak Shah.
Ucf101: A dataset of 101 human actions classes from videos
in the wild. arXiv preprint arXiv:1212.0402, 2012. 6

[37] Du Tran, Lubomir Bourdev, Rob Fergus, Lorenzo Torresani,
and Manohar Paluri. Learning spatiotemporal features with
3d convolutional networks. In ICCV, 2015. 1, 2, 5, 8

[38] Du Tran, Heng Wang, Lorenzo Torresani, Jamie Ray, Yann
LeCun, and Manohar Paluri. A closer look at spatiotemporal
convolutions for action recognition. In CVPR, 2018. 1

[39] Carl Vondrick, Hamed Pirsiavash, and Antonio Torralba.
Generating videos with scene dynamics. In NeurIPS, 2016.
2, 7

[40] Bairui Wang, Lin Ma, Wei Zhang, and Wei Liu. Reconstruc-

tion network for video captioning. In CVPR, 2018. 1

[41] Heng Wang, Alexander Kl¨aser, Cordelia Schmid, and
Cheng-Lin Liu. Action recognition by dense trajectories. In
CVPR, 2011. 3

[42] Jingwen Wang, Wenhao Jiang, Lin Ma, Wei Liu, and Yong
Xu. Bidirectional attentive fusion with context gating for
dense video captioning. In CVPR, 2018. 1, 2

[43] Xiaolong Wang and Abhinav Gupta. Unsupervised learning
of visual representations using videos. In ICCV, 2015. 2, 7,
8

[44] Sergey Zagoruyko and Nikos Komodakis. Paying more at-
tention to attention: Improving the performance of convolu-
tional neural networks via attention transfer. In ICLR, 2017.
7

[45] Richard Zhang, Phillip Isola, and Alexei A Efros. Colorful

image colorization. In ECCV, 2016. 2

4015

