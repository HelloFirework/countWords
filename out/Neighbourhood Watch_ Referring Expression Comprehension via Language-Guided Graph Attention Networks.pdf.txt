Neighbourhood Watch: Referring Expression Comprehension via

Language-guided Graph Attention Networks∗

Peng Wang1 Qi Wu1

Jiewei Cao1 Chunhua Shen1

Lianli Gao2 Anton van den Hengel1

1Australian Institute for Machine Learning, The University of Adelaide

2The University of Electronic Science and Technology of China

Abstract

The task in referring expression comprehension is to
localise the object instance in an image described by a
referring expression phrased in natural language. As a
language-to-vision matching task, the key to this problem
is to learn a discriminative object feature that can adapt to
the expression used. To avoid ambiguity, the expression nor-
mally tends to describe not only the properties of the refer-
ent itself, but also its relationships to its neighbourhood. To
capture and exploit this important information we propose
a graph-based, language-guided attention mechanism. Be-
ing composed of node attention component and edge atten-
tion component, the proposed graph attention mechanism
explicitly represents inter-object relationships, and proper-
ties with a ﬂexibility and power impossible with compet-
ing approaches. Furthermore, the proposed graph attention
mechanism enables the comprehension decision to be visu-
alisable and explainable. Experiments on three referring
expression comprehension datasets show the advantage of
the proposed approach.

1. Introduction

A referring expression is a natural language phrase that
refers to a particular object visible in an image. Refer-
ring expression comprehension thus requires to identify the
unique object of interest, referred to by the language ex-
pression [29]. The critical challenge is thus the joint under-
standing of the textual and visual domains.

Referring expression comprehension can be formulated
as a language-to-region matching problem, where the re-
gion with highest matching score is selected as the pre-
diction. Learning a discriminative region representation
that can adapt to the language expression is thus critical.
The predominant approaches [7, 15, 16] tend to represent
the region by stacking various types of features, such as

∗Q. Wu’s participation was supported in part by the National Science

of China (No. 61876152).

Figure 1. A directed graph is built over the object instances of the
image, where nodes correspond to object regions and edges (par-
tially visualised) represent relationships between objects (blue and
red edges denote intra- and inter-class relationships respectively).
Graph attention predicts the attention distribution over the nodes
as well as the edges, based on the decomposed information present
in the expression. Summarising the attended object and its high-
lighted neighbours enables more discriminative feature. Higher
transparency here denotes a lower attention value.

CNN features, spatial features or heuristic contextual fea-
tures, and employ a LSTM to process the expression sim-
ply as a series of words. However, these approaches are
limited by the monolithic vector representations that ig-
nore the complex structures in the compound language ex-
pression as well as in the image. Another potential prob-
lem for these approaches, and for more advanced modular
schemes [5, 27], is that the language and region features are
learned or designed independently without being informed
by each other, which makes the features of the two modal-
ities difﬁcult to adapt to each other, especially when the
expression is complex. Co-attention mechanisms are em-
ployed in [3, 32] to extract more informative features from
both the language and the image to achieve better matching
performance. These approaches, however, treat the objects
in the image in isolation and thus fail to model the rela-
tionships between them. These relationships are naturally
important in identifying the referent, especially when the
expression is compound. For example, in Fig. 1, the expres-
sion “the child held by a woman beside a table” describes

11960

Referring Expression:The child held by a woman beside a tableDirected Relational Graph with Attention MasksThe child held by a woman beside a tableLanguage Self AttentionLanguage-guided Graph AttentionRegion ProposalInput Imagenot only the child but her relationships with another person
and the table. In cases like this, focusing on the properties
of the object only is not enough to localise the correct ref-
erent but we need to watch the neighbourhood to identify
more useful clues.

To address the aforementioned problems, we propose to
build a directed graph over the object regions of an image
to model the relationships between objects. In this graph
the nodes correspond to the objects and the edges repre-
sent the relationships between objects. On top of the graph,
we propose a language-guided graph attention network
(LGRAN) to highlight the relevant content referred to by
the expression. The graph attention is composed of two
main components: a node attention component to highlight
relevant objects and an edge attention component to identify
the object relationships present in the expression. Further-
more, the edge attention is divided into intra-class edge at-
tention and inter-class edge attention to distinguish relation-
ships between objects of the same category and those cross-
ing categories. Normally, these two types of relationships
are different visually and semantically. The three types of
attention are guided by three corresponding language parts
which are identiﬁed within the expression through a self-
attention mechanism [5, 27]. By summarising the attended
sub-graph centred on a potential object of interest, we can
dynamically enrich the representation of this object in order
that it can better adapt to the expression, as illustrated in
Fig. 1.

Another beneﬁt of the proposed graph attention mech-
anism is that it renders the referring expression decision
both visualisable and explainable, because it is capable of
grounding the referent and other supporting clues (i.e. its
relationships with other objects) onto the graph. We con-
duct experiments on three referring expression datasets (Re-
fCOCO, RefCOCO+ and RefCOCOg). The experimental
results show the advantage of the proposed language-guided
graph attention network. We outperform the previous best
results on almost all splits, under different settings.

2. Related Work

Referring Expression Comprehension Conventional re-
ferring expression comprehension is approached using a
CNN/LSTM framework [7, 15, 16, 28]. The LSTM takes as
input a region-level CNN feature and a word vector at each
time step, and aims to maximize the likelihood of the ex-
pression given the referred region. These models incorpo-
rate contextual information visually, and how they achieve
this is one of the major differentiators of the various ap-
proaches. For example, the work in [7] uses a whole-image
CNN feature as the region context, the work in [16] learns
context regions via multiple-instance learning, and in [28],
the authors use visual differences between objects to repre-
sent the visual context.

Another line of work treats referring expression com-
prehension as a metric learning problem [14, 15, 18, 25],
whereby the expression feature and the region feature are
embedded into a common feature space to measure the
compatibility. The focus of these approaches lies in how
to deﬁne the matching loss function, such as softmax
loss [14, 18], max-margin loss [25], or Maximum Mutual
Information (MMI) loss [15]. These approaches tend to use
a single feature vector to represent the expression and the
image region. These monolithic features ignore the com-
plex structures in the language as well in the image, how-
ever. To overcome this limitation of monolithic features,
self-attention mechanisms have been used to decompose the
expression into sub-components and learn separate features
for each of the resulting parts [6, 27, 30]. Another poten-
tial problem for the aforementioned methods is that the lan-
guage and region features are learned independently with-
out being informed by each other. To learn expression fea-
tures and region features that can better adapt to each other,
co-attention mechanisms have been used [3, 32]. These
methods process the objects in isolation, however, and thus
fail to model the object dependencies, which are critical in
identifying the referent. In our model, we build a directed
graph over the object regions of an image to model the re-
lationships between objects. On top of that, a language-
guided graph attention mechanism is proposed to highlight
the relevant content referred to by the expression.
Graph Attention In [24] graph attention is applied to
other graph-structured data, including document citation
networks, and protein-protein interactions. The differences
between their graph attention scheme and ours are three-
fold. First, their graph edges reﬂect the connections be-
tween nodes only, while ours additionally encode the re-
lationships between objects (that have properties of their
own). Second, their attention is obtained via self-attention
or the interaction between nodes, but our attention is guided
by the referring statement. Third, they update the node in-
formation as a weighted sum of the neighbouring represen-
tations, but we maintain different types of features to repre-
sent the node properties and node relationships. In terms
of building a graph to capture the structure in the struc-
tural data, our work is also related to graph neural networks
[4, 8, 11, 12, 22]. Our focus in this paper is on identifying
the expression-relevant information for an object for better
language-to-region matching.

3. Language-guided Graph Attention Net-

works (LGRANs)

Here we elaborate on the proposed language-guided
graph attention networks (LGRANs) for referring expres-
sion comprehension. Given the expression r and an im-
age I, the aim of referring expression comprehension is
to localise the object o⋆ referred to by r from the object

21961

Figure 2. Overview of the proposed language-guided graph attention networks for referring expression comprehension. The network is
composed of three modules: language-self attention module, language-guided graph attention module, and matching module.

set O = {oi}N
i=1 of I. The candidate object set is given
as ground truth or obtained by an object proposal genera-
tion method, such as region proposal network [17], depend-
ing on the experimental setting. We evaluate both cases in
Sec. 4.

As illustrated in Fig. 2, LGRANs is composed of three
modules:
(1) the language self-attention module, which
adopts a self-attention scheme to decompose the expres-
sion r into three parts that describe the subject, intra-class
relationships and inter-class relationships, and learn the
corresponding representations ssub, sintra and sinter; (2)
the language-guided graph attention module, which builds
a directed graph over the candidate objects O, highlights
the nodes (objects), intra-class edges (relationships between
objects of the same category) and inter-class edges (rela-
tionships between objects from different categories) that are
relevant to r under the guidance of ssub, sintra and sinter,
and ﬁnally obtains three types of expression-relevant repre-
sentations for each object; (3) the matching module, which
computes the expression-to-object matching score. We now
describe these modules in detail.

3.1. Language Self Attention Module

Languages are compound and monolithic vector rep-
resentations (such as the output of a LSTM at the ﬁnal
state) ignore the rich structure in the language.
Inspired
by the idea of decomposing compound language into sub-
structures in various vision-to-language tasks [2, 5, 6, 27],
we decompose the expression into sub-components as well.
To fulﬁll their purpose referring expressions tend to de-
scribe not only the properties of the referent, but also its
relationships with nearby objects. We thus decompose the
expression r into three parts: subject rsub, intra-class rela-
tionship rintra, and inter-class relationship rinter.

There are mainly two language parsing approaches: off-
the-shelf language parsers [2] or self-attention [5, 6, 27].

Figure 3. Illustration of the language self-attention module.

In this paper, we apply the self-attention scheme due to its
better performance. Fig. 3 shows the high-level idea of our
language attention mechanism. Given an expression r with
T words r = {wt}T
t=1, we ﬁrst embed the words’ one-
hot representations into a continuous space {et}T
t=1 using
a non-linear mapping function fe. Then {et} are fed into a
Bi-LSTM [20] to obtain a set of hidden state representations
{ht}T
t=1. Next, three individual fully-connected layers fol-
lowed by softmax layers are applied to {ht} to obtain three
types of attention values, being subject attention {asub
t=1,
intra-class relationship attention {aintra
}T
t=1 and inter-class
relationship attention {ainter
}T
t=1. As the attention values
are obtained by the same way for all three components, for
simplicity we only show the details for the calculation of
the subject component rsub. Let

t }T

t

t

asub
t =

exp(w⊺

suba
i=1 exp(w⊺

PT

ht)

hi)

suba

,

(1)

where wsuba denotes FCa
sub in Fig. 3. Then, the atten-
tion values are applied to the embedding vectors {et} to
derive three representations: ssub, sintra and sinter. Here

31962

Language-guidedGraph AttentionThe child held by a woman beside a tableLanguageSelf AttentionGraph Construction Input ImageInitial Graph RepresentationMatching ScoresMatchingAttended Graph Representation0.20.10.6held by a womanthe childbeside a tableInput Referring ExpressionThe childheld by a woman beside a tableHidden vector sequence Word embedding sequence Word sequence The childheld by a woman beside a tableBi-LSTMThe childheld by a woman beside a tableThe childheld by a woman beside a tableComponent weightsComponent  representationswe choose ssub for illustration:

ssub =

T

X

t=1

asub
t

· et.

(2)

Inspired by [27], we apply another linear mapping FCw
to the pooled embedding vector, e = PT
et, to de-
rive three weights [wsub, wintra, winter]. These serve as
the weights for [rsub, rintra, rinter] in expression-to-region
matching, that will be introduced in Sec. 3.3. Again we
present how to obtain wsub only,

t=1

wsub =

exp(w⊤

subw

exp(w⊺
e) + exp(w⊤

subw

intraw

e)
e) + exp(w⊤

interw

,

e)

(3)

where wsubw , wintraw , winterw denote linear mappings.

3.2. Language guided Graph Attention Module

The language-guided graph attention module is the key
of the network. It builds a graph over the objects of an im-
age to model object dependencies and identiﬁes the nodes
and edges relevant to the expression to dynamically learn
object representations that adapt to the language expression.

3.2.1 Graph construction

Given the object or region set O = {oi}N
i=1 of an image
I, we build a directed graph G = {V, E} over O, where
V = {vi}N
i=1 is the node set and E = {eij} is the edge set.
Each node vi corresponds to an object oi ∈ {O} and an
edge eij denotes the relationship between oi and oj . Based
on whether the two nodes connected by an edge belong to
the same category or not, we divide the edges into two sets:
intra-class edges E intra and inter-class edges E inter. That
is, E = E intra ∪ E inter and E intra ∩ E inter = ∅. Assume
c(vi) denotes the category of vi, the two types of edges can
be represented as, E intra = {eij : c(vi) = c(vj)} and
E inter = {eij : c(vi) 6= c(vj)}.

Considering that an object typically only interacts with
objects nearby, we deﬁne edges between an object and its
neighbourhood. Speciﬁcally, given a node vi, we rank the
remaining objects of the same category, {vj
: c(vj) =
c(vi)}, based on their distances to vi and deﬁne the intra-
class neighbourhood N intra
of vi as the top k ranked intra-
class objects. Similarly, we deﬁne the inter-class neighbour-
hood N inter
of vi to be the top k ranked objects that belong
to other categories. For a node vi, we deﬁne an edge be-
tween vi and vj if and only if vj ∈ N intra
or vj ∈ N inter
.
A bigger k leads to a denser graph, and to balance the efﬁ-
ciency and representation capacity, we set k = 5.

i

i

i

i

We extract two types of node features for each node
vi: appearance feature vi and spatial feature li. To ob-
tain the appearance feature, we ﬁrst resize the correspond-
ing region oi to 224 × 224 and feed it to VGG16 net

W , ytl

H , xbr

W , ybr

H , w·h

[21]. The Conv5 3 features V ∈ R7×7×512 are pooled
over the height and width dimensions to obtain the rep-
resentation vi ∈ R512. The spatial feature li
is ob-
tained as in [29], which is a 5-dimensional vector, encod-
ing the top-left, bottom-right coordinates and the size of
the bounding box with respect to the whole image, i.e.,
li = [ xtl
W ·H ]. The node representation is
a concatenation of the appearance feature and spatial fea-
ture, i.e. xobj
i = [vi, li]. It has been shown that the rela-
tive spatial feature between two objects is a strong repre-
sentation to encode their relationship [31]. Similarly, we
model the edge between vi and vj based on their relative
spatial information. Suppose the centre coordinate, width
and height of vi are represented as [xci , yci , wi, hi], and
the top-left coordinate, bottom-right coordinate, width and
height of vj are represented as [xtlj , ytlj , xbrj , ybrj , wj, hj],
then the edge representation is represented as, eij =
xtlj
[

xbrj

ybrj

ytlj

].

,

,

,

−yci
hi

, wj ·hj
wi·hi

−xci
wi

−xci
wi

−yci
hi

3.2.2 Language-guided Graph attention

The aim of graph attention is to highlight the nodes and
edges that are relevant to the expression r and consequently
obtain object features that adapt to r. The graph attention is
composed of two parts: node attention and edge attention.
Furthermore, the edge attention can be divided into intra-
class edge attention and inter-class edge attention. Mathe-
matically, this process can be expressed as,

{Aobj , Aintra, Ainter} = f ({xobj

i }, {ei,j}, ssub, sintra, sinter),
(4)

where Aobj , Aintra, and Ainter denote node attention val-
ues, intra-class edge attention values, and inter-class edge
attention values respectively. The series of s are the at-
tended features from the language part. The function f is a
graph attention mechanism that is guided by the language,
which will be introduced as following three parts.

The node attention The node attention mechanism is in-
spired by the bottom-up attention [1], which enables atten-
tion to be calculated at the level of objects and other salient
image regions [23, 33]. Given the node features {xobj
i=1,
where xobj
i = [vi, li], and the subject feature ssub of r in
Sec. 3.1, the node attention is computed as,

i }N

ve
i = f v
le
i = f l
xe,obj

emb(vi)
emb(li)
= [ve

i , le
i ]

i

= tanh(Wa

s,sub

ssub + Wa

g,obj

xe,obj

i

)

(5)

xa,obj

i

′

Aobj

i

= w⊺

xa,obj

i

′

a,obj
exp(Aobj
)
j exp(Aobj

j

i

PN

,

′

)

Aobj

i =

41963

emb and f l

g,obj and Wa

where f v
emb are MLPs used to encode appearance
and local features of vi separately, Wa
s,sub map
the encoded node feature xe,obj
and subject feature ssub of
r into vectors of the same dimensionality, wa,obj calculates
the attention values {Aobj
} for {vi}, and all these attention
values {Aobj
}N
i=1 are fed into a softmax layer to obtain the
ﬁnal attention values, Aobj = {Aobj

i

i

i

′

′

i }.

The intra-class edge attention We obtain the attention
values for intra-class edges E intra and inter-class edges
E inter in similar ways. Given an intra-class edge ei,j ∈
E intra and the intra-class relationship feature sintra of the
expression r, the attention value for ei,j is calculated as,

eintra

ij

ea,intra

ij
Aintra

ij

= f intra

emb (eij)
= tanh(Wa

′

= w⊺

a,intra

s,intra
ea,intra

ij

sintra + Wa

g,intra

Aintra

ij

=

exp(Aintra

′

)

ij
exp(Aintra

,

′

)

ik

Pk∈N intra

i

is a MLP to encode the edge feature, Wa

where f intra
g,intra
emb
and Wa
s,intra map the encoded edge feature and intra-class
relationship feature sintra of expression r into vectors of
the same dimensionality, wa,intra calculates the intra-class
attention values for eij , and these attention values are nor-
malised among the intra-class neighbourhood N intra
of vi
via a softmax.

i

The inter-class edge attention The attention value for
inter-class edge eij ∈ E inter is calculated under the guid-
ance of the inter-class relationship feature sinter of expres-
sion r,

einter

ij

= f inter

emb ([eij, xobj

j

])

= tanh(Wa

sinter + Wa

g,inter

ea,inter

ij
Ainter

ij

′

= w⊺

a,inter

s,inter
ea,inter

ij

einter

ij

)

(7)

Ainter

ij

=

exp(Ainter

′

)

ij
exp(Ainter

ik

,

′

)

Pk∈N inter

i

where f inter
is a MLP. Comparing Eq. 6 and Eq. 7, the
emb
features used to represent the intra-class relationship and
inter-class relationship are different. When the subject vi
and object vj are from the same category, we only use their
relative spatial feature eij to represent the relationship be-
tween them. However, when vi and vj are from different
classes (e.g. man riding horse) we need to explicitly model
the object vj and thus we design the relationship represen-
tation to be the concatenation of the edge feature eij and the
node feature xobj

.

j

3.2.3 The Attended Graph Representation

With the node and edge attention determined under the
guidance of the expression r, the next step is to obtain the ﬁ-
nal representation for the object by aggregating the attended
content. Corresponding to the decomposition of the expres-
sion, we obtain three types of features for each node: object
features, intra-class relationship features, and inter-class re-
lationship features.

The node representation for vi will be updated to ˆxobj

i

,

ˆxobj
i = Aobj

i

xe,obj

i

,

(8)

denotes the node attention value for vi and

is the encoded node feature in Eq. 5.

The intra-class relationship representation ˆxintra

i

will be

where Aobj
xe,obj

i

i

eintra

ij

)

(6)

the weighted sum of the intra-class edge representations,

ˆxintra

i

= X

Aintra

ij

eintra

ij

,

(9)

j∈N intra

i

where N intra
i
vi, Aintra
ij
eintra

ij

denotes the intra-class neighbourhood of
denotes the intra-class edge attention value and

is the encoded intra-class edge feature in Eq. 6.

The inter-class relationship representation ˆxinter

is ob-
tained as the weighted sum of the inter-class edge represen-
tations,

i

ˆxinter

i

= X

Ainter

ij

einter

ij

,

(10)

j∈N inter

i

where N inter
i
vi, Ainter
ij
einter

ij

denotes the inter-class neighbourhood of
denotes the inter-class edge attention value and

is the encoded inter-class edge feature in Eq. 7.

3.3. Matching Module and Loss Function

The matching score between the expression r and an ob-
ject vi is calculated as the weighted sum of three parts: sub-
ject, intra-class relationship, and inter-class relationship,

i = tanh(Wm
pobj
pintra
i
pinter
i
pi = wsubj pobj

= tanh(Wm
= tanh(Wm

s,subj

sobj)⊺ tanh(Wm

g,obj ˆxobj

)

i
sintra)⊺ tanh(Wm
sinter)⊺ tanh(Wm

g,intra ˆxintra
g,inter ˆxinter

i

i

)

)

s,intra

s,inter

(11)

i + wintrapintra

i

+ winterpinter

i

,

where each expression component feature and object com-
ponent feature are encoded by a MLP (linear mapping +
non-linear function tanh(·)) respectively before a dot prod-
uct. The weights of the three parts are obtained from r as in-
troduced in Sec. 3.1. The probability for vi being the refer-
ent is probi = sof tmax(pi), where the softmax is applied
over all of the objects in the image. We choose CrossEn-
tropy as the loss function. That is, if the ground truth label
of r is l(r) ∈ [0, · · · , N − 1], then the loss function will be,

L = − X

log(probl(r)).

(12)

r

51964

Table 1. Structures of MLPs. The number after linear and DP (dropout) denotes the dim of the hidden layer and the dropout ratio.
MLPs

Illustration

Structure

fe
f v
emb,f l
f intra
emb ,f inter

emb

emb

encoding one-hot representations of words in 3.1

linear (512)+ReLU

encoding the visual and spatial features of nodes in Eq. 5
encoding the intra and inter-class edge features in Eq. 6, 7

linear(512)+BN+ReLU+DP(0.4)+linear(512)+BN+ReLU
linear(512)+BN+ReLU+DP(0.4)+linear(512)+BN+ReLU

4. Experiments

In this section, we introduce some key implementation
details, followed by three experimental datasets. Then we
present some quantitative comparisons between our method
and existing works. Further, an ablation study shows the ef-
fectiveness of the key aspects of our method. Finally, visu-
alisation for LGRANs are shown.

4.1. Implementation details

As mentioned in Sec. 3.2.1, we use VGG16 [21] pre-
trained on ImageNet [19] to extract visual features for the
objects in the image.
In this paper, several MLPs are
adopted to encode various feature representations. The de-
tails of these MLPs are illustrated in Tab. 1. The dimen-
sionalities of the ﬁnal representations of language repre-
sentations {sm} and object representations {xm
i } are all
512, where {m} denote different components. The train-
ing batch size is 30, which means in each training iteration
we feed 30 images and all the referring expressions associ-
ated with these images to the network. Adam [10] is used as
the training optimizer, with initial learning rate to be 0.001,
which decays by a factor of 10 every 6000 iterations. The
network is implemented based on PyTorch.

4.2. Datasets

We conduct experiments on three referring expression
comprehension datasets: RefCOCO [9], RefCOCO+ [9]
and RefCOCOg [15], which are all built on MSCOCO [13].
The RefCOCO and RefCOCO+ are collected in an itera-
tive game, where the referring expressions tend to be short
phrases. The difference between these two datasets is
that absolute location words are not allowed in the expres-
sions in RefCOCO+. The expressions in RefCOCOg are
longer declarative sentences. RefCOCO has 142,210 ex-
pressions for 50,000 objects in 19,994 images, RefCOCO+
has 141,565 expressions for 49,856 objects in 19,992 im-
ages, and RefCOCOg has 104,560 expressions for 54,822
objects in 26,711 images.

There are four splits for RefCOCO and RefCOCO, in-
cluding “train”, “val”, “testA”, “testB”. “testA” and “testB”
have different focus in evaluation. While “testA” has mul-
tiple persons, “testB” has multiple objects from other cat-
egories. For RefCOCOg, there are two data partition ver-
sions. One version is obtained by randomly splitting the
objects into “train” and “test”. As the data is split by ob-
jects, the same image can appear in both “train” and “test”.

Another partition was generated in [16]. In this split, the
images are split into “train”, “val” and “test”. We adopt this
split for evaluation.

4.3. Experimental results

In this part, we show the experimental results on Ref-
COCO, RefCOCO+ and RefCOCOg. Accuracy is used as
evaluation metric. Given an expression r and a test image I
with a set of regions {oi}, we use Eq. 11 to select the region
with highest matching score with r as the prediction opred.
Assume the referent of r is o⋆, we compute the intersection-
over-union (IOU) between opred and o⋆ and treat the predic-
tion correct if IOU > 0.5. First, we show the comparison
with state-of-the-art approaches on ground-truth MSCOCO
regions. That is, for each image, the object regions {oi}
are given. Then, we conduct ablation study to evaluate the
effectiveness of two attention components and their combi-
nation, i.e. node attention, edge attention and graph atten-
tion. Finally, the comparison with existing approaches on
automatic detected regions are given.

Overall Results Tab. 2 shows the comparison between
our method and state-of-the-art approaches on ground-truth
regions. As can be seen, our method outperforms the other
methods on almost all splits. CMN [6] and MattNet [27]
are relevant to our method in the sense that they aban-
don the monolithic language representations and use self-
attention mechanism to decompose the language into dif-
ferent parts. However, their approaches are limited by the
static and heuristic object representations, which are formed
as the stack of multiple features without being informed by
the expression query. We use graph attention mechanism
to dynamically identify the content relevant to the language
and therefore producing more discriminative object repre-
sentations. ParallelAttn [32] and AccumulateAttn [3] both
focus on designing attention mechanisms to highlight the
informative content of the language as well as the image to
achieve better grounding performance. However, they treat
the objects to be isolated and fail to model the relationships
between them, which turn out to be important for identify-
ing the object of interest.

Ablation Study Next, we conduct an ablation study to
further investigate the key components of LGRANs. Specif-
ically, we compare the following solutions:

• Node Representation (NodeRep):

this baseline uses
LSTM to encode the expression and uses the encod-

61965

2.

Performance

Table
ground-truth MSCOCO regions.
“Speaker+listener+reinforcer” and “speaker+listener+reinforcer” mean using the speaker or listener module of a joint module [29] to do
the comprehension task respectively. All comparing methods use VGG16 features.

comparison with

state-of-the-art

approaches

(Acc%)

on

Methods

val

testA

testB

val

testA

testB

val*

val

test

RefCOCO

RefCOCO+

RefCOCOg

MMI [15]

visdif [28]

visdif+MMI [28]

NegBag [16]

CMN [6]

listener [29]

-

-

-

71.72

71.09

67.57

71.19

73.98

76.59

76.90

75.60

78.00

-

75.94

79.57

-

-

-

-

-

58.42

51.23

62.14

52.44

47.51

59.25

59.17

55.62

64.02

-

-

-

59.29

59.34

69.3

-

-

-

-

-

-

-

-

68.40

-

77.48

76.58

78.94

60.5

61.39

58.11

71.12

69.93

69.03

speaker+listener+reinforcer [29]

78.14

76.91

80.1

61.34

63.34

58.42

72.63

71.65

71.92

speaker+listener+reinforcer [29]

78.36

77.97

79.86

61.33

63.1

58.19

72.02

71.32

71.72

VariContxt [30]

ParallelAttn [32]

-

78.98

82.39

-

62.56

62.90

73.98

81.67

80.81

81.32

64.18

66.31

61.46

69.47

AccumulateAttn [3]

81.27

81.17

80.01

65.56

68.76

60.63

73.18

-

-

-

-

-

-

MattNet [27]

Ours-LGRANs

80.94

79.99

82.0

81.2

82.3

84.0

63.07

65.04

61.77

73.08

73.04

72.79

66.6

67.6

65.5

-

75.4

74.7

Table 3. Ablation study of key components of LGRANs.

RefCOCO

RefCOCO+

RefCOCOg

Methods
NodeRep

GraphRep

NodeAttn

EdgeAttn

LGRANs

val

77.6

80.2

81.4

81.9

82.0

testA

testB

77.7

79.4

80.4

80.8

81.2

77.8

81.5

82.8

83.3

84.0

val

61.5

63.3

65.8

65.9

66.6

testA

testB

62.8

64.4

66.2

66.7

67.6

58.0

61.9

64.2

64.9

65.5

val

67.1

70.5

72.4

73.9

75.4

test

68.4

72.1

73.2

74.5

74.7

ings of node features to represent the objects, i.e. xe,obj
in Eq. 5.

i

• Graph Representation (GraphRep): apart from node
representation, graph representation uses two other
types of edge representations: pooling of the intra-
class edge features ˆxpool,intra
eintra
,
where eintra
is the intra-class edge feature encod-
ing in Eq. 6, and pooling of inter-class edge feature
ˆxpool,inter
is the
inter-class edge feature encoding in Eq. 7.

= Pj∈N intra

= Pj∈N inter

, where einter

einter

ij

ij

ij

ij

i

i

i

i

• NodeAttn: on top of graph representation, NodeAttn

applies node attention as introduced in Sec. 3.2.3.

• EdgeAttn: different from graph representation that di-
rectly aggregates the edge features, EdgeAttn applies
edge attention to the edges, as introduced in Sec. 3.2.3.

• LGRANs: this is our full model, which applies both

node attention and edge attention on the graph.

Tab. 3 shows the ablation study results. The limitation
for the baseline “Node Representation” is that it treats the
objects to be isolated and ignores the relationships between
objects. The “Graph Representation” considers the re-
lationships between objects by pooling the edge features

Table 4. Performance (Acc%) comparison with state-of-the-art ap-
proaches on automatically detected regions. All comparing meth-
ods use VGG16 features.

RefCOCO

RefCOCO+

RefCOCOg

Methods

testA

testB

testA

testB

MMI [15]

NegBag [16]

64.9

58.6

54.51

54.03

42.81

56.4

-

-

CMN [6]

71.03

65.77

54.32

47.76

listener [29]

71.63

61.47

57.33

47.21

spe+lis+Rl [29]

69.15

61.96

55.97

46.45

spe+lis+RL [29]

72.65

62.69

58.68

48.23

VariContxt [30]

73.33

67.44

58.40

53.18

ParallelAttn [32]

75.31

65.52

61.34

50.86

LGRANs

76.6

66.4

64.0

53.4

val*

45.85

39.5

57.47

56.18

57.03

58.32

62.30

58.03

62.5

directly. It observes some improvement comparing to the
baseline. “NodeAttn” takes a step further by applying the
region level attention to highlight the potential object de-
scribed by the expression and this further improves the per-
formance. Orthogonal to “NodeAttn”, “EdgeAttn” iden-
tiﬁes the relationships relevant to the expression and this
strategy results in a boost up to 3.4%. “GraphAttn” is our
full model. As can be seen, it consistently outperforms the
other incomplete solutions above.

Automatically detected regions Finally, we evaluate the
performance of LGRANs using automatically detected ob-
ject regions from Faster R-CNN [17]. Tab. 4 shows the re-
sults. Comparing to using ground-truth regions, the per-
formance of all methods drops, which is due to the qual-
ity of the detected regions. In this setting, LGRANs still
performs consistently better than other comparing methods.
This shows the capacity of LGRANs in fully automatic re-
ferring expression comprehension.

71966

Figure 4. Visualisation for LGRANS. Three examples with variant difﬁculty levels are shown. For each example, the original image (the
referent, its intra- and inter-class neighbourhood are marked by yellow, blue and red boxes respectively) with referring expression (subject,
intra- and inter-class relationships are marked by yellow, blue and red), the node attention maps, the inter- and intra-class edge attention
maps are given from left to right. We visualise a relationship between referent and other objects by highlighting the other objects that
interact with the referent. For example, for relationship “woman holding umbrella”, we highlight “umbrella”. Since the giraffe example
contains giraffe regions only, no inter-class relationships exist. Within each region, the attention value is smoothed by a 2D Gaussian kernel
with the centre to be the region centre. Best viewed in colour.

4.4. Visualisation

In contrast to conventional attention schemes that apply
on isolated image regions, e.g. uniform grid of CNN feature
maps [26] or object proposals [1], LGRANS simultaneously
predict attention distributions over objects and inter-object
relationships.

Fig. 4 shows three examples with variant difﬁculty lev-
els. In the ﬁrst example, node attention highlights all three
giraffes and thus cannot distinguish the referent. To iden-
tify the tallest giraffe, it needs to compare one giraffe to
the other two. As seen, the intra-class relationship atten-
tion highlights the relationships to the other two giraffes
and provides useful clues to make correct localisation. In
the second example, there are four women in the image.
Node attention puts attention on people and excludes other
objects, e.g. bag, bottle, umbrella. Then inter-class rela-
tionship attention identiﬁes a relevant relationship between
the referent and an umbrella. Since there are no intra-class
relationships present in the expression, the intra-class edge
attention values almost evenly distribute on other persons.
In the last example, the intra-class attention and inter-class

attention identify man and motorcycle respectively, which
correspond to “behind a Santa clad man” and “on a motor-
cycle”. In these examples, the useful information present
in the expression is highlighted and this explains why an
object is selected as referent.

5. Conclusion

We proposed a graph-based, language-guided attention
networks (LGRANs) to address the referring expression
comprehension task. LGRANs is composed of two key
components: a node attention component and an edge atten-
tion component, both guided by the language attention. The
node attention highlights the referent candidates, narrowing
down the search space for localising the referent, and the
edge attention identiﬁes the relevant relationships between
the referent and its neighbourhood. Based on the attended
graph, we can dynamically enrich the object representation
that better adapts to the referring expression. Another bene-
ﬁt of LGRANs is that it renders the comprehension decision
to be visualisable and explainable.

81967

The giraffe that is standing tallestNode attentionIntra-class relationship attentionA woman wearing beige dress holding umbrella at a picnicNode attentionInter-class relationship attentionA female in a santaclauscostume riding as passenger behind a santaclad man on a motorcycleInter-class relationship attentionIntra-class relationship attentionIntra-class relationship attentionNode attentionReferences

[1] P. Anderson, X. He, C. Buehler, D. Teney, M. Johnson,
S. Gould, and L. Zhang. Bottom-up and top-down atten-
tion for image captioning and visual question answering. In
Proc. IEEE Conf. Comp. Vis. Patt. Recogn., 2018.

[2] J. Andreas, M. Rohrbach, T. Darrell, and D. Klein. Neu-
ral module networks. In Proc. IEEE Conf. Comp. Vis. Patt.
Recogn., 2016.

[3] C. Deng, Q. Wu, Q. Wu, F. Hu, F. Lyu, and M. Tan. Visual
grounding via accumulated attention. In Proc. IEEE Conf.
Comp. Vis. Patt. Recogn., 2018.
[4] D. Duvenaud, D. Maclaurin,

J. Aguilera-Iparraguirre,
R. G´omez-Bombarelli, T. Hirzel, A. Aspuru-Guzik, and R. P.
Adams. Convolutional networks on graphs for learning
molecular ﬁngerprints. In Proc. Advances in Neural Inf. Pro-
cess. Syst., 2015.

[5] R. Hu, J. Andreas, M. Rohrbach, T. Darrell, and K. Saenko.
Learning to reason: End-to-end module networks for visual
question answering. Proc. IEEE Int. Conf. Comp. Vis., 2017.
[6] R. Hu, M. Rohrbach, J. Andreas, T. Darrell, and K. Saenko.
Modeling relationships in referential expressions with com-
positional modular networks.
In Proc. IEEE Conf. Comp.
Vis. Patt. Recogn., 2017.

[7] R. Hu, H. Xu, M. Rohrbach, J. Feng, K. Saenko, and T. Dar-
rell. Natural language object retrieval. In Proc. IEEE Conf.
Comp. Vis. Patt. Recogn., 2016.

[8] A. Jain, A. R. Zamir, S. Savarese, and A. Saxena. Structural-
rnn: Deep learning on spatio-temporal graphs. In Proc. IEEE
Conf. Comp. Vis. Patt. Recogn., 2016.

[9] S. Kazemzadeh, V. Ordonez, M. Matten, and T. L. Berg.
Referit game: Referring to objects in photographs of nat-
ural scenes.
In Proc. Conf. Empirical Methods in Natural
Language Processing, 2014.

[10] D. P. Kingma and J. Ba. Adam: A method for stochastic op-
timization. In Proc. Int. Conf. Learn. Representations, 2014.
[11] R. Li, M. Tapaswi, R. Liao, J. Jia, R. Urtasun, and S. Fidler.
Situation recognition with graph neural networks. In Proc.
IEEE Int. Conf. Comp. Vis., 2017.

[12] Y. Li, D. Tarlow, M. Brockschmidt, and R. S. Zemel. Gated
graph sequence neural networks. In Proc. Int. Conf. Learn.
Representations, 2016.

[13] T.-Y. Lin, M. Maire, S. Belongie, J. Hays, P. Perona, D. Ra-
manan, P. Doll´ar, and C. L. Zitnick. Microsoft coco: Com-
mon objects in context. In Proc. Eur. Conf. Comp. Vis., 2014.
[14] R. Luo and G. Shakhnarovich. Comprehension-guided refer-
ring expressions. Proc. IEEE Conf. Comp. Vis. Patt. Recogn.,
2017.

[15] J. Mao, J. Huang, A. Toshev, O. Camburu, A. Yuille, and
K. Murphy. Generation and comprehension of unambiguous
object descriptions.
In Proc. IEEE Conf. Comp. Vis. Patt.
Recogn., 2016.

[16] V. K. Nagaraja, V. I. Morariu, and L. S. Davis. Modeling
context between objects for referring expression understand-
ing. In Proc. Eur. Conf. Comp. Vis., 2016.

[17] S. Ren, K. He, R. Girshick, and J. Sun. Faster r-cnn: Towards
real-time object detection with region proposal networks. In
Proc. Advances in Neural Inf. Process. Syst., 2015.

[18] A. Rohrbach, M. Rohrbach, R. Hu, T. Darrell, and
B. Schiele. Grounding of textual phrases in images by re-
construction. In Proc. Eur. Conf. Comp. Vis., 2016.

[19] O. Russakovsky, J. Deng, H. Su, J. Krause, S. Satheesh,
S. Ma, Z. Huang, A. Karpathy, A. Khosla, M. Bernstein,
A. C. Berg, and L. Fei-Fei.
ImageNet Large Scale Visual
Recognition Challenge. Int. J. Comput. Vision, 2015.

[20] M. Schuster and K. Paliwal. Bidirectional recurrent neural

networks. IEEE Transactions on Signal Processing, 1997.

[21] K. Simonyan and A. Zisserman.

Very deep convolu-
tional networks for large-scale image recognition. CoRR,
abs/1409.1556, 2014.

[22] D. Teney, L. Liu, and A. van den Hengel. Graph-structured
representations for visual question answering. In Proc. IEEE
Conf. Comp. Vis. Patt. Recogn., 2017.

[23] J. Uijlings, K. van de Sande, T. Gevers, and A. Smeulders.
Selective search for object recognition. Int. J. Comput. Vi-
sion, 2013.

[24] P. Velikovi, G. Cucurull, A. Casanova, A. Romero, P. Li, and
In Proc. Int. Conf.

Y. Bengio. Graph attention networks.
Learn. Representations, 2018.

[25] L. Wang, Y. Li, and S. Lazebnik. Learning deep structure-
In Proc. IEEE Conf.

preserving image-text embeddings.
Comp. Vis. Patt. Recogn., 2016.

[26] P. Wang, L. Liu, C. Shen, Z. Huang, A. van den Hengel, and
H. Tao Shen. Multi-attention network for one shot learning.
In Proc. IEEE Conf. Comp. Vis. Patt. Recogn., 2017.

[27] L. Yu, Z. Lin, X. Shen, J. Yang, X. Lu, M. Bansal, and T. L.
Berg. Mattnet: Modular attention network for referring ex-
pression comprehension.
In Proc. IEEE Conf. Comp. Vis.
Patt. Recogn., 2018.

[28] L. Yu, P. Poirson, S. Yang, A. C. Berg, and T. L. Berg. Mod-
In Proc. Eur. Conf.

eling context in referring expressions.
Comp. Vis., 2016.

[29] L. Yu, H. Tan, M. Bansal, and T. L. Berg. A joint speaker-
listener-reinforcer model for referring expressions. In Proc.
IEEE Conf. Comp. Vis. Patt. Recogn., 2017.

[30] H. Zhang, Y. Niu, and S.-F. Chang. Grounding referring ex-
In Proc. IEEE

pressions in images by variational context.
Conf. Comp. Vis. Patt. Recogn., 2018.

[31] B. Zhuang, L. Liu, C. Shen, and I. Reid. Towards context-
aware interaction recognition for visual relationship detec-
tion. In Proc. IEEE Int. Conf. Comp. Vis., 2017.

[32] B. Zhuang, Q. Wu, C. Shen, I. Reid, and A. van den Hen-
gel. Parallel attention: A uniﬁed framework for visual object
discovery through dialogs and queries. In Proc. IEEE Conf.
Comp. Vis. Patt. Recogn., 2018.

[33] C. L. Zitnick and P. Doll´ar. Edge boxes: Locating object
proposals from edges. In Proc. Eur. Conf. Comp. Vis., 2014.

91968

