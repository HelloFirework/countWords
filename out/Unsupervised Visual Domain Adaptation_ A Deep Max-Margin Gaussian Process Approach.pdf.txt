Unsupervised Visual Domain Adaptation:

A Deep Max-Margin Gaussian Process Approach

Minyoung Kim1,2,3, Pritish Sahu1, Behnam Gholami1, and Vladimir Pavlovic1,3

2Dept. of Electronic Engineering, Seoul National University of Science & Technology, South Korea

1Dept. of Computer Science, Rutgers University, NJ, USA

mikim21@gmail.com, {ps851,bb510,vladimir}@cs.rutgers.edu, v.pavlovic@samsung.com

3Samsung AI Center, Cambridge, UK

Abstract

For unsupervised domain adaptation, the target domain
error can be provably reduced by having a shared input rep-
resentation that makes the source and target domains in-
distinguishable from each other. Very recently it has been
shown that it is not only critical to match the marginal in-
put distributions, but also align the output class distribu-
tions. The latter can be achieved by minimizing the maxi-
mum discrepancy of predictors. In this paper, we take this
principle further by proposing a more systematic and effec-
tive way to achieve hypothesis consistency using Gaussian
processes (GP). The GP allows us to induce a hypothesis
space of classiﬁers from the posterior distribution of the
latent random functions, turning the learning into a large-
margin posterior separation problem, signiﬁcantly easier to
solve than previous approaches based on adversarial mini-
max optimization. We formulate a learning objective that
effectively inﬂuences the posterior to minimize the maxi-
mum discrepancy. This is shown to be equivalent to maxi-
mizing margins and minimizing uncertainty of the class pre-
dictions in the target domainEmpirical results demonstrate
that our approach leads to state-to-the-art performance su-
perior to existing methods on several challenging bench-
marks for domain adaptation.

1. Introduction

The success of deep visual learning largely relies on the
abundance of data annotated with ground-truth labels where
the main assumption is that the training and test data follow
from the same underlying distribution. However, in real-
world problems this presumption rarely holds due to arti-
facts such as the different types of noise or sensors, changes
in object view or context, resulting in degradation of per-
formance during inference on test data. One way to ad-
dress this problem would be to collect labeled data in the

Pritish Sahu and Behnam Gholami contributed equally to this work.

test domain and learn a test-speciﬁc classiﬁer while possi-
bly leveraging the model estimated from the training data.
Nevertheless, this would typically be a highly costly effort.

Domain adaptation, a formalism to circumvent the afore-
mentioned problem, is the task of adapting a model trained
in one domain, called the source, to another target domain,
where the source domain data is typically fully labeled but
we only have access to images from the target domain with
no (or very few) labels. Although there are several slightly
different setups for the problem, in this paper we focus on
the unsupervised domain adaptation (UDA) with classiﬁ-
cation of instances as the ultimate objective. That is, given
the fully labeled data from the source domain and unlabeled
data from the target, the goal is to learn a classiﬁer that per-
forms well on the target domain itself.

One mainstream direction to tackle UDA is the shared
space embedding process. The idea is to ﬁnd a latent space
shared by both domains such that the classiﬁer learned on
it using the fully labeled data from the source will also per-
form well on the target domain. This is accomplished, and
supported in theory [3], by enforcing a requirement that the
distributions of latent points in the two domains be indis-
tinguishable from each other. A large family of UDA ap-
proaches including [21, 19, 14, 1, 16, 35, 15, 28, 38, 18]
leverage this idea (see Sec. 4 for more details). However,
their performance remains unsatisfactory, in part because
the methods inherently rely on matching of marginal, class-
free, distributions while using the underlying assumption
that the shift in the two distributions, termed covariate shift
[56], can be reduced without using the target domain labels.

To address this issue, as effective solution was proposed
in [51], which aims to take into account the class-speciﬁc
decision boundary. Its motivation follows the theorem in [2]
relating the target domain error to the maximal disagree-
ment between any two classiﬁers, tighter than the former
bound in [3]. It implies that a provably small target error is
achievable by minimizing the maximum classiﬁer discrep-
ancy (MCD). The approach in [51], the MCD Algorithm

14380

(MCDA for short), attempted to minimize MCD directly
using adversarial learning similar to GAN training [20], i.e.,
through solving a minimax problem that ﬁnds the pair of
most discrepant classiﬁers and reduces their disagreement.
In this paper we further extend the MCD principle by
proposing a more systematic and effective way to achieve
consistency in the hypothesis space of classiﬁers H through
Gaussian process (GP) [47] endowed priors, with deep neu-
ral networks (DNNs) used to induce their mean and covari-
ance functions. The crux of our approach is to regard the
classiﬁers as random functions and use their posterior dis-
tribution conditioned on the source samples, as the prior on
H. The key consequence and advantages of this Bayesian
treatment are: (1) One can effectively minimize the incon-
sistency in H over the target domain by regularizing the
source-induced prior using a max-margin learning princi-
ple [63], a signiﬁcantly easier-to-solve1 task than the min-
imax optimization of [51] which may suffer from the dif-
ﬁculty of attaining an equilibrium point coupled with the
need for proper initialization. (2) We can quantify the mea-
sure of prediction uncertainty and use it to credibly gauge
the quality of prediction at test time.

Although GP models were previously known to suffer
from the scalability issues [47], we utilize recent deep ker-
nel techniques [27, 64] to turn the non-parametric Bayesian
inference into a more tractable parametric one, leading to
a learning algorithm computationally as scalable and ef-
ﬁcient as conventional (non-Bayesian) deep models. Our
extensive experimental results on several standard bench-
marks demonstrate that the proposed approach achieves
state-of-the-art prediction performance, outpacing recent
UDA methods including MCDA [51].

2. Problem Setup and Preliminaries

We begin with the formal description of the UDA task

for a multi-class classiﬁcation problem.

Unsupervised domain adaptation: Consider the joint
space of inputs and class labels, X × Y where Y =
{1, . . . , K} for (K-way) classiﬁcation. Suppose we have
two domains on this joint space, source (S) and target (T),
deﬁned by unknown distributions pS(x, y) and pT (x, y),
respectively. We are given source-domain training exam-
ples with labels DS = {(xS
i=1 and target data
DT = {xT
i=1 with no labels. We assume the shared set of
class labels between the two domains. The goal is to assign
the correct class labels {yT

i } to target data points DT .

i )}NS

i }NT

i , yS

To tackle the problem in the shared latent space frame-
work, we seek to learn the embedding function G : X → Z
and a classiﬁer h : Z → Y in the shared latent space

1In the sense of optimization stability: it is well known that a good equi-
librium point of the minimax optimization (adversarial learning), adopted
in MCDA, is difﬁcult to attain computationally, being highly sensitive to
the choice of optimization hyperparameters.

Z. The embedding function G(·) and the classiﬁer h(·)
are shared across both domains and will be applied to clas-
sify samples in the target domain using the composition
y = h(z) = h(G(x)).

Our goal is to ﬁnd the pair (h, G) resulting in the lowest

generalization error on the target domain,

(h∗, G∗) = arg min
h,G

eT (h, G)

= arg min
h,G

E(x,y)∼pT (x,y)[I(h(G(x)) 6= y)],

(1)

(2)

with I(·) the 1/0 indicator function. Optimizing eT directly
is typically infeasible. Instead, one can exploit the upper
bounds proposed in [2] and [3], which we restate, without
loss of generality, for the case of ﬁxed G.

Theorem 1 [2, 3] Suppose that H is symmetric (i.e., h ∈ H
implies −h ∈ H). For any h ∈ H, the following holds2:

eT (h) ≤ eS(h) + sup

≤ eS(h) + sup

h,h′∈H(cid:12)(cid:12)dS(h, h′) − dT (h, h′)(cid:12)(cid:12) + e∗ (3)
h∈H(cid:12)(cid:12)dS(h, +1) − dT (h, +1)](cid:12)(cid:12) + e∗ (4)

Here eS(h) is the error rate of h(·) on the source do-
main, e∗ := minh∈H eS(h) + eT (h), and dS(h, h′) :=
Ez∼S[I(h(z) 6= h′(z))] denotes the discrepancy between
two classiﬁers h and h′ on the source domain S, and simi-
larly for dT (h, h′). We use z ∼ S to denote the distribution
of z in the latent space induced by G and pS(x, y).

Looser bound. With e∗ the uncontrollable quantity, due
to the lack of labels for T in the training data, the optimal
h can be sought through minimization of the source error
eS(h) and the worst-case discrepancy terms. In the looser
bound (4), the supremum term is, up to a constant, equiv-
alent to suph∈H
Ez∼S[I(h(z) = +1)] + Ez∼T [I(h(z) =
−1)], the maximal accuracy of a domain discriminator (la-
beling S as +1 and T as −1). Hence, to reduce the up-
per bound one needs to choose the embedding G where the
source and the target inputs are indistinguishable from each
other in Z. This input density matching was exploited in
many previous approaches [61, 17, 7, 60], and typically ac-
complished through adversarial learning [20] or the maxi-
mum mean discrepancy [23].

Tighter bound. Recently, [51] exploited the tighter
bound (3) under the assumption that H is restricted to clas-
siﬁers with small errors on S. Consequently, dS(h, h′) be-
comes negligible as any two h, h′ ∈ H agree on the source
domain. The supremum in (3), interpreted as the Maximum
Classiﬁer Discrepancy (MCD), reduces to:

sup

h,h′∈H

E(x,y)∼pT (x,y)[I(h(z) 6= h′(z))].

(5)

Named MCDA, [51] aims to minimize (5) directly via
adversarial-cooperative learning of two deep classiﬁer net-
works h(z) and h′(z). For the source domain data, these

2Note that the theorems assume binary classiﬁcation (y ∈ {+1, −1}),

however, they can be straightforwardly extended to multi-class setups.

4381

two classiﬁers and G aim to minimize the classiﬁcation er-
rors cooperatively. An adversarial game is played in the
target domain: h and h′ aim to be maximally discrepant,
whereas G seeks to minimize the discrepancy3.

3. Our Approach

Overview. We adopt the MCD principle, but propose
a more systematic and effective way to achieve hypothesis
consistency, instead of the difﬁcult minimax optimization.
Our idea is to adopt a Bayesian framework to induce the
hypothesis space. Speciﬁcally, we build a Gaussian process
classiﬁer model [47] on top of the share space. The GP
posterior inferred from the source data naturally deﬁnes our
hypothesis space H. We then optimize the embedding G
and the kernel of the GP so the posterior hypothesis distri-
bution leads to consistent, least discrepant, class predictions
most of the time, resulting in reduction of (5). Our approach
is denoted by GPDA, and its details are described below.

3.1. GP endowed Maximum Separation Model

We consider a multi-class Gaussian process classiﬁer de-
ﬁned on Z: there are K underlying latent functions f (·) :=
{fj(·)}K
j=1, a priori independently GP distributed, namely

P (f ) =

K

Yj=1

P (fj), fj ∼ GP(cid:0)0, kj(·, ·)(cid:1),

(6)

where each kj is a covariance function of fj , deﬁned on
Z × Z. For an input point z ∈ Z, we regard fj(z) as
the model’s conﬁdence toward class j, leading to the class
prediction rule:

class(z) = arg max
1≤j≤K
We use the softmax likelihood model,

fj(z).

(7)

P (y = j|f (z)) =

,

for j = 1, . . . , K.

(8)

Source-driven H Prior. The labeled source data, DS, in-
duces a posterior distribution on the latent functions f ,

p(f |DS) ∝ p(f ) ·

NS

Yi=1

P (yS

i |f (zS

i )),

(9)

i = G(xS

where zS
i ). The key idea is to use (9) to deﬁne our
hypothesis space H. The posterior places most of its proba-
bility mass on those f that attain high likelihood scores on S
while being smooth due to the GP prior. It should be noted
that we used the term prior of the hypothesis space H that
is induced from the posterior of the latent functions f . We
use the H prior and the posterior of f interchangeably.

Note that due to the non-linear/non-Gaussian likelihood
(8), exact posterior inference is intractable, and one has to
resort to approximate inference. We will discuss an ap-
proach for efﬁcient variational approximate inference in

3See the Supplementary Material for further technical details.

efj (z)
r=1 efr(z)

PK

Sec. 3.2. For the exposition here, let us assume that the
posterior distribution is accessible.
Target-driven Maximally Consistent Posterior. While
DS serves to induce the prior of H, DT will be used to
reshape this prior. According to MCD, we want this hy-
pothesis space to be shaped in the following way: for each
target domain point z = G(x), x ∼ T , the latent function
values f (z) sampled from the posterior (9) should lead to
the class prediction (made by (7)) that is as consistent as
possible across the samples.

This is illustrated in Fig. 1. Consider two different H
priors pA and pB at a point z, pA(f (z)) and pB(f (z)),
where for brevity we drop the conditioning on DS in no-
tation. The class cardinality is K = 3. For simplicity, we
assume that the latent functions fj ’s are independent from
each other. Fig. 1 shows that the distributions of fj ’s are
well-separated from each other in pA, yet overlap signiﬁ-
cantly in pB. Hence, there is a strong chance for the class
predictions to be inconsistent in pB (identical ordering of
colored samples below ﬁgure), but consistent in pA. This
means that the hypothesis space induced from pB contains
highly discrepant classiﬁers, whereas most classiﬁers in the
hypothesis space of pA agree with each other (least dis-
crepant). In other words, the maximum discrepancy prin-
ciple translates into the maximum posterior separation in
our Bayesian GP framework.

We describe how this goal can be properly formulated.
First we consider the posterior of f to be approximated as an
independent Gaussian4. For any target domain point z ∼ T
and each j = 1, . . . , K let the mean and the variance of the
H prior in (9) be:

σ2

(10)

µj(z) := Z fj(z) p(cid:0)fj(z)|DS, z(cid:1) dfj(z),
j (z) := Z (fj(z) − µj(z))2 p(cid:0)fj(z)|DS, z(cid:1) dfj(z). (11)

The maximum-a-posterior (MAP) class prediction by the
model is denoted by j∗ = arg max1≤j≤K µj(z). As we
seek to avoid ﬂuctuations in class prediction j∗ across sam-
ples, we consider the worst scenario where even an unlikely
(e.g., at 5% chance level) sample from fj(z), j other than
j∗, cannot overtake µj∗ (z). That is, we seek

µj∗ (z) − ασj∗ (z) ≥ max

j6=j∗ (cid:0)µj(z) + ασj(z)(cid:1),

(12)

where α is the normal cutting point for the least chance
(e.g., α = 1.96 if 2.5% one-side is considered).

While this should hold for most samples, it will not hold
for all. We therefore introduce an additional slack ξ ≥ 0 to
relax the desideratum. Furthermore, for ease of optimiza-
tion5, we impose slightly stricter constraint than (12), lead-

4This choice conforms to the variational density family we choose in

Sec. 3.2.

5We used the topk() function in PyTorch to compute the largest
and the second largest elements. The function allows automatic gradients.

4382

able GP approximation schemes based on the random fea-
ture expansion [46] and the pseudo/induced inputs [45, 54,
59, 13], here we adopt the deep kernel trick [27, 64] to
exploit the deeply structured features. The main idea is
to model an explicit ﬁnite-dimensional feature space map-
ping to deﬁne a covariance function. Speciﬁcally, we con-
sider a nonlinear feature mapping φ : Z → Rd such that
the covariance function is deﬁned as an inner product in a
feature space, namely k(z, z′) := φ(z)⊤φ(z′), where we
model φ(·) as a deep neural network. A critical advantage
of explicit feature representation is that we turn the non-
parametric GP into a parametric Bayesian model. As a con-
sequence, all inference operations in the non-parametric GP
reduce to computationally more efﬁcient parametric ones,
avoiding the need to store the Gram matrix of the entire
training data set, as well as its inversion.

Formally, we consider K latent functions modeled as
fj(z) = w⊤
j φ(z) with wj ∼ N (0, I) independently for
j = 1, . . . , K. We let W = [w1, . . . , wK]⊤. Note
that the feature function φ(·) is shared across classes to
reduce the number of parameters and avoid overﬁtting.
The parameters of the deep model that represents φ(·)
serve as GP kernel parameters, since Cov(f (z), f (z′)) =
Cov(w⊤φ(z), w⊤φ(z′)) = φ(z)⊤φ(z′) = k(z, z′). Con-
sequently, the source-driven H prior (9) becomes

p(W|DS) ∝

K

Yj=1

N (wj; 0, I) ·

NS

Yi=1

P (yS

i |Wφ(zS

i )). (15)

Since computing (15) is intractable, we introduce a vari-
ational density q(W) to approximate it. We assume a fully
factorized Gaussian,

q(W) =

K

Yj=1

N (wj; mj, Sj),

(16)

where mj ∈ Rd and Sj ∈ Rd×d constitute the variational
parameters. We further let Sj ’s be diagonal matrices. To
have q(W) ≈ p(W|DS), we use the following fact that the
marginal log-likelihood can be lower bounded:

where the evidence lower-bound (ELBO) is deﬁned as:

log P(cid:16){yS

ELBO :=

i=1, φ(·)(cid:17) ≥ ELBO,
i }NS

i }NS

{zS

i=1 (cid:12)(cid:12)(cid:12)
Xi=1
Eq(W)(cid:2) log P (yS

NS

i |Wφ(zS

i ))(cid:3) −

K

Xj=1

KL(cid:0)q(wj) || N (wj; 0, I)(cid:1),

(17)

(18)

with the likelihood stemming from (8). As the gap in (17)
is the KL divergence between q(W) and the true posterior
p(W|DS), increasing the ELBO wrt the variational param-
eters {(mj, Sj)} brings q(W) closer to the true posterior.
Raising the ELBO wrt the GP kernel parameters (i.e., the

4383

Fig. 1: Illustration of ideal (pA) and problematic (pB) posteriors
at some ﬁxed point z in the target domain. For each posterior, we
also depict two plausible samples (marked as crosses). In pA, most
samples f (z), including the two shown, are consistent in deciding
the class label (class 2, red, predicted in this case). On the other
hand, in pB where f1(z) and f2(z) have considerable overlap,
there is signiﬁcant chance of different predictions: class 2 for the
ﬁrst sample and class 1 for the second.

ing to the ﬁnal constraint:
µj(z) ≥ 1 + max
j6=j∗

max
1≤j≤K

µj(z) + α max
1≤j≤K

σj(z) − ξ(z).

(13)
A constant, 1 here, was added to normalize the scale of fj ’s.
Our objective now is to ﬁnd such embedding G, GP
kernel parameters k, k(z, z′) = φ(z)⊤φ(z′), and minimal
slack ξ, to impose (13). Equivalently, we pose it as the fol-
lowing optimization problem, for each z ∼ T :

G,k (cid:18) max

min

j6=j∗

µj(z)− max
1≤j≤K

µj(z)+1+α max
1≤j≤K

σj(z)(cid:19)+

(14)

with (a)+ = max(0, a).

Note that (13) and (14) are reminiscent of the large-
margin classiﬁer learning in traditional supervised learn-
ing [62]. In contrast, we replace the ground-truth labels with
the the most conﬁdently predicted labels by our model since
the target domain is unlabeled. This aims to place class
boundaries in low-density regions, in line with entropy min-
imization or max-margin conﬁdent prediction principle of
classical semi-supervised learning [22, 71, 58, 8].

In what follows, we describe an approximate, scalable
GP posterior inference, where we combine the variational
inference optimization with the aforementioned posterior
maximum separation criterion (14).

3.2. Variational Inference with Deep Kernels

We describe our scalable variational inference approach
to approximate the posterior (9). Although there are scal-

parameters of φ) and the embedding6 G can potentially im-
prove the marginal likelihood, i.e., the left hand side in (17).
In optimizing the ELBO (18), the KL term (denoted by

KL) can be analytically derived as

KL =

1
2

K

Xj=1(cid:0) Tr(Sj) + ||mj||2

2 − log det(Sj) − d(cid:1). (19)

However, there are two key challenges: the log-likelihood
expectation over q(W) does not admit a closed form,
and one has to deal with large NS. To address the for-
mer, we adopt Monte-Carlo estimation using M iid sam-
ples {W(m)}M
m=1 from q(W), where the samples are ex-
pressed in terms of the variational parameters (i.e., the
reparametrization trick [30]) to facilitate optimization. That
is, for each j and m,

w(m)

j = mj + S1/2
j ǫ

(m)
j

,

ǫ

(m)
j ∼ N (0, I).

(20)

For the latter issue, we use stochastic optimization with a
random mini-batch BS ⊂ DS. That is, we optimize the
sample estimate of the log-likelihood deﬁned as:

LL =

1
M

M

Xm=1

NS

|BS| Xi∈BS

log P (yS

i |W(m)φ(zS

i )).

(21)

3.3. Optimization Strategy

We combine the maximum posterior separation criterion
in (14) with the variational inference of the previous section
to arrive at the comprehensive optimization task.

Our approximate posterior (16) leads to closed-form ex-

pressions for µj(z) and σj(z) in (10–11) as follows:

j φ(z),

µj(z) ≈ m⊤

σj(z) ≈ (cid:0)φ(z)⊤Sj φ(z)(cid:1)1/2

(22)
With q(W) ﬁxed, we rewrite our posterior maximum sepa-
ration loss in (14) as follows. We consider stochastic opti-
i }NT
mization with a random mini-batch BT ⊂ DT = {zT
sampled from the target domain data.

i=1

.

MS :=

1

|BT | Xi∈BT

(cid:18) max

j6=j∗

m⊤

j φ(zT

i ) − max
1≤j≤K

m⊤

j φ(zT
i )

+ 1 + α max

1≤j≤K(cid:0)φ(zT

i )⊤Sj φ(zT

i )(cid:1)1/2(cid:19)+

(23)

Combining all objectives thus far, our GPDA algorithm7
can be summarized as the following two optimizations al-
ternating with each other:

• min{mj ,Sj } −LL + KL

(variational inference)

• minG,k −LL + KL + λ · MS

(model selection)

with λ the impact of the max separation, e.g., λ = 10.0.

6Note that the inputs z also depend on G.
7 In the algorithmic point of view, our algorithm can be seen as a max-
margin Gaussian process classiﬁer on the original input space X without
explicitly considering the shared space Z. See Supplement for details.

4. Related Work

There has been extensive prior work on domain adapta-
tion [10]. Recent approaches have focused on transferring
deep neural network representations from a labeled source
dataset to an unlabeled target domain by matching the dis-
tributions of features between different domains, aiming to
extract domain-invariant features [48, 4, 9, 40, 50, 67, 65,
6, 37, 49]. To this end, it is critical to ﬁrst deﬁne a measure
of distance (divergence) between source and target distri-
butions. One popular measure is the non-parametric Maxi-
mum Mean Discrepancy (MMD) (adopted by [6, 66, 35]),
which measures the distance between the sample means of
the two domains in the reproducing Kernel Hilbert Space
(RKHS) induced by a pre-speciﬁed kernel. The deep Cor-
relation Alignment (CORAL) method [57] attempted to
match the sample mean and covariance of the source/target
distributions, while it was further generalized to potentially
inﬁnite-dimensional feature spaces in [69] to effectively
align the RKHS covariance descriptors across domains.

The Deep Adaptation Network (DAN) [34] applied
MMD to layers embedded in a RKHS to match higher or-
der moments of the two distributions more effectively. The
Deep Transfer Network (DTN) [68] achieved alignment of
source and target distributions using two types of network
layers based on the MMD distance: the shared feature ex-
traction layer that can learn a subspace that matches the
marginal distributions of the source and the target samples,
and the discrimination layer that can match the conditional
distributions by classiﬁer transduction.

Many recent UDA approaches leverage deep neural net-
works with the adversarial training strategy [48, 4, 9, 40,
50, 67], which allows the learning of feature representa-
tions to be simultaneously discriminative for the labeled
source domain data and indistinguishable between source
and target domains. For instance, [16] proposed a tech-
nique called the Domain-Adversarial Training of Neural
Networks (DANN), which allows the network to learn do-
main invariant representations in an adversarial fashion by
adding an auxiliary domain classiﬁer and back-propagating
inverse gradients. The Adversarial Discriminative Domain
Adaptation (ADDA) [60] ﬁrst learns a discriminative fea-
ture subspace using the labeled source samples. Then, it en-
codes the target data to this subspace using an asymmetric
transformation learned through a domain-adversarial loss.
The DupGAN [26] proposed a GAN-like model [20] with
duplex discriminators to restrict the latent representation to
be domain invariant but category preserving.

In parallel, within the shared-latent space framework,
[32] proposed an unsupervised image-to-image translation
(UNIT) framework based on the Coupled GANs [33]. An-
other interesting idea is the pixel-level domain adaptation
method (PixelDA) [6] where they imposed alignment of
distributions not in the feature space but directly in the raw

4384

(a) Digits.

(b) Trafﬁc Signs.

(c) VisDA.

Fig. 2: Example images from benchmark datasets. (a) Samples
from MNIST, USPS, and SVHN datasets. (b) Samples from SYN
SIGNS (ﬁrst two rows), and GTSRB.

pixel space via the adversarial approaches. The intention
is to adapt the source samples as if they were drawn from
the target domain, while maintaining the original content.
Similarly, [41] utilized the CycleGAN [70] to constrain the
features extracted by the encoder network to reconstruct the
images in both domains. In [52], they proposed a joint ad-
versarial discriminative approach that can transfer the infor-
mation of the target distribution to the learned embedding
using a generator-discriminator pair.

5. Experimental Results

We compare the proposed method8 with state-of-the-
art on standard benchmark datasets9. Digit classiﬁcation
task consists of three datasets, containing ten digit classes:
MNIST [31], SVHN [42], USPS [60]. We also evaluated
our method on the trafﬁc sign datasets, Synthetic Trafﬁc
Signs (SYN SIGNS) [39] and the German Trafﬁc Signs
Recognition Benchmark [55] (GTSRB), which contain 43
types of signs. Finally, we report performance on VisDA
object classiﬁcation dataset [43] with more than 280K im-
ages across twelve categories. The details of the datasets as
well as additional experiments on the Ofﬁce-31 dataset are
available in the Supplementary Material. Fig. 2 illustrates
image samples from different datasets and domains.

We evaluate the performance of all methods with the
classiﬁcation accuracy score. We used ADAM [29] for
training; the learning rate was set to 0.0002 and momentum
to 0.5 and 0.999. We used batches of size 32 from each
domain, and the input images were mean-centered. The
hyper-parameters are empirically set as λ = 50.0, α = 2.0.
The sensitivity w.r.t. hyperparameters λ and α will be dis-
cussed in Sec. 5.3. We also used the same network structure
as [51]. Speciﬁcally, we employed the CNN architecture
used in [16] and [6] for digit and trafﬁc sign datasets and
used ResNet101 [25] model pre-trained on Imagenet [11].
We added batch normalization to each layer in these models.
Quantitative evaluation involves a comparison of the perfor-
mance of our model to previous works and to Source Only

8Our code is publicly available in https://seqam-lab.github.io/GPDA/
9While we focus on classiﬁcation tasks, our approach can be readily ap-
plied to and formulated for other related tasks, e.g., semantic segmentation
treated as multiple concurrent classiﬁcation problems.

that do not use any domain adaptation. For ”Source Only”
baseline, we train models on the unaltered source training
data and evaluate on the target test data. The training details
for comparing methods are available in our Supplementary
material due to the space limit.

5.1. Results on Digit and Trafﬁc Signs datasets

We show the accuracy of different methods in Tab. 1.
It can be seen the proposed method outperformed competi-
tors in all settings conﬁrming consistently better generaliza-
tion of our model over target data. This is partially due to
combining DNNs and GPs/Bayesian approach. GPs exploit
local generalization by locally interpolating between neigh-
bors [5], adjusting the target functions rapidly in the pres-
ence of training data. DNNs have good generalization capa-
bility for unseen input conﬁgurations by learning multiple
levels of distributed representations. The results demon-
strate GPDA can improve generalization performance by
adopting both of these advantages.

5.2. Results on VisDA dataset

Results for this experiment are summarized in Tab. 2. We
observe that our GPDA achieved, on average, the best per-
formance compared to other competing methods. Due to
vastly varying difﬁculty of classifying different categories
of objects, in addition to reporting the average classiﬁcation
accuracy we also report the average rank of each method
over all objects (the lower rank, the better). The higher per-
formance of GPDA compared to other methods is mainly
attributed to modeling the classiﬁer as a random function
and consequently incorporating the classiﬁer uncertainty
(variance of the prediction) into the proposed loss function,
Eq. 23. The image structure for this dataset is more com-
plex than that of digits, yet our method exhibits very strong
performance even under such challenging conditions.
Another key observation is that some competing methods,
e.g., MMD, DANN, perform worse than the source-only
model in classes such as car and plant, while GPDA and
MCDA performed better across all classes, clearly demon-
strating the effectiveness of the MCD principle.

5.3. Ablation Studies

Two complementary studies are conducted to investigate
the impact of two hyper-parameters α and λ, controlling the
trade off of the variance of the classiﬁer’s posterior distribu-
tion and the MCD loss term, respectively. To this end, we
conducted additional experiments for the digit datasets to
analyze the parameter sensitivity of GPDA w.r.t. α and λ,
with results depicted in Fig. 3a and 3b, respectively. Sensi-
tivity analysis is performed by varying one parameter at the
time over a given range, while for the other parameters we
set them to their ﬁnal values (α = 2, λ = 50). From Fig. 3b,
we see that when λ = 0 (no MCD regularization term), the

4385

Tab. 1: Classiﬁcation results on the digits and trafﬁc signs datasets
(best viewed in color). The best score is in bold red, second best
in light red. Results are cited from each study. The score of MMD
is cited from DSN [7]. † indicates the method used a few labeled
target samples as validation, different from our GPDA setting. We
repeated each experiment ﬁve times and report the average and
the standard deviation of the accuracy. The accuracy for MCDA
was obtained from classiﬁer F1. n is MCDA’s hyper-parameter,
which denotes the number of times the feature generator is updated
to mimic classiﬁers. MNIST∗ and USPS∗ denote all the training
samples were used to train the models.

METHOD

Source Only
MMD † [34]
DANN † [16]
DSN † [7]
ADDA [60]
CoGAN [33]
PixelDA [6]
ATDA † [50]
ASSC [24]
DRCN [18]

G2A [53]
SimNet [44]

MCDA (n = 2)
MCDA (n = 3)
MCDA (n = 4)

GPDA

SYNSIG MNIST MNIST∗ USPS
to

SVHN
to
MNIST GTSRB
67.1
71.1
71.1
82.7
76.01.8
-
-
86.2
95.71.5
82.00.1

85.1
91.1
88.7
93.1
-
-
-
96.1
82.81.3
-

to
USPS
76.7
-
77.11.8
91.3
89.40.2
91.20.8
-
-
-
91.80.09

to
USPS∗
79.4
81.1
85.1
-
-
-
95.9
-
-
-

to
MNIST
63.4
-
73.00.2
-
90.10.8
89.10.8
-
-
-
73.70.04

92.4
-

94.22.6
95.90.5
96.20.4

98.20.1

-
-

93.50.4
94.00.4
94.40.3

92.8
-

92.10.8
93.80.8
94.20.7

95.3
96.4

93.11.9
95.60.9
96.50.3

90.8
95.6

90.01.4
91.80.9
94.10.3

96.190.2

96.450.15

98.110.1

96.370.1

S-->M
M-->U
M-->U (all)
U-->M

100

C
C
A

95

90

85

0

S-->M
M-->U
M-->U(all)
U-->M

100

C
C
A

95

90

85

80

1

2

α

3

75

0

1

10

λ

50

100

(a) Sensitivity to α

(b) Sensitivity to λ

Fig. 3: Sensitivity analysis of our GPDA on the Digit datasets.
S → M denotes adaptation from SVHN to MNIST (similarly for
others), and M → U (all) indicates using all training samples.

performance drops considerably. As λ increases from 0 to
50, the performance also increases demonstrating the bene-
ﬁt of hypothesis consistency (MS term) over the target sam-
ples. Indeed, using the proposed learning scheme, we ﬁnd
a representation space in which we embed the knowledge
from the target domain into the learned classiﬁer.

Similarly, from Fig. 3a, we see that when α = 0 (no pre-
diction uncertainty) the classiﬁcation accuracy is lower than
the case where we utilize the prediction uncertainty, α > 0.
The key observation is that it is more beneﬁcial to make use
of the information from the full posterior distribution of the
classiﬁer during the learning process in contrast to when the
classiﬁer is considered as a deterministic function.

Fig. 4: Histograms of prediction (un)certainty for our models: (a)
after convergence, (b) at an early stage of training. Abscissa is the
Bhattacharyya distance b/w two largest mean posteriors, an indica-
tion of prediction certainty; the higher the distance, the more cer-
tain the prediction is. For each model, we compute the histograms
of correctly and incorrectly predicted samples (green vs. red). In
our ﬁnal model (a), there is a strong correlation between prediction
(un)certainty (abscissa) and prediction correctness (color).

5.4. Prediction Uncertainty vs. Prediction Quality

Another advantage of our GPDA model, inherited from
Bayesian modeling, is that it provides a quantiﬁed mea-
sure of prediction uncertainty.
In the multi-class setup
considered here, this uncertainty amounts to the degree of
overlap between two largest mean posteriors, p(fj∗ (z)|DS)
and p(fj† (z)|DS), where j∗ and j† are the indices of the
largest and the second largest among the posterior means
{µj(z)}K
j=1, respectively (c.f., (10)). Intuitively, if the two
are overlapped signiﬁcantly, our model’s decision is less
certain, meaning that we anticipate the class prediction may
not be trustworthy. On the other hand, if the two are well
separated, we expect high prediction quality.

To verify this hypothesis more rigorously, we evaluate
the distances between two posteriors, the measure of cer-
tainty in prediction, for two different cohorts: correctly
classiﬁed test target samples by our model and the in-
correctly predicted ones. Speciﬁcally, for the SVHN to
MNIST adaptation task, we evaluate the Bhattacharyya dis-
tances [12] between the two cohorts.
In our variational
Gaussian approximation (22), the Bhattacharyya distance
can be computed in a closed form; Supplement for details.

The histograms of the distances are depicted in Fig. 4,
where we contrast the two models, one at an early stage of
training and the other after convergence. Our ﬁnal model
in Fig. 4(a) exhibits large distances for most samples in the
correctly predicted cohort (green), implying well separated
posteriors or high certainty. For the incorrectly predicted
samples (red), the distances are small suggesting signiﬁcant
overlap between the two posteriors, i.e., high uncertainty. In
contrast, for the model prior to convergence, Fig. 4(b), the
two posteriors overlap strongly (small distances along hor-

4386

0.02.55.07.510.012.515.017.520.0010203040Proportion (%)(a) Final model (epoch 360)Correctly predicted samplesInorrectly predicted samples0123450510Proportion (%)(b) Model before convergence (epoch 10)Correctly predicted samplesInorrectly predicted samplesTab. 2: Accuracy of the ResNet model ﬁne-tuned on the VisDA dataset. All models adopt ResNet101 except for [44] which used
ResNet152. Last column shows the average rank of each method over all classes. The best (in bold red), the second best (in red).

Method
Source Only

MMD [34]
DANN [16]

SimNet [44]

MCDA (n = 2)
MCDA (n = 3)
MCDA (n = 4)

GPDA (ours)

plane
55.1

87.1
81.9

94.3

81.1
90.3
87.0

83.0

bcycl
53.3

63.0
77.7

bus
61.9

76.5
82.8

car
59.1

42.0
44.3

82.3

73.5

47.2

55.3
49.3
60.9

83.6
82.1
83.7

65.7
62.9
64.0

74.3

80.4

66.0

horse
80.6

knife mcycl
17.9
79.7

90.3
81.2

87.9

87.6
91.8
88.9

87.6

42.9
29.5

49.2

72.7
69.4
79.6

75.3

85.9
65.1

75.1

83.1
83.8
84.7

83.8

person

31.2

53.1
28.6

79.7

73.9
72.8
76.9

73.1

plant
81.0

sktbrd
26.5

49.7
51.9

85.3

85.3
79.8
88.6

90.1

36.3
54.6

68.5

47.7
53.3
40.3

57.3

train
73.5

85.8
82.8

20.7
7.8

81.1

50.3

73.2
81.5
83.0

27.1
29.7
25.8

truck mean Ave. ranking
8.5

52.4

7.25

61.1
57.4

72.9

69.7
70.6
71.9

4.41
5.58

3.83

4.25
4.08
3.00

80.2

37.9

73.31

2.75

Fig. 5: Selected test (MNIST) images according to the Bhat-
tacharyya distances. Right: samples with low distances (uncer-
tain prediction). Left: high distances (certain prediction). Top:
correctly classiﬁed by our model. Bottom: incorrectly classiﬁed.
For each image, GT, Pr, and d means ground-truth label, predicted
label, and the distance, respectively.

izontal axis) for most samples regardless of the correctness
of prediction. This conﬁrms our algorithm enforces poste-
rior separation by large margin during the training process.

This analysis also suggests that the measure of predic-
tion uncertainty provided by our GPDA model, can be used
as an indicator of prediction quality, namely whether the
prediction made by our model is trustworthy or not. To ver-
ify this, we depict some sample test images in Fig. 5. We
differentiate samples according to their Bhattacharyya dis-
tances. When the prediction is uncertain (left panel), we
see that the images are indeed difﬁcult examples even for
human. An interesting case is when the prediction certainty
is high but incorrectly classiﬁed (lower right panel), where
the images look peculiar in the sense that humans are also
prone to misclassify those with considerably high certainty.

5.5. Analysis of Shared Space Embedding

We use t-SNE [36] on VisDA dataset to visualize the fea-
ture representations from different classes. Fig. 6 depicts
the embedding of the learned features G(x), and the origi-
nal features x. Colors indicate source (red) and target (blue)
domains. Notice that GPDA signiﬁcantly reduces the do-
main mismatch, resulting in the expected tight clustering.
This is partially due to the use of the proposed probabilis-
tic MCD approach, which shrinks the classiﬁer hypothesis

(a) Original (by domain)

(b) Original (by classes)

(c) GPDA (by domain)

(d) GPDA (by classes)

Fig. 6: Feature visualization for embedding of digit datasets for
adapting SVHN to MNIST using t-SNE algorithm. The ﬁrst and
the second columns show the domains and classes, respectively,
with color indicating domain and class membership. a,b Original
features. c,d learned features for GPDA.

class to contain only consistent classiﬁers on target samples
while exploiting the uncertainty in the prediction.

6. Conclusion

We proposed a novel probabilistic approach for UDA
learns an efﬁcient domain-adaptive classiﬁer with
that
strong generalization to target domains. The key is to model
the classiﬁer’s hypothesis space in Bayesian fashion and im-
pose consistency over the target samples in their space by
constraining the classiﬁer’s posterior distribution. To tackle
the intractability of computing the exact posteriors, we com-
bined the variational Bayesian method with a deep kernel
technique to efﬁciently approximate the classiﬁer’s poste-
rior distribution. We showed, on three challenging bench-
mark datasets for image classiﬁcation, that the proposed
method outperforms current state-of-the-art in unsupervised
domain adaptation of visual categories.

4387

SVHNMNISTSVHNMNISTReferences

[1] M. Baktashmotlagh, M. T. Harandi, B. C. Lovell, and
M. Salzmann. Unsupervised domain adaptation by domain
invariant projection.
In IEEE International Conference on
Computer Vision (ICCV), pages 769–776. IEEE, 2013. 1

[2] S. Ben-David, J. Blitzer, K. Crammer, A. Kulesza, F. Pereira,
and J. W. Vaughan. A theory of learning from different do-
mains. Machine Learning, 79(1–2):151–175, 2010. 1, 2

[3] S. Ben-David, J. Blitzer, K. Crammer, and F. Pereira. Anal-
ysis of representations for domain adaptation, 2007. In Ad-
vances in Neural Information Processing Systems. 1, 2

[4] S. Benaim and L. Wolf. One-sided unsupervised domain
In Advances in Neural Information Processing

mapping.
Systems (NIPS), pages 752–762, 2017. 5

[5] Y. Bengio, A. Courville, and P. Vincent. Representation
learning: A review and new perspectives. IEEE transactions
on pattern analysis and machine intelligence, 35(8):1798–
1828, 2013. 6

[6] K. Bousmalis, N. Silberman, D. Dohan, D. Erhan, and
D. Krishnan. Unsupervised pixel-level domain adaptation
with generative adversarial networks. In IEEE Conference
on Computer Vision and Pattern Recognition (CVPR), vol-
ume 1, page 7, 2017. 5, 6, 7

[7] K. Bousmalis, G. Trigeorgis, N. Silberman, D. Krishnan, and
D. Erhan. Domain separation networks. In Advances in Neu-
ral Information Processing Systems (NIPS), pages 343–351,
2016. 2, 7

[8] W.-L. Chao, B. Gong, K. Grauman, and F. Sha. Large-
Margin Determinantal Point Processes, 2015. Uncertainty
in AI. 4

[9] N. Courty, R. Flamary, A. Habrard, and A. Rakotomamonjy.
Joint distribution optimal transportation for domain adapta-
tion. In Advances in Neural Information Processing Systems
(NIPS), pages 3733–3742, 2017. 5

[10] G. Csurka. A comprehensive survey on domain adaptation

for visual applications. pages 1–35. Springer, 2017. 5

[11] J. Deng, W. Dong, R. Socher, L.-J. Li, K. Li, and L. Fei-
Fei.
Imagenet: A large-scale hierarchical image database.
In Computer Vision and Pattern Recognition, 2009. CVPR
2009. IEEE Conference on, pages 248–255. Ieee, 2009. 6

[12] K. G. Derpanis. The bhattacharyya measure. Mendeley Com-

puter, 1(4):1990–1992, 2008. 7

[13] A. Dezfouli and E. V. Bonilla. Scalable inference for Gaus-
In

sian process models with black-box likelihoods, 2015.
Advances in Neural Information Processing Systems. 4

[14] M. Gabavisani and V. Patel. Domain adaptive subspace clus-
tering. In British Machine Vision Conference. BMVA, 2016.
1

[15] M. Gabavisani and V. M. Patel. Adversarial domain adaptive
subspace clustering.
In IEEE International Conference on
Identity, Security, and Behavior Analysis, pages 1–8. IEEE,
2018. 1

[17] Y. Ganin, E. Ustinova, H. Ajakan, P. Germain, H. Larochelle,
F. Laviolette, M. Marchand, and V. Lempitsky. Domain ad-
versarial training of neural networks. Journal of Machine
Learning Research, 17(59):1–35, 2016. 2

[18] M. Ghifary, W. B. Kleijn, M. Zhang, D. Balduzzi, and
W. Li. Deep reconstruction-classiﬁcation networks for un-
supervised domain adaptation. In Euroupean Conference on
Computer Vision (ECCV), pages 597–613, 2016. 1, 7

[19] B. Gong, K. Grauman, and F. Sha. Connecting the dots with
landmarks: Discriminatively learning domain-invariant fea-
tures for unsupervised domain adaptation. In International
Conference on Machine Learning (ICML), pages 222–230,
2013. 1

[20] I. Goodfellow,

J. Pouget-Abadie, M. Mirza, B. Xu,
D. Warde-Farley, S. Ozair, A. Courville, and Y. Bengio. Gen-
erative adversarial nets, 2014. In Advances in Neural Infor-
mation Processing Systems. 2, 5

[21] R. Gopalan, R. Li, and R. Chellappa. Domain adaptation
for object recognition: An unsupervised approach. In IEEE
International Conference on Computer Vision (ICCV), pages
999–1006, 2011. 1

[22] Y. Grandvalet and Y. Bengio. Semi-supervised learning by
entropy minimization, 2004. In Proc. of Advances in Neural
Information Processing Systems. 4

[23] A. Gretton, K. M. Borgwardt, M. J. Rasch, B. Schlkopf, and
A. Smola. A kernel two-sample test. Journal of Machine
Learning Research, 13(1):723–773, 2012. 2

[24] P. Haeusser, T. Frerix, A. Mordvintsev, and D. Cremers. As-
sociative domain adaptation. In International Conference on
Computer Vision (ICCV), volume 2, page 6, 2017. 7

[25] K. He, X. Zhang, S. Ren, and J. Sun. Deep residual learn-
ing for image recognition. In Proceedings of the IEEE con-
ference on computer vision and pattern recognition, pages
770–778, 2016. 6

[26] L. Hu, M. Kan, S. Shan, and X. Chen. Duplex generative ad-
versarial network for unsupervised domain adaptation.
In
Proceedings of the IEEE Conference on Computer Vision
and Pattern Recognition, pages 1498–1507, 2018. 5

[27] W. Huang, D. Zhao, F. Sun, H. Liu, and E. Chang. Scalable
Gaussian process regression using deep neural networks,
2015. Proceedings of the Twenty-Fourth International Joint
Conference on Artiﬁcial Intelligence (IJCAI). 2, 4

[28] M. Kan, S. Shan, and X. Chen. Bi-shifting auto-encoder
for unsupervised domain adaptation. In IEEE International
Conference on Computer Vision (ICCV), pages 3846–3854,
2015. 1

[29] D. P. Kingma and J. Ba. Adam: A method for stochastic
optimization. International Conference on Learning Repre-
sentation (ICLR), 2015. 6

[30] D. P. Kingma and M. Welling. Auto-encoding variational
In Proceedings of the Second International

Bayes, 2014.
Conference on Learning Representations, ICLR. 5

[31] Y. LeCun, L. Bottou, Y. Bengio, and P. Haffner. Gradient-
based learning applied to document recognition. Proceed-
ings of the IEEE, 86(11):2278–2324, 1998. 6

[16] Y. Ganin and V. Lempitsky. Unsupervised domain adaptation
by backpropagation. International Conference on Machine
Learning (ICML), 2015. 1, 5, 6, 7, 8

[32] M.-Y. Liu, T. Breuel, and J. Kautz. Unsupervised image-to-
image translation networks. In Advances in Neural Informa-
tion Processing Systems (NIPS), pages 700–708, 2017. 5

4388

[33] M.-Y. Liu and O. Tuzel. Coupled generative adversarial net-
works. In D. D. Lee, M. Sugiyama, U. V. Luxburg, I. Guyon,
and R. Garnett, editors, Advances in Neural Information Pro-
cessing Systems (NIPS), pages 469–477. Curran Associates,
Inc., 2016. 5, 7

[34] M. Long, Y. Cao, J. Wang, and M. I. Jordan. Learning
transferable features with deep adaptation networks. Inter-
national Conference on Machine Learning (ICML), 2015. 5,
7, 8

[35] M. Long, J. Wang, G. Ding, J. Sun, and P. S. Yu. Trans-
fer joint matching for unsupervised domain adaptation.
In
IEEE Conference on Computer Vision and Pattern Recogni-
tion (CVPR), pages 1410–1417, 2014. 1, 5

[36] L. v. d. Maaten and G. Hinton. Visualizing data using t-sne.
Journal of Machine Learning Research, 9(Nov):2579–2605,
2008. 8

[37] M. Mancini, L. Porzi, S. R. Bul`o, B. Caputo, and E. Ricci.
Boosting domain adaptation by discovering latent domains.
arXiv preprint arXiv:1805.01386, 2018. 5

[38] T. Ming Harry Hsu, W. Yu Chen, C.-A. Hou, Y.-H. Hu-
bert Tsai, Y.-R. Yeh, and Y.-C. Frank Wang. Unsupervised
domain adaptation with imbalanced cross-domain data.
In
IEEE International Conference on Computer Vision (ICCV),
pages 4121–4129, 2015. 1

[39] B. Moiseev, A. Konev, A. Chigorin, and A. Konushin. Eval-
uation of trafﬁc sign recognition methods trained on synthet-
ically generated data.
In International Conference on Ad-
vanced Concepts for Intelligent Vision Systems, pages 576–
583. Springer, 2013. 6

[40] S. Motiian, Q. Jones, S. Iranmanesh, and G. Doretto. Few-
shot adversarial domain adaptation. In Advances in Neural
Information Processing Systems (NIPS), pages 6673–6683,
2017. 5

[41] Z. Murez, S. Kolouri, D. Kriegman, R. Ramamoorthi, and
K. Kim. Image to image translation for domain adaptation.
arXiv preprint arXiv:1712.00479, 13, 2017. 6

[42] Y. Netzer, T. Wang, A. Coates, A. Bissacco, B. Wu, and A. Y.
Ng. Reading digits in natural images with unsupervised fea-
ture learning. In NIPS workshop on deep learning and unsu-
pervised feature learning, volume 2011, page 5, 2011. 6

[43] X. Peng, B. Usman, N. Kaushik, J. Hoffman, D. Wang, and
K. Saenko. Visda: The visual domain adaptation challenge.
arXiv preprint arXiv:1710.06924, 2017. 6

[44] P. O. Pinheiro. Unsupervised domain adaptation with simi-

larity learning. CVPR, 2018. 7, 8

[45] J. Qui˜nonero-Candela and C. E. Rasmussen. A unifying view
of sparse approximate Gaussian process regression. Journal
of Machine Learning Research, 6:1939–1959, 2005. 4

[46] A. Rahimi and B. Recht. Random features for large-scale
kernel machines, 2008.
In Platt, J. C., Koller, D., Singer,
Y., and Roweis, S. T. (eds.), Advances in Neural Information
Processing Systems 20. 4

[49] A. Rozantsev, M. Salzmann, and P. Fua. Residual parame-
In Conference on

ter transfer for deep domain adaptation.
Computer Vision and Pattern Recognition, 2018. 5

[50] K. Saito, Y. Ushiku, and T. Harada. Asymmetric tri-training
for unsupervised domain adaptation. International Confer-
ence on Machine Learning (ICML), 2017. 5, 7

[51] K. Saito, K. Watanabe, Y. Ushiku, and T. Harada. Maximum
classiﬁer discrepancy for unsupervised domain adaptation.
Computer Vision and Pattern Recognition, 2018. 1, 2, 6

[52] S. Sankaranarayanan, Y. Balaji, C. D. Castillo, and R. Chel-
lappa. Generate to adapt: Aligning domains using generative
adversarial networks. ArXiv e-prints, abs/1704.01705, 2017.
6

[53] S. Sankaranarayanan, Y. Balaji, C. D. Castillo, and R. Chel-
lappa. Generate to adapt: Aligning domains using generative
adversarial networks. CVPR, 2018. 7

[54] E. Snelson and Z. Ghahramani. Sparse Gaussian processes
using pseudo-inputs, 2006. In Advances in Neural Informa-
tion Processing Systems. 4

[55] J. Stallkamp, M. Schlipsing, J. Salmen, and C. Igel. The ger-
man trafﬁc sign recognition benchmark: a multi-class classi-
ﬁcation competition. In Neural Networks (IJCNN), The 2011
International Joint Conference on, pages 1453–1460. IEEE,
2011. 6

[56] M. Sugiyama, S. Nakajima, H. Kashima, P. V. Buenau, and
M. Kawanabe. Direct importance estimation with model se-
lection and its application to covariate shift adaptation.
In
Advances in Neural Information Processing Systems (NIPS),
pages 1433–1440, 2008. 1

[57] B. Sun and K. Saenko. Deep coral: Correlation alignment for
deep domain adaptation. In European Conference on Com-
puter Vision (ECCV), pages 443–450. Springer, 2016. 5

[58] B. Taskar, C. Guestrin, and D. Koller. Max-Margin Markov
In Advances in Neural Information Pro-

Networks, 2003.
cessing Systems. 4

[59] M. K. Titsias. Variational learning of inducing variables
in sparse Gaussian processes, 2009. In Proceedings of the
Twelfth International Conference on Artiﬁcial Intelligence
and Statistics. 4

[60] E. Tzeng, J. Hoffman, K. Saenko, and T. Darrell. Adversar-
ial discriminative domain adaptation.
In IEEE Conference
on Computer Vision and Pattern Recognition (CVPR), vol-
ume 1, page 4, 2017. 2, 5, 6, 7

[61] E. Tzeng, J. Hoffman, N. Zhang, K. Saenko, and T. Darrell.
Deep domain confusion: Maximizing for domain invariance,
2014. arXiv:1412.3474. 2

[62] V. Vapnik. Statistical Learning Theory. Wiley-Interscience,

1998. 4

[63] X. Wang, B. Wang, X. Bai, W. Liu, and Z. Tu. Max-margin
multiple-instance dictionary learning. In International Con-
ference on Machine Learning, pages 846–854, 2013. 2

[64] A. G. Wilson, Z. Hu, R. Salakhutdinov, and E. P. Xing. Deep

[47] C. E. Rasmussen and C. K. I. Williams. Gaussian Processes

kernel learning, 2016. AI and Statistics (AISTATS). 2, 4

for Machine Learning. The MIT Press, 2006. 2, 3

[48] S.-A. Rebufﬁ, H. Bilen, and A. Vedaldi. Learning multiple
visual domains with residual adapters. In Advances in Neu-
ral Information Processing Systems (NIPS), pages 506–516,
2017. 5

[65] H. Yan, Y. Ding, P. Li, Q. Wang, Y. Xu, and W. Zuo. Mind
the class weight bias: Weighted maximum mean discrepancy
for unsupervised domain adaptation.
In IEEE Conference
on Computer Vision and Pattern Recognition (CVPR), July
2017. 5

4389

[66] W. Zellinger, T. Grubinger, E. Lughofer, T. Natschl¨ager, and
S. Saminger-Platz. Central moment discrepancy (cmd) for
domain-invariant representation learning. International Con-
ference on Learning Representation (ICLR), 2017. 5

[67] J. Zhang, W. Li, and P. Ogunbona. Joint geometrical and
statistical alignment for visual domain adaptation. In IEEE
Conference on Computer Vision and Pattern Recognition
(CVPR), July 2017. 5

[68] X. Zhang, F. X. Yu, S.-F. Chang, and S. Wang. Deep transfer
network: Unsupervised domain adaptation. arXiv preprint
arXiv:1503.00591, 2015. 5

[69] Z. Zhang, M. Wang, Y. Huang, and A. Nehorai. Aligning
inﬁnite-dimensional covariance matrices in reproducing ker-
nel hilbert spaces for domain adaptation.
In Proceedings
of the IEEE Conference on Computer Vision and Pattern
Recognition, pages 3437–3445, 2018. 5

[70] J.-Y. Zhu, T. Park, P. Isola, and A. A. Efros. Unpaired image-
to-image translation using cycle-consistent adversarial net-
works. arXiv preprint, 2017. 6

[71] X. Zhu and A. B. Goldberg. Introduction to semi-supervised

learning. Morgan & Claypool, 2009. 4

4390

