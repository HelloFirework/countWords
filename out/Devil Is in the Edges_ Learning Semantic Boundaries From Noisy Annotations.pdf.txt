Devil is in the Edges: Learning Semantic Boundaries from Noisy Annotations

David Acuna1,2,3
1NVIDIA

Amlan Kar2,3
2University of Toronto

Sanja Fidler1,2,3

3Vector Institute

{davidj, amlan}@cs.toronto.edu, sfidler@nvidia.com

Abstract

 

STEAL: Semantic Thinning Edge Alignment Learning 
Devil is in the Edges 

We tackle the problem of semantic boundary prediction,
which aims to identify pixels that belong to object(class)
boundaries. We notice that relevant datasets consist of a
signiﬁcant level of label noise, reﬂecting the fact that pre-
cise annotations are laborious to get and thus annotators
trade-off quality with efﬁciency. We aim to learn sharp and
precise semantic boundaries by explicitly reasoning about
annotation noise during training. We propose a simple new
layer and loss that can be used with existing learning-based
boundary detectors. Our layer/loss enforces the detector to
predict a maximum response along the normal direction at
an edge, while also regularizing its direction. We further
reason about true object boundaries during training using
a level set formulation, which allows the network to learn
from misaligned labels in an end-to-end fashion. Experi-
ments show that we improve over the CASENet [36] back-
bone network by more than 4% in terms of MF(ODS) and
18.61% in terms of AP, outperforming all current state-of-
the-art methods including those that deal with alignment.
Furthermore, we show that our learned network can be used
to signiﬁcantly improve coarse segmentation labels, lending
itself as an efﬁcient way to label new data.

1. Introduction

Image boundaries are an important cue for recogni-
tion [26, 15, 2]. Humans can recognize objects from
sketches alone, even in cases where a signiﬁcant portion
of the boundary is missing [6, 38]. Boundaries have also
been shown to be useful for 3D reconstruction [23, 21, 39],
localization [35, 31], and image generation [19, 32].

In the task of semantic boundary detection, the goal is to
move away from low-level image edges to identifying im-
age pixels that belong to object (class) boundaries. It can be
seen as a dual task to image segmentation which identiﬁes
object regions. Intuitively, predicting semantic boundaries
is an easier learning task since they are mostly rooted in
identiﬁable higher-frequency image locations, while region
pixels may often be homogenous in color, leading to ambi-
guities for recognition. On the other hand, the performance
metrics are harder: while getting the coarse regions right

labeled ground-truth 

labeled ground-truth 

active alignment 

coarse-to-fine segmentation 

Figure 1: We introduce STEAL, an approach to learn sharper and more
accurate semantic boundaries. STEAL can be plugged onto any existing
semantic boundary network, and is able to signiﬁcantly reﬁne noisy anno-
tations in current datasets.

may lead to artiﬁcially high Jaccard index [20], boundary-
related metrics focus their evaluation tightly along the ob-
ject edges. Getting these correct is very important for tasks
such as object instance segmentation, robot manipulation
and grasping, or image editing.

However, annotating precise object boundaries is ex-
tremely slow, taking as much as 30-60s per object [1, 9].
Thus most existing datasets consist of signiﬁcant label noise
(Fig. 1, bottom left), trading quality with the labeling efﬁ-
ciency. This may be the root cause why most learned detec-
tors output thick boundary predictions, which are undesir-
able for downstream tasks.

In this paper, we aim to learn sharp and precise semantic
boundaries by explicitly reasoning about annotation noise
during training. We propose a new layer and loss that can
be added on top of any end-to-end edge detector.
It en-
forces the edge detector to predict a maximum response
along the normal direction at an edge, while also regular-
izing its direction. By doing so, we alleviate the problem
of predicting overly thick boundaries and directly optimize
for Non-Maximally-Suppressed (NMS) edges. We further
reason about true object boundaries using a level-set formu-
lation, which allows the network to learn from misaligned
labels in an end-to-end fashion.

Experiments show that our approach improves the per-
formance of a backbone network, i.e. CASENet [36], by
more than 4% in terms of MF(ODS) and 18.61% in terms of
AP, outperforming all current state-of-the-art methods. We

111075

further show that our predicted boundaries are signiﬁcantly
better than those obtained from the latest DeepLab-v3 [10]
segmentation outputs, while using a much more lightweight
architecture. Our learned network is also able to improve
coarsely annotated segmentation masks with 16px, 32px er-
ror improving their accuracy by more than 20% IoU and
30% IoU, respectively. This lends our method as an efﬁ-
cient means to collect new labeled data, allowing annota-
tors to coarsely outline objects with just a few clicks, and
generating ﬁner ground-truth using our approach. We show-
case this idea by reﬁning the Cityscapes-coarse labelset, and
exploiting these labels to train a state-of-the-art segmenta-
tion network [10]. We observe a signiﬁcant improvement of
more than 1.2% in some of the reﬁned categories.

2. Related Work

Semantic Boundary Detection. Learning-based seman-
tic edge detection dates back to [28] which learned a classi-
ﬁer that operates on top of a standard edge detector. In [16],
the authors introduced the Semantic Boundaries Dataset
(SBD) and formally studied the problem of semantic con-
tour detection in real world images. They proposed the idea
of an inverse detector which combined bottom-up edges and
top-down detection. More recently, [36] extended the CNN-
based class-agnostic edge detector proposed in [34], and al-
lowed each edge pixel to be associated with more than one
class. The proposed CASENet architecture combined low
and high-level features with a multi-label loss function to
supervise the fused activations.

Most works use non-maximum-suppression [7] as a
postprocessing step in order to deal with the thickness of
predicted boundaries. In our work, we directly optimize for
NMS during training. We further reason about misaligned
ground-truth annotations with real object boundaries, which
is typically not done in prior work. Note that our focus here
is not to propose a novel edge-detection approach, but rather
to have a simple add-on to existing architectures.

The work most closely related to ours is SEAL [37], in
that it deals with misaligned labels during training. Similar
to us, SEAL treats the underlying ground truth boundaries
as a latent variable that is jointly optimized during training.
Optimization is formulated as a computationally expensive
bipartite graph min-cost assignment problem. In order to
make optimization tractable, there are no pair-wise costs,
i.e. two neighboring ground-truth pixels can be matched to
two pixels far apart in the latent ground-truth, potentially
leading to ambiguities in training.
In our work, we infer
true object boundaries via a level set formulation which pre-
serves connectivity and proximity, and ensures that the in-
ferred ground-truth boundaries are well behaved. Moreover,
SEAL is limited to the domain of boundary detection and
needs to have reasonably well annotated data, since align-
ment is deﬁned as a one-to-one mapping between annotated

and inferred ground-truth. In our method, substantial dif-
ferences (topology and deviation) in ground truth can be
handled. Our approach can thus be naturally used to reﬁne
coarse segmentation labels, lending itself as a novel way to
efﬁciently annotate datasets.

Level Set Segmentation. Level Set Methods [27] have
been widely used for image segmentation [8, 13, 30, 18,
24, 5, 22, 14] due to their ability to automatically handle
various topological changes such as splitting and merging.
Most older work derived different level set formulations
on top of standard image gradient observations, while re-
cent work swapped those with neural network outputs [18].
In [24], the authors proposed a deep structured active con-
tours method that learns the parameters of an active contour
model using a CNN. [20] introduced a method for object
proposal generation, by learning to efﬁciently place seeds
such that critical level sets originating from these seeds hit
object boundaries. In parallel work, [33] learns CNN fea-
ture extraction and levelset evolution in an end-to-end fash-
ion for object instance annotation. In our work, we exploit
level set optimization during training as a means to itera-
tively reﬁne ground-truth semantic boundaries.

3. The STEAL Approach

In this section, we introduce our Semantically Thinned
Edge Alignment Learning (STEAL) approach. Our method
consists of a new boundary thinning layer together with a
loss function that aims to produce thin and precise seman-
tic edges. We also propose a framework that jointly learns
object edges while learning to align noisy human-annotated
edges with the true boundaries during training. We refer to
the latter as active alignment. Intuitively, by using the true
boundary signal to train the boundary network, we expect
it to learn and produce more accurate predictions. STEAL
is agnostic to the backbone CNN architecture, and can be
plugged on top of any existing learning-based boundary de-
tection network. We illustrate the framework in Fig. 2.

Subsec. 3.1 gives an overview of semantic boundary de-
tection and the relevant notation. Our boundary thinning
layer and loss are introduced in Subsec. 3.3. In Subsec. 3.4,
we describe our active alignment framework.

3.1. Semantic Aware Edge Detection

Semantic Aware Edge-Detection [36, 37] can be deﬁned
as the task of predicting boundary maps for K object classes
given an input image x. Let ym
k ∈ {0, 1} indicate whether
pixel m belongs to class k. We aim to compute the prob-
ability map P (yk|x; θ), which is typically assumed to de-
compose into a set of pixel-wise probabilities P (ym
k |x; θ)
modeled by Bernoulli distributions. It is computed with a
convolutional neural network f with k sigmoid outputs, and
parameters θ. Each pixel is thus allowed to belong to multi-
ple classes, dealing with the cases of multi-class occlusion

11076

fixed convolution 
(normal estimation) 

boundary 
classification layer 

normal angles 

θ

fixed convolution 
(normal estimation) 

direction 
loss 

boundary 
classif. loss 

softmax 

NMS loss 

refined 
labels 

annotated 
ground-truth 

boundary detection 

network 

NMS architecture 

inference 

active 
alignment 

training 

Figure 2: STEAL architecture. Our architecture plugs on top of any backbone architecture. The boundary thinning layer acts upon boundary classiﬁcation
predictions by computing the edge normals, and sampling 5 locations along the normal at each boundary pixel. We perform softmax across these locations,
helping us enhance the boundary pixels as in standard NMS. During training, we iteratively reﬁne ground-truth labels using our predictions via an active
alignment scheme. NMS and normal direction losses are applied only on the (reﬁned) ground-truth boundary locations.

boundaries. Note that the standard class-agnostic edge de-
tection can be seen as a special case with k = 1 (consuming
all foreground classes).

Semantic Edge Learning. State-of-the-art boundary de-
tectors are typically trained using the standard binary cross
entropy loss adopted from HED [34]. To deal with the high
imbalance between the edge and non-edge pixels, a weight-
ing term β = |Y −|/|Y | is often used, where |Y −| accounts
for the number of non-edge pixels among all classes in the
mini-batch, and |Y | is the total number of pixels.
In the
multi-class scenario, the classes are assumed to be indepen-
dent [36, 37]. Therefore, in learning the following weighted
binary cross-entropy loss is minimized:

LBCE(θ) = −Xk

log P (yk|x; θ)

= −Xk Xm

{β ym

k log fk(m|x, θ)+

(1)

+ (1 − β)(1 − ym

k ) log(1 − fk(m|x, θ))}

where y indicates the ground-truth boundary labels.

3.2. Semantic Boundary Thinning Layer

In the standard formulation, nearby pixels in each bound-
ary map are considered to be independent, and can cause the
predictions to “ﬁre” densely around object boundaries. We
aim to encourage predictions along each boundary pixel’s
normal to give the maximal response on the actual bound-
ary. This is inspired by edge-based non-maximum suppres-
sion (NMS) dating back to Canny’s work [7]. Furthermore,
we add an additional loss term that encourages the normals
estimated from the predicted boundary maps to agree with
the normals computed from ground-truth edges. The two
losses work together in producing sharper predictions along
both the normal and tangent directions.

3.3. Thinning Layer and NMS Loss

tive ground-truth boundary pixel p for class k we normalize
the responses along the normal direction ~dk

p as follows:

where:

hk(p|x, θ) =

exp(fk(p|x, θ)/τ )

PL
t=−L exp(fk(pt|x, θ)/τ )

x(pt) = x(p) + t · cos ~dp
y(pt) = y(p) + t · sin ~dp

(2)

(3)

(4)

Here, t ∈ {−L, −L + 1, . . . , L}, and L denotes the max-
imum distance of a pixel pt from p along the normal. See
Fig. 2 for a visualization. We compute the normal direc-
tion ~dk
p from the ground-truth boundary map using basic
trigonometry and a ﬁxed convolutional layer that estimates
second derivatives. The parameter τ in Eq. (2) denotes the
temperature of the softmax. We use L = 2 and τ = 0.1.

Intuitively, we want to encourage the true boundary pixel
p to achieve the highest response along its normal direction.
We do this via an additional loss, referred to as the NMS
loss, that pushes the predicted categorical distribution com-
puted with h towards a Dirac delta target distribution:

Lnms(θ) = −Xk Xp

log hk(p|x, θ)

(5)

Note that p indexes only the positive boundary pixels for
each class, other pixels do not incur the NMS loss. We com-
pute fk(pt|x, θ) in Eq. (2) for non-integral locations using
a bilinear kernel.

Direction Loss.
Ideally, the predicted boundaries would
have normal directions similar to those computed from the
ground-truth boundaries. We follow [4] to deﬁne the error
as the mean squared loss function in the angular domain:

Ldir(θ) = Xk Xp

|| cos−1h ~dp, ~ep(θ)i||,

(6)

Formally, during training we add a new deterministic
layer on top of the boundary prediction map. For each posi-

with ~dp the ground-truth normal direction in boundary pixel
p, and ~ep the normal computed from the predicted boundary

11077

map. We use the same convolutional layer on top of fk to
get ~e. Finally, we compute our full augmented loss as the
combination of the following three terms:

L = α1 LBCE + α2 Lnms + α3 Ldir

(7)

where α1, α2, α3 are hyper-parameters that control the im-
portance of each term (see Experiments).

3.4. Active Alignment

Learning good boundary detectors requires high quality
annotated data. However, accurate boundaries are time con-
suming to annotate. Thus datasets tradeoff between quality
and annotation efﬁciency. Like [37], we notice that the stan-
dard SBD benchmark [16] contains signiﬁcant label noise.
In this section, we propose a framework that allows us to
jointly reason about true semantic boundaries and train a
network to predict them. We adopt a level set formulation
which ensures that the inferred “true” boundaries remain
connected, and are generally well behaved.

Let ˆy = {ˆy1, ˆy2, ..., ˆyK} denote a more accurate version
of the noisy ground-truth label y, which we aim to infer as
part of our training procedure. We deﬁne ˆyk to be the zero
level set of an embedding signed function φ such that:

ˆyk = {Γ : φ(Γ, t) = 0} ∀t

(8)

Our goal is to jointly optimize for the latent variable ˆy and
the parameters θ of the edge network. The optimization is
deﬁned as a minimization of the following loss:

min
ˆy,θ

L(ˆy, θ) = −Xk

log P (yk, ˆyk|x; θ)

(9)

= −Xk (cid:0) log P (yk|ˆyk) + log P (ˆyk|x; θ)(cid:1)

The second term is the log-likelihood of the model and
can be deﬁned as in the previous section. The ﬁrst term
encodes the prior that encourages ˆyk to be close to yk. Up
to a constant, and without loss of generality, we can rewrite
this term in the following energy form:

E(yk|ˆyk; λ; fk) = Zp

g(fk, yk, λ) ˆyk(p) |ˆy′

k(p)| ∂p (10)

where λ is a hyper-parameter that controls the effect of yk
and g(.) is the following decreasing function:
λ

1

g(fk, yk, λ) =

+

(11)

p1 + |fk|

p1 + |yk|

Intuitively, this energy is minimized when the curve ˆyk lies
in areas of high probability mass of fk, and is close, by a
factor of λ, to the given ground-truth yk.

We can minimize Eq. (10) via the Euler-Lagrange equa-
tion, and ﬁnd the gradient descent direction that allows to
deform the initial yk towards a (local) minima of Eq. (10):

Here κ is the Euclidean curvature and ~n is the inward nor-
mal to the boundary. Details of this computation can be
found in [8], Appendix B and C.

By differentiating Eq. (8), it is easy to show that if yk
∂t = β ~N then the embedding
∂t = β ~|∇φ|. We can

evolves according to ∂ ˆyk(t)
function φ can be deformed as ∂φ(t)
thus rewrite the evolution of ˆyk in terms of φ as follows:

∂φ(t)

∂t

= g(fk, yk, λ)(κ + c)|∇φ| + ∇g∇φ

(13)

where c can be seen as a constant velocity that helps to avoid
certain local minima [8]. Eq. 13 can also be interpreted as
the Geodesic Active Contour formulation of the Level Set
Method [8, 27].

3.5. Learning

Minimizing Eq. (9) can be performed with an iterative
two step optimization process. In one step, we evolve the
provided boundary yk towards areas where the network is
highly conﬁdent. The number of evolution steps indexed by
t can be treated as a latent variable and ˆyk is selected by
choosing the ˆyt
k that minimizes Eq. (9). In the second step,
we optimize θ using the computed yk.

Formally, we want to solve:

min
ˆy,θ

L(ˆy, θ) = min

θ

min

ˆy

L(ˆy, θ)

(14)

where we iterate between holding θ ﬁxed and optimizing ˆy:

min
ˆyk

L(ˆyk, θ) = min

t

{− log P (ˆyt

k|x; θ) − C}

(15)

and optimizing θ via Eq. (7) while holding ˆy ﬁxed. Here C
is a constant that does not affect optimization.

3.6. Coarse to Fine Annotation

Embedding the evolution of ˆy in that of φ has two main
beneﬁts. Firstly, topological changes of ˆy are handled for
free and accuracy and stability can be achieved by using
proper numerical methods. Secondly, φ can be naturally
interpreted as a mask segmenting an object, where φ < 0
corresponds to the segmented region. Moreover, our ap-
proach can also be easily used to speed up object annota-
tion. Assume a scenario where an annotator draws a coarse
mask inside an object of interest, by using only a few clicks.
This is how the coarse subset of the Cityscapes dataset has
been annotated [12]. We can use our learned model and
levelset formulation (Eq. (13)), setting λ = 0 and c = 1
to evolve the given coarse mask by t iterations to produce
an improved segmentation mask whose edges align with the
edges predicted by our model.

3.6.1

Implementation Details

∂ ˆy(t)

∂t

= κ g(f, y, λ)~n − (∇g(f, y, λ)~n)~n

(12)

Morphological Level Set.
In this work, we follow a mor-
phological approach to compute the differential operators

11078

Metric

MF

(ODS)

AP

Method

aero

bike

bird

boat

bottle

bus

car

cat

chair

cow table

dog

horse mbike person plant

sheep

sofa

train

tv

mean

CASENet
CASENet-S

74.84 60.17 73.71 47.68 66.69 78.59 66.66 76.23 47.17 69.35 36.23 75.88 72.45 61.78
76.26 62.88 75.77 51.66 66.73 79.78 70.32 78.90 49.72 69.55 39.84 77.25 74.29 65.39
78.41 66.32 76.83 52.18 67.52 79.93 69.71 79.37 49.45 72.52 41.38 78.12 74.57 65.98
78.96 66.20 77.53 54.76 69.42 81.77 71.38 78.28 52.01 74.10 42.79 79.18 76.57 66.71
Ours (NMS Loss + AAlign) 80.15 67.80 77.69 54.26 69.54 81.48 71.34 78.97 51.76 73.61 42.82 79.80 76.44 67.68

Ours (NMS Loss)

SEAL

CASENet
CASENet-S

50.53 44.88 41.69 28.92 42.97 54.46 47.39 58.28 35.53 45.61 25.22 56.39 48.45 42.79
67.64 53.10 69.79 40.51 62.52 73.49 63.10 75.26 39.96 60.74 30.43 72.28 65.15 56.57
74.24 57.45 72.72 42.52 65.39 74.50 65.52 77.93 40.92 65.76 33.36 76.31 68.85 58.31
75.85 59.65 74.29 43.68 65.65 77.63 67.22 76.63 42.33 70.67 31.23 77.66 74.59 61.04
Ours (NMS Loss + AAlign) 76.74 60.94 73.92 43.13 66.48 77.09 67.80 77.50 42.09 70.05 32.11 78.42 74.77 61.28

Ours (NMS Loss)

SEAL

73.10
75.35
76.47
77.71
78.16

55.38
70.80
73.76
77.44
77.52

43.01 71.23 48.82 71.87 54.93 63.52
47.85 72.03 51.39 73.13 57.35 65.77
49.98 72.78 52.10 74.05 58.16 66.79
49.70 74.99 50.54 75.50 59.32 67.87
50.43 75.06 50.99 75.31 59.66 68.15

27.31 48.69 39.88 45.05 34.77 43.71
33.91 61.92 45.09 67.87 48.93 57.95
38.87 66.31 46.93 69.40 51.40 61.02
38.28 69.53 40.84 71.69 50.39 62.32
39.02 68.51 41.46 71.62 51.04 62.57

Table 1: Comparison of our method in the re-annotated SBD test set vs state-of-the-art. Scores are measured by %.

Method

CASENet [36]

SEAL [37]

Ours

aero

83.3
84.9
85.8

bike

76.0
78.6
80.0

bird

80.7
84.6
85.6

boat

63.4
66.2
68.4

bottle

bus

69.2
71.3
71.6

81.3
83.0
85.7

car

74.9
76.5
78.1

cat

chair

cow table

83.2
87.2
87.5

54.3
57.6
59.1

74.8
77.5
78.5

46.4
53.0
53.7

dog

80.3
83.5
84.8

horse mbike

person

plant

sheep

80.2
82.2
83.4

76.6
78.3
79.5

80.8
85.1
85.3

53.3
58.7
60.2

77.2
78.9
79.6

sofa

50.1
53.1
53.7

train

75.9
77.7
80.3

tv

mean

66.8
69.7
71.4

71.4
74.4
75.6

Table 2: Results on SBD test following the original evaluation protocol, and test set from [16].

Metric

Method

Test NMS Or. Test Set Re-annot. Test Set

Metric

Method

Active Align Noisy Train Noisy Train ( +8px err)

MF
(ODS)

AP

CASENet

Ours (CASENet)
Ours (CASENet)

+ NMS Layer
+ NMS Layer
+ Active Align

CASENet

Ours (CASENet)
Ours (CASENet)

+ NMS Layer
+ NMS Layer
+ Active Align

X

X

X

X

X

X

62.21
63.20
64.84
64.15
65.93
64.83

42.99
34.60
44.83
53.67
60.10
57.98

63.52
64.03
66.58
64.99
67.87
68.15

43.71
45.60
60.48
54.18
62.32
62.57

Table 3: Effect of the NMS Loss and Active Alignment on the SBD
dataset. Score (%) represents mean over all classes.

used in the curve’s evolution. This solution is based on nu-
merical methods which are simple, fast and stable. Addi-
tionally, in this approach, the level set is just a binary piece-
wise constant function and constant reinitialization of the
level set function is not required. We refer the reader to [25]
for a more detailed explanation and implementation details.

Training Strategy. Our active alignment heavily relies on
the quality of the network’s predictions to iteratively reﬁne
the noisy ground-truth. During initial stages of training, the
network is not conﬁdent and may lead us to infer potentially
noisier labels. We hence introduce alignment after the net-
work’s accuracy starts to ﬂatten. In our formulation, this can
be seen as setting λ = inf for a certain number of iterations.
In order to save on computation time, active alignment can
also be applied every n training iterations.

4. Experimental Results

In this section, we provide an extensive evaluation of our
approach on the standard SBD benchmark [16], as well as
on the Cityscapes dataset [12]. We further show how our
approach can be used to signiﬁcantly improve coarse seg-
mentation labels, mimicking a scenario where we train on
a labeled dataset with moderate noise, and use the trained
model to generate ﬁner annotations from only coarsely an-
notated data (collected with less manual annotation effort).

Implementation Details.
In all experiments, we select
CASENet [36] as the backbone network since it is the
current state-of-the-art semantic-aware-edge detection ar-

MF
(ODS)

AP

Ours (CASENet)
Ours (CASENet)

+ NMS Layer

Ours (CASENet)
Ours (CASENet)

+ NMS Layer

X

X

X

X

64.03
64.10
68.15

45.60
45.41
62.57

50.58
52.69
56.41

29.32
27.60
43.97

Table 4: Effect of Active Alignment on the SBD dataset. Score (%)
represents mean over all classes.

chitecture. We re-implement CASENet in PyTorch fol-
lowing [36]. The performance of our reimplementation
(slightly better) is illustrated in tables as CASENet Ours
for fair comparison. We use 472 × 472 as the training
resolution. Training is done on an NVIDIA DGX Sta-
tion using 4 GPUs with a total batch size of 8. We use
α1 = 1, α2 = 10, α3 = 1 in our loss function. For SBD,
we use a learning rate of 1e-7. At 20k iter, we decrease the
learning rate by a factor of 10 and set β = 0. Active align-
ment is done every 5k iter (λ = 1) starting at 55k iter. The
full model converges at about 70k iter and takes approxi-
mately two days to train. For Cityscapes, we set the learning
rate to be 5e-8, and decay is done every 20k iterations by a
factor of 20. Since images are more densely annotated, we
set the weights of the loss function to be 1. We do not use
active alignment in Cityscapes since the train set is ﬁnely
annotated. This is used later for the reﬁnement of coarse
data. The model converges at around 60k iterations.

4.1. Datasets and Evaluation Metrics

Semantic Boundary Dataset (SBD) [16]
contains 11355
images from the trainval set of PASCAL VOC2011, with
8498 images divided into training, and 2857 as test. This
dataset contains annotations following the 20-class deﬁni-
tions in PASCAL VOC. In our experiments, we randomly
select 100 images from the training set, which are used as
our validation. Training is performed on the remaining 8398
images and evaluation is done on test. We additionally re-
port performance on the high-quality re-annotated SBD test
set from [37]. This constitutes 1059 images from SBD test.

Cityscapes Dataset [12]
contains 5000 ﬁnely annotated
images divided into 2975 training, 500 validation, and 1525
test images. Since the boundaries are not provided and test
is held-out, we follow [36] to generate the ground truth

11079

(a) Image

(b) CASENet

(c) Ours

(d) +Thinning Layer

(e) Ground-truth

Figure 3: Qualitative Results on the SBD Dataset.

Figure 4: Active Alignment. From Left-to-right (GT, Reﬁned).

Metric

Method

Test NMS road

s.walk build. wall

fence

pole

t-light

t-sign

veg

terrain

sky

person

rider

car

truck

bus

train motor

bike mean

MF

(ODS)

AP

CASENet
Ours(CASENet)
Ours(CASENet)
+ NMS LOSS
+ NMS LOSS

CASENet
Ours(CASENet)
Ours(CASENet)
+NMS LOSS
+NMS LOSS

X

X

X

X

87.06
87.23
88.13
88.08
88.94

54.58
68.38
88.83
89.54
90.86

75.95
76.08
76.53
77.62
78.21

65.44
69.61
73.94
75.72
78.94

75.74 46.87 47.74 73.23 72.70 75.65 80.42
75.73 47.86 47.57 73.67 71.77 75.19 80.58
76.75 48.70 48.60 74.21 74.54 76.38 81.32
77.08 50.02 49.62 75.48 74.01 76.66 81.51
77.75 50.59 50.39 75.54 76.31 77.45 82.28

67.75 37.97 39.93 57.28 64.65 69.38 71.27
70.28 40.00 39.26 61.74 62.74 73.02 72.77
76.86 42.06 41.75 69.81 74.50 76.98 79.67
74.95 42.72 41.53 65.86 67.55 75.84 77.85
77.36 43.01 42.33 71.13 75.57 77.60 81.60

57.77
58.39
58.98
59.41
60.19

50.28
50.91
56.48
52.72
56.98

86.69
86.78
87.26
87.24
87.99

73.99
80.72
87.73
82.70
87.30

81.02
81.00
81.90
81.90
82.48

72.56
76.06
83.21
79.89
83.21

67.93 89.10 45.92 68.05 49.63 54.21 73.74 68.92
68.18 89.31 48.99 67.82 50.84 55.30 74.16 69.29
69.05 90.27 50.93 68.41 52.11 56.23 75.66 70.31
69.87 89.50 52.15 67.80 53.60 55.93 75.17 70.67
70.18 90.40 53.31 68.50 53.39 56.99 76.14 71.42

59.92 66.84 35.91 56.04 41.19 46.88 63.54 57.65
60.49 79.43 40.86 62.27 42.87 48.84 64.42 61.30
68.10 91.20 44.17 66.69 44.77 52.04 75.65 68.13
62.59 91.07 45.26 67.73 47.08 50.91 70.78 66.44
66.79 91.59 45.33 66.64 46.25 52.07 74.41 68.89

Table 5: Results on the val set on the Cityscapes dataset. Training is done using the ﬁnely annotated train set. Scores are measured by %.

edges and use the validation images as our test set.

Evaluation Protocol: We follow the evaluation protocol
proposed in [37] which is considerable harder than the one
used in [16, 3, 36]. An important parameter is the matching
distance tolerance which is deﬁned as the maximum slack
allowed for boundary predictions to be considered as cor-
rect matches to ground-truth. We follow [37] and set it
to be 0.0075 for SBD and 0.0035 for Cityscapes. For fur-
ther comparisons, in Table 2 we also report the performance
with the original SBD evaluation protocol [16].

Coarse Label Simulation.
In order to quantify the level
of annotation noise that our approach can handle, we syn-
thetically coarsen the given labels following the procedure
described in [40]. This algorithm, inspired by the way that
coarse labels were collected in Cityscapes [12], erodes and
then simpliﬁes the true labels producing controlled masks
with various qualities. In addition, we also compute the es-
timated number of clicks required to annotate such objects.

This is simulated by counting the number of vertices in the
simpliﬁed polygon.

Evaluation Metrics: We use two quantitative measures
to evaluate our approach in the task of boundary prediction.
1) We use maximum F-Measure (MF) at optimal dataset
scale (ODS), and 2) average precision (AP) for each class.
To evaluate the quality of the improved coarse segmentation
masks, we use the intersection-over-union (IoU) metric.

4.2. Semantic Boundary Prediction

Results and Comparisons. We ﬁrst compare the perfor-
mance of our approach vs current state-of-the-art methods.
Our baselines include CASENet [36], and the recently pro-
posed CASENet-S and SEAL [37]. CASENet-S can be seen
as an improved version of CASENet, while SEAL builds on
top of CASENet-S and also deals with misaligned labels.

Table 1 illustrates per category performance in the high
quality re-annotated SBD test set. Surprisingly, by just in-
troducing the NMS Layer on top of CASENet, our method

11080

)
S
D
O

(
 
F
M
G
V
A

 

Ours
DeepLab V3+
CASENet

72

70

68

66

64

62

60

0.001875
(~2.15px)

Figure 5: Comparison of our boundaries vs those obtained from DeepLab
v3+’s segmentation masks. We perform 4.2% better at the strictest regime.

0.00375
(~4.30px)

Matching Threshold

0.00500
(~5.72px)

Figure 6: Semantic Segmentation on Cityscapes val: Performance of
DeepLab V3+ when trained with ﬁne data and (blue) vanilla train extra
set, (orange) our reﬁned data (8 object classes) from train extra. We see
improvement of more than 1.2 IoU % in rider, truck and bus.

outperforms SEAL (an approach that deals with misalign-
ment) by more than 1% in both MF(ODS) and AP. By com-
bining with active alignment, we can see that the perfor-
mance is improved even further. In Table 5, we also evaluate
the performance of our method in the Cityscapes dataset.

While our method outperforms previous state-of-the-art,
we emphasize that the main advantage of the proposed ap-
proach is its ability of being added on top of any existing
architecture such as CASENet, CASENet-S or SEAL.

Analysis of the Boundary Thinning Layer. We evaluate
the performance of the NMS and direction loss on the SBD
dataset in two different test sets. These include the orig-
inal noisy annotated test set and its re-annotated version
from [37]. The comparison, shown in Table 3, highlights
the effectiveness of the NMS and direction loss on both test
sets. In the original test set, our approach improves the per-
formance of CASENet by 3.72% in terms of MF(ODS) and
17.11% in terms of AP. In the high-quality test set, we out-
perform the baseline by 5.35% and 18.61%, respectively.

NMS Loss w/o Edge-NMS: We also compare the per-
formance of our method when post-processing is not used
at test time. Table 3 shows that even when the Boundary
Thinning Layer is not used during inference, the NMS Loss
equally improves the crispness of the raw predictions. As
such, we can see improvements vs CASENet of 1.94 %
(MF) and 10.68 % (AP) in the original dataset, and 1.47
% (MF) and 10.47 % (AP) in the re-annotated one.

Analysis of Active Alignment. We also evaluate the use
of our active alignment during training. To enable a more
controlled analysis, we create several noisier versions of the
real ground-truth as explained in Sec. 4.1. Note that given
the notion of label error as introduced by [40], the original

Label Quality

4px error

8px error

16px error

32px error

Num.Clicks per Image

Test IoU

GrabCut

Ours(Coarse-to-Fine) IoU

70.34
91.22

68.74
92.78

44.76
78.95

70.32
88.16

26.78
62.20

69.76
82.89

14.64
41.31

62.82
76.20

Table 6: Reﬁning coarse labels on SBD. Model is trained on the noisy
SBD training set (approx 4px error). The re-annotated test set is then sim-
pliﬁed to simulate coarse data with a given quality (see main text). Score
(%) represents mean over all the 20 object classes.
16px error

32px error Real Coarse

Label Quality

4px error

8px error

Num.Clicks per Image

Test IoU

GrabCut

Ours(Coarse-to-Fine) IoU

175.23
74.85

26.00
78.93

95.63
53.32

28.51
69.21

49.21
33.71

29.35
58.96

27.00
19.44

25.99
50.35

98.78
48.67

32.11
67.43

Table 7: Reﬁning coarse labels on Cityscapes. Model trained on ﬁne
Cityscapes trainset and used to reﬁne coarse data. Real Coarse corresponds
to coarsely human annotated val set, while x-px error correspond to simu-
lated coarse data. Score (%) represents mean over all 8 object classes.

ground-truth is at roughly 4px error, as measured based on
the ﬁne (re-annotated) ground-truth. We train our model us-
ing active alignment on the noisy training set, and perform
evaluation on the high quality test set from [37]. Results,
shown in Table 4, illustrate the effectiveness of active align-
ment in both small and extreme noisy conditions.

STEAL vs DeepLab-v3 [10]: Semantic segmentation
can be seen as a dual task to semantic-aware edge detec-
tion since the boundaries can easily be extracted from the
segmentation masks. Therefore, we compare the perfor-
mance of our approach vs state-of-the-art semantic segmen-
tation networks. Concretely, we use the implementation of
DeepLab V3+ provided by the authors in [10] (78.8 mIoU in
the Cityscapes val set), and obtain the edges by computing a
sobel ﬁlter on the output segmentation masks. For fairness
in evaluation, we set a margin of 5 pixels in the corners and
135 pixels in the bottom of the image. This removes the ego
car and image borders on which DeepLab performs poorly.
The comparison (Fig 5), at different matching thresholds,
shows that STEAL outperforms DeepLab edges in all evalu-
ation regimes, e.g. 4.2% at ∼ 2px thrs. This is an impressive
result, as DeepLab uses a much more powerful feature ex-
tractor than us, i.e. Xception 65 [11] vs Resnet101 [17, 36],
and further employs a decoder that reﬁnes object bound-
aries [10]. The numbers also indicate that the segmenta-
tion benchmarks, which compute only region-based metrics
(IoU), would beneﬁt by including boundary-related mea-
sures. The latter are harder, and better reﬂect how precise
the predictions really are around object boundaries.

Qualitative Results Fig 3, 7 show qualitative results of
our method on the SBD and Cityscapes datasets, respec-
tively. We can see how our predictions are crisper than the
base network. In Fig 4, we additionally illustrate the true
boundaries obtained via active alignment during training.

4.3. Reﬁning Coarsely Annotated Data

We now evaluate how our learned boundary detection
network can be used to reﬁne coarsely annotated data
(Sec. 3.6). We evaluate our approach on both the simu-

11081

pedridercartruckbustrainmbikebikerestmIoUcategory65676971737577798183858789919395ioucoarsecoarse-to-fine(a) Image

(b) CASENet

(c) Ours

(d) Ground-truth

Figure 7: Qualitative Results on the Cityscapes Dataset.

Figure 8: Qualitative Results. Coarse-to-Fine on the coarsely annotated Cityscapes train extra set.

lated coarse data (as explained in Sec. 4.1), as well as on
the “real” coarse annotations available in the Cityscapes
train extra and val sets. For quantitative comparison we use
the Cityscapes val set, where we have both ﬁne and coarse
annotations. We use the train extra set for a qualitative com-
parison as ﬁne annotations are not available.

Results and Comparisons. Results of our method are
shown in Table 6 for the SBD dataset. We emphasize that
in this experiment the reﬁnement is done using a model
trained on noisy data (SBD train set). Table 7, on the other
hand, illustrates the same comparison for the Cityscapes
dataset. However, in this case, the model is trained using
the ﬁnely annotated train set. In both experiments, we use
GrabCut [29] as a sanity-check baseline. For this, we ini-
tialize foreground pixels with the coarse mask and run the
algorithm at several iterations (1,3,5,10). We report the one
that gives on average the best score (usually 1). In our case,
we run our method 1 step for the 4px error. For cases, with
higher error, we increase it by 5 starting at 8px error.

Qualitative Results. We show qualitative results of our
approach in Fig 8. One can observe that by starting from a
very coarse segmentation mask, our method is able to ob-
tain very precise reﬁned masks. We believe that our ap-
proach can be introduced in current annotation tools saving
considerable amount of annotation time.

Better Segmentation. We additionally evaluate whether
our reﬁned data is truly useful for training. For this, we
reﬁne 8 object classes in the whole train extra set (20K im-
ages). We then train our implementation of DeepLabV3+
with the same set of hyper-parameters with and without re-
ﬁnement in the coarse train extra set. Fig 6 provides in-
dividual performance on the 8 classes vs the rest. We see
improvement of more than 1.2 IoU% for rider, truck and
bus as well as in the overall mean IoU (80.55 vs 80.37).

5. Conclusion

In this paper, we proposed a simple and effective Thin-
ning Layer and loss that can be used in conjunction with
existing boundary detectors. We further introduced a frame-
work that reasons about true object boundaries during train-
ing, dealing with the fact that most datasets have noisy
annotations. Our experiments show signiﬁcant improve-
ments over existing approaches on the popular SBD and
Cityscapes benchmarks. We evaluated our approach in re-
ﬁning coarsely annotated data with signiﬁcant noise, show-
ing high tolerance during both training and inference. This
lends itself as an efﬁcient way of labeling future datasets, by
having annotators only draw coarse, few-click polygons.

Acknowledgments. We thank Zhiding Yu for kindly providing the rean-
notated subset of SBD. We thank Karan Sapra & Yi Zhu for sharing their
DeepLabV3+ implementation, and Mark Brophy for helpful discussions.

11082

References

[1] D. Acuna, H. Ling, A. Kar, and S. Fidler. Efﬁcient annota-
tion of segmentation datasets with polygon-rnn++. In CVPR,
2018.

[2] P. Arbelaez, M. Maire, C. Fowlkes, and J. Malik. Con-
tour detection and hierarchical image segmentation. T-PAMI,
33(5):898–916, May 2011.

[3] P. Arbelaez, M. Maire, C. Fowlkes, and J. Malik. Con-
tour detection and hierarchical image segmentation. T-PAMI,
33(5):898–916, May 2011.

[4] M. Bai and R. Urtasun. Deep watershed transform for in-

stance segmentation. In CVPR, 2017.

[5] M. Bergtholdt, D. Cremers, and C. Schn¨orr. Variational seg-
mentation with shape priors. In O. F. N. Paragios, Y. Chen,
editor, Handbook of Mathematical Models in Computer Vi-
sion. Springer, 2005.

[6] I. Biederman. Recognition-by-components: A theory of hu-
man image understanding. Psychological Review, 94:115–
147, 1987.

[7] J. Canny. A computational approach to edge detection. T-

PAMI, 8(6):679–698, June 1986.

[8] V. Caselles, R. Kimmel, and G. Sapiro. Geodesic active con-

tours. IJCV, 22(1):61–79, 1997.

[9] L.-C. Chen, S. Fidler, A. Yuille, and R. Urtasun. Beat the
mturkers: Automatic image labeling from weak 3d supervi-
sion. In CVPR, 2014.

[10] L.-C. Chen, Y. Zhu, G. Papandreou, F. Schroff, and H. Adam.
Encoder-decoder with atrous separable convolution for se-
mantic image segmentation. In ECCV, 2018.

[11] F. Chollet. Xception: Deep learning with depthwise separa-
ble convolutions. In CVPR, pages 1800–1807. IEEE, 2017.
[12] M. Cordts, M. Omran, S. Ramos, T. Rehfeld, M. Enzweiler,
R. Benenson, U. Franke, S. Roth, and B. Schiele. The
cityscapes dataset for semantic urban scene understanding.
In CVPR, 2016.

[13] D. Cremers. Image segmentation with shape priors: Explicit
versus implicit representations. In Handbook of Mathemati-
cal Methods in Imaging, pages 1453–1487. Springer, 2011.
[14] A. Dubrovina-Karni, G. Rosman, and R. Kimmel. Multi-
region active contours with a single level set function. T-
PAMI, (8):1585–1601, 2015.

[15] S. Fidler, M. Boben, and A. Leonardis. Learning hierarchi-
cal compositional representations of object structure. Object
categorization: Computer and human vision perspectives,
pages 196–215, 2009.

[16] B. Hariharan, P. Arbelaez, L. Bourdev, S. Maji, and J. Malik.

Semantic contours from inverse detectors. In ICCV, 2011.

[17] K. He, X. Zhang, S. Ren, and J. Sun. Deep residual learning

for image recognition. In CVPR, 2016.

[18] P. Hu, B. Shuai, J. Liu, and G. Wang. Deep level sets for
salient object detection. In CVPR, pages 2300–2309, 2017.
[19] P. Isola, J.-Y. Zhu, T. Zhou, and A. A. Efros. Image-to-image
arxiv,

translation with conditional adversarial networks.
2016.

[20] P. Kr¨ahenb¨uhl and V. Koltun. Geodesic object proposals. In

ECCV, pages 725–739, 2014.

[21] D. C. Lee, M. Hebert, and T. Kanade. Geometric reason-
ing for single image structure recovery. CVPR, pages 2136–
2143, 2009.

[22] C. Li, C. Xu, C. Gui, and D. Fox. Distance regularized
level set evolution and its application to image segmentation.
IEEE Trans. Image Proc., 19(12):3243–3254, Dec 2010.

[23] J. Malik and D. E. Maydan. Recovering three-dimensional
T-PAMI,

shape from a single image of curved objects.
11(6):555–566, 1989.

[24] D. Marcos, D. Tuia, B. Kellenberger, L. Zhang, M. Bai,
R. Liao, and R. Urtasun. Learning deep structured active
contours end-to-end. In CVPR, pages 8877–8885, 2018.

[25] P. Marquez-Neila, L. Baumela, and L. Alvarez. A morpho-
logical approach to curvature-based evolution of curves and
surfaces. T-PAMI, 36(1):2–17, 2014.

[27] S. Osher and J. A. Sethian.

[26] A. Opelt, A. Pinz, and A. Zisserman. A boundary-fragment-
model for object detection. In ECCV, pages 575–588, 2006.
Fronts propagating with
curvature-dependent speed: algorithms based on hamilton-
jacobi formulations.
Journal of computational physics,
79(1):12–49, 1988.

[28] M. Prasad, A. Zisserman, A. Fitzgibbon, M. P. Kumar, and
P. H. Torr. Learning class-speciﬁc edges for object detection
and segmentation. In Computer Vision, Graphics and Image
Processing, pages 94–105. Springer, 2006.

[29] C. Rother, V. Kolmogorov, and A. Blake. Grabcut: Inter-
In

active foreground extraction using iterated graph cuts.
SIGGRAPH, 2004.

[30] C. Rupprecht, E. Huaroc, M. Baust, and N. Navab. Deep

active contours. arXiv preprint arXiv:1607.05074, 2016.

[31] S. Wang, S. Fidler, and R. Urtasun. Lost shopping! monoc-

ular localization in large indoor spaces. In ICCV, 2015.

[32] T.-C. Wang, M.-Y. Liu, J.-Y. Zhu, A. Tao, J. Kautz, and
B. Catanzaro. High-resolution image synthesis and semantic
manipulation with conditional gans. In CVPR, 2018.

[33] Z. Wang, D. Acuna, H. Ling, A. Kar, and S. Fidler. Object
instance annotation with deep extreme level set evolution. In
CVPR, 2019.

[34] S. Xie and Z. Tu. Holistically-nested edge detection.

In

ICCV, pages 1395–1403, 2015.

[35] X. Yu, S. Chaturvedi, C. Feng, Y. Taguchi, T.-Y. Lee, C. Fer-
nandes, and S. Ramalingam. Vlase: Vehicle localization by
aggregating semantic edges. In arXiv:1807.02536, 2018.

[36] Z. Yu, C. Feng, M.-Y. Liu, and S. Ramalingam. uppercase-
CASENet: Deep category-aware semantic edge detection. In
CVPR, 2017.

[37] Z. Yu, W. Liu, Y. Zou, C. Feng, S. Ramalingam, B. Vi-
jaya Kumar, and J. Kautz. Simultaneous edge alignment and
learning. In ECCV, 2018.

[38] D. Zhu, J. Li, X. Wang, J. Peng, W. Shi, and X. Zhang. Prin-

ciples of Gestalt Psychology. Lund Humphries, 1935.

[39] D. Zhu, J. Li, X. Wang, J. Peng, W. Shi, and X. Zhang. Se-
mantic edge based disparity estimation using adaptive dy-
namic programming for binocular sensors. Sensors, 18(4),
2018.

[40] A. Zlateski, R. Jaroensri, P. Sharma, and F. Durand. On the
In

importance of label quality for semantic segmentation.
CVPR, June 2018.

11083

