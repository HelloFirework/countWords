ArcFace: Additive Angular Margin Loss for Deep Face Recognition

Jiankang Deng * 1,2,3

Jia Guo * 2
1Imperial College London

Niannan Xue1
2InsightFace

Stefanos Zafeiriou1,3
3FaceSoft

{j.deng16, n.xue15, s.zafeiriou}@imperial.ac.uk , guojia@gmail.com

Abstract

One of the main challenges in feature learning using
Deep Convolutional Neural Networks (DCNNs) for large-
scale face recognition is the design of appropriate loss
functions that can enhance the discriminative power. Cen-
tre loss penalises the distance between deep features and
their corresponding class centres in the Euclidean space
to achieve intra-class compactness. SphereFace assumes
that the linear transformation matrix in the last fully con-
nected layer can be used as a representation of the class
centres in the angular space and therefore penalises the an-
gles between deep features and their corresponding weights
in a multiplicative way. Recently, a popular line of research
is to incorporate margins in well-established loss functions
in order to maximise face class separability. In this paper,
we propose an Additive Angular Margin Loss (ArcFace) to
obtain highly discriminative features for face recognition.
The proposed ArcFace has a clear geometric interpreta-
tion due to its exact correspondence to geodesic distance
on a hypersphere. We present arguably the most extensive
experimental evaluation against all recent state-of-the-art
face recognition methods on ten face recognition bench-
marks which includes a new large-scale image database
with trillions of pairs and a large-scale video dataset. We
show that ArcFace consistently outperforms the state of the
art and can be easily implemented with negligible com-
putational overhead. To facilitate future research, code
has been made available at: https://github.com/
deepinsight/insightface

1. Introduction

Face representation using Deep Convolutional Neural
Network (DCNN) embedding is the method of choice for
face recognition [30, 31, 27, 22]. DCNNs map the face im-
age, typically after a pose normalisation step [42], into a

* Equal contributions.

InsightFace is a nonproﬁt Github project for 2D and 3D face analysis.

Figure 1. Based on the centre [15] and feature [35] normalisation,
all identities are distributed on a hypersphere. To enhance intra-
class compactness and inter-class discrepancy, we consider four
kinds of Geodesic Distance (GDis) constraint. (A) Margin-Loss:
insert a geodesic distance margin between the sample and cen-
tres. (B) Intra-Loss: decrease the geodesic distance between the
sample and the corresponding centre. (C) Inter-Loss: increase the
geodesic distance between different centres. (D) Triplet-Loss: in-
sert a geodesic distance margin between triplet samples. In this
paper, we propose an Additive Angular Margin Loss (ArcFace),
which is exactly corresponded to the geodesic distance (Arc) mar-
gin penalty in (A), to enhance the discriminative power of face
recognition model. Extensive experimental results show that the
strategy of (A) is most effective.

feature that should have small intra-class and large inter-
class distance.

There are two main lines of research to train DCNNs for
face recognition. Some train a multi-class classiﬁer which
can separate different identities in the training set, such by
using a softmax classiﬁer [31, 22, 3], and the others learn
directly an embedding, such as the triplet loss [27]. Based
on the large-scale training data and the elaborate DCNN ar-
chitectures, both the softmax-loss-based methods [3] and
the triplet-loss-based methods [27] can obtain excellent per-
formance on face recognition. However, both the softmax
loss and the triplet loss have some drawbacks. For the soft-
max loss: (1) the size of the linear transformation matrix
W ∈ Rd×n increases linearly with the identities number
n; (2) the learned features are separable for the closed-set
classiﬁcation problem but not discriminative enough for the
open-set face recognition problem. For the triplet loss: (1)

14690

there is a combinatorial explosion in the number of face
triplets especially for large-scale datasets, leading to a sig-
niﬁcant increase in the number of iteration steps; (2) semi-
hard sample mining is a quite difﬁcult problem for effective
model training.

Several variants [36, 6, 43, 15, 35, 33, 4, 32, 25] have
been proposed to enhance the discriminative power of the
softmax loss. Wen et al. [36] pioneered the centre loss, the
Euclidean distance between each feature vector and its class
centre, to obtain intra-class compactness while the inter-
class dispersion is guaranteed by the joint penalisation of
the softmax loss. Nevertheless, updating the actual centres
during training is extremely difﬁcult as the number of face
classes available for training has recently dramatically in-
creased.

By observing that the weights from the last fully con-
nected layer of a classiﬁcation DCNN trained on the soft-
max loss bear conceptual similarities with the centres of
each face class, the works in [15, 16] proposed a multiplica-
tive angular margin penalty to enforce extra intra-class com-
pactness and inter-class discrepancy simultaneously, lead-
ing to a better discriminative power of the trained model.
Even though Sphereface [15] introduced the important idea
of angular margin, their loss function required a series of ap-
proximations in order to be computed, which resulted in an
unstable training of the network. In order to stabilise train-
ing, they proposed a hybrid loss function which includes the
standard softmax loss. Empirically, the softmax loss dom-
inates the training process, because the integer-based mul-
tiplicative angular margin makes the target logit curve very
precipitous and thus hinders convergence. CosFace [35, 33]
directly adds cosine margin penalty to the target logit, which
obtains better performance compared to SphereFace but ad-
mits much easier implementation and relieves the need for
joint supervision from the softmax loss.

In this paper, we propose an Additive Angular Margin
Loss (ArcFace) to further improve the discriminative power
of the face recognition model and to stabilise the training
process. As illustrated in Figure 2, the dot product be-
tween the DCNN feature and the last fully connected layer
is equal to the cosine distance after feature and weight nor-
malisation. We utilise the arc-cosine function to calculate
the angle between the current feature and the target weight.
Afterwards, we add an additive angular margin to the tar-
get angle, and we get the target logit back again by the co-
sine function. Then, we re-scale all logits by a ﬁxed feature
norm, and the subsequent steps are exactly the same as in
the softmax loss. The advantages of the proposed ArcFace
can be summarised as follows:

Engaging. ArcFace directly optimises the geodesic dis-
tance margin by virtue of the exact correspondence between
the angle and arc in the normalised hypersphere. We in-
tuitively illustrate what happens in the 512-D space via

analysing the angle statistics between features and weights.
Effective. ArcFace achieves state-of-the-art performance
on ten face recognition benchmarks including large-scale
image and video datasets.
Easy. ArcFace only needs several lines of code as given
in Algorithm 1 and is extremely easy to implement in the
computational-graph-based deep learning frameworks, e.g.
MxNet [5], Pytorch [23] and Tensorﬂow [2]. Furthermore,
contrary to the works in [15, 16], ArcFace does not need
to be combined with other loss functions in order to have
stable performance, and can easily converge on any training
datasets.
Efﬁcient. ArcFace only adds negligible computational
complexity during training. Current GPUs can easily sup-
port millions of identities for training and the model parallel
strategy can easily support many more identities.

2. Proposed Approach

2.1. ArcFace

The most widely used classiﬁcation loss function, soft-

max loss, is presented as follows:

L1 = −

1
N

N

X

i=1

log

xi+byi

yi

eW T
j=1 eW T

j xi+bj

Pn

,

(1)

where xi ∈ Rd denotes the deep feature of the i-th sample,
belonging to the yi-th class. The embedding feature dimen-
sion d is set to 512 in this paper following [36, 43, 15, 35].
Wj ∈ Rd denotes the j-th column of the weight W ∈ Rd×n
and bj ∈ Rn is the bias term. The batch size and the class
number are N and n, respectively. Traditional softmax loss
is widely used in deep face recognition [22, 3]. However,
the softmax loss function does not explicitly optimise the
feature embedding to enforce higher similarity for intra-
class samples and diversity for inter-class samples, which
results in a performance gap for deep face recognition under
large intra-class appearance variations (e.g. pose variations
[28, 44] and age gaps [19, 45]) and large-scale test scenarios
(e.g. million [12, 37, 18] or trillion pairs [1]).

For simplicity, we ﬁx the bias bj = 0 as in [15]. Then,
we transform the logit [24] as W T
j xi = kWjk kxik cos θj ,
where θj is the angle between the weight Wj and the fea-
ture xi. Following [15, 35, 34], we ﬁx the individual weight
kWjk = 1 by l2 normalisation. Following [26, 35, 34, 33],
we also ﬁx the embedding feature kxik by l2 normalisation
and re-scale it to s. The normalisation step on features and
weights makes the predictions only depend on the angle be-
tween the feature and the weight. The learned embedding
features are thus distributed on a hypersphere with a radius
of s.

L2 = −

1
N

N

X

i=1

log

es cos θyi

es cos θyi + Pn

j=1,j6=yi

es cos θj

.

(2)

4691

Figure 2. Training a DCNN for face recognition supervised by the ArcFace loss. Based on the feature xi and weight W normalisation, we
get the cos θj (logit) for each class as W T
j xi. We calculate the arccosθyi and get the angle between the feature xi and the ground truth
weight Wyi . In fact, Wj provides a kind of centre for each class. Then, we add an angular margin penalty m on the target (ground truth)
angle θyi . After that, we calculate cos(θyi + m) and multiply all logits by the feature scale s. The logits then go through the softmax
function and contribute to the cross entropy loss.

Algorithm 1 The Pseudo-code of ArcFace on MxNet

Input: Feature Scale s, Margin Parameter m in Eq. 3, Class Number n, Ground-Truth ID gt.

1. x = mx.symbol.L2Normalization (x, mode = ’instance’)
2. W = mx.symbol.L2Normalization (W, mode = ’instance’)
3. fc7 = mx.sym.FullyConnected (data = x, weight = W, no bias = True, num hidden = n)
4. original target logit = mx.sym.pick (fc7, gt, axis = 1)
5. theta = mx.sym.arccos (original target logit)
6. marginal target logit = mx.sym.cos (theta + m)
7. one hot = mx.sym.one hot (gt, depth = n, on value = 1.0, off value = 0.0)
8. fc7 = fc7 + mx.sym.broadcast mul (one hot, mx.sym.expand dims (marginal target logit - original target logit, 1))
9. fc7 = fc7 * s

Output: Class-wise afﬁnity score f c7.

As the embedding features are distributed around each
feature centre on the hypersphere, we add an additive angu-
lar margin penalty m between xi and Wyi to simultaneously
enhance the intra-class compactness and inter-class discrep-
ancy. Since the proposed additive angular margin penalty is
equal to the geodesic distance margin penalty in the nor-
malised hypersphere, we name our method as ArcFace.

L3 = −

1
N

N

X

i=1

log

es(cos(θyi +m))

es(cos(θyi +m)) + Pn

j=1,j6=yi

.

es cos θj

(3)
We select face images from 8 different identities contain-
ing enough samples (around 1,500 images/class) to train 2-
D feature embedding networks with the softmax and Ar-
cFace loss, respectively. As illustrated in Figure 3, the
softmax loss provides roughly separable feature embedding
but produces noticeable ambiguity in decision boundaries,
while the proposed ArcFace loss can obviously enforce a
more evident gap between the nearest classes.

2.2. Comparison with SphereFace and CosFace

Numerical Similarity. In SphereFace [15, 16], ArcFace,
and CosFace [35, 33],
three different kinds of margin
penalty are proposed, e.g. multiplicative angular margin
m1, additive angular margin m2, and additive cosine mar-

(a) Softmax

(b) ArcFace

Figure 3. Toy examples under the softmax and ArcFace loss on
8 identities with 2D features. Dots indicate samples and lines re-
fer to the centre direction of each identity. Based on the feature
normalisation, all face features are pushed to the arc space with
a ﬁxed radius. The geodesic distance gap between closest classes
becomes evident as the additive angular margin penalty is incor-
porated.

gin m3, respectively. From the view of numerical analysis,
different margin penalties, no matter add on the angle [15]
or cosine space [35], all enforce the intra-class compactness
and inter-class diversity by penalising the target logit [24].
In Figure 4(b), we plot the target logit curves of SphereFace,
ArcFace and CosFace under their best margin settings. We
only show these target logit curves within [20◦, 100◦] be-
cause the angles between Wyi and xi start from around 90◦
(random initialisation) and end at around 30◦ during Arc-
Face training as shown in Figure 4(a). Intuitively, there are
three factors in the target logit curves that affect the perfor-

4692

mance, i.e. the starting point, the end point and the slope.

(a) θj Distributions

(b) Target Logits Curves

Figure 4. Target logit analysis. (a) θj distributions from start to
end during ArcFace training. (2) Target logit curves for softmax,
SphereFace, ArcFace, CosFace and combined margin penalty
(cos(m1θ + m2) − m3).

By combining all of the margin penalties, we implement
SphereFace, ArcFace and CosFace in an united framework
with m1, m2 and m3 as the hyper-parameters.

L4 = −

1
N

N

X

i=1

log

es(cos(m1θyi +m2)−m3)

es(cos(m1θyi +m2)−m3) + Pn

j=1,j6=yi

.

es cos θj

(4)
As shown in Figure 4(b), by combining all of the above-
motioned margins (cos(m1θ + m2) − m3), we can easily
get some other target logit curves which also have high per-
formance.
Geometric Difference. Despite the numerical similarity
between ArcFace and previous works, the proposed ad-
ditive angular margin has a better geometric attribute as
the angular margin has the exact correspondence to the
geodesic distance. As illustrated in Figure 5, we compare
the decision boundaries under the binary classiﬁcation case.
The proposed ArcFace has a constant linear angular margin
throughout the whole interval. By contrast, SphereFace and
CosFace only have a nonlinear angular margin.

compared to the original SphereFace without any conver-
gence difﬁculty.

2.3. Comparison with Other Losses

Other loss functions can be designed based on the angu-
lar representation of features and weight-vectors. For exam-
ples, we can design a loss to enforce intra-class compact-
ness and inter-class discrepancy on the hypersphere. As
shown in Figure 1, we compare with three other losses in
this paper.
Intra-Loss is designed to improve the intra-class compact-
ness by decreasing the angle/arc between the sample and
the ground truth centre.

L5 = L2 +

1
πN

N

X

i=1

θyi .

(5)

Inter-Loss targets at enhancing inter-class discrepancy by
increasing the angle/arc between different centres.

L6 = L2−

1

πN (n − 1)

N

X

n

X

i=1

j=1,j6=yi

arccos(W T
yi

Wj). (6)

The Inter-Loss here is a special case of the Minimum
Hyper-spherical Energy (MHE) method [14]. In [14], both
hidden layers and output layers are regularised by MHE. In
the MHE paper, a special case of loss function was also pro-
posed by combining the SphereFace loss with MHE loss on
the last layer of the network.
Triplet-loss aims at enlarging the angle/arc margin between
triplet samples. In FaceNet [27], Euclidean margin is ap-
plied on the normalised features. Here, we employ the
triplet-loss by the angular representation of our features as
arccos(xpos

i xi) + m ≤ arccos(xneg

i xi).

Figure 5. Decision margins of different loss functions under bi-
nary classiﬁcation case. The dashed line represents the decision
boundary, and the grey areas are the decision margins.

The minor difference in margin designs can have “butter-
ﬂy effect” on the model training. For example, the original
SphereFace [15] employs an annealing optimisation strat-
egy. To avoid divergence at the beginning of training, joint
supervision from softmax is used in SphereFace to weaken
the multiplicative margin penalty. We implement a new ver-
sion of SphereFace without the integer requirement on the
margin by employing the arc-cosine function instead of us-
ing the complex double angle formula. In our implementa-
tion, we ﬁnd that m = 1.35 can obtain similar performance

3. Experiments

3.1. Implementation Details

Datasets. As given in Table 1, we separately employ CA-
SIA [41], VGGFace2 [3], MS1MV2 and DeepGlint-Face
(including MS1M-DeepGlint and Asian-DeepGlint) [1] as
our training data in order to conduct fair comparison with
other methods. Please note that the proposed MS1MV2
is a semi-automatic reﬁned version of the MS-Celeb-1M
dataset [7]. To best of our knowledge, we are the ﬁrst to em-
ploy ethnicity-speciﬁc annotators for large-scale face image
annotations, as the boundary cases (e.g. hard samples and
noisy samples) are very hard to distinguish if the annotator
is not familiar with the identity. During training, we explore
efﬁcient face veriﬁcation datasets (e.g. LFW [10], CFP-FP
[28], AgeDB-30 [19]) to check the improvement from dif-
ferent settings. Besides the most widely used LFW [10] and
YTF [38] datasets, we also report the performance of Ar-
cFace on the recent large-pose and large-age datasets(e.g.

4693

Datasets

#Identity

#Image/Video

3.2. Ablation Study on Losses

CASIA [41]

VGGFace2 [3]

MS1MV2

MS1M-DeepGlint [1]
Asian-DeepGlint [1]

LFW [10]

CFP-FP [28]

AgeDB-30 [19]

CPLFW [44]
CALFW [45]

YTF [38]

MegaFace [12]

IJB-B [37]
IJB-C [18]

10K
9.1K
85K
87K
94 K
5,749
500
568
5,749
5,749
1,595
530 (P)
1,845
3,531

0.5M
3.3M
5.8M
3.9M
2.83M
13,233
7,000
16,488
11,652
12,174
3,425
1M (G)
76.8K
148.8K

Trillion-Pairs [1]
iQIYI-VID [17]

5,749 (P)

1.58M (G)

4,934

172,835

Table 1. Face datasets for training and testing. “(P)” and “(G)”
refer to the probe and gallery set, respectively.

CPLFW [44] and CALFW [45]). We also extensively test
the proposed ArcFace on large-scale image datasets (e.g.
MegaFace [12], IJB-B [37], IJB-C [18] and Trillion-Pairs
[1]) and video datasets (iQIYI-VID [17]).

Experimental Settings. For data prepossessing, we follow
the recent papers [15, 35] to generate the normalised face
crops (112 × 112) by utilising ﬁve facial points. For the
embedding network, we employ the widely used CNN ar-
chitectures, ResNet50 and ResNet100 [9, 8]. After the last
convolutional layer, we explore the BN [11]-Dropout [29]-
FC-BN structure to get the ﬁnal 512-D embedding feature.
In this paper, we use ([training dataset, network structure,
loss]) to facilitate understanding of the experimental set-
tings.

We follow [35] to set the feature scale s to 64 and choose
the angular margin m of ArcFace at 0.5. All experiments in
this paper are implemented by MXNet [5]. We set the batch
size to 512 and train models on four NVIDIA Tesla P40
(24GB) GPUs. On CASIA, the learning rate starts from 0.1
and is divided by 10 at 20K, 28K iterations. The training
process is ﬁnished at 32K iterations. On MS1MV2, we di-
vide the learning rate at 100K,160K iterations and ﬁnish at
180K iterations. We set momentum to 0.9 and weight decay
to 5e − 4. During testing, we only keep the feature embed-
ding network without the fully connected layer (160MB for
ResNet50 and 250MB for ResNet100) and extract the 512-
D features (8.9 ms/face for ResNet50 and 15.4 ms/face for
ResNet100) for each normalised face. To get the embed-
ding features for templates (e.g. IJB-B and IJB-C) or videos
(e.g. YTF and iQIYI-VID), we simply calculate the feature
centre of all images from the template or all frames from
the video. Note that, overlap identities between the training
set and the test set are removed for strict evaluations, and
we only use a single crop for all testing.

In Table 2, we ﬁrst explore the angular margin setting
for ArcFace on the CASIA dataset with ResNet50. The best
margin observed in our experiments was 0.5. Using the pro-
posed combined margin framework in Eq. 4, it is easier to
set the margin of SphereFace and CosFace which we found
to have optimal performance when setting at 1.35 and 0.35,
respectively. Our implementations for both SphereFace and
CosFace can lead to excellent performance without observ-
ing any difﬁculty in convergence. The proposed ArcFace
achieves the highest veriﬁcation accuracy on all three test
sets. In addition, we performed extensive experiments with
the combined margin framework (some of the best perfor-
mance was observed for CM1 (1, 0.3, 0.2) and CM2 (0.9,
0.4, 0.15)) guided by the target logit curves in Figure 4(b).
The combined margin framework led to better performance
than individual SphereFace and CosFace but upper-bounded
by the performance of ArcFace.

Besides the comparison with margin-based methods, we
conduct a further comparison between ArcFace and other
losses which aim at enforcing intra-class compactness (Eq.
5) and inter-class discrepancy (Eq. 6). As the baseline
we have chosen the softmax loss and we have observed
performance drop on CFP-FP and AgeDB-30 after weight
and feature normalisation. By combining the softmax with
the intra-class loss, the performance improves on CFP-FP
and AgeDB-30. However, combining the softmax with the
inter-class loss only slightly improves the accuracy. The
fact that Triplet-loss outperforms Norm-Softmax loss in-
dicates the importance of margin in improving the perfor-
mance. However, employing margin penalty within triplet
samples is less effective than inserting margin between sam-
ples and centres as in ArcFace. Finally, we incorporate the
Intra-loss, Inter-loss and Triplet-loss into ArcFace, but no
improvement is observed, which leads us to believe that Ar-
cFace is already enforcing intra-class compactness, inter-
class discrepancy and classiﬁcation margin.

To get a better understanding of ArcFace’s superiority,
we give the detailed angle statistics on training data (CA-
SIA) and test data (LFW) under different losses in Table
3. We ﬁnd that (1) Wj is nearly synchronised with em-
bedding feature centre for ArcFace (14.29◦), but there is
an obvious deviation (44.26◦) between Wj and the em-
bedding feature centre for Norm-Softmax. Therefore, the
angles between Wj cannot absolutely represent the inter-
class discrepancy on training data. Alternatively, the em-
bedding feature centres calculated by the trained network
are more representative. (2) Intra-Loss can effectively com-
press intra-class variations but also brings in smaller inter-
class angles. (3) Inter-Loss can slightly increase inter-class
discrepancy on both W (directly) and the embedding net-
work (indirectly), but also raises intra-class angles. (4) Ar-
cFace already has very good intra-class compactness and

4694

Loss Functions
ArcFace (0.4)
ArcFace (0.45)
ArcFace (0.5)
ArcFace (0.55)
SphereFace [15]
SphereFace (1.35)

CosFace [35]
CosFace (0.35)
CM1 (1, 0.3, 0.2)

CM2 (0.9, 0.4, 0.15)

Softmax

Norm-Softmax (NS)

NS+Intra
NS+Inter

NS+Intra+Inter
Triplet (0.35)
ArcFace+Intra
ArcFace+Inter

ArcFace+Intra+Inter

ArcFace+Triplet

-

-

-

-

91.70

94.38

94.98
94.93
95.15
95.05

95.41
95.47
95.56
95.32

LFW CFP-FP AgeDB-30
99.53
99.46
99.53
99.41
99.42
99.11
99.33
99.51
99.48
99.50
99.08
98.56
98.75
98.68
98.73
98.98
99.45
99.43
99.43
99.50

95.44
95.12
95.24
94.39
89.79
93.81
90.67
94.00
91.90
95.37
95.25
95.42
95.51

94.56
94.38
94.86
92.33
88.72
90.92
89.50
91.41
89.98
94.73
94.55
95.10
94.40

Table 2. Veriﬁcation results (%) of different loss functions ([CA-
SIA, ResNet50, loss*]).

NS

ArcFace

W-EC
W-Inter
Intra1
Inter1
Intra2
Inter2

44.26
69.66
50.50
59.23
33.97
65.60

14.29
71.61
38.45
65.83
28.05
66.55

IntraL
8.83
31.34
17.50
24.07
12.94
26.28

InterL
46.85
75.66
52.74
62.40
35.38
67.90

TripletL

-
-

41.19
50.23
27.42
55.94

Table 3. The angle statistics under different losses ([CASIA,
ResNet50, loss*]). Each column denotes one particular loss. “W-
EC” refers to the mean of angles between Wj and the correspond-
ing embedding feature centre. “W-Inter” refers to the mean of
minimum angles between Wj ’s. “Intra1” and “Intra2” refer to the
mean of angles between xi and the embedding feature centre on
CASIA and LFW, respectively. “Inter1” and “Inter2” refer to the
mean of minimum angles between embedding feature centres on
CASIA and LFW, respectively.

inter-class discrepancy. (5) Triplet-Loss has similar intra-
class compactness but inferior inter-class discrepancy com-
pared to ArcFace. In addition, ArcFace has a more distinct
margin than Triplet-Loss on the test set as illustrated in Fig-
ure 6.

3.3. Evaluation Results

Results on LFW, YTF, CALFW and CPLFW. LFW [10]
and YTF [38] datasets are the most widely used benchmark
for unconstrained face veriﬁcation on images and videos. In
this paper, we follow the unrestricted with labelled outside
data protocol to report the performance. As reported in Ta-
ble 4, ArcFace trained on MS1MV2 with ResNet100 beats
the baselines (e.g. SphereFace [15] and CosFace [35]) by
a signiﬁcant margin on both LFW and YTF, which shows

(a) ArcFace

(b) Triplet-Loss

Figure 6. Angle distributions of all positive pairs and random neg-
ative pairs (∼ 0.5M) from LFW. Red area indicates positive pairs
while blue indicates negative pairs. All angles are represented in
degree. ([CASIA, ResNet50, loss*]).

LFW YTF
93.20
91.4
97.30
95.10

Method

DeepID [30]

Deep Face [31]
VGG Face [22]

FaceNet [27]

Baidu [13]

Center Loss [36]
Range Loss [43]
Marginal Loss [6]
SphereFace [15]
SphereFace+ [14]

CosFace [35]

MS1MV2, R100, ArcFace

#Image
0.2M 99.47
4.4M 97.35
2.6M 98.95
200M 99.63
1.3M 99.13
0.7M 99.28
5M
99.52
3.8M 99.48
0.5M 99.42
0.5M 99.47
5M
99.73
5.8M 99.83

-

94.9
93.70
95.98
95.0

-

97.6
98.02

Table 4. Veriﬁcation performance (%) of different methods on
LFW and YTF.

that the additive angular margin penalty can notably en-
hance the discriminative power of deeply learned features,
demonstrating the effectiveness of ArcFace.

Besides on LFW and YTF datasets, we also report the
performance of ArcFace on the recently introduced datasets
(e.g. CPLFW [44] and CALFW [45]) which show higher
pose and age variations with same identities from LFW.
Among all of the open-sourced face recognition models, the
ArcFace model is evaluated as the top-ranked face recog-
nition model as shown in Table 5, outperforming coun-
In Figure 7, we illustrate
terparts by an obvious margin.
the angle distributions (predicted by ArcFace model trained
on MS1MV2 with ResNet100) of both positive and nega-
tive pairs on LFW, CFP-FP, AgeDB-30, YTF, CPLFW and
CALFW. We can clearly ﬁnd that the intra-variance due
to pose and age gaps signiﬁcantly increases the angles be-
tween positive pairs thus making the best threshold for face
veriﬁcation increasing and generating more confusion re-
gions on the histogram.
Results on MegaFace. The MegaFace dataset [12] includes
1M images of 690K different individuals as the gallery set
and 100K photos of 530 unique individuals from FaceScrub
[21] as the probe set. On MegaFace, there are two testing
scenarios (identiﬁcation and veriﬁcation) under two proto-
cols (large or small training set). The training set is deﬁned
as large if it contains more than 0.5M images. For the fair

4695

Method

HUMAN-Individual

HUMAN-Fusion
Center Loss [36]
SphereFace [15]
VGGFace2 [3]

MS1MV2, R100, ArcFace

LFW CALFW CPLFW
97.27
99.85
98.75
99.27
99.43
99.82

82.32
86.50
85.48
90.30
90.57
95.45

81.21
85.24
77.48
81.40
84.00
92.08

Table 5. Veriﬁcation performance (%) of open-sourced face recog-
nition models on LFW, CALFW and CPLFW.

(a) LFW (99.83%)

(b) CFP-FP (98.37%)

(c) AgeDB (98.15%)

(d) YTF (98.02%)

(e) CPLFW (92.08%)

(f) CALFW (95.45%)

Figure 7. Angle distributions of both positive and negative pairs on
LFW, CFP-FP, AgeDB-30, YTF, CPLFW and CALFW. Red area
indicates positive pairs while blue indicates negative pairs. All an-
gles are represented in degree. ([MS1MV2, ResNet100, ArcFace])

comparison, we train ArcFace on CAISA and MS1MV2
under the small protocol and large protocol, respectively.
In Table 6, ArcFace trained on CASIA achieves the best
single-model identiﬁcation and veriﬁcation performance,
not only surpassing the strong baselines (e.g. SphereFace
[15] and CosFace [35]) but also outperforming other pub-
lished methods [36, 14].

As we observed an obvious performance gap between
identiﬁcation and veriﬁcation, we performed a thorough
manual check in the whole MegaFace dataset and found
many face images with wrong labels, which signiﬁcantly
affects the performance. Therefore, we manually reﬁned
the whole MegaFace dataset and report the correct perfor-
mance of ArcFace on MegaFace. On the reﬁned MegaFace,
ArcFace still clearly outperforms CosFace and achieves the
best performance on both veriﬁcation and identiﬁcation.

Under large protocol, ArcFace surpasses FaceNet [27]
by a clear margin and obtains comparable results on iden-
tiﬁcation and better results on veriﬁcation compared to
CosFace [35]. Since CosFace employs a private training
data, we retrain CosFace on our MS1MV2 dataset with
ResNet100. Under fair comparison, ArcFace shows supe-
riority over CosFace and forms an upper envelope of Cos-
Face under both identiﬁcation and veriﬁcation scenarios as
shown in Figure 8.
Results on IJB-B and IJB-C. The IJB-B dataset [37]

Methods

Softmax [15]

Contrastive Loss[15, 30]

Triplet [15, 27]
Center Loss[36]
SphereFace [15]

CosFace [35]

AM-Softmax [33]
SphereFace+ [14]

CASIA, R50, ArcFace

CASIA, R50, ArcFace, R

FaceNet [27]
CosFace [35]

MS1MV2, R100, ArcFace
MS1MV2, R100, CosFace

MS1MV2, R100, ArcFace, R
MS1MV2, R100, CosFace, R

Id (%) Ver (%)
65.92
54.85
78.86
65.21
78.32
64.79
80.14
65.49
72.729
85.561
89.88
77.11
72.47
84.44
73.03
77.50
91.75

92.34
93.69

-

70.49
82.72
81.03
80.56
98.35
97.91

86.47
96.65
96.98
96.56
98.48
97.91

Table 6. Face identiﬁcation and veriﬁcation evaluation of different
methods on MegaFace Challenge1 using FaceScrub as the probe
set. “Id” refers to the rank-1 face identiﬁcation accuracy with 1M
distractors, and “Ver” refers to the face veriﬁcation TAR at 10−6
FAR. “R” refers to data reﬁnement on both probe set and 1M dis-
tractors. ArcFace obtains state-of-the-art performance under both
small and large protocols.

(a) CMC

(b) ROC

Figure 8. CMC and ROC curves of different models on MegaFace.
Results are evaluated on both original and reﬁned MegaFace
dataset.

In total,

contains 1, 845 subjects with 21.8K still images and 55K
frames from 7, 011 videos.
there are 12, 115
templates with 10, 270 genuine matches and 8M impos-
tor matches. The IJB-C dataset [37] is a further extension
of IJB-B, having 3, 531 subjects with 31.3K still images
and 117.5K frames from 11, 779 videos.
In total, there
are 23, 124 templates with 19, 557 genuine matches and
15, 639K impostor matches.

On the IJB-B and IJB-C datasets, we employ the VGG2
dataset as the training data and the ResNet50 as the embed-
ding network to train ArcFace for the fair comparison with
the most recent methods [3, 40, 39]. In Table 7, we compare
the TAR (@FAR=1e-4) of ArcFace with the previous state-
of-the-art models [3, 40, 39]. ArcFace can obviously boost
the performance on both IJB-B and IJB-C (about 3 ∼ 5%,
which is a signiﬁcant reduction in the error). Drawing sup-
port from more training data (MS1MV2) and deeper neu-
ral network (ResNet100), ArcFace can further improve the

4696

Method

ResNet50 [3]
SENet50 [3]

ResNet50+SENet50 [3]

MN-v [40]
MN-vc [40]

ResNet50+DCN(Kpts) [39]
ResNet50+DCN(Divs) [39]
SENet50+DCN(Kpts) [39]
SENet50+DCN(Divs) [39]

VGG2, R50, ArcFace

MS1MV2, R100, ArcFace

IJB-B IJB-C
0.825
0.784
0.840
0.800
0.841
0.800
0.852
0.818
0.831
0.862
0.867
0.850
0.880
0.841
0.874
0.846
0.849
0.885
0.921
0.898
0.942
0.956

Table 7. 1:1 veriﬁcation TAR (@FAR=1e-4) on the IJB-B and IJB-
C dataset.

TAR (@FAR=1e-4) to 94.2% and 95.6% on IJB-B and IJB-
C, respectively. In Figure 9, we show the full ROC curves
of the proposed ArcFace on IJB-B and IJB-C , and ArcFace
achieves impressive performance even at FAR=1e-6 setting
a new baseline.

(a) ROC for IJB-B

(b) ROC for IJB-C

Figure 9. ROC curves of 1:1 veriﬁcation protocol on the IJB-B and
IJB-C dataset.

Results on Trillion-Pairs. The Trillion-Pairs dataset [1]
provides 1.58M images from Flickr as the gallery set and
274K images from 5.7k LFW [10] identities as the probe
set. Every pair between gallery and probe set is used
In Table 8,
for evaluation (0.4 trillion pairs in total).
we compare the performance of ArcFace trained on dif-
ferent datasets. The proposed MS1MV2 dataset obvi-
ously boosts the performance compared to CASIA and even
slightly outperforms the DeepGlint-Face dataset, which has
a double identity number. When combining all identities
from MS1MV2 and Asian celebrities from DeepGlint, Arc-
Face achieves the best identiﬁcation performance 84.840%
(@FPR=1e-3) and comparable veriﬁcation performance
compared to the most recent submission (CIGIT IRSEC)
from the lead-board.
Results on iQIYI-VID. The iQIYI-VID challenge [17]
contains 565,372 video clips (training set 219,677, valida-
tion set 172,860, and test set 172,835) of 4934 identities
from iQIYI variety shows, ﬁlms and television dramas. The
length of each video ranges from 1 to 30 seconds. This
dataset supplies multi-modal cues, including face, cloth,
voice, gait and subtitles, for character identiﬁcation. The

https://github.com/deepinsight/insightface/tree/master/Evaluation/IJB

Method
CASIA

MS1MV2

DeepGlint-Face
MS1MV2+Asian

CIGIT IRSEC

Id (@FPR=1e-3) Ver(@FPR=1e-9)

26.643
80.968
80.331

84.840 (1st)
84.234 (2nd)

21.452
78.600
78.586
80.540

81.558 (1st)

Table 8. Identiﬁcation and veriﬁcation results (%) on the Trillion-
Pairs dataset. ([Dataset*, ResNet100, ArcFace])

Method

MS1MV2+Asian, R100, ArcFace

+ MLP

+ Ensemble
+ Context

Other Participant

MAP(%)

79.80
86.40
88.26

88.65 (1st)
87.66 (2nd)

Table 9. MAP of our method on the iQIYI-VID test set. “MLP”
refers to a three-layer fully connected network trained on the
iQIYI-VID training data.

iQIYI-VID dataset employs MAP@100 as the evaluation
indicator. MAP (Mean Average Precision) refers to the
overall average accuracy rate, which is the mean of the av-
erage accuracy rate of the corresponding videos of person
ID retrieved in the test set for each person ID (as the query)
in the training set.

As shown in Table 9, ArcFace trained on combined
MS1MV2 and Asian datasets with ResNet100 sets a high
baseline (MAP=(79.80%)). Based on the embedding fea-
ture for each training video, we train an additional three-
layer fully connected network with a classiﬁcation loss to
get the customised feature descriptor on the iQIYI-VID
dataset. The MLP learned on the iQIYI-VID training set
signiﬁcantly boosts the MAP by 6.60%. Drawing support
from the model ensemble and context features from the off-
the-shelf object and scene classiﬁer [20], our ﬁnal result sur-
passes the runner-up by a clear margin ( 0.99%).

4. Conclusions

In this paper, we propose an Additive Angular Margin
Loss function, which can effectively enhance the discrim-
inative power of feature embeddings learned via DCNNs
for face recognition. We demonstrate that our method con-
sistently outperforms the state of the art through the most
comprehensive experiments. Codes with detailed explana-
tions are released to facilitate reproduciblility of the results
reported in this paper.

Acknowledgements. Jiankang Deng acknowledges ﬁnan-
cial support from the Imperial President’s PhD Scholar-
ship and GPU donations from NVIDIA. Stefanos Zafeiriou
acknowledges support from EPSRC Fellowship DEFORM
(EP/S010203/1), FACER2VM (EP/N007743/1) and a
Google Faculty Fellowship.

4697

References

[1] http://trillionpairs.deepglint.com/overview. 2, 4, 5, 8
[2] Mart´ın Abadi, Ashish Agarwal, Paul Barham, Eugene
Brevdo, Zhifeng Chen, Craig Citro, Greg S Corrado, Andy
Davis, Jeffrey Dean, Matthieu Devin, et al. Tensorﬂow:
Large-scale machine learning on heterogeneous distributed
systems. arXiv:1603.04467, 2016. 2

[3] Qiong Cao, Li Shen, Weidi Xie, Omkar M Parkhi, and An-
drew Zisserman. Vggface2: A dataset for recognising faces
across pose and age. In FG, 2018. 1, 2, 4, 5, 7, 8

[4] Binghui Chen, Weihong Deng, and Junping Du. Noisy soft-
max: improving the generalization ability of dcnn via post-
poning the early softmax saturation. In CVPR, 2017. 2

[5] Tianqi Chen, Mu Li, Yutian Li, Min Lin, Naiyan Wang,
Minjie Wang, Tianjun Xiao, Bing Xu, Chiyuan Zhang,
and Zheng Zhang. Mxnet: A ﬂexible and efﬁcient ma-
chine learning library for heterogeneous distributed systems.
arXiv:1512.01274, 2015. 2, 5

[6] Jiankang Deng, Yuxiang Zhou, and Stefanos Zafeiriou.
Marginal loss for deep face recognition. In CVPR Workshop,
2017. 2, 6

[7] Yandong Guo, Lei Zhang, Yuxiao Hu, Xiaodong He, and
Jianfeng Gao. Ms-celeb-1m: A dataset and benchmark for
large-scale face recognition. In ECCV, 2016. 4

[8] Dongyoon Han, Jiwhan Kim, and Junmo Kim. Deep pyra-

midal residual networks. arXiv:1610.02915, 2016. 5

[9] Kaiming He, Xiangyu Zhang, Shaoqing Ren, and Jian Sun.
In CVPR,

Deep residual learning for image recognition.
2016. 5

[10] Gary B Huang, Manu Ramesh, Tamara Berg, and Erik
Learned-Miller. Labeled faces in the wild: A database for
studying face recognition in unconstrained environments.
Technical report, 2007. 4, 5, 6, 8

[11] Sergey Ioffe and Christian Szegedy. Batch normalization:
Accelerating deep network training by reducing internal co-
variate shift. In ICML, 2015. 5

[12] Ira Kemelmacher-Shlizerman, Steven M Seitz, Daniel
Miller, and Evan Brossard. The megaface benchmark: 1
In CVPR, 2016. 2,
million faces for recognition at scale.
5, 6

[13] Jingtuo Liu, Yafeng Deng, Tao Bai, Zhengping Wei, and
Chang Huang. Targeting ultimate accuracy: Face recogni-
tion via deep embedding. arXiv:1506.07310, 2015. 6

[14] Weiyang Liu, Rongmei Lin, Zhen Liu, Lixin Liu, Zhiding
Yu, Bo Dai, and Le Song. Learning towards minimum hy-
perspherical energy. In NeurIPS, 2018. 4, 6, 7

[15] Weiyang Liu, Yandong Wen, Zhiding Yu, Ming Li, Bhiksha
Raj, and Le Song. Sphereface: Deep hypersphere embedding
for face recognition. In CVPR, 2017. 1, 2, 3, 4, 5, 6, 7

[16] Weiyang Liu, Yandong Wen, Zhiding Yu, and Meng Yang.
Large-margin softmax loss for convolutional neural net-
works. In ICML, 2016. 2, 3

[17] Yuanliu Liu, Peipei Shi, Bo Peng, He Yan, Yong Zhou, Bing
Han, Yi Zheng, Chao Lin, Jianbin Jiang, and Yin Fan. iqiyi-
vid: A large dataset for multi-modal person identiﬁcation.
arXiv:1811.07548, 2018. 5, 8

[18] Brianna Maze, Jocelyn Adams, James A Duncan, Nathan
Kalka, Tim Miller, Charles Otto, Anil K Jain, W Tyler
Niggel, Janet Anderson, and Jordan Cheney.
Iarpa janus
benchmark–c: Face dataset and protocol. In ICB, 2018. 2, 5
[19] Stylianos Moschoglou, Athanasios Papaioannou, Chris-
tos Sagonas, Jiankang Deng, Irene Kotsia, and Stefanos
Zafeiriou. Agedb: The ﬁrst manually collected in-the-wild
age database. In CVPR Workshop, 2017. 2, 4, 5

[20] MxNetModels. http://data.mxnet.io/models/. 8
[21] Hong-Wei Ng and Stefan Winkler. A data-driven approach

to cleaning large face datasets. In ICIP, 2014. 6

[22] Omkar M Parkhi, Andrea Vedaldi, and Andrew Zisserman.

Deep face recognition. In BMVC, 2015. 1, 2, 6

[23] Adam Paszke, Sam Gross, Soumith Chintala, Gregory
Chanan, Edward Yang, Zachary DeVito, Zeming Lin, Al-
ban Desmaison, Luca Antiga, and Adam Lerer. Automatic
differentiation in pytorch. In NeurIPS Workshop, 2017. 2

[24] Gabriel Pereyra, George Tucker, Jan Chorowski, Łukasz
Regularizing neural
Kaiser,
networks by penalizing conﬁdent output distributions.
arXiv:1701.06548, 2017. 2, 3

and Geoffrey Hinton.

[25] Xianbiao Qi and Lei Zhang. Face recognition via centralized

coordinate learning. arXiv:1801.05678, 2018. 2

[26] Rajeev Ranjan, Carlos D Castillo, and Rama Chellappa. L2-
constrained softmax loss for discriminative face veriﬁcation.
arXiv:1703.09507, 2017. 2

[27] Florian Schroff, Dmitry Kalenichenko, and James Philbin.
Facenet: A uniﬁed embedding for face recognition and clus-
tering. In CVPR, 2015. 1, 4, 6, 7

[28] Soumyadip Sengupta, Jun-Cheng Chen, Carlos Castillo,
Vishal M Patel, Rama Chellappa, and David W Jacobs.
Frontal to proﬁle face veriﬁcation in the wild.
In WACV,
2016. 2, 4, 5

[29] Nitish Srivastava, Geoffrey E Hinton, Alex Krizhevsky, Ilya
Sutskever, and Ruslan Salakhutdinov. Dropout: a simple way
to prevent neural networks from overﬁtting. JML, 2014. 5

[30] Yi Sun, Yuheng Chen, Xiaogang Wang, and Xiaoou Tang.
Deep learning face representation by joint identiﬁcation-
veriﬁcation. In NeurIPS, 2014. 1, 6, 7

[31] Yaniv Taigman, Ming Yang, Marc’Aurelio Ranzato, and Lior
Wolf. Deepface: Closing the gap to human-level perfor-
mance in face veriﬁcation. In CVPR, 2014. 1, 6

[32] Weitao Wan, Yuanyi Zhong, Tianpeng Li, and Jiansheng
Chen. Rethinking feature distribution for loss functions in
image classiﬁcation. arXiv:1803.02988, 2018. 2

[33] Feng Wang, Weiyang Liu, Haijun Liu, and Jian Cheng. Ad-
ditive margin softmax for face veriﬁcation. SPL, 2018. 2, 3,
7

[34] Feng Wang, Xiang Xiang, Jian Cheng, and Alan L Yuille.
Normface: l 2 hypersphere embedding for face veriﬁcation.
arXiv:1704.06369, 2017. 2

[35] Hao Wang, Yitong Wang, Zheng Zhou, Xing Ji, Zhifeng Li,
Dihong Gong, Jingchao Zhou, and Wei Liu. Cosface: Large
margin cosine loss for deep face recognition. In CVPR, 2018.
1, 2, 3, 5, 6, 7

[36] Yandong Wen, Kaipeng Zhang, Zhifeng Li, and Yu Qiao. A
discriminative feature learning approach for deep face recog-
nition. In ECCV, 2016. 2, 6, 7

4698

[37] Cameron Whitelam, Emma Taborsky, Austin Blanton, Bri-
anna Maze, Jocelyn C Adams, Tim Miller, Nathan D Kalka,
Anil K Jain, James A Duncan, and Kristen Allen. Iarpa janus
benchmark-b face dataset. In CVPR Workshop, 2017. 2, 5, 7
[38] Lior Wolf, Tal Hassner, and Itay Maoz. Face recognition
in unconstrained videos with matched background similarity.
In CVPR, 2011. 4, 5, 6

[39] Weidi Xie, Shen Li, and Andrew Zisserman. Comparator

networks. In ECCV, 2018. 7, 8

[40] Weidi Xie and Andrew Zisserman. Multicolumn networks

for face recognition. In BMVC, 2018. 7, 8

[41] Dong Yi, Zhen Lei, Shengcai Liao, and Stan Z Li. Learning
face representation from scratch. arXiv:1411.7923, 2014. 4,
5

[42] Kaipeng Zhang, Zhanpeng Zhang, Zhifeng Li, and Yu Qiao.
Joint face detection and alignment using multitask cascaded
convolutional networks. SPL, 2016. 1

[43] Xiao Zhang, Zhiyuan Fang, Yandong Wen, Zhifeng Li, and
Yu Qiao. Range loss for deep face recognition with long-tail.
In ICCV, 2017. 2, 6

[44] Tianyue Zheng and Weihong Deng. Cross-pose lfw: A
database for studying cross-pose face recognition in uncon-
strained environments. Technical Report, 2018. 2, 5, 6

[45] Tianyue Zheng, Weihong Deng, and Jiani Hu. Cross-age
lfw: A database for studying cross-age face recognition in
unconstrained environments. arXiv:1708.08197, 2017. 2, 5,
6

4699

