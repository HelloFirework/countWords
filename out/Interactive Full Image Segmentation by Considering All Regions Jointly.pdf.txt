Interactive Full Image Segmentation by Considering All Regions Jointly

Eirikur Agustsson
Google Research

Jasper R. R. Uijlings

Google Research

Vittorio Ferrari
Google Research

eirikur@google.com

jrru@google.com

vittoferrari@google.com

Figure 1. Illustration of our interactive full image segmentation workﬂow. First (I) the annotator marks extreme points. Then (II) our
model (Sec. 3) uses them to generate a segmentation. This is presented to the annotator, after which we iterate: (III) the annotator makes
corrections using scribbles (Sec. 4), and (IV) our model uses them to update the predicted segmentation (Sec. 3).

Abstract

We address interactive full image annotation, where the
goal is to accurately segment all object and stuff regions in
an image. We propose an interactive, scribble-based an-
notation framework which operates on the whole image to
produce segmentations for all regions. This enables shar-
ing scribble corrections across regions, and allows the an-
notator to focus on the largest errors made by the machine
across the whole image. To realize this, we adapt Mask-
RCNN [22] into a fast interactive segmentation framework
and introduce an instance-aware loss measured at the pixel-
level in the full image canvas, which lets predictions for
nearby regions properly compete for space. Finally, we
compare to interactive single object segmentation on the
COCO panoptic dataset [11, 27, 34]. We demonstrate that
our interactive full image segmentation approach leads to a
5% IoU gain, reaching 90% IoU at a budget of four extreme
clicks and four corrective scribbles per region.

1. Introduction

We address the task of interactive full image segmen-
tation, where the goal is to obtain accurate segmentations
for all object and stuff regions in the image. Full im-
age annotations are important for many applications such
as self-driving cars [17, 19], navigation assistance for the

blind [51], and automatic image captioning [25, 56]. How-
ever, creating such datasets requires large amounts of hu-
man labor. For example, annotating a single image took
1.5 hours for Cityscapes [17]. For COCO+stuff [11, 34],
annotating one image took 19 minutes (80 seconds per ob-
ject [34] plus 3 minutes for stuff regions [11]), which totals
39k hours for the 123k images. So there is a clear need for
faster annotation tools.

This paper proposes an efﬁcient interactive framework
for full image segmentation (Fig. 1 and 2). Given an image,
an annotator ﬁrst marks extreme points [41] on all object
and stuff regions. These provide a tight bounding box with
four boundary points for each region, and can be efﬁciently
collected (7s per region [41]). Next, the machine predicts
an initial segmentation for the full image based on these
extreme points. Afterwards we present the whole image
with the predicted segmentation to the annotator and iterate
between (A) the annotator providing scribbles on the errors
of the current segmentation, and (B) the machine updating
the predicted segmentation accordingly (Fig. 1).

Our approach of full image segmentation brings several
advantages over modern interactive single object segmenta-
tion methods [24, 30, 31, 32, 36, 37, 60]: (I) It enables the
annotator to focus on the largest errors in the whole image,
rather than on the largest error of one given object. (II) It
shares annotations across multiple object and stuff regions.
In our approach, a single scribble correction speciﬁes the
extension of one region and the shrinkage of neighboring re-

11622

I) Input image with extreme points provided by annotatorII) Machine predictions from extreme pointsIII) corrective scribbles provided by annotatorIV) Machine predictions from extreme points and corrective scribblesgions (Sec. 3.2 and Fig. 3). In interactive single object seg-
mentation, corrections are used for the given target object
only. (III) Our approach lets regions compete for space in
the common image canvas, ensuring that a pixel is assigned
exactly one label (Fig. 3.1). In single object segmentation
instead, pixels along boundary regions may be assigned to
multiple objects, leading to contradictory labels, or to none,
leading to holes. At the same time, since regions compete,
corrections of one region inﬂuences nearby regions in our
framework (e.g. Fig. 6).
(IV) Instead of only annotating
object instances, we also annotate stuff regions, capturing
important classes such as pavement or river.

We realize interactive interactive full image segmenta-
tion by adapting Mask-RCNN [22] (Fig. 2). We start from
extreme points [41], which deﬁne bounding boxes. There-
fore we bypass the Region Proposal Network of Mask-
RCNN and use these boxes directly to extract Region-of-
Interest (RoI) features (Sec. 3.1). Afterwards, we incorpo-
rate extreme points and scribble annotations inside Mask-
RCNN by concatenating them to the RoI-features. We en-
code annotations in a way that allows to share them across
regions, enabling advantage (II) above (Sec. 3.2). Finally,
while Mask-RCNN [22] predicts each mask separately, we
project the mask predictions back on the pixels in the com-
mon image canvas 3.1. Then we deﬁne a new loss which
is instance-aware yet lets predictions properly compete for
space, enabling advantage (III) above (Sec. 3.3).

To the best of our knowledge, all deep interactive single
object segmentation methods [24, 30, 31, 32, 36, 37, 60]
are based on Fully Convolutional Networks (FCNs) [14,
35, 46]. We chose to start from Mask-RCNN [22] for ef-
ﬁciency. FCN-style interactive segmentation methods con-
catenate corrections to a crop of an RGB image, and pass
that through a large neural net (e.g. ResNet-101 [23]). This
requires a full inference pass for each region at each correc-
tion iteration. In our Mask-RCNN framework instead, the
RGB image is ﬁrst passed through the large backbone net-
work. Afterwards, for each region only a pass over the ﬁnal
segmentation head is required (Fig. 2). This is much faster
and more memory efﬁcient (Sec. 6).

We perform thorough experiments in increasingly com-
(1) Single object segmentation: On the
plex settings:
COCO dataset [34], our Mask-RCNN style architecture
achieves similar performance to DEXTR [37] on single ob-
ject segmentation from extreme points [41]. (2) Full image
segmentation: We evaluate on the COCO panoptic chal-
lenge [11, 27, 34] the task of segmenting all object and stuff
regions in an image, starting from extreme points. Our idea
to share annotations across regions in combination with our
pixel-wise loss yield a +3% IoU gain over an interactive
single region segmentation baseline. (3) Interactive full im-
age segmentation: On the COCO panoptic challenge, we
demonstrate the combined effects of our three advantages

(I)-(III) above: at a budget of four extreme clicks and four
scribbles per region, we get a total +5% IoU gain over the
interactive single region segmentation baseline.

2. Related Work

Semantic segmentation from weakly labeled data. Many
works address semantic segmentation by training from
weakly labeled data, such as image-level labels [28, 44, 58],
point-clicks [5, 6, 13, 57], boxes [26, 37, 41] and scrib-
bles [33, 59]. Boxes can be efﬁciently annotated using ex-
treme points [41] which can also be used as an extra sig-
nal for generating segmentations [37, 41]. This is related
as our method starts from extreme points for each region.
However, the above methods operate from annotations col-
lected before any machine processing. Our work instead is
in the interactive scenario, where the annotator iteratively
provide corrective annotations for the current machine seg-
mentation.
Interactive object segmentation.
Interactive object seg-
mentation is a long standing research topic. Most classi-
cal approaches [3, 4, 8, 47, 18, 16, 21, 38] formulate object
segmentation as energy minimization on a regular graph de-
ﬁned over pixels, with unary potential capturing low-level
appearance properties and pairwise or higher-order poten-
tials encouraging regular segmentation outputs.

[60],

Starting from Xu et al.

recent methods ad-
dress interactive object segmentation with deep neural net-
works [24, 30, 31, 32, 36, 37, 60]. These works build
on Fully Convolutional architectures such as FCNs [35] or
Deeplab [14]. They input the RGB image plus two extra
channels for object and non-object corrections, and output
a binary mask.

In [15] they perform interactive object segmentation in
video. They use Deeplab [14] to create a pixel-wise embed-
ding space. Annotator corrections are used to create a near-
est neighbor classiﬁer on top of this embedding, enabling
quick updates of the object predictions.

Finally, Polygon-RNN [1, 12] is an interesting alterna-
tive approach. Instead of predicting a mask, they uses a re-
current neural net to predict polygon vertices. Corrections
made by the annotator are used by the machine to reﬁne its
vertex predictions.
Interactive full image segmentation. Recently, [2] pro-
posed Fluid Annotation, which also addresses the task of
full image annotation. Our work shares the spirit of fo-
cusing annotator effort on the biggest errors made by the
machine across the whole image. However, [2] uses Mask-
RCNN [22] to create a large pool of ﬁxed segments and then
provides an efﬁcient interface for the annotator to rapidly
select which of these should form the ﬁnal segmentation. In
contrast, in our work all segments are created from the ini-
tial extreme points and are all part of the ﬁnal annotation.
Our method then enables to correct the shape of segments

11623

Backbone 
(ResNet)

RoI Crop

Segmentation 

Head

Canvas 
Projection

Softmax

+

+

+

+

X

Input 
image

Z

bi

Backbone  

features

Boxes from 

extreme points 

zi<

si<

li<

L

P

RoI  

features

Region-level 

Image-level 

logit predictions

logit predictions

Full Image 

Segmentation

Annotations 

Figure 2: Our proposed region based model for interactive full image segmentation (see Sec. 3.1 for details). We start from Mask-
RCNN [22], but use user provided boxes (from extreme points) instead of a box proposal networks for RoI cropping, and concatenate
the RoI features with annotator provided corrective scribbles. Instead of predicting binary masks for each region, we project all region
prediction into the common image canvas, where they compete for space. The network is trained end-to-end for a novel pixel-wise loss for
the full image segmentation task (see Sec. 3.3).

to precisely match object boundaries.

Several older works on interactive segmentation handle
multiple labels in a single image [39, 40, 50, 53]. We
present the ﬁrst interactive deep learning framework which
does this. Moreover, in contrast to those works, we explic-
itly demonstrate the beneﬁts of interactive full image seg-
mentation over interactive single object segmentation.
Other works on interactive annotation. In [48] they com-
bine a segmentation network with a language module to al-
low a human to correct the segmentation by typing feedback
in natural language, such as “there are no clouds visible in
this image”. The work of [42] annotates bounding boxes
using only human veriﬁcation, while [29] trained agents to
determine whether it is more efﬁcient to verify or draw a
bounding box. The avant-garde work of [49] had a ma-
chine dispatching many labeling questions to annotators, in-
cluding whether an object class is present, box veriﬁcation,
box drawing, and ﬁnding missing instances of a particular
class in the image. In [54] they estimate the informative-
ness of having an image label, a box, or a segmentation
for an image, which they use to guide an active learning
scheme. Finally, several works tackle ﬁne-grained classi-
ﬁcation through attributes interactive provided by annota-
tors [9, 43, 7, 55].

3. Our interactive segmentation model

This section describes our model which we use to pre-
dict a segmentation from extreme points and scribble cor-
rections (Fig. 1). We ﬁrst discuss the model architecture
(Sec. 3.1). We then describe how we feed annotations to the

model (extreme points and scribble corrections, Sec. 3.2).
Finally, we describe model training with our new loss func-
tion (Sec. 3.3).

3.1. Model architecture

Our model is based on Mask-RCNN [22].

In Mask-
RCNN inference is done as follows: (1) An input image X
is passed through a deep neural network backbone such as
ResNet [23], producing a feature map Z. (2) A specialized
network module (RPN [45]) predicts box proposals based
on Z. (3) These box proposals are used to crop out Region-
of-Interest (RoI) features z from Z with a RoI cropping
layer (RoI-align [22]). (4) Then each RoI feature z is fed
into three separate network modules which predict a class
label, reﬁned box coordinates, and a segmentation mask.

Fig. 2 illustrates how we adapt Mask-RCNN [22] for in-
In particular, our net-
teractive full image segmentation.
(1) an image X of
work takes three types of inputs:
size W × H × 3; (2) N annotation maps S1, · · · , SN of
size W × H (for extreme points and scribble corrections,
Sec. 3.2); and (3) N boxes b1, · · · , bN determined by the
extreme points provided by annotators. Here N is the num-
ber of regions that we want to segment, which is determined
by the annotator, and which may vary per image.

As in Mask-RCNN, an image X is fed into our backbone
architecture (ResNet [23]) to produce feature map Z of size
1
r W × 1
r H × C, where C is the number of feature channels
and r is a reduction factor. Both C and r are determined by
the choice of backbone architecture.

In contrast to Mask-RCNN, we already have boxes

11624

<
l
a
t
e
x
i
t
 
s
h
a
1
_
b
a
s
e
6
4
=
"
k
v
0
A
1
g
8
R
y
k
m
h
n
4
k
r
c
+
a
h
Y
m
d
N
b
M
w
=
"
>
A
A
A
B
8
X
i
c
b
Z
A
9
S
w
N
B
E
I
b
n
/
I
z
x
K
2
p
p
s
x
g
E
q
3
B
n
o
4
0
Y
t
L
G
M
Y
D
4
w
O
c
L
e
Z
i
5
Z
s
r
d
3
7
O
4
J
4
Q
j
4
I
2
w
s
F
L
H
1
h
9
j
b
+
W
/
c
S
1
J
o
4
g
s
L
D
+
/
M
s
O
9
M
k
A
i
u
j
e
t
+
O
0
v
L
K
6
t
r
6
4
W
N
4
u
b
W
9
s
5
u
a
W
+
/
o
e
N
U
M
a
y
z
W
M
S
q
F
V
C
N
g
k
u
s
G
2
4
E
t
h
K
F
N
A
o
E
N
o
P
h
d
V
5
v
P
q
D
S
P
J
Z
3
Z
p
S
g
H
9
G
+
5
C
F
n
1
F
j
r
v
h
N
R
M
w
j
C
r
D
b
u
l
s
p
u
x
Z
2
I
L
I
I
3
g
/
L
l
Z
/
H
i
E
Q
B
q
3
d
J
X
p
x
e
z
N
E
J
p
m
K
B
a
t
z
0
3
M
X
5
G
l
e
F
M
4
L
j
Y
S
T
U
m
l
A
1
p
H
9
s
W
J
Y
1
Q
+
9
k
k
8
Z
g
c
W
6
d
H
w
l
j
Z
J
w
2
Z
u
L
8
n
M
h
p
p
P
Y
o
C
2
5
k
n
1
P
O
1
3
P
y
v
1
k
5
N
e
O
5
n
X
C
a
p
Q
c
m
m
H
4
W
p
I
C
Y
m
+
f
q
k
x
x
U
y
I
0
Y
W
K
F
P
c
Z
i
V
s
Q
B
V
l
x
h
6
p
a
I
/
g
z
a
+
8
C
I
3
T
i
m
f
5
1
i
t
X
r
2
C
q
A
h
z
C
E
Z
y
A
B
2
d
Q
h
R
u
o
Q
R
0
Y
S
H
i
C
F
3
h
1
t
P
P
s
v
D
n
v
0
9
Y
l
Z
z
Z
z
A
H
/
k
f
P
w
A
L
s
q
S
v
g
=
=
<
/
l
a
t
e
x
i
t
>
<
l
a
t
e
x
i
t
 
s
h
a
1
_
b
a
s
e
6
4
=
"
u
7
v
K
/
E
3
+
D
q
b
0
A
e
N
s
Y
Z
U
C
8
H
N
q
M
3
I
=
"
>
A
A
A
B
8
X
i
c
b
Z
D
L
S
g
M
x
F
I
b
P
1
F
s
d
b
1
W
X
b
o
J
F
c
F
V
m
3
O
h
G
L
L
p
x
W
c
F
e
s
B
1
K
J
s
2
0
o
Z
l
M
S
D
J
C
G
f
o
W
b
l
w
o
o
k
s
f
x
L
0
b
8
W
3
M
t
F
1
o
6
w
+
B
j
/
+
c
Q
/
5
z
Q
s
m
Z
N
p
7
3
7
R
S
W
l
l
d
W
1
4
r
r
7
s
b
m
1
v
Z
O
a
X
e
v
o
Z
N
U
E
V
o
n
C
U
9
U
K
8
S
a
c
i
Z
o
3
T
D
D
a
U
s
q
i
u
O
Q
0
2
Y
4
v
M
r
r
z
X
u
q
N
E
v
E
r
R
l
J
G
s
S
4
L
1
j
E
C
D
b
W
u
u
v
E
2
A
z
C
K
K
u
N
u
6
W
y
V
/
E
m
Q
o
v
g
z
6
B
8
8
e
G
e
y
7
c
v
t
9
Y
t
f
X
Z
6
C
U
l
j
K
g
z
h
W
O
u
2
7
0
k
T
Z
F
g
Z
R
j
g
d
u
5
1
U
U
4
n
J
E
P
d
p
2
6
L
A
M
d
V
B
N
k
k
8
R
k
f
W
6
a
E
o
U
f
Y
J
g
y
b
u
7
4
k
M
x
1
q
P
4
t
B
2
5
g
n
1
f
C
0
3
/
6
u
1
U
x
O
d
B
R
k
T
M
j
V
U
k
O
l
H
U
c
q
R
S
V
C
+
P
u
o
x
R
Y
n
h
I
w
u
Y
K
G
a
z
I
j
L
A
C
h
N
j
j
+
T
a
I
/
j
z
K
y
9
C
4
6
T
i
W
7
7
x
y
9
V
L
m
K
o
I
B
3
A
I
x
+
D
D
K
V
T
h
G
m
p
Q
B
w
I
C
H
u
A
J
n
h
3
t
P
D
o
v
z
u
u
0
t
e
D
M
Z
v
b
h
j
5
z
3
H
y
B
Z
l
D
I
=
<
/
l
a
t
e
x
i
t
>
<
l
a
t
e
x
i
t
 
s
h
a
1
_
b
a
s
e
6
4
=
"
u
7
v
K
/
E
3
+
D
q
b
0
A
e
N
s
Y
Z
U
C
8
H
N
q
M
3
I
=
"
>
A
A
A
B
8
X
i
c
b
Z
D
L
S
g
M
x
F
I
b
P
1
F
s
d
b
1
W
X
b
o
J
F
c
F
V
m
3
O
h
G
L
L
p
x
W
c
F
e
s
B
1
K
J
s
2
0
o
Z
l
M
S
D
J
C
G
f
o
W
b
l
w
o
o
k
s
f
x
L
0
b
8
W
3
M
t
F
1
o
6
w
+
B
j
/
+
c
Q
/
5
z
Q
s
m
Z
N
p
7
3
7
R
S
W
l
l
d
W
1
4
r
r
7
s
b
m
1
v
Z
O
a
X
e
v
o
Z
N
U
E
V
o
n
C
U
9
U
K
8
S
a
c
i
Z
o
3
T
D
D
a
U
s
q
i
u
O
Q
0
2
Y
4
v
M
r
r
z
X
u
q
N
E
v
E
r
R
l
J
G
s
S
4
L
1
j
E
C
D
b
W
u
u
v
E
2
A
z
C
K
K
u
N
u
6
W
y
V
/
E
m
Q
o
v
g
z
6
B
8
8
e
G
e
y
7
c
v
t
9
Y
t
f
X
Z
6
C
U
l
j
K
g
z
h
W
O
u
2
7
0
k
T
Z
F
g
Z
R
j
g
d
u
5
1
U
U
4
n
J
E
P
d
p
2
6
L
A
M
d
V
B
N
k
k
8
R
k
f
W
6
a
E
o
U
f
Y
J
g
y
b
u
7
4
k
M
x
1
q
P
4
t
B
2
5
g
n
1
f
C
0
3
/
6
u
1
U
x
O
d
B
R
k
T
M
j
V
U
k
O
l
H
U
c
q
R
S
V
C
+
P
u
o
x
R
Y
n
h
I
w
u
Y
K
G
a
z
I
j
L
A
C
h
N
j
j
+
T
a
I
/
j
z
K
y
9
C
4
6
T
i
W
7
7
x
y
9
V
L
m
K
o
I
B
3
A
I
x
+
D
D
K
V
T
h
G
m
p
Q
B
w
I
C
H
u
A
J
n
h
3
t
P
D
o
v
z
u
u
0
t
e
D
M
Z
v
b
h
j
5
z
3
H
y
B
Z
l
D
I
=
<
/
l
a
t
e
x
i
t
>
<
l
a
t
e
x
i
t
 
s
h
a
1
_
b
a
s
e
6
4
=
"
+
+
4
I
x
T
5
R
I
z
I
k
x
O
z
N
F
o
2
8
1
v
b
U
C
i
Q
=
"
>
A
A
A
B
8
X
i
c
b
V
D
L
S
s
N
A
F
L
2
p
r
1
p
f
V
Z
d
u
B
o
v
g
q
i
R
u
7
L
L
o
x
m
U
F
+
8
A
2
l
M
n
0
p
h
0
6
m
Y
S
Z
i
V
B
C
/
8
K
N
C
0
X
c
+
j
f
u
/
B
s
n
b
R
b
a
e
m
D
g
c
M
6
9
z
L
k
n
S
A
T
X
x
n
W
/
n
d
L
G
5
t
b
2
T
n
m
3
s
r
d
/
c
H
h
U
P
T
7
p
6
D
h
V
D
N
s
s
F
r
H
q
B
V
S
j
4
B
L
b
h
h
u
B
v
U
Q
h
j
Q
K
B
3
W
B
6
m
/
v
d
J
1
S
a
x
/
L
B
z
B
L
0
I
z
q
W
P
O
S
M
G
i
s
9
D
i
J
q
J
k
G
Y
t
e
b
D
a
s
2
t
u
w
u
Q
d
e
I
V
p
A
Y
F
W
s
P
q
1
2
A
U
s
z
R
C
a
Z
i
g
W
v
c
9
N
z
F
+
R
p
X
h
T
O
C
8
M
k
g
1
J
p
R
N
6
R
j
7
l
k
o
a
o
f
a
z
R
e
I
5
u
b
D
K
i
I
S
x
s
k
8
a
s
l
B
/
b
2
Q
0
0
n
o
W
B
X
Y
y
T
6
h
X
v
V
z
8
z
+
u
n
J
m
z
4
G
Z
d
J
a
l
C
y
5
U
d
h
K
o
i
J
S
X
4
+
G
X
G
F
z
I
i
Z
J
Z
Q
p
b
r
M
S
N
q
G
K
M
m
N
L
q
t
g
S
v
N
W
T
1
0
n
n
q
u
5
Z
f
u
/
V
m
j
d
F
H
W
U
4
g
3
O
4
B
A
+
u
o
Q
l
3
0
I
I
2
M
J
D
w
D
K
/
w
5
m
j
n
x
X
l
3
P
p
a
j
J
a
f
Y
O
Y
U
/
c
D
5
/
A
L
+
D
k
P
E
=
<
/
l
a
t
e
x
i
t
>
l
a
t
e
x
i
t
 
s
h
a
1
_
b
a
s
e
6
4
=
"
8
t
E
y
/
p
5
Y
o
Q
g
D
d
9
M
U
c
D
W
S
b
a
x
c
S
m
0
=
"
>
A
A
A
B
8
3
i
c
b
V
C
7
S
g
N
B
F
L
0
b
X
z
G
+
o
o
K
N
z
W
A
Q
r
M
K
u
j
Z
Z
B
G
8
s
E
z
A
O
S
J
c
5
O
Z
p
M
h
s
7
P
L
z
F
0
h
L
P
k
N
G
w
t
F
b
P
0
Z
O
x
u
/
x
d
k
k
h
S
Y
e
G
D
i
c
c
y
/
3
z
A
k
S
K
Q
y
6
7
p
d
T
W
F
v
f
2
N
w
q
b
p
d
2
d
v
f
2
D
8
q
H
R
y
0
T
p
5
r
x
J
o
t
l
r
D
s
B
N
V
w
K
x
Z
s
o
U
P
J
O
o
j
m
N
A
s
n
b
w
f
g
2
9
9
u
P
X
B
s
R
q
3
u
c
J
N
y
P
6
F
C
J
U
D
C
K
V
u
r
1
I
o
q
j
I
M
z
k
t
C
/
6
5
Y
p
b
d
W
c
g
q
8
R
b
k
E
r
t
p
P
H
9
A
A
D
1
f
v
m
z
N
4
h
Z
G
n
G
F
T
F
J
j
u
p
6
b
o
J
9
R
j
Y
J
J
P
i
3
1
U
s
M
T
y
s
Z
0
y
L
u
W
K
h
p
x
4
2
e
z
z
F
N
y
b
p
U
B
C
W
N
t
n
0
I
y
U
3
9
v
Z
D
Q
y
Z
h
I
F
d
j
L
P
a
J
a
9
X
P
z
P
6
6
Y
Y
X
v
u
Z
U
E
m
K
X
L
H
5
o
T
C
V
B
G
O
S
F
0
A
G
Q
n
O
G
c
m
I
J
Z
V
r
Y
r
I
S
N
q
K
Y
M
b
U
0
l
W
4
K
3
/
O
V
V
0
r
q
s
e
p
Y
3
v
E
r
t
B
u
Y
o
w
i
m
c
w
Q
V
4
c
A
U
1
u
I
M
6
N
I
F
B
A
k
/
w
A
q
9
O
6
j
w
7
b
8
7
7
f
L
T
g
L
H
a
O
4
Q
+
c
j
x
/
6
l
p
P
O
<
/
l
a
t
e
x
i
t
>
<
l
a
t
e
x
i
t
 
s
h
a
1
_
b
a
s
e
6
4
=
"
u
K
L
l
/
P
O
D
v
p
m
I
L
5
P
S
P
v
p
O
K
B
a
S
/
P
0
=
"
>
A
A
A
B
8
3
i
c
b
V
C
7
S
g
N
B
F
L
0
b
X
z
G
+
o
o
K
N
z
W
A
Q
r
M
K
u
j
Z
Y
h
N
p
Y
J
m
A
d
k
l
z
A
7
m
U
2
G
z
M
4
u
8
x
D
C
k
t
+
w
s
V
D
E
N
n
/
h
F
9
j
Z
+
C
3
O
J
i
k
0
8
c
D
A
4
Z
x
7
u
W
d
O
m
H
K
m
t
O
t
+
O
Y
W
N
z
a
3
t
n
e
J
u
a
W
/
/
4
P
C
o
f
H
z
S
V
o
m
R
h
L
Z
I
w
h
P
Z
D
b
G
i
n
A
n
a
0
k
x
z
2
k
0
l
x
X
H
I
a
S
c
c
3
+
V
+
5
5
F
K
x
R
L
x
o
C
c
p
D
W
I
8
F
C
x
i
B
G
s
r
+
X
6
M
9
S
i
M
M
j
7
t
s
3
6
5
4
l
b
d
O
d
A
6
8
Z
a
k
U
j
t
r
f
r
N
Z
/
a
P
R
L
3
/
6
g
4
S
Y
m
A
p
N
O
F
a
q
5
7
m
p
D
j
I
s
N
S
O
c
T
k
u
+
U
T
T
F
Z
I
y
H
t
G
e
p
w
D
F
V
Q
T
b
P
P
E
W
X
V
h
m
g
K
J
H
2
C
Y
3
m
6
u
+
N
D
M
d
K
T
e
L
Q
T
u
Y
Z
1
a
q
X
i
/
9
5
P
a
O
j
2
y
B
j
I
j
W
a
C
r
I
4
F
B
m
O
d
I
L
y
A
t
C
A
S
U
o
0
n
1
i
C
i
W
Q
2
K
y
I
j
L
D
H
R
t
q
a
S
L
c
F
b
/
f
I
6
a
V
9
X
P
c
u
b
X
q
V
W
h
w
W
K
c
A
4
X
c
A
U
e
3
E
A
N
7
q
E
B
L
S
C
Q
w
h
O
8
w
K
t
j
n
G
f
n
z
X
l
f
j
B
a
c
5
c
4
p
/
I
E
z
+
w
F
L
5
p
W
K
<
/
l
a
t
e
x
i
t
>
<
l
a
t
e
x
i
t
 
s
h
a
1
_
b
a
s
e
6
4
=
"
u
K
L
l
/
P
O
D
v
p
m
I
L
5
P
S
P
v
p
O
K
B
a
S
/
P
0
=
"
>
A
A
A
B
8
3
i
c
b
V
C
7
S
g
N
B
F
L
0
b
X
z
G
+
o
o
K
N
z
W
A
Q
r
M
K
u
j
Z
Y
h
N
p
Y
J
m
A
d
k
l
z
A
7
m
U
2
G
z
M
4
u
8
x
D
C
k
t
+
w
s
V
D
E
N
n
/
h
F
9
j
Z
+
C
3
O
J
i
k
0
8
c
D
A
4
Z
x
7
u
W
d
O
m
H
K
m
t
O
t
+
O
Y
W
N
z
a
3
t
n
e
J
u
a
W
/
/
4
P
C
o
f
H
z
S
V
o
m
R
h
L
Z
I
w
h
P
Z
D
b
G
i
n
A
n
a
0
k
x
z
2
k
0
l
x
X
H
I
a
S
c
c
3
+
V
+
5
5
F
K
x
R
L
x
o
C
c
p
D
W
I
8
F
C
x
i
B
G
s
r
+
X
6
M
9
S
i
M
M
j
7
t
s
3
6
5
4
l
b
d
O
d
A
6
8
Z
a
k
U
j
t
r
f
r
N
Z
/
a
P
R
L
3
/
6
g
4
S
Y
m
A
p
N
O
F
a
q
5
7
m
p
D
j
I
s
N
S
O
c
T
k
u
+
U
T
T
F
Z
I
y
H
t
G
e
p
w
D
F
V
Q
T
b
P
P
E
W
X
V
h
m
g
K
J
H
2
C
Y
3
m
6
u
+
N
D
M
d
K
T
e
L
Q
T
u
Y
Z
1
a
q
X
i
/
9
5
P
a
O
j
2
y
B
j
I
j
W
a
C
r
I
4
F
B
m
O
d
I
L
y
A
t
C
A
S
U
o
0
n
1
i
C
i
W
Q
2
K
y
I
j
L
D
H
R
t
q
a
S
L
c
F
b
/
f
I
6
a
V
9
X
P
c
u
b
X
q
V
W
h
w
W
K
c
A
4
X
c
A
U
e
3
E
A
N
7
q
E
B
L
S
C
Q
w
h
O
8
w
K
t
j
n
G
f
n
z
X
l
f
j
B
a
c
5
c
4
p
/
I
E
z
+
w
F
L
5
p
W
K
<
/
l
a
t
e
x
i
t
>
<
l
a
t
e
x
i
t
 
s
h
a
1
_
b
a
s
e
6
4
=
"
I
9
P
D
n
z
X
y
9
/
N
Y
+
p
2
F
7
6
+
8
Y
l
S
b
O
Q
Q
=
"
>
A
A
A
B
8
3
i
c
b
V
D
L
S
s
N
A
F
L
2
p
r
1
p
f
V
Z
d
u
B
o
v
g
q
i
R
u
d
F
l
0
4
7
K
C
f
U
A
T
y
m
R
6
0
w
6
d
T
M
L
M
R
C
i
h
v
+
H
G
h
S
J
u
/
R
l
3
/
o
2
T
N
g
t
t
P
T
B
w
O
O
d
e
7
p
k
T
p
o
J
r
4
7
r
f
T
m
V
j
c
2
t
7
p
7
p
b
2
9
s
/
O
D
y
q
H
5
9
0
d
Z
I
p
h
h
2
W
i
E
T
1
Q
6
p
R
c
I
k
d
w
4
3
A
f
q
q
Q
x
q
H
A
X
j
i
9
K
/
z
e
E
y
r
N
E
/
l
o
Z
i
k
G
M
R
1
L
H
n
F
G
j
Z
V
8
P
6
Z
m
E
k
a
5
m
A
/
5
s
N
5
w
m
+
4
C
Z
J
1
4
J
W
l
A
i
f
a
w
/
u
W
P
E
p
b
F
K
A
0
T
V
O
u
B
5
6
Y
m
y
K
k
y
n
A
m
c
1
/
x
M
Y
0
r
Z
l
I
5
x
Y
K
m
k
M
e
o
g
X
2
S
e
k
w
u
r
j
E
i
U
K
P
u
k
I
Q
v
1
9
0
Z
O
Y
6
1
n
c
W
g
n
i
4
x
6
1
S
v
E
/
7
x
B
Z
q
K
b
I
O
c
y
z
Q
x
K
t
j
w
U
Z
Y
K
Y
h
B
Q
F
k
B
F
X
y
I
y
Y
W
U
K
Z
4
j
Y
r
Y
R
O
q
K
D
O
2
p
p
o
t
w
V
v
9
8
j
r
p
X
j
U
9
y
x
+
8
R
u
u
2
r
K
M
K
Z
3
A
O
l
+
D
B
N
b
T
g
H
t
r
Q
A
Q
Y
p
P
M
M
r
v
D
m
Z
8
+
K
8
O
x
/
L
0
Y
p
T
7
p
z
C
H
z
i
f
P
2
v
+
k
e
k
=
<
/
l
a
t
e
x
i
t
>
l
a
t
e
x
i
t
 
s
h
a
1
_
b
a
s
e
6
4
=
"
F
T
1
g
P
r
Q
g
0
G
U
D
v
1
q
D
B
5
D
R
j
G
Q
T
/
a
0
=
"
>
A
A
A
B
8
3
i
c
b
V
C
7
S
g
N
B
F
L
0
b
X
z
G
+
o
o
K
N
z
W
A
Q
r
M
K
u
j
Z
Z
B
G
8
s
E
z
A
O
S
J
c
5
O
Z
p
M
h
s
7
P
L
z
F
0
h
L
P
k
N
G
w
t
F
b
P
0
Z
O
x
u
/
x
d
k
k
h
S
Y
e
G
D
i
c
c
y
/
3
z
A
k
S
K
Q
y
6
7
p
d
T
W
F
v
f
2
N
w
q
b
p
d
2
d
v
f
2
D
8
q
H
R
y
0
T
p
5
r
x
J
o
t
l
r
D
s
B
N
V
w
K
x
Z
s
o
U
P
J
O
o
j
m
N
A
s
n
b
w
f
g
2
9
9
u
P
X
B
s
R
q
3
u
c
J
N
y
P
6
F
C
J
U
D
C
K
V
u
r
1
I
o
q
j
I
M
z
M
t
C
/
6
5
Y
p
b
d
W
c
g
q
8
R
b
k
E
r
t
p
P
H
9
A
A
D
1
f
v
m
z
N
4
h
Z
G
n
G
F
T
F
J
j
u
p
6
b
o
J
9
R
j
Y
J
J
P
i
3
1
U
s
M
T
y
s
Z
0
y
L
u
W
K
h
p
x
4
2
e
z
z
F
N
y
b
p
U
B
C
W
N
t
n
0
I
y
U
3
9
v
Z
D
Q
y
Z
h
I
F
d
j
L
P
a
J
a
9
X
P
z
P
6
6
Y
Y
X
v
u
Z
U
E
m
K
X
L
H
5
o
T
C
V
B
G
O
S
F
0
A
G
Q
n
O
G
c
m
I
J
Z
V
r
Y
r
I
S
N
q
K
Y
M
b
U
0
l
W
4
K
3
/
O
V
V
0
r
q
s
e
p
Y
3
v
E
r
t
B
u
Y
o
w
i
m
c
w
Q
V
4
c
A
U
1
u
I
M
6
N
I
F
B
A
k
/
w
A
q
9
O
6
j
w
7
b
8
7
7
f
L
T
g
L
H
a
O
4
Q
+
c
j
x
8
F
V
p
P
V
<
/
l
a
t
e
x
i
t
>
<
l
a
t
e
x
i
t
 
s
h
a
1
_
b
a
s
e
6
4
=
"
2
x
M
y
J
9
S
A
O
F
e
E
J
o
V
S
n
C
e
p
x
6
m
j
1
a
c
=
"
>
A
A
A
B
8
3
i
c
b
V
C
7
S
g
N
B
F
L
0
b
X
z
G
+
o
o
K
N
z
W
A
Q
r
M
K
u
j
Z
Y
h
N
p
Y
J
m
A
d
k
l
z
A
7
m
U
2
G
z
M
4
u
8
x
D
C
k
t
+
w
s
V
D
E
N
n
/
h
F
9
j
Z
+
C
3
O
J
i
k
0
8
c
D
A
4
Z
x
7
u
W
d
O
m
H
K
m
t
O
t
+
O
Y
W
N
z
a
3
t
n
e
J
u
a
W
/
/
4
P
C
o
f
H
z
S
V
o
m
R
h
L
Z
I
w
h
P
Z
D
b
G
i
n
A
n
a
0
k
x
z
2
k
0
l
x
X
H
I
a
S
c
c
3
+
V
+
5
5
F
K
x
R
L
x
o
C
c
p
D
W
I
8
F
C
x
i
B
G
s
r
+
X
6
M
9
S
i
M
M
j
X
t
s
3
6
5
4
l
b
d
O
d
A
6
8
Z
a
k
U
j
t
r
f
r
N
Z
/
a
P
R
L
3
/
6
g
4
S
Y
m
A
p
N
O
F
a
q
5
7
m
p
D
j
I
s
N
S
O
c
T
k
u
+
U
T
T
F
Z
I
y
H
t
G
e
p
w
D
F
V
Q
T
b
P
P
E
W
X
V
h
m
g
K
J
H
2
C
Y
3
m
6
u
+
N
D
M
d
K
T
e
L
Q
T
u
Y
Z
1
a
q
X
i
/
9
5
P
a
O
j
2
y
B
j
I
j
W
a
C
r
I
4
F
B
m
O
d
I
L
y
A
t
C
A
S
U
o
0
n
1
i
C
i
W
Q
2
K
y
I
j
L
D
H
R
t
q
a
S
L
c
F
b
/
f
I
6
a
V
9
X
P
c
u
b
X
q
V
W
h
w
W
K
c
A
4
X
c
A
U
e
3
E
A
N
7
q
E
B
L
S
C
Q
w
h
O
8
w
K
t
j
n
G
f
n
z
X
l
f
j
B
a
c
5
c
4
p
/
I
E
z
+
w
F
W
l
5
W
R
<
/
l
a
t
e
x
i
t
>
<
l
a
t
e
x
i
t
 
s
h
a
1
_
b
a
s
e
6
4
=
"
2
x
M
y
J
9
S
A
O
F
e
E
J
o
V
S
n
C
e
p
x
6
m
j
1
a
c
=
"
>
A
A
A
B
8
3
i
c
b
V
C
7
S
g
N
B
F
L
0
b
X
z
G
+
o
o
K
N
z
W
A
Q
r
M
K
u
j
Z
Y
h
N
p
Y
J
m
A
d
k
l
z
A
7
m
U
2
G
z
M
4
u
8
x
D
C
k
t
+
w
s
V
D
E
N
n
/
h
F
9
j
Z
+
C
3
O
J
i
k
0
8
c
D
A
4
Z
x
7
u
W
d
O
m
H
K
m
t
O
t
+
O
Y
W
N
z
a
3
t
n
e
J
u
a
W
/
/
4
P
C
o
f
H
z
S
V
o
m
R
h
L
Z
I
w
h
P
Z
D
b
G
i
n
A
n
a
0
k
x
z
2
k
0
l
x
X
H
I
a
S
c
c
3
+
V
+
5
5
F
K
x
R
L
x
o
C
c
p
D
W
I
8
F
C
x
i
B
G
s
r
+
X
6
M
9
S
i
M
M
j
X
t
s
3
6
5
4
l
b
d
O
d
A
6
8
Z
a
k
U
j
t
r
f
r
N
Z
/
a
P
R
L
3
/
6
g
4
S
Y
m
A
p
N
O
F
a
q
5
7
m
p
D
j
I
s
N
S
O
c
T
k
u
+
U
T
T
F
Z
I
y
H
t
G
e
p
w
D
F
V
Q
T
b
P
P
E
W
X
V
h
m
g
K
J
H
2
C
Y
3
m
6
u
+
N
D
M
d
K
T
e
L
Q
T
u
Y
Z
1
a
q
X
i
/
9
5
P
a
O
j
2
y
B
j
I
j
W
a
C
r
I
4
F
B
m
O
d
I
L
y
A
t
C
A
S
U
o
0
n
1
i
C
i
W
Q
2
K
y
I
j
L
D
H
R
t
q
a
S
L
c
F
b
/
f
I
6
a
V
9
X
P
c
u
b
X
q
V
W
h
w
W
K
c
A
4
X
c
A
U
e
3
E
A
N
7
q
E
B
L
S
C
Q
w
h
O
8
w
K
t
j
n
G
f
n
z
X
l
f
j
B
a
c
5
c
4
p
/
I
E
z
+
w
F
W
l
5
W
R
<
/
l
a
t
e
x
i
t
>
<
l
a
t
e
x
i
t
 
s
h
a
1
_
b
a
s
e
6
4
=
"
2
D
g
2
5
N
t
O
y
f
C
v
M
/
p
j
W
F
G
X
O
0
3
o
E
W
w
=
"
>
A
A
A
B
8
3
i
c
b
V
D
L
S
s
N
A
F
L
2
p
r
1
p
f
V
Z
d
u
B
o
v
g
q
i
R
u
d
F
l
0
4
7
K
C
f
U
A
T
y
m
R
6
0
w
6
d
T
M
L
M
R
C
i
h
v
+
H
G
h
S
J
u
/
R
l
3
/
o
2
T
N
g
t
t
P
T
B
w
O
O
d
e
7
p
k
T
p
o
J
r
4
7
r
f
T
m
V
j
c
2
t
7
p
7
p
b
2
9
s
/
O
D
y
q
H
5
9
0
d
Z
I
p
h
h
2
W
i
E
T
1
Q
6
p
R
c
I
k
d
w
4
3
A
f
q
q
Q
x
q
H
A
X
j
i
9
K
/
z
e
E
y
r
N
E
/
l
o
Z
i
k
G
M
R
1
L
H
n
F
G
j
Z
V
8
P
6
Z
m
E
k
a
5
n
g
/
5
s
N
5
w
m
+
4
C
Z
J
1
4
J
W
l
A
i
f
a
w
/
u
W
P
E
p
b
F
K
A
0
T
V
O
u
B
5
6
Y
m
y
K
k
y
n
A
m
c
1
/
x
M
Y
0
r
Z
l
I
5
x
Y
K
m
k
M
e
o
g
X
2
S
e
k
w
u
r
j
E
i
U
K
P
u
k
I
Q
v
1
9
0
Z
O
Y
6
1
n
c
W
g
n
i
4
x
6
1
S
v
E
/
7
x
B
Z
q
K
b
I
O
c
y
z
Q
x
K
t
j
w
U
Z
Y
K
Y
h
B
Q
F
k
B
F
X
y
I
y
Y
W
U
K
Z
4
j
Y
r
Y
R
O
q
K
D
O
2
p
p
o
t
w
V
v
9
8
j
r
p
X
j
U
9
y
x
+
8
R
u
u
2
r
K
M
K
Z
3
A
O
l
+
D
B
N
b
T
g
H
t
r
Q
A
Q
Y
p
P
M
M
r
v
D
m
Z
8
+
K
8
O
x
/
L
0
Y
p
T
7
p
z
C
H
z
i
f
P
3
a
v
k
f
A
=
<
/
l
a
t
e
x
i
t
>
<
l
a
t
e
x
i
t
 
s
h
a
1
_
b
a
s
e
6
4
=
"
P
B
o
E
7
N
r
4
j
x
6
T
A
L
B
N
C
G
e
+
6
R
z
p
5
T
Q
=
"
>
A
A
A
B
8
X
i
c
b
Z
D
L
S
g
M
x
F
I
Z
P
6
q
2
O
t
6
p
L
N
8
E
i
u
C
o
z
b
n
Q
j
F
t
2
4
r
G
A
v
t
B
1
K
J
s
2
0
o
Z
n
M
k
G
S
E
M
h
R
8
C
D
c
u
F
H
H
r
g
7
h
3
5
9
u
Y
a
b
v
Q
1
h
8
C
H
/
8
5
h
/
z
n
B
I
n
g
2
r
j
u
N
y
q
s
r
K
6
t
b
x
Q
3
n
a
3
t
n
d
2
9
0
v
5
B
Q
8
e
p
o
q
x
O
Y
x
G
r
V
k
A
0
E
1
y
y
u
u
F
G
s
F
a
i
G
I
k
C
w
Z
r
B
6
C
a
v
N
x
+
Y
0
j
y
W
9
2
a
c
M
D
8
i
A
8
l
D
T
o
m
x
V
r
s
b
E
T
M
M
w
q
w
9
6
Z
X
K
b
s
W
d
C
i
+
D
N
4
f
y
1
a
d
z
+
Q
g
A
t
V
7
p
q
9
u
P
a
R
o
x
a
a
g
g
W
n
c
8
N
z
F
+
R
p
T
h
V
L
C
J
0
0
0
1
S
w
g
d
k
Q
H
r
W
J
Q
k
Y
t
r
P
p
o
k
n
+
M
Q
6
f
R
z
G
y
j
5
p
8
N
T
9
P
Z
G
R
S
O
t
x
F
N
j
O
P
K
F
e
r
O
X
m
f
7
V
O
a
s
I
L
P
+
M
y
S
Q
2
T
d
P
Z
R
m
A
p
s
Y
p
y
v
j
/
t
c
M
W
r
E
2
A
K
h
i
t
u
s
m
A
6
J
I
t
T
Y
I
z
n
2
C
N
7
i
y
s
v
Q
O
K
t
4
l
u
+
8
c
v
U
a
Z
i
r
C
E
R
z
D
K
X
h
w
D
l
W
4
h
R
r
U
g
Y
K
E
J
3
i
B
V
6
T
R
M
3
p
D
7
7
P
W
A
p
r
P
H
M
I
f
o
Y
8
f
P
f
y
S
y
A
=
=
<
/
l
a
t
e
x
i
t
>
<
l
a
t
e
x
i
t
 
s
h
a
1
_
b
a
s
e
6
4
=
"
Y
s
J
b
o
e
/
D
W
Z
B
+
8
r
c
n
A
J
5
B
h
G
2
Y
d
B
g
=
"
>
A
A
A
B
8
X
i
c
b
Z
D
L
S
g
M
x
F
I
b
P
e
K
3
j
r
e
r
S
T
b
A
I
r
s
q
M
G
9
2
I
R
T
c
u
K
9
g
L
b
Y
e
S
S
T
N
t
a
C
Y
T
k
o
x
Q
h
r
6
F
G
x
e
K
6
N
I
H
c
e
9
G
f
B
s
z
b
R
f
a
+
k
P
g
4
z
/
n
k
P
+
c
U
H
K
m
j
e
d
9
O
0
v
L
K
6
t
r
6
4
U
N
d
3
N
r
e
2
e
3
u
L
d
f
1
0
m
q
C
K
2
R
h
C
e
q
G
W
J
N
O
R
O
0
Z
p
j
h
t
C
k
V
x
X
H
I
a
S
M
c
X
u
f
1
x
j
1
V
m
i
X
i
z
o
w
k
D
W
L
c
F
y
x
i
B
B
t
r
t
T
o
x
N
o
M
w
y
l
r
j
b
r
H
k
l
b
2
J
0
C
L
4
M
y
h
d
f
r
g
X
8
u
3
L
r
X
a
L
n
5
1
e
Q
t
K
Y
C
k
M
4
1
r
r
t
e
9
I
E
G
V
a
G
E
U
7
H
b
i
f
V
V
G
I
y
x
H
3
a
t
i
h
w
T
H
W
Q
T
R
K
P
0
b
F
1
e
i
h
K
l
H
3
C
o
I
n
7
e
y
L
D
s
d
a
j
O
L
S
d
e
U
I
9
X
8
v
N
/
2
r
t
1
E
T
n
Q
c
a
E
T
A
0
V
Z
P
p
R
l
H
J
k
E
p
S
v
j
3
p
M
U
W
L
4
y
A
I
m
i
t
m
s
i
A
y
w
w
s
T
Y
I
7
n
2
C
P
7
8
y
o
t
Q
P
y
3
7
l
m
/
9
U
u
U
K
p
i
r
A
I
R
z
B
C
f
h
w
B
h
W
4
g
S
r
U
g
I
C
A
B
3
i
C
Z
0
c
7
j
8
6
L
8
z
p
t
X
X
J
m
M
w
f
w
R
8
7
7
D
y
+
L
l
D
w
=
<
/
l
a
t
e
x
i
t
>
<
l
a
t
e
x
i
t
 
s
h
a
1
_
b
a
s
e
6
4
=
"
Y
s
J
b
o
e
/
D
W
Z
B
+
8
r
c
n
A
J
5
B
h
G
2
Y
d
B
g
=
"
>
A
A
A
B
8
X
i
c
b
Z
D
L
S
g
M
x
F
I
b
P
e
K
3
j
r
e
r
S
T
b
A
I
r
s
q
M
G
9
2
I
R
T
c
u
K
9
g
L
b
Y
e
S
S
T
N
t
a
C
Y
T
k
o
x
Q
h
r
6
F
G
x
e
K
6
N
I
H
c
e
9
G
f
B
s
z
b
R
f
a
+
k
P
g
4
z
/
n
k
P
+
c
U
H
K
m
j
e
d
9
O
0
v
L
K
6
t
r
6
4
U
N
d
3
N
r
e
2
e
3
u
L
d
f
1
0
m
q
C
K
2
R
h
C
e
q
G
W
J
N
O
R
O
0
Z
p
j
h
t
C
k
V
x
X
H
I
a
S
M
c
X
u
f
1
x
j
1
V
m
i
X
i
z
o
w
k
D
W
L
c
F
y
x
i
B
B
t
r
t
T
o
x
N
o
M
w
y
l
r
j
b
r
H
k
l
b
2
J
0
C
L
4
M
y
h
d
f
r
g
X
8
u
3
L
r
X
a
L
n
5
1
e
Q
t
K
Y
C
k
M
4
1
r
r
t
e
9
I
E
G
V
a
G
E
U
7
H
b
i
f
V
V
G
I
y
x
H
3
a
t
i
h
w
T
H
W
Q
T
R
K
P
0
b
F
1
e
i
h
K
l
H
3
C
o
I
n
7
e
y
L
D
s
d
a
j
O
L
S
d
e
U
I
9
X
8
v
N
/
2
r
t
1
E
T
n
Q
c
a
E
T
A
0
V
Z
P
p
R
l
H
J
k
E
p
S
v
j
3
p
M
U
W
L
4
y
A
I
m
i
t
m
s
i
A
y
w
w
s
T
Y
I
7
n
2
C
P
7
8
y
o
t
Q
P
y
3
7
l
m
/
9
U
u
U
K
p
i
r
A
I
R
z
B
C
f
h
w
B
h
W
4
g
S
r
U
g
I
C
A
B
3
i
C
Z
0
c
7
j
8
6
L
8
z
p
t
X
X
J
m
M
w
f
w
R
8
7
7
D
y
+
L
l
D
w
=
<
/
l
a
t
e
x
i
t
>
<
l
a
t
e
x
i
t
 
s
h
a
1
_
b
a
s
e
6
4
=
"
X
P
B
i
C
8
7
+
u
Q
7
2
e
Y
6
E
s
z
5
o
P
x
U
u
A
T
0
=
"
>
A
A
A
B
8
X
i
c
b
V
D
L
S
s
N
A
F
L
2
p
r
1
p
f
V
Z
d
u
B
o
v
g
q
i
R
u
d
F
l
0
4
7
K
C
f
d
A
2
l
M
n
0
p
h
0
6
m
Y
S
Z
i
V
B
C
/
8
K
N
C
0
X
c
+
j
f
u
/
B
s
n
b
R
b
a
e
m
D
g
c
M
6
9
z
L
k
n
S
A
T
X
x
n
W
/
n
d
L
G
5
t
b
2
T
n
m
3
s
r
d
/
c
H
h
U
P
T
5
p
6
z
h
V
D
F
s
s
F
r
H
q
B
l
S
j
4
B
J
b
h
h
u
B
3
U
Q
h
j
Q
K
B
n
W
B
6
l
/
u
d
J
1
S
a
x
/
L
R
z
B
L
0
I
z
q
W
P
O
S
M
G
i
v
1
B
h
E
1
k
y
D
M
e
v
N
h
t
e
b
W
3
Q
X
I
O
v
E
K
U
o
M
C
z
W
H
1
a
z
C
K
W
R
q
h
N
E
x
Q
r
f
u
e
m
x
g
/
o
8
p
w
J
n
B
e
G
a
Q
a
E
8
q
m
d
I
x
9
S
y
W
N
U
P
v
Z
I
v
G
c
X
F
h
l
R
M
J
Y
2
S
c
N
W
a
i
/
N
z
I
a
a
T
2
L
A
j
u
Z
J
9
S
r
X
i
7
+
5
/
V
T
E
9
7
4
G
Z
d
J
a
l
C
y
5
U
d
h
K
o
i
J
S
X
4
+
G
X
G
F
z
I
i
Z
J
Z
Q
p
b
r
M
S
N
q
G
K
M
m
N
L
q
t
g
S
v
N
W
T
1
0
n
7
q
u
5
Z
/
u
D
V
G
r
d
F
H
W
U
4
g
3
O
4
B
A
+
u
o
Q
H
3
0
I
Q
W
M
J
D
w
D
K
/
w
5
m
j
n
x
X
l
3
P
p
a
j
J
a
f
Y
O
Y
U
/
c
D
5
/
A
M
6
1
k
P
s
=
<
/
l
a
t
e
x
i
t
>
<
l
a
t
e
x
i
t
 
s
h
a
1
_
b
a
s
e
6
4
=
"
l
o
8
+
O
k
d
E
k
X
T
n
L
+
E
v
E
S
u
T
b
l
u
L
5
D
g
=
"
>
A
A
A
B
8
X
i
c
b
Z
A
9
S
w
N
B
E
I
b
n
/
I
z
x
K
2
p
p
s
x
g
E
q
3
B
n
o
4
0
Y
t
L
G
M
Y
D
4
w
O
c
L
e
Z
i
9
Z
s
r
d
3
7
M
4
J
4
Q
j
4
I
2
w
s
F
L
H
1
h
9
j
b
+
W
/
c
S
1
J
o
4
g
s
L
D
+
/
M
s
O
9
M
k
E
h
h
0
H
W
/
n
a
X
l
l
d
W
1
9
c
J
G
c
X
N
r
e
2
e
3
t
L
f
f
M
H
G
q
G
a
+
z
W
M
a
6
F
V
D
D
p
V
C
8
j
g
I
l
b
y
W
a
0
y
i
Q
v
B
k
M
r
/
N
6
8
4
F
r
I
2
J
1
h
6
O
E
+
x
H
t
K
x
E
K
R
t
F
a
9
5
2
I
4
i
A
I
s
9
a
4
W
y
q
7
F
X
c
i
s
g
j
e
D
M
q
X
n
8
W
L
R
w
C
o
d
U
t
f
n
V
7
M
0
o
g
r
Z
J
I
a
0
/
b
c
B
P
2
M
a
h
R
M
8
n
G
x
k
x
q
e
U
D
a
k
f
d
6
2
q
G
j
E
j
Z
9
N
E
o
/
J
s
X
V
6
J
I
y
1
f
Q
r
J
x
P
0
9
k
d
H
I
m
F
E
U
2
M
4
8
o
Z
m
v
5
e
Z
/
t
X
a
K
4
b
m
f
C
Z
W
k
y
B
W
b
f
h
S
m
k
m
B
M
8
v
V
J
T
2
j
O
U
I
4
s
U
K
a
F
z
U
r
Y
g
G
r
K
0
B
6
p
a
I
/
g
z
a
+
8
C
I
3
T
i
m
f
5
1
i
t
X
r
2
C
q
A
h
z
C
E
Z
y
A
B
2
d
Q
h
R
u
o
Q
R
0
Y
K
H
i
C
F
3
h
1
j
P
P
s
v
D
n
v
0
9
Y
l
Z
z
Z
z
A
H
/
k
f
P
w
A
O
v
K
S
x
g
=
=
<
/
l
a
t
e
x
i
t
>
<
l
a
t
e
x
i
t
 
s
h
a
1
_
b
a
s
e
6
4
=
"
w
U
z
g
B
p
Z
6
I
/
Z
1
X
U
h
f
p
V
g
6
r
2
d
k
Q
y
c
=
"
>
A
A
A
B
8
X
i
c
b
Z
D
L
S
g
M
x
F
I
b
P
1
F
s
d
b
1
W
X
b
o
J
F
c
F
V
m
3
O
h
G
L
L
p
x
W
c
F
e
s
B
1
K
J
s
2
0
o
Z
l
M
S
D
J
C
G
f
o
W
b
l
w
o
o
k
s
f
x
L
0
b
8
W
3
M
t
F
1
o
6
w
+
B
j
/
+
c
Q
/
5
z
Q
s
m
Z
N
p
7
3
7
R
S
W
l
l
d
W
1
4
r
r
7
s
b
m
1
v
Z
O
a
X
e
v
o
Z
N
U
E
V
o
n
C
U
9
U
K
8
S
a
c
i
Z
o
3
T
D
D
a
U
s
q
i
u
O
Q
0
2
Y
4
v
M
r
r
z
X
u
q
N
E
v
E
r
R
l
J
G
s
S
4
L
1
j
E
C
D
b
W
u
u
v
E
2
A
z
C
K
G
u
N
u
6
W
y
V
/
E
m
Q
o
v
g
z
6
B
8
8
e
G
e
y
7
c
v
t
9
Y
t
f
X
Z
6
C
U
l
j
K
g
z
h
W
O
u
2
7
0
k
T
Z
F
g
Z
R
j
g
d
u
5
1
U
U
4
n
J
E
P
d
p
2
6
L
A
M
d
V
B
N
k
k
8
R
k
f
W
6
a
E
o
U
f
Y
J
g
y
b
u
7
4
k
M
x
1
q
P
4
t
B
2
5
g
n
1
f
C
0
3
/
6
u
1
U
x
O
d
B
R
k
T
M
j
V
U
k
O
l
H
U
c
q
R
S
V
C
+
P
u
o
x
R
Y
n
h
I
w
u
Y
K
G
a
z
I
j
L
A
C
h
N
j
j
+
T
a
I
/
j
z
K
y
9
C
4
6
T
i
W
7
7
x
y
9
V
L
m
K
o
I
B
3
A
I
x
+
D
D
K
V
T
h
G
m
p
Q
B
w
I
C
H
u
A
J
n
h
3
t
P
D
o
v
z
u
u
0
t
e
D
M
Z
v
b
h
j
5
z
3
H
y
y
B
l
D
o
=
<
/
l
a
t
e
x
i
t
>
<
l
a
t
e
x
i
t
 
s
h
a
1
_
b
a
s
e
6
4
=
"
w
U
z
g
B
p
Z
6
I
/
Z
1
X
U
h
f
p
V
g
6
r
2
d
k
Q
y
c
=
"
>
A
A
A
B
8
X
i
c
b
Z
D
L
S
g
M
x
F
I
b
P
1
F
s
d
b
1
W
X
b
o
J
F
c
F
V
m
3
O
h
G
L
L
p
x
W
c
F
e
s
B
1
K
J
s
2
0
o
Z
l
M
S
D
J
C
G
f
o
W
b
l
w
o
o
k
s
f
x
L
0
b
8
W
3
M
t
F
1
o
6
w
+
B
j
/
+
c
Q
/
5
z
Q
s
m
Z
N
p
7
3
7
R
S
W
l
l
d
W
1
4
r
r
7
s
b
m
1
v
Z
O
a
X
e
v
o
Z
N
U
E
V
o
n
C
U
9
U
K
8
S
a
c
i
Z
o
3
T
D
D
a
U
s
q
i
u
O
Q
0
2
Y
4
v
M
r
r
z
X
u
q
N
E
v
E
r
R
l
J
G
s
S
4
L
1
j
E
C
D
b
W
u
u
v
E
2
A
z
C
K
G
u
N
u
6
W
y
V
/
E
m
Q
o
v
g
z
6
B
8
8
e
G
e
y
7
c
v
t
9
Y
t
f
X
Z
6
C
U
l
j
K
g
z
h
W
O
u
2
7
0
k
T
Z
F
g
Z
R
j
g
d
u
5
1
U
U
4
n
J
E
P
d
p
2
6
L
A
M
d
V
B
N
k
k
8
R
k
f
W
6
a
E
o
U
f
Y
J
g
y
b
u
7
4
k
M
x
1
q
P
4
t
B
2
5
g
n
1
f
C
0
3
/
6
u
1
U
x
O
d
B
R
k
T
M
j
V
U
k
O
l
H
U
c
q
R
S
V
C
+
P
u
o
x
R
Y
n
h
I
w
u
Y
K
G
a
z
I
j
L
A
C
h
N
j
j
+
T
a
I
/
j
z
K
y
9
C
4
6
T
i
W
7
7
x
y
9
V
L
m
K
o
I
B
3
A
I
x
+
D
D
K
V
T
h
G
m
p
Q
B
w
I
C
H
u
A
J
n
h
3
t
P
D
o
v
z
u
u
0
t
e
D
M
Z
v
b
h
j
5
z
3
H
y
y
B
l
D
o
=
<
/
l
a
t
e
x
i
t
>
<
l
a
t
e
x
i
t
 
s
h
a
1
_
b
a
s
e
6
4
=
"
r
F
n
N
E
V
v
y
S
q
B
v
S
i
M
n
V
O
W
/
e
B
Q
R
w
0
4
=
"
>
A
A
A
B
8
X
i
c
b
V
D
L
S
s
N
A
F
L
2
p
r
1
p
f
V
Z
d
u
B
o
v
g
q
i
R
u
7
L
L
o
x
m
U
F
+
8
A
2
l
M
n
0
p
h
0
6
m
Y
S
Z
i
V
B
C
/
8
K
N
C
0
X
c
+
j
f
u
/
B
s
n
b
R
b
a
e
m
D
g
c
M
6
9
z
L
k
n
S
A
T
X
x
n
W
/
n
d
L
G
5
t
b
2
T
n
m
3
s
r
d
/
c
H
h
U
P
T
7
p
6
D
h
V
D
N
s
s
F
r
H
q
B
V
S
j
4
B
L
b
h
h
u
B
v
U
Q
h
j
Q
K
B
3
W
B
6
m
/
v
d
J
1
S
a
x
/
L
B
z
B
L
0
I
z
q
W
P
O
S
M
G
i
s
9
D
i
J
q
J
k
G
Y
9
e
b
D
a
s
2
t
u
w
u
Q
d
e
I
V
p
A
Y
F
W
s
P
q
1
2
A
U
s
z
R
C
a
Z
i
g
W
v
c
9
N
z
F
+
R
p
X
h
T
O
C
8
M
k
g
1
J
p
R
N
6
R
j
7
l
k
o
a
o
f
a
z
R
e
I
5
u
b
D
K
i
I
S
x
s
k
8
a
s
l
B
/
b
2
Q
0
0
n
o
W
B
X
Y
y
T
6
h
X
v
V
z
8
z
+
u
n
J
m
z
4
G
Z
d
J
a
l
C
y
5
U
d
h
K
o
i
J
S
X
4
+
G
X
G
F
z
I
i
Z
J
Z
Q
p
b
r
M
S
N
q
G
K
M
m
N
L
q
t
g
S
v
N
W
T
1
0
n
n
q
u
5
Z
f
u
/
V
m
j
d
F
H
W
U
4
g
3
O
4
B
A
+
u
o
Q
l
3
0
I
I
2
M
J
D
w
D
K
/
w
5
m
j
n
x
X
l
3
P
p
a
j
J
a
f
Y
O
Y
U
/
c
D
5
/
A
M
u
r
k
P
k
=
<
/
l
a
t
e
x
i
t
>
<
l
a
t
e
x
i
t
 
s
h
a
1
_
b
a
s
e
6
4
=
"
3
t
g
8
N
W
w
V
I
T
q
l
1
5
A
E
q
o
c
F
y
a
E
7
4
g
Q
=
"
>
A
A
A
B
8
X
i
c
b
Z
C
7
S
g
N
B
F
I
b
P
x
l
t
c
b
1
F
L
m
8
E
g
W
I
V
d
G
2
3
E
o
I
2
F
R
Q
R
z
w
W
Q
J
s
5
P
Z
Z
M
j
s
z
D
I
z
K
4
Q
l
4
E
P
Y
W
C
h
i
6
4
P
Y
2
/
k
2
z
i
Y
p
N
P
G
H
g
Y
/
/
n
M
P
8
5
4
Q
J
Z
9
p
4
3
r
d
T
W
F
p
e
W
V
0
r
r
r
s
b
m
1
v
b
O
6
X
d
v
Y
a
W
q
S
K
0
T
i
S
X
q
h
V
i
T
T
k
T
t
G
6
Y
4
b
S
V
K
I
r
j
k
N
N
m
O
L
z
K
6
8
0
H
q
j
S
T
4
s
6
M
E
h
r
E
u
C
9
Y
x
A
g
2
1
r
r
v
x
N
g
M
w
i
i
7
G
X
d
L
Z
a
/
i
T
Y
Q
W
w
Z
9
B
+
e
L
T
P
X
8
E
g
F
q
3
9
N
X
p
S
Z
L
G
V
B
j
C
s
d
Z
t
3
0
t
M
k
G
F
l
G
O
F
0
7
H
Z
S
T
R
N
M
h
r
h
P
2
x
Y
F
j
q
k
O
s
k
n
i
M
T
q
y
T
g
9
F
U
t
k
n
D
J
q
4
v
y
c
y
H
G
s
9
i
k
P
b
m
S
f
U
8
7
X
c
/
K
/
W
T
k
1
0
F
m
R
M
J
K
m
h
g
k
w
/
i
l
K
O
j
E
T
5
+
q
j
H
F
C
W
G
j
y
x
g
o
p
j
N
i
s
g
A
K
0
y
M
P
Z
J
r
j
+
D
P
r
7
w
I
j
Z
O
K
b
/
n
W
L
1
c
v
Y
a
o
i
H
M
A
h
H
I
M
P
p
1
C
F
a
6
h
B
H
Q
g
I
e
I
I
X
e
H
W
0
8
+
y
8
O
e
/
T
1
o
I
z
m
9
m
H
P
3
I
+
f
g
A
o
t
p
K
6
<
/
l
a
t
e
x
i
t
>
<
l
a
t
e
x
i
t
 
s
h
a
1
_
b
a
s
e
6
4
=
"
y
k
Y
V
A
F
z
l
3
g
W
N
0
P
F
R
3
i
Q
N
9
g
/
/
q
7
Y
=
"
>
A
A
A
B
8
X
i
c
b
Z
C
7
S
g
N
B
F
I
b
P
e
o
3
r
L
W
p
p
M
x
g
E
q
7
B
r
o
4
0
Y
t
L
G
w
i
G
A
u
m
C
x
h
d
j
K
b
D
J
m
d
H
W
Z
m
h
b
D
k
L
W
w
s
F
N
H
S
B
7
G
3
E
d
/
G
2
S
S
F
J
v
4
w
8
P
G
f
c
5
j
/
n
F
B
y
p
o
3
n
f
T
s
L
i
0
v
L
K
6
u
F
N
X
d
9
Y
3
N
r
u
7
i
z
W
9
d
J
q
g
i
t
k
Y
Q
n
q
h
l
i
T
T
k
T
t
G
a
Y
4
b
Q
p
F
c
V
x
y
G
k
j
H
F
z
m
9
c
Y
9
V
Z
o
l
4
t
Y
M
J
Q
1
i
3
B
M
s
Y
g
Q
b
a
9
2
1
Y
2
z
6
Y
Z
R
d
j
z
r
F
k
l
f
2
x
k
L
z
4
E
+
h
d
P
7
h
n
s
m
3
L
7
f
a
K
X
6
2
u
w
l
J
Y
y
o
M
4
V
j
r
l
u
9
J
E
2
R
Y
G
U
Y
4
H
b
n
t
V
F
O
J
y
Q
D
3
a
M
u
i
w
D
H
V
Q
T
Z
O
P
E
K
H
1
u
m
i
K
F
H
2
C
Y
P
G
7
u
+
J
D
M
d
a
D
+
P
Q
d
u
Y
J
9
W
w
t
N
/
+
r
t
V
I
T
n
Q
Y
Z
E
z
I
1
V
J
D
J
R
1
H
K
k
U
l
Q
v
j
7
q
M
k
W
J
4
U
M
L
m
C
h
m
s
y
L
S
x
w
o
T
Y
4
/
k
2
i
P
4
s
y
v
P
Q
/
2
4
7
F
u
+
8
U
u
V
C
5
i
o
A
P
t
w
A
E
f
g
w
w
l
U
4
A
q
q
U
A
M
C
A
h
7
g
C
Z
4
d
7
T
w
6
L
8
7
r
p
H
X
B
m
c
7
s
w
R
8
5
7
z
8
a
R
Z
Q
u
<
/
l
a
t
e
x
i
t
>
<
l
a
t
e
x
i
t
 
s
h
a
1
_
b
a
s
e
6
4
=
"
y
k
Y
V
A
F
z
l
3
g
W
N
0
P
F
R
3
i
Q
N
9
g
/
/
q
7
Y
=
"
>
A
A
A
B
8
X
i
c
b
Z
C
7
S
g
N
B
F
I
b
P
e
o
3
r
L
W
p
p
M
x
g
E
q
7
B
r
o
4
0
Y
t
L
G
w
i
G
A
u
m
C
x
h
d
j
K
b
D
J
m
d
H
W
Z
m
h
b
D
k
L
W
w
s
F
N
H
S
B
7
G
3
E
d
/
G
2
S
S
F
J
v
4
w
8
P
G
f
c
5
j
/
n
F
B
y
p
o
3
n
f
T
s
L
i
0
v
L
K
6
u
F
N
X
d
9
Y
3
N
r
u
7
i
z
W
9
d
J
q
g
i
t
k
Y
Q
n
q
h
l
i
T
T
k
T
t
G
a
Y
4
b
Q
p
F
c
V
x
y
G
k
j
H
F
z
m
9
c
Y
9
V
Z
o
l
4
t
Y
M
J
Q
1
i
3
B
M
s
Y
g
Q
b
a
9
2
1
Y
2
z
6
Y
Z
R
d
j
z
r
F
k
l
f
2
x
k
L
z
4
E
+
h
d
P
7
h
n
s
m
3
L
7
f
a
K
X
6
2
u
w
l
J
Y
y
o
M
4
V
j
r
l
u
9
J
E
2
R
Y
G
U
Y
4
H
b
n
t
V
F
O
J
y
Q
D
3
a
M
u
i
w
D
H
V
Q
T
Z
O
P
E
K
H
1
u
m
i
K
F
H
2
C
Y
P
G
7
u
+
J
D
M
d
a
D
+
P
Q
d
u
Y
J
9
W
w
t
N
/
+
r
t
V
I
T
n
Q
Y
Z
E
z
I
1
V
J
D
J
R
1
H
K
k
U
l
Q
v
j
7
q
M
k
W
J
4
U
M
L
m
C
h
m
s
y
L
S
x
w
o
T
Y
4
/
k
2
i
P
4
s
y
v
P
Q
/
2
4
7
F
u
+
8
U
u
V
C
5
i
o
A
P
t
w
A
E
f
g
w
w
l
U
4
A
q
q
U
A
M
C
A
h
7
g
C
Z
4
d
7
T
w
6
L
8
7
r
p
H
X
B
m
c
7
s
w
R
8
5
7
z
8
a
R
Z
Q
u
<
/
l
a
t
e
x
i
t
>
<
l
a
t
e
x
i
t
 
s
h
a
1
_
b
a
s
e
6
4
=
"
3
E
v
z
c
n
u
x
z
w
Y
w
h
O
Z
p
G
i
l
H
K
E
7
C
5
n
Q
=
"
>
A
A
A
B
8
X
i
c
b
V
C
7
T
s
M
w
F
L
0
p
r
1
J
e
B
U
Y
W
i
w
q
J
q
U
p
Y
Y
K
x
g
Y
W
A
o
E
n
2
I
N
q
o
c
9
6
a
1
6
j
i
R
7
S
B
V
U
f
+
C
h
Q
G
E
W
P
k
b
N
v
4
G
p
8
0
A
L
U
e
y
d
H
T
O
v
f
K
5
J
0
g
E
1
8
Z
1
v
5
3
S
2
v
r
G
5
l
Z
5
u
7
K
z
u
7
d
/
U
D
0
8
a
u
s
4
V
Q
x
b
L
B
a
x
6
g
Z
U
o
+
A
S
W
4
Y
b
g
d
1
E
I
Y
0
C
g
Z
1
g
c
p
P
7
n
S
d
U
m
s
f
y
w
U
w
T
9
C
M
6
k
j
z
k
j
B
o
r
P
f
Y
j
a
s
Z
B
m
N
3
N
B
t
W
a
W
3
f
n
I
K
v
E
K
0
g
N
C
j
Q
H
1
a
/
+
M
G
Z
p
h
N
I
w
Q
b
X
u
e
W
5
i
/
I
w
q
w
5
n
A
W
a
W
f
a
k
w
o
m
9
A
R
9
i
y
V
N
E
L
t
Z
/
P
E
M
3
J
m
l
S
E
J
Y
2
W
f
N
G
S
u
/
t
7
I
a
K
T
1
N
A
r
s
Z
J
5
Q
L
3
u
5
+
J
/
X
S
0
1
4
5
W
d
c
J
q
l
B
y
R
Y
f
h
a
k
g
J
i
b
5
+
W
T
I
F
T
I
j
p
p
Z
Q
p
r
j
N
S
t
i
Y
K
s
q
M
L
a
l
i
S
/
C
W
T
1
4
l
7
Y
u
6
Z
/
m
9
V
2
t
c
F
3
W
U
4
Q
R
O
4
R
w
8
u
I
Q
G
3
E
I
T
W
s
B
A
w
j
O
8
w
p
u
j
n
R
f
n
3
f
l
Y
j
J
a
c
Y
u
c
Y
/
s
D
5
/
A
G
5
b
5
D
t
<
/
l
a
t
e
x
i
t
>
l
a
t
e
x
i
t
 
s
h
a
1
_
b
a
s
e
6
4
=
"
3
3
F
+
O
F
v
k
L
u
w
N
h
1
q
O
Q
3
L
6
j
K
L
f
l
D
0
=
"
>
A
A
A
B
8
3
i
c
b
V
C
7
S
g
N
B
F
L
3
r
M
8
Z
X
V
L
C
x
G
Q
y
C
V
d
i
1
0
T
J
o
Y
5
m
A
e
U
C
y
x
N
n
J
b
D
J
k
d
n
a
Z
u
S
v
E
J
b
9
h
Y
6
G
I
r
T
9
j
Z
+
O
3
O
J
u
k
0
M
Q
D
A
4
d
z
7
u
W
e
O
U
E
i
h
U
H
X
/
X
J
W
V
t
f
W
N
z
Y
L
W
8
X
t
n
d
2
9
/
d
L
B
Y
d
P
E
q
W
a
8
w
W
I
Z
6
3
Z
A
D
Z
d
C
8
Q
Y
K
l
L
y
d
a
E
6
j
Q
P
J
W
M
L
r
J
/
d
Y
D
1
0
b
E
6
g
7
H
C
f
c
j
O
l
A
i
F
I
y
i
l
b
r
d
i
O
I
w
C
L
P
H
S
U
/
0
S
m
W
3
4
k
5
B
l
o
k
3
J
+
X
q
c
f
3
7
H
g
B
q
v
d
J
n
t
x
+
z
N
O
I
K
m
a
T
G
d
D
w
3
Q
T
+
j
G
g
W
T
f
F
L
s
p
o
Y
n
l
I
3
o
g
H
c
s
V
T
T
i
x
s
+
m
m
S
f
k
z
C
p
9
E
s
b
a
P
o
V
k
q
v
7
e
y
G
h
k
z
D
g
K
7
G
S
e
0
S
x
6
u
f
i
f
1
0
k
x
v
P
I
z
o
Z
I
U
u
W
K
z
Q
2
E
q
C
c
Y
k
L
4
D
0
h
e
Y
M
5
d
g
S
y
r
S
w
W
Q
k
b
U
k
0
Z
2
p
q
K
t
g
R
v
8
c
v
L
p
H
l
R
8
S
y
v
e
+
X
q
N
c
x
Q
g
B
M
4
h
X
P
w
4
B
K
q
c
A
s
1
a
A
C
D
B
J
7
g
B
V
6
d
1
H
l
2
3
p
z
3
2
e
i
K
M
9
8
5
g
j
9
w
P
n
4
A
E
A
e
T
3
A
=
=
<
/
l
a
t
e
x
i
t
>
<
l
a
t
e
x
i
t
 
s
h
a
1
_
b
a
s
e
6
4
=
"
A
q
B
N
v
m
B
5
F
v
Y
x
I
C
T
j
c
E
z
5
L
D
S
6
K
d
E
=
"
>
A
A
A
B
8
3
i
c
b
V
C
7
S
g
N
B
F
L
3
r
M
8
Z
X
V
L
C
x
G
Q
y
C
V
d
i
1
0
T
L
E
x
j
I
B
8
4
D
s
E
m
Y
n
s
8
m
Q
2
d
l
l
H
k
J
c
8
h
s
2
F
o
r
Y
5
i
/
8
A
j
s
b
v
8
X
Z
J
I
U
m
H
h
g
4
n
H
M
v
9
8
w
J
U
8
6
U
d
t
0
v
Z
2
1
9
Y
3
N
r
u
7
B
T
3
N
3
b
P
z
g
s
H
R
2
3
V
G
I
k
o
U
2
S
8
E
R
2
Q
q
w
o
Z
4
I
2
N
d
O
c
d
l
J
J
c
R
x
y
2
g
5
H
t
7
n
f
f
q
B
S
s
U
T
c
6
3
F
K
g
x
g
P
B
I
s
Y
w
d
p
K
v
h
9
j
P
Q
y
j
7
H
H
S
Y
7
1
S
2
a
2
4
M
6
B
V
4
i
1
I
u
X
r
a
+
G
b
T
2
k
e
9
V
/
r
0
+
w
k
x
M
R
W
a
c
K
x
U
1
3
N
T
H
W
R
Y
a
k
Y
4
n
R
R
9
o
2
i
K
y
Q
g
P
a
N
d
S
g
W
O
q
g
m
y
W
e
Y
I
u
r
N
J
H
U
S
L
t
E
x
r
N
1
N
8
b
G
Y
6
V
G
s
e
h
n
c
w
z
q
m
U
v
F
/
/
z
u
k
Z
H
N
0
H
G
R
G
o
0
F
W
R
+
K
D
I
c
6
Q
T
l
B
a
A
+
k
5
R
o
P
r
Y
E
E
8
l
s
V
k
S
G
W
G
K
i
b
U
1
F
W
4
K
3
/
O
V
V
0
r
q
q
e
J
Y
3
v
H
K
1
B
n
M
U
4
A
z
O
4
R
I
8
u
I
Y
q
3
E
E
d
m
k
A
g
h
S
d
4
g
V
f
H
O
M
/
O
m
/
M
+
H
1
1
z
F
j
s
n
8
A
f
O
9
A
d
h
S
J
W
Y
<
/
l
a
t
e
x
i
t
>
<
l
a
t
e
x
i
t
 
s
h
a
1
_
b
a
s
e
6
4
=
"
A
q
B
N
v
m
B
5
F
v
Y
x
I
C
T
j
c
E
z
5
L
D
S
6
K
d
E
=
"
>
A
A
A
B
8
3
i
c
b
V
C
7
S
g
N
B
F
L
3
r
M
8
Z
X
V
L
C
x
G
Q
y
C
V
d
i
1
0
T
L
E
x
j
I
B
8
4
D
s
E
m
Y
n
s
8
m
Q
2
d
l
l
H
k
J
c
8
h
s
2
F
o
r
Y
5
i
/
8
A
j
s
b
v
8
X
Z
J
I
U
m
H
h
g
4
n
H
M
v
9
8
w
J
U
8
6
U
d
t
0
v
Z
2
1
9
Y
3
N
r
u
7
B
T
3
N
3
b
P
z
g
s
H
R
2
3
V
G
I
k
o
U
2
S
8
E
R
2
Q
q
w
o
Z
4
I
2
N
d
O
c
d
l
J
J
c
R
x
y
2
g
5
H
t
7
n
f
f
q
B
S
s
U
T
c
6
3
F
K
g
x
g
P
B
I
s
Y
w
d
p
K
v
h
9
j
P
Q
y
j
7
H
H
S
Y
7
1
S
2
a
2
4
M
6
B
V
4
i
1
I
u
X
r
a
+
G
b
T
2
k
e
9
V
/
r
0
+
w
k
x
M
R
W
a
c
K
x
U
1
3
N
T
H
W
R
Y
a
k
Y
4
n
R
R
9
o
2
i
K
y
Q
g
P
a
N
d
S
g
W
O
q
g
m
y
W
e
Y
I
u
r
N
J
H
U
S
L
t
E
x
r
N
1
N
8
b
G
Y
6
V
G
s
e
h
n
c
w
z
q
m
U
v
F
/
/
z
u
k
Z
H
N
0
H
G
R
G
o
0
F
W
R
+
K
D
I
c
6
Q
T
l
B
a
A
+
k
5
R
o
P
r
Y
E
E
8
l
s
V
k
S
G
W
G
K
i
b
U
1
F
W
4
K
3
/
O
V
V
0
r
q
q
e
J
Y
3
v
H
K
1
B
n
M
U
4
A
z
O
4
R
I
8
u
I
Y
q
3
E
E
d
m
k
A
g
h
S
d
4
g
V
f
H
O
M
/
O
m
/
M
+
H
1
1
z
F
j
s
n
8
A
f
O
9
A
d
h
S
J
W
Y
<
/
l
a
t
e
x
i
t
>
<
l
a
t
e
x
i
t
 
s
h
a
1
_
b
a
s
e
6
4
=
"
J
1
p
9
K
Y
i
u
h
c
o
7
O
k
h
j
i
e
Q
V
l
d
2
2
M
F
Q
=
"
>
A
A
A
B
8
3
i
c
b
V
B
N
S
8
N
A
F
H
y
p
X
7
V
+
V
T
1
6
W
S
y
C
p
5
J
4
0
W
P
R
i
8
c
K
t
h
W
a
U
D
b
b
l
3
b
p
Z
h
N
2
N
0
I
N
/
R
t
e
P
C
j
i
1
T
/
j
z
X
/
j
p
s
1
B
W
w
c
W
h
p
n
3
e
L
M
T
p
o
J
r
4
7
r
f
T
m
V
t
f
W
N
z
q
7
p
d
2
9
n
d
2
z
+
o
H
x
5
1
d
Z
I
p
h
h
2
W
i
E
Q
9
h
F
S
j
4
B
I
7
h
h
u
B
D
6
l
C
G
o
c
C
e
+
H
k
p
v
B
7
j
6
g
0
T
+
S
9
m
a
Y
Y
x
H
Q
k
e
c
Q
Z
N
V
b
y
/
Z
i
a
c
R
j
l
T
7
M
B
H
9
Q
b
b
t
O
d
g
6
w
S
r
y
Q
N
K
N
E
e
1
L
/
8
Y
c
K
y
G
K
V
h
g
m
r
d
9
9
z
U
B
D
l
V
h
j
O
B
s
5
q
f
a
U
w
p
m
9
A
R
9
i
2
V
N
E
Y
d
5
P
P
M
M
3
J
m
l
S
G
J
E
m
W
f
N
G
S
u
/
t
7
I
a
a
z
1
N
A
7
t
Z
J
F
R
L
3
u
F
+
J
/
X
z
0
x
0
F
e
R
c
p
p
l
B
y
R
a
H
o
k
w
Q
k
5
C
i
A
D
L
k
C
p
k
R
U
0
s
o
U
9
x
m
J
W
x
M
F
W
X
G
1
l
S
z
J
X
j
L
X
1
4
l
3
Y
u
m
Z
/
m
d
1
2
h
d
l
3
V
U
4
Q
R
O
4
R
w
8
u
I
Q
W
3
E
I
b
O
s
A
g
h
W
d
4
h
T
c
n
c
1
6
c
d
+
d
j
M
V
p
x
y
p
1
j
+
A
P
n
8
w
e
B
Y
J
H
3
<
/
l
a
t
e
x
i
t
>
<
l
a
t
e
x
i
t
 
s
h
a
1
_
b
a
s
e
6
4
=
"
s
c
F
V
m
z
D
N
N
v
w
J
g
i
R
t
g
X
H
v
g
n
y
T
h
s
0
=
"
>
A
A
A
B
8
3
i
c
b
V
C
7
S
g
N
B
F
L
0
b
X
z
G
+
o
o
K
N
z
W
A
Q
r
M
K
u
j
Z
Z
B
G
8
s
E
z
A
O
S
J
c
5
O
Z
p
M
h
s
7
P
L
z
F
0
h
L
P
k
N
G
w
t
F
b
P
0
Z
O
x
u
/
x
d
k
k
h
S
Y
e
G
D
i
c
c
y
/
3
z
A
k
S
K
Q
y
6
7
p
d
T
W
F
v
f
2
N
w
q
b
p
d
2
d
v
f
2
D
8
q
H
R
y
0
T
p
5
r
x
J
o
t
l
r
D
s
B
N
V
w
K
x
Z
s
o
U
P
J
O
o
j
m
N
A
s
n
b
w
f
g
2
9
9
u
P
X
B
s
R
q
3
u
c
J
N
y
P
6
F
C
J
U
D
C
K
V
u
r
1
I
o
q
j
I
M
y
C
a
V
/
0
y
x
W
3
6
s
5
A
V
o
m
3
I
J
X
a
S
e
P
7
A
Q
D
q
/
f
J
n
b
x
C
z
N
O
I
K
m
a
T
G
d
D
0
3
Q
T
+
j
G
g
W
T
f
F
r
q
p
Y
Y
n
l
I
3
p
k
H
c
t
V
T
T
i
x
s
9
m
m
a
f
k
3
C
o
D
E
s
b
a
P
o
V
k
p
v
7
e
y
G
h
k
z
C
Q
K
7
G
S
e
0
S
x
7
u
f
i
f
1
0
0
x
v
P
Y
z
o
Z
I
U
u
W
L
z
Q
2
E
q
C
c
Y
k
L
4
A
M
h
O
Y
M
5
c
Q
S
y
r
S
w
W
Q
k
b
U
U
0
Z
2
p
p
K
t
g
R
v
+
c
u
r
p
H
V
Z
9
S
x
v
e
J
X
a
D
c
x
R
h
F
M
4
g
w
v
w
4
A
p
q
c
A
d
1
a
A
K
D
B
J
7
g
B
V
6
d
1
H
l
2
3
p
z
3
+
W
j
B
W
e
w
c
w
x
8
4
H
z
/
r
U
J
P
E
<
/
l
a
t
e
x
i
t
>
<
l
a
t
e
x
i
t
 
s
h
a
1
_
b
a
s
e
6
4
=
"
O
a
w
5
B
F
x
O
v
q
w
r
C
d
B
3
C
4
B
8
c
b
n
B
W
h
s
=
"
>
A
A
A
B
8
3
i
c
b
V
C
7
S
g
N
B
F
L
0
b
X
z
G
+
o
o
K
N
z
W
A
Q
r
M
K
u
j
Z
Y
h
N
p
Y
J
m
A
d
k
l
z
A
7
m
U
2
G
z
M
4
u
8
x
D
C
k
t
+
w
s
V
D
E
N
n
/
h
F
9
j
Z
+
C
3
O
J
i
k
0
8
c
D
A
4
Z
x
7
u
W
d
O
m
H
K
m
t
O
t
+
O
Y
W
N
z
a
3
t
n
e
J
u
a
W
/
/
4
P
C
o
f
H
z
S
V
o
m
R
h
L
Z
I
w
h
P
Z
D
b
G
i
n
A
n
a
0
k
x
z
2
k
0
l
x
X
H
I
a
S
c
c
3
+
V
+
5
5
F
K
x
R
L
x
o
C
c
p
D
W
I
8
F
C
x
i
B
G
s
r
+
X
6
M
9
S
i
M
s
n
D
a
Z
/
1
y
x
a
2
6
c
6
B
1
4
i
1
J
p
X
b
W
/
G
a
z
+
k
e
j
X
/
7
0
B
w
k
x
M
R
W
a
c
K
x
U
z
3
N
T
H
W
R
Y
a
k
Y
4
n
Z
Z
8
o
2
i
K
y
R
g
P
a
c
9
S
g
W
O
q
g
m
y
e
e
Y
o
u
r
T
J
A
U
S
L
t
E
x
r
N
1
d
8
b
G
Y
6
V
m
s
S
h
n
c
w
z
q
l
U
v
F
/
/
z
e
k
Z
H
t
0
H
G
R
G
o
0
F
W
R
x
K
D
I
c
6
Q
T
l
B
a
A
B
k
5
R
o
P
r
E
E
E
8
l
s
V
k
R
G
W
G
K
i
b
U
0
l
W
4
K
3
+
u
V
1
0
r
6
u
e
p
Y
3
v
U
q
t
D
g
s
U
4
R
w
u
4
A
o
8
u
I
E
a
3
E
M
D
W
k
A
g
h
S
d
4
g
V
f
H
O
M
/
O
m
/
O
+
G
C
0
4
y
5
1
T
+
A
N
n
9
g
M
8
o
J
W
A
<
/
l
a
t
e
x
i
t
>
<
l
a
t
e
x
i
t
 
s
h
a
1
_
b
a
s
e
6
4
=
"
O
a
w
5
B
F
x
O
v
q
w
r
C
d
B
3
C
4
B
8
c
b
n
B
W
h
s
=
"
>
A
A
A
B
8
3
i
c
b
V
C
7
S
g
N
B
F
L
0
b
X
z
G
+
o
o
K
N
z
W
A
Q
r
M
K
u
j
Z
Y
h
N
p
Y
J
m
A
d
k
l
z
A
7
m
U
2
G
z
M
4
u
8
x
D
C
k
t
+
w
s
V
D
E
N
n
/
h
F
9
j
Z
+
C
3
O
J
i
k
0
8
c
D
A
4
Z
x
7
u
W
d
O
m
H
K
m
t
O
t
+
O
Y
W
N
z
a
3
t
n
e
J
u
a
W
/
/
4
P
C
o
f
H
z
S
V
o
m
R
h
L
Z
I
w
h
P
Z
D
b
G
i
n
A
n
a
0
k
x
z
2
k
0
l
x
X
H
I
a
S
c
c
3
+
V
+
5
5
F
K
x
R
L
x
o
C
c
p
D
W
I
8
F
C
x
i
B
G
s
r
+
X
6
M
9
S
i
M
s
n
D
a
Z
/
1
y
x
a
2
6
c
6
B
1
4
i
1
J
p
X
b
W
/
G
a
z
+
k
e
j
X
/
7
0
B
w
k
x
M
R
W
a
c
K
x
U
z
3
N
T
H
W
R
Y
a
k
Y
4
n
Z
Z
8
o
2
i
K
y
R
g
P
a
c
9
S
g
W
O
q
g
m
y
e
e
Y
o
u
r
T
J
A
U
S
L
t
E
x
r
N
1
d
8
b
G
Y
6
V
m
s
S
h
n
c
w
z
q
l
U
v
F
/
/
z
e
k
Z
H
t
0
H
G
R
G
o
0
F
W
R
x
K
D
I
c
6
Q
T
l
B
a
A
B
k
5
R
o
P
r
E
E
E
8
l
s
V
k
R
G
W
G
K
i
b
U
0
l
W
4
K
3
+
u
V
1
0
r
6
u
e
p
Y
3
v
U
q
t
D
g
s
U
4
R
w
u
4
A
o
8
u
I
E
a
3
E
M
D
W
k
A
g
h
S
d
4
g
V
f
H
O
M
/
O
m
/
O
+
G
C
0
4
y
5
1
T
+
A
N
n
9
g
M
8
o
J
W
A
<
/
l
a
t
e
x
i
t
>
<
l
a
t
e
x
i
t
 
s
h
a
1
_
b
a
s
e
6
4
=
"
O
3
/
a
S
o
7
b
n
J
Y
U
t
4
u
y
d
n
3
X
9
7
F
8
X
2
k
=
"
>
A
A
A
B
8
3
i
c
b
V
D
L
S
s
N
A
F
L
2
p
r
1
p
f
V
Z
d
u
B
o
v
g
q
i
R
u
d
F
l
0
4
7
K
C
f
U
A
T
y
m
R
6
0
w
6
d
T
M
L
M
R
C
i
h
v
+
H
G
h
S
J
u
/
R
l
3
/
o
2
T
N
g
t
t
P
T
B
w
O
O
d
e
7
p
k
T
p
o
J
r
4
7
r
f
T
m
V
j
c
2
t
7
p
7
p
b
2
9
s
/
O
D
y
q
H
5
9
0
d
Z
I
p
h
h
2
W
i
E
T
1
Q
6
p
R
c
I
k
d
w
4
3
A
f
q
q
Q
x
q
H
A
X
j
i
9
K
/
z
e
E
y
r
N
E
/
l
o
Z
i
k
G
M
R
1
L
H
n
F
G
j
Z
V
8
P
6
Z
m
E
k
Z
5
O
B
/
y
Y
b
3
h
N
t
0
F
y
D
r
x
S
t
K
A
E
u
1
h
/
c
s
f
J
S
y
L
U
R
o
m
q
N
Y
D
z
0
1
N
k
F
N
l
O
B
M
4
r
/
m
Z
x
p
S
y
K
R
3
j
w
F
J
J
Y
9
R
B
v
s
g
8
J
x
d
W
G
Z
E
o
U
f
Z
J
Q
x
b
q
7
4
2
c
x
l
r
P
4
t
B
O
F
h
n
1
q
l
e
I
/
3
m
D
z
E
Q
3
Q
c
5
l
m
h
m
U
b
H
k
o
y
g
Q
x
C
S
k
K
I
C
O
u
k
B
k
x
s
4
Q
y
x
W
1
W
w
i
Z
U
U
W
Z
s
T
T
V
b
g
r
f
6
5
X
X
S
v
W
p
6
l
j
9
4
j
d
Z
t
W
U
c
V
z
u
A
c
L
s
G
D
a
2
j
B
P
b
S
h
A
w
x
S
e
I
Z
X
e
H
M
y
5
8
V
5
d
z
6
W
o
x
W
n
3
D
m
F
P
3
A
+
f
w
B
c
u
J
H
f
<
/
l
a
t
e
x
i
t
>
b1, · · · , bN , so we do not need a box proposal module. In-
stead, we use each box bi directly to crop out an RoI feature
zi from feature map Z. All features zi have the same ﬁxed
size w × h × C (i.e. w and h are only dependent on the RoI
cropping layer). We concatenate to this the corresponding
annotation map si which is described in Sec. 3.2, and obtain
a feature map vi, which is of size w × h × (C + 2).

Using vi, our network predicts a logit map li of size
w′ × h′ which represents the prediction of a single mask.
While Mask-RCNN stops at such mask predictions and pro-
cesses them with a sigmoid to obtain binary masks, we want
to have predictions inﬂuence each other. Therefore we use
the boxes b1, · · · , bN to re-project the logit predictions of
all masks li back into the original image resolution which
results in N prediction maps Li. We concatenate these pre-
diction maps into a single tensor L of size W × H × N . For
each pixel, we then obtain region probabilities P of dimen-
sion W × H × N by applying a softmax to the logits,

(P (x,y)

1

, · · · , P (x,y)

N

) = softmax(L(x,y)

1

, · · · , L(x,y)

N ), (1)

i

where P (x,y)
denotes the probability that pixel (x, y) is as-
signed to region i. This makes multiple nearby regions com-
pete for space in the common image canvas.

3.2. Incorporating annotations

Our model in Fig. 2 concatenates RoI features z with
annotation map s. We now describe how we create s. First,
for each region i we create a positive annotation map Si
which is of the same size W × H as the image. We choose
the annotation map to be binary and we create it by pasting
all extreme points and corrective scribbles for region i onto
it. Extreme points are represented by a circle which is 6
pixels in diameter. Scribbles are 3 pixels wide.

For each region i, we collapse all annotations which
do not belong to it into a single negative annotation map
Pj6=i
Sj . Then, we concatenate the positive and negative
annotation maps into a two-channel annotation map Fi

Fi := (cid:16)Si, X

j6=i

Sj(cid:17),

(2)

which is illustrated in Fig. 3. Finally, we apply RoI-
align [22] to Fi using box bi to obtain the desired cropped
annotation map si.

The way we construct Fi enables the sharing of all an-
notation information across multiple object and stuff re-
gions in the image. The negative annotations for one re-
gion are formed by collecting the positive annotations of
all other regions. In contrast, in single object segmentation
works [3, 8, 18, 16, 21, 24, 30, 31, 32, 38, 36, 37, 47, 60]
both positive and negative annotations are made only on the
target object and they are never shared, so they only have an
effect on that one object.

3.3. Training

Training data. As training data, we have ground-truth
masks for all objects and stuff regions in all images. We
represent the (non-overlapping) N ground truth masks of
an image X with region indices. This results in a map Y
of dimension W × H, which assigns each pixel X (x,y) to a
region Y (x,y) ∈ {1, ...N }.
Pixel-wise loss. Standard Mask-RCNN is trained with Bi-
nary Cross Entropy (BCE) losses for each mask prediction
separately. This means that there is no direct interaction
between adjacent masks, and they might even overlap. In-
stead, we propose a novel instance-aware loss which lets
predictions compete for space in the original image canvas.
In particular, as described in Sec. 3.1 we project all
region-speciﬁc logits into a single image-level logit tensor
L, which is softmaxed into a region assignment probabili-
ties P of size W × H × N .

As described above, the ground-truth segmentation is
represented by Y with values in {1, · · · , N }, which spec-
iﬁes for each pixel its region index. Since we simulate the
extreme points from the ground-truth masks, there is a di-
rect correspondence between the region assignment proba-
bilities P1, · · · , PN and Y. Thus, we can train our network
end-to-end for the Categorical Cross Entropy (CCE) loss for
the region assignments:

Lpixelwise = X

(x,y)

− log P (x,y)
Y (x,y)

(3)

We note that while the CCE loss is commonly used in fully
convolutional networks for semantic segmentation [14, 35,
46], we instead use it in an architecture based on Mask-
RCNN [22]. Furthermore, usually the loss is deﬁned over a
ﬁxed number of classes [14, 35, 46], whereas we deﬁne it
over the number of regions N . This number of regions may
vary per image.

The loss in (3) is computed over the pixels in the full
resolution common image canvas. Consequently, larger re-
gions have a greater impact on the loss. However, in our
experiments we measure Intersection-over-Union (IoU) be-
tween ground-truth masks and predictions, which considers
all regions equally independent of their size. Therefore we
weigh the terms in (3) as follows. For each pixel we ﬁnd the
smallest box bi which contains it, and reweigh the loss for
that pixel by the inverse of the size of bi. This causes each
region to contribute to the loss approximately equally.

Our loss shares similarities with [10]. They used Fast-
RCNN [20] with selective search regions [52] and generate
a class prediction vector for each region. Then they project
this vector back into the image canvas using its correspond-
ing region, while resolving conﬂicts using a max operator.
In our work instead, we project a full logit map back into
the image (Fig. 2). Furthermore, while in [10] the number

11625

Annotations

Positive channel

Negative channel

Scribble simulation

Figure 3: We illustrate how we combine all annotations near a region (red) into two
annotation maps speciﬁc for that region. The colored regions denote the current pre-
dicted segmentation and the white boundaries depict true object boundaries. For the red
region, the extreme points and the single positive scribble are combined into a single
positive binary channel. All scribbles from other nearby regions are collected into a
single negative binary channel.

Figure 4: To simulate a corrective scribble,
we ﬁrst sample an initial control point to in-
dicate which region we want to expand (yel-
low), followed by two control points (orange)
sampled uniformly from the error region.

of logit channels is equal to the number of classes C, in our
work it depends on the number of regions N , which may
vary per image.

3.4. Implementation details

The original implementation of Mask-RCNN [22] cre-
ates for each RoI feature mask predictions for all classes
that it is trained on. At inference time, it uses the predicted
class to select the corresponding predicted mask. Since we
build on Mask-RCNN, we also do this in our framework
for convenience of the implementation. During training we
use the class labels to train class-speciﬁc mask prediction
logits. During inference, for each region i we use the class
label predicted by Mask-RCNN to select which mask log-
its which we use as li. Hence during inference time, we
have implicit class labels. However, class labels are never
exposed to the annotator and are considered to be irrelevant
for this paper.

4. Annotations and their simulation

Our annotations consists of both extreme points and
scribble corrections. We chose scribble corrections [3, 8,
47] instead of click corrections [24, 30, 31, 32, 36, 37, 60]
as they are a more natural choice in our scenario. As we
consider multiple regions in an image, any annotation ﬁrst
needs to indicate which region should be extended. With
scribbles one can start inside the region to be extended, fol-
lowed by a path which speciﬁes how to extend the region.

In all our experiments we simulate annotations, follow-
ing previous interactive segmentation works [1, 12, 24, 30,
31, 32, 36, 37, 60].
Simulating extreme points. To simulate the extreme points
that the annotator provides at the beginning, we use the code
provided by [37].
Simulating scribble corrections. To simulate scribble cor-
rections during the interactive segmentation process, we
ﬁrst need to select an error region. Error regions are de-

ﬁned as a connected group of pixels of a ground-truth re-
gion which has been wrongly assigned to a different region
(Fig. 4). We assess the importance of an error region by
measuring how much segmentation quality (IoU) would im-
prove if it was completely corrected. We use this to create
annotator corrections on the most important error regions
(the exact way depends on the particular experiment, details
in Sec. 5).

To correct an error, we need a scribble that starts inside
the ground-truth region and extends into the error region
(Fig. 1). We simulate such scribbles with a three-step pro-
cess, illustrated in Fig. 4: (1) ﬁrst we randomly sample the
ﬁrst point on the border of the error region that touches
the ground-truth region (yellow point in Fig. 4; (2) then
we sample two more points uniformly inside the error re-
gion (yellow points in Fig. 4). (3) we construct a scribble
as a smooth trajectory through these three points (using a
bezier curve). We repeat this process ten times, and keep the
longest scribble that is exclusively inside the ground-truth
region (while all simulated points are within the ground-
truth, the curve could cover parts outside the ground-truth).

5. Results

We use Mask-RCNN as basic segmentation framework
instead of Fully Convolutional architectures [14, 35, 46]
commonly used in single object segmentation works [24,
30, 31, 32, 36, 37, 60]. We ﬁrst demonstrate in Sec. 5.1
that this is a valid choice by comparing to DEXTR [37] in
the non-interactive setting where we generate masks start-
ing from extreme points [41]. In Sec 5.2 we move to the full
image segmentation task and demonstrate improvements re-
sulting from sharing extreme points across regions and from
our new pixel-wise loss. Finally, in Sec. 5.3 we show results
on interactive full image segmentation, where we also share
scribble corrections across regions, and allow the annotator
to freely allocate scribbles to regions while considering the
whole image.

11626

Method

DEXTR [37]
DEXTR (released model)
Our single region model

IoU

82.1
81.9
81.6

Table 1: Performance on COCO (objects only). The accuracy of
our single region model is comparable to DEXTR [37].

X-points not shared X-points shared

Mask-wise loss
Pixel-wise loss

75.8
78.4

76.0
79.1

Table 2: Performance on the COCO Panoptic validation set when
predicting masks from extreme points (X-points). We vary the
loss and whether extreme points are shared across regions. The
top-left entry corresponds to our single region model, the
bottom-right entry corresponds to our full image model.

5.1. Single object segmentation

DEXTR. In DEXTR [37] they predict object masks from
four extreme points [41]. DEXTR is based on Deeplab-
v2 [14], using a ResNet-101 [23] backbone architecture and
a Pyramid Scene Parsing network [61] as prediction head.
As input they crop a bounding box out of the RGB im-
age based on the extreme points provided by the annotator.
The locations of the extreme points are Gaussian blurred
and fed as a heatmap to the network, concatenated to the
cropped RGB input. The DEXTR segmentation model ob-
tained state-of-the-art results on this task [37].
Details of our model. We compare DEXTR to a single ob-
ject segmentation variant of our model (single region
model). It uses the original Mask-RCNN loss, computed in-
dividually per mask, and does not share annotations across
regions. For fair comparison to DEXTR, here we also use
a ResNet-101 [23] backbone, which due to memory con-
straints limits the resolution of our RoI features to 14 × 14
pixels and our predicted mask to 33 × 33. Moreover, we
use their released code to generate simulated extreme point
annotations. In contrast to subsequent experiments, here we
also use the same Gaussian blurred heatmaps to input anno-
tations to our model as used in [37].
Dataset. We follow the experimental setup of [37] on
the COCO dataset [34], which has 80 object classes.
Models are trained on the 2014 training set and evalu-
ated on the 2017 validation set (previously referred to as
2014 minival). We measure performance in terms of
Intersection-over-Union averaged over all instances.
Results.
results from
DEXTR [37], our reproduction using their publicly released
model, and results of our single region model. Their
publicly released model and our model deliver very similar

Tab. 1 reports the original

results (81.9 and 81.6 IoU). This demonstrate that Mask-
RCNN-style models are competitive to commonly used
FCN-style models for this task.

5.2. Full image segmentation

Experimental setup. Given extreme points for each object
and stuff region, we now predict a full image segmentation.
We demonstrate the beneﬁts of using our pixel-wise loss
(Sec. 3.3) and sharing extreme points across regions (i.e.
extreme points for one region are used as negative informa-
tion for nearby regions, Sec. 3.2).
Details of our model. In preliminary experiments we found
that RoI features of 14 × 14 pixels resolution were limiting
accuracy when feeding in annotations into the segmentation
head. Therefore we increased both the RoI features and the
predicted mask to 41 × 41 pixels and switched to ResNet-
50 [23] due to memory constraints. Importantly, in all ex-
periments from now on our model uses the two-channel an-
notation maps described in Sec. 3.2.
Dataset. We perform our experiments on the COCO panop-
tic challenge dataset [11, 27, 34], which has 80 object
classes and 53 stuff classes. Since the ﬁnal goal is to ef-
ﬁciently annotate data, we train on only 12.5% of the 2017
training set (15k images). We evaluate on the 2017 valida-
tion set and measure IoU averaged over all object and stuff
regions in all images.
Results. As Tab. 2 shows, our single region model
yields 75.8 IoU. It uses a mask-wise loss and does not share
extreme points across regions. When only sharing extreme
points, we get a small gain of +0.2 IoU. In contrast, when
only switching to our pixel-wise loss, results improve by
+2.6 IoU. Sharing extreme points is more beneﬁcial in com-
bination with our new loss, yielding an additional improve-
ment of +0.7 IoU. Overall this model with both improve-
ments achieves 79.1 IoU, +3.3 higher than the single
region model. We call it our full image model.

5.3. Interactive full image segmentation

We now move to our ﬁnal system for interactive full im-
age segmentation. We start from the segmentations from
extreme points made by our single region and full
image models from Sec. 5.2. Then we iterate between:
(A) adding scribble corrections by the annotator, and (B)
updating the machine segmentations accordingly.
Dataset and training. As before, we experiment on the
COCO panoptic challenge dataset and report results on the
2017 validation set. Since during iterations our models
input scribble corrections in addition to extreme points,
we train two new interactive models: single region
scribble and full image scribble. These mod-
els have the same architecture as their counterparts in
Sec. 5.2 (which input only extreme points), but are trained
differently. To create training data for one of these inter-

11627

region scribble model but only 2 scribbles for our
full image scribble model. Similarly,
to reach
88% IoU it takes 7 scribbles vs 4 scribbles. This conﬁrms
that the beneﬁts of sharing annotations across regions and
of our pixel-wise loss persist also in the interactive setting.
We now compare the two scribble allocation strate-
gies on the full image scribble model. As Fig. 5
shows, using the strategy of freely allocating scribbles to
regions (one scribble on average) brings further efﬁciency
gains. full image scribble reaches a very high
90% IoU at just 4 scribbles per region on average. Reaching
this IoU instead requires allocating exactly 8 scribbles per
region with the other strategy. This demonstrate the beneﬁts
of focusing annotation effort on the largest errors across the
whole image.

Overall, at a budget of four extreme clicks and four scrib-
bles per region, we get a total 5% IoU gain over single
region scribble (90% vs 85%). This gain is brought
by the combined effects of our contributions: sharing anno-
tations across regions, the pixel-wise loss which lets regions
compete on the common image canvas, and the free scribble
allocation strategy.

Fig. 6 shows various examples for how annotation pro-
gresses over iterations. Notice how in the ﬁrst example, the
corrective scribble on the left bear induces a negative scrib-
ble for the rock, which in turn improves the segmentation
of the right bear. This demonstrates the beneﬁt of sharing
scribble annotations and competition between regions.

6. Discussion

Mask-RCNN vs FCNs. Our work builds on Mask-
RCNN [22] rather than FCN-based models [14, 35, 46] be-
cause it is faster and requires less memory. To see this, we
can reinterpret Fig. 2 as an FCN-based model: ignore the
backbone network, replace the backbone features Z by the
RGB image, and make the segmentation head a full FCN.

At inference time, we need to do a forward pass through
the segmentation head for every region for every correction.
When using Mask-RCNN, the heavy ResNet [23] backbone
network is applied only once for the whole image, and then
only a small 4-layer segmentation head is applied to each re-
gion. For the FCN-style alternative instead, nothing can be
precomputed and the segmentation head itself is the heavy
ResNet. Hence our framework is much faster during inter-
active annotation.

During training, typically all intermediate network ac-
tivations are stored in memory. Crucially, for each region
distinct activations are generated in the segmentation head.
For FCN-style models this is a heavy ResNet and requires
lots of memory. This is why DEXTR [37] reports a maxi-
mal batch size of 5 regions. Therefore, it would be difﬁcult
to train with our pixel-wise loss in an FCN-style model, as
that requires processing all regions in each image simulta-

11628

Figure 5: Results on the COCO Panoptic validation set for the
interactive full image segmentation task. We measure average IoU
vs the number of scribbles per region. We compare our full
image scribble model under two scribble allocation strate-
gies to the single region scribble baseline.

active models, we apply its counterpart to another 12.5%
of the 2017 training set. We generate simulated correc-
tive scribbles as described in Sec. 4 and train each model
on the combined extreme points and scribbles annotations
(Sec. 3.2). We keep these models ﬁxed throughout all it-
erations of interactive segmentation. Note how, in addition
to sharing extreme points as in Sec. 5.2, the full image
scribble model also shares scribble corrections across
regions.

Allocation of scribble corrections. When using our
single region scribble model, in every iteration
we allocate exactly one scribble to each region.
Instead,
when using our full image scribble model we also
consider an alternative interesting strategy: one scribble
per region on average, but the annotator can freely allocate
these scribbles to the regions in the image. This enables the
annotator to focus efforts on the biggest errors across the
whole image, typically resulting in some regions receiving
multiple scribbles and some receiving none.

Results. Fig. 5 shows annotation quality (IoU) vs cost
(number of scribbles per region). The two starting points
at zero scribbles are the same as the top-left and bottom-
right entries of Tab. 2 since they are made using the same
non-interactive models (from extreme points only).

We ﬁrst compare single region scribble to
full image scribble while using the same alloca-
Fig. 5
tion strategy: exactly one scribble per region.
shows that for both models accuracy rapidly improves
with more scribble corrections. However, full image
scribble always offers a better trade-off between an-
notation effort and segmentation quality, e.g.
to reach
85% IoU it takes 4 scribbles per region for the single

02468#scribbles/region0.750.800.850.90IoUIoU vs #scribbles/regionfull image scribble (one scribble on average)full image scribble (one scribble per region)single region scribble (one scribble per region)Input image

with extreme points
provided by annotator

Machine predictions Corrective scribbles Machine predictions
from extreme points

1 scribble/region

1 scribble/region
provided by annotator and extreme points

Final result

Ground-truth

9 scribbles/region
and extreme points

Figure 6: We show example results obtained by our system using the full image scribble model with a free allocation strategy.
The ﬁrst two columns show the input image with extreme points and predictions. Column 3 shows the ﬁrst annotation step with one scribble
correction per region on average, and column 4 shows the updated predictions. The last two columns compare the ﬁnal result after 9 steps
(using 9 scribbles per region on average) with the COCO ground-truth segmentation.

neously (15 regions per image on average).

7. Conclusions

In fact our Mask-RCNN based architecture (Fig. 2) and
its reinterpretation as an FCN-based model span a contin-
uum. Its design space can be explored by varying the size of
the backbone and the segmentation head, as well as their in-
put and output resolution. We leave such exploration of the
trade-off between memory requirements, inference speed,
and model accuracy for future work.

Scribble and point simulations. Like other interactive seg-
mentation works [1, 12, 24, 30, 31, 32, 36, 37, 60], we sim-
ulate annotations. It remains to be studied how to best se-
lect the simulation parameters so that the models generalize
well to real human annotators. The optimal parameters will
likely depend on various factors, such as the desired anno-
tation quality and the accuracy of the provided corrections.

We proposed an interactive annotation framework which
operates on the whole image to produce segmentations for
all object and stuff regions. Our key contributions derive
from considering the full image at once: sharing annota-
tions across regions, focusing annotator effort on the biggest
errors across the whole image, and a pixel-wise loss for
Mask-RCNN that lets regions compete on the common im-
age canvas. We have shown through experiments on the
COCO panoptic challenge dataset [11, 27, 34] that all the
elements we propose improve the trade-off between anno-
tation cost and quality, leading to a very high IoU of 90%
using just four extreme points and four corrective scribbles
per region (compared to 85% for the baseline).

11629

References

[1] D. Acuna, H. Ling, A. Kar, and S. Fidler. Efﬁcient interactive
annotation of segmentation datasets with polygon-rnn++. In
CVPR, 2018. 2, 5, 8

[2] M. Andriluka, J. R. R. Uijlings, and V. Ferrari. Fluid an-
notation: A human-machine collaboration interface for full
image annotation. In ACM Multimedia, 2018. 2

[3] X. Bai and G. Sapiro. Geodesic matting: A framework for
fast interactive image and video segmentation and matting.
IJCV, 2009. 2, 4, 5

[4] D. Batra, A. Kowdle, D. Parikh, J. Luo, and T. Chen. Inter-
actively co-segmentating topically related images with intel-
ligent scribble guidance. IJCV, 2011. 2

[5] A. Bearman, O. Russakovsky, V. Ferrari, and L. Fei-Fei.
What’s the point: Semantic segmentation with point super-
vision. 2016. 2

[6] S. Bell, P. Upchurch, N. Snavely, and K. Bala. Material
recognition in the wild with the materials in context database.
In CVPR, 2015. 2

[7] A. Biswas and D. Parikh. Simultaneous active learning of
classiﬁers & attributes via relative feedback. In CVPR, 2013.
3

[8] Y. Boykov and M. P. Jolly. Interactive graph cuts for optimal
boundary and region segmentation of objects in N-D images.
In ICCV, 2001. 2, 4, 5

[9] S. Branson, C. Wah, F. Schroff, B. Babenko, P. Welinder,
P. Perona, and S. Belongie. Visual recognition with humans
in the loop. In ECCV, 2010. 3

[10] H. Caesar, J. Uijlings, and V. Ferrari. Region-based semantic

segmentation with end-to-end training. In ECCV, 2016. 4

[11] H. Caesar, J. Uijlings, and V. Ferrari. COCO-stuff: Thing

and stuff classes in context. In CVPR, 2018. 1, 2, 6, 8

[12] L. Castrej´on, K. Kundu, R. Urtasun, and S. Fidler. Annotat-
ing object instances with a polygon-rnn. In CVPR, 2017. 2,
5, 8

[13] D.-J. Chen, J.-T. Chien, H.-T. Chen, and L.-W. Chang. Tap

and shoot segmentation. In AAAI, 2018. 2

[14] L. Chen, G. Papandreou, I. Kokkinos, K. Murphy, and
A. Yuille. Deeplab: Semantic image segmentation with deep
convolutional nets, atrous convolution, and fully connected
CRFs. IEEE Trans. on PAMI, 2017. 2, 4, 5, 6, 7

[15] Y. Chen, J. Pont-Tuset, A. Montes, and L. Van Gool. Blaz-
ingly fast video object segmentation with pixel-wise metric
learning. In CVPR, 2018. 2

[16] M.-M. Cheng, V. A. Prisacariu, S. Zheng, P. H. S. Torr, and
C. Rother. Densecut: Densely connected crfs for realtime
grabcut. Computer Graphics Forum, 2015. 2, 4

[17] M. Cordts, M. Omran, S. Ramos, T. Rehfeld, M. Enzweiler,
R. Benenson, U. Franke, S. Roth, and B. Schiele. The
cityscapes dataset for semantic urban scene understanding.
CVPR, 2016. 1

[18] A. Criminisi, T. Sharp, C. Rother, and P. Perez. Geodesic
image and video editing. In ACM Transactions on Graphics,
2010. 2, 4

[20] R. Girshick, J. Donahue, T. Darrell, and J. Malik. Rich fea-
ture hierarchies for accurate object detection and semantic
segmentation. In CVPR, 2014. 4

[21] V. Gulshan, C. Rother, A. Criminisi, A. Blake, and A. Zis-
serman. Geodesic star convexity for interactive image seg-
mentation. In CVPR, 2010. 2, 4

[22] K. He, G. Gkioxari, P. Doll´ar, and R. Girshick. Mask R-

CNN. In ICCV, 2017. 1, 2, 3, 4, 5, 7

[23] K. He, X. Zhang, S. Ren, and J. Sun. Deep residual learning

for image recognition. In CVPR, 2016. 2, 3, 6, 7

[24] Y. Hu, A. Soltoggio, R. Lock, and S. Carter. A fully con-
volutional two-stream fusion network for interactive image
segmentation. Neural Networks, 2019. 1, 2, 4, 5, 8

[25] J. Johnson, A. Karpathy, and L. Fei-Fei. DenseCap: Fully
convolutional localization networks for dense captioning. In
CVPR, 2016. 1

[26] A. Khoreva, R. Benenson, J. Hosang, M. Hein, and
B. Schiele. Simple does it: Weakly supervised instance and
semantic segmentation. In CVPR, 2017. 2

[27] A. Kirillov, K. He, R. Girshick, C. Rother, and P. Doll´ar.

Panoptic segmentation. In ArXiv, 2018. 1, 2, 6, 8

[28] A. Kolesnikov and C. Lampert. Seed, expand and constrain:
Three principles for weakly-supervised image segmentation.
In ECCV, 2016. 2

[29] K. Konyushkova, J. Uijlings, C. Lampert, and V. Ferrari.
Learning intelligent dialogs for bounding box annotation. In
CVPR, 2018. 3

[30] H. Le, L. Mai, B. Price, S. Cohen, H. Jin, and F. Liu. In-
teractive boundary prediction for object selection. In ECCV,
2018. 1, 2, 4, 5, 8

[31] Z. Li, Q. Chen, and V. Koltun. Interactive image segmenta-

tion with latent diversity. In CVPR, 2018. 1, 2, 4, 5, 8

[32] J. Liew, Y. Wei, W. Xiong, S.-H. Ong, and J. Feng. Regional
interactive image segmentation networks. In ICCV, 2017. 1,
2, 4, 5, 8

[33] D. Lin, J. Dai, J. Jia, K. He, and J. Sun.

Scribble-
Sup: Scribble-supervised convolutional networks for seman-
tic segmentation. In CVPR, 2016. 2

[34] T.-Y. Lin, M. Maire, S. Belongie, J. Hays, P. Perona, D. Ra-
manan, P. Doll´ar, and C. Zitnick. Microsoft COCO: Com-
mon objects in context. In ECCV, 2014. 1, 2, 6, 8

[35] J. Long, E. Shelhamer, and T. Darrell. Fully convolutional
networks for semantic segmentation. In CVPR, 2015. 2, 4,
5, 7

[36] S. Mahadevan, P. Voigtlaender, and B. Leibe.

Iteratively
trained interactive segmentation. In BMVC, 2018. 1, 2, 4,
5, 8

[37] K.-K. Maninis, S. Caelles, J. Pont-Tuset, and L. Van Gool.
Deep extreme cut: From extreme points to object segmenta-
tion. In CVPR, 2018. 1, 2, 4, 5, 6, 7, 8

[38] N. S. Nagaraja, F. R. Schmidt, and T. Brox. Video segmen-

tation with just a few strokes. In ICCV, 2015. 2, 4

[39] C. Nieuwenhuis and D. Cremers. Spatially varying color
distributions for interactive multilabel segmentation. IEEE
Trans. on PAMI, 2013. 3

[19] A. Geiger, P. Lenz, C. Stiller, and R. Urtasun. Vision
International Journal

meets robotics: The KITTI dataset.
of Robotics Research, 2013. 1

[40] C. Nieuwenhuis, S. Hawe, M. Kleinsteuber, and D. Cremers.
Co-sparse textural similarity for interactive segmentation. In
ECCV, 2014. 3

11630

[41] D. P. Papadopoulos, J. R. Uijlings, F. Keller, and V. Ferrari.
In ICCV,

Extreme clicking for efﬁcient object annotation.
2017. 1, 2, 5, 6

[60] N. Xu, B. Price, S. Cohen, J. Yang, and T. Huang. Deep

interactive object selection. In CVPR, 2016. 1, 2, 4, 5, 8

[61] H. Zhao, J. Shi, X. Qi, X. Wang, and J. Jia. Pyramid scene

parsing network. In CVPR, 2017. 6

[42] D. P. Papadopoulos, J. R. R. Uijlings, F. Keller, and V. Fer-
rari. We don’t need no bounding-boxes: Training object class
detectors using only human veriﬁcation. In CVPR, 2016. 3

[43] A. Parkash and D. Parikh. Attributes for classiﬁer feedback.

In ECCV, 2012. 3

[44] D. Pathak, P. Kr¨ahenbuhl, and T. Darrell. Constrained con-
volutional neural networks for weakly supervised segmenta-
tion. In ICCV, 2015. 2

[45] S. Ren, K. He, R. Girshick, and J. Sun. Faster R-CNN: To-
wards real-time object detection with region proposal net-
works. In NIPS, 2015. 3

[46] O. Ronneberger, P. Fischer, and T. Brox. U-net: Convolu-
tional networks for biomedical image segmentation. In MIC-
CAI, 2015. 2, 4, 5, 7

[47] C. Rother, V. Kolmogorov, and A. Blake. Grabcut: Inter-
In

active foreground extraction using iterated graph cuts.
SIGGRAPH, 2004. 2, 4, 5

[48] C. Rupprecht,

I. Laina, N. Navab, G. D. Hager, and
F. Tombari. Guide me: Interacting with deep networks. In
CVPR, 2018. 3

[49] O. Russakovsky, L.-J. Li, and L. Fei-Fei. Best of both
worlds: human-machine collaboration for object annotation.
In CVPR, 2015. 3

[50] J. Santner, T. Pock, and H. Bischof. Interactive multi-label

segmentation. In ACCV, 2010. 3

[51] M. Serr˜ao, S. Shahrabadi, M. Moreno, J. Jos´e, J. I. Ro-
drigues, J. M. Rodrigues, and J. H. du Buf. Computer vi-
sion and GIS for the navigation of blind persons in buildings.
Universal Access in the Information Society, 2015. 1

[52] J. R. R. Uijlings, K. E. A. van de Sande, T. Gevers, and
A. W. M. Smeulders. Selective search for object recognition.
IJCV, 2013. 4

[53] V. Vezhnevets and V. Konushin. GrowCut - interactive multi-
In

label N-D image segmentation by cellular automata.
GraphiCon, 2005. 3

[54] S. Vijayanarasimhan and K. Grauman. What’s it going to
cost you?: Predicting effort vs. informativeness for multi-
label image annotations. In CVPR, 2009. 3

[55] C. Wah, G. Van Horn, S. Branson, S. Maji, P. Perona, and
S. Belongie. Similarity comparisons for interactive ﬁne-
grained categorization. In CVPR, 2014. 3

[56] G. Wang, P. Luo, L. Lin, and X. Wang. Learning object in-
teractions and descriptions for semantic image segmentation.
In CVPR, 2017. 1

[57] T. Wang, B. Han, and J. Collomosse. Touchcut: Fast im-
age and video segmentation using single-touch interaction.
CVIU, 2014. 2

[58] Y. Wei, H. Xiao, H. Shi, Z. Jie, J. Feng, and T. S. Huang. Re-
visiting dilated convolution: A simple approach for weakly-
and semi-supervised semantic segmentation. In CVPR, 2018.
2

[59] J. Xu, A. G. Schwing, and R. Urtasun. Learning to segment
under various forms of weak supervision. In CVPR, 2015. 2

11631

