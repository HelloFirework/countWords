Bottom-up Object Detection by Grouping Extreme and Center Points

Xingyi Zhou
UT Austin

Jiacheng Zhuo

UT Austin

Philipp Kr¨ahenb¨uhl

UT Austin

zhouxy@cs.utexas.edu

jzhuo@cs.utexas.edu

philkr@cs.utexas.edu

Abstract

With the advent of deep learning, object detection drifted
from a bottom-up to a top-down recognition problem. State
of the art algorithms enumerate a near-exhaustive list of
object locations and classify each into: object or not. In
this paper, we show that bottom-up approaches still perform
competitively. We detect four extreme points (top-most, left-
most, bottom-most, right-most) and one center point of ob-
jects using a standard keypoint estimation network. We
group the ﬁve keypoints into a bounding box if they are
geometrically aligned. Object detection is then a purely
appearance-based keypoint estimation problem, without re-
gion classiﬁcation or implicit feature learning. The pro-
posed method performs on-par with the state-of-the-art re-
gion based detection methods, with a bounding box AP of
43.7% on COCO test-dev. In addition, our estimated ex-
treme points directly span a coarse octagonal mask, with a
COCO Mask AP of 18.9%, much better than the Mask AP
of vanilla bounding boxes. Extreme point guided segmenta-
tion further improves this to 34.6% Mask AP.

1. Introduction

Top-down approaches have dominated object detection
for years. Prevalent detectors convert object detection into
rectangular region classiﬁcation, by either explicitly crop-
ping the region [12] or region feature [11,41] (two-stage ob-
ject detection) or implicitly setting ﬁx-sized anchors for re-
gion proxies [25, 28, 38] (one-stage object detection). How-
ever, top-down detection is not without limits. A rectan-
gular bounding box is not a natural object representation.
Most objects are not axis-aligned boxes, and ﬁtting them
inside a box includes many distracting background pixels
(Figure. 1). In addition, top-down object detectors enumer-
ate a large number of possible box locations without truly
understanding the compositional visual grammars [9, 13] of
objects themselves. This is computationally expensive. Fi-
nally, boxes are a bad proxy for the object themselves. They
convey little detailed object information, e.g., object shape
and pose.

Figure 1: We propose to detect objects by ﬁnding their ex-
treme points. They directly form a bounding box , but also
give a much tighter octagonal approximation of the object.

In this paper, we propose ExtremeNet, a bottom-up ob-
ject detection framework that detects four extreme points
(top-most, left-most, bottom-most, right-most) of an ob-
ject. We use a state-of-the-art keypoint estimation frame-
work [3, 5, 30, 31, 49] to ﬁnd extreme points, by predicting
four multi-peak heatmaps for each object category. In ad-
dition, we use one heatmap per category predicting the ob-
ject center, as the average of two bounding box edges in
both the x and y dimension. We group extreme points into
objects with a purely geometry-based approach. We group
four extreme points, one from each map, if and only if their
geometric center is predicted in the center heatmap with a
score higher than a pre-deﬁned threshold. We enumerate all
O(n4) combinations of extreme point prediction, and select
the valid ones. The number of extreme point prediction n
is usually quite small, for COCO [26] n  40, and a brute
force algorithm implemented on GPU is sufﬁcient. Figure 2
shows an overview of the proposed method.

We are not the ﬁrst to use deep keypoint prediction
for object detection. CornerNet [22] predicts two oppos-
ing corners of a bounding box. They group corner points
into bounding boxes using an associative embedding fea-
ture [30]. Our approach differs in two key aspects: key-

1850

Left heatmap

Top heatmap

Bottom heatmap Right heatmap

Extract the peaks

Center heatmap

Enumerate
the peaks 
combination

Check the 
scores of 
geometric 
centers

Low center 
score: Reject

High center
score: Accept

Figure 2: Illustration of our object detection method. Our
network predicts four extreme point heatmaps (Top. We
shown the heatmap overlaid on the input image) and one
center heatmap (Bottom row left) for each category. We
enumerate the combinations of the peaks (Middle left) of
four extreme point heatmaps and compute the geometric
center of the composed bounding box (Middle right). A
bounding box is produced if and only if its geometric center
has a high response in the center heatmap (Bottom right).

point deﬁnition and grouping. A corner is another form of
bounding box, and suffers many of the issues top-down de-
tection suffers from. A corner often lies outside an object,
without strong appearance features. Extreme points, on the
other hand, lie on objects, are visually distinguishable, and
have consistent local appearance features. For example, the
top-most point of human is often the head, and the bottom-
most point of a car or airplane will be a wheel. This makes
the extreme point detection easier. The second difference to
CornerNet is the geometric grouping. Our detection frame-
work is fully appearance-based, without any implicit feature
learning. In our experiments, the appearance-based group-
ing works signiﬁcantly better.

Our idea is motivated by Papadopoulos et al. [33], who
proposed to annotate bounding boxes by clicking the four
extreme points. This annotation is roughly four times faster
to collect and provides richer information than bounding
boxes. Extreme points also have a close connection to ob-
ject masks. Directly connecting the inﬂated extreme points
offers a more ﬁne-grained object mask than the bounding
box. In our experiment, we show that ﬁtting a simple oc-
tagon to the extreme points yields a good object mask es-
timation. Our method can be further combined with Deep
Extreme Cut (DEXTR) [29], which turns extreme point an-
notations into a segmentation mask for the indicated object.
Directly feeding our extreme point predictions as guidance

to DEXTR [29] leads to close to state-of-the-art instance
segmentation results.

Our proposed method achieves a bounding box AP of
43.7% on COCO test-dev, out-performing all reported one-
stage object detectors [22, 25, 40, 52] and on-par with so-
phisticated two-stage detectors. A Pascal VOC [8, 14]
pre-trained DEXTR [29] model yields a Mask AP of
34.6%, without using any COCO mask annotations. Code
is available at https://github.com/xingyizhou/
ExtremeNet.

2. Related Work

Two-stage object detectors Region-CNN family [11,
12, 15, 16, 41] considers object detection as two sequential
problems: ﬁrst propose a (large) set of category-agnostic
bounding box candidates, crop them, and use an image
classiﬁcation module to classify the cropped region or re-
gion feature. R-CNN [12] uses selective search [47] to
generate region proposals and feeds them to an ImageNet
classiﬁcation network. SPP [16] and Fast RCNN [11] ﬁrst
feed an image through a convolutional network and crop
an intermediate feature map to reduce computation. Faster
RCNN [41] further replaces region proposals [47] with a
Region Proposal Network. The detection-by-classiﬁcation
idea is intuitive and keeps the best performance so far [6, 7,
19, 20, 24, 27, 37, 45, 46, 54].

Our method does not require region proposal or region
classiﬁcation. We argue that a region is not a necessary
component in object detection. Representing an object by
four extreme points is also effective and provides as much
information as bounding boxes.

One-stage object detector One-stage object detec-
tors [22, 25, 28, 38, 39, 42, 48] do not have a region crop-
ping module. They can be considered as category-speciﬁc
region or anchor proposal networks and directly assign a
class label to each positive anchor. SSD [10,28] uses differ-
ent scale anchors in different network layers. YOLOv2 [39]
learns anchor shape priors. RetinaNet [25] proposes a focal
loss to balance the training contribution between positive
and negative anchors. ReﬁneDet [52] learns to early reject
negative anchors. Well-designed single-stage object detec-
tors achieve very close performance with two-stage ones at
higher efﬁciency.

Our method falls in the one-stage detector category.
However, instead of setting anchors in an O(h2w2) space,
we detects ﬁve individual parts (four extreme points and one
center) of a bounding box in O(hw) space. Instead of set-
ting default scales or aspect-ratios as anchors at each pixel
location, we only predict the probability for that location be-
ing a keypoint. Our center map can also be seen as a scale
and aspect ratio agnostic region proposal network without
bounding box regression.

Deformable Part Model As a bottom-up object detec-

851

4 x C x H x W extreme point heatmaps

C x H x W  center heatmap

top heatmap

left heatmap

bottom heatmap

right heatmap

center  heatmap

Hourglass Network

4 x 2 x H x W offset map

top offset

left offset

bottom offset

right offset

Figure 3: Illustration of our framework. Our network takes an image as input and produces four C-channel heatmaps, one C-
channel heatmap, and four 2-channel category-agnostic offset map. The heatmaps are trained by weighted pixel-wise logistic
regression, where the weight is used to reduce false-positive penalty near the ground truth location. And the offset map is
trained with Smooth L1 loss applied at ground truth peak locations.

tion method, our idea of grouping center and extreme points
is related to Deformable Part Model [9]. Our center point
detector functions similarly with the root ﬁlter in DPM [9],
and our four extreme points can be considered as a univer-
sal part decomposition for all categories. Instead of learning
the part conﬁguration, our predicted center and four extreme
points have a ﬁxed geometry structure. And we use a state-
of-the-art keypoint detection network instead of low-level
image ﬁlters for part detection.

Grouping in bottom-up human pose estimation De-
termining which keypoints are from the same person is an
important component in bottom-up multi-person pose esti-
mation. There are multiple solutions: Newell et al. [30]
proposes to learn an associative feature for each keypoint,
which is trained using an embedding loss. Cao et al. [3]
learns an afﬁnity ﬁeld which resembles the edge between
connected keypoints. Papandreous et al. [34] learns the dis-
placement to the parent joint on the human skeleton tree, as
a 2-d feature for each keypoint. Nie et al. [32] also learn a
feature as the offset with respect to the object center.

In contrast to all the above methods, our center grouping
is pure appearance-based and is easy to learn, by exploiting
the geometric structure of extreme points and their center.

Implicit keypoint detection Prevalent keypoint detec-
tion methods work on well-deﬁned semantic keypoints, e.g.,
human joints. StarMap [53] mixes all types of keypoints
using a single heatmap for general keypoint detection. Our
extreme and center points are a kind of such general implicit
keypoints, but with more explicit geometry property.

3. Preliminaries

Extreme and center points Let (x(tl), y(tl), x(br), y(br))
denote the four sides of a bounding box.
To anno-
tate a bounding box, a user commonly clicks on the
top-left (x(tl), y(tl)) and bottom-right (x(br), y(br)) cor-
ners. As both points regularly lie outside an object, these

clicks are often inaccuracy and need to be adjusted a few
times. The whole process takes 34.5 seconds on av-
erage [44]. Papadopoulos et al. [33] propose to anno-
tate the bounding box by clicking the four extreme points
(x(t), y(t)), (x(l), y(l)), (x(b), y(b)), (x(r), y(r)), where the
box is (x(l), y(t), x(r), y(b)). An extreme point is a point
(x(a), y(a)) such that no other point (x, y) on the object lies
further along one of the four cardinal directions a: top, bot-
tom, left, right. Extreme click annotation time is 7.2 sec-
onds on average [33]. The resulting annotation is on-par
with the more time-consuming box annotation. Here, we
use the extreme click annotations directly and bypass the
bounding box. We additionally use the center point of each
object as ( x(l)+x(r)

, y(t)+y(b)

).

2

2

Keypoint detection Keypoint estimation, e.g., human
joint estimation [3,5,15,30,49] or chair corner point estima-
tion [36, 53], commonly uses a fully convolutional encoder-
decoder network to predict a multi-channel heatmap for
each type of keypoint (e.g., one heatmap for human head,
another heatmap for human wrist). The network is trained
in a fully supervised way, with either an L2 loss to a ren-
dered Gaussian map [3, 5, 30, 49] or with a per-pixel logistic
regression loss [22, 34, 35]. State-of-the-art keypoint esti-
mation networks, e.g., 104-layer HourglassNet [22, 31], are
trained in a fully convolutional manner. They regress to a
heatmap ˆY 2 (0, 1)H×W of width W and height H for
each output channel. The training is guided by a multi-peak
Gaussian heatmap Y 2 (0, 1)H×W , where each keypoint
deﬁnes the mean of a Gaussian Kernel. The standard devia-
tion is either ﬁxed, or set proportional to the object size [22].
The Gaussian heatmap serves as the regression target in the
L2 loss case or as the weight map to reduce penalty near a
positive location in the logistic regression case [22].

852

CornerNet CornerNet [22] uses keypoint estimation with
an HourglassNet [31] as an object detector. They predict
two sets of heatmaps for the opposing corners of the box.
In order to balance the positive and negative locations they
use a modiﬁed focal loss [25] for training:

Ldet =  

1
N

H

W

X

i=1

X

j=1

(1   ˆYij)α log( ˆYij)

if Yij = 1

(1 Yij)β( ˆYij)α log(1  ˆYij) o.w.

, (1)

where ↵ and   are hyper-parameters and ﬁxed to ↵ = 2 and
  = 4 during training. N is the number of objects in the
image.

For sub-pixel accuracy of extreme points, CornerNet
additionally regresses to category-agnostic keypoint offset
∆(a) for each corner. This regression recovers part of the
information lost in the down-sampling of the hourglass net-
work. The offset map is trained with smooth L1 Loss [11]
SL1 on ground truth extreme point locations:

Lof f =

1
N

N

X

k=1

SL1(∆(a), ~x/s   b~x/sc),

(2)

where s is the down-sampling factor (s = 4 for Hourglass-
Net), ~x is the coordinate of the keypoint.

CornerNet then groups opposing corners into detection
using an associative embedding [30]. Our extreme point
estimation uses the CornerNet architecture and loss, but not
the associative embedding.

Deep Extreme Cut Deep Extreme Cut (DEXTR) [29] is
an extreme point guided image segmentation method.
It
takes four extreme points and the cropped image region sur-
rounding the bounding box spanned by the extreme points
as input. From this it produces a category-agnostic fore-
ground segmentation of the indicated object using the se-
mantic segmentation network of Chen et al. [4]. The net-
work learns to generate the segmentation mask that matches
the input extreme point.

4. ExtremeNet for Object detection

ExtremeNet uses an HourglassNet [31] to detect ﬁve
keypoints per class (four extreme points, and one center).
We follow the training setup, loss and offset prediction of
CornerNet [22]. The offset prediction is category-agnostic,
but extreme-point speciﬁc. There is no offset prediction for
the center map. The output of our network is thus 5 ⇥ C
heatmaps and 4 ⇥ 2 offset maps, where C is the number of
classes (C = 80 for MS COCO [26]). Figure 3 shows an
overview. Once the extreme points are extracted, we group
them into detections in a purely geometric manner.

Algorithm 1: Center Grouping

Input

: Center and Extremepoint heatmaps of an image for one
category: ˆY (c), ˆY (t), ˆY (l), ˆY (b), ˆY (r) ∈ (0, 1)H×W
Center and peak selection thresholds: τc and τp

Output: Bounding box with score
// Convert heatmaps into coordinates of keypoints.
// T , L, B, R are sets of points.
T ← ExtractPeak( ˆY (t), τp)
L ← ExtractPeak( ˆY (l), τp)
B ← ExtractPeak( ˆY (b), τp)
R ← ExtractPeak( ˆY (r), τp)
for t ∈ T , l ∈ L, b ∈ B, r ∈ R do

// If the bounding box is valid
if ty ≤ ly, ry ≤ by and lx ≤ tx, bx ≤ rx then

// compute geometry center
cx ← (lx + rx)/2
cy ← (ty + by)/2
// If the center is detected
if ˆY (c)

cx,cy ≥ τc then
Add Bounding box (lx, ty, rx, by) with score
rx,ry + ˆY (c)
( ˆY (t)

+ ˆY (r)

+ ˆY (b)

+ ˆY (l)
lx,ly

bx,by

tx,ty

cx,cy )/5.

end

end

end

4.1. Center Grouping

Extreme points lie on different sides of an object. This
complicates grouping. For example, an associative embed-
ding [30] might not have a global enough view to group
these keypoints. Here, we take a different approach that ex-
ploits the spread out nature of extreme points.

The input to our grouping algorithm is ﬁve heatmaps per
class: one center heatmap ˆY (c) 2 (0, 1)H×W and four ex-
treme heatmaps ˆY (t), ˆY (l), ˆY (b), ˆY (r) 2 (0, 1)H×W for the
top, left, bottom, right, respectively. Given a heatmap, we
extract the corresponding keypoints by detecting all peaks.
A peak is any pixel location with a value greater than ⌧p,
that is locally maximal in a 3 ⇥ 3 window surrounding the
pixel. We name this procedure as ExtrectPeak.

2

2

).

, ty+by

Given four extreme points t, b, r, l extracted from
heatmaps ˆY (t), ˆY (l), ˆY (b), ˆY (r), we compute their geomet-
ric center c = ( lx+tx
If this center is predicted
with a high response in the center map ˆY (c), we commit the
extreme points as a valid detection: ˆY (c)
cx,cy   ⌧c for a thresh-
old ⌧c. We then enumerate over all quadruples of keypoints
t, b, r, l in a brute force manner. We extract detections for
each class independently. Algorithm 1 summarizes this pro-
cedure. We set ⌧p = 0.1 and ⌧c = 0.1 in all experiments.

This brute force grouping algorithm has a runtime
of O(n4), where n is the number of extracted extreme
points for each cardinal direction. Supplementary material
presents a O(n2) algorithm that is faster on paper. How-
ever, then it is harder to accelerate on a GPU and slower in
practice for the MS COCO dataset, where n  40.

853

(a) Original heatmap.

(b) After edge aggregation.

Figure 4: Illustration of the purpose of edge aggregation.
In the case of multiple points being the extreme point on
one edge, our model predicts a segment of low conﬁdent
responses (a). Edge aggregation enhances the conﬁdence of
the middle pixel (b).

4.2. Ghost box suppression

Center grouping may give a high-conﬁdence false-
positive detection for three equally spaced colinear objects
of the same size. The center object has two choices here,
commit to the correct small box, or predict a much larger
box containing the extreme points of its neighbors. We
call these false-positive detections “ghost” boxes. As we’ll
show in our experiments, these ghost boxes are infrequent,
but nonetheless a consistent error mode of our grouping.

We present a simple post-processing step to remove
ghost boxes. By deﬁnition a ghost box contains many other
smaller detections. To discourage ghost boxes, we use a
form of soft non-maxima suppression [1].
If the sum of
scores of all boxes contained in a certain bounding box ex-
ceeds 3 times of the score of itself, we divide its score by
2. This non-maxima suppression is similar to the standard
overlap-based non-maxima suppression, but penalizes po-
tential ghost boxes instead of multiple overlapping boxes.

4.3. Edge aggregation

Extreme points are not always uniquely deﬁned. If verti-
cal or horizontal edges of an object form the extreme points
(e.g., the top of a car) any point along that edge might be
considered an extreme point. As a result, our network pro-
duces a weak response along any aligned edges of the ob-
ject, instead of a single strong peak response. This weak
response has two issues: First, the weaker response might
be below our peak selection threshold ⌧p, and we will miss
the extreme point entirely. Second, even if we detect the
keypoint, its score will be lower than a slightly rotated ob-
ject with a strong peak response.

We use edge aggregation to address this issue. For each
extreme point, extracted as a local maximum, we aggre-
gate its score in either the vertical direction, for left and
right extreme points, or the horizontal direction, for top
and bottom keypoints. We aggregate all monotonically de-

creasing scores, and stop the aggregation at a local mini-
mum along the aggregation direction. Speciﬁcally, let m
be an extreme point and N (m)
i = ˆYmx+i,my be the vertical
or horizontal line segment at that point. Let i0 < 0 and
0 < i1 be the two closest local minima N (m)
i0−1 > N (m)
and N (m)
i1+1. Edge aggregation updates the key-
point score as ˜Ym = ˆYm +  aggr Pi1
, where
 aggr is the aggregation weight.
In our experiments, we
set  aggr = 0.1. See Fig. 4 for en example.

< N (m)

N (m)

i=i0

i0

i1

i

4.4. Extreme Instance Segmentation

Extreme points carry considerable more information
about an object, than a simple bounding box, with at least
twice as many annotated values (8 vs 4). We propose a sim-
ple method to approximate the object mask using extreme
points by creating an octagon whose edges are centered on
the extreme points. Speciﬁcally, for an extreme point, we
extend it in both directions on its corresponding edge to a
segment of 1/4 of the entire edge length. The segment is
truncated when it meets a corner. We then connect the end
points of the four segments to form the octagon. See Figure
1 for an example.

To further reﬁne the bounding box segmentation, we use
Deep Extreme Cut (DEXTR) [29], a deep network trained
to convert the manually provided extreme points into in-
stance segmentation mask.
In this work, we simply re-
place the manual input of DEXTR [29] with our extreme
point prediction, to perform a 2-stage instance segmenta-
tion. Speciﬁcally, for each of our predicted bounding box
, we crop the bounding box region, render a Gaussian map
with our predicted extreme point, and then feed the concate-
nated image to the pre-trained DEXTR model. DEXTR [29]
is class-agnostic, thus we directly use the detected class and
score of ExtremeNet. No further post-processing is used.

5. Experiments

We evaluate our method on the popular MS COCO
dataset [26]. COCO contains rich bounding box and in-
stance segmentation annotations for 80 categories. We train
on the train2017 split, which contains 118k images and
860k annotated objects. We perform all ablation studies on
val2017 split, with 5k images and 36k objects, and compare
to prior work on the test-dev split with contains 20k im-
ages The main evaluation metric is average precision over
a dense set of ﬁxed recall threshold We show average pre-
cision at IOU threshold 0.5 (AP50), 0.75 (AP75), and aver-
aged over all thresholds between 0.5 and 1 (AP ). We also
report AP for small, median and large objects (APS, APM ,
APL). The test evaluation is done on the ofﬁcial evaluation
server. Qualitative results are shown in Table. 4 and can be
found more in the supplementary material.

854

5.1. Extreme point annotations

There are no direct extreme point annotation in the
COCO [26]. However, there are complete annotations for
object segmentation masks. We thus ﬁnd extreme points as
extrema in the polygonal mask annotations. In cases where
an edge is parallel to an axis or within a 3
angle, we place
the extreme point at the center of the edge. Although our
training data is derived from the more expensive segmenta-
tion annotation, the extreme point data itself is 4⇥ cheaper
to collect than the standard bounding box [33].

 

5.2. Training details

Our implementation is based on the public implemen-
tation of CornerNet [22]. We strictly follow CornerNets
hyper-parameters: we set the input resolution to 511 ⇥ 511
and output resolution to 128⇥ 128. Data augmentation con-
sists of ﬂipping, random scaling between 0.6 and 1.3, ran-
dom cropping, and random color jittering. The network is
optimized with Adam [21] with learning rate 2.5e   4. Cor-
nerNet [22] was originally trained on 10 GPUs for 500k iter-
ations, and an equivalent of over 140 GPU days. Due to lim-
ited GPU resources, the self-comparison experiments (Ta-
ble. 1) are ﬁnetuned from a pre-trained CornerNet model
with randomly initialized head layers on 5 GPUs for 250k
iterations with a batch size of 24. Learning rate is dropped
10⇥ at the 200k iteration. The state-of-the-art comparison
experiment is trained from scratch on 5 GPUs for 500k it-
erations with learning rate dropped at the 450k iteration.

5.3. Testing details

For each input

image, our network produces four
C-channel heatmaps for extreme points, one C-channel
heatmap for center points, and four 2-channel offset maps.
We apply edge aggregation (Section. 4.3) to each extreme
point heatmap, and multiply the center heatmap by 2 to cor-
rect for the overall scale change. We then apply the cen-
ter grouping algorithm (Section. 4.1) to the heatmaps. At
most 40 top points are extracted in ExtrectPeak to keep the
enumerating efﬁciency. The predicted bounding box coor-
dinates are reﬁned by adding an offset at the corresponding
location of offsetmaps.

Following CornerNet [22], we keep the original image
resolution instead of resizing it to a ﬁxed size. We use ﬂip
augmentation for testing. In our main comparison, we use
additional 5⇥ multi-scale (0.5, 0.75, 1, 1.25, 1.5) augmen-
tation. Finally, Soft-NMS [1] ﬁlters all augmented detection
results. Testing on one image takes 322ms (3.1FPS), with
168ms on network forwarding, 130ms on decoding and rest
time on image pre- and post-processing (NMS).

5.4. Ablation studies

AP AP50 AP75 APS APM APL

40.3 55.1 43.7 21.6 44.0 56.1
w/ multi-scale testing 43.3 59.6 46.8 25.7 46.6 59.4

38.2 53.8 40.4 20.6 41.5 52.9
w/o Center grouping
w/o Edge aggregation 39.6 54.7 43.0 22.0 43.0 54.1
w/o Ghost removal
40.0 54.7 43.3 21.6 44.2 54.1

48.6 62.1 53.9 26.3 53.7 66.7
w/ gt center
56.3 67.2 60.0 40.9 62.0s 64.0
w/ gt extreme
w/ gt extreme + center 79.8 94.5 86.2 65.5 88.7 95.5
w/ gt ex. + ct. + offset 86.0 94.0 91.3 73.4 95.7 98.4

Table 1: Ablation study and error analysis on COCO
val2017. We show AP(%) after removing each component
or replacing it with its ground truth.

ding [30] similar to CornerNet [22], instead of our geomet-
ric center point grouping. We tried this idea and replaced
the center map with a four-channel associative embedding
feature map trained with a Hinge Loss [22]. Table 1 shows
the result. We observe a 2.1% AP drop when using the as-
sociative embedding. While associative embeddings work
well for human pose estimation and CornerNet, our extreme
points lie on the very side of objects. Learning the identity
and appearance of entire objects from the vantage point of
its extreme points might simply be too hard. While it might
work well for small objects, where the entire object easily
ﬁts into the effective receptive ﬁeld of a keypoint, it fails
for medium and large objects as shown in Table 1. Further-
more, extreme points often lie at the intersection between
overlapping objects, which further confuses the identity fea-
ture. Our geometric grouping method gracefully deals with
these issues, as it only needs to reason about appearance.

Edge aggregation Edge aggregation (Section 4.3) gives a
decent AP improvement of 0.7%. It proofs more effective
for larger objects, that are more likely to have a long axis
aligned edges without a single well deﬁned extreme point.
Removing edge aggregation improves the decoding time to
76ms and overall speed to 4.1 FPS.

Ghost box suppression Our simple ghost bounding box
suppression (Section 4.2) yields 0.3% AP improvement.
This suggests that ghost boxes are not a signiﬁcant practi-
cal issue in MS COCO. A more sophisticated false-positive
removal algorithm, e.g., learn NMS [18], might yield a
slightly better result.

Center Grouping vs. Associative Embedding Our Ex-
tremeNet can also be trained with an Associative Embed-

Error Analysis To better understand where the error
comes from and how well each of our components is

855

Backbone

Input resolution AP AP50 AP75 APS APM APL

Two-stage detectors
Faster R-CNN w/ FPN [24]
Deformable-CNN [7]
Deep Regionlets [51]
Mask R-CNN [15]
LH R-CNN [23]
Cascade R-CNN [2]
D-RFCN + SNIP [43]
PANet [27]

ResNet-101

Inception-ResNet

ResNet-101
ResNeXt-101
ResNet-101
ResNet-101

DPN-98

ResNeXt-101

One-stage detectors
YOLOv2 [39]
YOLOv3 [40]
SSD [28]
DSSD [10]
RetinaNet [25]
ReﬁneDet (SS) [52]
ReﬁneDet (MS) [52]
CornerNet (SS) [22]
CornerNet (MS) [22]
ExtremeNet (SS)
ExtremeNet (MS)

DarkNet-19
DarkNet-53
ResNet-101
ResNet-101
ResNet-101
ResNet-101
ResNet-101

Hourglass-104
Hourglass-104
Hourglass-104
Hourglass-104

1000 ⇥ 600
1000 ⇥ 600
1000 ⇥ 600
1333 ⇥ 800
1000 ⇥ 600
1333 ⇥ 800
1333 ⇥ 800
1000 ⇥ 600

544 ⇥ 544
608 ⇥ 608
513 ⇥ 513
513 ⇥ 513
1333 ⇥ 800
512 ⇥ 512
512 ⇥ 512
511 ⇥ 511
511 ⇥ 511
511 ⇥ 511
511 ⇥ 511

-
-

36.2 59.1 39.0
37.5 58.0
39.3 59.8
39.8 62.3 43.4
41.5
42.8 62.1 46.3
45.7 67.3 51.1
47.4 67.2 51.8

-

-

21.6 44.0 19.2
33.0 57.9 34.4
31.2 50.4 33.3
33.2 53.3 35.2
39.1 59.1 42.3
36.4 57.5 39.5
41.8 62.9 45.7
40.5 56.5 43.1
42.1 57.8 45.3
40.2 55.5 43.2
43.7 60.5 47.0

18.2 39.0 48.2
19.4 40.1 52.5
21.7 43.7 50.9
22.1 43.2 51.2
25.2 45.3 53.1
23.7 45.5 55.2
29.3 48.8 57.1
30.1 51.7 60.0

5.0 22.4 35.5
18.3 35.4 41.9
10.2 34.5 49.8
13.0 35.4 51.1
21.8 42.7 50.2
16.6 39.9 51.4
25.6 45.1 54.1
19.4 42.7 53.9
20.8 44.8 56.7
20.4 43.2 53.1
24.1 46.9 57.6

Table 2: State-of-the-art comparison on COCO test-dev. SS/ MS are short for single-scale/ multi-scale tesing, respectively.
It shows that our ExtremeNet in on-par with state-of-the-art region-based object detectors.

trained, we provide error analysis by replacing each out-
put component with its ground truth. Table 1 shows the
result. A ground truth center heatmap alone does not in-
crease AP much. This indicates that our center heatmap is
trained quite well, and shows that the implicit object cen-
ter is learnable. Replacing the extreme point heatmap with
ground truth gives 16.3% AP improvement. When replac-
ing both extreme point heatmap and center heatmap, the re-
sult comes to 79.8%, much higher than replacing one of
them. This is due to that our center grouping is very strict
in the keypoint location and a high performance requires to
improve both extreme point heatmap and center heatmap.
Adding the ground truth offsets further increases the AP to

AP AP50 AP75 APS APM APL

BBox
Ours octagon
Ours+DEXTR [29]

6.2

12.1 34.9
12.7 16.9
18.9 44.5 13.7 10.4 20.4 28.3
34.6 54.9 36.6 16.6 36.5 52.0

8.2

Mask RCNN-50 [15] 34.0 55.5 36.1 14.4 36.7 51.9
Mask RCNN-101 [15] 37.5 60.6 39.9 17.7 41.0 55.4

Table 3:
val2017. The results are shown in Mask AP.

Instance segmentation evaluation on COCO

86.0%. The rest error is from the ghost box (Section 4.2).

5.5. State-of-the-art comparisons

Table 2 compares ExtremeNet to other state-of-the-art
methods on COCO test-dev. Our model with multi-scale
testing achieves an AP of 43.7, outperforming all reported
one-stage object detectors and on-par with popular two-
stage detectors. Notable, it performs 1.6% higher than Cor-
nerNet, which shows the advantage of detecting extreme
and center points over detecting corners with associative
features. In single scale setting, our performance is 0.3%
AP below CornerNet [22]. However, our method has higher
AP for small and median objects than CornerNet, which is
known to be more challenging. For larger objects our cen-
ter response map might not be accurate enough to perform
well, as a few pixel shift might make the difference between
a detection and a false-negative. Further, note that we used
the half number of GPUs to train our model.

5.6. Instance Segmentation

Finally, we compare our instance segmentation results

with/ without DEXTR [29] to other baselines in Table 3.

As a dummy baseline, we directly assign all pixels inside
the rectangular bounding box as the segmentation mask.

856

Extreme point heatmap

Center heatmap

Octagon mask

Extreme points+DEXTR [29]

Table 4: Qualitative results on COCO val2017. First and second column: our predicted (combined four) extreme point
heatmap and center heatmap, respectively. We show them overlaid on the input image. We show heatmaps of different
categories in different colors. Third column: our predicted bounding box and the octagon mask formed by extreme points.
Fourth column: resulting masks of feeding our extreme point predictions to DEXTR [29].

The result on our best-model (with 43.3% bounding box
AP) is 12.1% Mask AP. The simple octagon mask (Section.
4.4) based on our predicted extreme points gets a mask AP
of 18.9%, much better than the bounding box baseline. This
shows that this simple octagon mask can give a relatively
reasonable object mask without additional cost. Note that
directly using the quadrangle of the four extreme points
yields a too-small mask, with a lower IoU.

When combined with DEXTR [29], our method achieves
a mask AP of 34.6% on COCO val2017. To put this result
in a context, the state-of-the-art Mask RCNN [15] gets a
mask AP of 37.5% with ResNeXt-101-FPN [24, 50] back-
bone and 34.0% AP with Res50-FPN. Considering the fact
that our model has not been trained on the COCO segmen-
tation annotation, or any class speciﬁc segmentations at all,

our result which is on-par with Res50 [17] and 2.9% AP
below ResNeXt-101 is very competitive.

6. Conclusion

In conclusion, we present a novel object detection frame-
work based on bottom-up extreme points estimation. Our
framework extracts four extreme points and groups them
in a purely geometric manner. The presented framework
yields state-of-the-art detection results and produces com-
petitive instance segmentation results on MSCOCO, with-
out seeing any COCO training instance segmentations.

Acknowledgement We thank Chao-Yuan Wu, Dian
Chen, and Chia-Wen Cheng for helpful feedback.

857

References

[1] Navaneeth Bodla, Bharat Singh, Rama Chellappa, and
Larry S Davis. Soft-nmsimproving object detection with one
line of code. In ICCV, 2017. 5, 6

[2] Zhaowei Cai and Nuno Vasconcelos. Cascade r-cnn: Delving

into high quality object detection. CVPR, 2018. 7

[3] Zhe Cao, Tomas Simon, Shih-En Wei, and Yaser Sheikh.
Realtime multi-person 2d pose estimation using part afﬁnity
ﬁelds. In CVPR, 2017. 1, 3

[4] Liang-Chieh Chen, George Papandreou, Iasonas Kokkinos,
Kevin Murphy, and Alan L Yuille. Deeplab: Semantic image
segmentation with deep convolutional nets, atrous convolu-
tion, and fully connected crfs. PAMI, 2018. 4

[5] Yilun Chen, Zhicheng Wang, Yuxiang Peng, Zhiqiang
Zhang, Gang Yu, and Jian Sun. Cascaded pyramid network
for multi-person pose estimation. In CVPR, 2018. 1, 3

[6] Jifeng Dai, Yi Li, Kaiming He, and Jian Sun. R-fcn: Object
detection via region-based fully convolutional networks. In
NIPS, 2016. 2

[7] Jifeng Dai, Haozhi Qi, Yuwen Xiong, Yi Li, Guodong
Zhang, Han Hu, and Yichen Wei. Deformable convolutional
networks. In ICCV, 2017. 2, 7

[8] M. Everingham, L. Van Gool, C. K. I. Williams, J. Winn,
and A. Zisserman. The PASCAL Visual Object Classes
Challenge 2012 (VOC2012) Results.
http://www.pascal-
network.org/challenges/VOC/voc2012/workshop/index.html.
2

[9] Pedro F Felzenszwalb, Ross B Girshick, David McAllester,
and Deva Ramanan. Object detection with discriminatively
trained part-based models. PAMI, 2010. 1, 3

[10] Cheng-Yang Fu, Wei Liu, Ananth Ranga, Ambrish Tyagi,
and Alexander C Berg. Dssd: Deconvolutional single shot
detector. arXiv preprint, 2017. 2, 7

[11] Ross Girshick. Fast r-cnn. In ICCV, 2015. 1, 2, 4
[12] Ross Girshick, Jeff Donahue, Trevor Darrell, and Jitendra
Malik. Rich feature hierarchies for accurate object detection
and semantic segmentation. In CVPR, 2014. 1, 2

[13] Ross B Girshick, Pedro F Felzenszwalb, and David A
Mcallester. Object detection with grammar models. In NIPS,
2011. 1

[14] Bharath Hariharan, Pablo Arbelaez, Lubomir Bourdev,
Subhransu Maji, and Jitendra Malik. Semantic contours from
inverse detectors. In ICCV, 2011. 2

[15] Kaiming He, Georgia Gkioxari, Piotr Doll´ar, and Ross Gir-

shick. Mask r-cnn. In ICCV, 2017. 2, 3, 7, 8

[16] Kaiming He, Xiangyu Zhang, Shaoqing Ren, and Jian Sun.
Spatial pyramid pooling in deep convolutional networks for
visual recognition. In ECCV, 2014. 2

[17] Kaiming He, Xiangyu Zhang, Shaoqing Ren, and Jian Sun.
In CVPR,

Deep residual learning for image recognition.
2016. 8

[18] Jan Hendrik Hosang, Rodrigo Benenson, and Bernt Schiele.

Learning non-maximum suppression. In CVPR, 2017. 6

trade-offs for modern convolutional object detectors.
CVPR, 2017. 2

In

[20] Borui Jiang, Ruixuan Luo, Jiayuan Mao, Tete Xiao, and Yun-
ing Jiang. Acquisition of localization conﬁdence for accurate
object detection. In ECCV, September 2018. 2

[21] Diederik P Kingma and Jimmy Ba. Adam: A method for

stochastic optimization. ICLR, 2014. 6

[22] Hei Law and Jia Deng. Cornernet: Detecting objects as

paired keypoints. In ECCV, 2018. 1, 2, 3, 4, 6, 7

[23] Zeming Li, Chao Peng, Gang Yu, Xiangyu Zhang, Yangdong
Deng, and Jian Sun. Light-head r-cnn: In defense of two-
stage object detector. arXiv preprint, 2017. 7

[24] Tsung-Yi Lin, Piotr Doll´ar, Ross B Girshick, Kaiming He,
Bharath Hariharan, and Serge J Belongie. Feature pyramid
networks for object detection. In CVPR, 2017. 2, 7, 8

[25] Tsung-Yi Lin, Priyal Goyal, Ross Girshick, Kaiming He, and
Piotr Doll´ar. Focal loss for dense object detection. ICCV,
2017. 1, 2, 4, 7

[26] Tsung-Yi Lin, Michael Maire, Serge Belongie, James Hays,
Pietro Perona, Deva Ramanan, Piotr Doll´ar, and C Lawrence
Zitnick. Microsoft coco: Common objects in context.
In
ECCV, 2014. 1, 4, 5, 6

[27] Shu Liu, Lu Qi, Haifang Qin, Jianping Shi, and Jiaya Jia.
In

Path aggregation network for instance segmentation.
CVPR, 2018. 2, 7

[28] Wei Liu, Dragomir Anguelov, Dumitru Erhan, Christian
Szegedy, Scott Reed, Cheng-Yang Fu, and Alexander C
Berg. Ssd: Single shot multibox detector. In ECCV, 2016.
1, 2, 7

[29] K.K. Maninis, S. Caelles, J. Pont-Tuset, and L. Van Gool.
Deep extreme cut: From extreme points to object segmenta-
tion. In CVPR, 2018. 2, 4, 5, 7, 8

[30] Alejandro Newell, Zhiao Huang, and Jia Deng. Associa-
tive embedding: End-to-end learning for joint detection and
grouping. In NIPS, 2017. 1, 3, 4, 6

[31] Alejandro Newell, Kaiyu Yang, and Jia Deng. Stacked hour-
glass networks for human pose estimation. In ECCV, 2016.
1, 3, 4

[32] Xuecheng Nie, Jiashi Feng, Junliang Xing, and Shuicheng
Yan. Pose partition networks for multi-person pose estima-
tion. In ECCV, 2018. 3

[33] Dim P Papadopoulos, Jasper RR Uijlings, Frank Keller, and
Vittorio Ferrari. Extreme clicking for efﬁcient object anno-
tation. In ICCV, 2017. 2, 3, 6

[34] George Papandreou, Tyler Zhu, Liang-Chieh Chen, Spyros
Gidaris, Jonathan Tompson, and Kevin Murphy. Person-
lab: Person pose estimation and instance segmentation with a
bottom-up, part-based, geometric embedding model. ECCV,
2018. 3

[35] George Papandreou, Tyler Zhu, Nori Kanazawa, Alexander
Toshev, Jonathan Tompson, Chris Bregler, and Kevin Mur-
phy. Towards accurate multi-person pose estimation in the
wild. In CVPR, 2017. 3

[19] Jonathan Huang, Vivek Rathod, Chen Sun, Menglong Zhu,
Anoop Korattikara, Alireza Fathi, Ian Fischer, Zbigniew Wo-
jna, Yang Song, Sergio Guadarrama, et al. Speed/accuracy

[36] Georgios Pavlakos, Xiaowei Zhou, Aaron Chan, Konstanti-
nos G Derpanis, and Kostas Daniilidis. 6-dof object pose
from semantic keypoints. In ICRA, 2017. 3

858

[37] Chao Peng, Tete Xiao, Zeming Li, Yuning Jiang, Xiangyu
Zhang, Kai Jia, Gang Yu, and Jian Sun. Megdet: A large
mini-batch object detector. CVPR, 2018. 2

[38] Joseph Redmon, Santosh Divvala, Ross Girshick, and Ali
Farhadi. You only look once: Uniﬁed, real-time object de-
tection. In CVPR, 2016. 1, 2

[39] Joseph Redmon and Ali Farhadi. Yolo9000: better, faster,

stronger. CVPR, 2017. 2, 7

[40] Joseph Redmon and Ali Farhadi. Yolov3: An incremental

improvement. arXiv preprint, 2018. 2, 7

[41] Shaoqing Ren, Kaiming He, Ross Girshick, and Jian Sun.
Faster r-cnn: Towards real-time object detection with region
proposal networks. In NIPS, 2015. 1, 2

[42] Zhiqiang Shen, Zhuang Liu, Jianguo Li, Yu-Gang Jiang,
Yurong Chen, and Xiangyang Xue. Dsod: Learning deeply
supervised object detectors from scratch. In ICCV, 2017. 2
[43] Bharat Singh and Larry S Davis. An analysis of scale invari-

ance in object detection–snip. In CVPR, 2018. 7

[44] Hao Su, Jia Deng, and Li Fei-Fei. Crowdsourcing annota-

tions for visual object detection. In AAAIW, 2012. 3

[45] Lachlan Tychsen-Smith and Lars Petersson. Denet: Scal-
able real-time object detection with directed sparse sam-
pling. arXiv preprint arXiv:1703.10295, 2017. 2

[46] Lachlan Tychsen-Smith and Lars Petersson. Improving ob-
ject localization with ﬁtness nms and bounded iou loss.
CVPR, 2017. 2

[47] Jasper RR Uijlings, Koen EA Van De Sande, Theo Gev-
ers, and Arnold WM Smeulders. Selective search for object
recognition. IJCV, 2013. 2

[48] Xinggang Wang, Kaibing Chen, Zilong Huang, Cong Yao,
and Wenyu Liu. Point linking network for object detection.
arXiv preprint arXiv:1706.03646, 2017. 2

[49] Bin Xiao, Haiping Wu, and Yichen Wei. Simple baselines
for human pose estimation and tracking. In ECCV, 2018. 1,
3

[50] Saining Xie, Ross Girshick, Piotr Doll´ar, Zhuowen Tu, and
Kaiming He. Aggregated residual transformations for deep
neural networks. In CVPR, 2017. 8

[51] Hongyu Xu, Xutao Lv, Xiaoyu Wang, Zhou Ren, Navaneeth
Bodla, and Rama Chellappa. Deep regionlets for object de-
tection. In ECCV, 2018. 7

[52] Shifeng Zhang, Longyin Wen, Xiao Bian, Zhen Lei, and
Stan Z. Li. Single-shot reﬁnement neural network for object
detection. In CVPR, 2018. 2, 7

[53] Xingyi Zhou, Arjun Karpur, Linjie Luo, and Qixing Huang.
Starmap for category-agnostic keypoint and viewpoint esti-
mation. In ECCV, 2018. 3

[54] Yousong Zhu, Chaoyang Zhao, Jinqiao Wang, Xu Zhao, Yi
Wu, Hanqing Lu, et al. Couplenet: Coupling global structure
with local parts for object detection. In ICCV, 2017. 2

859

