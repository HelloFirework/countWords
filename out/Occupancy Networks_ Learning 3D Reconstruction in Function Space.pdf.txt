Occupancy Networks: Learning 3D Reconstruction in Function Space

Lars Mescheder1 Michael Oechsle1,2 Michael Niemeyer1

Sebastian Nowozin3† Andreas Geiger1

1Autonomous Vision Group, MPI for Intelligent Systems and University of T¨ubingen

2ETAS GmbH, Stuttgart

3Google AI Berlin

{firstname.lastname}@tue.mpg.de

nowozin@gmail.com

Abstract

With the advent of deep neural networks, learning-based
approaches for 3D reconstruction have gained popularity.
However, unlike for images, in 3D there is no canonical rep-
resentation which is both computationally and memory ef-
ﬁcient yet allows for representing high-resolution geometry
of arbitrary topology. Many of the state-of-the-art learning-
based 3D reconstruction approaches can hence only repre-
sent very coarse 3D geometry or are limited to a restricted
domain. In this paper, we propose Occupancy Networks,
a new representation for learning-based 3D reconstruction
methods. Occupancy networks implicitly represent the 3D
surface as the continuous decision boundary of a deep neu-
ral network classiﬁer. In contrast to existing approaches,
our representation encodes a description of the 3D output
at inﬁnite resolution without excessive memory footprint.
We validate that our representation can efﬁciently encode
3D structure and can be inferred from various kinds of in-
put. Our experiments demonstrate competitive results, both
qualitatively and quantitatively, for the challenging tasks of
3D reconstruction from single images, noisy point clouds
and coarse discrete voxel grids. We believe that occupancy
networks will become a useful tool in a wide variety of
learning-based 3D tasks.

1. Introduction

Recently, learning-based approaches for 3D reconstruc-
tion have gained popularity [4, 9, 23, 58, 75, 77]. In contrast
to traditional multi-view stereo algorithms, learned models
are able to encode rich prior information about the space of
3D shapes which helps to resolve ambiguities in the input.
While generative models have recently achieved remark-
able successes in generating realistic high resolution im-
ages [36, 47, 72], this success has not yet been replicated
in the 3D domain. In contrast to the 2D domain, the com-

†Part of this work was done while at MSR Cambridge.

(a) Voxel

(b) Point

(c) Mesh

(d) Ours

Figure 1: Overview: Existing 3D representations discretize
the output space differently: (a) spatially in voxel represen-
tations, (b) in terms of predicted points, and (c) in terms of
vertices for mesh representations. In contrast, (d) we pro-
pose to consider the continuous decision boundary of a clas-
siﬁer fθ (e.g., a deep neural network) as a 3D surface which
allows to extract 3D meshes at any resolution.

munity has not yet agreed on a 3D output representation
that is both memory efﬁcient and can be efﬁciently inferred
from data. Existing representations can be broadly cate-
gorized into three categories: voxel-based representations
[4, 19, 43, 58, 64, 69, 75] , point-based representations [1, 17]
and mesh representations [34, 57, 70], see Fig. 1.

Voxel representations are a straightforward generaliza-
tion of pixels to the 3D case. Unfortunately, however, the
memory footprint of voxel representations grows cubically
with resolution, hence limiting na¨ıve implementations to
323 or 643 voxels. While it is possible to reduce the memory
footprint by using data adaptive representations such as oc-
trees [61, 67], this approach leads to complex implementa-
tions and existing data-adaptive algorithms are still limited
to relatively small 2563 voxel grids. Point clouds [1,17] and
meshes [34, 57, 70] have been introduced as alternative rep-
resentations for deep learning, using appropriate loss func-
tions. However, point clouds lack the connectivity structure
of the underlying mesh and hence require additional post-
processing steps to extract 3D geometry from the model.

4460

Existing mesh representations are typically based on de-
forming a template mesh and hence do not allow arbitrary
topologies. Moreover, both approaches are limited in the
number of points/vertices which can be reliably predicted
using a standard feed-forward network.

In this paper1, we propose a novel approach to 3D-
reconstruction based on directly learning the continuous
3D occupancy function (Fig. 1d). Instead of predicting a
voxelized representation at a ﬁxed resolution, we predict
the complete occupancy function with a neural network fθ
which can be evaluated at arbitrary resolution. This dras-
tically reduces the memory footprint during training. At
inference time, we extract the mesh from the learned model
using a simple multi-resolution isosurface extraction algo-
rithm which trivially parallelizes over 3D locations.
In summary, our contributions are as follows:

• We introduce a new representation for 3D geometry

based on learning a continuous 3D mapping.

• We show how this representation can be used for re-

constructing 3D geometry from various input types.

• We experimentally validate that our approach is able
to generate high-quality meshes and demonstrate that
it compares favorably to the state-of-the-art.

2. Related Work

Existing work on learning-based 3D reconstruction can
be broadly categorized by the output representation they
produce as either voxel-based, point-based or mesh-based.

Voxel Representations: Due to their simplicity, voxels are
the most commonly used representation for discriminative
[45, 55, 63] and generative [9, 23, 58, 64, 75, 77] 3D tasks.

Early works have considered the problem of recon-
structing 3D geometry from a single image using 3D con-
volutional neural networks which operate on voxel grids
[9, 68, 77]. Due to memory requirements, however, these
approaches were limited to relatively small 323 voxel grids.
While recent works [74, 76, 79] have applied 3D convolu-
tional neural networks to resolutions up to 1283, this is only
possible with shallow architectures and small batch sizes,
which leads to slow training.

The problem of reconstructing 3D geometry from mul-
tiple input views has been considered in [31, 35, 52].
Ji
et al. [31] and Kar et al. [35] encode the camera parame-
ters together with the input images in a 3D voxel represen-
tation and apply 3D convolutions to reconstruct 3D scenes
from multiple views. Paschalidou et al. [52] introduced an
architecture that predicts voxel occupancies from multiple
images, exploiting multi-view geometry constraints [69].

Other works applied voxel representations to learn gen-
erative models of 3D shapes. Most of these methods are

1Also see [8, 48, 51] for concurrent work that proposes similar ideas.

either based on variational auto-encoders [39, 59] or gener-
ative adversarial networks [25]. These two approaches were
pursued in [4, 58] and [75], respectively.

Due to the high memory requirements of voxel repre-
sentations, recent works have proposed to reconstruct 3D
objects in a multi-resolution fashion [28, 67]. However, the
resulting methods are often complicated to implement and
require multiple passes over the input to generate the ﬁnal
3D model. Furthermore, they are still limited to comparably
small 2563 voxel grids. For achieving sub-voxel precision,
several works [12,42,60] have proposed to predict truncated
signed distance ﬁelds (TSDF) [11] where each point in a
3D grid stores the truncated signed distance to the closest
3D surface point. However, this representation is usually
much harder to learn compared to occupancy representa-
tions as the network must reason about distance functions
in 3D space instead of merely classifying a voxel as occu-
pied or not. Moreover, this representation is still limited by
the resolution of the underlying 3D grid.

Point Representations: An interesting alternative repre-
sentation of 3D geometry is given by 3D point clouds which
are widely used both in the robotics and in the computer
graphics communities. Qi et al. [54, 56] pioneered point
clouds as a representation for discriminative deep learning
tasks. They achieved permutation invariance by applying a
fully connected neural network to each point independently
followed by a global pooling operation. Fan et al. [17] intro-
duced point clouds as an output representation for 3D recon-
struction. However, unlike other representations, this ap-
proach requires additional non-trivial post-processing steps
[3, 6, 37, 38] to generate the ﬁnal 3D mesh.

Mesh Representations: Meshes have ﬁrst been consid-
ered for discriminative 3D classiﬁcation or segmentation
tasks by applying convolutions on the graph spanned by the
mesh’s vertices and edges [5, 27, 71].

More recently, meshes have also been considered as out-
put representation for 3D reconstruction [26,33,41,70]. Un-
fortunately, most of these approaches are prone to generat-
ing self-intersecting meshes. Moreover, they are only able
to generate meshes with simple topology [70], require a
reference template from the same object class [33, 41, 57]
or cannot guarantee closed surfaces [26]. Liao et al. [43]
proposed an end-to-end learnable version of the marching
cubes algorithm [44]. However, their approach is still lim-
ited by the memory requirements of the underlying 3D grid
and hence also restricted to 323 voxel resolution.

In contrast to the aforementioned approaches, our ap-
proach leads to high resolution closed surfaces without self-
intersections and does not require template meshes from the
same object class as input. This idea is related to classical
level set [10, 14, 50] approaches to multi-view 3D recon-
struction [18,24,32,40,53,78]. However, instead of solving

4461

a differential equation, our approach uses deep learning to
obtain a more expressive representation which can be natu-
rally integrated into an end-to-end learning pipeline.

3. Method

In this section, we ﬁrst introduce Occupancy Networks as
a representation of 3D geometry. We then describe how we
can learn a model that infers this representation from vari-
ous forms of input such as point clouds, single images and
low-resolution voxel representations. Lastly, we describe a
technique for extracting high-quality 3D meshes from our
model at test time.

3.1. Occupancy Networks

Ideally, we would like to reason about the occupancy not
only at ﬁxed discrete 3D locations (as in voxel respresenta-
tions) but at every possible 3D point p ∈ R3. We call the
resulting function

o : R3 → {0, 1}

(1)

the occupancy function of the 3D object. Our key insight
is that we can approximate this 3D function with a neu-
ral network that assigns to every location p ∈ R3 an occu-
pancy probability between 0 and 1. Note that this network is
equivalent to a neural network for binary classiﬁcation, ex-
cept that we are interested in the decision boundary which
implicitly represents the object’s surface.

When using such a network for 3D reconstruction of an
object based on observations of that object (e.g., image,
point cloud, etc.), we must condition it on the input. Fortu-
nately, we can make use of the following simple functional
equivalence: a function that takes an observation x ∈ X
as input and has a function from p ∈ R3 to R as output
can be equivalently described by a function that takes a pair
(p, x) ∈ R3 × X as input and outputs a real number. The
latter representation can be simply parameterized by a neu-
ral network fθ that takes a pair (p, x) as input and outputs a
real number which represents the probability of occupancy:

fθ : R3 × X → [0, 1]

(2)

We call this network the Occupancy Network.

3.2. Training

To learn the parameters θ of the neural network fθ(p, x),
we randomly sample points in the 3D bounding volume of
the object under consideration: for the i-th sample in a train-
ing batch we sample K points pij ∈ R3, j = 1, . . . , K. We
then evaluate the mini-batch loss LB at those locations:

LB(θ) =

1
|B|

|B|

K

X

i=1

X

j=1

L(fθ(pij, xi), oij)

(3)

Here, xi is the i’th observation of batch B, oij ≡ o(pij) de-
notes the true occupancy at point pij , and L(·, ·) is a cross-
entropy classiﬁcation loss.

The performance of our method depends on the sam-
pling scheme that we employ for drawing the locations
pij that are used for training.
In Section 4.6 we per-
form a detailed ablation study comparing different sampling
schemes. In practice, we found that sampling uniformly in-
side the bounding box of the object with an additional small
padding yields the best results.

Our 3D representation can also be used for learn-
ing probabilistic latent variable models.
Towards this
goal, we introduce an encoder network gψ(·) that takes
locations pij and occupancies oij as input and pre-
dicts mean µψ and standard deviation σψ of a Gaus-
sian distribution qψ(z|(pij, oij)j=1:K) on latent z ∈ RL
as output. We optimize a lower bound [21, 39, 59]
to the negative log-likelihood of the generative model
p((oij)j=1:K|(pij)j=1:K):

Lgen

B (θ, ψ) =

|B|

K

h

X

X

L(fθ(pij, zi), oij)

1
|B|
+ KL (qψ(z|(pij, oij)j=1:K) k p0(z))i

j=1

i=1

(4)

where KL denotes the KL-divergence, p0(z) is a prior dis-
tribution on the latent variable zi (typically Gaussian) and
zi is sampled according to qψ(zi|(pij, oij)j=1:K).

3.3. Inference

For extracting the isosurface corresponding to a new ob-
servation given a trained occupancy network, we introduce
Multiresolution IsoSurface Extraction (MISE), a hierarchi-
cal isosurface extraction algorithm (Fig. 2). By incremen-
tally building an octree [30, 46, 66, 73], MISE enables us to
extract high resolution meshes from the occupancy network
without densely evaluating all points of a high-dimensional
occupancy grid.

We ﬁrst discretize the volumetric space at an initial reso-
lution and evaluate the occupancy network fθ(p, x) for all p
in this grid. We mark all grid points p as occupied for which
fθ(p, x) is bigger or equal to some threshold2 τ . Next, we
mark all voxels as active for which at least two adjacent
grid points have differing occupancy predictions. These are
the voxels which would intersect the mesh if we applied
the marching cubes algorithm at the current resolution. We
subdivide all active voxels into 8 subvoxels and evaluate all
new grid points which are introduced to the occupancy grid
through this subdivision. We repeat these steps until the
desired ﬁnal resolution is reached. At this ﬁnal resolution,

2The threshold τ is the only hyperparameter of our occupancy network.
It determines the “thickness” of the extracted 3D surface. In our experi-
ments we cross-validate this threshold on a validation set.

4462

in (6) uses second order gradient information and can be ef-
ﬁciently implemented using Double-Backpropagation [15].
Note that this last step removes the discretization arti-
facts of the Marching Cubes approximation and would not
be possible if we had directly predicted a voxel-based rep-
resentation. In addition, our approach also allows to efﬁ-
ciently extract normals for all vertices of our output mesh
by simply backpropagating through the occupancy network.
In total, our inference algorithm requires 3s per mesh.

3.4. Implementation Details

We implemented our occupancy network using a fully-
connected neural network with 5 ResNet blocks [29] and
condition it on the input using conditional batch normal-
ization [13, 16]. We exploit different encoder architectures
depending on the type of input. For single view 3D recon-
struction, we use a ResNet18 architecture [29]. For point
clouds we use the PointNet encoder [54]. For voxelized in-
puts, we use a 3D convolutional neural network [45]. For
unconditional mesh generation, we use a PointNet [54] for
the encoder network gψ. More details are provided in the
supplementary material.

4. Experiments

We conduct three types of experiments to validate the
proposed occupancy networks. First, we analyze the repre-
sentation power of occupancy networks by examining how
well the network can reconstruct complex 3D shapes from a
learned latent embedding. This gives us an upper bound on
the results we can achieve when conditioning our represen-
tation on additional input. Second, we condition our occu-
pancy networks on images, noisy point clouds and low reso-
lution voxel representations, and compare the performance
of our method to several state-of-the-art baselines. Finally,
we examine the generative capabilities of occupancy net-
works by adding an encoder to our model and generating
unconditional samples from this model.4

Baselines: For the single image 3D reconstruction task, we
compare our approach against several state-of-the-art base-
lines which leverage various 3D representations: we eval-
uate against 3D-R2N2 [9] as a voxel-based method, Point
Set Generating Networks (PSGN) [17] as a point-based
technique and Pixel2Mesh [70] as well as AtlasNet [26] as
mesh-based approaches. For point cloud inputs, we adapted
3D-R2N2 and PSGN by changing the encoder. As mesh-
based baseline, we use Deep Marching Cubes (DMC) [43]
which has recently reported state-of-the-art results on this
task. For the voxel super-resolution task we assess the im-
provements wrt. the input.

4The code to reproduce our experiments is available under https://

Figure 2: Multiresolution IsoSurface Extraction: We ﬁrst
mark all points at a given resolution which have already
been evaluated as either occupied (red circles) or unoccu-
pied (cyan diamonds). We then determine all voxels that
have both occupied and unoccupied corners and mark them
as active (light red) and subdivide them into 8 subvoxels
each. Next, we evaluate all new grid points (empty circles)
that have been introduced by the subdivision. The previous
two steps are repeated until the desired output resolution is
reached. Finally we extract the mesh using the marching
cubes algorithm [44], simplify and reﬁne the output mesh
using ﬁrst and second order gradient information.

we apply the Marching Cubes algorithm [44] to extract an
approximate isosurface

{p ∈ R3 | fθ(p, x) = τ }.

(5)

Our algorithm converges to the correct mesh if the occu-
pancy grid at the initial resolution contains points from ev-
ery connected component of both the interior and the ex-
terior of the mesh. It is hence important to take an initial
resolution which is high enough to satisfy this condition.
In practice, we found that an initial resolution of 323 was
sufﬁcient in almost all cases.

The initial mesh extracted by the Marching Cubes algo-
rithm can be further reﬁned.
In a ﬁrst step, we simplify
the mesh using the Fast-Quadric-Mesh-Simpliﬁcation algo-
rithm3 [20]. Finally, we reﬁne the output mesh using ﬁrst
and second order (i.e., gradient) information. Towards this
goal, we sample random points pk from each face of the
output mesh and minimize the loss

K

X

k=1

(fθ(pk, x) − τ )2 + λ(cid:13)(cid:13)(cid:13)(cid:13)

∇pfθ(pk, x)
k∇pfθ(pk, x)k

2

− n(pk)(cid:13)(cid:13)(cid:13)(cid:13)

(6)

where n(pk) denotes the normal vector of the mesh at pk. In
practice, we set λ = 0.01. Minimization of the second term

3https://github.com/sp4cerat/Fast-Quadric-Mesh-Simpliﬁcation

github.com/LMescheder/Occupancy-Networks.

4463

163

323

643

1283

ours

Figure 3: Discrete vs. Continuous. Qualitative comparison
of our continuous representation (right) to voxelizations at
various resolutions (left). Note how our representation en-
codes details which are lost in voxel-based representations.

Dataset: For all of our experiments we use the ShapeNet
[7] subset of Choy et al. [9]. We also use the same vox-
elization, image renderings and train/test split as Choy et al.
Moreover, we subdivide the training set into a training and
a validation set on which we track the loss of our method
and the baselines to determine when to stop training.

In order to generate watertight meshes and to determine
if a point lies in the interior of a mesh (e.g., for measuring
IoU) we use the code provided by Stutz et al. [64]. For a fair
comparison, we sample points from the surface of the wa-
tertight mesh instead of the original model as ground truth
for PSGN [17], Pixel2Mesh [70] and DMC [43]. All of our
evaluations are conducted wrt. these watertight meshes.

Metrics: For evaluation we use the volumetric IoU, the
Chamfer-L1 distance and a normal consistency score.

Volumetric IoU is deﬁned as the quotient of the volume
of the two meshes’ union and the volume of their intersec-
tion. We obtain unbiased estimates of the volume of the in-
tersection and the union by randomly sampling 100k points
from the bounding volume and determining if the points lie
inside our outside the ground truth / predicted mesh.

The Chamfer-L1 distance is deﬁned as the mean of an
accuracy and and a completeness metric. The accuracy met-
ric is deﬁned as the mean distance of points on the output
mesh to their nearest neighbors on the ground truth mesh.
The completeness metric is deﬁned similarly, but in oppo-
site direction. We estimate both distances efﬁciently by ran-
domly sampling 100k points from both meshes and using
a KD-tree to estimate the corresponding distances. Like
Fan et al. [17] we use 1/10 times the maximal edge length
of the current object’s bounding box as unit 1.

Finally, to measure how well the methods can capture
higher order information, we deﬁne a normal consistency
score as the mean absolute dot product of the normals in one
mesh and the normals at the corresponding nearest neigh-
bors in the other mesh.

4.1. Representation Power

In our ﬁrst experiment, we investigate how well occu-
pancy networks represent 3D geometry, independent of the
inaccuracies of the input encoding. The question we try
to answer in this experiment is whether our network can

Figure 4: IoU vs. Resolution. This plot shows the IoU
of a voxelization to the ground truth mesh (solid blue line)
in comparison to our continuous representation (solid or-
ange line) as well as the number of parameters per model
needed for the two representations (dashed lines). Note how
our representation leads to larger IoU wrt. the ground truth
mesh compared to a low-resolution voxel representation. At
the same time, the number of parameters of a voxel repre-
sentation grows cubically with the resolution, whereas the
number of parameters of occupancy networks is indepen-
dent of the resolution.

learn a memory efﬁcient representation of 3D shapes while
at the same time preserving as many details as possible.
This gives us an estimate of the representational capacity
of our model and an upper bound on the performance we
may expect when conditioning our model on additional in-
put. Similarly to [67], we embed each training sample in a
512 dimensional latent space and train our neural network
to reconstruct the 3D shape from this embedding.

We apply our method to the training split of the “chair”
category of the ShapeNet dataset. This subset is challeng-
ing to represent as it is highly varied and many models con-
tain high-frequency details. Since we are only interested
in reconstructing the training data, we do not use separate
validation and test sets for this experiment.

For evaluation, we measure the volumetric IoU to the
ground truth mesh. Quantitative results and a comparison
to voxel representations at various resolutions are shown
in Fig. 4. We see that the Occupancy Network (ONet) is
able to faithfully represent the entire dataset with a high
mean IoU of 0.89 while a low-resolution voxel represen-
tation is not able to represent the meshes accurately. At the
same time, the occupancy network is able to encode all 4746
training samples with as little as 6M parameters, indepen-
dently of the resolution. In contrast, the memory require-
ments of a voxel representation grow cubically with reso-
lution. Qualitative results are shown in Fig. 3. We observe
that the occupancy network enables us to represent details
of the 3D geometry which are lost in a low-resolution vox-
elization.

4464

Input

3D-R2N2

PSGN Pix2Mesh AtlasNet

Ours

Figure 5: Single Image 3D Reconstruction. The input im-
age is shown in the ﬁrst column, the other columns show
the results for our method compared to various baselines.

4.2. Single Image 3D Reconstruction

In our second experiment, we condition the occupancy
network on an additional view of the object from a random
camera location. The goal of this experiment is to eval-
uate how well occupancy functions can be inferred from
complex input. While we train and test our method on the
ShapeNet dataset, we also present qualitative results for the
KITTI [22] and the Online Products dataset [49].

ShapeNet:
In this experiment, we use a ResNet-18 image
encoder, which was pretrained on the ImageNet dataset. For
a fair comparison, we use the same image encoder for both
3D-R2N2 and PSGN5. For PSGN we use a fully connected
decoder with 4 layers and 512 hidden units in each layer.
The last layer projects the hidden representation to a 3072
dimensional vector which we reshape into 1024 3D points.
As we use only a single input view, we remove the recur-
rent network in 3D-R2N2. We reimplemented the method
of [70] in PyTorch, closely following the Tensorﬂow imple-
mentation provided by the authors. For the method of [26],
we use the code and pretrained model from the authors6.

For all methods, we track the loss and other metrics on
the validation set and stop training as soon as the target met-
ric reaches its optimum. For 3D-R2N2 and our method
we use the IoU to the ground truth mesh as target metric,
for PSGN and Pixel2Mesh we use the Chamfer distance to
the ground truth mesh as target metric. To extract the ﬁnal
mesh, we use a threshold of 0.4 for 3D-R2N2 as suggested
in the original publication [9]. To choose the threshold pa-
rameter τ for our method, we perform grid search on the
validation set (see supplementary) and found that τ = 0.2
yields a good trade-off between accuracy and completeness.
Qualitative results from our model and the baselines are
shown in Fig. 5. We observe that all methods are able to
capture the 3D geometry of the input image. However,
3D-R2N2 produces a very coarse representation and hence
lacks details.
In contrast, PSGN produces a high-ﬁdelity
output, but lacks connectivity. As a result, PSGN requires
additional lossy post-processing steps to produce a ﬁnal
mesh7. Pixel2Mesh is able to create compelling meshes,
but often misses holes in the presence of more complicated
topologies. Such topologies are frequent, for example, for
the “chairs“ category in the ShapeNet dataset. Similarly,
AtlasNet captures the geometry well, but produces artifacts
in form of self-intersections and overlapping patches.

In contrast, our method is able to capture complex
topologies, produces closed meshes and preserves most of
the details. Please see the supplementary material for addi-
tional high resolution results and failure cases.

Quantitative results are shown in Table 1. We observe
that our method achieves the highest IoU and normal con-
sistency to the ground truth mesh. Surprisingly, while not
trained wrt. Chamfer distance as PSGN, Pixel2Mesh or At-
lasNet, our method also achieves good results for this met-
ric. Note that it is not possible to evaluate the IoU for PSGN
or AtlasNet, as they do not yield watertight meshes.

Real Data: To test how well our model generalizes to real
data, we apply our network to the KITTI [22] and Online
Products datasets [49]. To capture the variety in viewpoints
of KITTI and Online Products, we rerendered all ShapeNet
objects with random camera locations and retrained our net-
work for this task.

For the KITTI dataset, we additionally use the instance
masks provided in [2] to mask and crop car regions. We
then feed these images into our neural network to predict
the occupancy function. Some selected qualitative results
are shown in Fig. 6a. Despite only trained on synthetic data,
we observe that our method is also able to generate realistic
reconstructions in this challenging setting.

For the Online Products dataset, we apply the same pre-
trained model. Several qualitative results are shown in
Fig. 6b. Again, we observe that our method generalizes rea-

5See supplementary for a comparison to the original architectures.
6https://github.com/ThibaultGROUEIX/AtlasNet

7See supplementary material for meshing results.

4465

3D-R2N2

PSGN Pix2Mesh AtlasNet ONet

3D-R2N2

PSGN Pix2Mesh AtlasNet ONet

3D-R2N2

PSGN Pix2Mesh AtlasNet ONet

IoU

Chamfer-L1

Normal Consistency

category

airplane
bench
cabinet
car
chair
display
lamp
loudspeaker
riﬂe
sofa
table
telephone
vessel

mean

0.426
0.373
0.667
0.661
0.439
0.440
0.281
0.611
0.375
0.626
0.420
0.611
0.482

0.493

-
-
-
-
-
-
-
-
-
-
-
-
-

-

0.420
0.323
0.664
0.552
0.396
0.490
0.323
0.599
0.402
0.613
0.395
0.661
0.397

0.480

-
-
-
-
-
-
-
-
-
-
-
-
-

-

0.571
0.485
0.733
0.737
0.501
0.471
0.371
0.647
0.474
0.680
0.506
0.720
0.530

0.571

0.227
0.194
0.217
0.213
0.270
0.314
0.778
0.318
0.183
0.229
0.239
0.195
0.238

0.278

0.137
0.181
0.215
0.169
0.247
0.284
0.314
0.316
0.134
0.224
0.222
0.161
0.188

0.215

0.187
0.201
0.196
0.180
0.265
0.239
0.308
0.285
0.164
0.212
0.218
0.149
0.212

0.216

0.104
0.138
0.175
0.141
0.209
0.198
0.305
0.245
0.115
0.177
0.190
0.128
0.151

0.147
0.155
0.167
0.159
0.228
0.278
0.479
0.300
0.141
0.194
0.189
0.140
0.218

0.175

0.215

0.629
0.678
0.782
0.714
0.663
0.720
0.560
0.711
0.670
0.731
0.732
0.817
0.629

0.695

-
-
-
-
-
-
-
-
-
-
-
-
-

-

0.759
0.732
0.834
0.756
0.746
0.830
0.666
0.782
0.718
0.820
0.784
0.907
0.699

0.772

0.836
0.779
0.850
0.836
0.791
0.858
0.694
0.825
0.725
0.840
0.832
0.923
0.756

0.840
0.813
0.879
0.852
0.823
0.854
0.731
0.832
0.766
0.863
0.858
0.935
0.794

0.811

0.834

Table 1: Single Image 3D Reconstruction. This table shows a numerical comparison of our approach and the baselines for
single image 3D reconstruction on the ShapeNet dataset. We measure the IoU, Chamfer-L1 distance and Normal Consistency
for various methods wrt. the ground truth mesh. Note that in contrast to prior work, we compute the IoU wrt. the high-
resolution mesh and not a coarse voxel representation. All methods apart from AtlasNet [26] are evaluated on the test split by
Choy et al. [9]. Since AtlasNet uses a pretrained model, we evaluate it on the intersection of the test splits from [9] and [26].

Input Reconstruction

Input Reconstruction

(a) KITTI

(b) Online Products

Figure 6: Qualitative results for real data. We applied our
trained model to the KITTI and Online Products datasets.
Despite only trained on synthetic data, our model general-
izes reasonably well to real data.

sonably well to real images despite being trained solely on
synthetic data. An additional quantitative evaluation on the
Pix3D dataset [65] can be found in the supplementary.

4.3. Point Cloud Completion

As a second conditional task, we apply our method to
the problem of reconstructing the mesh from noisy point
clouds. Towards this goal, we subsample 300 points from
the surface of each of the (watertight) ShapeNet models and
apply noise using a Gaussian distribution with zero mean
and standard deviation 0.05 to the point clouds.

Again, we measure both the IoU and Chamfer-L1 dis-
tance wrt. the ground truth mesh. The results are shown in
Table 2. We observe that our method achieves the highest

IoU

Chamfer-L1 Normal Consistency

3D-R2N2
PSGN
DMC
ONet

0.565

-

0.674
0.778

0.169
0.202
0.117
0.079

0.719

-

0.848
0.895

Table 2: 3D Reconstruction from Point Clouds. This ta-
ble shows a numerical comparison of our approach wrt. the
baselines for 3D reconstruction from point clouds on the
ShapeNet dataset. We measure IoU, Chamfer-L1 distance
and Normal Consistency wrt. the ground truth mesh.

IoU and normal consistency as well as the lowest Chamfer-
L1 distance. Note that all numbers are signiﬁcantly better
than for the single image 3D reconstruction task. This can
be explained by the fact that this task is much easier for the
recognition model, as there is less ambiguity and the model
only has to ﬁll in the gaps.

4.4. Voxel Super Resolution

As a ﬁnal conditional task, we apply occupancy net-
works to 3D super-resolution [62]. Here, the task is to re-
construct a high-resolution mesh from a coarse 323 vox-
elization of this mesh.

The results are shown in Table 3. We observe that our
model considerably improves IoU, Chamfer-L1 distance
and normal consistency compared to the coarse input mesh.
Please see the supplementary for qualitative results.

4.5. Unconditional Mesh Generation

Finally, we apply our occupancy network to uncondi-
tional mesh generation, training it separately on four cat-
egories of the ShapeNet dataset in an unsupervised fashion.
Our goal is to explore how well our model can represent

4466

IoU

Chamfer-L1 Normal Consistency

IoU

Chamfer-L1 Normal Consistency

Input
ONet

0.631
0.703

0.136
0.109

0.810
0.879

Table 3: Voxel Super-Resolution. This table shows a nu-
merical comparison of the output of our approach in com-
parison to the input on the ShapeNet dataset.

Uniform
Uniform (64)
Equal
Surface

0.571
0.554
0.475
0.536

0.215
0.256
0.291
0.254

0.834
0.829
0.835
0.822

(a) Inﬂuence of Sampling Strategy

IoU

Chamfer-L1 Normal Consistency

Full model
No ResNet
No CBN

0.571
0.559
0.522

0.215
0.243
0.301

0.834
0.831
0.806

(b) Inﬂuence of Occupancy Network Architecture

Table 4: Ablation Study. When we vary the sampling strat-
egy, we observe that uniform sampling in the bounding vol-
ume performs best. Similarly, when we vary the architec-
ture, we ﬁnd that our ResNet architecture with conditional
batch normalization yields the best results.

Figure 7: Unconditional 3D Samples. Random samples
of our unsupervised models trained on the categories “car“,
“airplane“, “sofa“ and “chair“ of the ShapeNet dataset. We
see that our models are able to capture the distribution of
3D objects and produce compelling new samples.

serve thickening artifacts in the model’s output. Moreover,
we ﬁnd that reducing the number of sampling points from
2048 to 64 still leads to good performance, although the
model does not perform as well as a model trained with
2048 sampling points.

the latent space of 3D models. Some samples are shown
in Figure 7. Indeed, we ﬁnd that our model can generate
compelling new models. In the supplementary material we
show interpolations in latent space for our model.

4.6. Ablation Study

In this section, we test how the various components of
our model affect its performance on the single-image 3D-
reconstruction task.

Effect of sampling strategy First, we examine how the
sampling strategy affects the performance of our ﬁnal
model. We try three different sampling strategies: (i) sam-
pling 2048 points uniformly in the bounding volume of the
ground truth mesh (uniform sampling), (ii) sampling 1024
points inside and 1024 points outside mesh (equal sam-
pling) and (iii) sampling 1024 points uniformly and 1024
points on the surface of the mesh plus some Gaussian noise
with standard deviation 0.1 (surface sampling). We also ex-
amine the effect of the number of sampling points by de-
creasing this number from 2048 to 64.

The results are shown in Table 4a. To our surprise, we
ﬁnd that uniform, the simplest sampling strategy, works
best. We explain this by the fact that other sampling strate-
gies introduce bias to the model: for example, when sam-
pling an equal number of points inside and outside the mesh,
we implicitly tell the model that every object has a volume
of 0.5. Indeed, when using this sampling strategy, we ob-

Effect of architecture To test the effect of the various
components of our architecture, we test two variations: (i)
we remove the conditional batch normalization and replace
it with a linear layer in the beginning of the network that
projects the encoding of the input to the required hidden
dimension and (ii) we remove all ResNet blocks in the de-
coder and replace them with linear blocks. The results are
presented in Table 4b. We ﬁnd that both components are
helpful to achieve good performance.

5. Conclusion

In this paper, we introduced occupancy networks, a new
representation for 3D geometry. In contrast to existing rep-
resentations, occupancy networks are not constrained by the
discretization of the 3D space and can hence be used to rep-
resent realistic high-resolution meshes.

Our experiments demonstrate that occupancy networks
are very expressive and can be used effectively both for su-
pervised and unsupervised learning. We hence believe that
occupancy networks are a useful tool which can be applied
to a wide variety of 3D tasks.

Acknowledgements

This work was supported by the Intel Network on Intel-
ligent Systems and by Microsoft Research through its PhD
Scholarship Programme.

4467

References

[1] P. Achlioptas, O. Diamanti, I. Mitliagkas, and L. J. Guibas.
Learning representations and generative models for 3D point
clouds. In Proc. of the International Conf. on Machine learn-
ing (ICML), 2018. 1

[2] H. A. Alhaija, S. K. Mustikovela, L. Mescheder, A. Geiger,
and C. Rother. Augmented reality meets deep learning for
car instance segmentation in urban scenes. In Proc. of the
British Machine Vision Conf. (BMVC), 2017. 6

[3] F. Bernardini, J. Mittleman, H. Rushmeier, C. Silva, and
The ball-pivoting algorithm for surface re-
IEEE Trans. on Visualization and Computer

G. Taubin.
construction.
Graphics (VCG), 5(4):349–359, 1999. 2

[4] A. Brock, T. Lim, J. M. Ritchie, and N. Weston. Generative
and discriminative voxel modeling with convolutional neural
networks. arXiv.org, 1608.04236, 2016. 1, 2

[5] M. M. Bronstein, J. Bruna, Y. LeCun, A. Szlam, and P. Van-
dergheynst. Geometric deep learning: Going beyond eu-
clidean data.
Signal Processing Magazine, 34(4):18–42,
2017. 2

[6] F. Calakli and G. Taubin.

SSD: smooth signed dis-
tance surface reconstruction. Computer Graphics Forum,
30(7):1993–2002, 2011. 2

[7] A. X. Chang, T. A. Funkhouser, L. J. Guibas, P. Hanrahan,
Q. Huang, Z. Li, S. Savarese, M. Savva, S. Song, H. Su,
J. Xiao, L. Yi, and F. Yu. ShapeNet: An information-rich 3D
model repository. arXiv.org, 1512.03012, 2015. 5

[8] Z. Chen and H. Zhang. Learning implicit ﬁelds for generative
shape modeling. Proc. IEEE Conf. on Computer Vision and
Pattern Recognition (CVPR), 2019. 2

[9] C. B. Choy, D. Xu, J. Gwak, K. Chen, and S. Savarese. 3D-
R2N2: A uniﬁed approach for single and multi-view 3D ob-
ject reconstruction. In Proc. of the European Conf. on Com-
puter Vision (ECCV), 2016. 1, 2, 4, 5, 6, 7

[10] D. Cremers, M. Rousson, and R. Deriche. A review of statis-
tical approaches to level set segmentation: integrating color,
texture, motion and shape. International journal of computer
vision, 72(2):195–215, 2007. 2

[11] B. Curless and M. Levoy. A volumetric method for build-
ing complex models from range images. In ACM Trans. on
Graphics (SIGGRAPH), 1996. 2

[12] A. Dai, C. R. Qi, and M. Nießner. Shape completion using
3D-encoder-predictor CNNs and shape synthesis. In Proc.
IEEE Conf. on Computer Vision and Pattern Recognition
(CVPR), 2017. 2

[13] H. de Vries, F. Strub, J. Mary, H. Larochelle, O. Pietquin, and
A. C. Courville. Modulating early visual processing by lan-
guage. In Advances in Neural Information Processing Sys-
tems (NIPS), 2017. 4

[14] A. Dervieux and F. Thomasset. A ﬁnite element method for
the simulation of a rayleigh-taylor instability.
In Approxi-
mation methods for Navier-Stokes problems, pages 145–158.
Springer, 1980. 2

[16] V. Dumoulin,

I. Belghazi, B. Poole, O. Mastropietro,
A. Lamb, M. Arjovsky, and A. Courville. Adversarially
learned inference.
In Proc. of the International Conf. on
Learning Representations (ICLR), 2017. 4

[17] H. Fan, H. Su, and L. J. Guibas. A point set generation net-
work for 3D object reconstruction from a single image. In
Proc. IEEE Conf. on Computer Vision and Pattern Recogni-
tion (CVPR), 2017. 1, 2, 4, 5

[18] O. Faugeras and R. Keriven. Level set methods and the stereo
problem. In International Conference on Scale-Space Theo-
ries in Computer Vision, 1997. 2

[19] M. Gadelha, S. Maji, and R. Wang. 3D shape induction from
2d views of multiple objects. In Proc. of the International
Conf. on 3D Vision (3DV), 2017. 1

[20] M. Garland and P. S. Heckbert. Simplifying surfaces with
color and texture using quadric error metrics. In Visualiza-
tion’98. Proceedings, pages 263–269. IEEE, 1998. 4

[21] M. Garnelo, J. Schwarz, D. Rosenbaum, F. Viola, D. J.
Rezende, S. M. A. Eslami, and Y. W. Teh. Neural processes.
arXiv.org, 1807.01622, 2018. 3

[22] A. Geiger, P. Lenz, C. Stiller, and R. Urtasun. Vision
International Journal

meets robotics: The KITTI dataset.
of Robotics Research (IJRR), 32(11):1231–1237, 2013. 6

[23] R. Girdhar, D. F. Fouhey, M. Rodriguez, and A. Gupta.
Learning a predictable and generative vector representation
for objects.
In Proc. of the European Conf. on Computer
Vision (ECCV), 2016. 1, 2

[24] B. Goldluecke and M. Magnor. Space-time isosurface evo-
lution for temporally coherent 3d reconstruction.
In Proc.
IEEE Conf. on Computer Vision and Pattern Recognition
(CVPR), 2004. 2

[25] I. J. Goodfellow, J. Pouget-Abadie, M. Mirza, B. Xu,
D. Warde-Farley, S. Ozair, A. C. Courville, and Y. Bengio.
Generative adversarial nets. In Advances in Neural Informa-
tion Processing Systems (NIPS), 2014. 2

[26] T. Groueix, M. Fisher, V. G. Kim, B. Russell, and M. Aubry.
AtlasNet: A papier-mˆach´e approach to learning 3d surface
generation.
In Proc. IEEE Conf. on Computer Vision and
Pattern Recognition (CVPR), 2018. 2, 4, 6, 7

[27] K. Guo, D. Zou, and X. Chen. 3D mesh labeling via deep
convolutional neural networks. In ACM Trans. on Graphics
(SIGGRAPH), 2015. 2

[28] C. H¨ane, S. Tulsiani, and J. Malik. Hierarchical surface pre-
diction for 3D object reconstruction. In Proc. of the Interna-
tional Conf. on 3D Vision (3DV), 2017. 2

[29] K. He, X. Zhang, S. Ren, and J. Sun. Deep residual learning
In Proc. IEEE Conf. on Computer

for image recognition.
Vision and Pattern Recognition (CVPR), 2016. 4

[30] C. L. Jackins and S. L. Tanimoto. Oct-trees and their use in
representing three-dimensional objects. Computer Graphics
and Image Processing, 14(3):249–270, 1980. 3

[31] M. Ji, J. Gall, H. Zheng, Y. Liu, and L. Fang. SurfaceNet:
an end-to-end 3D neural network for multiview stereopsis.
In Proc. of the IEEE International Conf. on Computer Vision
(ICCV), 2017. 2

[15] H. Drucker and Y. Le Cun. Improving generalization perfor-
mance using double backpropagation. IEEE Trans. on Neu-
ral Networks, 3(6):991–997, 1992. 4

[32] H. Jin, D. Cremers, A. J. Yezzi, and S. Soatto. Shedding
light on stereoscopic segmentation. In Proc. IEEE Conf. on
Computer Vision and Pattern Recognition (CVPR), 2004. 2

4468

[33] A. Kanazawa, M. J. Black, D. W. Jacobs, and J. Malik. End-
to-end recovery of human shape and pose.
In Proc. IEEE
Conf. on Computer Vision and Pattern Recognition (CVPR),
2018. 2

[34] A. Kanazawa, S. Tulsiani, A. A. Efros, and J. Malik. Learn-
ing category-speciﬁc mesh reconstruction from image col-
lections. In Proc. of the European Conf. on Computer Vision
(ECCV), 2018. 1

[35] A. Kar, C. H¨ane, and J. Malik. Learning a multi-view stereo
machine. In Advances in Neural Information Processing Sys-
tems (NIPS), 2017. 2

[36] T. Karras, T. Aila, S. Laine, and J. Lehtinen. Progressive
growing of GANs for improved quality, stability, and varia-
tion. In Proc. of the International Conf. on Learning Repre-
sentations (ICLR), 2018. 1

[37] M. M. Kazhdan, M. Bolitho, and H. Hoppe. Poisson surface
In Eurographics Symposium on Geometry

reconstruction.
Processing (SGP), 2006. 2

[38] M. M. Kazhdan and H. Hoppe. Screened poisson surface
reconstruction. ACM Trans. on Graphics (SIGGRAPH),
32(3):29, 2013. 2

[39] D. P. Kingma and M. Welling. Auto-encoding variational
bayes. In Proc. of the International Conf. on Learning Rep-
resentations (ICLR), 2014. 2, 3

[40] K. Kolev, T. Brox, and D. Cremers. Robust variational seg-
mentation of 3d objects from multiple views. In Joint Pattern
Recognition Symposium, 2006. 2

[41] C. Kong, C.-H. Lin, and S. Lucey. Using locally correspond-
ing CAD models for dense 3D reconstructions from a single
image. In Proc. IEEE Conf. on Computer Vision and Pattern
Recognition (CVPR), 2017. 2

[42] L. Ladicky, O. Saurer, S. Jeong, F. Maninchedda, and
M. Pollefeys. From point clouds to mesh using regression.
In Proc. of the IEEE International Conf. on Computer Vision
(ICCV), 2017. 2

[43] Y. Liao, S. Donne, and A. Geiger. Deep marching cubes:
Learning explicit surface representations.
In Proc. IEEE
Conf. on Computer Vision and Pattern Recognition (CVPR),
2018. 1, 2, 4, 5

[44] W. E. Lorensen and H. E. Cline. Marching cubes: A high
resolution 3D surface construction algorithm. In ACM Trans.
on Graphics (SIGGRAPH), 1987. 2, 4

[45] D. Maturana and S. Scherer. Voxnet: A 3D convolutional
neural network for real-time object recognition.
In Proc.
IEEE International Conf. on Intelligent Robots and Systems
(IROS), 2015. 2, 4

[46] D. Meagher. Geometric modeling using octree encoding.
Computer graphics and image processing, 19(2):129–147,
1982. 3

[47] L. Mescheder, A. Geiger, and S. Nowozin. Which training
In Proc. of the

methods for GANs do actually converge?
International Conf. on Machine learning (ICML), 2018. 1

[48] M. Michalkiewicz, J. K. Pontes, D. Jack, M. Baktashmot-
lagh, and A. Eriksson. Deep level sets: Implicit surface rep-
resentations for 3d shape inference. arXiv.org, 2019. 2

Proc. IEEE Conf. on Computer Vision and Pattern Recogni-
tion (CVPR), 2016. 6

[50] S. Osher and J. A. Sethian.

Fronts propagating with
curvature-dependent speed: algorithms based on hamilton-
jacobi formulations.
Journal of computational physics,
79(1):12–49, 1988. 2

[51] J. J. Park, P. Florence, J. Straub, R. Newcombe, and S. Love-
grove. DeepSDF: Learning continuous signed distance func-
tions for shape representation. arXiv.org, 2019. 2

[52] D. Paschalidou, A. O. Ulusoy, C. Schmitt, L. van Gool, and
A. Geiger. Raynet: Learning volumetric 3D reconstruction
with ray potentials. In Proc. IEEE Conf. on Computer Vision
and Pattern Recognition (CVPR), 2018. 2

[53] J.-P. Pons, R. Keriven, and O. Faugeras. Modelling dynamic
scenes by registering multi-view image sequences. In Proc.
IEEE Conf. on Computer Vision and Pattern Recognition
(CVPR), 2005. 2

[54] C. R. Qi, H. Su, K. Mo, and L. J. Guibas. PointNet: Deep
learning on point sets for 3D classiﬁcation and segmentation.
In Proc. IEEE Conf. on Computer Vision and Pattern Recog-
nition (CVPR), 2017. 2, 4

[55] C. R. Qi, H. Su, M. Nießner, A. Dai, M. Yan, and L. Guibas.
Volumetric and multi-view CNNs for object classiﬁcation on
3D data. In Proc. IEEE Conf. on Computer Vision and Pat-
tern Recognition (CVPR), 2016. 2

[56] C. R. Qi, L. Yi, H. Su, and L. J. Guibas. PointNet++:
Deep hierarchical feature learning on point sets in a metric
space. In Advances in Neural Information Processing Sys-
tems (NIPS), 2017. 2

[57] A. Ranjan, T. Bolkart, S. Sanyal, and M. J. Black. Generating
3D faces using convolutional mesh autoencoders. In Proc. of
the European Conf. on Computer Vision (ECCV), 2018. 1, 2
[58] D. J. Rezende, S. M. A. Eslami, S. Mohamed, P. Battaglia,
M. Jaderberg, and N. Heess. Unsupervised learning of 3D
structure from images. In Advances in Neural Information
Processing Systems (NIPS), 2016. 1, 2

[59] D. J. Rezende, S. Mohamed, and D. Wierstra. Stochastic
backpropagation and approximate inference in deep genera-
tive models. In Proc. of the International Conf. on Machine
learning (ICML), 2014. 2, 3

[60] G. Riegler, A. O. Ulusoy, H. Bischof, and A. Geiger. Oct-
NetFusion: Learning depth fusion from data. In Proc. of the
International Conf. on 3D Vision (3DV), 2017. 2

[61] G. Riegler, A. O. Ulusoy, and A. Geiger. OctNet: Learning
deep 3D representations at high resolutions. In Proc. IEEE
Conf. on Computer Vision and Pattern Recognition (CVPR),
2017. 1

[62] E. Smith, S. Fujimoto, and D. Meger. Multi-view silhouette
and depth decomposition for high resolution 3d object rep-
resentation. In Advances in Neural Information Processing
Systems (NIPS). 2018. 7

[63] S. Song and J. Xiao. Deep sliding shapes for amodal 3D
object detection in RGB-D images.
In Proc. IEEE Conf.
on Computer Vision and Pattern Recognition (CVPR), June
2016. 2

[49] H. Oh Song, Y. Xiang, S. Jegelka, and S. Savarese. Deep
metric learning via lifted structured feature embedding. In

[64] D. Stutz and A. Geiger. Learning 3D shape completion from
laser scan data with weak supervision. In Proc. IEEE Conf.

4469

on Computer Vision and Pattern Recognition (CVPR), 2018.
1, 2, 5

[65] X. Sun, J. Wu, X. Zhang, Z. Zhang, C. Zhang, T. Xue, J. B.
Tenenbaum, and W. T. Freeman. Pix3d: Dataset and methods
for single-image 3d shape modeling. In Proc. IEEE Conf. on
Computer Vision and Pattern Recognition (CVPR), 2018. 7
[66] R. Szeliski. Rapid octree construction from image se-
quences. CVGIP: Image understanding, 58(1):23–32, 1993.
3

[67] M. Tatarchenko, A. Dosovitskiy, and T. Brox. Octree gen-
erating networks: Efﬁcient convolutional architectures for
high-resolution 3D outputs.
In Proc. of the IEEE Interna-
tional Conf. on Computer Vision (ICCV), 2017. 1, 2, 5

[68] S. Tulsiani, T. Zhou, A. A. Efros, and J. Malik. Multi-view
supervision for single-view reconstruction via differentiable
ray consistency.
In Proc. IEEE Conf. on Computer Vision
and Pattern Recognition (CVPR), 2017. 2

[69] A. O. Ulusoy, A. Geiger, and M. J. Black. Towards prob-
In
abilistic volumetric reconstruction using ray potentials.
Proc. of the International Conf. on 3D Vision (3DV), 2015.
1, 2

[70] N. Wang, Y. Zhang, Z. Li, Y. Fu, W. Liu, and Y.-G. Jiang.
Pixel2Mesh: Generating 3D mesh models from single RGB
images. In Proc. of the European Conf. on Computer Vision
(ECCV), 2018. 1, 2, 4, 5, 6

[71] P. Wang, Y. Gan, Y. Zhang, and P. Shui. 3D shape segmen-
tation via shape fully convolutional networks. Computers &
Graphics, 1702.08675, 2017. 2

[72] T.-C. Wang, M.-Y. Liu, J.-Y. Zhu, A. Tao, J. Kautz, and
B. Catanzaro. High-resolution image synthesis and semantic
manipulation with conditional GANs. In Proc. IEEE Conf.
on Computer Vision and Pattern Recognition (CVPR), 2018.
1

[73] K.-Y. Wong and R. Cipolla. Structure and motion from sil-
houettes. In Proc. of the IEEE International Conf. on Com-
puter Vision (ICCV), 2001. 3

[74] J. Wu, Y. Wang, T. Xue, X. Sun, B. Freeman, and J. Tenen-
baum. MarrNet: 3D shape reconstruction via 2.5D sketches.
In Advances in Neural Information Processing Systems
(NIPS), 2017. 2

[75] J. Wu, C. Zhang, T. Xue, B. Freeman, and J. Tenenbaum.
Learning a probabilistic latent space of object shapes via 3D
generative-adversarial modeling. In Advances in Neural In-
formation Processing Systems (NIPS), 2016. 1, 2

[76] J. Wu, C. Zhang, X. Zhang, Z. Zhang, W. T. Freeman, and
J. B. Tenenbaum. Learning shape priors for single-view 3D
completion and reconstruction.
In Proc. of the European
Conf. on Computer Vision (ECCV), 2018. 2

[77] Z. Wu, S. Song, A. Khosla, F. Yu, L. Zhang, X. Tang, and
J. Xiao. 3D ShapeNets: A deep representation for volumetric
shapes. In Proc. IEEE Conf. on Computer Vision and Pattern
Recognition (CVPR), 2015. 1, 2

[78] A. Yezzi and S. Soatto. Stereoscopic segmentation. Interna-

tional Journal of Computer Vision, 53(1):31–43, 2003. 2

[79] X. Zhang, Z. Zhang, C. Zhang, J. B. Tenenbaum, W. T. Free-
man, and J. Wu. Learning to reconstruct shapes from unseen
classes. In Advances in Neural Information Processing Sys-
tems (NIPS), 2018. 2

4470

