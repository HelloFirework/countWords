Point Cloud Oversegmentation with Graph-Structured Deep Metric Learning

Univ. Paris-Est, IGN-ENSG, LaSTIG, 1STRUDEL, 2ACTE, Saint-Mandé, France

Loic Landrieu1, Mohamed Boussaha2

loic.landrieu@ign.fr,mohamed.boussaha@ign.fr

Abstract

We propose a new supervized learning framework for
oversegmenting 3D point clouds into superpoints. We cast
this problem as learning deep embeddings of the local ge-
ometry and radiometry of 3D points, such that the border of
objects presents high contrasts. The embeddings are com-
puted using a lightweight neural network operating on the
points’ local neighborhood. Finally, we formulate point
cloud oversegmentation as a graph partition problem with
respect to the learned embeddings.

This new approach allows us to set a new state-of-the-art
in point cloud oversegmentation by a signiﬁcant margin, on
a dense indoor dataset (S3DIS) and a sparse outdoor one
(vKITTI). Our best solution requires over ﬁve times fewer
superpoints to reach similar performance than previously
published methods on S3DIS. Furthermore, we show that
our framework can be used to improve superpoint-based
semantic segmentation algorithms, setting a new state-of-
the-art for this task as well.

1. Introduction

The interest of segmenting point clouds into sets
of points known as superpoints—the 3D equivalent of
superpixels— as a preprocessing step to their analysis has
been extensively demonstrated [27, 39, 35, 7, 50]. However,
these unsupervized methods rely on the assumption that
segments which are geometrically and/or radiometrically
homogeneous are also semantically homogeneous. This as-
sertion should be challenged, especially since the quality of
any further analysis is limited by the quality of the initial
oversegmentation. Our objective in this paper is to formu-
late a supervized framework for oversegmentating 3D point
clouds into semantically pure superpoints in order to facili-
tate their semantic segmentation.

Although superpixel-based methods and deep learning
have both been around for a long time in computer vision,
convolutional neural networks have only recently been used
for superpixel oversegmentation. Notably, [32] introduced
a loss function emulating oversegmentation metrics, and

which is compatible with graph-based clustering methods.
[24] propose a fully differentiable version of the SLIC su-
perpixel algorithm [1], allowing for end-to-end training of
spatial clustering methods. Both approaches have shown
promising results, displaying signiﬁcant improvement upon
methods relying on handcrafted descriptors. In this paper,
we build upon these ideas, albeit in the 3D setting.

We propose formulating point cloud oversegmentation as
a deep metric learning problem structured by an adjacency
graph deﬁned on an input 3D point cloud. We introduce
the graph-structured contrastive loss, a loss function which
learns to embed 3D points homogeneously within objects
and with high contrast at their interface. This loss can be
adapted to the non-differentiable task of oversegmentation
by using our cross-partition weighting strategy. The points’
embeddings themselves are computed from the points’ local
geometry and radiometry by a lightweight model inspired
from PointNet [36] and called Local Point Embedder (LPE).
Finally, the superpoints are deﬁned as a piecewise-constant
approximation of the learned embedding in the adjacency
graph, in the manner of [17].

Furthermore, we deﬁne the end-goal of our point cloud
oversegmentation as assisting semantic segmentation meth-
ods by providing semantically pure superpoints. We show
that our approach can be integrated with the superpoint
graph approach of [27] to signiﬁcantly improve the partition
step, and consequently the resulting semantic segmentation.
The contributions of this paper are as follows:

• We present the ﬁrst supervized framework for 3D point

cloud oversegmentation;

• We introduce the graph-structured contrastive loss,
which can be combined with our cross-partition
weighting strategy to produce point embeddings with
high contrast at objects’ borders;

• We introduce the local point embedder, a lightweight
architecture, inspired by [36], to embed the local ge-
ometry and radiometry of 3D points in a compact way;

• We signiﬁcantly improve the state-of-the-art of point
cloud oversegmentation for two well-known and very
different datasets;

17440

(a) Input Point Cloud

(b) Learned Embedding

(c) Oversegmentation

(d) True Objects

Figure 1: Illustration of our framework on a hard-to-segment scene with a white board on a white wall: a colored point
cloud is given as input (a), an embedding is computed for each point (b), which allows a clustering technique to compute an
oversegmentation (c), which closely follows the ground truth (d). Throughout the ﬁgures of this paper, the embeddings are
projected into a 3-dimensional space to allow color visualization.

• When combined with the superpoint graph semantic
segmentation method, our approach improves upon the
state-of-the-art for this task as well.

2. Related work

Superpixels/ Supervoxels: There is a large body of lit-
erature on the oversegmentation of images into superpixels
[44] and videos into supervoxels [51]. These methods can
be divided into two groups: graph-based, which exploit the
pixels’ connectivity [11, 16, 31], and cluster-based, which
use the pixels’ relative positions [1, 46, 52, 28]. Recently,
deep learning methods have been successfully used to de-
velop supervized superpixels oversegmentation approaches,
either graph-based [32], or cluster-based [24].

Oversegmentation of 3D Point Clouds: The aforemen-
tioned methods perform well on images, but rely on the reg-
ular structure of pixels. 3D point clouds, as unordered point
sets with irregular distributions, require special attention.
[4] propose three extensions of 2D local variation graph-
based method [11] to 3D oversegmentation and study differ-
ent strategies for constructing the graph, edge weights, and
[43] introduce a graph-structured ap-
subgraph merging.
proach which exploits the structure of LiDAR sensors to re-
move edges corresponding to boundary points. [34] propose
a cluster-based method based on the k-means algorithm and
octrees. However, this method remains sensitive to the clus-
ters’ initialization. [12] use the visual saliency of RGBD
[30] propose a clustering
images to initialize clustering.
method which does not require such initialization, and is
therefore less sensitive to the irregular densities of LiDAR
point clouds. Likewise, [17] introduce an initialization-free
segmentation model formulated as a graph-structured opti-
mization problem. All these methods rely on hand-crafted
geometric and/or colorimetric features.

Deep Learning for 3D Point Clouds: The work in [36]
has pioneered the use of deep learning for 3D point cloud
processing. However, this usage has so far only been used
for semantic segmentation [29, 45, 9, 41, 38, 37, 53, 49],
object detection [56], or reconstruction [15]. To the best of

our knowledge, no supervised 3D point oversegmentation
technique that leverages deep learning-based embeddings
to generate superpoints has been developed yet.

Metric Learning: Metric learning aims to learn a sim-
ilarity function between data points with properties corre-
sponding to a given task [25]. In practice, an embedding
function associates each data point with a feature vector
attuned to a given objective. These objectives can be re-
lated to classiﬁcation [13, 40], or clustering [42, 19], among
many other applications (see [2] for a useful taxonomy). In
the context of deep learning, this can be achieved by using
a well-chosen loss, such as the contrastive loss [8, 5]; the
triplet loss [20] or some of its variants [48]. Notably, met-
ric learning has recently been used to improve the quality
of learned features for a 3D point semantic segmentation
task [10]. However, our task is different in the sense that
our embeddings are related to oversegmentation through a
graph partition problem rather than classiﬁcation.

3. Method

Our goal is to produce a high-quality 3D-point cloud
oversegmentation, so that
it can be in turn used by
superpoint-based semantic segmentation algorithms. This
translates into the following three properties:

(P1) object-purity: superpoints must not overlap over ob-

jects, especially if their semantics are different;

(P2) border recall:

the interface between superpoints

must coincide with the borders between objects;

(P3) regularity: the shape and contours of the superpoints

must be simple.

Our approach can be broken down into two steps: in Sec-
tion 3.1 we present the local cloud embedder, a simple neu-
ral network which associates each point with a compact em-
bedding that captures its local geometry and radiometry. In
Section 3.2, we describe how we compute a point cloud
oversegmentation from this embedding using either graph
or cluster-based oversegmentation algorithms.

7441

k × 3

Pi

pi

3

4

PTN

1

1

2

r

z

k × 3

˜Pi

6

˜pi

Figure 2: Architecture of the spatial transform network. It
takes a point’s coordinate as point-input pi and the coordi-
nates of its neighbors as set-input Pi. The vertex r computes
the radius of a point cloud (1), the vertex z extract the ver-
tical coordinate of a point’s position, and the vertex PTN
is a small PointNet-like network (2) which outputs a 2 × 2
rotation matrix around the z axis (4).
In this and subse-
quent ﬁgures, set-features (respectively point-features) are
represented by a dotted line (respectively a solid line). The
numbers above the lines represent the size of the channels.

Xi

MLP1

m
a
x
p
o
o
l

xi

MLP2

L2

ei

Figure 3: Architecture of the local point embedder (LPE)
(7), which computes an embedding set-feature Xi and
point-feature xi encoding the local radiometry and the nor-
malized geometry. The L2 block normalizes the output on
the unit sphere (6).

Throughout this paper we will stress the difference be-
tween set-features, which are unordered sets of descriptors
(such as information related to the neighbors of a point),
and point-features, which characterize a speciﬁc point. Set
features will always be capitalized, while point-features will
use lowercase.

Let us consider a point cloud C, with each point i de-
ﬁned with its position pi ∈ R3 and d-dimensional radio-
metric information ri ∈ Rd (this can be colors if avail-
able, or intensity for LiDAR scans, or be ignored if none
is available). Each point i is associated with the set-features
Pi and Ri, respectively comprised of the position and ra-
diometry of its k nearest neighbors Ni in the input cloud:
Pi = {pj | j ∈ Ni} , Ri = {rj | j ∈ Ni}. For ease of no-
tation, any operator or function f applied to a set-feature
X is to be understood as being applied to all its elements:
f (X) = {f (x) | x ∈ X}.

3.1. Local Point Embedding

Our objective is to associate to each point a compact m-
dimensional embedding ei characterizing its point-features
(position, color, etc.) and the geometry and radiometry of
its local neighborhood. The embeddings are constrained to
be within the m-unit sphere Sm, as suggested by [47], to

prevent collapse during the training phase, and to normalize
their distance with one another.

To this end, we introduce the Local Point Embedder
(LPE), a lightweight network inspired by PointNet [36].
However, unlike PointNet, LPE does not try to extract
information from the whole input point cloud, but rather
encodes each point based on purely local information.
Here, we describe the different units of our network.
Spatial Transform: This unit takes the positions of a target
point pi and its local k-neighborhood Pi, as represented in
Figure 2. It normalizes the neighbors’ coordinates around
pi, and such that the standard deviation of the point’s po-
sition is equal to 1 (3). Then, this neighborhood is rotated
around the z axis with a 2 × 2 rotation matrix computed
by small PointNet network PTN (4). As advocated by
[23], these steps aim to standardize the position of the
neighborhood clouds of each point. This helps the next net-
work to learn position distribution. Along the normalized
neighborhood position ˜Pi, this unit also outputs geometric
point-features ˜pi describing the elevation p(z)
, the neighbor-
hood radius, as well as its original orientation (through the
4 values of the rotation matrix: [Ωx,x, Ωx,y, Ωy,x, Ωy,y])(5).
By keeping track of the normalization operations,
the
embedding can stay covariant with the original neighbor-
hood’s radius, height, and original orientation, even though
the points’ positions have been normalized and rotated.

i

(1)

(2)

(3)

rad = std (Pi)
Ω = PTN( ˜Pi)
P ′
i = (Pi − pi)/rad

˜Pi = {p × Ω | p ∈ P ′
˜pi = [p(z)

, rad, Ω]

i

i } (4)

(5)

Local Point Embedder: The LPE network, represented
in Figure 3, computes a normalized embedding from two
inputs: a point-feature xi and a set-feature Xi. As in
PointNet [36],
the set-features are ﬁrst processed inde-
pendently by a multi-layer perceptron (denoted MLP1)
comprised of a succession of layers in the following order:
linear, activation (ReLu [33]), normalization (batch [22]),
and so on. The resulting set-features are then maxpooled
into a point-feature, which is concatenated with the input
point-feature. The resulting vector is processed through
another multi-layer perceptron MLP2 (7), and ﬁnally
normalized on the unit sphere.

The embeddings ei are computed for each point i of C
through a shared LPE (8). The input set-feature Xi is set
as the concatenation of the neighbour’s transformed posi-
tion ˜Pi and their radiometric information Ri, while the input
point-feature xi is composed of the neighborhood geomet-
ric point-feature ˜pi and the radiometry ri of point i.

L2(·) = ·/k · k
(6)
LPE(Xi, xi) = L2 (MLP2 ([max (MLP1(Xi)) , xi])) (7)
ei = LPE([ ˜Pi, Ri], [˜pi, ri])

(8)

7442

3.2. Graph Based Point Cloud Oversegmentation

3.2.1 The Generalized Minimal Partition Problem

Once the embeddings are computed, we deﬁne the super-
points with respect to an adjacency graph G = (C, E) de-
rived from the point cloud C. Note that E can be obtained
from the neighbors’ structure used for the LPE. However,
we ﬁnd that much smaller neighborhoods are needed to cap-
ture the cloud’s adjacency structure than to describe the lo-
cal neighborhood of points. As proposed by [17], we deﬁne
the superpoints as the constant connected components in G
of a piecewise-constant approximation of the embeddings
e ∈ SC
m. This approximation is the solution f ⋆ of the fol-
lowing optimization problem:

f ⋆ = arg min

f ∈RC×m X

i∈C

kfi − eik2 + X

(i,j)∈E

wi,j [fi 6= fj] ,

(9)

with w ∈ RE
+ the edges’ weight and [x 6= y] equal to 0
if x = y and 1 otherwise. To encourage the network to
split along high contrast areas, we deﬁne the edge weight as

wi,j = λ exp(cid:0) −1

σ kei − ejk2(cid:1) , with parameters λ, σ ∈ R+.

Problem (9), known as the generalized minimal partition
(GMP) and introduced by [26], is neither continuous, dif-
ferentiable, nor convex, and therefore the global minimum
cannot be realistically retrieved. However, the ℓ0-cut pur-
suit algorithm [26] allows for fast approximate solutions.

The contour penalty automatically implements (P3) for
reasonable parameterization of the problem. Note that the
optimization variable f can take its values in RC×m, while
each embedding ei is constrained on the m-sphere. This is
a limitation of our approach due to efﬁciency concerns. It
can lead to some suboptimal approximate solutions. How-
ever, we show in the numerical experiments that the learned
embeddings lead to satisfactory partitions.

3.2.2 Graph-Structured Contrastive Loss

As mentioned earlier, the semantic purity property (P1) is
the ﬁrst quality of superpoints. Once could imagine tak-
ing a metric estimating the semantic purity of the solution
of (9) as a loss function. However, the GMP is a non-
continuous non-convex optimization problem, and comput-
ing connected components on a graph is inherently non-
differentiable. This makes optimizing directly with respect
to properties of the partition very hard, if not impossible.

Instead, we note that if the border recall property (P2)
is implemented (i.e. superpoints and objects share the same
boundaries), then (P1) ensues. Therefore, we propose a
surrogate loss called graph-structured contrastive loss fo-
cusing on correctly detecting the borders between objects.
To this end, we deﬁne Eintra (resp. Einter ) the set of intra-
edges (resp. inter-edges) as the set of edges of G between

points within the same object (resp. point from different
adjacent objects).

In the spirit of the original contrastive loss [8], our loss
encourages embeddings of vertices linked by an intra-edge
to be similar, while rewarding different embeddings when
linked by an inter-edge:

ℓ(e) =

1
|E|


 X

(i,j)∈Eintra

φ (ei − ej) + X

(i,j)∈Einter

µi,jψ (ei − ej)
,

with φ (resp. ψ) a function minimal (resp. maximal) at 0,
and µi,j ∈ REinter a weight on inter-edges. A point embed-
ding function minimizing this loss will be uniform within
objects and have stark contrasts at their interface. Conse-
quently, the components of the piece-wise constant approx-
imation of (9) should follow the objects’ borders. This loss
differs from the triplet loss [20, 47], as it involves all ver-
tices within a graph (or a sub-graph) at once, and not just an
anchor and related positive/negative examples. In this way,
it bypasses the problem of example picking altogether. In-
deed, the positive and negative examples are directly given
by the adjacency structure set by Eintra and Einter.
It dif-
fers from [10] as it does not try to learn semantic informa-
tion, but rather to compute a signal on a graph such that its
constant approximation respects certain properties, with no
attention to semantics. Indeed, objects of different classes
can share the same embeddings as long as they are never
adjacent, such as ﬂoors and ceilings for indoor scenes.

We

chose φ,

the
function
promoting
intra-object
homo-
geneity as φ(x)
=
δ(pkxk2/δ2 + 1 − 1)
with δ = 0.3 (repre-
sented in Figure 4). This
means that the ﬁrst term
of ℓ is the (pseudo)-
Huber
graph-total
variation on the Eintra
edge [21, 6], promoting
smooth homogeneity of
embeddings within the
same object.

φ(x) and ψ(x)

2

1.5

1

0.5

−2

−1

1

x

2

Figure 4: The functions φ
(in blue) and ψ (in red) used
in the graph-structured con-
trastive loss.

With ψ(x) = max (1 − kxk, 0), the second part of ℓ is
the opposite of the truncated graph-total variation [55] on
the inter-edges. It penalizes similar embeddings at the bor-
der between objects. Conscious that our embeddings are
restricted to the unit sphere, we threshold this function for
differences larger than 1 (corresponding to a 60 degree an-
gle). In other words, ψ(x) encourages vertices linked by an
inter-edge to take embeddings with an euclidean distance of
1, but does not push for a larger difference.

Note that any embeddings that are constant within ob-

7443

jects, and with a difference of at least 1 between adjacent
objects, will have 0 loss. The four-color theorem [14] tells
us that it is always possible as long as the dimension of our
embedding is at least 3. However, because embeddings are
computed by the LPE, borders which do not present recog-
nizable geometric or radiometric conﬁgurations cannot be
recovered by our method.

3.2.3 Cross-Partition Weighting

The choice of µi,j plays a crucial role in the efﬁciency of
the graph-structured contrastive loss. Although (P2) does
imply (P1), small errors in the former can have drastic con-
sequences in the latter. Indeed, a single missed edge can
erroneously fuse two large superpoints covering different
objects. Therefore, we need to incorporate the induced par-
tition’s purity into the loss.

[32] introduced the segmentation-aware afﬁnity loss
(SEAL) implementing this idea. They propose weighting
intra-edges as 1, and inter-edges as µi,j = 1+|S | −|S\OS|
for i and j within the same superpoint S, with OS the
majority-object, i.e. the object for which most points of
S belongs to. Although [32] boasts impressive results for
superpixel oversegmentation, we were not able to extend
this success within our framework. We believe this stems
from three reasons: (i) all border edges of a superpoint are
weighted identically regardless of their inﬂuence on the pu-
rity and the size of the interface; (ii) as soon as a superpoint
no longer overlaps an object’s border, its weight decreases
dramatically to 1, making the loss very unstable; (iii) [32]
uses a different graph-based clustering[31].

To overcome these limitations, we introduce the cross-
partition weighting strategy. We ﬁrst compute the cross-
segmentation graph G = (C, E), deﬁned as the adjacency
graph of the cross-partition C of C between the superpoints
partition S and the object partition O. In other words, C
is the set of connected components of the graph G when
all edges either between objects or between superpoints are
removed, and the super-edge (i.e. set of edges) (U, V ) ∈ E
is the set of inter-edges of Einter between U and V in C:

C = {O ∩ S | O ∈ O, S ∈ S}
E = {{(i, j) ∈ (U × V ) ∩ Einter} | U, V ∈ C} .

We associate the following weight µU,V to each superedge
(U, V ) and µi,j to each edge:

µU,V =

µ min (| U |, | V |)

| (U, V ) |

for (U, V ) ∈ E

µi,j = µU,V

for all (i, j) ∈ (U, V )

with µ a parameter of the model. Such weights simulta-
neously take into account the inﬂuence of the edges in the
purity and the shape of the interfaces. Indeed, should an

superpoint

majority object

trespassing
interface

µLW,LD =

µRW,RD =

Figure 5: Illustration of the cross-partition weighting strat-
egy on a scene comprised of a door (D) and a wall (W).
Two superpoints L (left) and R (right) overlap the door. The
superedge (LW, LD)(resp. (RW, RD)) represent the adja-
cency between the part of the left (resp. right) superpoint
covering the wall and the part covering the door. With fewer
trespassing points and a longer interface than (RW, RD),
the weights of the edges constituting (LW, LD) are smaller.

edge of the superedge (U, V ) be missed as a border, the
superpoints U and V would be merged. Since U and V
cover different objects (by deﬁnition of E), such a merger
would induce at least min (| U |, | V |) vertices trespassing,
i.e. not being in the majority-object of the merged super-
point.The weights are also divided by the number of edges
constituting the interface between U and V in order to dis-
tribute evenly the penalty over the number of edges consti-
tuting an interface. This prevents long borders from being
over-represented in the loss. See Figure 5 for an illustration.

3.3. Cluster Based Oversegmentation

We also implemented a generalization of the method of
[24] to the 3D setting. The main advantage of this approach
is that the loss can directly implement (P1) through the
cross-entropy of the averaged semantic classes within su-
perpoints. However, this approach remains hindered by its
sensitivity to the superpoint initialization, and its inability
to adapt the superpoints’ size to the local complexity of the
scene. Furthermore, as it bypasses (P3), it produces super-
points with complicated contour.

3.4. Implementation Details

We use a modiﬁed version of the ℓ0-cut pursuit algo-

rithm1[26], with two main differences:

• to prevent the creation of many small superpoints in
regions of high contrast, we merge components greed-
ily with respect to the objective energy deﬁned in (9),
as long as they are smaller than a given threshold ;

• we heuristically improved the forward step (8) from
[26], such that the regularization strength increases ge-
ometrically by a factor (of 0.7) along the iterations.

1https://github.com/loicland/cut-pursuit

7444

(a) S3DIS scene with 58 objects. Superpoint count : SSP 442, VCCS 436, Lin 423.

Input cloud

Ground truth objects LPE embeddings

SSP (ours)

VCCS [34]

Lin in [30]

(b) vKITTI scene with 233 objects. Superpoint count: SSP 420, VCCS 422, Lin 425.

Figure 6: Illustration of the oversegmentations of our framework, and from competing algorithms.

This helps improve the quality of the lower optima re-
trieved, and consequently the oversegmentation’s.

To limit the size of the superpoints we concatenate to the
points’ embeddings their 3D coordinates in (9) multiplied
by a parameter αspatial, in the manner of [1]. This determines
the maximum size that superpoints can reach.

In all our experiments, we set m the dimension of our
embeddings to 4. We choose a light architecture for the
LPE, with less than 15, 000 parameters. The exact network
conﬁgurations for each dataset are detailed in the appendix.

4. Numerical Experiments

4.1. Datasets

We evaluate our approach on two datasets of different
natures. The ﬁrst one is S3DIS [3], composed of dense in-
door scans of rooms in an ofﬁce setting. The second one is
vKITTI [9], an outdoor dataset of urban scenes that mim-
ics sparse LiDAR acquisitions. Note that only S3DIS has
individual object annotation. We consider the objects of
vKITTI to be the connected components of the semantic la-
bels in the adjacency graph G. For vKITTI, we consider the
performance of our algorithm with and without color infor-
mation. Both datasets are large scale (close to 600 million
points for S3DIS and close to 15 million for vKITTI). We
subsample them using a regular grid of voxels (3cm wide
for S3DIS and 5cm wide for vKITTI). In each voxel, we av-
erage the position and color of the contained points. This al-
lows us to decrease the computation time and memory load.

4.2. Point Cloud Oversegmentation

Evaluation Metrics: There are many standard metrics
which assess the quality of point cloud oversegmentations
with respect to properties (P1), (P2), and (P3). In particu-
lar, the Boundary Recall (BR) and Precision (BP) are used

to evaluate the ability of the superpoints to adhere to, and
not cross, object boundaries ((P2), (P3)). In the literature,
these measures are deﬁned with respect to boundary pix-
els [34] or points [30]. However, we argue that transition
occurs between points and not at points for point clouds.
Consequently, we deﬁne Epred
inter the set of predicted transi-
tion, i.e. the subset of edges of E that connect two points
of C in two different superpoints. These metrics are often
given with respect to a tolerance, i.e. the distance at which a
predicted transition must take place from an actual object’s
border for the latter to be considered retrieved. We set this
distance to 1 edge, which leads us to deﬁne E(1)
inter the set of
inter-edges expanded to all directly adjacent edges in E:

E(1)

inter = {(i, j) ∈ E | ∃(i, k) or (j, k) ∈ Einter} .

This allows us to deﬁne the boundary recall and precision
with 1 edge tolerance for a set of predicted transition Epred
inter:

BR =

| Epred

inter ∩ E(1)
| Einter |

inter |

, BP =

| Epred

inter |

inter ∩ E(1)
| Epred
inter |

.

Since the end-goal of our point cloud oversegmentation
framework is to provide useful superpoints for seman-
tic segmentation, we deﬁne the Oracle Overall Accuracy
(OOA). To assess object purity (P1), this metric character-
izes the accuracy of the labeling that associates each super-
point S of a segmentation S with its majority ground-truth
label. Formally, let l ∈ KC be the semantic labels of each
point within a set of classes K, we deﬁne the OOA of a point
cloud segmentation S as:

loracle(S) = mode {li | i ∈ S}

OOA =

1
| C | X

S∈S

X

i∈S

(cid:2)li = loracle(S)(cid:3) ,

7445

98

96

94

A
O
O

R
B

80

70

60

50

92

300

400

500

600

700

800

900 1,000

300

400

500

600

700

800

900 1,000

30

25

P
B

20

15

10

300

SSP (Ours)

SSP-Cluster (Ours)
Geom-Graph* [17]

VCCS [34]
Lin in [30]

400

500

600

700

800

900 1,000

# superpoints

# superpoints

# superpoints

(a) OOA for S3DIS

(b) BR for S3DIS

(c) BP for S3DIS

98

A
O
O

96

94

90

80

R
B

70

60

50

P
B

40

30

20

300

400

500

600

700

800

900 1,000

60

300

400

500

600

700

800

900 1,000

300

400

500

600

700

800

900 1,000

# superpoints

# superpoints

# superpoints

(d) OOA for vKITTI

(e) BR for vKITTI

(f) BP for vKITTI

Figure 7: Performance of the different algorithms on the 6-fold S3DIS dataset (a, b, c), and the 6-fold vKITTI dataset (d,
e, f). The results of the method annotated with an asterix * have not been reported before. SSP-Cluster and VCCS are not
represented for vKITTI for the sake of legibility as their performance is too low.

with [x = y] the function equal to 1 if x = y and 0 other-
wise. Note that the OOA is closely related to the ASA [31],
but consider the majority labels of all points within a super-
pixel rather than the label of the objects with most overlap.
In this sense, it is a tighter upper bound to the achievable
accuracy of a superpoint-based semantic classiﬁcation al-
gorithm using S. This metric is also more fair than the un-
dersegmentation error [28] for other methods such as [17],
or our cluster-based approach, as they do not try to retrieve
objects directly, but rather regions of C with homogeneous
semantic labeling.

Competing algorithms: We denote by SSP (Supervized
SuperPoint) our method when using LPE to learn point em-
beddings and then derive the superpoints using the graph-
based methods described in Section 3.2.2, and SSP-Cluster
when using the cluster-based method deﬁned in Section 3.3
instead. We ﬁrst assess the beneﬁt of learning embeddings
by comparing our results to those of [17], dubbed here
Geom-Graph. This method computes superpoints by solv-
ing the generalized minimal partition problem as well, but
with handcrafted geometric features in place of our learned
embeddings. We illustrate in Figure 7 the oversegmenta-
tions produced by our approach and two state-of-the-art al-
gorithms: VCCS [34] and the work of Lin in [30].

We observe that our approach signiﬁcantly outperforms

the other approaches on all metrics. In particular, we re-
mark that SSP only requires under 350 superpoints to reach
a performance comparable with VCCS with over 1, 800 su-
perpoints on S3DIS. Furthermore, the quality of the border
is unmatched in our range of superpoints. The improve-
ment is less signiﬁcant on vKITTI, which could be due to
the difﬁculty of constructing an adjacency graph on such
a sparse acquisition. The performance is degraded further
without color information, as some transition are not pre-
dictable with purely from the geometry. Geom-Graph per-
forms well on the accuracy, but not on the boundary. This
is expected as the handcrafted geometric features cannot de-
tect some borders, such as adjacent walls. SSP-Cluster per-
forms better than the unsupervized cluster-based method of
Lin et al. , but still suffer from the typical limitations of
clustering methods, such as sensitivity to initialization.

In terms of computational speed, the embeddings can be
computed very efﬁciently in parallel on a GPU with over
3 million embeddings per second on a 1080Ti GPU. The
bottleneck remains solving the graph partition problem in
(9), which can process around 100, 000 points per second.

4.3. Semantic Segmentation

In Table 1 and Table 2, we show how our point cloud
oversegmentation framework can be successfully used by

7446

the superpoint-based semantic segmentation technique of
[27]2 (SPG). We replace the unsupervized superpoint com-
putation with our best-performing approach, SSP. We eval-
uate the resulting semantic segmentation using standard
classiﬁcation metrics: overall accuracy (OA), mean per-
class accuracy (mAcc) and mean per-class intersection-
over-union (mIOU). We observe a signiﬁcant increase in the
performance of SPG, beating concurrent methods on both
datasets. In particular, we observe that our method allows
for better retrieval of small objects (see detailed IoU in the
appendix), which translates into much better per-class met-
rics, although the overall accuracy is not necessarily better
than the latest state-of-the-art algorithms.

4.4. Ablation Study

In Table 3, we present an ablation study to empiri-
cally justify some of our design choices. To make things
more legible, we present the increase/decrease of the 3
performance metrics at 500 superpoints (linearly interpo-
lated) of alternative methods compared to ours, on the
ﬁrst cross-validation fold of the S3DIS dataset.
In par-
ticular we present Prop-weight, an alternative version in
which the cross-partition weighting is replaced by a simple
inversely-proportional weighting of the inter/intra edges.
Predictably, this method gives lesser results as the edges are
not weighted according to their inﬂuence in the partition.
However, since the weights of the intra-edge are propor-
tionally higher, the border precision is improved. We im-
plemented the weights of the segmentation-aware afﬁnity
loss of [32] as well for method SEAL-weights, with com-
parable results to the Prop-weight. In +TV-TV, we replace
our choice of function φ and ψ in the loss by respectively
| · | and − | · |, so that our loss is closer to the pairwise
afﬁnity loss used by [10] (but still structured by the graph).
However, this approach wouldn’t give meaningful partition
as the intra-edge term conﬂicts with the constraint that the
embeddings are constrained on the sphere. Removing this
restriction leads the collapse of the embeddings around 0.
We also tried to stack the LPE in layers, using or not a
residual structure comparable to the one used in [18] to in-
crease their receptive ﬁelds (more details are given in the
appendix). The best results were achieved with two layers:
2-Layers and 2-Residuals. However, we observe that when
compared with LPE of a similar number of parameters, the
gains are insigniﬁcant if not null. We conclude that to em-
bed points in order to detect borders, a small receptive ﬁeld
with a shallow architecture is sufﬁcient.

5. Conclusion

In this paper, we presented the ﬁrst supervized 3D point
cloud oversegmentation framework. Using a simple point

2https://github.com/loicland/superpoint-graph

Method

OA mAcc mIoU

6-fold cross validation

PointNet++ [37]

PointNet [36] in [9]

78.5 66.2
Engelmann et al. in [9] 81.1 66.4
81.0 67.1
Engelmann et al. in [10] 84.0 67.8
85.5 73.0
88.1 75.6
87.9 78.3

SSP + SPG (ours)

PointCNN [29]

SPG [27]

Fold 5

-

pointCNN [29]

PointNet [36] in [10]

49.0
Engelmann et al. in [10] 84.2 61.8
85.9 63.9
86.4 66.5
67.0
87.9 68.2

SPG [27]
PCCN [49]

SSP + SPG (ours)

-

47.6
49.7
54.5
58.3
62.1
65.4
68.4

41.1
52.2
57.3
58.0
58.3
61.7

Table 1: Performance of different methods for the semantic
segmentation task on the S3DIS dataset. The top table is for
the 6-fold cross validation, the bottom table on the ﬁfth fold
only.

Method

PointNet [36]

OA mAcc mIoU
34.4
79.7 47.0
Engelmann et al. in [10] 79.7 57.6
35.6
36.2
Engelmann et al. in [9] 80.6 49.7
87.8 54.1
41.6
52.0
84.3 67.3

SSP + SPG (ours)

3P-RNN [54]

Table 2: Performance of different methods for the semantic
segmentation task on the vKITTI dataset with 6-fold cross
validation.

Method

Best

Prop-weights
SEAL-weights

2-Layers

2-Residuals

BP
# parameters OOA BR
96.2 73.3
22.1
-2.6 -12.2 +10.4
-1.3 -11.3 +3.8
-0.3
-0.1
+0.0
-0.7

13,816
13,816
13,816
14,688
14,688

-0.7
-0.2

Table 3: Impact of some of our design choice on S3DIS.
Best is the SSP method with cross-partition weights.

embedding network and a new graph-structured loss func-
tion, we were able to achieve signiﬁcant improvements
compared to the state-of-the-art of point cloud oversegmen-
tation. When combined with a superpoint-based semantic
segmentation method, our method sets a new state-of-the-
art of semantic segmentation as well. A video illustration
is accessible at https://youtu.be/bKxU03tjLJ4.
The source code will be made available to the community
as well as trained networks in an update to the superpoint-
graph repository2. Future work will focus on improving
the solving method for the generalized minimum minimal
partition problem to better handle spherically-bounded vari-
ables, and to improve its computational performance.

7447

References

[1] R. Achanta, A. Shaji, K. Smith, A. Lucchi, P. Fua,
S. Süsstrunk, et al. Slic superpixels compared to state-of-
the-art superpixel methods.
IEEE transactions on Pattern
Analysis and Machine Intelligence, 34(11), 2012. 1, 2, 6

[2] E. Aljalbout, V. Golkov, Y. Siddiqui, and D. Cremers. Clus-
tering with deep learning: Taxonomy and new methods.
arXiv preprint arXiv:1801.07648, 2018. 2

[3] I. Armeni, O. Sener, A. R. Zamir, H. Jiang, I. K. Brilakis,
M. Fischer, and S. Savarese. 3d semantic parsing of large-
scale indoor spaces.
In CVPR 2016, Las Vegas, NV, USA,
June 27-30, 2016, 2016. 6

[4] Y. Ben-Shabat, T. Avraham, M. Lindenbaum, and A. Fischer.
Graph based over-segmentation methods for 3d point clouds.
Computer Vision and Image Understanding, 2018. 2

[5] J. Bromley, I. Guyon, Y. LeCun, E. Säckinger, and R. Shah.
Signature veriﬁcation using a" siamese" time delay neural
network. In Advances in Neural Information Processing Sys-
tems, 1994. 2

[6] P. Charbonnier, L. Blanc-Féraud, G. Aubert, and M. Bar-
laud. Deterministic edge-preserving regularization in com-
puted imaging.
IEEE Transactions on Image Processing,
6(2), 1997. 4

[7] J. Chen and B. Chen. Architectural modeling from sparsely
scanned range data. International Journal of Computer Vi-
sion, 78(2-3), 2008. 1

[8] S. Chopra, R. Hadsell, and Y. LeCun. Learning a similarity
metric discriminatively, with application to face veriﬁcation.
In CVPR, volume 1. IEEE, 2005. 2, 4

[9] F. Engelmann, T. Kontogianni, A. Hermans, and B. Leibe.
Exploring spatial context for 3d semantic segmentation of
point clouds. In ICCV Workshops, 2017. 2, 6, 8

[10] F. Engelmann, T. Kontogianni, J. Schult, and B. Leibe. Know
what your neighbors do: 3d semantic segmentation of point
clouds. In GMDL Workshop, ECCV, 2018. 2, 4, 8

[11] P. F. Felzenszwalb and D. P. Huttenlocher. Efﬁcient graph-
International Journal of Com-

based image segmentation.
puter Vision, 59(2), 2004. 2

[12] G. Gao, M. Lauri, J. Zhang, and S. Frintrop. Saliency-guided
adaptive seeding for supervoxel segmentation. In IEEE/RSJ
International Conference on Intelligent Robots and Systems,
IROS, 2017. 2

[13] J. Goldberger, G. E. Hinton, S. T. Roweis, and R. R.
Salakhutdinov. Neighbourhood components analysis. In Ad-
vances in Neural Information Processing Systems, 2005. 2

[14] G. Gonthier. Formal proof–the four-color theorem. Notices

of the AMS, 55(11), 2008. 5

[15] T. Groueix, M. Fisher, V. G. Kim, B. C. Russell, and
M. Aubry. Atlasnet: A papier-maché approach to learning
3d surface generation. In CVPR. IEEE, 2017. 2

[16] M. Grundmann, V. Kwatra, M. Han, and I. A. Essa. Efﬁ-
cient hierarchical graph-based video segmentation. In CVPR,
2010. 2

[17] S. Guinard and L. Landrieu.

Weakly supervised
segmentation-aided classiﬁcation of urban scenes from 3d li-
dar point clouds. In ISPRS Workshop, 2017. 1, 2, 4, 7

[18] K. He, X. Zhang, S. Ren, and J. Sun. Deep residual learning

for image recognition. In CVPR, 2016. 8

[19] J. R. Hershey, Z. Chen, J. Le Roux, and S. Watanabe. Deep
clustering: Discriminative embeddings for segmentation and
separation.
In Acoustics, Speech and Signal Processing
(ICASSP), 2016 IEEE. IEEE, 2016. 2

[20] E. Hoffer and N. Ailon. Deep metric learning using triplet
In International Workshop on Similarity-Based

network.
Pattern Recognition. Springer, 2015. 2, 4

[21] P. J. Huber et al. Robust regression: asymptotics, conjectures

and monte carlo. The Annals of Statistics, 1(5), 1973. 4

[22] S. Ioffe and C. Szegedy. Batch normalization: Accelerating
deep network training by reducing internal covariate shift. In
ICML, 2015. 3

[23] M. Jaderberg, K. Simonyan, A. Zisserman, et al. Spatial
In Advances in Neural Information

transformer networks.
Processing Systems, 2015. 3

[24] V. Jampani, D. Sun, M. Liu, M. Yang, and J. Kautz. Super-

pixel sampling networks. In ECCV, 2018. 1, 2, 5

[25] B. Kulis et al. Metric learning: A survey. Foundations and

Trends in Machine Learning, 5(4), 2013. 2

[26] L. Landrieu and G. Obozinski. Cut pursuit: Fast algorithms
to learn piecewise constant functions on general weighted
graphs. SIAM Journal on Imaging Sciences, 10(4), 2017. 4,
5

[27] L. Landrieu and M. Simonovsky. Large-scale point cloud
In CVPR.

semantic segmentation with superpoint graphs.
IEEE, 2018. 1, 8

[28] A. Levinshtein, A. Stere, K. N. Kutulakos, D. J. Fleet, S. J.
Dickinson, and K. Siddiqi. Turbopixels: Fast superpixels us-
ing geometric ﬂows. IEEE Transactions on Pattern Analysis
and Machine Intelligence, 31(12), 2009. 2, 7

[29] Y. Li, R. Bu, M. Sun, and B. Chen. PointCNN. arXiv preprint

arXiv:1801.07791, 2018. 2, 8

[30] Y. Lin, C. Wang, D. Zhai, W. Li, and J. Li. Toward bet-
ter boundary preserved supervoxel segmentation for 3d point
clouds. ISPRS Journal of Photogrammetry and Remote Sens-
ing, 143, 2018. 2, 6, 7

[31] M.-Y. Liu, O. Tuzel, S. Ramalingam, and R. Chellappa. En-
tropy rate superpixel segmentation. In CVPR. IEEE, 2011.
2, 5, 7

[32] W.-C. T. M.-Y. Liu, V. J. D. S. Shao-Yi, C. M.-H. Yang,
and J. Kautz. Learning superpixels with segmentation-aware
afﬁnity loss. In CVPR. IEEE, 2018. 1, 2, 5, 8

[33] V. Nair and G. E. Hinton. Rectiﬁed linear units improve re-

stricted boltzmann machines. In ICML, 2010. 3

[34] J. Papon, A. Abramov, M. Schoeler, and F. Wörgötter. Voxel
cloud connectivity segmentation - supervoxels for point
clouds. In CVPR, 2013. 2, 6, 7

[35] S. Pu, G. Vosselman, et al. Automatic extraction of build-
ing features from terrestrial laser scanning.
International
Archives of Photogrammetry, Remote Sensing and Spatial
Information Sciences, 36(5), 2006. 1

[36] C. R. Qi, H. Su, K. Mo, and L. J. Guibas. Pointnet: Deep
learning on point sets for 3d classiﬁcation and segmentation.
CVPR, IEEE, 1(2), 2017. 1, 2, 3, 8

7448

[37] C. R. Qi, L. Yi, H. Su, and L. J. Guibas. PointNet++: Deep
hierarchical feature learning on point sets in a metric space.
In NIPS, 2017. 2, 8

[38] G. Riegler, A. O. Ulusoy, and A. Geiger. OctNet: Learning
deep 3D representations at high resolutions. In CVPR, 2017.
2

[39] R. B. Rusu, Z. C. Marton, N. Blodow, M. Dolha, and
M. Beetz. Towards 3d point cloud based object maps for
household environments. Robotics and Autonomous Sys-
tems, 56(11), 2008. 1

[40] R. Salakhutdinov and G. Hinton. Learning a nonlinear em-
bedding by preserving class neighbourhood structure. In Ar-
tiﬁcial Intelligence and Statistics, 2007. 2

[41] M. Simonovsky and N. Komodakis.

Dynamic edge-
conditioned ﬁlters in convolutional neural networks on
graphs. In CVPR, 2017. 2

[42] H. O. Song, S. Jegelka, V. Rathod, and K. Murphy. Learn-
able structured clustering framework for deep metric learn-
ing. CoRR, abs/1612.01213, 2016. 2

[43] S. Song, H. Lee, and S. Jo. Boundary-enhanced supervoxel
segmentation for sparse outdoor lidar data. Electronics Let-
ters, 50(25), 2014. 2

[44] D. Stutz, A. Hermans, and B. Leibe. Superpixels: An eval-
uation of the state-of-the-art. Computer Vision and Image
Understanding, 166, 2018. 2

[45] L. P. Tchapmi, C. B. Choy, I. Armeni, J. Gwak, and
S. Savarese. SEGCloud: Semantic segmentation of 3D point
clouds. International Conference on 3D Vision, 2017. 2

[46] M. Van den Bergh, X. Boix, G. Roig, and L. Van Gool.
SEEDS: superpixels extracted via energy-driven sampling.
International Journal of Computer Vision, 111(3), 2015. 2

[47] J. Wang, Y. Song, T. Leung, C. Rosenberg, J. Wang,
J. Philbin, B. Chen, and Y. Wu. Learning ﬁne-grained im-
age similarity with deep ranking. In CVPR, 2014. 3, 4

[48] J. Wang, F. Zhou, S. Wen, X. Liu, and Y. Lin. Deep metric

learning with angular loss. In ICCV. IEEE, 2017. 2

[49] S. Wang, S. Suo, W.-C. M. A. Pokrovsky, and R. Urtasun.
Deep parametric continuous convolutional neural networks.
In CVPR, 2018. 2, 8

[50] X. Xiong, D. Munoz, J. A. Bagnell, and M. Hebert. 3-d scene
analysis via sequenced predictions over points and regions.
In ICRA IEEE. IEEE, 2011. 1

[51] C. Xu and J. J. Corso. Evaluation of super-voxel methods for

early video processing. In CVPR, 2012. 2

[52] J. Yao, M. Boben, S. Fidler, and R. Urtasun. Real-time
In

coarse-to-ﬁne topologically preserving segmentation.
CVPR, 2015. 2

[53] X. Ye, J. Li, H. Huang, L. Du, and X. Zhang. 3D recurrent
neural networks with context fusion for point cloud semantic
segmentation. In ECCV. Springer, 2018. 2

[54] X. Ye, J. Li, H. Huang, L. Du, and X. Zhang. 3d recurrent
neural networks with context fusion for point cloud semantic
segmentation. In ECCV, 2018. 8

[55] T. Zhang et al. Some sharp performance bounds for least
squares regression with l1 regularization. The Annals of
Statistics, 37(5A), 2009. 4

[56] Y. Zhou and O. Tuzel. Voxelnet: End-to-end learning for

point cloud based 3d object detection. In CVPR, 2017. 2

7449

